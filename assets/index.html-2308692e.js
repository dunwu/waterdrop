const e=JSON.parse('{"key":"v-55036d15","path":"/pages/220f88ff/","title":"Java 并发之线程池","lang":"zh-CN","frontmatter":{"title":"Java 并发之线程池","date":"2019-12-24T23:52:25.000Z","permalink":"/pages/220f88ff/","category":["Java","JavaCore","并发"],"tag":["Java","JavaCore","并发","线程池"],"description":"Java 并发之线程池 线程池简介 线程池就是管理一系列线程的资源池，其提供了一种限制和管理线程资源的方式。每个线程池还维护一些基本统计信息，例如已完成任务的数量。 如果并发请求数量很多，但每个线程执行的时间很短，就会出现频繁的创建和销毁线程。如此一来，会大大降低系统的效率，可能频繁创建和销毁线程的时间、资源开销要大于实际工作的所需。 使用 线程池的好处 有以下几点： 降低资源消耗 - 通过重复利用已创建的线程降低线程创建和销毁造成的消耗。 提高响应速度 - 当任务到达时，任务可以不需要等到线程创建就能立即执行。 提高线程的可管理性 - 线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/220f88ff/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"Java 并发之线程池"}],["meta",{"property":"og:description","content":"Java 并发之线程池 线程池简介 线程池就是管理一系列线程的资源池，其提供了一种限制和管理线程资源的方式。每个线程池还维护一些基本统计信息，例如已完成任务的数量。 如果并发请求数量很多，但每个线程执行的时间很短，就会出现频繁的创建和销毁线程。如此一来，会大大降低系统的效率，可能频繁创建和销毁线程的时间、资源开销要大于实际工作的所需。 使用 线程池的好处 有以下几点： 降低资源消耗 - 通过重复利用已创建的线程降低线程创建和销毁造成的消耗。 提高响应速度 - 当任务到达时，任务可以不需要等到线程创建就能立即执行。 提高线程的可管理性 - 线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-15T00:29:21.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"JavaCore"}],["meta",{"property":"article:tag","content":"并发"}],["meta",{"property":"article:tag","content":"线程池"}],["meta",{"property":"article:published_time","content":"2019-12-24T23:52:25.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-15T00:29:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 并发之线程池\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-12-24T23:52:25.000Z\\",\\"dateModified\\":\\"2025-09-15T00:29:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"线程池简介","slug":"线程池简介","link":"#线程池简介","children":[]},{"level":2,"title":"Executor 框架","slug":"executor-框架","link":"#executor-框架","children":[{"level":3,"title":"核心 API 概述","slug":"核心-api-概述","link":"#核心-api-概述","children":[]},{"level":3,"title":"Executor","slug":"executor","link":"#executor","children":[]},{"level":3,"title":"ExecutorService","slug":"executorservice","link":"#executorservice","children":[]},{"level":3,"title":"ScheduledExecutorService","slug":"scheduledexecutorservice","link":"#scheduledexecutorservice","children":[]}]},{"level":2,"title":"ThreadPoolExecutor","slug":"threadpoolexecutor","link":"#threadpoolexecutor","children":[{"level":3,"title":"构造方法","slug":"构造方法","link":"#构造方法","children":[]},{"level":3,"title":"重要字段","slug":"重要字段","link":"#重要字段","children":[]},{"level":3,"title":"其他重要方法","slug":"其他重要方法","link":"#其他重要方法","children":[]},{"level":3,"title":"使用示例","slug":"使用示例","link":"#使用示例","children":[]}]},{"level":2,"title":"线程池原理","slug":"线程池原理","link":"#线程池原理","children":[]},{"level":2,"title":"Executors","slug":"executors","link":"#executors","children":[{"level":3,"title":"FixedThreadPool","slug":"fixedthreadpool","link":"#fixedthreadpool","children":[]},{"level":3,"title":"SingleThreadExecutor","slug":"singlethreadexecutor","link":"#singlethreadexecutor","children":[]},{"level":3,"title":"CachedThreadPool","slug":"cachedthreadpool","link":"#cachedthreadpool","children":[]},{"level":3,"title":"ScheduleThreadPool","slug":"schedulethreadpool","link":"#schedulethreadpool","children":[]},{"level":3,"title":"WorkStealingPool","slug":"workstealingpool","link":"#workstealingpool","children":[]}]},{"level":2,"title":"线程池最佳实践","slug":"线程池最佳实践","link":"#线程池最佳实践","children":[{"level":3,"title":"计算线程数量","slug":"计算线程数量","link":"#计算线程数量","children":[]},{"level":3,"title":"建议使用有界阻塞队列","slug":"建议使用有界阻塞队列","link":"#建议使用有界阻塞队列","children":[]},{"level":3,"title":"监测线程池运行状态","slug":"监测线程池运行状态","link":"#监测线程池运行状态","children":[]},{"level":3,"title":"线程池和 ThreadLocal","slug":"线程池和-threadlocal","link":"#线程池和-threadlocal","children":[]},{"level":3,"title":"重要任务应该自定义拒绝策略","slug":"重要任务应该自定义拒绝策略","link":"#重要任务应该自定义拒绝策略","children":[]},{"level":3,"title":"动态线程池","slug":"动态线程池","link":"#动态线程池","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1757896161000,"updatedTime":1757896161000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":1}]},"readingTime":{"minutes":26.51,"words":7952},"filePathRelative":"01.Java/01.JavaCore/并发/Java_并发_线程池.md","localizedDate":"2019年12月24日","excerpt":"<h1> Java 并发之线程池</h1>\\n<h2> 线程池简介</h2>\\n<p>线程池就是管理一系列线程的资源池，其提供了一种限制和管理线程资源的方式。每个线程池还维护一些基本统计信息，例如已完成任务的数量。</p>\\n<p>如果并发请求数量很多，但每个线程执行的时间很短，就会出现频繁的创建和销毁线程。如此一来，会大大降低系统的效率，可能频繁创建和销毁线程的时间、资源开销要大于实际工作的所需。</p>\\n<p>使用 <strong>线程池的好处</strong> 有以下几点：</p>\\n<ul>\\n<li><strong>降低资源消耗</strong> - 通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</li>\\n<li><strong>提高响应速度</strong> - 当任务到达时，任务可以不需要等到线程创建就能立即执行。</li>\\n<li><strong>提高线程的可管理性</strong> - 线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。</li>\\n</ul>","autoDesc":true}');export{e as data};
