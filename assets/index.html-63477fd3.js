import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a as s,d as e,b as n,e as t}from"./app-6745ace7.js";const i={},u=t(`<h1 id="设计模式之组合模式" tabindex="-1"><a class="header-anchor" href="#设计模式之组合模式" aria-hidden="true">#</a> 设计模式之组合模式</h1><h2 id="意图" tabindex="-1"><a class="header-anchor" href="#意图" aria-hidden="true">#</a> 意图</h2><p><strong>组合模式</strong> (Component) 是一种结构型设计模式，将对象组合成<strong>树形结构</strong>以表示“部分-整体”的层次结构。</p><p>组合模式使得用户对单个对象和组合对象的使用具有<strong>唯一性</strong>。</p><h2 id="适用场景" tabindex="-1"><a class="header-anchor" href="#适用场景" aria-hidden="true">#</a> 适用场景</h2><p>组合模式的适用场景：</p><ul><li>想要表示对象的部分-整体层次结构。</li><li>想要客户端忽略组合对象与单个对象的差异，客户端将统一地使用组合结构中的所有对象。</li></ul><p>关于分级数据结构的一个普遍性的例子是你每次使用电脑时所遇到的 <strong>文件系统</strong>。</p><p>文件系统由目录和文件组成。每个目录都可以装内容。目录的内容可以是文件，也 可以是目录。</p><p>按照这种方式，计算机的文件系统就是以递归结构来组织的。如果你想要描述这样的数据结构，那么你可以使用组合模式。</p><h2 id="结构" tabindex="-1"><a class="header-anchor" href="#结构" aria-hidden="true">#</a> 结构</h2><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20210430162149.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="结构说明" tabindex="-1"><a class="header-anchor" href="#结构说明" aria-hidden="true">#</a> 结构说明</h3><ol><li><strong>组件</strong> （Component） 接口描述了树中简单项目和复杂项目所共有的操作。</li><li><strong>叶节点</strong> （Leaf） 是树的基本结构， 它不包含子项目。一般情况下， 叶节点最终会完成大部分的实际工作， 因为它们无法将工作指派给其他部分。</li><li><strong>容器</strong> （Container）——又名 “组合 （Composite）”——是包含叶节点或其他容器等子项目的单位。 容器不知道其子项目所属的具体类， 它只通过通用的组件接口与其子项目交互。容器接收到请求后会将工作分配给自己的子项目， 处理中间结果， 然后将最终结果返回给客户端。</li><li><strong>客户端</strong> （Client） 通过组件接口与所有项目交互。 因此， 客户端能以相同方式与树状结构中的简单或复杂项目交互。</li></ol><h3 id="结构代码范式" tabindex="-1"><a class="header-anchor" href="#结构代码范式" aria-hidden="true">#</a> 结构代码范式</h3><p><strong>Component</strong> : 组合中的对象声明接口，在适当的情况下，实现所有类共有接口的默认行为。声明一个接口用于访问和管理 Component 的子部件。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Component</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token class-name">Add</span><span class="token punctuation">(</span><span class="token class-name">Component</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token class-name">Remove</span><span class="token punctuation">(</span><span class="token class-name">Component</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token class-name">Display</span><span class="token punctuation">(</span><span class="token keyword">int</span> depth<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Leaf</strong> : 表示叶节点对象。叶子节点没有子节点。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Leaf</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">Leaf</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Add</span><span class="token punctuation">(</span><span class="token class-name">Component</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Can not add to a leaf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Remove</span><span class="token punctuation">(</span><span class="token class-name">Component</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Can not remove from a leaf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Display</span><span class="token punctuation">(</span><span class="token keyword">int</span> depth<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> temp <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> depth<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            temp <span class="token operator">+=</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>temp <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Composite</strong> : 定义枝节点行为，用来存储子部件，在 Component 接口中实现与子部件相关的操作。例如 Add 和 Remove。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Composite</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span><span class="token punctuation">&gt;</span></span> children <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Composite</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Add</span><span class="token punctuation">(</span><span class="token class-name">Component</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        children<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Remove</span><span class="token punctuation">(</span><span class="token class-name">Component</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        children<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Display</span><span class="token punctuation">(</span><span class="token keyword">int</span> depth<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> temp <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> depth<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            temp <span class="token operator">+=</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>temp <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Component</span> c <span class="token operator">:</span> children<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span></span>Display</span><span class="token punctuation">(</span>depth <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Client</strong> : 通过 Component 接口操作结构中的对象。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompositePattern</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Composite</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Composite</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token namespace">root<span class="token punctuation">.</span></span>Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Leaf</span><span class="token punctuation">(</span><span class="token string">&quot;Leaf A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token namespace">root<span class="token punctuation">.</span></span>Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Leaf</span><span class="token punctuation">(</span><span class="token string">&quot;Leaf B&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Composite</span> compX <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Composite</span><span class="token punctuation">(</span><span class="token string">&quot;Composite X&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token namespace">compX<span class="token punctuation">.</span></span>Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Leaf</span><span class="token punctuation">(</span><span class="token string">&quot;Leaf XA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token namespace">compX<span class="token punctuation">.</span></span>Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Leaf</span><span class="token punctuation">(</span><span class="token string">&quot;Leaf XB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token namespace">root<span class="token punctuation">.</span></span>Add</span><span class="token punctuation">(</span>compX<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Composite</span> compXY <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Composite</span><span class="token punctuation">(</span><span class="token string">&quot;Composite XY&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token namespace">compXY<span class="token punctuation">.</span></span>Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Leaf</span><span class="token punctuation">(</span><span class="token string">&quot;Leaf XYA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token namespace">compXY<span class="token punctuation">.</span></span>Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Leaf</span><span class="token punctuation">(</span><span class="token string">&quot;Leaf XYB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token namespace">compX<span class="token punctuation">.</span></span>Add</span><span class="token punctuation">(</span>compXY<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token namespace">root<span class="token punctuation">.</span></span>Display</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="伪代码" tabindex="-1"><a class="header-anchor" href="#伪代码" aria-hidden="true">#</a> 伪代码</h2><p>在本例中， 我们将借助<strong>组合</strong>模式帮助你在图形编辑器中实现一系列的几何图形。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20210430162653.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><code>组合图形</code>Compound­Graphic 是一个容器， 它可以由多个包括容器在内的子图形构成。 组合图形与简单图形拥有相同的方法。 但是， 组合图形自身并不完成具体工作， 而是将请求递归地传递给自己的子项目， 然后 “汇总” 结果。</p><p>通过所有图形类所共有的接口， 客户端代码可以与所有图形互动。 因此， 客户端不知道与其交互的是简单图形还是组合图形。 客户端可以与非常复杂的对象结构进行交互， 而无需与组成该结构的实体类紧密耦合。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 组件接口会声明组合中简单和复杂对象的通用操作。</span>
<span class="token keyword">interface</span> <span class="token class-name">Graphic</span> is
    method <span class="token function">move</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
    method <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 叶节点类代表组合的终端对象。叶节点对象中不能包含任何子对象。叶节点对象</span>
<span class="token comment">// 通常会完成实际的工作，组合对象则仅会将工作委派给自己的子部件。</span>
<span class="token keyword">class</span> <span class="token class-name">Dot</span> <span class="token keyword">implements</span> <span class="token class-name">Graphic</span> is
    field x<span class="token punctuation">,</span> y

    constructor <span class="token class-name">Dot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>

    method <span class="token function">move</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> is
        <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+=</span> x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">+=</span> y

    method <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> is
        <span class="token comment">// 在坐标位置(X,Y)处绘制一个点。</span>

<span class="token comment">// 所有组件类都可以扩展其他组件。</span>
<span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token keyword">extends</span> <span class="token class-name">Dot</span> is
    field radius

    constructor <span class="token class-name">Circle</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> radius<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>

    method <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> is
        <span class="token comment">// 在坐标位置(X,Y)处绘制一个半径为 R 的圆。</span>

<span class="token comment">// 组合类表示可能包含子项目的复杂组件。组合对象通常会将实际工作委派给子项</span>
<span class="token comment">// 目，然后“汇总”结果。</span>
<span class="token keyword">class</span> <span class="token class-name">CompoundGraphic</span> <span class="token keyword">implements</span> <span class="token class-name">Graphic</span> is
    field children<span class="token operator">:</span> array of <span class="token class-name">Graphic</span>

    <span class="token comment">// 组合对象可在其项目列表中添加或移除其他组件（简单的或复杂的皆可）。</span>
    method <span class="token function">add</span><span class="token punctuation">(</span>child<span class="token operator">:</span> <span class="token class-name">Graphic</span><span class="token punctuation">)</span> is
        <span class="token comment">// 在子项目数组中添加一个子项目。</span>

    method <span class="token function">remove</span><span class="token punctuation">(</span>child<span class="token operator">:</span> <span class="token class-name">Graphic</span><span class="token punctuation">)</span> is
        <span class="token comment">// 从子项目数组中移除一个子项目。</span>

    method <span class="token function">move</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> is
        foreach <span class="token punctuation">(</span>child in children<span class="token punctuation">)</span> <span class="token keyword">do</span>
            child<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>

    <span class="token comment">// 组合会以特定的方式执行其主要逻辑。它会递归遍历所有子项目，并收集和</span>
    <span class="token comment">// 汇总其结果。由于组合的子项目也会将调用传递给自己的子项目，以此类推，</span>
    <span class="token comment">// 最后组合将会完成整个对象树的遍历工作。</span>
    method <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> is
        <span class="token comment">// 1. 对于每个子部件：</span>
        <span class="token comment">//     - 绘制该部件。</span>
        <span class="token comment">//     - 更新边框坐标。</span>
        <span class="token comment">// 2. 根据边框坐标绘制一个虚线长方形。</span>


<span class="token comment">// 客户端代码会通过基础接口与所有组件进行交互。这样一来，客户端代码便可同</span>
<span class="token comment">// 时支持简单叶节点组件和复杂组件。</span>
<span class="token keyword">class</span> <span class="token class-name">ImageEditor</span> is
    field all<span class="token operator">:</span> <span class="token class-name">CompoundGraphic</span>

    method <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> is
        all <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompoundGraphic</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        all<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dot</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        all<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token comment">// ...</span>

    <span class="token comment">// 将所需组件组合为复杂的组合组件。</span>
    method <span class="token function">groupSelected</span><span class="token punctuation">(</span>components<span class="token operator">:</span> array of <span class="token class-name">Graphic</span><span class="token punctuation">)</span> is
        group <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompoundGraphic</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        foreach <span class="token punctuation">(</span>component in components<span class="token punctuation">)</span> <span class="token keyword">do</span>
            group<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span>
            all<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span>
        all<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span>
        <span class="token comment">// 所有组件都将被绘制。</span>
        all<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="案例" tabindex="-1"><a class="header-anchor" href="#案例" aria-hidden="true">#</a> 案例</h2><p><strong>使用实例：</strong> 组合模式在 Java 代码中很常见,常用于表示与图形打交道的用户界面组件或代码的层次结构。</p><p>下面是一些来自 Java 标准程序库中的组合示例：</p>`,32),r={href:"http://docs.oracle.com/javase/8/docs/api/java/awt/Container.html#add-java.awt.Component-",target:"_blank",rel:"noopener noreferrer"},d=s("code",null,"java.awt.Container#add(Component)",-1),k={href:"http://docs.oracle.com/javaee/7/api/javax/faces/component/UIComponent.html#getChildren--",target:"_blank",rel:"noopener noreferrer"},m=s("code",null,"javax.faces.component.UIComponent#getChildren()",-1),v=s("p",null,[s("strong",null,"识别方法"),n("： 组合可以通过将同一抽象或接口类型的实例放入树状结构的行为方法来轻松识别。")],-1),b=s("h2",{id:"与其他模式的关系",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#与其他模式的关系","aria-hidden":"true"},"#"),n(" 与其他模式的关系")],-1),h={href:"https://refactoringguru.cn/design-patterns/bridge",target:"_blank",rel:"noopener noreferrer"},g={href:"https://refactoringguru.cn/design-patterns/state",target:"_blank",rel:"noopener noreferrer"},f={href:"https://refactoringguru.cn/design-patterns/strategy",target:"_blank",rel:"noopener noreferrer"},_={href:"https://refactoringguru.cn/design-patterns/adapter",target:"_blank",rel:"noopener noreferrer"},w={href:"https://refactoringguru.cn/design-patterns/composite",target:"_blank",rel:"noopener noreferrer"},y={href:"https://refactoringguru.cn/design-patterns/composite",target:"_blank",rel:"noopener noreferrer"},C={href:"https://refactoringguru.cn/design-patterns/builder",target:"_blank",rel:"noopener noreferrer"},x={href:"https://refactoringguru.cn/design-patterns/chain-of-responsibility",target:"_blank",rel:"noopener noreferrer"},q={href:"https://refactoringguru.cn/design-patterns/composite",target:"_blank",rel:"noopener noreferrer"},j={href:"https://refactoringguru.cn/design-patterns/iterator",target:"_blank",rel:"noopener noreferrer"},L={href:"https://refactoringguru.cn/design-patterns/composite",target:"_blank",rel:"noopener noreferrer"},X={href:"https://refactoringguru.cn/design-patterns/visitor",target:"_blank",rel:"noopener noreferrer"},A={href:"https://refactoringguru.cn/design-patterns/composite",target:"_blank",rel:"noopener noreferrer"},S={href:"https://refactoringguru.cn/design-patterns/flyweight",target:"_blank",rel:"noopener noreferrer"},G={href:"https://refactoringguru.cn/design-patterns/composite",target:"_blank",rel:"noopener noreferrer"},D={href:"https://refactoringguru.cn/design-patterns/composite",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://refactoringguru.cn/design-patterns/decorator",target:"_blank",rel:"noopener noreferrer"},B=t("<ul><li><em>装饰</em>类似于<em>组合</em>， 但其只有一个子组件。 此外还有一个明显不同： <em>装饰</em>为被封装对象添加了额外的职责， <em>组合</em>仅对其子节点的结果进行了 “求和”。</li><li>但是， 模式也可以相互合作： 你可以使用<em>装饰</em>来扩展<em>组合</em>树中特定对象的行为。</li></ul>",1),I={href:"https://refactoringguru.cn/design-patterns/composite",target:"_blank",rel:"noopener noreferrer"},O={href:"https://refactoringguru.cn/design-patterns/decorator",target:"_blank",rel:"noopener noreferrer"},R={href:"https://refactoringguru.cn/design-patterns/prototype",target:"_blank",rel:"noopener noreferrer"},E=s("h2",{id:"参考资料",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#参考资料","aria-hidden":"true"},"#"),n(" 参考资料")],-1),N={href:"https://book.douban.com/subject/2243615/",target:"_blank",rel:"noopener noreferrer"},V={href:"https://book.douban.com/subject/2334288/",target:"_blank",rel:"noopener noreferrer"},J={href:"https://refactoringguru.cn/design-patterns/catalog",target:"_blank",rel:"noopener noreferrer"};function U(z,F){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,s("ul",null,[s("li",null,[s("a",r,[d,e(a)]),n(" （几乎广泛存在于 Swing 组件中）")]),s("li",null,[s("a",k,[m,e(a)]),n(" （几乎广泛存在于 JSF UI 组件中）")])]),v,b,s("ul",null,[s("li",null,[s("a",h,[n("桥接模式"),e(a)]),n("、 "),s("a",g,[n("状态模式"),e(a)]),n("和"),s("a",f,[n("策略模式"),e(a)]),n(" （在某种程度上包括"),s("a",_,[n("适配器模式"),e(a)]),n("） 模式的接口非常相似。 实际上， 它们都基于"),s("a",w,[n("组合模式"),e(a)]),n("——即将工作委派给其他对象， 不过也各自解决了不同的问题。 模式并不只是以特定方式组织代码的配方， 你还可以使用它们来和其他开发者讨论模式所解决的问题。")]),s("li",null,[n("你可以在创建复杂"),s("a",y,[n("组合"),e(a)]),n("树时使用"),s("a",C,[n("生成器模式"),e(a)]),n("， 因为这可使其构造步骤以递归的方式运行。")]),s("li",null,[s("a",x,[n("责任链模式"),e(a)]),n("通常和"),s("a",q,[n("组合模式"),e(a)]),n("结合使用。 在这种情况下， 叶组件接收到请求后， 可以将请求沿包含全体父组件的链一直传递至对象树的底部。")]),s("li",null,[n("你可以使用"),s("a",j,[n("迭代器模式"),e(a)]),n("来遍历"),s("a",L,[n("组合"),e(a)]),n("树。")]),s("li",null,[n("你可以使用"),s("a",X,[n("访问者模式"),e(a)]),n("对整个"),s("a",A,[n("组合"),e(a)]),n("树执行操作。")]),s("li",null,[n("你可以使用"),s("a",S,[n("享元模式"),e(a)]),n("实现"),s("a",G,[n("组合"),e(a)]),n("树的共享叶节点以节省内存。")]),s("li",null,[s("a",D,[n("组合"),e(a)]),n("和"),s("a",Y,[n("装饰模式"),e(a)]),n("的结构图很相似， 因为两者都依赖递归组合来组织无限数量的对象。 "),B]),s("li",null,[n("大量使用"),s("a",I,[n("组合"),e(a)]),n("和"),s("a",O,[n("装饰"),e(a)]),n("的设计通常可从对于"),s("a",R,[n("原型模式"),e(a)]),n("的使用中获益。 你可以通过该模式来复制复杂结构， 而非从零开始重新构造。")])]),E,s("ul",null,[s("li",null,[s("a",N,[n("《Head First 设计模式》"),e(a)])]),s("li",null,[s("a",V,[n("《大话设计模式》"),e(a)])]),s("li",null,[s("a",J,[n("设计模式教程"),e(a)])])])])}const T=p(i,[["render",U],["__file","index.html.vue"]]);export{T as default};
