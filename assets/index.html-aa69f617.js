const e=JSON.parse('{"key":"v-4ef50d31","path":"/pages/46c1e340/","title":"Java 虚拟机面试一","lang":"zh-CN","frontmatter":{"title":"Java 虚拟机面试一","date":"2024-07-03T07:44:02.000Z","permalink":"/pages/46c1e340/","category":["Java","JavaCore","面试"],"tag":["Java","JavaCore","面试","JVM"],"description":"Java 虚拟机面试一 JVM 简介 【中等】JVM 由哪些部分组成？ 类加载→内存分配→执行引擎运行→GC 回收内存，通过 JNI 与外部交互。 JVM（Java 虚拟机）主要由以下核心部分组成： 类加载子系统：负责加载、验证、准备、解析和初始化类文件（.class）。 运行时数据区： 方法区：存储类元数据、常量池等。 堆：存放对象实例（主 GC 区域）。 虚拟机栈：存储方法调用的栈帧（局部变量、操作数栈等）。 本地方法栈：为 Native 方法服务。 程序计数器：记录当前线程执行的字节码位置。 执行引擎：解释或编译字节码为机器码执行（含 JIT 编译器）。 解释器（Interpreter）：逐行解释执行字节码（启动快，执行慢）。 即时编译器（JIT Compiler）：将热点代码（频繁执行的代码）编译为本地机器码（如 HotSpot 的 C1、C2 编译器）。 垃圾回收器（GC）：自动回收堆中无用的对象（如 Serial、Parallel、G1、ZGC 等算法）。 本地方法接口（JNI）：调用 C/C++实现的 Native 方法。 本地方法库（Native Libraries）：由其他语言（如 C/C++）编写的库，供 JNI 调用（如文件操作、网络通信等底层功能）。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/46c1e340/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"Java 虚拟机面试一"}],["meta",{"property":"og:description","content":"Java 虚拟机面试一 JVM 简介 【中等】JVM 由哪些部分组成？ 类加载→内存分配→执行引擎运行→GC 回收内存，通过 JNI 与外部交互。 JVM（Java 虚拟机）主要由以下核心部分组成： 类加载子系统：负责加载、验证、准备、解析和初始化类文件（.class）。 运行时数据区： 方法区：存储类元数据、常量池等。 堆：存放对象实例（主 GC 区域）。 虚拟机栈：存储方法调用的栈帧（局部变量、操作数栈等）。 本地方法栈：为 Native 方法服务。 程序计数器：记录当前线程执行的字节码位置。 执行引擎：解释或编译字节码为机器码执行（含 JIT 编译器）。 解释器（Interpreter）：逐行解释执行字节码（启动快，执行慢）。 即时编译器（JIT Compiler）：将热点代码（频繁执行的代码）编译为本地机器码（如 HotSpot 的 C1、C2 编译器）。 垃圾回收器（GC）：自动回收堆中无用的对象（如 Serial、Parallel、G1、ZGC 等算法）。 本地方法接口（JNI）：调用 C/C++实现的 Native 方法。 本地方法库（Native Libraries）：由其他语言（如 C/C++）编写的库，供 JNI 调用（如文件操作、网络通信等底层功能）。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-08T15:35:46.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"JavaCore"}],["meta",{"property":"article:tag","content":"面试"}],["meta",{"property":"article:tag","content":"JVM"}],["meta",{"property":"article:published_time","content":"2024-07-03T07:44:02.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-08T15:35:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 虚拟机面试一\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-03T07:44:02.000Z\\",\\"dateModified\\":\\"2025-05-08T15:35:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"JVM 简介","slug":"jvm-简介","link":"#jvm-简介","children":[{"level":3,"title":"【中等】JVM 由哪些部分组成？","slug":"【中等】jvm-由哪些部分组成","link":"#【中等】jvm-由哪些部分组成","children":[]},{"level":3,"title":"【中等】Java 是如何实现跨平台的？","slug":"【中等】java-是如何实现跨平台的","link":"#【中等】java-是如何实现跨平台的","children":[]},{"level":3,"title":"【中等】说说 Java 的执行流程？","slug":"【中等】说说-java-的执行流程","link":"#【中等】说说-java-的执行流程","children":[]},{"level":3,"title":"【中等】什么是 JIT?","slug":"【中等】什么是-jit","link":"#【中等】什么是-jit","children":[]},{"level":3,"title":"【困难】什么是逃逸分析？","slug":"【困难】什么是逃逸分析","link":"#【困难】什么是逃逸分析","children":[]},{"level":3,"title":"【困难】什么是 AOT？","slug":"【困难】什么是-aot","link":"#【困难】什么是-aot","children":[]}]},{"level":2,"title":"JVM 内存管理","slug":"jvm-内存管理","link":"#jvm-内存管理","children":[{"level":3,"title":"【困难】JVM 的内存区域是如何划分的？","slug":"【困难】jvm-的内存区域是如何划分的","link":"#【困难】jvm-的内存区域是如何划分的","children":[]},{"level":3,"title":"【困难】JVM 产生 OOM 有哪几种情况？","slug":"【困难】jvm-产生-oom-有哪几种情况","link":"#【困难】jvm-产生-oom-有哪几种情况","children":[]}]},{"level":2,"title":"类加载","slug":"类加载","link":"#类加载","children":[{"level":3,"title":"【中等】Java 里的对象在虚拟机里面是怎么存储的？","slug":"【中等】java-里的对象在虚拟机里面是怎么存储的","link":"#【中等】java-里的对象在虚拟机里面是怎么存储的","children":[]},{"level":3,"title":"【中等】Java 类的生命周期是怎样的？","slug":"【中等】java-类的生命周期是怎样的","link":"#【中等】java-类的生命周期是怎样的","children":[]},{"level":3,"title":"【困难】什么是类加载器吗？","slug":"【困难】什么是类加载器吗","link":"#【困难】什么是类加载器吗","children":[]}]},{"level":2,"title":"字节码","slug":"字节码","link":"#字节码","children":[{"level":3,"title":"【中等】Java 是编译型语言还是解释型语言？","slug":"【中等】java-是编译型语言还是解释型语言","link":"#【中等】java-是编译型语言还是解释型语言","children":[]},{"level":3,"title":"【中等】什么是 Java 字节码？它与机器码有什么区别？","slug":"【中等】什么是-java-字节码-它与机器码有什么区别","link":"#【中等】什么是-java-字节码-它与机器码有什么区别","children":[]},{"level":3,"title":"【中等】.class 文件的结构包含哪些主要部分？","slug":"【中等】-class-文件的结构包含哪些主要部分","link":"#【中等】-class-文件的结构包含哪些主要部分","children":[]},{"level":3,"title":"【中等】如何查看 Java 字节码？常用工具有哪些？","slug":"【中等】如何查看-java-字节码-常用工具有哪些","link":"#【中等】如何查看-java-字节码-常用工具有哪些","children":[]},{"level":3,"title":"【中等】Java 字节码有哪些典型应用场景？","slug":"【中等】java-字节码有哪些典型应用场景","link":"#【中等】java-字节码有哪些典型应用场景","children":[]}]},{"level":2,"title":"调优","slug":"调优","link":"#调优","children":[{"level":3,"title":"【简单】JDK 内置了哪些工具？","slug":"【简单】jdk-内置了哪些工具","link":"#【简单】jdk-内置了哪些工具","children":[]},{"level":3,"title":"【中等】常用的 JVM 配置参数有哪些？","slug":"【中等】常用的-jvm-配置参数有哪些","link":"#【中等】常用的-jvm-配置参数有哪些","children":[]},{"level":3,"title":"【中等】如何在 Java 中进行内存泄漏分析？","slug":"【中等】如何在-java-中进行内存泄漏分析","link":"#【中等】如何在-java-中进行内存泄漏分析","children":[]},{"level":3,"title":"【中等】如何对 Java 的垃圾回收进行调优？","slug":"【中等】如何对-java-的垃圾回收进行调优","link":"#【中等】如何对-java-的垃圾回收进行调优","children":[]}]}],"git":{"createdTime":1743948422000,"updatedTime":1746718546000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":7}]},"readingTime":{"minutes":30.85,"words":9255},"filePathRelative":"01.Java/01.JavaCore/99.面试/Java_面试_虚拟机（一）.md","localizedDate":"2024年7月3日","excerpt":"<h1> Java 虚拟机面试一</h1>\\n<h2> JVM 简介</h2>\\n<h3> 【中等】JVM 由哪些部分组成？</h3>\\n<p><strong>类加载→内存分配→执行引擎运行→GC 回收内存</strong>，通过 JNI 与外部交互。</p>\\n<p>JVM（Java 虚拟机）主要由以下核心部分组成：</p>\\n<ul>\\n<li><strong>类加载子系统</strong>：负责加载、验证、准备、解析和初始化类文件（.class）。</li>\\n<li><strong>运行时数据区</strong>：\\n<ul>\\n<li><strong>方法区</strong>：存储类元数据、常量池等。</li>\\n<li><strong>堆</strong>：存放对象实例（主 GC 区域）。</li>\\n<li><strong>虚拟机栈</strong>：存储方法调用的栈帧（局部变量、操作数栈等）。</li>\\n<li><strong>本地方法栈</strong>：为 Native 方法服务。</li>\\n<li><strong>程序计数器</strong>：记录当前线程执行的字节码位置。</li>\\n</ul>\\n</li>\\n<li><strong>执行引擎</strong>：解释或编译字节码为机器码执行（含 JIT 编译器）。\\n<ul>\\n<li><strong>解释器（Interpreter）</strong>：逐行解释执行字节码（启动快，执行慢）。</li>\\n<li><strong>即时编译器（JIT Compiler）</strong>：将热点代码（频繁执行的代码）编译为本地机器码（如 HotSpot 的 C1、C2 编译器）。</li>\\n<li><strong>垃圾回收器（GC）</strong>：自动回收堆中无用的对象（如 Serial、Parallel、G1、ZGC 等算法）。</li>\\n</ul>\\n</li>\\n<li><strong>本地方法接口（JNI）</strong>：调用 C/C++实现的 Native 方法。</li>\\n<li><strong>本地方法库（Native Libraries）</strong>：由其他语言（如 C/C++）编写的库，供 JNI 调用（如文件操作、网络通信等底层功能）。</li>\\n</ul>","autoDesc":true}');export{e as data};
