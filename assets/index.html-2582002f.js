const e=JSON.parse('{"key":"v-63c68a94","path":"/pages/4ff08b2c/","title":"设计模式之建造者模式","lang":"zh-CN","frontmatter":{"title":"设计模式之建造者模式","date":"2015-06-03T10:32:00.000Z","order":4,"permalink":"/pages/4ff08b2c/","category":["设计","设计模式"],"tag":["设计","设计模式"],"description":"设计模式之建造者模式 意图 建造者模式（Builder）是一种创建型设计模式， 使你能够分步骤创建复杂对象。 该模式允许你使用相同的创建代码生成不同类型和形式的对象。 使用建造者模式，用户就只需要指定需要建造的类型，具体的建造过程和细节并不需要知道。 建造者模式允许修改一个产品的内部表示。 它将构造和表示两块代码隔离开来。 它很好的控制了构建过程。 img","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/4ff08b2c/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"设计模式之建造者模式"}],["meta",{"property":"og:description","content":"设计模式之建造者模式 意图 建造者模式（Builder）是一种创建型设计模式， 使你能够分步骤创建复杂对象。 该模式允许你使用相同的创建代码生成不同类型和形式的对象。 使用建造者模式，用户就只需要指定需要建造的类型，具体的建造过程和细节并不需要知道。 建造者模式允许修改一个产品的内部表示。 它将构造和表示两块代码隔离开来。 它很好的控制了构建过程。 img"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-14T13:48:12.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"设计"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2015-06-03T10:32:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-14T13:48:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式之建造者模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2015-06-03T10:32:00.000Z\\",\\"dateModified\\":\\"2025-09-14T13:48:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"意图","slug":"意图","link":"#意图","children":[]},{"level":2,"title":"适用场景","slug":"适用场景","link":"#适用场景","children":[]},{"level":2,"title":"结构","slug":"结构","link":"#结构","children":[]},{"level":2,"title":"伪代码","slug":"伪代码","link":"#伪代码","children":[]},{"level":2,"title":"案例","slug":"案例","link":"#案例","children":[]},{"level":2,"title":"与其他模式的关系","slug":"与其他模式的关系","link":"#与其他模式的关系","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1757857692000,"updatedTime":1757857692000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":1}]},"readingTime":{"minutes":8.15,"words":2446},"filePathRelative":"03.设计/设计模式/建造者模式.md","localizedDate":"2015年6月3日","excerpt":"<h1> 设计模式之建造者模式</h1>\\n<h2> 意图</h2>\\n<p><strong>建造者模式</strong>（Builder）是一种创建型设计模式， 使你能够分步骤创建复杂对象。 该模式允许你使用相同的创建代码生成不同类型和形式的对象。</p>\\n<p>使用建造者模式，用户就只需要指定需要建造的类型，具体的建造过程和细节并不需要知道。</p>\\n<p>建造者模式允许修改一个产品的内部表示。</p>\\n<p>它将构造和表示两块代码隔离开来。</p>\\n<p>它很好的控制了构建过程。</p>\\n<figure><img src=\\"https://raw.githubusercontent.com/dunwu/images/master/snap/20200724105836.png\\" alt=\\"img\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>img</figcaption></figure>","autoDesc":true}');export{e as data};
