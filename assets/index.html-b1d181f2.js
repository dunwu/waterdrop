const e=JSON.parse('{"key":"v-a5bba45e","path":"/pages/5acdf542/","title":"面向对象原则","lang":"zh-CN","frontmatter":{"title":"面向对象原则","date":"2021-05-19T09:49:05.000Z","order":25,"permalink":"/pages/5acdf542/","category":["设计","设计模式"],"tag":["设计","设计模式"],"description":"面向对象设计六大原则 单一职责原则 单一职责原则（Single Responsibility Principle），应该有且仅有一个原因引起类的变更。 简单点说，一个类，最好只负责一件事。 开放-封闭原则 开放-封闭原则（Open Close Principle），软件实体（类、模块、函数）等应该可以扩展，但是不可修改。 对于扩展是开放的；对于更改是封闭的。 里氏替换原则 里氏替换原则（Liskov Substitution Principle），子类可以替换父类。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/5acdf542/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"面向对象原则"}],["meta",{"property":"og:description","content":"面向对象设计六大原则 单一职责原则 单一职责原则（Single Responsibility Principle），应该有且仅有一个原因引起类的变更。 简单点说，一个类，最好只负责一件事。 开放-封闭原则 开放-封闭原则（Open Close Principle），软件实体（类、模块、函数）等应该可以扩展，但是不可修改。 对于扩展是开放的；对于更改是封闭的。 里氏替换原则 里氏替换原则（Liskov Substitution Principle），子类可以替换父类。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-14T13:48:12.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"设计"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2021-05-19T09:49:05.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-14T13:48:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"面向对象原则\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-05-19T09:49:05.000Z\\",\\"dateModified\\":\\"2025-09-14T13:48:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"单一职责原则","slug":"单一职责原则","link":"#单一职责原则","children":[]},{"level":2,"title":"开放-封闭原则","slug":"开放-封闭原则","link":"#开放-封闭原则","children":[]},{"level":2,"title":"里氏替换原则","slug":"里氏替换原则","link":"#里氏替换原则","children":[]},{"level":2,"title":"依赖倒置原则","slug":"依赖倒置原则","link":"#依赖倒置原则","children":[]},{"level":2,"title":"接口隔离原则","slug":"接口隔离原则","link":"#接口隔离原则","children":[]},{"level":2,"title":"迪米特原则","slug":"迪米特原则","link":"#迪米特原则","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1757857692000,"updatedTime":1757857692000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":1}]},"readingTime":{"minutes":1.61,"words":483},"filePathRelative":"03.设计/设计模式/面向对象原则.md","localizedDate":"2021年5月19日","excerpt":"<h1> 面向对象设计六大原则</h1>\\n<h2> 单一职责原则</h2>\\n<p>单一职责原则（Single Responsibility Principle），应该有且仅有一个原因引起类的变更。</p>\\n<p>简单点说，<strong>一个类，最好只负责一件事。</strong></p>\\n<h2> 开放-封闭原则</h2>\\n<p>开放-封闭原则（Open Close Principle），软件实体（类、模块、函数）等应该可以扩展，但是不可修改。</p>\\n<p>对于扩展是开放的；对于更改是封闭的。</p>\\n<h2> 里氏替换原则</h2>\\n<p>里氏替换原则（Liskov Substitution Principle），子类可以替换父类。</p>","autoDesc":true}');export{e as data};
