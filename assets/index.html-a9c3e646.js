import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as c,c as i,a as n,b as s,d as t,e}from"./app-682890be.js";const l={},u=e(`<h1 id="springboot-之集成-json" tabindex="-1"><a class="header-anchor" href="#springboot-之集成-json" aria-hidden="true">#</a> SpringBoot 之集成 Json</h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><h3 id="spring-boot-支持的-json-库" tabindex="-1"><a class="header-anchor" href="#spring-boot-支持的-json-库" aria-hidden="true">#</a> Spring Boot 支持的 Json 库</h3><p>Spring Boot 支持三种 Json 库：</p><ul><li>Gson</li><li>Jackson</li><li>JSON-B</li></ul><p><strong>Jackson 是 Spring Boot 官方推荐的默认库。</strong></p><p>Spring Boot 提供了 Jackson 的自动配置，Jackson 是 <code>spring-boot-starter-json</code> 的一部分。当 Jackson 在类路径上时，会自动配置 ObjectMapper bean。</p><p>Spring Boot 提供了 Gson 的自动配置。当 Gson 在 classpath 上时，会自动配置 Gson bean。提供了几个 <code>spring.gson.*</code> 配置属性来自定义配置。为了获得更多控制，可以使用一个或多个 <code>GsonBuilderCustomizer</code> bean。</p><p>Spring Boot 提供了 JSON-B 的自动配置。当 JSON-B API 在 classpath 上时，将自动配置 Jsonb bean。首选的 JSON-B 实现是 Apache Johnzon，它提供了依赖关系管理。</p><h3 id="spring-web-中的序列化、反序列化" tabindex="-1"><a class="header-anchor" href="#spring-web-中的序列化、反序列化" aria-hidden="true">#</a> Spring Web 中的序列化、反序列化</h3><p>以下注解都是 <code>spring-web</code> 中提供的支持。</p><h4 id="responsebody" tabindex="-1"><a class="header-anchor" href="#responsebody" aria-hidden="true">#</a> <code>@ResponseBody</code></h4><p><code>@Responsebody</code> 注解用于将 Controller 的方法返回的对象，通过适当的 <code>HttpMessageConverter</code> 转换为指定格式后，写入到 HTTP Response 对象的 body 数据区。一般在异步获取数据时使用。通常是在使用 <code>@RequestMapping</code> 后，返回值通常解析为跳转路径，加上 @Responsebody 后返回结果不会被解析为跳转路径，而是直接写入 HTTP 响应正文中。</p><p>示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ResponseBody</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;/getInfo&quot;</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">InfoDTO</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">InfoDTO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="requestbody" tabindex="-1"><a class="header-anchor" href="#requestbody" aria-hidden="true">#</a> <code>@RequestBody</code></h4><p>@RequestBody 注解用于读取 HTTP Request 请求的 body 部分数据，使用系统默认配置的 <code>HttpMessageConverter</code> 进行解析，然后把相应的数据绑定到要返回的对象上；再把 <code>HttpMessageConverter</code> 返回的对象数据绑定到 controller 中方法的参数上。</p><p>request 的 body 部分的数据编码格式由 header 部分的 <code>Content-Type</code> 指定。</p><p>示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;/postInfo&quot;</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">POST</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postInfo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">InfoDTO</span> infoDTO<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="restcontroller" tabindex="-1"><a class="header-anchor" href="#restcontroller" aria-hidden="true">#</a> <code>@RestController</code></h4><p>Spring 4 以前：</p><p>如果需要返回到指定页面，则需要用 <code>@Controller</code> 配合视图解析器 <code>InternalResourceViewResolver</code> 。</p><p>如果需要返回 JSON，XML 或自定义 mediaType 内容到页面，则需要在对应的方法上加上 <code>@ResponseBody</code> 注解。</p><p>Spring 4 以后，新增了 <code>@RestController</code> 注解：</p><p>它相当于 <code>@Controller</code> + <code>@RequestBody</code> 。</p><p>如果使用 <code>@RestController</code> 注解 Controller，则 Controller 中的方法无法返回 jsp 页面，或者 html，配置的视图解析器 <code>InternalResourceViewResolver</code> 将不起作用，直接返回内容。</p><h2 id="指定类的-json-序列化、反序列化" tabindex="-1"><a class="header-anchor" href="#指定类的-json-序列化、反序列化" aria-hidden="true">#</a> 指定类的 Json 序列化、反序列化</h2><p>如果使用 Jackson 序列化和反序列化 JSON 数据，您可能需要编写自己的 <code>JsonSerializer</code> 和 <code>JsonDeserializer</code> 类。自定义序列化程序通常通过模块向 Jackson 注册，但 Spring Boot 提供了另一种 <code>@JsonComponent</code> 注释，可以更容易地直接注册 Spring Beans。</p><p>您可以直接在 <code>JsonSerializer</code> 或 <code>JsonDeserializer</code> 实现上使用 <code>@JsonComponent</code> 注释。您还可以在包含序列化程序/反序列化程序作为内部类的类上使用它，如以下示例所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@JsonComponent</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Serializer</span> <span class="token keyword">extends</span> <span class="token class-name">JsonSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SomeObject</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
		<span class="token comment">// ...</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Deserializer</span> <span class="token keyword">extends</span> <span class="token class-name">JsonDeserializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SomeObject</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
		<span class="token comment">// ...</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ApplicationContext</code> 中的所有 <code>@JsonComponent</code> bean 都会自动注册到 Jackson。因为 <code>@JsonComponent</code> 是使用 <code>@Component</code> 进行元注释的，所以通常的组件扫描规则适用。</p>`,32),r={href:"https://github.com/spring-projects/spring-boot/tree/v2.1.1.RELEASE/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jackson/JsonObjectSerializer.java",target:"_blank",rel:"noopener noreferrer"},k=n("code",null,"JsonObjectSerializer",-1),d={href:"https://github.com/spring-projects/spring-boot/tree/v2.1.1.RELEASE/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jackson/JsonObjectDeserializer.java",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"JsonObjectDeserializer",-1),m={href:"https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/jackson/JsonObjectSerializer.html",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"JsonObjectSerializer",-1),b={href:"https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/jackson/JsonObjectDeserializer.html",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"JsonObjectDeserializer",-1),f=e(`<h2 id="jsontest" tabindex="-1"><a class="header-anchor" href="#jsontest" aria-hidden="true">#</a> @JsonTest</h2><p>使用 <code>@JsonTest</code> 可以很方便的在 Spring Boot 中测试序列化、反序列化。</p><p>使用 <code>@JsonTest</code> 相当于使用以下自动配置：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration org.springframework.boot.test.autoconfigure.json.JsonTestersAutoConfiguration
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>@JsonTest</code> 使用示例：</p>`,5),y={href:"https://github.com/dunwu/spring-boot-tutorial/tree/master/codes/spring-boot-web-fastjson",target:"_blank",rel:"noopener noreferrer"},j=e(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@JsonTest</span>
<span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleJsonTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">JacksonTester</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InfoDTO</span><span class="token punctuation">&gt;</span></span> json<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSerialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">InfoDTO</span> infoDTO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InfoDTO</span><span class="token punctuation">(</span><span class="token string">&quot;JSON测试应用&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span> sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&quot;2019-01-01 12:00:00&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">JsonContent</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InfoDTO</span><span class="token punctuation">&gt;</span></span> jsonContent <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>infoDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;json content: {}&quot;</span><span class="token punctuation">,</span> jsonContent<span class="token punctuation">.</span><span class="token function">getJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 或者使用基于JSON path的校验</span>
        <span class="token function">assertThat</span><span class="token punctuation">(</span>jsonContent<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasJsonPathStringValue</span><span class="token punctuation">(</span><span class="token string">&quot;@.appName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertThat</span><span class="token punctuation">(</span>jsonContent<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">extractingJsonPathStringValue</span><span class="token punctuation">(</span><span class="token string">&quot;@.appName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;JSON测试应用&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertThat</span><span class="token punctuation">(</span>jsonContent<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasJsonPathStringValue</span><span class="token punctuation">(</span><span class="token string">&quot;@.version&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertThat</span><span class="token punctuation">(</span>jsonContent<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">extractingJsonPathStringValue</span><span class="token punctuation">(</span><span class="token string">&quot;@.version&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertThat</span><span class="token punctuation">(</span>jsonContent<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasJsonPathStringValue</span><span class="token punctuation">(</span><span class="token string">&quot;@.date&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertThat</span><span class="token punctuation">(</span>jsonContent<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">extractingJsonPathStringValue</span><span class="token punctuation">(</span><span class="token string">&quot;@.date&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;2019-01-01 12:00:00&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDeserialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token string">&quot;{\\&quot;appName\\&quot;:\\&quot;JSON测试应用\\&quot;,\\&quot;version\\&quot;:\\&quot;1.0.0\\&quot;,\\&quot;date\\&quot;:\\&quot;2019-01-01\\&quot;}&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">InfoDTO</span> actual <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertThat</span><span class="token punctuation">(</span>actual<span class="token punctuation">.</span><span class="token function">getAppName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;JSON测试应用&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertThat</span><span class="token punctuation">(</span>actual<span class="token punctuation">.</span><span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="spring-boot-中的-json-配置" tabindex="-1"><a class="header-anchor" href="#spring-boot-中的-json-配置" aria-hidden="true">#</a> Spring Boot 中的 json 配置</h2><h3 id="jackson-配置" tabindex="-1"><a class="header-anchor" href="#jackson-配置" aria-hidden="true">#</a> Jackson 配置</h3>`,3),J={href:"https://github.com/spring-projects/spring-boot/tree/v2.1.1.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonProperties.java",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"JacksonProperties",-1),q=e(`<div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.jackson.date-format</span><span class="token punctuation">=</span> <span class="token value attr-value"># Date format string or a fully-qualified date format class name. For instance, \`yyyy-MM-dd HH:mm:ss\`.</span>
<span class="token key attr-name">spring.jackson.default-property-inclusion</span><span class="token punctuation">=</span> <span class="token value attr-value"># Controls the inclusion of properties during serialization. Configured with one of the values in Jackson&#39;s JsonInclude.Include enumeration.</span>
<span class="token key attr-name">spring.jackson.deserialization.*</span><span class="token punctuation">=</span> <span class="token value attr-value"># Jackson on/off features that affect the way Java objects are deserialized.</span>
<span class="token key attr-name">spring.jackson.generator.*</span><span class="token punctuation">=</span> <span class="token value attr-value"># Jackson on/off features for generators.</span>
<span class="token key attr-name">spring.jackson.joda-date-time-format</span><span class="token punctuation">=</span> <span class="token value attr-value"># Joda date time format string. If not configured, &quot;date-format&quot; is used as a fallback if it is configured with a format string.</span>
<span class="token key attr-name">spring.jackson.locale</span><span class="token punctuation">=</span> <span class="token value attr-value"># Locale used for formatting.</span>
<span class="token key attr-name">spring.jackson.mapper.*</span><span class="token punctuation">=</span> <span class="token value attr-value"># Jackson general purpose on/off features.</span>
<span class="token key attr-name">spring.jackson.parser.*</span><span class="token punctuation">=</span> <span class="token value attr-value"># Jackson on/off features for parsers.</span>
<span class="token key attr-name">spring.jackson.property-naming-strategy</span><span class="token punctuation">=</span> <span class="token value attr-value"># One of the constants on Jackson&#39;s PropertyNamingStrategy. Can also be a fully-qualified class name of a PropertyNamingStrategy subclass.</span>
<span class="token key attr-name">spring.jackson.serialization.*</span><span class="token punctuation">=</span> <span class="token value attr-value"># Jackson on/off features that affect the way Java objects are serialized.</span>
<span class="token key attr-name">spring.jackson.time-zone</span><span class="token punctuation">=</span> <span class="token value attr-value">#  Time zone used when formatting dates. For instance, &quot;America/Los_Angeles&quot; or &quot;GMT+10&quot;.</span>
<span class="token key attr-name">spring.jackson.visibility.*</span><span class="token punctuation">=</span> <span class="token value attr-value"># Jackson visibility thresholds that can be used to limit which methods (and fields) are auto-detected.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="gson-配置" tabindex="-1"><a class="header-anchor" href="#gson-配置" aria-hidden="true">#</a> GSON 配置</h3>`,2),S={href:"https://github.com/spring-projects/spring-boot/tree/v2.1.1.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/gson/GsonProperties.java",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"GsonProperties",-1),C=e(`<div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.gson.date-format</span><span class="token punctuation">=</span> <span class="token value attr-value"># Format to use when serializing Date objects.</span>
<span class="token key attr-name">spring.gson.disable-html-escaping</span><span class="token punctuation">=</span> <span class="token value attr-value"># Whether to disable the escaping of HTML characters such as &#39;&lt;&#39;, &#39;&gt;&#39;, etc.</span>
<span class="token key attr-name">spring.gson.disable-inner-class-serialization</span><span class="token punctuation">=</span> <span class="token value attr-value"># Whether to exclude inner classes during serialization.</span>
<span class="token key attr-name">spring.gson.enable-complex-map-key-serialization</span><span class="token punctuation">=</span> <span class="token value attr-value"># Whether to enable serialization of complex map keys (i.e. non-primitives).</span>
<span class="token key attr-name">spring.gson.exclude-fields-without-expose-annotation</span><span class="token punctuation">=</span> <span class="token value attr-value"># Whether to exclude all fields from consideration for serialization or deserialization that do not have the &quot;Expose&quot; annotation.</span>
<span class="token key attr-name">spring.gson.field-naming-policy</span><span class="token punctuation">=</span> <span class="token value attr-value"># Naming policy that should be applied to an object&#39;s field during serialization and deserialization.</span>
<span class="token key attr-name">spring.gson.generate-non-executable-json</span><span class="token punctuation">=</span> <span class="token value attr-value"># Whether to generate non executable JSON by prefixing the output with some special text.</span>
<span class="token key attr-name">spring.gson.lenient</span><span class="token punctuation">=</span> <span class="token value attr-value"># Whether to be lenient about parsing JSON that doesn&#39;t conform to RFC 4627.</span>
<span class="token key attr-name">spring.gson.long-serialization-policy</span><span class="token punctuation">=</span> <span class="token value attr-value"># Serialization policy for Long and long types.</span>
<span class="token key attr-name">spring.gson.pretty-printing</span><span class="token punctuation">=</span> <span class="token value attr-value"># Whether to output serialized JSON that fits in a page for pretty printing.</span>
<span class="token key attr-name">spring.gson.serialize-nulls</span><span class="token punctuation">=</span> <span class="token value attr-value"># Whether to serialize null fields.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="spring-boot-中使用-fastjson" tabindex="-1"><a class="header-anchor" href="#spring-boot-中使用-fastjson" aria-hidden="true">#</a> Spring Boot 中使用 Fastjson</h2><p>国内很多的 Java 程序员更喜欢使用阿里的 fastjson 作为 json lib。那么，如何在 Spring Boot 中将其替换默认的 jackson 库呢？</p><p>你需要做如下处理：</p><p>（1）引入 fastjson jar 包：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.54<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）实现 WebMvcConfigurer 接口，自定义 <code>configureMessageConverters</code> 接口。如下所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebMvcConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 自定义消息转换器
     * <span class="token keyword">@param</span> <span class="token parameter">converters</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureMessageConverters</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> converters<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 清除默认 Json 转换器</span>
        converters<span class="token punctuation">.</span><span class="token function">removeIf</span><span class="token punctuation">(</span>converter <span class="token operator">-&gt;</span> converter <span class="token keyword">instanceof</span> <span class="token class-name">MappingJackson2HttpMessageConverter</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 配置 FastJson</span>
        <span class="token class-name">FastJsonConfig</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FastJsonConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        config<span class="token punctuation">.</span><span class="token function">setSerializerFeatures</span><span class="token punctuation">(</span><span class="token class-name">SerializerFeature<span class="token punctuation">.</span>QuoteFieldNames</span><span class="token punctuation">,</span> <span class="token class-name">SerializerFeature<span class="token punctuation">.</span>WriteEnumUsingToString</span><span class="token punctuation">,</span>
            <span class="token class-name">SerializerFeature<span class="token punctuation">.</span>WriteMapNullValue</span><span class="token punctuation">,</span> <span class="token class-name">SerializerFeature<span class="token punctuation">.</span>WriteDateUseDateFormat</span><span class="token punctuation">,</span>
            <span class="token class-name">SerializerFeature<span class="token punctuation">.</span>DisableCircularReferenceDetect</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 添加 FastJsonHttpMessageConverter</span>
        <span class="token class-name">FastJsonHttpMessageConverter</span> fastJsonHttpMessageConverter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FastJsonHttpMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        fastJsonHttpMessageConverter<span class="token punctuation">.</span><span class="token function">setFastJsonConfig</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MediaType</span><span class="token punctuation">&gt;</span></span> fastMediaTypes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        fastMediaTypes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON_UTF8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        fastJsonHttpMessageConverter<span class="token punctuation">.</span><span class="token function">setSupportedMediaTypes</span><span class="token punctuation">(</span>fastMediaTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>
        converters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>fastJsonHttpMessageConverter<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 添加 StringHttpMessageConverter，解决中文乱码问题</span>
        <span class="token class-name">StringHttpMessageConverter</span> stringHttpMessageConverter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringHttpMessageConverter</span><span class="token punctuation">(</span><span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        converters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stringHttpMessageConverter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="示例源码" tabindex="-1"><a class="header-anchor" href="#示例源码" aria-hidden="true">#</a> 示例源码</h2>`,9),x={href:"https://github.com/dunwu/spring-boot-tutorial/tree/master/codes/spring-boot-web-fastjson",target:"_blank",rel:"noopener noreferrer"},T=n("h2",{id:"引申和引用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#引申和引用","aria-hidden":"true"},"#"),s(" 引申和引用")],-1),z=n("p",null,[n("strong",null,"引申")],-1),M={href:"https://github.com/dunwu/spring-boot-tutorial",target:"_blank",rel:"noopener noreferrer"},O=n("p",null,[n("strong",null,"引用")],-1),B={href:"https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-json",target:"_blank",rel:"noopener noreferrer"};function N(R,D){const a=p("ExternalLinkIcon");return c(),i("div",null,[u,n("p",null,[s("Spring Boot 还提供了 "),n("a",r,[k,t(a)]),s(" 和 "),n("a",d,[v,t(a)]),s(" 基类，它们在序列化对象时提供了标准 Jackson 版本的有用替代方法。有关详细信息，请参阅 Javadoc 中的 "),n("a",m,[g,t(a)]),s(" 和 "),n("a",b,[h,t(a)]),s("。")]),f,n("p",null,[s("想试试完整示例，可以参考："),n("a",y,[s("源码"),t(a)])]),j,n("p",null,[s("当 Spring Boot 的 json 库为 jackson 时，可以使用以下配置属性（对应 "),n("a",J,[w,t(a)]),s(" 类）：")]),q,n("p",null,[s("当 Spring Boot 的 json 库为 gson 时，可以使用以下配置属性（对应 "),n("a",S,[_,t(a)]),s(" 类）：")]),C,n("p",null,[s("完整示例："),n("a",x,[s("源码"),t(a)])]),T,z,n("ul",null,[n("li",null,[n("a",M,[s("Spring Boot 教程"),t(a)])])]),O,n("ul",null,[n("li",null,[n("a",B,[s("Spring Boot 官方文档之 boot-features-json"),t(a)])])])])}const F=o(l,[["render",N],["__file","index.html.vue"]]);export{F as default};
