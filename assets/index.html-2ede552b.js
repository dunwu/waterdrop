const e=JSON.parse('{"key":"v-2cb0fc20","path":"/pages/cad15f3b/","title":"Java 模板引擎","lang":"zh-CN","frontmatter":{"title":"Java 模板引擎","date":"2022-02-17T22:34:30.000Z","permalink":"/pages/cad15f3b/","hidden":true,"index":false,"category":["Java","工具","模板引擎"],"tag":["Java","模板引擎"],"description":"Java 模板引擎 模板引擎不属于特定技术领域，它是跨领域跨平台的概念。 模板引擎的作用就是分离业务数据和最终呈现内容，它可以生成特定格式的文档（模板） 。 模板引擎简单来说，就是：模板 + 数据模型 = 输出 较早，也比较经典的模板引擎是 JavaEE 的标准技术 JSP。 但 JSP 存在以下缺点，导致逐渐被淘汰： 性能差 JSP 本质上是 Servlet，第一次请求 JSP 页面，必须要在 web 服务器中编译成 servlet，所以第一次响应较慢。 每次请求 JSP 都是访问 servlet 再用输出流输出的 html 页面。 JSP 中的内容很多，页面响应会很慢，因为是同步加载。 无法前后端分离 动态资源和静态资源全部耦合在一起，无法做到前后端分离。一旦服务器出现状况，前后台一起玩完。 而且 Java 工程师既当爹又当妈，又要维护 Java 代码，又要维护 JSP 代码，痛苦。 前端工程师如果不理解 JSP 语法，面对各种 JSP 标签、表达式、指令，会一脸懵逼，痛苦。 不是所有服务器都支持 - JSP 必须要在支持 JSP 技术的 web 服务器里运行（如 Tomcat）。但有些服务器则不支持 JSP ，如 Nginx。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/cad15f3b/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"Java 模板引擎"}],["meta",{"property":"og:description","content":"Java 模板引擎 模板引擎不属于特定技术领域，它是跨领域跨平台的概念。 模板引擎的作用就是分离业务数据和最终呈现内容，它可以生成特定格式的文档（模板） 。 模板引擎简单来说，就是：模板 + 数据模型 = 输出 较早，也比较经典的模板引擎是 JavaEE 的标准技术 JSP。 但 JSP 存在以下缺点，导致逐渐被淘汰： 性能差 JSP 本质上是 Servlet，第一次请求 JSP 页面，必须要在 web 服务器中编译成 servlet，所以第一次响应较慢。 每次请求 JSP 都是访问 servlet 再用输出流输出的 html 页面。 JSP 中的内容很多，页面响应会很慢，因为是同步加载。 无法前后端分离 动态资源和静态资源全部耦合在一起，无法做到前后端分离。一旦服务器出现状况，前后台一起玩完。 而且 Java 工程师既当爹又当妈，又要维护 Java 代码，又要维护 JSP 代码，痛苦。 前端工程师如果不理解 JSP 语法，面对各种 JSP 标签、表达式、指令，会一脸懵逼，痛苦。 不是所有服务器都支持 - JSP 必须要在支持 JSP 技术的 web 服务器里运行（如 Tomcat）。但有些服务器则不支持 JSP ，如 Nginx。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-18T15:46:22.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"模板引擎"}],["meta",{"property":"article:published_time","content":"2022-02-17T22:34:30.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-18T15:46:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 模板引擎\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-02-17T22:34:30.000Z\\",\\"dateModified\\":\\"2024-06-18T15:46:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"内容","slug":"内容","link":"#内容","children":[]},{"level":2,"title":"资源","slug":"资源","link":"#资源","children":[]}],"git":{"createdTime":1655247928000,"updatedTime":1718725582000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":3}]},"readingTime":{"minutes":1.54,"words":461},"filePathRelative":"01.Java/12.工具/03.模板引擎/README.md","localizedDate":"2022年2月17日","excerpt":"<h1> Java 模板引擎</h1>\\n<p>模板引擎不属于特定技术领域，它是跨领域跨平台的概念。 模板引擎的作用就是分离业务数据和最终呈现内容，它可以生成特定格式的文档（模板） 。</p>\\n<p>模板引擎简单来说，就是：<strong><em><code>模板 + 数据模型 = 输出</code></em></strong></p>\\n<p>较早，也比较经典的模板引擎是 JavaEE 的标准技术 JSP。</p>\\n<p>但 JSP 存在以下缺点，导致逐渐被淘汰：</p>\\n<ul>\\n<li><strong>性能差</strong>\\n<ul>\\n<li>JSP 本质上是 Servlet，第一次请求 JSP 页面，必须要在 web 服务器中编译成 servlet，所以第一次响应较慢。</li>\\n<li>每次请求 JSP 都是访问 servlet 再用输出流输出的 html 页面。</li>\\n<li>JSP 中的内容很多，页面响应会很慢，因为是同步加载。</li>\\n</ul>\\n</li>\\n<li><strong>无法前后端分离</strong>\\n<ul>\\n<li>动态资源和静态资源全部耦合在一起，无法做到前后端分离。一旦服务器出现状况，前后台一起玩完。</li>\\n<li>而且 Java 工程师既当爹又当妈，又要维护 Java 代码，又要维护 JSP 代码，痛苦。</li>\\n<li>前端工程师如果不理解 JSP 语法，面对各种 JSP 标签、表达式、指令，会一脸懵逼，痛苦。</li>\\n</ul>\\n</li>\\n<li><strong>不是所有服务器都支持</strong> - JSP 必须要在支持 JSP 技术的 web 服务器里运行（如 Tomcat）。但有些服务器则不支持 JSP ，如 Nginx。</li>\\n</ul>","autoDesc":true}');export{e as data};
