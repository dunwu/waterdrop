import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as l,c,f as p,a as n,b as s,d as a,e}from"./app-ebb8ae7c.js";const r={},u=n("h1",{id:"elasticsearch-存储",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#elasticsearch-存储","aria-hidden":"true"},"#"),s(" Elasticsearch 存储")],-1),d=n("div",{class:"hint-container info"},[n("p",{class:"hint-container-title"},"概述"),n("p",null,"本文介绍了 Elasticsearch 的逻辑存储、物理存储，以及 Elasticsearch 的倒排索引设计。")],-1),m=e(`<h2 id="逻辑存储设计" tabindex="-1"><a class="header-anchor" href="#逻辑存储设计" aria-hidden="true">#</a> 逻辑存储设计</h2><p>Elasticsearch 的逻辑存储被设计为层级结构，自上而下为：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>index -&gt; type -&gt; mapping -&gt; document -&gt; field
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>各层级结构的说明如下：</p><h3 id="document-文档" tabindex="-1"><a class="header-anchor" href="#document-文档" aria-hidden="true">#</a> Document（文档）</h3><p>Elasticsearch 是面向文档的，这意味着读写数据的最小单位是文档。Elasticsearch 以 JSON 文档的形式序列化和存储数据。文档是一组字段，这些字段是包含数据的键值对。每个文档都有一个唯一的 ID。</p><p>一个简单的 Elasticsearch 文档可能如下所示：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;_index&quot;</span><span class="token operator">:</span> <span class="token string">&quot;my-first-Elasticsearch-index&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;_id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;DyFpo5EBxE8fzbb95DOa&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;_version&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token property">&quot;_seq_no&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token property">&quot;_primary_term&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token property">&quot;found&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">&quot;_source&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;email&quot;</span><span class="token operator">:</span> <span class="token string">&quot;john@smith.com&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;first_name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;last_name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Smith&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;info&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;bio&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Eco-warrior and defender of the weak&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span>
      <span class="token property">&quot;interests&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;dolphins&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;whales&quot;</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;join_date&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2024/05/01&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Elasticsearch 中的 document 是无模式的，也就是并非所有 document 都必须拥有完全相同的字段，它们不受限于同一个模式。</p><h3 id="field-字段" tabindex="-1"><a class="header-anchor" href="#field-字段" aria-hidden="true">#</a> Field（字段）</h3><p>field 包含数据的键值对。默认情况下，Elasticsearch 对每个字段中的所有数据建立索引，并且每个索引字段都具有专用的优化数据结构。</p>`,11),h=n("code",null,"document",-1),k={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-fields.html",target:"_blank",rel:"noopener noreferrer"},v=n("strong",null,"Metadata Field（元数据字段）",-1),g=n("code",null,"_",-1),b={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-index-field.html",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"_index",-1),_={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-id-field.html",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"_id",-1),x={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-source-field.html",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"_source",-1),w=e('<h3 id="type-类型" tabindex="-1"><a class="header-anchor" href="#type-类型" aria-hidden="true">#</a> Type（类型）</h3><p>在 Elasticsearch 中，<strong>type 是 document 的逻辑分类</strong>。每个 index 里可以有一个或多个 type。</p><p>不同的 type 应该有相似的结构（schema）。举例来说，<code>id</code>字段不能在这个组是字符串，在另一个组是数值。</p><blockquote><p>注意：Elasticsearch 7.x 版已彻底移除 type。</p></blockquote><h3 id="index-索引" tabindex="-1"><a class="header-anchor" href="#index-索引" aria-hidden="true">#</a> Index（索引）</h3><p>在 Elasticsearch 中，<strong>可以将 index 视为 document 的集合</strong>。每个索引存储在磁盘上的同组文件中；索引存储了所有映射类型的字段，还有一些设置。</p><p>Elasticsearch 会为所有字段建立索引，经过处理后写入一个倒排索引（Inverted Index）。查找数据的时候，直接查找该索引。</p><p>所以，Elasticsearch 数据管理的顶层单位就叫做 Index。它是单个数据库的同义词。每个 Index 的名字必须是小写。</p><h3 id="elasticsearch-概念和-rdbm-概念" tabindex="-1"><a class="header-anchor" href="#elasticsearch-概念和-rdbm-概念" aria-hidden="true">#</a> Elasticsearch 概念和 RDBM 概念</h3><p>Elasticsearch 概念 vs. RDBM 概念</p><table><thead><tr><th>Elasticsearch 概念</th><th>RDBM 概念</th></tr></thead><tbody><tr><td>索引（index）</td><td>数据库（database）</td></tr><tr><td>类型（type，6.0 废弃，7.0 移除）</td><td>数据表（table）</td></tr><tr><td>文档（docuemnt）</td><td>行（row）</td></tr><tr><td>字符（field）</td><td>列（column）</td></tr><tr><td>映射（mapping）</td><td>表结构（schema）</td></tr></tbody></table><h2 id="物理存储设计" tabindex="-1"><a class="header-anchor" href="#物理存储设计" aria-hidden="true">#</a> 物理存储设计</h2><p>Elasticsearch 的物理存储，天然使用了分布式设计。</p><p>每个 Elasticsearch 进程都从属于一个 cluster，一个 cluster 可以有一个或多个 node（即 Elasticsearch 进程）。</p><p>Elasticsearch 存储会将每个 index 分为多个 shard，而 shard 可以分布在集群中不同节点上。正是由于这个机制，使得 Elasticsearch 有了水平扩展的能力。shard 也是 Elasticsearch 将数据从一个节点迁移到拎一个节点的最小单位。</p>',15),E={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules-merge.html",target:"_blank",rel:"noopener noreferrer"},I=e(`<figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202411260815446.png" alt="Elasticsearch 物理存储" tabindex="0" loading="lazy"><figcaption>Elasticsearch 物理存储</figcaption></figure><h2 id="倒排索引" tabindex="-1"><a class="header-anchor" href="#倒排索引" aria-hidden="true">#</a> 倒排索引</h2><p>既然有倒排索引，顾名思义，有与之相对的正排索引。这里，以实现一个诗词检索器为例，来说明一下正排索引和倒排索引的区别。</p><p><strong>正排索引是 ID 到数据的映射关系</strong>。如下所示，每首诗词用一个 ID 唯一识别。如果，我们要查找诗歌内容中是否包含某个关键字，就不得不在内容的完整文本中进行检索，效率很低。即使针对文档内容创建传统 RDBM 的索引（通常为 B+ 树结构），查找效率依然低下，并且会产生较大的额外存储空间开销。</p><table><thead><tr><th>ID</th><th>文档标题</th><th>文档内容</th></tr></thead><tbody><tr><td>1</td><td>望月怀远</td><td>海上生明月，天涯共此时…</td></tr><tr><td>2</td><td>春江花月夜</td><td>春江潮水连海平，海上明月共潮生…</td></tr><tr><td>3</td><td>静夜思</td><td>床前明月光，疑是地上霜。举头望明月，低头思故乡。</td></tr><tr><td>4</td><td>锦瑟</td><td>沧海月明珠有泪，蓝田日暖玉生烟…</td></tr></tbody></table><p>倒排索引的实现与正排索引相反。<strong>将文本分词后保存为多个词项，词项到 ID 的映射关系称为倒排索引（Inverted index）</strong>。</p><table><thead><tr><th>词项</th><th>ID</th><th>词频</th></tr></thead><tbody><tr><td>月</td><td>1, 2, 3, 4</td><td>1：1 次、2：1 次、3：2 次、4：1 次</td></tr><tr><td>明月</td><td>1, 2, 3</td><td>1：1 次、2：1 次、3：2 次</td></tr><tr><td>海</td><td>1, 2, 4</td><td>1：1 次、2：1 次、4：1 次</td></tr></tbody></table><p>除了要保存词项与 ID 的关系外，还需要保存这个词项在对应文档出现的位置、偏移量等信息，这是因为很多检索的场景中还需要判断关键词前后的内容是否符合搜索要求。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202411260816781.png" alt="Elasticsearch 倒排索引" tabindex="0" loading="lazy"><figcaption>Elasticsearch 倒排索引</figcaption></figure><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202503110718277.png" alt="Elasticsearch 倒排索引" tabindex="0" loading="lazy"><figcaption>Elasticsearch 倒排索引</figcaption></figure><p>有了倒排索引，搜索引擎可以很方便地响应用户的查询。比如用户输入查询 <code>明月</code>，搜索系统查找倒排索引，从中读出包含这个单词的文档，这些文档就是提供给用户的搜索结果。</p><p>要注意倒排索引的两个重要细节：</p><ul><li>倒排索引中的所有词项对应一个或多个文档；</li><li>倒排索引中的词项<strong>根据字典顺序升序排列</strong></li></ul><h2 id="setting" tabindex="-1"><a class="header-anchor" href="#setting" aria-hidden="true">#</a> Setting</h2><p>Elasticsearch 索引的配置项主要分为<strong>静态配置属性</strong>和<strong>动态配置属性</strong>，静态配置属性是索引创建后不能修改，而动态配置属性则可以随时修改。</p><p>Elasticsearch 索引设置的 api 为 <strong><em>settings</em></strong>，完整的示例如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>PUT /my_index
<span class="token punctuation">{</span>
  <span class="token string">&quot;settings&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;index&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
      <span class="token string">&quot;number_of_shards&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;1&quot;</span>,
      <span class="token string">&quot;number_of_replicas&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;1&quot;</span>,
      <span class="token string">&quot;refresh_interval&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;60s&quot;</span>,
      <span class="token string">&quot;analysis&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;filter&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
          <span class="token string">&quot;tsconvert&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;type&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;stconvert&quot;</span>,
            <span class="token string">&quot;convert_type&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;t2s&quot;</span>,
            <span class="token string">&quot;delimiter&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;,&quot;</span>
          <span class="token punctuation">}</span>,
          <span class="token string">&quot;synonym&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;type&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;synonym&quot;</span>,
            <span class="token string">&quot;synonyms_path&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;analysis/synonyms.txt&quot;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>,
        <span class="token string">&quot;analyzer&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
          <span class="token string">&quot;ik_max_word_synonym&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;filter&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>
              <span class="token string">&quot;synonym&quot;</span>,
              <span class="token string">&quot;tsconvert&quot;</span>,
              <span class="token string">&quot;standard&quot;</span>,
              <span class="token string">&quot;lowercase&quot;</span>,
              <span class="token string">&quot;stop&quot;</span>
            <span class="token punctuation">]</span>,
            <span class="token string">&quot;tokenizer&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;ik_max_word&quot;</span>
          <span class="token punctuation">}</span>,
          <span class="token string">&quot;ik_smart_synonym&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;filter&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>
              <span class="token string">&quot;synonym&quot;</span>,
              <span class="token string">&quot;standard&quot;</span>,
              <span class="token string">&quot;lowercase&quot;</span>,
              <span class="token string">&quot;stop&quot;</span>
            <span class="token punctuation">]</span>,
            <span class="token string">&quot;tokenizer&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;ik_smart&quot;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>,
			<span class="token string">&quot;mapping&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
				<span class="token string">&quot;coerce&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;false&quot;</span>,
				<span class="token string">&quot;ignore_malformed&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;false&quot;</span>
			<span class="token punctuation">}</span>,
			<span class="token string">&quot;indexing&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
				<span class="token string">&quot;slowlog&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
					<span class="token string">&quot;threshold&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
						<span class="token string">&quot;index&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
							<span class="token string">&quot;warn&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;2s&quot;</span>,
							<span class="token string">&quot;info&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;1s&quot;</span>
						<span class="token punctuation">}</span>
					<span class="token punctuation">}</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>,
			<span class="token string">&quot;provided_name&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;hospital_202101070533&quot;</span>,
			<span class="token string">&quot;query&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
				<span class="token string">&quot;default_field&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;timestamp&quot;</span>,
				<span class="token string">&quot;parse&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
					<span class="token string">&quot;allow_unmapped_fields&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;false&quot;</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>,
			<span class="token string">&quot;requests&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
				<span class="token string">&quot;cache&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
					<span class="token string">&quot;enable&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;true&quot;</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>,
			<span class="token string">&quot;search&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
				<span class="token string">&quot;slowlog&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
					<span class="token string">&quot;threshold&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
						<span class="token string">&quot;fetch&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
							<span class="token string">&quot;warn&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;1s&quot;</span>,
							<span class="token string">&quot;info&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;200ms&quot;</span>
						<span class="token punctuation">}</span>,
						<span class="token string">&quot;query&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
							<span class="token string">&quot;warn&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;1s&quot;</span>,
							<span class="token string">&quot;info&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;500ms&quot;</span>
						<span class="token punctuation">}</span>
					<span class="token punctuation">}</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="固定属性" tabindex="-1"><a class="header-anchor" href="#固定属性" aria-hidden="true">#</a> 固定属性</h3><ul><li><strong><em><code>index.creation_date</code></em></strong>：顾名思义索引的创建时间戳。</li><li><strong><em><code>index.uuid</code></em></strong>：索引的 uuid 信息。</li><li><strong><em><code>index.version.created</code></em></strong>：索引的版本号。</li></ul><h3 id="索引静态配置" tabindex="-1"><a class="header-anchor" href="#索引静态配置" aria-hidden="true">#</a> 索引静态配置</h3><ul><li><strong><em><code>index.number_of_shards</code></em></strong>：索引的主分片数，默认值是 <strong><em><code>5</code></em></strong>。这个配置在索引创建后不能修改；在 Elasticsearch 层面，可以通过 <strong><em><code>es.index.max_number_of_shards</code></em></strong> 属性设置索引最大的分片数，默认为 <strong><em><code>1024</code></em></strong>。</li><li><strong><em><code>index.codec</code></em></strong>：数据存储的压缩算法，默认值为 <strong><em><code>LZ4</code></em></strong>，可选择值还有 <strong><em><code>best_compression</code></em></strong>，它比 LZ4 可以获得更好的压缩比（即占据较小的磁盘空间，但存储性能比 LZ4 低）。</li><li><strong><em><code>index.routing_partition_size</code></em></strong>：路由分区数，如果设置了该参数，其路由算法为：<code>( hash(_routing) + hash(_id) % index.routing_parttion_size ) % number_of_shards</code>。如果该值不设置，则路由算法为 <code>hash(_routing) % number_of_shardings</code>，<code>_routing</code> 默认值为 <code>_id</code>。</li></ul><p>静态配置里，有重要的部分是配置分析器（config analyzers）。</p><ul><li><p><strong><code>index.analysis</code></strong></p><p>：分析器最外层的配置项，内部主要分为 char_filter、tokenizer、filter 和 analyzer。</p><ul><li><strong><em><code>char_filter</code></em></strong>：定义新的字符过滤器件。</li><li><strong><em><code>tokenizer</code></em></strong>：定义新的分词器。</li><li><strong><em><code>filter</code></em></strong>：定义新的 token filter，如同义词 filter。</li><li><strong><em><code>analyzer</code></em></strong>：配置新的分析器，一般是 char_filter、tokenizer 和一些 token filter 的组合。</li></ul></li></ul><h3 id="索引动态配置" tabindex="-1"><a class="header-anchor" href="#索引动态配置" aria-hidden="true">#</a> 索引动态配置</h3>`,24),z=n("li",null,[n("strong",null,[n("em",null,[n("code",null,"index.number_of_replicas")])]),s("：索引主分片的副本数，默认值是 "),n("strong",null,[n("em",null,[n("code",null,"1")])]),s("，该值必须大于等于 0，这个配置可以随时修改。")],-1),D=n("strong",null,[n("em",null,[n("code",null,"index.refresh_interval")])],-1),B=n("strong",null,[n("em",null,[n("code",null,"1s")])],-1),j=n("strong",null,[n("em",null,[n("code",null,"-1")])],-1),L={href:"https://www.knowledgedict.com/tutorial/elasticsearch-refresh_interval-settings.html",target:"_blank",rel:"noopener noreferrer"},N=n("h2",{id:"参考资料",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考资料","aria-hidden":"true"},"#"),s(" 参考资料")],-1),M={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html",target:"_blank",rel:"noopener noreferrer"},S={href:"https://www.itshujia.com/read/elasticsearch/353.html",target:"_blank",rel:"noopener noreferrer"},V={href:"https://www.itshujia.com/read/elasticsearch/354.html",target:"_blank",rel:"noopener noreferrer"},R={href:"https://blog.devgenius.io/elasticsearch-solution-to-searching-71116220c82f",target:"_blank",rel:"noopener noreferrer"};function F(J,O){const t=o("ExternalLinkIcon");return l(),c("div",null,[u,d,p(" more "),m,n("p",null,[h,s(" 包含数据和元数据。"),n("a",k,[v,a(t)]),s(" 是存储有关文档信息的系统字段。在 Elasticsearch 中，元数据字段都以 "),g,s(" 开头。常见的元数据字段有：")]),n("ul",null,[n("li",null,[n("a",b,[q,a(t)]),s(" - 文档所属的索引")]),n("li",null,[n("a",_,[f,a(t)]),s(" - 文档的 ID")]),n("li",null,[n("a",x,[y,a(t)]),s(" - 表示文档原文的 JSON")])]),w,n("p",null,[s("Elasticsearch 的每个 shard 对应一个 Lucene index（一个包含倒排索引的文件目录）。Lucene index 又会被分解为多个 segment。segment 是索引中的内部存储元素，由于写入效率的考虑，所以被设计为不可变更的。segment 会定期 "),n("a",E,[s("合并"),a(t)]),s(" 较大的 segment，以保持索引大小。简单来说，Lucene 就是一个 jar 包，里面包含了封装好的构建、管理倒排索引的算法代码。")]),I,n("ul",null,[z,n("li",null,[D,s("：执行新索引数据的刷新操作频率，该操作使对索引的最新更改对搜索可见，默认为 "),B,s("。也可以设置为 "),j,s(" 以禁用刷新。更详细信息参考 "),n("a",L,[s("Elasticsearch 动态修改 refresh_interval 刷新间隔设置"),a(t)]),s("。")])]),N,n("ul",null,[n("li",null,[n("a",M,[s("Elasticsearch 官方文档之索引"),a(t)])]),n("li",null,[n("a",S,[s("Elasticsearch 从入门到实践之正排索引与倒排索引简介"),a(t)])]),n("li",null,[n("a",V,[s("Elasticsearch 从入门到实践之倒排索引的实现"),a(t)])]),n("li",null,[n("a",R,[s("https://blog.devgenius.io/elasticsearch-solution-to-searching-71116220c82f"),a(t)])])])])}const C=i(r,[["render",F],["__file","index.html.vue"]]);export{C as default};
