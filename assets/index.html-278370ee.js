import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as a,o as i,c as l,a as e,d as o,b as t,e as n}from"./app-682890be.js";const d={},c=e("h1",{id:"分布式综合面试",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#分布式综合面试","aria-hidden":"true"},"#"),t(" 分布式综合面试")],-1),h=e("h2",{id:"逻辑时钟",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#逻辑时钟","aria-hidden":"true"},"#"),t(" 逻辑时钟")],-1),p=e("p",null,"扩展：",-1),g={href:"https://lamport.azurewebsites.net/pubs/time-clocks.pdf",target:"_blank",rel:"noopener noreferrer"},u=e("strong",null,"Time, Clocks, and the Ordering of Events in a Distributed System",-1),_={href:"https://cloud.tencent.com/developer/article/1163428",target:"_blank",rel:"noopener noreferrer"},f=e("strong",null,"译文",-1),m={href:"https://zhuanlan.zhihu.com/p/56146800",target:"_blank",rel:"noopener noreferrer"},b=e("strong",null,"解读",-1),w={href:"http://courses.csail.mit.edu/6.852/01/papers/VirtTime_GlobState.pdf",target:"_blank",rel:"noopener noreferrer"},P=e("strong",null,"Virtual Time and Global States of Distributed Systems",-1),A={href:"https://zhuanlan.zhihu.com/p/56886156",target:"_blank",rel:"noopener noreferrer"},x=e("strong",null,"解读",-1),k={href:"https://writings.sh/post/logical-clocks",target:"_blank",rel:"noopener noreferrer"},C=n('<h3 id="【初级】为什么需要逻辑时钟" tabindex="-1"><a class="header-anchor" href="#【初级】为什么需要逻辑时钟" aria-hidden="true">#</a> 【初级】为什么需要逻辑时钟？</h3><details class="hint-container details"><summary>要点</summary><p><strong>经典问题</strong></p><ul><li>为什么需要逻辑时钟？</li><li>分布式系统中以系统时间来确定事件顺序有什么问题？</li></ul><p><strong>知识点</strong></p><p><strong>不同节点的物理时钟无法完全保持一致</strong>。即使引入一个全局时钟（例如：NTP）来进行校准，由于网络通信延迟的不确定性，以及时钟计时的偏差，无法保证每个节点的时间完全一致。</p><p>在分布式系统中，由于网络通信延迟的不确定性， <strong>仅仅以接收顺序作为整个分布式系统中事件的发生顺序是不可取的</strong>。</p></details><h3 id="【中级】什么是偏序-什么是全序" tabindex="-1"><a class="header-anchor" href="#【中级】什么是偏序-什么是全序" aria-hidden="true">#</a> 【中级】什么是偏序？什么是全序？</h3><details class="hint-container details"><summary>要点</summary><p>全序和偏序是数学上的术语，按照数学内容阐述比较晦涩，简单来说：</p><ul><li><strong>偏序</strong>是部分可比较的有序关系。</li><li><strong>全序</strong>是在偏序基础上，要求全部元素必须可比较的有序关系。</li></ul></details><h3 id="【高级】什么是逻辑时钟" tabindex="-1"><a class="header-anchor" href="#【高级】什么是逻辑时钟" aria-hidden="true">#</a> 【高级】什么是逻辑时钟？</h3>',5),y={class:"hint-container details"},L=e("summary",null,"要点",-1),B=e("p",null,[e("strong",null,"经典问题")],-1),v=e("ul",null,[e("li",null,"什么是逻辑时钟？"),e("li",null,"逻辑时钟是如何工作的？")],-1),R=e("p",null,[e("strong",null,"知识点")],-1),z={href:"https://lamport.azurewebsites.net/pubs/time-clocks.pdf",target:"_blank",rel:"noopener noreferrer"},E=e("strong",null,"Time, Clocks, and the Ordering of Events in a Distributed System",-1),S=n('<p><strong>逻辑时钟并不度量时间本身，仅区分事件发生的前后顺序</strong>。</p><p>分布式系统中按是否存在节点交互可分为三类事件，一类发生于节点内部，二是发送事件，三是接收事件。Lamport 时间戳原理如下：</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202405170810350.webp" alt="Lamport timestamps space time (图片来源: wikipedia)_" tabindex="0" loading="lazy"><figcaption>Lamport timestamps space time (图片来源: wikipedia)_</figcaption></figure><ol><li>每个事件对应一个 Lamport 计数器，初始值为 0</li><li>如果事件在节点内发生，计数器加 1</li><li>如果事件属于发送事件，计数器加 1 并在消息中带上该计数器</li><li>如果事件属于接收事件，计数器 = Max(本地计数器，消息中的计数器) + 1</li></ol><p>综上，<strong>Lamport 逻辑时钟构建了一个全序时钟来描述事件顺序</strong>。</p><p><strong>Lamport 逻辑时钟的缺陷是无法描述同时发生的事件</strong>。</p>',6),Z=e("p",null,"扩展：",-1),T={href:"https://lamport.azurewebsites.net/pubs/time-clocks.pdf",target:"_blank",rel:"noopener noreferrer"},D=e("strong",null,"Time, Clocks, and the Ordering of Events in a Distributed System",-1),I=n('<h3 id="【高级】什么是向量时钟" tabindex="-1"><a class="header-anchor" href="#【高级】什么是向量时钟" aria-hidden="true">#</a> 【高级】什么是向量时钟？</h3><details class="hint-container details"><summary>要点</summary><p><strong>向量时钟</strong>其实是在逻辑时钟的基础上进行了演进，算法逻辑类似，只是不仅记录了本节点的时间戳，还记录了其他节点的时间戳。其本质在于<strong>将逻辑时钟的全序计数器改造为向量时钟的偏序大小关系</strong>：向量有序，则事件有序；向量平行，则事件并发。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202405170811135.webp" alt="Vector clock space time (图片来源: wikipedia)" tabindex="0" loading="lazy"><figcaption>Vector clock space time (图片来源: wikipedia)</figcaption></figure><p><strong>向量时钟可以发现数据冲突，但不能解决数据冲突</strong>。</p></details><h3 id="【高级】什么是版本向量时钟" tabindex="-1"><a class="header-anchor" href="#【高级】什么是版本向量时钟" aria-hidden="true">#</a> 【高级】什么是版本向量时钟？</h3><details class="hint-container details"><summary>要点</summary><p>在向量时钟算法中， 消息传播后，发送方的向量一定会小于接收者的向量， 是因为接收者对齐了发送者的原因。</p><p>版本向量在此基础上，做了一点加强：消息传播后，发送方也对齐接收者的向量，也就是双向对齐，在版本向量中，叫做<strong>同步</strong>。</p><p>发送消息和接收消息的时候不再自增向量中的自己的计数器，而是只做双方的向量对齐操作。 也就是，<strong>只有在更新数据的时候做向量自增</strong>。</p></details><h2 id="一致性" tabindex="-1"><a class="header-anchor" href="#一致性" aria-hidden="true">#</a> 一致性</h2><h3 id="【初级】什么是强一致性-什么是弱一致性-什么是最终一致性" tabindex="-1"><a class="header-anchor" href="#【初级】什么是强一致性-什么是弱一致性-什么是最终一致性" aria-hidden="true">#</a> 【初级】什么是强一致性？什么是弱一致性？什么是最终一致性？</h3><details class="hint-container details"><summary>要点</summary><p><strong>一致性（Consistency）<strong>指的是</strong>多个数据副本是否能保持一致</strong>的特性。</p><p>数据一致性又可以分为以下几点：</p><ul><li><strong>强一致性</strong> - 数据更新操作结果和操作响应总是一致的，即操作响应通知更新失败，那么数据一定没有被更新，而不是处于不确定状态。通俗的说，分布式系统在执行写操作成功后，如果所有用户都能够读取到最新的值，该系统就被认为具有强一致性。</li><li><strong>弱一致性</strong> - 系统在写入数据成功后，不承诺立即能读到最新的值，也不承诺什么时候能读到，但是过一段时间之后用户可以看到更新后的值。那么用户读不到最新数据的这段时间被称为“不一致窗口时间”。</li><li><strong>最终一致性</strong> - 最终一致性作为弱一致性中的特例，强调的是所有数据副本，在经过一段时间的同步后，最终能够到达一致的状态，不需要实时保证系统数据的强一致性。</li></ul></details><h3 id="【初级】什么是-acid" tabindex="-1"><a class="header-anchor" href="#【初级】什么是-acid" aria-hidden="true">#</a> 【初级】什么是 ACID？</h3><details class="hint-container details"><summary>要点</summary><p>那么，什么是 ACID 特性呢？ACID 是数据库事务正确执行的四个基本要素的单词缩写：</p><ul><li><strong>原子性（Atomicity）</strong><ul><li>原子是指不可分解为更小粒度的东西。事务的原子性意味着：<strong>事务中的所有操作要么全部成功，要么全部失败</strong>。</li><li>回滚可以用日志来实现，日志记录着事务所执行的修改操作，在回滚时反向执行这些修改操作即可。</li><li>ACID 中的原子性并不关乎多个操作的并发性，它并没有描述多个线程试图访问相同的数据会发生什么情况，后者其实是由 ACID 的隔离性所定义。</li></ul></li><li><strong>一致性（Consistency）</strong><ul><li>数据库在事务执行前后都保持一致性状态。</li><li>在一致性状态下，所有事务对一个数据的读取结果都是相同的。</li><li>一致性本质上要求应用层来维护状态一致（或者恒等），应用程序有责任正确地定义事务来保持一致性。这不是数据库可以保证的事情。</li></ul></li><li><strong>隔离性（Isolation）</strong><ul><li><strong>同时运行的事务互不干扰</strong>。换句话说，一个事务所做的修改在最终提交以前，对其它事务是不可见的。</li></ul></li><li><strong>持久性（Durability）</strong><ul><li>一旦事务提交，则其所做的修改将会永远保存到数据库中。即使系统发生崩溃，事务执行的结果也不能丢失。</li><li>可以通过数据库备份和恢复来实现，在系统发生奔溃时，使用备份的数据库进行数据恢复。</li></ul></li></ul><p>一个支持事务（Transaction）中的数据库系统，必需要具有这四种特性，否则在事务过程（Transaction processing）当中无法保证数据的正确性。</p><ul><li>只有满足一致性，事务的执行结果才是正确的。</li><li>在无并发的情况下，事务串行执行，隔离性一定能够满足。此时只要能满足原子性，就一定能满足一致性。</li><li>在并发的情况下，多个事务并行执行，事务不仅要满足原子性，还需要满足隔离性，才能满足一致性。</li><li>事务满足持久化是为了能应对系统崩溃的情况。</li></ul></details><h2 id="cap-base" tabindex="-1"><a class="header-anchor" href="#cap-base" aria-hidden="true">#</a> CAP &amp; BASE</h2>',10),F=e("p",null,"扩展：",-1),q={href:"https://www.comp.nus.edu.sg/~gilbert/pubs/BrewersConjecture-SigAct.pdf",target:"_blank",rel:"noopener noreferrer"},G=e("strong",null,"Brewer’s Conjecture and the Feasibility of Consistent, Available, Partition-Tolerant Web Services",-1),N={href:"https://juejin.cn/post/6844903936718012430",target:"_blank",rel:"noopener noreferrer"},V=e("strong",null,"解读",-1),j={href:"https://www.infoq.com/articles/cap-twelve-years-later-how-the-rules-have-changed/",target:"_blank",rel:"noopener noreferrer"},K=e("strong",null,"CAP Twelve Years Later: How the “Rules” Have Changed",-1),M={href:"https://www.zhihu.com/question/64778723/answer/224266038",target:"_blank",rel:"noopener noreferrer"},O=e("strong",null,"解读",-1),H={href:"https://www.semanticscholar.org/paper/BASE%3A-An-Acid-Alternative-Pritchett/2e72e6c022dd33115304ecfcb6dad7ea609534a4",target:"_blank",rel:"noopener noreferrer"},W=e("strong",null,"BASE: An Acid Alternative",-1),Y={href:"https://www.cnblogs.com/savorboard/p/base-an-acid-alternative.html",target:"_blank",rel:"noopener noreferrer"},U=e("strong",null,"译文",-1),X=e("h3",{id:"【中级】什么是-cap-定理",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#【中级】什么是-cap-定理","aria-hidden":"true"},"#"),t(" 【中级】什么是 CAP 定理？")],-1),J={class:"hint-container details"},Q=n('<summary>要点</summary><p>CAP 定理提出：分布式系统有三个指标，这三个指标不能同时做到：</p><ul><li><strong>一致性（Consistency）</strong> - 在任何给定时间，网络中的所有节点都具有完全相同（最近）的值。</li><li><strong>可用性（Availability）</strong> - 对网络的每个请求都会返回响应，但不能保证返回的数据是最新的。</li><li><strong>分区容错性（Partition Tolerance）</strong> - 即使任意数量的节点出现故障，网络仍会继续运行。</li></ul><p>CAP 就是取 Consistency、Availability、Partition Tolerance 的首字母而命名。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202405160639643.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在分布式系统中，分区容错性是一个既定的事实：因为分布式系统总会出现各种各样的问题，如由于网络原因而导致节点失联；发生机器故障；机器重启或升级等等。因此，<strong>CAP 定理实际上是要在可用性（A）和一致性（C）之间做权衡</strong>。</p>',6),$={href:"https://www.comp.nus.edu.sg/~gilbert/pubs/BrewersConjecture-SigAct.pdf",target:"_blank",rel:"noopener noreferrer"},ee=e("strong",null,"Brewer’s Conjecture and the Feasibility of Consistent, Available, Partition-Tolerant Web Services",-1),te={href:"https://juejin.cn/post/6844903936718012430",target:"_blank",rel:"noopener noreferrer"},re=e("strong",null,"解读",-1),oe=n('<h3 id="【中级】选择-cp-还是-ap" tabindex="-1"><a class="header-anchor" href="#【中级】选择-cp-还是-ap" aria-hidden="true">#</a> 【中级】选择 CP 还是 AP？</h3><details class="hint-container details"><summary>要点</summary><p>在分布式系统中，分区容错性是一个既定的事实：因为分布式系统总会出现各种各样的问题，如由于网络原因而导致节点失联；发生机器故障；机器重启或升级等等。因此，<strong>CAP 定理实际上是要在可用性（A）和一致性（C）之间做权衡</strong>。</p><ul><li>选择 <strong>AP 模式</strong>，偏向于保证服务的高可用性。用户访问系统的时候，都能得到响应数据，不会出现响应错误；但是，当出现分区故障时，相同的读操作，访问不同的节点，得到响应数据可能不一样。</li><li>选择 <strong>CP 模式</strong>，一旦因为消息丢失、延迟过高发生了网络分区，就会影响用户的体验和业务的可用性。因为为了防止数据不一致，系统将拒绝新数据的写入。</li></ul><p>一个最具代表性的问题是：服务注册中心应该选择 AP 还是 CP？</p><p>在微服务架构下，服务注册和服务发现机制中主要有三种角色：</p><ul><li><strong>服务提供者</strong>（RPC Server / Provider）</li><li><strong>服务消费者</strong>（RPC Client / Consumer）</li><li><strong>服务注册中心</strong>（Registry）</li></ul><p><strong>注册中心</strong>负责协调服务注册和服务发现，显然它是核心中的核心。主流的注册中心有很多，如：ZooKeeper、Nacos、Eureka、Consul、etcd 等。在针对注册中心进行技术选型时，其 CAP 设计也是一个比较的维度。</p><ul><li>CP 模型代表：ZooKeeper、etcd。系统强调数据的一致性，当数据一致性无法保证时（如：正在选举主节点），系统拒绝请求。</li><li>AP 模型代表：Nacos、Eureka。系统强调可用性，牺牲一定的一致性（即服务节点上的数据不保证是最新的），来保证整体服务可用。</li></ul><p>对于服务注册中心而言，即使不同节点保存的服务注册信息存在差异，也不会造成灾难性的后果，仅仅是信息滞后而已。但是，如果为了追求数据一致性，使得服务发现短时间内不可用，负面影响更严重。所以，对于服务注册中心而言，可用性比一致性更重要，一般应该选择 AP 模型。</p></details><h3 id="【中级】cap-定理真的正确吗" tabindex="-1"><a class="header-anchor" href="#【中级】cap-定理真的正确吗" aria-hidden="true">#</a> 【中级】CAP 定理真的正确吗？</h3>',3),ne={class:"hint-container details"},se=e("summary",null,"要点",-1),ae=e("p",null,"CAP 定理在分布式系统领域大名鼎鼎，以至于被很多人视为了真理。然而，CAP 定理真的正确吗？",-1),ie=e("p",null,[t("网络分区是一种故障，不管喜欢还是不喜欢，它都可能发生，所以无法选择或逃避分区的问题。在网络正常的时候，系统可以同时保证一致性（线性化）和可用性。而一旦发生了网络故障，必须要么选择一致性，要么选择可用性。因此，对 CAP 更准确的理解应该是："),e("strong",null,"当发生网络分区（P）的情况下，可用性（A）和一致性（C）二者只能选其一"),t("。")],-1),le=e("p",null,"CAP 定理所描述的模型实际上局限性很大，它只考虑了一种一致性模型和一种故障（网络分区故障），而没有考虑网络延迟、节点失效等情况。因此，它对于指导一个具体的分布式系统设计来说，没有太大的实际价值。",-1),de={href:"https://www.infoq.com/articles/cap-twelve-years-later-how-the-rules-have-changed/",target:"_blank",rel:"noopener noreferrer"},ce=e("strong",null,"CAP Twelve Years Later: How the “Rules” Have Changed",-1),he={href:"https://www.infoq.com/articles/cap-twelve-years-later-how-the-rules-have-changed/",target:"_blank",rel:"noopener noreferrer"},pe=e("strong",null,"CAP Twelve Years Later: How the “Rules” Have Changed",-1),ge={href:"https://www.zhihu.com/question/64778723/answer/224266038",target:"_blank",rel:"noopener noreferrer"},ue=e("strong",null,"解读",-1),_e=e("h3",{id:"【中级】什么是-base-定理",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#【中级】什么是-base-定理","aria-hidden":"true"},"#"),t(" 【中级】什么是 BASE 定理？")],-1),fe={class:"hint-container details"},me=n('<summary>要点</summary><p>BASE 是 <strong><code>基本可用（Basically Available）</code></strong>、<strong><code>软状态（Soft State）</code></strong> 和 <strong><code>最终一致性（Eventually Consistent）</code></strong> 三个短语的缩写。BASE 定理是对 CAP 定理中可用性（A）和一致性（C）权衡的结果。</p><p>BASE 定理的<strong>核心思想</strong>是：即使无法做到强一致性，但每个应用都可以根据自身业务特点，采用适当的方式来使系统达到最终一致性。</p><p>ACID 要求强一致性，通常运用在传统的数据库系统上。而 BASE 要求最终一致性，通过<strong>牺牲强一致性来达到可用性</strong>，通常运用在大型分布式系统中。</p><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20211102192406.png" style="width:640px;"><p>在实际的分布式场景中，不同业务单元和组件对一致性的要求是不同的，因此 ACID 和 BASE 往往会结合在一起使用。</p>',6),be={href:"https://www.semanticscholar.org/paper/BASE%3A-An-Acid-Alternative-Pritchett/2e72e6c022dd33115304ecfcb6dad7ea609534a4",target:"_blank",rel:"noopener noreferrer"},we=e("strong",null,"BASE: An Acid Alternative",-1),Pe={href:"https://www.cnblogs.com/savorboard/p/base-an-acid-alternative.html",target:"_blank",rel:"noopener noreferrer"},Ae=e("strong",null,"译文",-1),xe=e("h2",{id:"paxos",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#paxos","aria-hidden":"true"},"#"),t(" Paxos")],-1),ke=e("p",null,"扩展：",-1),Ce={href:"https://research.microsoft.com/en-us/um/people/lamport/pubs/lamport-paxos.pdf",target:"_blank",rel:"noopener noreferrer"},ye={href:"https://lamport.azurewebsites.net/pubs/paxos-simple.pdf",target:"_blank",rel:"noopener noreferrer"},Le={href:"https://zhuanlan.zhihu.com/p/31780743",target:"_blank",rel:"noopener noreferrer"},Be={href:"https://zh.wikipedia.org/w/index.php?title=Paxos%E7%AE%97%E6%B3%95",target:"_blank",rel:"noopener noreferrer"},ve={href:"https://www.bilibili.com/video/BV1TW411M7Fx?from=search&seid=11524608198747599965",target:"_blank",rel:"noopener noreferrer"},Re={href:"https://www.bilibili.com/video/av36556594",target:"_blank",rel:"noopener noreferrer"},ze={href:"https://www.youtube.com/watch?v=d7nAGI_NZPk",target:"_blank",rel:"noopener noreferrer"},Ee={href:"https://dunwu.github.io/waterdrop/pages/ea903d16/",target:"_blank",rel:"noopener noreferrer"},Se=n('<h3 id="【高级】paxos-是怎样工作的" tabindex="-1"><a class="header-anchor" href="#【高级】paxos-是怎样工作的" aria-hidden="true">#</a> 【高级】Paxos 是怎样工作的？</h3><details class="hint-container details"><summary>要点</summary><p><strong>Paxos 是一种基于消息传递且具有容错性的共识性（consensus）算法</strong>。</p><p>Paxos 算法运行在允许宕机故障的异步系统中，不要求可靠的消息传递，可容忍消息丢失、延迟、乱序以及重复。</p><p>Paxos 利用多数派 (Majority) 机制保证了一定的容错能力，即 <code>N</code> 个节点的系统最多允许 <code>N / 2 - 1</code> 个节点同时出现故障。</p><p>Paxos 算法包含 2 个部分：</p><ul><li><strong>Basic Paxos 算法</strong>：描述的是多节点之间如何就某个值达成共识。</li><li><strong>Multi Paxos 思想</strong>：描述的是执行多个 Basic Paxos 实例，就一系列值达成共识。</li></ul><h4 id="basic-paxos-算法" tabindex="-1"><a class="header-anchor" href="#basic-paxos-算法" aria-hidden="true">#</a> Basic Paxos 算法</h4><p><strong>Basic Paxos 是通过二阶段提交的方式来达成共识的</strong>。</p><p>Paxos 将分布式系统中的节点分 Proposer、Acceptor、Learner 三种角色。</p><ul><li><strong>提议者（Proposer）</strong>：发出提案（Proposal），用于投票表决。Proposal 信息包括提案编号 (Proposal ID) 和提议的值 (Value)。在绝大多数场景中，集群中收到客户端请求的节点，才是提议者。这样做的好处是，对业务代码没有入侵性，也就是说，我们不需要在业务代码中实现算法逻辑。</li><li><strong>接受者（Acceptor）</strong>：对每个 Proposal 进行投票，若 Proposal 获得多数 Acceptor 的接受，则称该 Proposal 被批准。一般来说，集群中的所有节点都在扮演接受者的角色，参与共识协商，并接受和存储数据。</li><li><strong>学习者（Learner）</strong>：不参与接受，从 Proposers/Acceptors 学习、记录最新达成共识的提案（Value）。一般来说，学习者是数据备份节点，比如主从架构中的从节点，被动地接受数据，容灾备份。</li></ul><p>Paxos 算法有 3 个阶段，其中，前 2 个阶段负责协商并达成共识：</p><ol><li><strong>准备（Prepare）阶段</strong>：Proposer 向 Acceptors 发出 Prepare 请求，Acceptors 针对收到的 Prepare 请求进行 Promise 承诺。</li><li><strong>接受（Accept）阶段</strong>：Proposer 收到多数 Acceptors 承诺的 Promise 后，向 Acceptors 发出 Propose 请求，Acceptors 针对收到的 Propose 请求进行 Accept 处理。</li><li><strong>学习（Learn）阶段</strong>：Proposer 在收到多数 Acceptors 的 Accept 之后，标志着本次 Accept 成功，决议形成，将形成的决议发送给所有 Learners。</li></ol><h4 id="multi-paxos-思想" tabindex="-1"><a class="header-anchor" href="#multi-paxos-思想" aria-hidden="true">#</a> Multi Paxos 思想</h4><p>Basic Paxos 有以下问题，导致它不能应用于实际：</p><ul><li><strong>Basic Paxos 算法只能对一个值形成决议</strong>。</li><li><strong>Basic Paxos 算法会消耗大量网络带宽</strong>。Basic Paxos 中，决议的形成至少需要两次网络通信，在高并发情况下可能需要更多的网络通信，极端情况下甚至可能形成活锁。如果想连续确定多个值，Basic Paxos 搞不定了。</li></ul><p>Multi Paxos 基于 Basic Paxos 做了两点改进：</p><ul><li><strong>针对每一个要确定的值，运行一次 Paxos 算法实例（Instance），形成决议</strong>。每一个 Paxos 实例使用唯一的 Instance ID 标识。</li><li><strong>在所有 Proposer 中选举一个 Leader，由 Leader 唯一地提交 Proposal 给 Acceptor 进行表决</strong>。这样没有 Proposer 竞争，解决了活锁问题。在系统中仅有一个 Leader 进行 Value 提交的情况下，Prepare 阶段就可以跳过，从而将两阶段变为一阶段，提高效率。</li></ul></details><h2 id="raft" tabindex="-1"><a class="header-anchor" href="#raft" aria-hidden="true">#</a> Raft</h2>',3),Ze=e("p",null,"扩展：",-1),Te={href:"https://ramcloud.atlassian.net/wiki/download/attachments/6586375/raft.pdf",target:"_blank",rel:"noopener noreferrer"},De={href:"https://github.com/maemual/raft-zh_cn/blob/master/raft-zh_cn.md",target:"_blank",rel:"noopener noreferrer"},Ie={href:"https://www.youtube.com/watch?v=YbZ3zDzDnrw&feature=youtu.be",target:"_blank",rel:"noopener noreferrer"},Fe={href:"http://www2.cs.uh.edu/~paris/6360/PowerPoint/Raft.ppt",target:"_blank",rel:"noopener noreferrer"},qe={href:"https://www.jdon.com/artichect/raft.html",target:"_blank",rel:"noopener noreferrer"},Ge={href:"https://zhuanlan.zhihu.com/p/32052223",target:"_blank",rel:"noopener noreferrer"},Ne={href:"http://thesecretlivesofdata.com/raft",target:"_blank",rel:"noopener noreferrer"},Ve={href:"https://raft.github.io/",target:"_blank",rel:"noopener noreferrer"},je={href:"https://dunwu.github.io/waterdrop/pages/9386474c/",target:"_blank",rel:"noopener noreferrer"},Ke=e("h3",{id:"【高级】raft-是怎样工作的",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#【高级】raft-是怎样工作的","aria-hidden":"true"},"#"),t(" 【高级】Raft 是怎样工作的？")],-1),Me={class:"hint-container details"},Oe=e("summary",null,"要点",-1),He={href:"https://ramcloud.atlassian.net/wiki/download/attachments/6586375/raft.pdf",target:"_blank",rel:"noopener noreferrer"},We=e("strong",null,"Raft 算法是通过一切以领导者为准的方式，实现一系列值的共识和各节点日志的一致",-1),Ye={href:"https://ramcloud.atlassian.net/wiki/download/attachments/6586375/raft.pdf",target:"_blank",rel:"noopener noreferrer"},Ue=e("strong",null,"难以理解，更难以实现",-1),Xe=e("strong",null,"既容易理解，也容易实现",-1),Je=n('<p>Raft 将一致性问题分解成了三个子问题：</p><ul><li><strong>选举 Leader</strong></li><li><strong>日志复制</strong></li><li><strong>安全性</strong></li></ul><h4 id="raft-概念" tabindex="-1"><a class="header-anchor" href="#raft-概念" aria-hidden="true">#</a> Raft 概念</h4><p><strong>（1）服务器角色</strong></p><p>在 Raft 中，任何时刻，每个服务器都处于这三个角色之一 ：</p><ul><li><strong><code>Leader</code></strong> - 领导者，通常一个系统中是<strong>一主（Leader）多从（Follower）</strong>。Leader <strong>负责处理所有的客户端请求</strong>。</li><li><strong><code>Follower</code></strong> - 跟随者，<strong>不会发送任何请求</strong>，只是简单的 <strong>响应来自 Leader 或者 Candidate 的请求</strong>。</li><li><strong><code>Candidate</code></strong> - 参选者，选举新 Leader 时的临时角色。</li></ul><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20200131215742.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>（2）任期</strong></p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20200131220742.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Raft 把时间分割成任意长度的 <strong><em><code>任期（Term）</code></em></strong>，任期用连续的整数标记。每一段任期从一次<strong>选举</strong>开始。<strong>Raft 保证了在一个给定的任期内，最多只有一个领导者</strong>。</p><p><strong>任期在 Raft 算法中充当逻辑时钟的作用，使得服务器节点可以查明一些过期的信息（比如过期的 Leader）。每个服务器节点都会存储一个当前任期号，这一编号在整个时期内单调的增长。当服务器之间通信的时候会交换当前任期号。</strong></p><p><strong>（3）选举 Leader</strong></p><p><strong>领导者心跳消息</strong>：Raft 使用一种心跳机制来触发 Leader 选举。<strong>Leader 需要周期性的向所有 Follower 发送心跳消息</strong>，以此维持 Leader 身份。</p><p><strong>随机的竞选超时时间</strong>：每个 Follower 都设置了一个<strong>随机的竞选超时时间</strong>，一般为 <code>150ms ~ 300ms</code>，如果在竞选超时时间内没有收到 Leader 的心跳消息，就会认为当前 Term 没有可用的 Leader，并发起选举来选出新的 Leader。开始一次选举过程，Follower 先要增加自己的当前 Term 号，并<strong>转换为 Candidate</strong>。</p><p>Candidate 会并行的<strong>向集群中的所有服务器节点发送投票请求（<code>RequestVote RPC</code>）</strong>，它会保持当前状态直到以下三件事情之一发生：</p><ul><li><strong>自己成为 Leader</strong></li><li><strong>其他的服务器成为 Leader</strong></li><li><strong>没有任何服务器成为 Leader</strong></li></ul><p>Raft 算法通过：领导者心跳消息、随机选举超时时间、得到大多数选票才通过原则、任期最新者优先、先来先服务等投票原则，保证了一个任期只有一位领导，也极大地减少了选举失败的情况。</p><h4 id="日志复制" tabindex="-1"><a class="header-anchor" href="#日志复制" aria-hidden="true">#</a> 日志复制</h4><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202405170817072.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li>Leader 负责处理所有客户端的请求。</li><li>Leader 把请求作为日志条目加入到它的日志中，然后并行的向其他服务器发送 <code>AppendEntries RPC</code> 请求，要求 Follower 复制日志条目。</li><li>Follower 复制成功后，返回确认消息。</li><li>当这个日志条目被半数以上的服务器复制后，Leader 提交这个日志条目到它的复制状态机，并向客户端返回执行结果。</li></ol><h4 id="安全性" tabindex="-1"><a class="header-anchor" href="#安全性" aria-hidden="true">#</a> 安全性</h4><ul><li><strong>选举限制</strong>：拥有最新的已提交的日志条目的 Follower 才有资格成为 Leader。</li><li><strong>提交旧任期的日志条目</strong>：<strong>Raft 永远不会通过计算副本数目的方式去提交一个之前 Term 内的日志条目</strong>。</li><li><strong>日志压缩</strong>：Raft 采用对整个系统进行快照来解决，快照之前的日志都可以丢弃。以此，避免日志无限膨胀，导致故障恢复过久。</li></ul>',22),Qe=e("h2",{id:"zab",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#zab","aria-hidden":"true"},"#"),t(" ZAB")],-1),$e=e("p",null,"扩展：",-1),et={href:"https://diyhpl.us/~bryan/papers2/distributed/distributed-systems/zab.totally-ordered-broadcast-protocol.2008.pdf",target:"_blank",rel:"noopener noreferrer"},tt=e("strong",null,"A Simple Totally Ordered Broadcast Protocol",-1),rt={href:"https://github.com/heibaiying/BigData-Notes/blob/master/notes/Zookeeper%E7%AE%80%E4%BB%8B%E5%8F%8A%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5.md",target:"_blank",rel:"noopener noreferrer"},ot={href:"https://draveness.me/zookeeper-chubby",target:"_blank",rel:"noopener noreferrer"},nt={href:"https://www.slideshare.net/sauravhaloi/introduction-to-apache-zookeeper",target:"_blank",rel:"noopener noreferrer"},st={href:"https://dunwu.github.io/waterdrop/pages/51168337/",target:"_blank",rel:"noopener noreferrer"},at=n('<h3 id="【高级】zab-是怎样工作的" tabindex="-1"><a class="header-anchor" href="#【高级】zab-是怎样工作的" aria-hidden="true">#</a> 【高级】ZAB 是怎样工作的？</h3><details class="hint-container details"><summary>要点</summary><p>ZAB 协议是 Zookeeper 专门设计的一种<strong>支持故障恢复的原子广播协议</strong>。</p><p>ZAB 协议是 ZooKeeper 的数据一致性和高可用解决方案。</p><p>ZAB 协议定义了两个可以<strong>无限循环</strong>的流程：</p><ul><li><strong><code>选举 Leader</code></strong> - 用于故障恢复，从而保证高可用。</li><li><strong><code>原子广播</code></strong> - 用于主从同步，从而保证数据一致性。</li></ul><h4 id="选举-leader" tabindex="-1"><a class="header-anchor" href="#选举-leader" aria-hidden="true">#</a> 选举 Leader</h4><p>ZooKeeper 集群采用一主（称为 Leader）多从（称为 Follower）模式，主从节点通过副本机制保证数据一致。</p><ul><li><strong>如果 Follower 节点挂了</strong> - ZooKeeper 集群中的每个节点都会单独在内存中维护自身的状态，并且各节点之间都保持着通讯，<strong>只要集群中有半数机器能够正常工作，那么整个集群就可以正常提供服务</strong>。</li><li><strong>如果 Leader 节点挂了</strong> - 如果 Leader 节点挂了，系统就不能正常工作了。此时，需要通过 ZAB 协议的选举 Leader 机制来进行故障恢复。</li></ul><p>ZAB 协议的选举 Leader 机制简单来说，就是：基于过半选举机制产生新的 Leader，之后其他机器将从新的 Leader 上同步状态，当有过半机器完成状态同步后，就退出选举 Leader 模式，进入原子广播模式。</p><h4 id="原子广播" tabindex="-1"><a class="header-anchor" href="#原子广播" aria-hidden="true">#</a> 原子广播</h4><p><strong>ZooKeeper 通过副本机制来实现高可用</strong>。</p><p>那么，ZooKeeper 是如何实现副本机制的呢？答案是：ZAB 协议的原子广播。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/distributed/rpc/zookeeper/zookeeper_3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>ZAB 协议的原子广播要求：</p><p><strong><em>所有的写请求都会被转发给 Leader，Leader 会以原子广播的方式通知 Follow。当半数以上的 Follow 已经更新状态持久化后，Leader 才会提交这个更新，然后客户端才会收到一个更新成功的响应</em></strong>。这有些类似数据库中的两阶段提交协议。</p><p>在整个消息的广播过程中，Leader 服务器会每个事务请求生成对应的 Proposal，并为其分配一个全局唯一的递增的事务 ID(ZXID)，之后再对其进行广播。</p></details><h2 id="gossip" tabindex="-1"><a class="header-anchor" href="#gossip" aria-hidden="true">#</a> Gossip</h2><h3 id="【高级】gossip-是怎样工作的" tabindex="-1"><a class="header-anchor" href="#【高级】gossip-是怎样工作的" aria-hidden="true">#</a> 【高级】Gossip 是怎样工作的？</h3>',4),it=e("p",null,"扩展：",-1),lt={href:"http://bitsavers.trailing-edge.com/pdf/xerox/parc/techReports/CSL-89-1_Epidemic_Algorithms_for_Replicated_Database_Maintenance.pdf",target:"_blank",rel:"noopener noreferrer"},dt={href:"https://zhuanlan.zhihu.com/p/41228196",target:"_blank",rel:"noopener noreferrer"},ct={href:"https://managementfromscratch.wordpress.com/2016/04/01/introduction-to-gossip/",target:"_blank",rel:"noopener noreferrer"},ht={href:"https://flopezluis.github.io/gossip-simulator/",target:"_blank",rel:"noopener noreferrer"},pt=n('<details class="hint-container details"><summary>要点</summary><p>Gossip 也叫 Epidemic Protocol （流行病协议），这个协议基于<strong>最终一致性</strong>以及<strong>去中心化</strong>设计思想。主要用于<strong>分布式节点之间进行信息交换和数据同步</strong>，这种场景的一个最大特点就是组成的网络的节点都是对等节点，是非结构化网络（去中心化）。</p><p>Gossip 过程是由种子节点发起，当一个种子节点有状态需要更新到网络中的其他节点时，它会随机的选择周围几个节点散播消息，收到消息的节点也会重复该过程，直至最终网络中所有的节点都收到了消息。这个过程可能需要一定的时间，由于不能保证某个时刻所有节点都收到消息，但是理论上最终所有节点都会收到消息，因此它是一个最终一致性协议。</p><p>Gossip 过程是异步的，也就是说发消息的节点不会关注对方是否收到，即不等待响应；不管对方有没有收到，它都会每隔 1 秒向周围节点发消息。<strong>异步是它的优点，而消息冗余则是它的缺点</strong>。</p><p>Goosip 协议的信息传播和扩散通常需要由种子节点发起。整个传播过程可能需要一定的时间，由于不能保证某个时刻所有节点都收到消息，但是理论上最终所有节点都会收到消息，因此它是一个<strong>最终一致性</strong>协议。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20210708234308.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Gossip 有两种类型：</p><ul><li><strong>Anti-Entropy(反熵)</strong>：<strong>以固定的概率传播所有的数据</strong>。反熵时通讯成本会很高，可以通过引入校验和等机制，降低需要对比的数据量和通讯消息等。反熵不适合动态变化或节点数比较多的分布式环境。</li><li><strong>Rumor-Mongering(谣言传播)</strong>：<strong>仅传播新到达的数据</strong>。谣言传播模型指的是当一个节点有了新数据后，这个节点变成活跃状态，并周期性地联系其他节点向其发送新数据，直到所有的节点都存储了该新数据。在谣言传播模型下，消息可以发送得更频繁，因为消息只包含最新 update，体积更小。而且，一个谣言消息在某个时间点之后会被标记为 removed，并且不再被传播，因此，谣言传播模型下，系统有一定的概率会不一致。而由于，谣言传播模型下某个时间点之后消息不再传播，因此消息是有限的，系统开销小。</li></ul></details>',1);function gt(ut,_t){const r=a("ExternalLinkIcon");return i(),l("div",null,[c,h,e("blockquote",null,[p,e("ul",null,[e("li",null,[e("a",g,[u,o(r)]),t("，"),e("a",_,[f,o(r)]),t("，"),e("a",m,[b,o(r)]),t(" - Lamport 介绍 happened before、偏序关系（partial ordering）、逻辑时钟（Logical Clocks）概念，提出解决分布式系统中区分事件发生的时序问题的方法。")]),e("li",null,[e("a",w,[P,o(r)]),t("，"),e("a",A,[x,o(r)]),t(" - 逻辑时钟无法描述事件的因果关系。本文提出了向量时钟，这种算法利用了向量这种数据结构将全局各个进程的逻辑时间戳广播给各个进程，通过向量时间戳就能够比较任意两个事件的因果关系。")]),e("li",null,[e("a",k,[t("逻辑时钟 - 如何刻画分布式中的事件顺序"),o(r)])])])]),C,e("details",y,[L,B,v,R,e("p",null,[t("1978 年，Lamport 在 "),e("a",z,[E,o(r)]),t(" 中提出了逻辑时钟的概念，来解决分布式系统中区分事件发生的时序问题。")]),S,e("blockquote",null,[Z,e("p",null,[e("a",T,[D,o(r)])])])]),I,e("blockquote",null,[F,e("ul",null,[e("li",null,[e("a",q,[G,o(r)]),t("，"),e("a",N,[V,o(r)]),t(" - 经典的 CAP 定理，即：在一个分布式系统中，当发生网络分区时，那么强一致性和可用性只能二选一。")]),e("li",null,[e("a",j,[K,o(r)]),t(", "),e("a",M,[O,o(r)]),t(" - CAP 定理的新解读，并阐述 CAP 定理的一些常见误区。")]),e("li",null,[e("a",H,[W,o(r)]),t("，"),e("a",Y,[U,o(r)]),t(" - BASE 定理是对 CAP 中一致性和可用性的权衡，提出采用适当的方式来使系统达到最终一致性。")])])]),X,e("details",J,[Q,e("blockquote",null,[e("p",null,[t("扩展："),e("a",$,[ee,o(r)]),t("，"),e("a",te,[re,o(r)]),t(" - 经典的 CAP 定理，即：在一个分布式系统中，当发生网络分区时，那么强一致性和可用性只能二选一。")])])]),oe,e("details",ne,[se,ae,ie,le,e("p",null,[t("值得一提的是，在 CAP 定理提出十二年之后，其提出者也发表了一篇文章 "),e("a",de,[ce,o(r)]),t("，来阐述 CAP 定理的局限性。")]),e("blockquote",null,[e("p",null,[t("扩展：- "),e("a",he,[pe,o(r)]),t(", "),e("a",ge,[ue,o(r)]),t(" - CAP 定理的新解读，并阐述 CAP 定理的一些常见误区。")])])]),_e,e("details",fe,[me,e("blockquote",null,[e("p",null,[t("扩展：- "),e("a",be,[we,o(r)]),t("，"),e("a",Pe,[Ae,o(r)]),t(" - BASE 定理是对 CAP 中一致性和可用性的权衡，提出采用适当的方式来使系统达到最终一致性。")])])]),xe,e("blockquote",null,[ke,e("ul",null,[e("li",null,[e("a",Ce,[t("Part-time Parliament 论文"),o(r)])]),e("li",null,[e("a",ye,[t("Paxos Made Simple 论文"),o(r)])]),e("li",null,[e("a",Le,[t("Paxos 算法详解"),o(r)])]),e("li",null,[e("a",Be,[t("Wiki - Paxos 算法"),o(r)])]),e("li",null,[e("a",ve,[t("一致性算法（Paxos、Raft、Zab）"),o(r)])]),e("li",null,[e("a",Re,[t("Raft 作者讲解 Paxos 视频"),o(r)])]),e("li",null,[e("a",ze,[t("Paxos 算法讲解视频"),o(r)])]),e("li",null,[e("a",Ee,[t("深入剖析共识性算法 Paxos"),o(r)])])])]),Se,e("blockquote",null,[Ze,e("ul",null,[e("li",null,[e("a",Te,[t("Raft 算法论文"),o(r)])]),e("li",null,[e("a",De,[t("Raft 算法论文译文"),o(r)])]),e("li",null,[e("a",Ie,[t("Raft 作者讲解视频"),o(r)])]),e("li",null,[e("a",Fe,[t("Raft 作者讲解视频对应的 PPT"),o(r)])]),e("li",null,[e("a",qe,[t("分布式系统的 Raft 算法"),o(r)])]),e("li",null,[e("a",Ge,[t("Raft 算法详解"),o(r)])]),e("li",null,[e("a",Ne,[t("Raft: Understandable Distributed Consensus"),o(r)]),t(" - 一个动画教程")]),e("li",null,[e("a",Ve,[t("The Raft Consensus Algorithm"),o(r)]),t(" - 一个交互式动画教程")]),e("li",null,[e("a",je,[t("深入剖析共识性算法 Raft"),o(r)])])])]),Ke,e("details",Me,[Oe,e("p",null,[e("strong",null,[e("a",He,[t("Raft"),o(r)]),t(" 是一种为了管理日志复制的分布式共识性算法")]),t("。从本质上说，"),We,t("。")]),e("p",null,[e("a",Ye,[t("Raft"),o(r)]),t(" 出现之前，Paxos 一直是分布式共识性算法的标准。Paxos "),Ue,t("。Raft 的设计目标是简化 Paxos，使得算法"),Xe,t("。")]),Je]),Qe,e("blockquote",null,[$e,e("ul",null,[e("li",null,[e("a",et,[tt,o(r)]),t(" - 概述 ZooKeeper 的全序广播协议（Zab）")]),e("li",null,[e("a",rt,[t("ZooKeeper 简介及核心概念"),o(r)])]),e("li",null,[e("a",ot,[t("详解分布式协调服务 ZooKeeper"),o(r)])]),e("li",null,[e("a",nt,[t("Introduction to Apache ZooKeeper"),o(r)])]),e("li",null,[e("a",st,[t("ZAB 协议"),o(r)])])])]),at,e("blockquote",null,[it,e("ul",null,[e("li",null,[e("a",lt,[t("Epidemic Algorithms for Replicated Database Maintenance"),o(r)])]),e("li",null,[e("a",dt,[t("P2P 网络核心技术：Gossip 协议"),o(r)])]),e("li",null,[e("a",ct,[t("INTRODUCTION TO GOSSIP"),o(r)])]),e("li",null,[e("a",ht,[t("Goosip 协议仿真动画"),o(r)])])])]),pt])}const bt=s(d,[["render",gt],["__file","index.html.vue"]]);export{bt as default};
