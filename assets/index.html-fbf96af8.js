const e=JSON.parse('{"key":"v-231eacd8","path":"/pages/13b16de9/","title":"HBase Java API 高级特性之过滤器","lang":"zh-CN","frontmatter":{"icon":"logos:hbase","title":"HBase Java API 高级特性之过滤器","date":"2023-03-16T09:45:10.000Z","permalink":"/pages/13b16de9/","category":["数据库","列式数据库","hbase"],"tag":["数据库","列式数据库","大数据","hbase","API"],"description":"HBase Java API 高级特性之过滤器 HBase 中两种主要的数据读取方法是 get() 和 scan()，它们都支持直接访问数据和通过指定起止 row key 访问数据。此外，可以指定列族、列、时间戳和版本号来进行条件查询。它们的缺点是不支持细粒度的筛选功能。为了弥补这种不足，Get 和 Scan 支持通过过滤器（Filter）对 row key、列或列值进行过滤。 HBase 提供了一些内置过滤器，也允许用户通过继承 Filter 类来自定义过滤器。所有的过滤器都在服务端生效，称为 谓词下推。这样可以保证被过滤掉的数据不会被传到客户端。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/13b16de9/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"HBase Java API 高级特性之过滤器"}],["meta",{"property":"og:description","content":"HBase Java API 高级特性之过滤器 HBase 中两种主要的数据读取方法是 get() 和 scan()，它们都支持直接访问数据和通过指定起止 row key 访问数据。此外，可以指定列族、列、时间戳和版本号来进行条件查询。它们的缺点是不支持细粒度的筛选功能。为了弥补这种不足，Get 和 Scan 支持通过过滤器（Filter）对 row key、列或列值进行过滤。 HBase 提供了一些内置过滤器，也允许用户通过继承 Filter 类来自定义过滤器。所有的过滤器都在服务端生效，称为 谓词下推。这样可以保证被过滤掉的数据不会被传到客户端。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-13T09:10:08.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"数据库"}],["meta",{"property":"article:tag","content":"列式数据库"}],["meta",{"property":"article:tag","content":"大数据"}],["meta",{"property":"article:tag","content":"hbase"}],["meta",{"property":"article:tag","content":"API"}],["meta",{"property":"article:published_time","content":"2023-03-16T09:45:10.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-13T09:10:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"HBase Java API 高级特性之过滤器\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-16T09:45:10.000Z\\",\\"dateModified\\":\\"2025-09-13T09:10:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"比较过滤器","slug":"比较过滤器","link":"#比较过滤器","children":[{"level":3,"title":"比较运算符","slug":"比较运算符","link":"#比较运算符","children":[]},{"level":3,"title":"比较器","slug":"比较器","link":"#比较器","children":[]},{"level":3,"title":"比较过滤器种类","slug":"比较过滤器种类","link":"#比较过滤器种类","children":[]},{"level":3,"title":"DependentColumnFilter","slug":"dependentcolumnfilter","link":"#dependentcolumnfilter","children":[]}]},{"level":2,"title":"专用过滤器","slug":"专用过滤器","link":"#专用过滤器","children":[{"level":3,"title":"单列列值过滤器 (SingleColumnValueFilter)","slug":"单列列值过滤器-singlecolumnvaluefilter","link":"#单列列值过滤器-singlecolumnvaluefilter","children":[]},{"level":3,"title":"单列列值排除器 (SingleColumnValueExcludeFilter)","slug":"单列列值排除器-singlecolumnvalueexcludefilter","link":"#单列列值排除器-singlecolumnvalueexcludefilter","children":[]},{"level":3,"title":"行键前缀过滤器 (PrefixFilter)","slug":"行键前缀过滤器-prefixfilter","link":"#行键前缀过滤器-prefixfilter","children":[]},{"level":3,"title":"列名前缀过滤器 (ColumnPrefixFilter)","slug":"列名前缀过滤器-columnprefixfilter","link":"#列名前缀过滤器-columnprefixfilter","children":[]},{"level":3,"title":"分页过滤器 (PageFilter)","slug":"分页过滤器-pagefilter","link":"#分页过滤器-pagefilter","children":[]},{"level":3,"title":"时间戳过滤器 (TimestampsFilter)","slug":"时间戳过滤器-timestampsfilter","link":"#时间戳过滤器-timestampsfilter","children":[]},{"level":3,"title":"首次行键过滤器 (FirstKeyOnlyFilter)","slug":"首次行键过滤器-firstkeyonlyfilter","link":"#首次行键过滤器-firstkeyonlyfilter","children":[]}]},{"level":2,"title":"包装过滤器","slug":"包装过滤器","link":"#包装过滤器","children":[{"level":3,"title":"SkipFilter 过滤器","slug":"skipfilter-过滤器","link":"#skipfilter-过滤器","children":[]},{"level":3,"title":"WhileMatchFilter 过滤器","slug":"whilematchfilter-过滤器","link":"#whilematchfilter-过滤器","children":[]}]},{"level":2,"title":"FilterList","slug":"filterlist","link":"#filterlist","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1741093684000,"updatedTime":1757754608000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":2}]},"readingTime":{"minutes":9.43,"words":2829},"filePathRelative":"12.数据库/06.列式数据库/hbase/HBase_API_高级特性_过滤器.md","localizedDate":"2023年3月16日","excerpt":"<h1> HBase Java API 高级特性之过滤器</h1>\\n<p>HBase 中两种主要的数据读取方法是 <code>get()</code> 和 <code>scan()</code>，它们都支持直接访问数据和通过指定起止 row key 访问数据。此外，可以指定列族、列、时间戳和版本号来进行条件查询。它们的缺点是不支持细粒度的筛选功能。为了弥补这种不足，<code>Get</code> 和 <code>Scan</code> 支持通过过滤器（<code>Filter</code>）对 row key、列或列值进行过滤。</p>\\n<p>HBase 提供了一些内置过滤器，也允许用户通过继承 <code>Filter</code> 类来自定义过滤器。所有的过滤器都在服务端生效，称为 <strong>谓词下推</strong>。这样可以保证被过滤掉的数据不会被传到客户端。</p>","autoDesc":true}');export{e as data};
