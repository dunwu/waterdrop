const e=JSON.parse('{"key":"v-c08ed8fa","path":"/pages/1050baf5/","title":"分布式 ID","lang":"zh-CN","frontmatter":{"title":"分布式 ID","date":"2019-07-24T11:55:00.000Z","order":4,"permalink":"/pages/1050baf5/","category":["分布式","分布式协同"],"tag":["分布式","协同","分布式 ID","UUID","Snowflake","Leaf"],"description":"分布式 ID 分布式 ID 简介 什么是分布式 ID？ ID 是 Identity 的缩写，用于唯一的标识一条数据。分布式 ID，顾名思义，是用于在分布式系统中唯一标识数据的 ID。 为什么需要分布式 ID？ 传统数据库基本都支持针对单表生成唯一性的自增主键。随着数据的膨胀，单机成为了性能和容量的瓶颈。为了解决这个问题，有了分库分表技术。分库分表所要面临的第一个问题是：数据分布在不同机器上，数据库无法保证多个节点上产生的主键唯一。 这就需要用到分布式 ID 了，它起到了分布式系统中全局 ID 的作用。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/1050baf5/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"分布式 ID"}],["meta",{"property":"og:description","content":"分布式 ID 分布式 ID 简介 什么是分布式 ID？ ID 是 Identity 的缩写，用于唯一的标识一条数据。分布式 ID，顾名思义，是用于在分布式系统中唯一标识数据的 ID。 为什么需要分布式 ID？ 传统数据库基本都支持针对单表生成唯一性的自增主键。随着数据的膨胀，单机成为了性能和容量的瓶颈。为了解决这个问题，有了分库分表技术。分库分表所要面临的第一个问题是：数据分布在不同机器上，数据库无法保证多个节点上产生的主键唯一。 这就需要用到分布式 ID 了，它起到了分布式系统中全局 ID 的作用。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-13T15:15:47.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"分布式"}],["meta",{"property":"article:tag","content":"协同"}],["meta",{"property":"article:tag","content":"分布式 ID"}],["meta",{"property":"article:tag","content":"UUID"}],["meta",{"property":"article:tag","content":"Snowflake"}],["meta",{"property":"article:tag","content":"Leaf"}],["meta",{"property":"article:published_time","content":"2019-07-24T11:55:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-13T15:15:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"分布式 ID\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-07-24T11:55:00.000Z\\",\\"dateModified\\":\\"2025-09-13T15:15:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"分布式 ID 简介","slug":"分布式-id-简介","link":"#分布式-id-简介","children":[{"level":3,"title":"什么是分布式 ID？","slug":"什么是分布式-id","link":"#什么是分布式-id","children":[]},{"level":3,"title":"为什么需要分布式 ID？","slug":"为什么需要分布式-id","link":"#为什么需要分布式-id","children":[]},{"level":3,"title":"分布式 ID 的设计目标","slug":"分布式-id-的设计目标","link":"#分布式-id-的设计目标","children":[]}]},{"level":2,"title":"UUID","slug":"uuid","link":"#uuid","children":[{"level":3,"title":"版本 1","slug":"版本-1","link":"#版本-1","children":[]},{"level":3,"title":"版本 2","slug":"版本-2","link":"#版本-2","children":[]},{"level":3,"title":"版本 3","slug":"版本-3","link":"#版本-3","children":[]},{"level":3,"title":"版本 5","slug":"版本-5","link":"#版本-5","children":[]},{"level":3,"title":"版本 4","slug":"版本-4","link":"#版本-4","children":[]},{"level":3,"title":"UUID 的优缺点","slug":"uuid-的优缺点","link":"#uuid-的优缺点","children":[]}]},{"level":2,"title":"数据库自增序列","slug":"数据库自增序列","link":"#数据库自增序列","children":[]},{"level":2,"title":"数据库生成号段","slug":"数据库生成号段","link":"#数据库生成号段","children":[]},{"level":2,"title":"原子计数器","slug":"原子计数器","link":"#原子计数器","children":[{"level":3,"title":"Redis 生成自增键","slug":"redis-生成自增键","link":"#redis-生成自增键","children":[]},{"level":3,"title":"ZooKeeper 生成自增键","slug":"zookeeper-生成自增键","link":"#zookeeper-生成自增键","children":[]}]},{"level":2,"title":"雪花算法（Snowflake）","slug":"雪花算法-snowflake","link":"#雪花算法-snowflake","children":[{"level":3,"title":"键的组成","slug":"键的组成","link":"#键的组成","children":[]},{"level":3,"title":"时钟回拨","slug":"时钟回拨","link":"#时钟回拨","children":[]},{"level":3,"title":"灵活定制","slug":"灵活定制","link":"#灵活定制","children":[]},{"level":3,"title":"雪花算法小结","slug":"雪花算法小结","link":"#雪花算法小结","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1757776547000,"updatedTime":1757776547000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":1}]},"readingTime":{"minutes":14.82,"words":4445},"filePathRelative":"15.分布式/分布式协同/分布式ID.md","localizedDate":"2019年7月24日","excerpt":"<h1> 分布式 ID</h1>\\n<h2> 分布式 ID 简介</h2>\\n<h3> 什么是分布式 ID？</h3>\\n<p>ID 是 Identity 的缩写，用于唯一的标识一条数据。<strong>分布式 ID</strong>，顾名思义，是<strong>用于在分布式系统中唯一标识数据的 ID</strong>。</p>\\n<h3> 为什么需要分布式 ID？</h3>\\n<p>传统数据库基本都支持针对单表生成唯一性的自增主键。随着数据的膨胀，单机成为了性能和容量的瓶颈。为了解决这个问题，有了分库分表技术。分库分表所要面临的第一个问题是：数据分布在不同机器上，数据库无法保证多个节点上产生的主键唯一。 这就需要用到分布式 ID 了，它起到了分布式系统中<strong>全局 ID</strong> 的作用。</p>","autoDesc":true}');export{e as data};
