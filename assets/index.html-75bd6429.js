import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-c4d395b2.js";const o={},e=t(`<h1 id="java-容器面试二" tabindex="-1"><a class="header-anchor" href="#java-容器面试二" aria-hidden="true">#</a> Java 容器面试二</h1><h2 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> Map</h2><h3 id="【中等】hashmap-和-hashtable-有什么区别" tabindex="-1"><a class="header-anchor" href="#【中等】hashmap-和-hashtable-有什么区别" aria-hidden="true">#</a> 【中等】HashMap 和 Hashtable 有什么区别？</h3><p><code>HashMap</code> 更高效且灵活，<code>Hashtable</code> 线程安全但过时，推荐用 <code>ConcurrentHashMap</code> 替代。</p><table><thead><tr><th><strong>对比项</strong></th><th><strong>HashMap</strong> (JDK 1.2+)</th><th><strong>Hashtable</strong> (JDK 1.0)</th></tr></thead><tbody><tr><td><strong>线程安全</strong></td><td>❌ 非线程安全（需额外同步）</td><td>✅ 线程安全（方法用 <code>synchronized</code> 修饰）</td></tr><tr><td><strong>性能</strong></td><td>⚡ 更高（无锁竞争）</td><td>⏳ 较低（同步开销）</td></tr><tr><td><strong>Null 键/值</strong></td><td>✅ 允许 <code>null</code> 键和值</td><td>❌ 不允许 <code>null</code></td></tr><tr><td><strong>迭代器</strong></td><td><strong><code>fail-fast</code></strong>（快速失败，并发修改抛异常）</td><td><strong><code>enumerator</code></strong>（不抛异常）</td></tr><tr><td><strong>继承体系</strong></td><td>继承 <code>AbstractMap</code></td><td>继承 <code>Dictionary</code>（已过时）</td></tr><tr><td><strong>初始容量与扩容</strong></td><td>默认 16，扩容为 2 倍</td><td>默认 11，扩容为 2 倍 + 1</td></tr><tr><td><strong>哈希冲突解决</strong></td><td>链表 + 红黑树（JDK 8+）</td><td>仅链表</td></tr></tbody></table><p><strong>使用建议</strong>：</p><ul><li><strong>优先用 <code>HashMap</code></strong>：大多数场景（性能更好），搭配 <code>Collections.synchronizedMap()</code> 或 <code>ConcurrentHashMap</code> 实现线程安全。</li><li><strong><code>Hashtable</code> 适用场景</strong>：遗留系统兼容，或需要简单线程安全且不介意性能损耗时（现代开发已少用）。</li></ul><h3 id="【中等】对比一下-hashmap-和-hashset" tabindex="-1"><a class="header-anchor" href="#【中等】对比一下-hashmap-和-hashset" aria-hidden="true">#</a> 【中等】对比一下 HashMap 和 HashSet？</h3><ul><li><code>HashMap</code> 是 <strong>键值对容器</strong>，适合快速键值查询。</li><li><code>HashSet</code> 是 <strong>唯一元素集合</strong>，基于 <code>HashMap</code> 实现，仅关注元素是否存在。</li></ul><p><strong>核心区别</strong></p><table><thead><tr><th><strong>特性</strong></th><th><strong>HashMap</strong></th><th><strong>HashSet</strong></th></tr></thead><tbody><tr><td><strong>数据结构</strong></td><td>哈希表（键值对存储）</td><td>基于 <code>HashMap</code>（仅用键，值固定为虚拟对象）</td></tr><tr><td><strong>存储内容</strong></td><td>键（Key） + 值（Value）</td><td>仅存储元素（Key）</td></tr><tr><td><strong>重复规则</strong></td><td><strong>Key 不可重复</strong>（Value 可重复）</td><td><strong>元素（Key）不可重复</strong></td></tr><tr><td><strong>Null 支持</strong></td><td>允许 1 个 <code>null</code> 键和多个 <code>null</code> 值</td><td>允许 1 个 <code>null</code> 元素</td></tr></tbody></table><p><strong>常用方法对比</strong></p><table><thead><tr><th><strong>操作</strong></th><th><strong>HashMap</strong></th><th><strong>HashSet</strong></th></tr></thead><tbody><tr><td><strong>添加元素</strong></td><td><code>put(key, value)</code></td><td><code>add(element)</code></td></tr><tr><td><strong>查询元素</strong></td><td><code>get(key)</code>（返回值）</td><td><code>contains(element)</code>（返回布尔值）</td></tr><tr><td><strong>删除元素</strong></td><td><code>remove(key)</code></td><td><code>remove(element)</code></td></tr></tbody></table><p><strong>底层机制</strong></p><p><code>HashSet</code> 内部直接使用 <code>HashMap</code> 实现，元素作为 <code>Key</code>，值固定为一个虚拟的 <code>PRESENT</code> 对象（占位符）。</p><p>两者均依赖哈希表，平均时间复杂度为 <code>O(1)</code>（冲突时可能退化为 <code>O(n)</code>）。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// HashSet 的简化实现（本质是 HashMap 的包装）</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">;</span>  <span class="token comment">// 键存储元素，值固定为 PRESENT</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> <span class="token constant">PRESENT</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token constant">PRESENT</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token comment">// 若 Key 已存在，返回 false</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用场景</strong></p><ul><li><strong><code>HashMap</code></strong>：需通过键快速访问值的场景（如缓存、数据库索引）。 示例：<code>用户 ID → 用户详细信息</code>。</li><li><strong><code>HashSet</code></strong>： 需存储唯一元素的集合（如去重、黑名单）。示例：<code>IP 黑名单</code>、<code>单词去重</code>。</li></ul><h3 id="【中等】hashmap、treemap、linkedhashmap-有什么区别" tabindex="-1"><a class="header-anchor" href="#【中等】hashmap、treemap、linkedhashmap-有什么区别" aria-hidden="true">#</a> 【中等】HashMap、TreeMap、LinkedHashMap 有什么区别？</h3><p><strong>核心特性</strong></p><table><thead><tr><th><strong>特性</strong></th><th><strong>HashMap</strong></th><th><strong>TreeMap</strong></th><th><strong>LinkedHashMap</strong></th></tr></thead><tbody><tr><td><strong>底层结构</strong></td><td>哈希表（数组+链表/红黑树）</td><td>红黑树（平衡二叉搜索树）</td><td>哈希表 + 双向链表</td></tr><tr><td><strong>顺序性</strong></td><td>无序</td><td>按键的自然顺序或自定义顺序排序</td><td>保持插入顺序或访问顺序（LRU）</td></tr><tr><td><strong>null 支持</strong></td><td>允许 1 个 null 键和多个 null 值</td><td>不允许 null 键（除非自定义比较器）</td><td>同 HashMap</td></tr><tr><td><strong>线程安全</strong></td><td>非线程安全</td><td>非线程安全</td><td>非线程安全</td></tr><tr><td><strong>时间复杂度</strong></td><td>平均 O(1)</td><td>增删查 O(log n)</td><td>平均 O(1)</td></tr></tbody></table><p><strong>排序与顺序</strong></p><ul><li><strong>HashMap</strong>：完全无序，迭代顺序不可预测。</li><li><strong>TreeMap</strong>：默认按键的自然顺序排序（Key 需实现<code>Comparable</code>）。可通过<code>Comparator</code>自定义排序规则。</li><li><strong>LinkedHashMap</strong>：默认保持<strong>插入顺序</strong>。可配置为<strong>访问顺序</strong>（最近最少使用 LRU）。</li></ul><p><strong>使用场景</strong></p><ul><li><strong>HashMap</strong>： <ul><li>需要最高效的查找、插入和删除操作。</li><li>不关心元素的顺序。</li><li>示例：缓存、快速查找表。</li></ul></li><li><strong>TreeMap</strong>： <ul><li>需要元素按键排序。</li><li>需要范围查询（如<code>subMap()</code>、<code>headMap()</code>、<code>tailMap()</code>）。</li><li>示例：字典、有序事件调度。</li></ul></li><li><strong>LinkedHashMap</strong>： <ul><li>需要保持插入顺序或实现 LRU 缓存。</li><li>示例：记录访问顺序的缓存、需要按插入顺序迭代的场景。</li></ul></li></ul><p><strong>性能对比</strong></p><table><thead><tr><th><strong>操作</strong></th><th><strong>HashMap</strong></th><th><strong>TreeMap</strong></th><th><strong>LinkedHashMap</strong></th></tr></thead><tbody><tr><td><strong>插入</strong></td><td>O(1)</td><td>O(log n)</td><td>O(1)</td></tr><tr><td><strong>删除</strong></td><td>O(1)</td><td>O(log n)</td><td>O(1)</td></tr><tr><td><strong>查找</strong></td><td>O(1)</td><td>O(log n)</td><td>O(1)</td></tr><tr><td><strong>迭代顺序</strong></td><td>无序</td><td>有序（Key）</td><td>插入/访问顺序</td></tr></tbody></table><p><strong>选择依据</strong></p><ul><li>要<strong>速度</strong>：选<code>HashMap</code>。</li><li>要<strong>排序</strong>：选<code>TreeMap</code>。</li><li>要<strong>顺序</strong>（插入或访问顺序）：选<code>LinkedHashMap</code>。</li></ul><p><strong>扩展</strong></p><ul><li><code>LinkedHashMap</code>可通过<code>accessOrder</code>参数实现 LRU 缓存。</li><li><code>TreeMap</code>支持丰富的导航方法（如<code>ceilingKey()</code>、<code>floorKey()</code>）。</li></ul><h3 id="【困难】hashmap-底层实现原理是什么-🌟🌟🌟" tabindex="-1"><a class="header-anchor" href="#【困难】hashmap-底层实现原理是什么-🌟🌟🌟" aria-hidden="true">#</a> 【困难】HashMap 底层实现原理是什么？🌟🌟🌟</h3><p>HashMap 通过哈希函数定位桶，用链表和红黑树解决冲突，动态扩容平衡性能，但非线程安全。</p><p><strong>数据结构</strong></p><p>HashMap 的数据结构是：<strong>数组 + 链表（JDK 8 以前）</strong> ；<strong>数组 + 链表 + 红黑树（JDK 8+）</strong></p><ul><li><strong>数组（桶）</strong>：<code>Node&lt;K,V&gt;[] table</code>，初始长度默认为 <code>16</code>。</li><li><strong>链表</strong>：相同哈希值的元素组成链表，以解决哈希冲突（拉链地址法）。</li><li><strong>红黑树</strong>：当链表长度 ≥ 8 且数组长度 ≥ 64 时，链表转为红黑树（提升查询效率至 <code>O(log n)</code>）。</li></ul><p><strong>哈希计算</strong></p><ul><li><p><strong>计算哈希值</strong>：高位与低位异或，使哈希分布更均匀。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// JDK 8 的哈希扰动函数（减少碰撞）</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> h<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>计算桶索引</strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>index <span class="token operator">=</span> <span class="token punctuation">(</span>table<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">;</span>  <span class="token comment">// 等价于 hash % table.length</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p><strong>解决哈希冲突</strong></p><ul><li><strong>拉链地址法</strong>：冲突的键值对以链表形式存储在同一桶中。</li><li><strong>红黑树优化</strong>：长链表（≥8）转为红黑树，避免极端情况下性能退化至 <code>O(n)</code>。</li></ul><p><strong>扩容机制（Rehash）</strong></p><ul><li><strong>触发条件</strong>：当元素数量 &gt; <code>容量 × 负载因子</code>（默认负载因子 0.75，容量 16 时阈值为 12）。</li><li><strong>扩容操作</strong>： <ul><li>新建 2 倍大小的数组（<code>newCap = oldCap &lt;&lt; 1</code>）。</li><li>重新计算键的索引位置（<code>newIndex = (newCap - 1) &amp; hash</code>）。</li><li><strong>JDK 8 优化</strong>：不需要每个节点重新哈希计算，<strong>通过高位判断新索引位置</strong>（<code>原索引</code> 或 <code>原索引 + oldCap</code>）。</li></ul></li></ul><p><strong>关键参数</strong></p><table><thead><tr><th><strong>参数</strong></th><th><strong>默认值</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>初始容量</td><td>16</td><td>必须为 2 的幂（方便位运算计算索引）。</td></tr><tr><td>负载因子（Load Factor）</td><td>0.75</td><td>权衡空间与时间效率（过高增加冲突，过低浪费内存）。</td></tr><tr><td>树化阈值</td><td>8（链表 → 红黑树）</td><td>需同时满足数组长度 ≥ 64，否则优先扩容。</td></tr><tr><td>退化阈值</td><td>6（红黑树 → 链表）</td><td>扩容或删除节点时检查。</td></tr></tbody></table><p><strong>线程安全问题</strong></p><ul><li><strong>非线程安全</strong>：多线程下可能导致： <ul><li><strong>死循环</strong>（JDK 7 头插法扩容时产生环形链表）。</li><li><strong>数据丢失</strong>（并发插入覆盖节点）。</li></ul></li><li><strong>解决方案</strong>： <ul><li>使用 <code>ConcurrentHashMap</code>。</li><li>或通过 <code>Collections.synchronizedMap()</code> 包装。</li></ul></li></ul><p><strong>JDK 8 的优化</strong></p><ul><li><strong>链表 → 红黑树</strong>：解决哈希攻击导致的性能退化。</li><li><strong>尾插法</strong>：扩容时保持链表顺序，避免环形链表。</li><li><strong>高位掩码优化扩容</strong>：减少哈希重计算开销。</li></ul><p><strong>PUT 流程源码</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> p<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">;</span>
    <span class="token comment">// 1. 数组为空时初始化</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        n <span class="token operator">=</span> <span class="token punctuation">(</span>tab <span class="token operator">=</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token comment">// 2. 计算索引，若桶为空直接插入</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 3. 处理哈希冲突（链表/红黑树）</span>
        <span class="token comment">// ...（省略冲突处理逻辑）</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 4. 检查扩容</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>size <span class="token operator">&gt;</span> threshold<span class="token punctuation">)</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="【困难】jdk-1-8-对-hashmap-做了哪些改动-🌟🌟🌟" tabindex="-1"><a class="header-anchor" href="#【困难】jdk-1-8-对-hashmap-做了哪些改动-🌟🌟🌟" aria-hidden="true">#</a> 【困难】JDK 1.8 对 HashMap 做了哪些改动？🌟🌟🌟</h3><ul><li><strong>底层结构优化</strong>： <ul><li>JDK 1.7，仅使用 <strong>数组 + 链表</strong> 的结构。当发生哈希冲突时，新元素会插入到链表的头部（头插法）。</li><li>JDK 1.8，使用 <strong>数组 + 链表/红黑树</strong> 的结构。链表长度超过一定阈值，会转换为红黑树。 <ul><li><strong>树化</strong>：当<strong>链表长度 ≥ 8 且数组长度 ≥ 64</strong> 时，链表转为红黑树</li><li><strong>退化</strong>：当红黑树节点数 ≤ 6 时，红黑树转为链表</li></ul></li></ul></li><li><strong>插入元素方式改变</strong>：<strong>头插法改为尾插法</strong>。 <ul><li>头插法优点是无需遍历链表；</li><li>缺点是逆序，在并发环境下，扩容时可能导致<strong>循环链表</strong>的问题，从而引发死循环。</li></ul></li><li><strong>rehash 优化</strong><ul><li>JDK 1.7：扩容时，需重新计算每个键值对在新数组中的位置，然后使用头插法将它们转移到新数组中；</li><li>JDK 1.8：由于扩容时，容量总是原来的 2 倍，只需要根据最高位的值，即可判断元素的位置是否需要迁移。这样避免了重新计算全部 key 的哈希值。</li></ul></li><li><strong>哈希扰动因子</strong>：</li></ul><h3 id="【困难】hashmap-为什么线程不安全" tabindex="-1"><a class="header-anchor" href="#【困难】hashmap-为什么线程不安全" aria-hidden="true">#</a> 【困难】HashMap 为什么线程不安全？</h3><p>HashMap 在多线程环境下会出现：</p><ul><li><strong>JDK 7</strong>：死循环 + 数据丢失（头插法导致）。</li><li><strong>JDK 8+</strong>：数据丢失 + 脏读（无死循环，但依然非线程安全）。</li><li><strong>替代方案</strong>：高并发场景始终优先选择 <code>ConcurrentHashMap</code>。</li></ul><p><strong>一句话</strong>：HashMap 的线程不安全源于非原子操作和并发修改冲突，多线程环境下必须使用同步机制。</p><p><strong>（1）并发修改导致数据丢失</strong></p><p><strong>问题场景（JDK 8+）</strong></p><ul><li>两个线程同时执行 <code>put()</code>，计算出的 <strong>桶索引相同</strong>，且该位置为 <code>null</code>。</li><li><strong>预期</strong>：两个键值对都成功插入。</li><li><strong>实际</strong>：后一个线程的 <code>put</code> 可能覆盖前一个线程的写入，导致数据丢失。</li></ul><p>示例代码（伪并发）：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 线程 1 和线程 2 同时执行：</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可能被覆盖</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（2）JDK 7 扩容死循环问题</strong></p><p><strong>问题原因（仅 JDK 7）</strong></p><ul><li>扩容时采用 <strong>头插法</strong> 迁移链表，多线程并发可能导致 <strong>环形链表</strong>。</li><li>后续调用 <code>get()</code> 或 <code>put()</code> 时，遍历链表进入死循环（CPU 100%）。</li></ul><p>示意图：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>线程 1：A -&gt; B → null
线程 2：B -&gt; A → null
最终：A ⇄ B（环形链表）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（3）并发扩容导致数据错乱</strong></p><p>多个线程同时触发 <code>resize()</code>，可能导致：</p><ul><li><strong>部分节点丢失</strong>（未正确迁移到新数组）。</li><li><strong>链表断裂</strong>（节点 <code>next</code> 指针被错误修改）。</li></ul><p><strong>（4）非原子操作导致脏读</strong></p><p><code>size++</code>、<code>modCount++</code> 等操作非原子性，可能导致：</p><ul><li><code>size</code> 不准确（影响扩容判断）。</li><li>迭代时触发 <code>ConcurrentModificationException</code>（快速失败机制）。</li></ul><p><strong>解决方案</strong></p><table><thead><tr><th><strong>问题</strong></th><th><strong>解决方案</strong></th></tr></thead><tbody><tr><td>数据丢失/覆盖</td><td>使用 <code>ConcurrentHashMap</code>（CAS + 分段锁）</td></tr><tr><td>死循环（JDK 7）</td><td>升级到 JDK 8+（改用尾插法）</td></tr><tr><td>脏读</td><td>用 <code>Collections.synchronizedMap()</code> 包装</td></tr></tbody></table><h3 id="【中等】weakhashmap-有什么用" tabindex="-1"><a class="header-anchor" href="#【中等】weakhashmap-有什么用" aria-hidden="true">#</a> 【中等】WeakHashMap 有什么用？</h3><p><code>WeakHashMap</code> 通过弱引用键实现自动清理，适合管理临时性、生命周期与键对象绑定的数据，但需注意值对象的引用管理和线程安全问题。</p><p><strong>基于弱引用的键（Key）管理</strong></p><ul><li><strong>键是弱引用</strong>：当 <code>WeakHashMap</code> 的键（Key）不再被其他强引用指向时，该键值对会被垃圾回收器自动回收，避免内存泄漏。</li><li><strong>适用场景</strong>：适合存储与对象生命周期相关的临时数据（如缓存），当键对象外部不再使用时，自动清理对应条目。</li></ul><p><strong>自动清理无引用键值对</strong></p><ul><li><strong>依赖垃圾回收机制</strong>：当键对象仅被 <code>WeakHashMap</code> 弱引用时，GC 会回收该键，并移除对应的键值对（通过内部 <code>ReferenceQueue</code> 机制触发清理）。</li><li><strong>无需手动移除</strong>：与普通 <code>HashMap</code> 不同，无需显式调用 <code>remove()</code> 方法避免内存泄漏。</li></ul><p><strong>典型应用场景</strong></p><ul><li><strong>缓存系统</strong>：缓存数据时，若缓存键（如临时对象）不再使用，自动释放对应值（如大对象），防止内存堆积。</li><li><strong>监听器/元数据存储</strong>：存储对象的附加信息，当对象销毁时，关联数据自动清除。</li></ul><p><strong>注意事项</strong></p><ul><li><strong>值（Value）不是弱引用</strong>：仅键是弱引用，值仍可能因强引用导致内存泄漏（需确保值未在其他地方被强引用）。</li><li><strong>非线程安全</strong>：需外部同步（如使用 <code>Collections.synchronizedMap</code>）。</li><li><strong>不可预测的清理时机</strong>：依赖 GC 运行，条目移除时机不确定。</li></ul><p><strong>示例代码</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">WeakHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> weakMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Object</span> key <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
weakMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">&quot;Value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 当 key 的强引用置为 null，且发生 GC 后，weakMap 中的条目会被自动移除</span>
key <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 仅示例，实际中不推荐显式调用 GC</span>

<span class="token comment">// 此时 weakMap 可能已为空（条目被回收）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="【中等】concurrenthashmap-和-hashtable-有什么区别" tabindex="-1"><a class="header-anchor" href="#【中等】concurrenthashmap-和-hashtable-有什么区别" aria-hidden="true">#</a> 【中等】ConcurrentHashMap 和 Hashtable 有什么区别？</h3><ul><li><strong>优先使用 <code>ConcurrentHashMap</code></strong>：适用于现代高并发程序，性能更优。</li><li><strong>避免 <code>Hashtable</code></strong>：除非维护历史代码，否则建议替换为 <code>ConcurrentHashMap</code> 或 <code>Collections.synchronizedMap()</code>（非高并发场景）。</li></ul><p>以下是 <strong>ConcurrentHashMap 和 Hashtable 的区别对比表格</strong>，清晰展示核心差异：</p><table><thead><tr><th><strong>对比项</strong></th><th><strong>Hashtable</strong></th><th><strong>ConcurrentHashMap</strong></th></tr></thead><tbody><tr><td><strong>线程安全实现</strong></td><td>全表锁（<code>synchronized</code> 方法）</td><td><strong>分段锁（JDK7）</strong> 或 <strong>CAS + <code>synchronized</code>（JDK8+）</strong></td></tr><tr><td><strong>并发性能</strong></td><td>低（串行化操作，高并发时阻塞严重）</td><td>高（读写并发优化，锁粒度更细）</td></tr><tr><td><strong>Null 支持</strong></td><td><strong>不允许</strong> <code>null</code> 键或值（抛出异常）</td><td><strong>不允许</strong> <code>null</code> 键或值（避免并发歧义）</td></tr><tr><td><strong>迭代器行为</strong></td><td>强一致性（修改会抛 <code>ConcurrentModificationException</code>）</td><td>弱一致性（可能部分反映修改，不抛异常）</td></tr><tr><td><strong>版本与演进</strong></td><td>JDK1.0 遗留类，已过时</td><td>JDK1.5 引入，持续优化（如 JDK8 改用 CAS）</td></tr><tr><td><strong>适用场景</strong></td><td>旧代码兼容（不推荐新项目使用）</td><td><strong>高并发首选</strong>（缓存、计数器等场景）</td></tr></tbody></table><h3 id="【困难】concurrenthashmap-的底层实现原理是什么-🌟🌟🌟" tabindex="-1"><a class="header-anchor" href="#【困难】concurrenthashmap-的底层实现原理是什么-🌟🌟🌟" aria-hidden="true">#</a> 【困难】ConcurrentHashMap 的底层实现原理是什么？🌟🌟🌟</h3><p><code>ConcurrentHashMap</code> 是 Java 并发编程中最常用的线程安全 <code>Map</code>，其底层实现经历了 <strong>JDK7（分段锁）</strong> 和 <strong>JDK8+（CAS + <code>synchronized</code> 优化）</strong> 两个重要阶段。以下是核心实现原理：</p><div class="hint-container info"><p class="hint-container-title">JDK7 中，ConcurrentHashMap 的实现原理是什么？</p></div><p>JDK7 中，<code>ConcurrentHashMap</code> 的核心实现思想是：将整个哈希表分成多个 <code>Segment</code>（默认 16 个），每个 <code>Segment</code> 是一个独立的 <code>HashEntry</code> 数组，<strong>锁粒度细化到<code>Segment</code> 级别</strong>，不同 <code>Segment</code> 可并发操作。</p><p><strong>数据结构</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ConcurrentHashMap</span>
  ├── <span class="token class-name">Segment</span><span class="token punctuation">[</span><span class="token punctuation">]</span>（默认 <span class="token number">16</span> 个，每个 <span class="token class-name">Segment</span> 继承 <span class="token class-name">ReentrantLock</span>）
  │    └── <span class="token class-name">HashEntry</span><span class="token punctuation">[</span><span class="token punctuation">]</span>（链表结构，存储键值对）
  └── 全局的并发控制参数（如 loadFactor）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>关键特点</strong></p><ul><li><strong>锁分段（Segment Locking）</strong><ul><li>写操作仅锁对应的 <code>Segment</code>，其他 <code>Segment</code> 仍可并发访问。</li><li>读操作无锁（<code>HashEntry</code> 的 <code>value</code> 用 <code>volatile</code> 修饰，保证可见性）。</li></ul></li><li><strong>并发度（Concurrency Level）</strong><ul><li>默认 16 个 <code>Segment</code>，即最多支持 16 个线程并发写。</li></ul></li></ul><p><strong>缺点</strong></p><ul><li>内存占用较高（每个 <code>Segment</code> 独立维护数组）。</li><li>查询时需要两次哈希计算（先定位 <code>Segment</code>，再定位 <code>HashEntry</code>）。</li></ul><div class="hint-container info"><p class="hint-container-title">JDK8 中，ConcurrentHashMap 的实现原理是什么？</p></div><p>JDK8 中，<code>ConcurrentHashMap</code> 的核心实现思想是：抛弃 <code>Segment</code>，改用 <strong><code>Node</code> 数组 + 链表/红黑树</strong>，锁粒度细化到 <strong>单个桶（链表头节点）</strong>，并引入 <strong>CAS（无锁化）</strong> 和 <code>synchronized</code> 结合的方式提升并发性能。</p><p><strong>数据结构</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ConcurrentHashMap</span>
  ├── <span class="token class-name">Node</span><span class="token punctuation">[</span><span class="token punctuation">]</span> table（数组 <span class="token operator">+</span> 链表<span class="token operator">/</span>红黑树）
  │    ├── <span class="token class-name">Node</span>（普通链表节点）
  │    └── <span class="token class-name">TreeBin</span>（红黑树封装，维护平衡）
  └── <span class="token keyword">volatile</span> 变量（如 sizeCtl，控制扩容）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>关键优化</strong></p><ul><li><p><strong>锁粒度更细（桶级别锁）</strong></p><ul><li>写操作仅锁当前桶（链表头节点），其他桶仍可并发访问。</li><li>读操作完全无锁（<code>Node</code> 的 <code>value</code> 和 <code>next</code> 用 <code>volatile</code> 修饰）。</li></ul></li><li><p><strong>CAS + <code>synchronized</code> 结合</strong></p><ul><li><strong>插入数据</strong>：先尝试 CAS 无锁插入，失败后 <code>synchronized</code> 锁住头节点。</li><li><strong>扩容</strong>：支持多线程协同扩容（通过 <code>sizeCtl</code> 标志位控制）。</li></ul></li><li><p><strong>链表转红黑树（优化查询）</strong></p><ul><li>当链表长度 ≥ 8 且数组长度 ≥ 64 时，链表转为红黑树（<code>TreeBin</code>），防止哈希冲突导致性能退化。</li></ul></li><li><p><strong>更高效的计算方式</strong></p><ul><li>使用 <code>spread()</code> 方法优化哈希计算，减少冲突。</li><li><code>size()</code> 方法通过 <code>CounterCell</code> 分段统计，避免全局锁。</li></ul></li></ul><div class="hint-container info"><p class="hint-container-title">JDK8 中，ConcurrentHashMap 关键操作流程是怎样的？</p></div><p><strong>（1）PUT 操作（JDK8）</strong></p><ol><li>计算 <code>key</code> 的哈希，定位到桶（数组下标）。</li><li>如果桶为空，<strong>CAS 插入新节点</strong>（无锁化）。</li><li>如果桶不为空，<code>synchronized</code> 锁住头节点，处理链表或红黑树插入。</li><li>如果链表长度 ≥ 8，尝试转红黑树。</li></ol><p><strong>（2）GET 操作（完全无锁）</strong></p><ol><li>计算 <code>key</code> 的哈希，定位到桶。</li><li>遍历链表或红黑树（依赖 <code>volatile</code> 保证可见性）。</li></ol><p><strong>（3）扩容（多线程协同）</strong></p><ol><li>当元素数量超过阈值（<code>sizeCtl</code>），触发扩容。</li><li>其他线程检测到扩容时，可协助迁移数据（<code>transfer</code> 方法）。</li></ol><div class="hint-container info"><p class="hint-container-title">ConcurrentHashMap 在 JDK7 和 JDK8 中的实现有哪些差异？</p></div><table><thead><tr><th><strong>对比项</strong></th><th><strong>JDK7（分段锁）</strong></th><th><strong>JDK8+（CAS + <code>synchronized</code>）</strong></th></tr></thead><tbody><tr><td><strong>锁粒度</strong></td><td>Segment 级别（粗粒度）</td><td>桶级别（更细粒度）</td></tr><tr><td><strong>并发度</strong></td><td>固定 16 个 Segment</td><td>动态调整，更高并发</td></tr><tr><td><strong>内存占用</strong></td><td>较高（每个 Segment 维护数组）</td><td>更低（单层 Node 数组）</td></tr><tr><td><strong>哈希冲突处理</strong></td><td>链表</td><td>链表 + 红黑树（优化查询）</td></tr><tr><td><strong>扩容机制</strong></td><td>单 Segment 扩容</td><td>多线程协同扩容</td></tr></tbody></table><p><strong>小结</strong></p><p><strong>JDK7</strong>：分段锁降低冲突，但并发度固定，内存开销大。</p><p><strong>JDK8+</strong>：</p><ul><li>更细粒度的锁（桶级别），CAS 无锁化优化。</li><li>红黑树优化极端哈希冲突场景。</li><li>多线程协同扩容，提升性能。</li></ul><p><strong>适用场景</strong>：高并发读写（如缓存、计数器），是 <code>Hashtable</code> 和 <code>Collections.synchronizedMap()</code> 的现代替代方案。</p><h3 id="【中等】concurrenthashmap-为什么-key-和-value-不能为-null" tabindex="-1"><a class="header-anchor" href="#【中等】concurrenthashmap-为什么-key-和-value-不能为-null" aria-hidden="true">#</a> 【中等】ConcurrentHashMap 为什么 key 和 value 不能为 null？</h3><p><code>ConcurrentHashMap</code> 在设计上明确禁止 <code>null</code> 作为 <strong>key</strong> 或 <strong>value</strong>，而普通的 <code>HashMap</code> 是允许的。</p><p><strong><code>ConcurrentHashMap</code> 禁止 <code>null</code> 是为了避免并发场景下的二义性问题</strong>。</p><ul><li><strong>替代方案</strong>：使用特殊标记（如 <code>Optional</code>）或额外方法（如 <code>containsKey()</code>）明确语义。</li><li><strong>设计一致性</strong>：延续 <code>Hashtable</code> 的严格约束，确保线程安全行为的清晰性。</li></ul><p>如果业务必须使用 <code>null</code>，可以考虑：</p><ul><li>使用 <code>HashMap</code> + 外部同步（如 <code>synchronized</code>）。</li><li>用 <code>Optional</code> 或自定义空对象代替 <code>null</code>。</li></ul><p><code>ConcurrentHashMap</code> 禁止 <code>null</code> 的详细原因如下：</p><p><strong>（1）并发场景下的歧义问题（核心原因）</strong></p><p><code>ConcurrentHashMap</code> 是线程安全的，但在高并发环境下，<code>null</code> 值会导致 <strong>二义性（Ambiguity）</strong>，无法区分：</p><ul><li><strong>Key 不存在</strong>（返回 <code>null</code>）。</li><li><strong>Key 存在，但 Value 本身就是 <code>null</code></strong>。</li></ul><p>示例场景：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;non_existent_key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 返回 null（表示 key 不存在）</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 如果允许，这里存储 null 值</span>
map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 仍然返回 null，无法区分是 &quot;key 不存在&quot; 还是 &quot;value 是 null&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>问题</strong>：在并发环境下，这种歧义会导致业务逻辑错误（比如缓存系统无法判断数据是否有效）。</p><p><strong>（2）<code>HashMap</code> 为什么允许 <code>null</code>？</strong></p><p><code>HashMap</code> 是单线程使用的，开发者可以自行约束 <code>null</code> 的使用逻辑，例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 明确知道是 key 不存在，或者 value 是 null（需业务逻辑保证）</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但在并发环境下，这种约束不可靠，因为其他线程可能同时修改数据。</p><p><strong>（3）<code>ConcurrentHashMap</code> 的设计哲学</strong></p><p>为了保证 <strong>线程安全</strong> 和 <strong>明确语义</strong>，<code>ConcurrentHashMap</code> 直接禁止 <code>null</code>，强制开发者：</p><ul><li><strong>用特殊占位符（如 <code>Optional.empty()</code>）代替 <code>null</code></strong>。</li><li><strong>显式处理 <code>key</code> 不存在的情况</strong>（如 <code>containsKey()</code> 检查）。</li></ul><p>替代方案示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Optional</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 用 Optional 表示空值</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// key 不存在</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> value <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// value 是 &quot;逻辑上的 null&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（4）历史原因（兼容性）</strong></p><ul><li><code>Hashtable</code>（早期线程安全 <code>Map</code>）也不允许 <code>null</code>，<code>ConcurrentHashMap</code> 延续了这一设计。</li><li>如果允许 <code>null</code>，会导致从 <code>Hashtable</code> 迁移到 <code>ConcurrentHashMap</code> 时出现兼容性问题。</li></ul><p>（5）对比其他 Map</p><table><thead><tr><th><strong>Map 类型</strong></th><th><strong>允许 <code>null</code> Key</strong></th><th><strong>允许 <code>null</code> Value</strong></th><th><strong>原因</strong></th></tr></thead><tbody><tr><td><code>HashMap</code></td><td>✅ 是</td><td>✅ 是</td><td>单线程使用，无并发歧义</td></tr><tr><td><code>Hashtable</code></td><td>❌ 否</td><td>❌ 否</td><td>线程安全，避免歧义</td></tr><tr><td><code>ConcurrentHashMap</code></td><td>❌ 否</td><td>❌ 否</td><td>并发安全，避免歧义</td></tr><tr><td><code>Collections.synchronizedMap</code></td><td>取决于底层 Map</td><td>取决于底层 Map</td><td>包装类，行为与被包装 Map 一致</td></tr></tbody></table><h3 id="【中等】concurrenthashmap-能保证复合操作的原子性吗-🌟" tabindex="-1"><a class="header-anchor" href="#【中等】concurrenthashmap-能保证复合操作的原子性吗-🌟" aria-hidden="true">#</a> 【中等】ConcurrentHashMap 能保证复合操作的原子性吗？🌟</h3><p><strong>ConcurrentHashMap 不能保证复合操作的原子性</strong>，尽管它本身提供了高并发性能和线程安全的单个操作。</p><p><strong>说明如下</strong>：</p><p><strong>单个操作的原子性</strong>：</p><ul><li><code>put()</code>, <code>get()</code>, <code>remove()</code> 等单个操作是线程安全的</li><li>这些操作在内部使用分段锁或 CAS 操作保证原子性</li></ul><p><strong>复合操作的非原子性</strong>：</p><p>像【检查然后执行（check-then-act）】这样的复合操作不是原子的。例如：<code>if (!map.containsKey(key)) { map.put(key, value); }</code>，在检查和方法调用之间，其他线程可能已经修改了 <code>map</code>。</p><p><strong>解决方案</strong>：</p><ul><li>使用 <code>putIfAbsent()</code>, <code>computeIfAbsent()</code>, <code>computeIfPresent()</code> 等原子性复合方法</li><li>使用显式同步（但会降低并发性能）</li><li>使用 <code>compute()</code> 方法原子性地更新值</li></ul><p>示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 非原子性复合操作 - 不安全</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 可能有竞态条件</span>
<span class="token punctuation">}</span>

<span class="token comment">// 原子性替代方案</span>
map<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 或者使用 computeIfAbsent</span>
map<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">,</span> k <span class="token operator">-&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结：ConcurrentHashMap 只保证单个方法的原子性，复合操作需要特别处理才能保证线程安全。</p>`,159),p=[e];function c(l,d){return s(),a("div",null,p)}const u=n(o,[["render",c],["__file","index.html.vue"]]);export{u as default};
