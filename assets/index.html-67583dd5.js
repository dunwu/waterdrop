import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as d,c as u,a as n,b as s,d as a,w as t,e as o}from"./app-a70a1432.js";const g={},k=o(`<h1 id="mysql-面试" tabindex="-1"><a class="header-anchor" href="#mysql-面试" aria-hidden="true">#</a> MySQL 面试</h1><h2 id="关系数据库综合" tabindex="-1"><a class="header-anchor" href="#关系数据库综合" aria-hidden="true">#</a> 关系数据库综合</h2><h3 id="【简单】什么是范式-什么是反范式" tabindex="-1"><a class="header-anchor" href="#【简单】什么是范式-什么是反范式" aria-hidden="true">#</a> 【简单】什么是范式？什么是反范式？</h3><p>数据库规范化，又称“<strong>范式</strong>”，是数据库设计的指导理论。<strong>范式的目标是：使数据库结构更合理，消除存储异常，使数据冗余尽量小，增进数据的一致性</strong>。</p><p>根据约束程度从低到高有：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）等等。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202410022024207.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>1NF 要求<strong>所有属性都不可再分解</strong>。</li><li>2NF 要求<strong>不存在部分依赖</strong>。</li><li>3NF 要求<strong>不存在传递依赖</strong>。</li></ul><p>反范式，顾名思义，与范式的目标正好相反。<strong>范式</strong>的目标是<strong>消除冗余</strong>；<strong>反范式</strong>的目标是<strong>冗余以提高查询效率</strong>。</p><p>范式并非越严格越好，现代数据库设计，一般最多满足 3NF。范式越高意味着表的划分更细，一个数据库中需要的表也就越多，用户不得不将原本相关联的数据分摊到多个表中。当用户同时需要这些数据时只能通过关联表的形式将数据重新合并在一起。同时把多个表联接在一起的花费是巨大的，尤其是当需要连接的两张或者多张表数据非常庞大的时候，表连接操作几乎是一个噩梦，这严重地降低了系统运行性能。因此，<strong>有时为了提高查询效率，有必要适当的冗余数据，以达到空间换时间的目的——这就是“反范式”</strong>。</p><h4 id="第一范式-1nf" tabindex="-1"><a class="header-anchor" href="#第一范式-1nf" aria-hidden="true">#</a> 第一范式 (1NF)</h4><p>1NF 要求<strong>所有属性都不可再分解</strong>。</p><h4 id="第二范式-2nf" tabindex="-1"><a class="header-anchor" href="#第二范式-2nf" aria-hidden="true">#</a> 第二范式 (2NF)</h4><p>2NF 要求记录有唯一标识，即实体的唯一性，即<strong>不存在部分依赖</strong>。</p><p>假设有一张 student 表，结构如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 学生表</span>
student（学号、课程号、姓名、学分、成绩）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>举例来说，现有一张 student 表，具有学号、课程号、姓名、学分等字段。从中可以看出，表中包含了学生信息和课程信息。由于非主键字段必须依赖主键，这里学分依赖课程号，姓名依赖学号，所以不符合 2NF。</p><p>不符合 2NF 可能会存在的问题：</p><ul><li><strong>数据冗余</strong> - 每条记录都含有相同信息。</li><li><strong>删除异常</strong> - 删除所有学生成绩，就把课程信息全删除了。</li><li><strong>插入异常</strong> - 学生未选课，无法记录进数据库。</li><li><strong>更新异常</strong> - 调整课程学分，所有行都调整。</li></ul><p>根据 2NF 可以拆分如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 学生表</span>
student（学号、姓名）
<span class="token comment">-- 课程表</span>
course（课程号、学分）
<span class="token comment">-- 学生课程关系表</span>
student_course（学号、课程号、成绩）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="第三范式-3nf" tabindex="-1"><a class="header-anchor" href="#第三范式-3nf" aria-hidden="true">#</a> 第三范式 (3NF)</h4><p><strong>如果一个关系属于第二范式</strong>，并且在<strong>两个（或多个）非主键属性之间不存在函数依赖</strong>（非主键属性之间的函数依赖也称为传递依赖），那么这个关系属于第三范式。</p><p>3NF 是对字段的<strong>冗余性</strong>，要求任何字段不能由其他字段派生出来，它要求字段没有冗余，即<strong>不存在传递依赖</strong>。</p><p>假设有一张 student 表，结构如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 学生表</span>
student（学号、姓名、年龄、班级号、班主任）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上表属于第二范式，因为主键由单个属性组成（学号）。</p><p>因为存在<strong>依赖传递</strong>：（学号） → （学生）→（所在班级） → （班主任） 。</p><p><strong>可能会存在问题：</strong></p><ul><li>数据冗余 - 有重复值；</li><li>更新异常 - 有重复的冗余信息，修改时需要同时修改多条记录，否则会出现<strong>数据不一致的情况</strong> 。</li></ul><p>可以基于 3NF 拆解：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>student（学号、姓名、年龄、所在班级号）
class（班级号、班主任）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="【简单】为什么不推荐使用存储过程" tabindex="-1"><a class="header-anchor" href="#【简单】为什么不推荐使用存储过程" aria-hidden="true">#</a> 【简单】为什么不推荐使用存储过程？</h3><p>存储过程的优点：</p><ul><li><strong>执行效率高</strong>：一次编译多次使用。</li><li><strong>安全性强</strong>：在设定存储过程的时候可以设置对用户的使用权限，这样就和视图一样具有较强的安全性。</li><li><strong>可复用</strong>：将代码封装，可以提高代码复用。</li><li><strong>性能好</strong><ul><li>由于是预先编译，因此具有很高的性能。</li><li>一个存储过程替代大量 T_SQL 语句 ，可以降低网络通信量，提高通信速率。</li></ul></li></ul><p>存储过程的缺点：</p><ul><li><strong>可移植性差</strong>：存储过程不能跨数据库移植。由于不同数据库的存储过程语法几乎都不一样，十分难以维护（不通用）。</li><li><strong>调试困难</strong>：只有少数 DBMS 支持存储过程的调试。对于复杂的存储过程来说，开发和维护都不容易。</li><li><strong>版本管理困难</strong>：比如数据表索引发生变化了，可能会导致存储过程失效。我们在开发软件的时候往往需要进行版本管理，但是存储过程本身没有版本控制，版本迭代更新的时候很麻烦。</li><li><strong>不适合高并发的场景</strong>：高并发的场景需要减少数据库的压力，有时数据库会采用分库分表的方式，而且对可扩展性要求很高，在这种情况下，存储过程会变得难以维护，增加数据库的压力，显然就不适用了。</li></ul><blockquote><p><em>综上，存储过程的优缺点都非常突出，是否使用一定要慎重，需要根据具体应用场景来权衡</em>。</p></blockquote><h2 id="mysql-crud" tabindex="-1"><a class="header-anchor" href="#mysql-crud" aria-hidden="true">#</a> MySQL CRUD</h2>`,38),h=n("p",null,"扩展阅读：",-1),m={href:"https://book.douban.com/subject/35167240/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://book.douban.com/subject/3354490/",target:"_blank",rel:"noopener noreferrer"},y=o('<h3 id="【中等】如何避免重复插入数据" tabindex="-1"><a class="header-anchor" href="#【中等】如何避免重复插入数据" aria-hidden="true">#</a> 【中等】如何避免重复插入数据？</h3><p>在 mysql 中，当存在主键冲突或唯一键冲突的情况下，根据插入策略不同，一般有以下三种避免方法：</p><ul><li><code>INSERT IGNORE INTO</code>：若无则插入，若有则忽略</li><li><code>REPLACE INTO</code>：若无则插入，若有则先删除后插入</li><li><code>INSERT INTO ... ON DUPLICATE KEY UPDATE</code>：若无则插入，若有则更新</li></ul><p>下面结合示例来说明三种方式的效果。</p><p>下面是示例的初始化准备：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 建表</span>\n<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>user<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>\n  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;ID&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;名称&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;0&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;年龄&#39;</span><span class="token punctuation">,</span>\n  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> utf8mb4<span class="token punctuation">;</span>\n\n<span class="token comment">-- 测试数据</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>user<span class="token punctuation">`</span></span>\n<span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;刘备&#39;</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>user<span class="token punctuation">`</span></span>\n<span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;关羽&#39;</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',6),v=n("p",null,[n("code",null,"INSERT IGNORE INTO"),s(" 会根据主键或者唯一键判断，忽略数据库中已经存在的数据：")],-1),f=n("ul",null,[n("li",null,[s("若数据库没有该条数据，就插入为新的数据，跟普通的 "),n("code",null,"INSERT INTO"),s(" 一样")]),n("li",null,"若数据库有该条数据，就忽略这条插入语句，不执行插入操作")],-1),w=n("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[n("pre",{class:"language-sql"},[n("code",null,[n("span",{class:"token keyword"},"INSERT"),s(),n("span",{class:"token keyword"},"IGNORE"),s(),n("span",{class:"token keyword"},"INTO"),s(),n("span",{class:"token keyword"},"user"),s(),n("span",{class:"token punctuation"},"("),s("name"),n("span",{class:"token punctuation"},","),s(" age"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"VALUES"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'关羽'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"29"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'张飞'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"25"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"-- 最终数据"),s(`
`),n("span",{class:"token operator"},"+"),n("span",{class:"token comment"},"----+--------+------+"),s(`
`),n("span",{class:"token operator"},"|"),s(" id "),n("span",{class:"token operator"},"|"),s(" name   "),n("span",{class:"token operator"},"|"),s(" age  "),n("span",{class:"token operator"},"|"),s(`
`),n("span",{class:"token operator"},"+"),n("span",{class:"token comment"},"----+--------+------+"),s(`
`),n("span",{class:"token operator"},"|"),s("  "),n("span",{class:"token number"},"1"),s(),n("span",{class:"token operator"},"|"),s(" 刘备   "),n("span",{class:"token operator"},"|"),s("   "),n("span",{class:"token number"},"30"),s(),n("span",{class:"token operator"},"|"),s(`
`),n("span",{class:"token operator"},"|"),s("  "),n("span",{class:"token number"},"2"),s(),n("span",{class:"token operator"},"|"),s(" 关羽   "),n("span",{class:"token operator"},"|"),s("   "),n("span",{class:"token number"},"28"),s(),n("span",{class:"token operator"},"|"),s(`
`),n("span",{class:"token operator"},"|"),s("  "),n("span",{class:"token number"},"3"),s(),n("span",{class:"token operator"},"|"),s(" 张飞   "),n("span",{class:"token operator"},"|"),s("   "),n("span",{class:"token number"},"25"),s(),n("span",{class:"token operator"},"|"),s(`
`),n("span",{class:"token operator"},"+"),n("span",{class:"token comment"},"----+--------+------+"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),L=n("p",null,[n("code",null,"REPLACE INTO"),s(" 会根据主键或者唯一键判断：")],-1),I=n("ul",null,[n("li",null,[s("若表中已存在该数据，则先删除此行数据，然后插入新的数据，相当于 "),n("code",null,"delete + insert")]),n("li",null,[s("若表中不存在该数据，则直接插入新数据，跟普通的 "),n("code",null,"insert into"),s(" 一样")])],-1),S=n("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[n("pre",{class:"language-sql"},[n("code",null,[n("span",{class:"token keyword"},"REPLACE"),s(),n("span",{class:"token keyword"},"INTO"),s(),n("span",{class:"token keyword"},"user"),n("span",{class:"token punctuation"},"("),s("id"),n("span",{class:"token punctuation"},","),s(" name"),n("span",{class:"token punctuation"},","),s(" age"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"VALUES"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s("  "),n("span",{class:"token string"},"'关羽'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"29"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},","),s("  "),n("span",{class:"token string"},"'赵云'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"22"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"-- 最终数据"),s(`
`),n("span",{class:"token operator"},"+"),n("span",{class:"token comment"},"----+--------+------+"),s(`
`),n("span",{class:"token operator"},"|"),s(" id "),n("span",{class:"token operator"},"|"),s(" name   "),n("span",{class:"token operator"},"|"),s(" age  "),n("span",{class:"token operator"},"|"),s(`
`),n("span",{class:"token operator"},"+"),n("span",{class:"token comment"},"----+--------+------+"),s(`
`),n("span",{class:"token operator"},"|"),s("  "),n("span",{class:"token number"},"1"),s(),n("span",{class:"token operator"},"|"),s(" 刘备   "),n("span",{class:"token operator"},"|"),s("   "),n("span",{class:"token number"},"30"),s(),n("span",{class:"token operator"},"|"),s(`
`),n("span",{class:"token operator"},"|"),s("  "),n("span",{class:"token number"},"2"),s(),n("span",{class:"token operator"},"|"),s(" 关羽   "),n("span",{class:"token operator"},"|"),s("   "),n("span",{class:"token number"},"29"),s(),n("span",{class:"token operator"},"|"),s(`
`),n("span",{class:"token operator"},"|"),s("  "),n("span",{class:"token number"},"3"),s(),n("span",{class:"token operator"},"|"),s(" 张飞   "),n("span",{class:"token operator"},"|"),s("   "),n("span",{class:"token number"},"25"),s(),n("span",{class:"token operator"},"|"),s(`
`),n("span",{class:"token operator"},"|"),s("  "),n("span",{class:"token number"},"4"),s(),n("span",{class:"token operator"},"|"),s(" 赵云   "),n("span",{class:"token operator"},"|"),s("   "),n("span",{class:"token number"},"22"),s(),n("span",{class:"token operator"},"|"),s(`
`),n("span",{class:"token operator"},"+"),n("span",{class:"token comment"},"----+--------+------+"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),E=n("p",null,[n("code",null,"INSERT ... ON DUPLICATE KEY UPDATE"),s(" 会根据主键或者唯一键判断：")],-1),M=n("ul",null,[n("li",null,"若数据库已有该数据，则直接更新原数据，相当于 UPDATE"),n("li",null,"若数据库没有该数据，则插入为新的数据，相当于 INSERT")],-1),N=n("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[n("pre",{class:"language-sql"},[n("code",null,[n("span",{class:"token keyword"},"INSERT"),s(),n("span",{class:"token keyword"},"INTO"),s(),n("span",{class:"token keyword"},"user"),n("span",{class:"token punctuation"},"("),s("id"),n("span",{class:"token punctuation"},","),s(" name"),n("span",{class:"token punctuation"},","),s(" age"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"VALUES"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'关羽'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"27"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"ON"),s(),n("span",{class:"token keyword"},"DUPLICATE"),s(),n("span",{class:"token keyword"},"KEY"),s(),n("span",{class:"token keyword"},"UPDATE"),s(" name"),n("span",{class:"token operator"},"="),n("span",{class:"token keyword"},"values"),n("span",{class:"token punctuation"},"("),s("name"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(" age"),n("span",{class:"token operator"},"="),n("span",{class:"token keyword"},"values"),n("span",{class:"token punctuation"},"("),s("age"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"-- 最终数据"),s(`
`),n("span",{class:"token operator"},"+"),n("span",{class:"token comment"},"----+--------+------+"),s(`
`),n("span",{class:"token operator"},"|"),s(" id "),n("span",{class:"token operator"},"|"),s(" name   "),n("span",{class:"token operator"},"|"),s(" age  "),n("span",{class:"token operator"},"|"),s(`
`),n("span",{class:"token operator"},"+"),n("span",{class:"token comment"},"----+--------+------+"),s(`
`),n("span",{class:"token operator"},"|"),s("  "),n("span",{class:"token number"},"1"),s(),n("span",{class:"token operator"},"|"),s(" 刘备   "),n("span",{class:"token operator"},"|"),s("   "),n("span",{class:"token number"},"30"),s(),n("span",{class:"token operator"},"|"),s(`
`),n("span",{class:"token operator"},"|"),s("  "),n("span",{class:"token number"},"2"),s(),n("span",{class:"token operator"},"|"),s(" 关羽   "),n("span",{class:"token operator"},"|"),s("   "),n("span",{class:"token number"},"27"),s(),n("span",{class:"token operator"},"|"),s(`
`),n("span",{class:"token operator"},"|"),s("  "),n("span",{class:"token number"},"3"),s(),n("span",{class:"token operator"},"|"),s(" 张飞   "),n("span",{class:"token operator"},"|"),s("   "),n("span",{class:"token number"},"25"),s(),n("span",{class:"token operator"},"|"),s(`
`),n("span",{class:"token operator"},"|"),s("  "),n("span",{class:"token number"},"4"),s(),n("span",{class:"token operator"},"|"),s(" 赵云   "),n("span",{class:"token operator"},"|"),s("   "),n("span",{class:"token number"},"22"),s(),n("span",{class:"token operator"},"|"),s(`
`),n("span",{class:"token operator"},"+"),n("span",{class:"token comment"},"----+--------+------+"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),T=o(`<h3 id="【简单】exists-和-in-有什么区别" tabindex="-1"><a class="header-anchor" href="#【简单】exists-和-in-有什么区别" aria-hidden="true">#</a> 【简单】EXISTS 和 IN 有什么区别？</h3><p>EXISTS 和 IN 区别如下：</p><ul><li><strong>功能</strong><ul><li><code>EXISTS</code> 用于判断子查询的结果集是否为空。</li><li><code>IN</code> 用于判断某个值是否在指定的集合中。</li></ul></li><li><strong>性能</strong><ul><li><strong><code>EXISTS</code> 先外后内</strong> - 先对外表进行循环查询，再将查询结果放入 <code>EXISTS</code> 的子查询中进行条件比较，一旦找到匹配记录，则终止内表子查询。</li><li><strong><code>IN</code> 先内后外</strong> - 先查询内表，将内表的查询结果作为条件，提供给外表查询语句进行比较。</li></ul></li><li><strong>应用</strong><ul><li>如果查询的两个表大小相当，那么 <code>EXISTS</code> 和 <code>IN</code> 差别不大。</li><li><code>EXISTS</code> 适合外表小而内表大的场景。</li><li><code>IN</code> 适合外表大而内表小的场景。</li></ul></li></ul><p>EXISTS 和 IN 的对比示例如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> A <span class="token keyword">WHERE</span> cc <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> cc <span class="token keyword">FROM</span> B<span class="token punctuation">)</span>
 <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> A <span class="token keyword">WHERE</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> cc <span class="token keyword">FROM</span> B <span class="token keyword">WHERE</span> B<span class="token punctuation">.</span>cc<span class="token operator">=</span>A<span class="token punctuation">.</span>cc<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当 A 小于 B 时，用 <code>EXISTS</code>。因为 <code>EXISTS</code> 的实现，相当于外表循环，实现的逻辑类似于：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code> <span class="token keyword">for</span> i <span class="token operator">in</span> A
     <span class="token keyword">for</span> j <span class="token operator">in</span> B
         <span class="token keyword">if</span> j<span class="token punctuation">.</span>cc <span class="token operator">=</span><span class="token operator">=</span> i<span class="token punctuation">.</span>cc <span class="token keyword">then</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当 B 小于 A 时用 <code>IN</code>，因为实现的逻辑类似于：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code> <span class="token keyword">for</span> i <span class="token operator">in</span> B
     <span class="token keyword">for</span> j <span class="token operator">in</span> A
         <span class="token keyword">if</span> j<span class="token punctuation">.</span>cc <span class="token operator">=</span><span class="token operator">=</span> i<span class="token punctuation">.</span>cc <span class="token keyword">then</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>哪个表小就用哪个表来驱动，A 表小就用 <code>EXISTS</code>，B 表小就用 <code>IN</code>；如果两个表大小相当，则使用 <code>EXISTS</code> 和 <code>IN</code> 的区别不大。</p><h3 id="【简单】union-和-union-all-有什么区别" tabindex="-1"><a class="header-anchor" href="#【简单】union-和-union-all-有什么区别" aria-hidden="true">#</a> 【简单】UNION 和 UNION ALL 有什么区别？</h3><p><code>UNION</code> 和 <code>UNION ALL</code> 都是将两个结果集合并为一个，<strong>两个要联合的 SQL 语句字段个数必须一样，而且字段类型要“相容”（一致）</strong>。</p><ul><li><code>UNION</code> 需要进行去重扫描，因此效率较低；而 <code>UNION ALL</code> 不会进行去重。</li><li><code>UNION</code> 会按照字段的顺序进行排序；而 <code>UNION ALL</code> 只是简单的将两个结果合并就返回。</li></ul><h3 id="【简单】join-有哪些类型" tabindex="-1"><a class="header-anchor" href="#【简单】join-有哪些类型" aria-hidden="true">#</a> 【简单】JOIN 有哪些类型？</h3><p><strong>在 SELECT, UPDATE 和 DELETE 语句中，“连接”可以用于联合多表查询。连接使用 <code>JOIN</code> 关键字，并且条件语句使用 <code>ON</code> 而不是 <code>WHERE</code></strong>。</p><p><strong>连接可以替换子查询，并且一般比子查询的效率更快</strong>。</p><p><code>JOIN</code> 有以下类型：</p><ul><li>内连接 - 内连接又称等值连接，用于获取两个表中字段匹配关系的记录，<strong>使用 <code>INNER JOIN</code> 关键字</strong>。在没有条件语句的情况下<strong>返回笛卡尔积</strong>。 <ul><li>笛卡尔积 - <strong>“笛卡尔积”也称为交叉连接（<code>CROSS JOIN</code>），它的作用就是可以把任意表进行连接，即使这两张表不相关</strong>。</li><li>自连接（=） - <strong>“自连接（=）”可以看成内连接的一种，只是连接的表是自身而已</strong>。</li><li>自然连接（NATURAL JOIN） - <strong>“自然连接”会自动连接所有同名列</strong>。自然连接使用 <code>NATURAL JOIN</code> 关键字。</li></ul></li><li>外连接 <ul><li>左连接（LEFT JOIN） - <strong>“左外连接”会获取左表所有记录，即使右表没有对应匹配的记录</strong>。左外连接使用 <code>LEFT JOIN</code> 关键字。</li><li>右连接（RIGHT JOIN） - <strong>“右外连接”会获取右表所有记录，即使左表没有对应匹配的记录</strong>。右外连接使用 <code>RIGHT JOIN</code> 关键字。</li></ul></li></ul><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/database/mysql/sql-join.png" alt="SQL JOIN" tabindex="0" loading="lazy"><figcaption>SQL JOIN</figcaption></figure><h3 id="【中等】为什么不推荐多表-join" tabindex="-1"><a class="header-anchor" href="#【中等】为什么不推荐多表-join" aria-hidden="true">#</a> 【中等】为什么不推荐多表 JOIN？</h3>`,20),x={href:"https://www.cnblogs.com/eiffelzero/p/18608160",target:"_blank",rel:"noopener noreferrer"},_={href:"https://book.douban.com/subject/27605355/",target:"_blank",rel:"noopener noreferrer"},q=o('<p>主要原因如下：</p><ul><li><strong>性能问题</strong><ul><li><strong>查询效率低</strong>：当涉及多个表进行 <strong>JOIN</strong> 操作时，MySQL 需要执行多次扫描，尤其是在没有合适索引支持的情况下，性能可能会大幅下降。每增加一个表的 <strong>JOIN</strong>，查询的复杂度呈指数增长。</li><li><strong>临时表的创建</strong>：MySQL 在执行复杂的多表 <strong>JOIN</strong> 时，通常会创建临时表来存储中间结果。如果数据量很大，临时表可能会溢出到磁盘，导致磁盘 I/O 操作增加，从而显著影响查询性能。</li></ul></li><li><strong>索引的作用有限</strong><ul><li>在多表 <strong>JOIN</strong> 的操作中，虽然每个表可以使用索引加速查询，但是当涉及到多个表的连接时，MySQL 必须在这些表之间执行 <strong>JOIN</strong> 操作，这时索引的效果会大大降低。特别是在没有合适索引的情况下，<strong>JOIN</strong> 查询会导致全表扫描，极大地降低了查询效率。</li></ul></li><li><strong>数据冗余</strong><ul><li>在多表 <strong>JOIN</strong> 时，如果一个表中的一行数据与另一个表中的多行数据进行匹配，结果会产生数据冗余。例如，假设有两个表：<code>A</code> 和 <code>B</code>，<code>A</code> 中有 10 条记录，<code>B</code> 中有 5 条记录。如果在 <code>A</code> 和 <code>B</code> 上做 <strong>JOIN</strong> 操作，且匹配条件满足 2 条记录，那么最终的结果会有 20 条记录（10 * 2）。这会导致数据量急剧增加，浪费存储空间。</li></ul></li><li><strong>可读性和可维护性</strong><ul><li>多表 <strong>JOIN</strong> 的 SQL 查询通常比较复杂，尤其是当涉及多个表、多个连接条件以及嵌套查询时，查询语句的可读性会下降，增加了维护的难度。</li><li>复杂的查询可能让开发者和运维人员难以理解和优化，从而增加了错误的风险。</li></ul></li><li><strong>可能引发死锁</strong><ul><li>在进行多个表 <strong>JOIN</strong> 操作时，如果涉及到多张表的锁定，可能会导致死锁。特别是在高并发的环境下，频繁执行 <strong>JOIN</strong> 操作容易导致多个事务之间相互等待，最终导致死锁问题。</li></ul></li><li><strong>优化器的作用有限</strong><ul><li>MySQL 的优化器对多表 <strong>JOIN</strong> 的优化能力相对有限，尤其在处理非常复杂的查询时，可能无法有效选择最优的执行计划，从而导致性能瓶颈。</li><li>虽然 MySQL 使用了 <strong>查询缓存</strong> 和 <strong>索引优化</strong>，但对于多表 <strong>JOIN</strong> 的优化仍然受到很多限制，导致性能不如预期。</li></ul></li></ul><h3 id="【中等】drop、delete-和-truncate-有什么区别" tabindex="-1"><a class="header-anchor" href="#【中等】drop、delete-和-truncate-有什么区别" aria-hidden="true">#</a> 【中等】DROP、DELETE 和 TRUNCATE 有什么区别？</h3><ul><li><code>DROP</code> 删除数据表，包括数据和结构。在 InnoDB 中，表数据存于 <code>.ibd</code> 文件；表结构元数据存于 .frm 文件。DROP 本质上是就是直接删除 <code>.ibd</code> 和 <code>.frm</code> 文件。</li><li><code>DELETE</code> 删除数据，但保留表结构。执行 DELETE 后，空间大小不会立刻变化。这是因为，DLETE 操作实际上只是标记，被写入 biglog、redo log 和 undo log。</li><li><code>TRUNCATE</code> 会删除全部表数据，且不会记录日志，因此无法回滚。<code>TRUNCATE</code> 执行后，自增主键重新从 1 开始。</li></ul><h2 id="mysql-数据类型" tabindex="-1"><a class="header-anchor" href="#mysql-数据类型" aria-hidden="true">#</a> MySQL 数据类型</h2>',5),A=n("p",null,"扩展阅读：",-1),O={href:"https://dev.mysql.com/doc/refman/8.4/en/data-types.html",target:"_blank",rel:"noopener noreferrer"},R={href:"http://blog.leanote.com/post/weibo-007/mysql_float_double_decimal",target:"_blank",rel:"noopener noreferrer"},Q=o(`<h3 id="【简单】char-和-varchar-的区别是什么" tabindex="-1"><a class="header-anchor" href="#【简单】char-和-varchar-的区别是什么" aria-hidden="true">#</a> 【简单】CHAR 和 VARCHAR 的区别是什么？</h3><p><code>CHAR</code> 和 <code>VARCHAR</code> 的主要区别在于：<strong>CHAR 是定长字符串，VARCHAR 是变长字符串。</strong></p><ul><li><strong>长度限制</strong><ul><li><code>CHAR(M)</code> 和 <code>VARCHAR(M)</code> 的 M 都代表能够保存的字符数的最大值，无论是字母、数字还是中文，每个都只占用一个字符。</li></ul></li><li><strong>占用空间</strong><ul><li><code>CHAR</code> 在存储时会在右边填充空格以达到指定的长度，检索时会去掉空格；</li><li><code>VARCHAR</code> 在存储时需要使用 1 或 2 个额外字节记录字符串的长度，检索时不需要处理。 <ul><li>字符长度超过 255，使用 2 个字节</li><li>字符长度未超过 255，使用 1 个字节</li></ul></li></ul></li><li><strong>应用</strong></li><li><strong><code>CHAR</code> 适合存储长度较短或长度固定的字符串</strong>。例如 Bcrypt 算法、MD5 算法加密后的密码、身份证号码；</li><li><strong><code>VARCHAR</code> 适合存储长度不确定的字符串</strong>。例如用户昵称、文章标题等。</li></ul><p><code>BINARY</code> 和 <code>VARBINARY</code> 类似于 <code>CHAR</code> 和 <code>VARCHAR</code>，不同的是它们包含二进制字符串而不要非二进制字符串。也就是说，它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值。</p><h3 id="【简单】金额数据用什么类型存储" tabindex="-1"><a class="header-anchor" href="#【简单】金额数据用什么类型存储" aria-hidden="true">#</a> 【简单】金额数据用什么类型存储？</h3><p>MySQL 中有 3 种类型可以表示浮点数，分别是 <code>FLOAT</code>、<code>DOUBLE</code> 和 <code>DECIMAL</code>。</p><p><strong>采用 <code>FLOAT</code> 和 <code>DOUBLE</code> 类型会丢失精度</strong>。数据的精确度取决于分配给每种数据类型的存储长度。由于计算机只能存储二进制，所以浮点型数据在存储的时候，必须转化成二进制。</p><ul><li>单精度类型 <code>FLOAT</code> 存储空间为 4 字节，即 32 位。</li><li>双精度类型 <code>DOUBLE</code> 存储空间为 8 字节，即 64 位。</li></ul><p>如果存储的数据转为二进制后，超过存储的位数，数据就被截断，因此存在丢失精度的可能。</p><p>更重要的是，从 MySQL 8.0.17 版本开始，当创建表用到类型 Float 或 Double 时，会抛出下面的警告：MySQL 提醒用户不该用上述浮点类型，甚至提醒将在之后版本中废弃浮点类型。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Specifying number of digits for floating point data types is deprecated and will be removed in a future release
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>【示例】丢失精度案例</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 创建表</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>test<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">\`</span>value<span class="token punctuation">\`</span></span> <span class="token keyword">FLOAT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> test <span class="token keyword">value</span> <span class="token punctuation">(</span><span class="token number">131072.32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">-----------+</span>
<span class="token operator">|</span> <span class="token keyword">value</span>     <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-----------+</span>
<span class="token operator">|</span> <span class="token number">131072.31</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-----------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.02</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：示例中，使用 FLOAT 类型，明明保留了两位小数。但是写入的数据却从 <code>131072.32</code> 变成了 <code>131072.31</code> 。</p><p><code>DECIMAL</code> 类型是 MySQL 官方唯一指定能精确存储的类型。因此，对于不允许丢失精度的场景（如金额数据），可以使用 <code>DECIMAL</code> 类型。</p><p>然而，在海量并发的互联网业务中使用，金额字段的设计并不推荐使用 <code>DECIMAL</code> 类型，而更推荐使用 <code>BIGINT</code> 整型类型。这里会用到一个巧思：将资金类型的数据用分为单位存储，而不是用元为单位存储。如 1 元在数据库中用整型类型 100 存储。</p><p>为什么更推荐用 <code>BIGINT</code> 存储金钱数据？因为 <code>DECIMAL</code> 是个变长字段，若要定义金额字段，则定义为 <code>DECIMAL(8,2)</code> 是远远不够的。这样只能表示存储最大值为 999999.99，百万级的资金存储。用户的金额至少要存储百亿的字段，而统计局的 GDP 金额字段则可能达到数十万亿级别。用类型 <code>DECIMAL</code> 定义，不好统一。另外重要的是，类型 <code>DECIMAL</code> 是通过二进制实现的一种编码方式，计算效率远不如整型来的高效。因此，推荐使用 <code>BIGINT</code> 来存储金额相关的字段。</p>`,17),C={href:"http://blog.leanote.com/post/weibo-007/mysql_float_double_decimal",target:"_blank",rel:"noopener noreferrer"},D=o(`<h3 id="【简单】如何存储-emoji-😃" tabindex="-1"><a class="header-anchor" href="#【简单】如何存储-emoji-😃" aria-hidden="true">#</a> 【简单】如何存储 emoji 😃？</h3><p>在表结构设计中，除了将列定义为 <code>CHAR</code> 和 <code>VARCHAR</code> 用以存储字符以外，还需要额外定义字符对应的字符集，因为每种字符在不同字符集编码下，对应着不同的二进制值。常见的字符集有 <code>gbk</code>、<code>utf8</code>，通常推荐把默认字符集设置为 <code>utf8</code>。</p><p>随着移动互联网的飞速发展，<strong>推荐把 MySQL 的默认字符集设置为 <code>utf8mb4</code></strong>，否则，某些 emoji 表情字符无法在 UTF8 字符集下存储。</p><p>【示例】设置表的字符集为 <code>utf8mb4</code></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> test <span class="token keyword">CHARSET</span> utf8mb4<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>注意：上述修改只是将表的字符集修改为 <code>utf8mb4</code>，下次新增列时，若不显式地指定字符集，新列的字符集会变更为 <code>utf8mb4</code>，<strong>但对于已经存在的列，其默认字符集并不做修改</strong>。</p></blockquote><p>【示例】设置表的默认字符集为 <code>utf8mb4</code></p><p>正确设置 <code>utf8mb4</code> 字符集方法如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> test <span class="token keyword">CONVERT</span> <span class="token keyword">TO</span> <span class="token keyword">CHARSET</span> utf8mb4<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="【简单】时间数据选择-datetime-还是-timestamp" tabindex="-1"><a class="header-anchor" href="#【简单】时间数据选择-datetime-还是-timestamp" aria-hidden="true">#</a> 【简单】时间数据选择 DATETIME 还是 TIMESTAMP？</h3><p>表结构设计时，对时间字段的存储，通常会有 3 种选择：<code>DATETIME</code>、<code>TIMESTAMP</code>、<code>INT</code>。</p><p><code>DATETIME</code>、<code>TIMESTAMP</code>、<code>INT</code> 数据表示范围：</p><ul><li><code>DATETIME</code> 占用 8 个字节，可表示范围为：<code>1000-01-01 00:00:00.000000</code> 到 <code>9999-12-31 23:59:59.999999</code></li><li><code>TIMESTAMP</code> 占用 4 个字节，可表示范围为：<code>&#39;1970-01-01 00:00:01.000000&#39; UTC</code> 到 <code>&#39;2038-01-09 03:14:07.999999&#39; UTC</code>。表示从 <code>1970-01-01 00:00:00</code> 到现在的毫秒数。</li><li><code>INT</code> 类型就是直接存储 ‘1970-01-01 00:00:00’ 到现在的毫秒数，本质和 <code>TIMESTAMP</code> 一样，因此用 <code>INT</code> 不如直接使用 <code>TIMESTAMP</code>。</li></ul><p>此外，<code>TIMESTAMP</code> 还存在潜在的性能问题。虽然从毫秒数转换到类型 <code>TIMESTAMP</code> 本身需要的 CPU 指令并不多，这并不会带来直接的性能问题。但是如果使用默认的操作系统时区，则每次通过时区计算时间时，要调用操作系统底层系统函数 <code>__tz_convert()</code>，而这个函数需要额外的加锁操作，以确保这时操作系统时区没有修改。所以，当大规模并发访问时，由于热点资源竞争，会产生两个问题。</p><ul><li><strong>性能不如 DATETIME：</strong> <code>DATETIME</code> 不存在时区转化问题。</li><li><strong>性能抖动：</strong> 海量并发时，存在性能抖动问题。</li></ul><p>为了优化 TIMESTAMP 的使用，强烈建议使用显式的时区，而不是操作系统时区。比如在配置文件中显示地设置时区，而不要使用系统时区</p><p>综上，由于 <code>TIMESTAMP</code> 存在时间上限和潜在性能问题，所以推荐使用 <code>DATETIME</code> 类型来存储时间字段。</p><h2 id="mysql-存储" tabindex="-1"><a class="header-anchor" href="#mysql-存储" aria-hidden="true">#</a> MySQL 存储</h2>`,18),B=n("p",null,"扩展阅读：",-1),U={href:"https://dev.mysql.com/doc/refman/8.4/en/innodb-storage-engine.html",target:"_blank",rel:"noopener noreferrer"},P={href:"https://dev.mysql.com/doc/refman/8.4/en/storage-engines.html",target:"_blank",rel:"noopener noreferrer"},F=o('<h3 id="【中等】mysql-支持哪些存储引擎" tabindex="-1"><a class="header-anchor" href="#【中等】mysql-支持哪些存储引擎" aria-hidden="true">#</a> 【中等】MySQL 支持哪些存储引擎？</h3><p><strong>存储引擎层负责数据的存储和提取</strong>。MySQL 的存储引擎采用了插拔式架构，可以根据需要替换。</p><p>MySQL 内置了以下存储引擎：</p><ul><li><strong>InnoDB</strong> - InnoDB 是 MySQL 5.5 版本以后的默认存储引擎。 <ul><li>优点：支持<strong>事务</strong>，支持<strong>行级锁</strong>，支持<strong>外键约束</strong>等，<strong>并发性能不错</strong>且支持<strong>自动故障恢复</strong>。</li></ul></li><li><strong>MyISAM</strong> - MyISAM 是 MySQL 5.5 版本以前的默认存储引擎。 <ul><li>优点：速度快，占用资源少。</li><li>缺点：不支持事务，不支持行级锁，不支持外键约束，也不支持自动故障恢复功能。</li></ul></li><li><strong>Memory</strong> - 使用系统内存作为存储介质，以便得到更快的响应速度。不过，如果 mysqld 进程崩溃，则会导致所有的数据丢失。因此，Memory 引擎常用于临时表。</li><li><strong>NDB</strong> - 也被称为 NDB Cluster 存储引擎，主要用于 MySQL Cluster 分布式集群环境，类似于 Oracle 的 RAC 集群。</li><li><strong>Archive</strong> - Archive 存储引擎有很好的压缩机制，非常适合用于归档数据。 <ul><li>Archive 存储引擎只支持 <code>INSERT</code> 和 <code>SELECT</code> 操作。</li><li>Archive 存储引擎采用 zlib 算法压缩数据，压缩比可达到 1: 10。</li></ul></li><li><strong>CSV</strong> - 可以将 CSV 文件作为 MySQL 的表来处理，但这种表不支持索引。</li></ul><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202503210712752.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="【中等】innodb-和-myisam-有哪些差异" tabindex="-1"><a class="header-anchor" href="#【中等】innodb-和-myisam-有哪些差异" aria-hidden="true">#</a> 【中等】InnoDB 和 MyISAM 有哪些差异？</h3><table><thead><tr><th>对比项</th><th>MyISAM</th><th>InnoDB</th></tr></thead><tbody><tr><td>外键</td><td>不支持</td><td>支持</td></tr><tr><td>事务</td><td>不支持</td><td>支持四种事务隔离级别</td></tr><tr><td>锁粒度</td><td>支持表级锁</td><td>支持表级锁、行级锁</td></tr><tr><td>索引</td><td>采用 B+ 树索引（非聚簇索引）</td><td>采用 B+ 树索引（聚簇索引）</td></tr><tr><td>表空间</td><td>小</td><td>大</td></tr><tr><td>关注点</td><td>性能</td><td>事务</td></tr><tr><td>计数器</td><td>维护了计数器，<code>SELECT COUNT(*)</code> 效率为 <code>O(1)</code></td><td>没有维护计数器，需要全表扫描</td></tr><tr><td>自动故障恢复</td><td>不支持</td><td>支持（依赖于 redo log）</td></tr></tbody></table><h3 id="【中等】如何选择-mysql-存储引擎" tabindex="-1"><a class="header-anchor" href="#【中等】如何选择-mysql-存储引擎" aria-hidden="true">#</a> 【中等】如何选择 MySQL 存储引擎？</h3><ul><li>大多数情况下，使用默认的 InnoDB 就够了。如果要提供提交、回滚和恢复的事务安全（ACID 兼容）能力，并要求实现并发控制，InnoDB 就是比较靠前的选择了。</li><li>如果数据表主要用来插入和查询记录，则 MyISAM 引擎提供较高的处理效率。</li><li>如果只是临时存放数据，数据量不大，并且不需要较高的数据安全性，可以选择将数据保存在内存的 MEMORY 引擎中。MySQL 中使用该引擎作为临时表，存放查询的中间结果。</li><li>如果存储归档数据，可以使用 ARCHIVE 引擎。</li></ul><p>使用哪一种引擎可以根据需要灵活选择，因为存储引擎是基于表的，所以一个数据库中多个表可以使用不同的引擎以满足各种性能和实际需求。使用合适的存储引擎将会提高整个数据库的性能。</p><h3 id="【中等】mysql-有哪些物理存储文件" tabindex="-1"><a class="header-anchor" href="#【中等】mysql-有哪些物理存储文件" aria-hidden="true">#</a> 【中等】MySQL 有哪些物理存储文件？</h3><p>MySQL 不同存储引擎的物理存储文件是不一样的。</p><p>InnoDB 的物理文件结构为：</p><ul><li><code>.frm</code> 文件：与表相关的元数据信息都存放在 frm 文件，包括表结构的定义信息等。</li><li><code>.ibd</code> 文件或 <code>.ibdata</code> 文件： 这两种文件都是存放 InnoDB 数据的文件，之所以有两种文件形式存放 InnoDB 的数据，是因为 InnoDB 的数据存储方式能够通过配置来决定是使用<strong>共享表空间</strong>存放存储数据，还是用<strong>独享表空间</strong>存放存储数据。 <ul><li>独享表空间存储方式使用<code>.ibd</code>文件，并且每个表一个<code>.ibd</code>文件</li><li>共享表空间存储方式使用<code>.ibdata</code>文件，所有表共同使用一个<code>.ibdata</code>文件（或多个，可自己配置）</li></ul></li></ul><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202311070640589.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>MyISAM 的物理文件结构为：</p><ul><li><code>.frm</code>文件：与表相关的元数据信息都存放在 frm 文件，包括表结构的定义信息等。</li><li><code>.MYD</code> (<code>MYData</code>) 文件：MyISAM 存储引擎专用，用于存储 MyISAM 表的数据。</li><li><code>.MYI</code> (<code>MYIndex</code>) 文件：MyISAM 存储引擎专用，用于存储 MyISAM 表的索引相关信息。</li></ul><h3 id="【中等】什么是-buffer-pool" tabindex="-1"><a class="header-anchor" href="#【中等】什么是-buffer-pool" aria-hidden="true">#</a> 【中等】什么是 Buffer Pool？</h3><p>Buffer Pool（缓冲池）是 MySQL InnoDB 存储引擎的核心组件之一，它是数据库系统中的内存缓存区域，主要<strong>用于缓存表和索引的数据</strong>。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202311070641009.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>主要作用</strong>：</p><ol><li><strong>减少磁盘 I/O</strong>：将频繁访问的数据页缓存在内存中，避免每次查询都要从磁盘读取</li><li><strong>提高查询性能</strong>：内存访问速度远快于磁盘访问</li><li><strong>写缓冲</strong>：对数据的修改先在内存中进行，再通过后台线程定期刷新到磁盘</li></ol><p><strong>工作原理</strong>：</p><ul><li>Buffer Pool 以页 (page) 为单位存储数据，默认每页 16KB</li><li>使用 LRU （最近最少使用）算法管理内存页</li><li>包含&quot;年轻代&quot;和&quot;老年代&quot;两个区域，防止全表扫描污染缓存</li></ul><h3 id="【中等】什么是-change-buffer" tabindex="-1"><a class="header-anchor" href="#【中等】什么是-change-buffer" aria-hidden="true">#</a> 【中等】什么是 Change Buffer？</h3><p>Change Buffer 是 InnoDB 存储引擎中的一种关键优化机制，主要<strong>用于提高非唯一二级索引的写操作性能</strong>。</p><p>Change Buffer 是一种特殊的内存数据结构，用于缓存对<strong>非唯一二级索引页</strong>的修改操作（INSERT、UPDATE、DELETE），当这些索引页不在缓冲池 (Buffer Pool) 中时，避免立即从磁盘读取索引页。</p><p><strong>工作原理</strong>：</p><ul><li><p><strong>写操作发生时</strong>：当修改非唯一二级索引的数据时，InnoDB 会检查目标索引页是否在 Buffer Pool 中。</p></li><li><p>如果在：直接修改</p><ul><li>如果不在：将修改操作记录到 Change Buffer</li></ul></li><li><p><strong>后续读取时</strong>：当需要读取该索引页时，InnoDB 会将 Change Buffer 中的修改与从磁盘读取的原始页合并。</p></li><li><p><strong>后台合并</strong>：有专门的线程定期将 Change Buffer 中的变更合并到磁盘上的索引页。</p></li></ul><p><strong>优势</strong></p><ul><li><strong>减少磁盘 I/O</strong>：避免为写入操作立即读取索引页</li><li><strong>提高吞吐量</strong>：多个变更可以合并执行</li><li><strong>减少随机 I/O</strong>：将随机写入转为顺序写入</li></ul><p><strong>适用场景</strong>：</p><ul><li>适用于<strong>写多读少</strong>的非唯一二级索引</li><li>特别适合<strong>大量 DML 操作</strong>但索引不常被查询的业务场景</li></ul><p><strong>不适用场景</strong>：</p><ul><li>唯一索引（需要立即检查唯一性约束）</li><li>索引被频繁查询（会导致频繁合并操作）</li></ul><p><strong>相关配置</strong>：</p><ul><li><code>innodb_change_buffer_max_size</code>：Change Buffer 最大占 Buffer Pool 的比例（默认 25%）</li><li><code>innodb_change_buffering</code>：指定缓冲的变更类型（all/none/inserts/deletes 等）</li></ul><h2 id="mysql-日志" tabindex="-1"><a class="header-anchor" href="#mysql-日志" aria-hidden="true">#</a> MySQL 日志</h2><h3 id="【简单】mysql-有哪些类型的日志" tabindex="-1"><a class="header-anchor" href="#【简单】mysql-有哪些类型的日志" aria-hidden="true">#</a> 【简单】MySQL 有哪些类型的日志？</h3><p>MySQL 日志文件有很多，包括 ：</p><ul><li><strong>错误日志</strong>（error log）：错误日志文件对 MySQL 的启动、运行、关闭过程进行了记录，能帮助定位 MySQL 问题。</li><li><strong>慢查询日志</strong>（slow query log）：慢查询日志是用来记录执行时间超过 long_query_time 这个变量定义的时长的查询语句。通过慢查询日志，可以查找出哪些查询语句的执行效率很低，以便进行优化。</li><li><strong>一般查询日志</strong>（general log）：一般查询日志记录了所有对 MySQL 数据库请求的信息，无论请求是否正确执行。</li><li><strong>二进制日志</strong>（bin log）：关于二进制日志，它记录了数据库所有执行的 DDL 和 DML 语句（除了数据查询语句 select、show 等），以事件形式记录并保存在二进制文件中。</li></ul><p>还有两个 InnoDB 存储引擎特有的日志文件：</p><ul><li><strong>重做日志</strong>（redo log）：重做日志至关重要，因为它们记录了对于 InnoDB 存储引擎的事务日志。</li><li><strong>回滚日志</strong>（undo log）：回滚日志同样也是 InnoDB 引擎提供的日志，顾名思义，回滚日志的作用就是对数据进行回滚。当事务对数据库进行修改，InnoDB 引擎不仅会记录 redo log，还会生成对应的 undo log 日志；如果事务执行失败或调用了 rollback，导致事务需要回滚，就可以利用 undo log 中的信息将数据回滚到修改之前的样子。</li></ul><h3 id="【简单】bin-log-和-redo-log-有什么区别" tabindex="-1"><a class="header-anchor" href="#【简单】bin-log-和-redo-log-有什么区别" aria-hidden="true">#</a> 【简单】bin log 和 redo log 有什么区别？</h3><ul><li>bin log 会记录所有与数据库有关的日志记录，包括 InnoDB、MyISAM 等存储引擎的日志；而 redo log 只记 InnoDB 存储引擎的日志。</li><li>记录的内容不同，bin log 记录的是关于一个事务的具体操作内容，即该日志是逻辑日志。而 redo log 记录的是关于每个页（Page）的更改的物理情况。</li><li>写入的时间不同，bin log 仅在事务提交前进行提交，也就是只写磁盘一次。而在事务进行的过程中，却不断有 redo ertry 被写入 redo log 中。</li><li>写入的方式也不相同，redo log 是循环写入和擦除，bin log 是追加写入，不会覆盖已经写的文件。</li></ul><h3 id="【简单】redo-log-如何刷盘" tabindex="-1"><a class="header-anchor" href="#【简单】redo-log-如何刷盘" aria-hidden="true">#</a> 【简单】redo log 如何刷盘？</h3><p>redo log 的写入不是直接落到磁盘，而是在内存中设置了一片称之为 redo log buffer 的连续内存空间，也就是 redo 日志缓冲区。</p><p>在如下的一些情况中，log buffer 的数据会刷入磁盘：</p><ul><li>log buffer 空间不足时：log buffer 的大小是有限的，如果不停的往这个有限大小的 log buffer 里塞入日志，很快它就会被填满。如果当前写入 log buffer 的 redo 日志量已经占满了 log buffer 总容量的大约<strong>一半</strong>左右，就需要把这些日志刷新到磁盘上。</li><li>事务提交时：在事务提交时，为了保证持久性，会把 log buffer 中的日志全部刷到磁盘。注意，这时候，除了本事务的，可能还会刷入其它事务的日志。</li><li>后台线程输入：有一个后台线程，大约每秒都会刷新一次<code>log buffer</code>中的<code>redo log</code>到磁盘。</li><li>正常关闭服务器时</li><li>触发 checkpoint 规则</li></ul><p>重做日志缓存、重做日志文件都是以 <strong>块（block）</strong> 的方式进行保存的，称之为、<strong>重做日志块（redo log block）</strong>, 块的大小是固定的 512 字节。我们的 redo log 它是固定大小的，可以看作是一个逻辑上的 <strong>log group</strong>，由一定数量的 <strong>log block</strong> 组成。</p><p>它的写入方式是从头到尾开始写，写到末尾又回到开头循环写。</p><p>其中有两个标记位置：</p><p><code>write pos</code>是当前记录的位置，一边写一边后移，写到第 3 号文件末尾后就回到 0 号文件开头。<code>checkpoint</code>是当前要擦除的位置，也是往后推移并且循环的，擦除记录前要把记录更新到磁盘。</p><p>当<code>write_pos</code>追上<code>checkpoint</code>时，表示 redo log 日志已经写满。这时候就不能接着往里写数据了，需要执行<code>checkpoint</code>规则腾出可写空间。</p><p>所谓的 <strong>checkpoint 规则</strong>，就是 checkpoint 触发后，将 buffer 中日志页都刷到磁盘。</p><h3 id="【中等】日志为什么要两阶段提交" tabindex="-1"><a class="header-anchor" href="#【中等】日志为什么要两阶段提交" aria-hidden="true">#</a> 【中等】日志为什么要两阶段提交？</h3><p>由于 redo log 和 binlog 是两个独立的逻辑，如果不用两阶段提交，要么就是先写完 redo log 再写 binlog，或者采用反过来的顺序。</p><ol><li><strong>先写 redo log 后写 binlog</strong>。假设在 redo log 写完，binlog 还没有写完的时候，MySQL 进程异常重启。由于我们前面说过的，redo log 写完之后，系统即使崩溃，仍然能够把数据恢复回来，所以恢复后这一行 c 的值是 1。 <ul><li>但是由于 binlog 没写完就 crash 了，这时候 binlog 里面就没有记录这个语句。因此，之后备份日志的时候，存起来的 binlog 里面就没有这条语句。</li><li>然后你会发现，如果需要用这个 binlog 来恢复临时库的话，由于这个语句的 binlog 丢失，这个临时库就会少了这一次更新，恢复出来的这一行 c 的值就是 0，与原库的值不同。</li></ul></li><li><strong>先写 binlog 后写 redo log</strong>。如果在 binlog 写完之后 crash，由于 redo log 还没写，崩溃恢复以后这个事务无效，所以这一行 c 的值是 0。但是 binlog 里面已经记录了“把 c 从 0 改成 1”这个日志。所以，在之后用 binlog 来恢复的时候就多了一个事务出来，恢复出来的这一行 c 的值就是 1，与原库的值不同。</li></ol><p>可以看到，如果不使用“两阶段提交”，那么数据库的状态就有可能和用它的日志恢复出来的库的状态不一致。</p><h3 id="【中等】什么是-wal" tabindex="-1"><a class="header-anchor" href="#【中等】什么是-wal" aria-hidden="true">#</a> 【中等】什么是 WAL？</h3><p>WAL（Write-Ahead Logging）是一种数据库事务日志管理技术，确保在修改数据之前先将修改记录写入日志。它的关键点就是 <strong>先写日志，再写磁盘</strong>。</p><p>WAL 是一种通用技术，被广泛应用于各种数据库，但实现各有不同。在 InnoDB 中，redo log 就是 WAL 的实现。</p><p>大致流程为：</p><ul><li>事务开始时，修改记录到 redo log 缓冲区。</li><li>redo log 缓冲区的数据周期性刷新到磁盘上的 redo log 文件。</li><li>事务提交时，确保 redo log 已写入磁盘，然后将数据页的修改写入数据文件。</li><li>系统崩溃时，通过 redo log 重新应用未完成的事务，恢复数据库到一致状态。</li></ul><h3 id="【中等】什么是-log-buffer" tabindex="-1"><a class="header-anchor" href="#【中等】什么是-log-buffer" aria-hidden="true">#</a> 【中等】什么是 Log Buffer？</h3><p><strong>Log Buffer</strong> 用于缓冲 redo log 的写入，减少频繁刷盘 fsync 的开销，将多次写入优化为一次批量写入。</p><p>redo log 是 InnoDB 的重做日志，用于崩溃恢复，确保数据正确性。redo log 采用 WAL 机制：先写日志，再写磁盘数据，将随机写入转换为顺序写入。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202311070641668.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>Log Buffer 的刷盘时机</strong></p><ul><li><strong>事务提交时</strong>：事务产生的多条 redo log 会先缓存在 Log Buffer，提交时一次性写入文件（受配置参数控制）。</li><li><strong>容量触发</strong>：当 Log Buffer 超过总容量的一半（默认 16MB）时自动刷盘。</li><li><strong>后台线程</strong>：每隔 1 秒定时刷盘。</li></ul><p><strong>配置参数<code>innodb_flush_log_at_trx_commit</code></strong></p><ul><li><strong>0</strong>：事务提交不刷盘，依赖后台线程每秒刷盘。性能最佳，但可能丢失 1 秒数据。</li><li><strong>1</strong>（默认）：事务提交时同步刷盘（写 OS cache 并调用 fsync）。数据最安全，性能最差。</li><li><strong>2</strong>：事务提交时仅写 OS cache，后台线程每秒调用 fsync。性能折中，服务器宕机可能丢失 1 秒数据。</li></ul><h2 id="mysql-复制" tabindex="-1"><a class="header-anchor" href="#mysql-复制" aria-hidden="true">#</a> MySQL 复制</h2><h3 id="【中等】mysql-如何实现主从同步" tabindex="-1"><a class="header-anchor" href="#【中等】mysql-如何实现主从同步" aria-hidden="true">#</a> 【中等】MySQL 如何实现主从同步？</h3><p>复制解决的基本问题是让一台服务器的数据与其他服务器保持同步。一台主库的数据可以同步到多台从库上，从库本身也可以被配置成另外一台服务器的主库。主库和从库之间可以有多种不同的组合方式。</p><p>MySQL 复制采用主从同步，基于 <strong>binlog（二进制日志）</strong> 实现。其流程大致为：</p><ul><li>主库记录 <strong>DML/DDL</strong> 操作到 binlog。</li><li>从库获取 binlog 并重放，保持数据同步。</li></ul><p>MySQL 支持三种复制方式：同步、异步、半同步。下面是三种方式的对比：</p><table><thead><tr><th><strong>模式</strong></th><th><strong>机制</strong></th><th><strong>优点</strong></th><th><strong>缺点</strong></th></tr></thead><tbody><tr><td><strong>异步复制</strong>（默认）</td><td>主库不等待从库响应</td><td>高性能</td><td>数据一致性弱（可能丢失）</td></tr><tr><td><strong>同步复制</strong></td><td>主库等待所有从库确认</td><td>强一致性</td><td>性能差，延迟高</td></tr><tr><td><strong>半同步复制</strong></td><td>主库等待至少一个从库确认</td><td>平衡性能与一致性</td><td>比异步略慢</td></tr></tbody></table><h4 id="异步复制" tabindex="-1"><a class="header-anchor" href="#异步复制" aria-hidden="true">#</a> 异步复制</h4><p>MySQL 异步复制可以分为三个步骤，分别由三个线程完成：</p><ul><li><strong>binlog dump 线程</strong> - 主库接收事务请求，更新数据，并即时响应客户端（不等待从库）。主库上有一个特殊的 binlog dump 线程，负责将主服务器上的数据更改写入 binlog 中。</li><li><strong>I/O 线程</strong> - 从库上有一个 I/O 线程，负责从主库上读取 binlog，并写入从库的中继日志（relay log）中。</li><li><strong>SQL 线程</strong> - 从库上有一个 SQL 线程，负责重放中继日志（relay log），更新从库数据。</li></ul><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/database/mysql/master-slave.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>需要注意的是，<strong>采用异步复制有丢失数据的风险</strong>，主库崩溃时，未同步的 binlog 可能丢失（<strong>弱一致性</strong>）。</p><h4 id="同步复制" tabindex="-1"><a class="header-anchor" href="#同步复制" aria-hidden="true">#</a> 同步复制</h4><p>主库必须等待<strong>所有从库</strong>完成 binlog 同步后才响应客户端。</p><p><strong>特点</strong>：</p><ul><li>数据强一致性（所有节点完全同步）</li><li>性能极差（延迟高，吞吐量低）</li><li>生产环境基本不使用</li></ul><h4 id="半同步复制" tabindex="-1"><a class="header-anchor" href="#半同步复制" aria-hidden="true">#</a> 半同步复制</h4><p>MySQL 5.7 引入了半同步复制：主库只需等待<strong>至少 N 个从库</strong>（可配置）确认即返回。</p><p><strong>特点</strong>：</p><ul><li><strong>性能与可靠性的平衡</strong>（比全同步快，比异步安全）。</li><li>仅当主库和所有已确认从库<strong>同时崩溃</strong>时可能丢数据。</li></ul><h3 id="【中等】如何处理-mysql-主从同步延迟" tabindex="-1"><a class="header-anchor" href="#【中等】如何处理-mysql-主从同步延迟" aria-hidden="true">#</a> 【中等】如何处理 MySQL 主从同步延迟？</h3><p><strong>主从延迟的常见解决方案</strong></p><ul><li><strong>二次查询</strong>（兜底策略）：从库查不到时，再查主库。缺点是：恶意查询可能导致主库压力增大。</li><li><strong>强制写后读走主库</strong>：写入后立即读的操作绑定走主库。缺点是：代码耦合，灵活性差。</li><li><strong>关键业务读写主库，非关键业务读写分离</strong></li><li><strong>使用缓存</strong>：主库写入后同步缓存，查询优先查缓存。缺点是：引入缓存后，新增了一致性问题。</li><li><strong>提升从库配置</strong>：优化从库硬件（CPU、内存、磁盘等），提高同步效率。</li></ul><p><strong>MySQL 主从延迟的常见原因及优化方案</strong></p><table><thead><tr><th style="text-align:left;"><strong>原因</strong></th><th style="text-align:left;"><strong>优化方案</strong></th></tr></thead><tbody><tr><td style="text-align:left;">从库单线程复制</td><td style="text-align:left;">启用 <strong>并行复制</strong>（多线程同步）。</td></tr><tr><td style="text-align:left;">网络延迟</td><td style="text-align:left;">优化网络，缩短主从物理距离。</td></tr><tr><td style="text-align:left;">从库性能不足</td><td style="text-align:left;">升级硬件（CPU、内存、存储）。</td></tr><tr><td style="text-align:left;">长事务</td><td style="text-align:left;">减少主库长事务，优化 SQL。</td></tr><tr><td style="text-align:left;">从库数量过多</td><td style="text-align:left;">合理控制从库数量，避免主库同步压力过大。</td></tr><tr><td style="text-align:left;">从库查询负载高</td><td style="text-align:left;">增加从库实例，优化慢查询。</td></tr></tbody></table><p><strong>小结</strong></p><ul><li>主从延迟 <strong>无法完全避免</strong>，只能优化降低延迟时间。</li><li>业务层面应结合 <strong>缓存、读写分离策略、关键业务走主库</strong> 等方式综合解决。</li><li>技术层面可优化 <strong>并行复制、网络、硬件</strong> 等。</li></ul><h2 id="mysql-读写分离-分库分表" tabindex="-1"><a class="header-anchor" href="#mysql-读写分离-分库分表" aria-hidden="true">#</a> MySQL 读写分离+分库分表</h2><h3 id="【中等】如何实现-mysql-读写分离" tabindex="-1"><a class="header-anchor" href="#【中等】如何实现-mysql-读写分离" aria-hidden="true">#</a> 【中等】如何实现 MySQL 读写分离？</h3><p><strong>读写分离的基本原理是：主服务器用来处理写操作以及实时性要求比较高的读操作，而从服务器用来处理读操作</strong>。</p><blockquote><p>为何要读写分离？</p></blockquote><ul><li><strong>有效减少锁竞争</strong> - 主服务器只负责写，从服务器只负责读，能够有效的避免由数据更新导致的行锁竞争，使得整个系统的查询性能得到极大的改善。</li><li><strong>提高查询吞吐量</strong> - 通过一主多从的配置方式，可以将查询请求均匀的分散到多个数据副本，能够进一步的提升系统的处理能力。</li><li><strong>提升数据库可用性</strong> - 使用多主多从的方式，不但能够提升系统的吞吐量，还能够提升数据库的可用性，可以达到在任何一个数据库宕机，甚至磁盘物理损坏的情况下仍然不影响系统的正常运行。</li></ul><p>读写分离的实现是根据 SQL 语义分析，将读操作和写操作分别路由至主库与从库。</p><p>读写分离有两种实现方式：代码封装、中间件。以下是两种方案的对比：</p><table><thead><tr><th style="text-align:left;"><strong>方案</strong></th><th style="text-align:left;"><strong>实现方式</strong></th><th style="text-align:left;"><strong>优点</strong></th><th style="text-align:left;"><strong>缺点</strong></th></tr></thead><tbody><tr><td style="text-align:left;"><strong>代码封装</strong></td><td style="text-align:left;">业务层通过代理类路由读写请求（读走从库，写走主库）。</td><td style="text-align:left;">简单灵活，可定制化 - 适合业务特定需求</td><td style="text-align:left;">主从切换需修改配置并重启 - 多语言需重复开发</td></tr><tr><td style="text-align:left;"><strong>中间件</strong></td><td style="text-align:left;">独立代理服务（如 MySQL-Proxy、ShardingSphere），客户端无感知。</td><td style="text-align:left;">屏蔽多语言差异，统一管理数据源</td><td style="text-align:left;">有额外维护成本，可能成为性能瓶颈</td></tr></tbody></table><blockquote><p>结论：<strong>代码封装</strong>适合简单架构，但扩展性差；<strong>中间件</strong>适合复杂架构，但需维护。</p></blockquote><p><strong>常见的读写分离中间件</strong></p><ul><li><strong>MySQL-Proxy</strong>（官方）</li><li><strong>Atlas</strong>（360）</li><li><strong>ShardingSphere</strong>（Apache）</li><li><strong>Mycat</strong></li></ul><h3 id="【中等】什么是分库分表-为何要分库分表" tabindex="-1"><a class="header-anchor" href="#【中等】什么是分库分表-为何要分库分表" aria-hidden="true">#</a> 【中等】什么是分库分表？为何要分库分表？</h3><blockquote><p>什么是分库分表？</p></blockquote><p><strong>分库分表</strong>是一种数据库水平拆分方案，用于解决单机数据库的<strong>存储瓶颈</strong>和<strong>性能瓶颈</strong>问题。</p><ul><li><strong>分库</strong>：将数据分散到不同的数据库实例（如 <code>DB1</code>、<code>DB2</code>）。</li><li><strong>分表</strong>：将数据分散到同一数据库的不同表（如 <code>order_1</code>、<code>order_2</code>）。</li></ul><blockquote><p>为何要分库分表？</p></blockquote><p>分库分表主要基于以下理由：</p><ul><li><strong>并发连接</strong> - 一个健康的单库最好保持在每秒 1000 个并发左右，不要太大。</li><li><strong>磁盘容量</strong> - 磁盘容量占满，会导致服务器不可用。</li><li><strong>SQL 性能</strong> - 单表数据量过大，会导致 SQL 执行效率低下。一般，单表超过 1000 万条数据，就可以考虑分表了。</li></ul><table><thead><tr><th>#</th><th>分库分表前</th><th>分库分表后</th></tr></thead><tbody><tr><td>并发支撑情况</td><td>MySQL 单机部署，扛不住高并发</td><td>MySQL 从单机到多机，能承受的并发增加了多倍</td></tr><tr><td>磁盘使用情况</td><td>MySQL 单机磁盘容量几乎撑满</td><td>拆分为多个库，数据库服务器磁盘使用率大大降低</td></tr><tr><td>SQL 执行性能</td><td>单表数据量太大，SQL 越跑越慢</td><td>单表数据量减少，SQL 执行效率明显提升</td></tr></tbody></table><h3 id="【中等】分库分表有哪些策略" tabindex="-1"><a class="header-anchor" href="#【中等】分库分表有哪些策略" aria-hidden="true">#</a> 【中等】分库分表有哪些策略？</h3><p>分库分表策略主要有两种：</p><ul><li>根据数值范围划分</li><li>根据 Hash 划分</li><li>路由表</li></ul><h4 id="数值范围路由" tabindex="-1"><a class="header-anchor" href="#数值范围路由" aria-hidden="true">#</a> 数值范围路由</h4><p>数值范围路由，就是根据 ID、时间范围 这类具有排序性的字段来进行划分。例如：用户 Id 为 1-9999 的记录分到第一个库，10000-20000 的分到第二个库，以此类推。</p><p>按这种策略划分出来的数据，具有数据连续性。</p><ul><li><strong>优点</strong>：数据迁移很简单。</li><li><strong>缺点</strong>：容易产生热点问题，大量的流量都打在最新的数据上了。</li></ul><h4 id="hash-路由" tabindex="-1"><a class="header-anchor" href="#hash-路由" aria-hidden="true">#</a> Hash 路由</h4><p>典型的 Hash 路由，如根据数值取模，当需要扩容时，一般以 2 的幂次方进行扩容（这样，扩容时迁移的数据量会小一些）。例如：用户 Id mod n，余数为 0 的记录放到第一个库，余数为 1 的放到第二个库，以此类推。</p><p>一般采用 <strong>预分区</strong> 的方式，提前根据 <strong>数据量</strong> 规划好 <strong>分区数</strong>，比如划分为 <code>512</code> 或 <code>1024</code> 张表，保证可支撑未来一段时间的 <strong>数据容量</strong>，再根据 <strong>负载情况</strong> 将 <strong>表</strong> 迁移到其他 <strong>数据库</strong> 中。扩容时通常采用 <strong>翻倍扩容</strong>，避免 <strong>数据映射</strong> 全部被 <strong>打乱</strong>，导致 <strong>全量迁移</strong> 的情况。</p><ul><li><strong>优点</strong>：数据离散分布，不存在热点问题。</li><li><strong>缺点</strong>：数据迁移、扩容麻烦（之前的数据需要重新计算 hash 值重新分配到不同的库或表）。当节点数量变化时，如<strong>扩容</strong>或<strong>收缩</strong>节点，数据节点<strong>映射关系</strong>需要重新计算，会导致数据的 <strong>重新迁移</strong>。</li></ul><h4 id="路由表" tabindex="-1"><a class="header-anchor" href="#路由表" aria-hidden="true">#</a> 路由表</h4><p>这种策略，就是用一张独立的表记录路由信息。</p><ul><li><strong>优点</strong>：简单、灵活，尤其是在扩容、迁移时，只需要迁移指定的数据，然后修改路由表即可。</li><li><strong>缺点</strong>：每次查询，必须先查路由表，增加了 IO 开销。并且，如果路由表本身太大，也会面临性能瓶颈，如果想对路由表再做分库分表，将出现死循环式的路由算法选择问题。</li></ul><h3 id="【困难】分库分表存在哪些问题" tabindex="-1"><a class="header-anchor" href="#【困难】分库分表存在哪些问题" aria-hidden="true">#</a> 【困难】分库分表存在哪些问题？</h3><p>分库分表主要存在以下问题：</p><ul><li><strong>分布式 ID 问题</strong></li><li><strong>分布式事务问题</strong></li><li><strong>跨节点 Join 和聚合</strong></li><li><strong>跨分片的排序分页</strong></li></ul><h4 id="分布式-id-问题" tabindex="-1"><a class="header-anchor" href="#分布式-id-问题" aria-hidden="true">#</a> 分布式 ID 问题</h4><p>一旦数据库被切分到多个物理结点上，我们将不能再依赖数据库自身的主键生成机制。一方面，某个分区数据库自生成的 ID 无法保证在全局上是唯一的；另一方面，应用程序在插入数据之前需要先获得 ID，以便进行 SQL 路由。</p>',137),J={href:"https://dunwu.github.io/waterdrop/pages/1050baf5/",target:"_blank",rel:"noopener noreferrer"},H=n("h4",{id:"分布式事务问题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#分布式事务问题","aria-hidden":"true"},"#"),s(" 分布式事务问题")],-1),Y=n("p",null,"跨库事务也是分布式的数据库集群要面对的棘手事情。 合理采用分表，可以在降低单表数据量的情况下，尽量使用本地事务，善于使用同库不同表可有效避免分布式事务带来的麻烦。在不能避免跨库事务的场景，有些业务仍然需要保持事务的一致性。 而基于 XA 的分布式事务由于在并发度高的场景中性能无法满足需要，并未被互联网巨头大规模使用，他们大多采用最终一致性的柔性事务代替强一致事务。",-1),j={href:"https://dunwu.github.io/waterdrop/pages/36844fb1/",target:"_blank",rel:"noopener noreferrer"},z=o(`<h4 id="跨节点-join-和聚合" tabindex="-1"><a class="header-anchor" href="#跨节点-join-和聚合" aria-hidden="true">#</a> 跨节点 Join 和聚合</h4><p>分库分表后，无法直接跨节点 <code>join</code> 、<code>count</code>、<code>order by</code>、<code>group by</code> 以及聚合。</p><p>针对这类问题，普遍做法是<strong>二次查询</strong>。</p><ul><li><p>在第一次查询时，获取各个节点上的结果。</p></li><li><p>在程序中将这些结果进行合并、筛选。</p></li></ul><h4 id="跨分片的排序分页" tabindex="-1"><a class="header-anchor" href="#跨分片的排序分页" aria-hidden="true">#</a> 跨分片的排序分页</h4><p>一般来讲，分页时需要按照指定字段进行排序。当排序字段就是分片字段的时候，我们通过分片规则可以比较容易定位到指定的分片，而当排序字段非分片字段的时候，情况就会变得比较复杂了。为了最终结果的准确性，我们需要在不同的分片节点中将数据进行排序并返回，并将不同分片返回的结果集进行汇总和再次排序，最后再返回给用户。如下图所示：</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/202506050815256.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上面图中所描述的只是最简单的一种情况（取第一页数据），看起来对性能的影响并不大。但是，如果想取出第 10 页数据，情况又将变得复杂很多，如下图所示：</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/202506050816625.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>有些读者可能并不太理解，为什么不能像获取第一页数据那样简单处理（排序取出前 10 条再合并、排序）。其实并不难理解，因为各分片节点中的数据可能是随机的，为了排序的准确性，必须把所有分片节点的前 N 页数据都排序好后做合并，最后再进行整体的排序。很显然，这样的操作是比较消耗资源的，用户越往后翻页，系统性能将会越差。</p><p>那如何解决分库情况下的分页问题呢？有以下几种办法：</p><p>如果是在前台应用提供分页，则限定用户只能看前面 n 页，这个限制在业务上也是合理的，一般看后面的分页意义不大（如果一定要看，可以要求用户缩小范围重新查询）。</p><p>如果是后台批处理任务要求分批获取数据，则可以加大 page size，比如每次获取 5000 条记录，有效减少分页数（当然离线访问一般走备库，避免冲击主库）。</p><p>分库设计时，一般还有配套大数据平台汇总所有分库的记录，有些分页查询可以考虑走大数据平台。</p><h3 id="【困难】如何实现迁库和扩容" tabindex="-1"><a class="header-anchor" href="#【困难】如何实现迁库和扩容" aria-hidden="true">#</a> 【困难】如何实现迁库和扩容？</h3><h4 id="停机迁移-扩容-不推荐" tabindex="-1"><a class="header-anchor" href="#停机迁移-扩容-不推荐" aria-hidden="true">#</a> 停机迁移/扩容（不推荐）</h4><p>停机迁移/扩容是最暴力、最简单的迁移、扩容方案。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20200601114836.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>停机迁移/扩容流程</strong>：</p><ol><li>预估停服时间，发布停服公告；停服，不允许数据访问。</li><li>编写临时的数据导入程序，从老数据库中读取数据。</li><li>将数据写入中间件。</li><li>中间件根据分片规则，将数据分发到分库（分表）中。</li><li>应用程序修改配置，重启。</li></ol><p><strong>停机迁移/扩容方案分析</strong>：</p><ul><li><strong>优点</strong>：简单、无数据一致性问题。</li><li><strong>缺点</strong>： <ul><li>停服时间长（数据量大时可能需数小时）。</li><li>风险高，失败后难以回滚。</li></ul></li></ul><p><strong>结论</strong>：代价过高，不推荐使用。</p><h4 id="双写迁移" tabindex="-1"><a class="header-anchor" href="#双写迁移" aria-hidden="true">#</a> 双写迁移</h4><p><strong>双写迁移方案核心思想</strong>：</p><ul><li>新旧库同时写入，通过开关控制读写状态（只写旧库、只写新库、双写）。</li><li>逐步切换读请求到新库，确保数据一致性。</li></ul><p><strong>双写迁移方案关键步骤</strong>：</p><ol><li><strong>双写阶段</strong>：先写旧库，再写新库，以旧库结果为准。记录旧库成功但新库失败的日志，用于补偿。</li><li><strong>数据校验</strong>：运行对比程序，检查新旧库数据差异并修复。</li><li><strong>灰度切换读请求</strong>：逐步将读流量切至新库，观察稳定性。</li><li><strong>最终切换</strong>：读写全部切至新库，清理旧库冗余数据。</li></ol><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20200601135751.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>双写迁移流程</strong>：</p><ol><li>修改应用程序配置，将数据同时写入老数据库和中间件。这就是所谓的<strong>双写</strong>，同时写俩库，老库和新库。</li><li>编写临时程序，读取老数据库。</li><li>将数据写入中间件。如果数据不存在，直接写入；如果数据存在，比较时间戳，只允许新数据覆盖老数据。</li><li>导入数据后，有可能数据还是存在不一致，那么就对数据进行校验，比对新老库的每条数据。如果存在差异，针对差异数据，执行（3）。循环（3）、（4）步骤，直至数据完全一致。</li><li>修改应用程序配置，将数据只写入中间件。</li><li>中间件根据分片规则，将数据分发到分库（分表）中。</li></ol><p><strong>双写迁移方案分析</strong>：</p><p><strong>优点</strong>：</p><ul><li>无需停服，业务影响小。</li><li>可灰度验证，风险可控。</li></ul><p><strong>缺点</strong>：</p><ul><li>实现复杂，需处理双写一致性和补偿逻辑。</li></ul><h4 id="主从替换" tabindex="-1"><a class="header-anchor" href="#主从替换" aria-hidden="true">#</a> 主从替换</h4><p>生产环境的数据库，为了保证高可用，一般会采用主从架构。主库支持读写操作，从库支持读操作。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20200601121215.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>由于主从节点数据一致，所以将从库升级为主节点，并修改分片配置，将从节点作为分库之一，就实现了扩容。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20200601121400.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>主从替换方案流程</strong>：</p><ol><li>解除主从关系，从库升级为主库。</li><li>应用程序，修改配置，读写通过中间件。</li><li>分库分表中间，修改分片配置。将数据按照新的规则分发。</li><li>编写临时程序，清理冗余数据。比如：原来是一个单库，数据量为 400 万。从节点升级为分库之一后，每个分库都有 400 万数据，其中 200 万是冗余数据。清理完后，进行数据校验。</li><li>为每个分库添加新的从库，保证高可用。</li></ol><p><strong>主从替换方案分析</strong>：</p><ul><li><strong>无需停机</strong>，无需全量数据迁移。</li><li>利用现有从库资源，节省成本。</li></ul><h4 id="三种方案对比" tabindex="-1"><a class="header-anchor" href="#三种方案对比" aria-hidden="true">#</a> 三种方案对比</h4><table><thead><tr><th style="text-align:left;"><strong>方案</strong></th><th style="text-align:left;"><strong>适用场景</strong></th><th style="text-align:left;"><strong>优点</strong></th><th style="text-align:left;"><strong>缺点</strong></th></tr></thead><tbody><tr><td style="text-align:left;"><strong>停机迁移</strong></td><td style="text-align:left;">小规模数据，容忍停服</td><td style="text-align:left;">简单，无一致性问题</td><td style="text-align:left;">停服时间长，风险高</td></tr><tr><td style="text-align:left;"><strong>双写迁移</strong></td><td style="text-align:left;">大规模数据，要求高可用</td><td style="text-align:left;">无停服，灰度可控</td><td style="text-align:left;">复杂，需补偿机制</td></tr><tr><td style="text-align:left;"><strong>主从替换</strong></td><td style="text-align:left;">已有主从架构</td><td style="text-align:left;">无需迁移数据，快速扩容</td><td style="text-align:left;">依赖现有从库，清理冗余复杂</td></tr></tbody></table><p><strong>推荐选择</strong>：</p><ul><li><strong>优先双写迁移</strong>：适合大多数业务，平衡风险与复杂度。</li><li><strong>主从升级</strong>：适合已有主从且数据量适中的场景。</li><li><strong>避免停机迁移</strong>：除非数据量极小且可接受停服。</li></ul><h2 id="mysql-架构" tabindex="-1"><a class="header-anchor" href="#mysql-架构" aria-hidden="true">#</a> MySQL 架构</h2><h3 id="【中等】sql-查询语句的执行顺序是怎么样的" tabindex="-1"><a class="header-anchor" href="#【中等】sql-查询语句的执行顺序是怎么样的" aria-hidden="true">#</a> 【中等】SQL 查询语句的执行顺序是怎么样的？</h3><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/202506050817770.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>所有的查询语句都是从 FROM 开始执行的，在执行过程中，每个步骤都会为下一个步骤生成一个虚拟表，这个虚拟表将作为下一个执行步骤的输入。</p><p><strong>执行顺序</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token keyword">SELECT</span> <span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token keyword">DISTINCT</span><span class="token operator">&lt;</span>Select_list<span class="token operator">&gt;</span>
<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> <span class="token operator">&lt;</span>left_table<span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span>join_type<span class="token operator">&gt;</span><span class="token keyword">JOIN</span><span class="token operator">&lt;</span>right_table<span class="token operator">&gt;</span>
<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">ON</span><span class="token operator">&lt;</span>join_condition<span class="token operator">&gt;</span>
<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">WHERE</span><span class="token operator">&lt;</span>where_condition<span class="token operator">&gt;</span>
<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span><span class="token operator">&lt;</span>group_by_list<span class="token operator">&gt;</span>
<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token keyword">WITH</span> {CUBE<span class="token operator">|</span>ROLLUP}
<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token keyword">HAVING</span><span class="token operator">&lt;</span>having_condtion<span class="token operator">&gt;</span>
<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span><span class="token operator">&lt;</span>order_by_list<span class="token operator">&gt;</span>
<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">LIMIT</span><span class="token operator">&lt;</span>limit_number<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,55),V={href:"https://zhuanlan.zhihu.com/p/77847158",target:"_blank",rel:"noopener noreferrer"},X=o(`<h3 id="【困难】一条-sql-查询语句是如何执行的" tabindex="-1"><a class="header-anchor" href="#【困难】一条-sql-查询语句是如何执行的" aria-hidden="true">#</a> 【困难】一条 SQL 查询语句是如何执行的？</h3><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202410022029759.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>MySQL 整个查询执行过程，总的来说分为 6 个步骤：</p><ol><li><strong>连接器</strong> - 客户端和 MySQL 服务器建立连接；连接器负责跟客户端<strong>建立连接</strong>、<strong>获取权限</strong>、<strong>维持和管理连接</strong>。</li><li><strong>查询缓存</strong> - MySQL 服务器首先检查查询缓存，如果命中缓存，则立刻返回结果。否则进入下一阶段。MySQL 缓存弊大于利，因为失效非常频繁——任何更新都会清空查询缓存。</li><li><strong>分析器</strong> - MySQL 服务器进行 SQL 解析：<strong>语法分析</strong>、<strong>词法分析</strong>。</li><li><strong>优化器</strong> - MySQL 服务器用优化器<strong>生成对应的执行计划</strong>，<strong>根据策略选择最优索引</strong>。</li><li><strong>执行器</strong> - MySQL 服务器根据执行计划，调用存储引擎的 API 来<strong>执行查询</strong>。</li><li><strong>返回结果</strong> - MySQL 服务器将结果返回给客户端，同时缓存查询结果。</li></ol><h3 id="【困难】一条-sql-更新语句是如何执行的" tabindex="-1"><a class="header-anchor" href="#【困难】一条-sql-更新语句是如何执行的" aria-hidden="true">#</a> 【困难】一条 SQL 更新语句是如何执行的？</h3><p>更新流程和查询的流程大致相同，不同之处在于：更新流程还涉及两个重要的日志模块：</p><ul><li><strong>redo log（重做日志）</strong><ul><li>InnoDB 存储引擎独有的日志（物理日志）</li><li>采用循环写入</li></ul></li><li><strong>bin log（归档日志）</strong><ul><li>MySQL Server 层通用日志（逻辑日志）</li><li>采用追加写入</li></ul></li></ul><p>为了保证 redo log 和 bin log 的数据一致性，所以采用两阶段提交方式更新日志。</p><h3 id="【困难】mysql-如何选择执行计划" tabindex="-1"><a class="header-anchor" href="#【困难】mysql-如何选择执行计划" aria-hidden="true">#</a> 【困难】MySQL 如何选择执行计划？</h3><p>MySQL 通过优化器（Optimizer）选择执行计划，核心流程如下：</p><p><strong>执行计划生成步骤</strong></p><ol><li><strong>解析 SQL</strong>：生成语法树，检查表/列是否存在</li><li><strong>预处理阶段</strong>：展开视图、优化子查询</li><li><strong>优化器核心工作</strong>： <ul><li><strong>生成候选执行计划</strong>（全表扫描、索引扫描、JOIN 顺序等）</li><li><strong>成本估算</strong>（基于统计信息计算每个计划的 I/O、CPU 消耗）</li><li><strong>选择成本最低的计划</strong></li></ul></li></ol><p><strong>影响执行计划的关键因素</strong></p><table><thead><tr><th>因素</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><strong>统计信息</strong></td><td>表大小、索引区分度等</td><td><code>ANALYZE TABLE</code>更新统计</td></tr><tr><td><strong>索引情况</strong></td><td>可用索引及其选择性</td><td>高区分度索引优先</td></tr><tr><td><strong>查询复杂度</strong></td><td>JOIN/子查询数量</td><td>简单查询优先走索引</td></tr><tr><td><strong>系统变量</strong></td><td>优化器开关配置</td><td><code>optimizer_switch</code>参数</td></tr><tr><td><strong>HINT 指令</strong></td><td>强制干预优化器</td><td><code>/*+ INDEX(idx_name) */</code></td></tr></tbody></table><p><strong>成本估算模型</strong></p><p>优化器主要计算：</p><ul><li><strong>I/O 成本</strong>：读取数据页的代价</li><li><strong>CPU 成本</strong>：处理数据的计算代价</li><li><strong>内存成本</strong>：排序/临时表消耗</li></ul><div class="language-plaintext line-numbers-mode" data-ext="plaintext"><pre class="language-plaintext"><code>总成本 = （数据页读取数 × 单页 I/O 成本）
       + （扫描行数 × 行 CPU 处理成本）
       + （排序行数 × 排序成本）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>查看和干预执行计划</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 查看执行计划</span>
<span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> age <span class="token operator">&gt;</span> <span class="token number">20</span><span class="token punctuation">;</span>

<span class="token comment">-- 强制使用索引（慎用）</span>
<span class="token keyword">SELECT</span> <span class="token comment">/*+ INDEX(users idx_age) */</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> age <span class="token operator">&gt;</span> <span class="token number">20</span><span class="token punctuation">;</span>

<span class="token comment">-- 更新统计信息</span>
<span class="token keyword">ANALYZE</span> <span class="token keyword">TABLE</span> users<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>常见执行计划问题</strong></p><ul><li><p><strong>索引失效</strong>：函数计算、隐式类型转换</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 反例：索引失效</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> <span class="token keyword">YEAR</span><span class="token punctuation">(</span>create_time<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2023</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>错误 JOIN 顺序</strong>：解决方案：使用<code>STRAIGHT_JOIN</code>强制顺序</p></li><li><p><strong>临时表/文件排序</strong>：关注<code>EXPLAIN</code>中的<code>Using temporary</code>/<code>Using filesort</code></p></li></ul><p><strong>优化建议</strong></p><ul><li>定期<code>ANALYZE TABLE</code>更新统计信息</li><li>避免在索引列上使用函数</li><li>使用覆盖索引减少回表</li><li>监控<code>performance_schema</code>中的 SQL 执行历史</li></ul><blockquote><p><strong>注意</strong>：MySQL 8.0 引入直方图统计（<code>histogram</code>）和代价模型改进，大幅提升复杂查询的计划准确性。</p></blockquote><h3 id="【困难】order-by-是怎么工作的" tabindex="-1"><a class="header-anchor" href="#【困难】order-by-是怎么工作的" aria-hidden="true">#</a> 【困难】<code>order by</code> 是怎么工作的？</h3><p>用 explain 命令查看执行计划时，Extra 这个字段中的“Using filesort”表示的就是需要排序。</p><h4 id="全字段排序" tabindex="-1"><a class="header-anchor" href="#全字段排序" aria-hidden="true">#</a> 全字段排序</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> city<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age <span class="token keyword">from</span> t <span class="token keyword">where</span> city<span class="token operator">=</span><span class="token string">&#39;杭州&#39;</span> <span class="token keyword">order</span> <span class="token keyword">by</span> name <span class="token keyword">limit</span> <span class="token number">1000</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个语句执行流程如下所示 ：</p><p><strong>执行流程</strong>：</p><ul><li>初始化 <code>sort_buffer</code>，确定放入需要排序的字段（如 <code>name</code>、<code>city</code>、<code>age</code>）。</li><li>从索引中找到满足条件的记录，取出对应的字段值存入 <code>sort_buffer</code>。</li><li>对 <code>sort_buffer</code> 中的数据按照排序字段进行排序。</li><li>返回排序后的结果。</li></ul><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20220728090300.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>内存与磁盘排序</strong>：</p><ul><li>如果排序数据量小于 <code>sort_buffer_size</code>，排序在内存中完成。</li><li>如果数据量过大，MySQL 会使用临时文件进行外部排序（归并排序）。<strong>MySQL 将需要排序的数据分成 N 份，每一份单独排序后存在这些临时文件中。然后把这 N 个有序文件再合并成一个有序的大文件。</strong></li></ul><p><strong>优化器追踪</strong>：通过 <code>OPTIMIZER_TRACE</code> 可以查看排序过程中是否使用了临时文件（<code>number_of_tmp_files</code>）。</p><h4 id="rowid-排序" tabindex="-1"><a class="header-anchor" href="#rowid-排序" aria-hidden="true">#</a> rowid 排序</h4><ul><li><strong>执行流程</strong>： <ul><li>当单行数据过大时，MySQL 会采用 <code>rowid</code> 排序，只将排序字段（如 <code>name</code>）和主键 <code>id</code> 放入 <code>sort_buffer</code>。</li><li>排序完成后，根据 <code>id</code> 回表查询其他字段（如 <code>city</code>、<code>age</code>）。</li></ul></li><li><strong>性能影响</strong>：<code>rowid</code> 排序减少了 <code>sort_buffer</code> 的内存占用，但增加了回表操作，导致更多的磁盘 I/O。</li></ul><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20220728090919.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="全字段排序-vs-rowid-排序" tabindex="-1"><a class="header-anchor" href="#全字段排序-vs-rowid-排序" aria-hidden="true">#</a> 全字段排序 VS rowid 排序</h4><ul><li><strong>内存优先</strong>： <ul><li>如果内存足够大，MySQL 优先使用全字段排序，以减少磁盘访问。</li><li>只有在内存不足时，才会使用 <code>rowid</code> 排序。</li></ul></li><li><strong>设计思想</strong>：<strong>如果内存够，就要多利用内存，尽量减少磁盘访问。</strong></li></ul><p>并不是所有的 order by 语句，都需要排序操作的。MySQL 之所以需要生成临时表，并且在临时表上做排序操作，<strong>其原因是原来的数据都是无序的</strong>。如果查询的字段和排序字段可以通过联合索引覆盖，MySQL 可以直接利用索引的有序性，避免排序操作。</p><h3 id="【困难】如果-select-from-一个有千万级数据的表-内存会飙升么" tabindex="-1"><a class="header-anchor" href="#【困难】如果-select-from-一个有千万级数据的表-内存会飙升么" aria-hidden="true">#</a> 【困难】如果 select * from 一个有千万级数据的表，内存会飙升么？</h3><p><strong>通常不会导致 MySQL 服务器内存飙升，但如果客户端处理不当，客户端的内存可能会飙升。</strong></p><ul><li>服务端：<code>SELECT * FROM huge_table</code> 时，MySQL 的 <strong>InnoDB 存储引擎</strong> 并不会尝试将全部千万条记录一次性加载到内存中。MySQL 服务端使用固定大小的 Buffer Pool 按需读取数据页，并流式地将结果发送给客户端。</li><li>客户端：如果客户端尝试一次性拉取全部数据，就会出现内存飙升的情况。</li></ul><p><strong>客户端最佳实践</strong></p><p>聪明的客户端会使用“流式查询”或“游标”的方式来处理大数据集。</p><ul><li><strong>服务器端游标（Server-Side Cursor）</strong>：MySQL 提供了这种方式（虽然协议上支持，但并非所有驱动都默认开启）。</li><li><strong>客户端流式读取（Client-Side Streaming）</strong>：即使没有真正的服务器端游标，客户端也可以以流的方式处理结果集。它从网络连接中读取一批数据（例如 1000 行），处理完这批数据后，再读取下一批，而不是一次性读取所有。 <ul><li><strong>Python (PyMySQL/MySQLdb)</strong>: 创建游标时使用 <code>SSCursor</code>（<code>cursorclass = pymysql.cursors.SSCursor</code>）。</li><li><strong>Java (JDBC)</strong>: 在创建 <code>Statement</code> 对象时设置 <code>fetchSize</code> 为 <code>Integer.MIN_VALUE</code>（或根据驱动文档设置）来启用流式读取。</li></ul></li></ul><p>使用流式处理后，客户端的内存占用将保持在一个<strong>很小且恒定</strong>的水平（只相当于单批处理数据的大小），而不会随着结果集的大小而增长。</p><h2 id="mysql-优化" tabindex="-1"><a class="header-anchor" href="#mysql-优化" aria-hidden="true">#</a> MySQL 优化</h2><h3 id="【简单】如何发现慢-sql" tabindex="-1"><a class="header-anchor" href="#【简单】如何发现慢-sql" aria-hidden="true">#</a> 【简单】如何发现慢 SQL？</h3><p>慢 SQL 的监控主要通过两个途径：</p><ul><li><strong>慢查询日志</strong>：开启 MySQL 的慢查询日志，再通过一些工具比如 mysqldumpslow 去分析对应的慢查询日志，当然现在一般的云厂商都提供了可视化的平台。</li><li><strong>服务监控</strong>：可以在业务的基建中加入对慢 SQL 的监控，常见的方案有字节码插桩、连接池扩展、ORM 框架过程，对服务运行中的慢 SQL 进行监控和告警。</li></ul><h3 id="【简单】什么是执行计划" tabindex="-1"><a class="header-anchor" href="#【简单】什么是执行计划" aria-hidden="true">#</a> 【简单】什么是执行计划？</h3><p><strong>“执行计划”是对 SQL 查询语句在数据库中执行过程的描述</strong>。 如果要分析某条 SQL 的性能问题，通常需要先查看 SQL 的执行计划，排查每一步 SQL 执行是否存在问题。</p><p>很多数据库都支持执行计划，MySQL 也不例外。在 MySQL 中，用户可以通过 <code>EXPLAIN</code> 命令查看优化器针对指定 SQL 生成的逻辑执行计划。</p><p>【示例】MySQL 执行计划示例</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> user_info <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">2</span>
<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">1.</span> <span class="token keyword">row</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
           id: <span class="token number">1</span>
  select_type: <span class="token keyword">SIMPLE</span>
        <span class="token keyword">table</span>: user_info
   partitions: <span class="token boolean">NULL</span>
         <span class="token keyword">type</span>: const
possible_keys: <span class="token keyword">PRIMARY</span>
          <span class="token keyword">key</span>: <span class="token keyword">PRIMARY</span>
      key_len: <span class="token number">8</span>
          ref: const
         <span class="token keyword">rows</span>: <span class="token number">1</span>
     filtered: <span class="token number">100.00</span>
        Extra: <span class="token boolean">NULL</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行计划返回结果参数说明：</p><ul><li><code>id</code> - SELECT 查询的标识符。每个 <code>SELECT</code> 都会自动分配一个唯一的标识符。</li><li><code>select_type</code> - <code>SELECT</code> 查询的类型。 <ul><li><code>SIMPLE</code> - 表示此查询不包含 <code>UNION</code> 查询或子查询。</li><li><code>PRIMARY</code> - 表示此查询是最外层的查询。</li><li><code>UNION</code> - 表示此查询是 <code>UNION</code> 的第二或随后的查询。</li><li><code>DEPENDENT UNION</code> - <code>UNION</code> 中的第二个或后面的查询语句，取决于外面的查询。</li><li><code>UNION RESULT</code> - <code>UNION</code> 的结果。</li><li><code>SUBQUERY</code> - 子查询中的第一个 <code>SELECT</code>。</li><li><code>DEPENDENT SUBQUERY</code> - 子查询中的第一个 <code>SELECT</code>, 取决于外面的查询。即子查询依赖于外层查询的结果。</li></ul></li><li><code>table</code> - 查询的是哪个表，如果给表起别名了，则显示别名。</li><li><code>partitions</code> - 匹配的分区。</li><li><code>type</code> - 表示从表中查询到行所执行的方式，查询方式是 SQL 优化中一个很重要的指标。执行效率由高到低依次为： <ul><li><code>system</code>/<code>const</code> - 表中只有一行数据匹配。此时根据索引查询一次就能找到对应的数据。如果是 B+ 树索引，我们知道此时索引构造成了多个层级的树，当查询的索引在树的底层时，查询效率就越低。<code>const</code> 表示此时索引在第一层，只需访问一层便能得到数据。</li><li><code>eq_ref</code> - 使用唯一索引扫描。常见于多表连接中使用主键和唯一索引作为关联条件。</li><li><code>ref</code> - 非唯一索引扫描。还可见于唯一索引最左原则匹配扫描。</li><li><code>range</code> - 索引范围扫描。比如 <code>&lt;</code>，<code>&gt;</code>，<code>between</code> 等操作。</li><li><code>index</code> - 索引全表扫描。此时遍历整个索引树。</li><li><code>ALL</code> - 表示全表扫描。需要遍历全表来找到对应的行。</li></ul></li><li><code>possible_keys</code> - 此次查询中可能选用的索引。</li><li><code>key</code> - 此次查询中实际使用的索引。如果这一项为 <code>NULL</code>，说明没有使用索引。</li><li><code>ref</code> - 哪个字段或常数与 key 一起被使用。</li><li><code>rows</code> - 显示此查询一共扫描了多少行，这个是一个估计值。</li><li><code>filtered</code> - 表示此查询条件所过滤的数据的百分比。</li><li><code>extra</code> - 额外的信息。 <ul><li><code>Using index</code> - 使用覆盖索引，无需回表。</li><li><code>Using where</code> - 服务器在存储引擎检索后过滤。</li><li><code>Using temporary</code> - 使用临时表。MySQL 在对查询结果排序时使用临时表，常见于排序 <code>ORDER BY</code> 和分组查询 <code>GROUP BY</code>。效率低，要避免这种问题的出现。</li><li><code>Using filesort</code> - 额外排序。无法利用索引完成排序时，就不得不将查询匹配数据进行排序，甚至可能会通过文件进行排序，效率很低。</li><li><code>Using join buffer</code> - 使用连接缓冲</li></ul></li></ul>`,60),G={href:"https://segmentfault.com/a/1190000008131735",target:"_blank",rel:"noopener noreferrer"},W=o(`<h3 id="【简单】如何分析执行计划" tabindex="-1"><a class="header-anchor" href="#【简单】如何分析执行计划" aria-hidden="true">#</a> 【简单】如何分析执行计划？</h3><p><strong>执行计划关键字段</strong></p><ul><li><strong><code>type</code></strong> - 按性能从高到低排序：<code>system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; ALL</code>。目标应尽可能避免 <code>ALL</code>（全表扫描）。</li><li><strong><code>possible_keys</code></strong> - 可能使用的索引。</li><li><strong><code>key</code></strong> - 实际使用的索引。</li><li><strong><code>rows</code></strong> - 预估需要检查的行数，值越小越好。</li><li><strong><code>Extra</code></strong> - 包含重要补充信息。</li></ul><p><strong>执行计划分析步骤</strong>：</p><ol><li>查看 <code>type</code> - 确保访问类型为 <code>const</code> 、 <code>eq_ref</code> 、 <code>ref</code> 或 <code>range</code> ，避免 <code>ALL</code> 。</li><li>查看 <code>key</code> - 确认是否使用了合适的索引。若 <code>key</code> 为 <code>NULL</code> 表示未使用索引，需优化。</li><li>查看 <code>rows</code> - 扫描的行数越少越好。</li><li>查看 <code>Extra</code> - 避免 <code>Using temporary</code>（使用临时表） 和 <code>Using filesort</code> （额外排序）。</li></ol><p>对应优化：</p><ul><li>如果 <code>type</code> 为 <code>ALL</code>，考虑为 <code>WHERE</code> 条件列添加索引。</li><li>如果 <code>Extra</code> 包含 <code>Using filesort</code> ，优化 <code>ORDER BY</code> 或 <code>GROUP BY</code> 。</li><li>如果 <code>rows</code> 过大，检查索引是否有效。</li></ul><h3 id="【中等】如何优化-sql" tabindex="-1"><a class="header-anchor" href="#【中等】如何优化-sql" aria-hidden="true">#</a> 【中等】如何优化 SQL？</h3><h4 id="避免不必要的列" tabindex="-1"><a class="header-anchor" href="#避免不必要的列" aria-hidden="true">#</a> 避免不必要的列</h4><p>这个是老生常谈，但还是经常会出的情况，SQL 查询的时候，应该只查询需要的列，而不要包含额外的列，像<code>slect *</code> 这种写法应该尽量避免。</p><h4 id="分页优化" tabindex="-1"><a class="header-anchor" href="#分页优化" aria-hidden="true">#</a> 分页优化</h4><p>在数据量比较大，分页比较深的情况下，需要考虑分页的优化。</p><p>例如：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">where</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">and</span> <span class="token keyword">level</span> <span class="token operator">=</span> <span class="token number">9</span> <span class="token keyword">order</span> <span class="token keyword">by</span> id <span class="token keyword">asc</span> <span class="token keyword">limit</span> <span class="token number">190289</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>优化方案：</p><ul><li><strong>延迟关联</strong></li></ul><p>先通过 where 条件提取出主键，在将该表与原数据表关联，通过主键 id 提取数据行，而不是通过原来的二级索引提取数据行</p><p>例如：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> a<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span> a<span class="token punctuation">,</span>
 <span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">where</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">and</span> <span class="token keyword">level</span> <span class="token operator">=</span> <span class="token number">9</span> <span class="token keyword">order</span> <span class="token keyword">by</span> id <span class="token keyword">asc</span> <span class="token keyword">limit</span> <span class="token number">190289</span><span class="token punctuation">,</span><span class="token number">10</span> <span class="token punctuation">)</span> b
 <span class="token keyword">where</span> a<span class="token punctuation">.</span>id <span class="token operator">=</span> b<span class="token punctuation">.</span>id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>书签方式</strong></li></ul><p>书签方式就是找到 limit 第一个参数对应的主键值，根据这个主键值再去过滤并 limit</p><p>例如：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>  <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">where</span> id <span class="token operator">&gt;</span>
  <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">where</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">and</span> <span class="token keyword">level</span> <span class="token operator">=</span> <span class="token number">9</span> <span class="token keyword">order</span> <span class="token keyword">by</span> id <span class="token keyword">asc</span> <span class="token keyword">limit</span> <span class="token number">190</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="索引优化" tabindex="-1"><a class="header-anchor" href="#索引优化" aria-hidden="true">#</a> 索引优化</h4><p>合理地设计和使用索引，是优化慢 SQL 的利器。</p><p><strong>利用覆盖索引</strong></p><p>InnoDB 使用非主键索引查询数据时会回表，但是如果索引的叶节点中已经包含要查询的字段，那它没有必要再回表查询了，这就叫覆盖索引</p><p>例如对于如下查询：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> name <span class="token keyword">from</span> test <span class="token keyword">where</span> city<span class="token operator">=</span><span class="token string">&#39;上海&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们将被查询的字段建立到联合索引中，这样查询结果就可以直接从索引中获取</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">table</span> test <span class="token keyword">add</span> <span class="token keyword">index</span> idx_city_name <span class="token punctuation">(</span>city<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>低版本避免使用 or 查询</strong></p><p>在 MySQL 5.0 之前的版本要尽量避免使用 or 查询，可以使用 union 或者子查询来替代，因为早期的 MySQL 版本使用 or 查询可能会导致索引失效，高版本引入了索引合并，解决了这个问题。</p><p><strong>避免使用 != 或者 &lt;&gt; 操作符</strong></p><p>SQL 中，不等于操作符会导致查询引擎放弃查询索引，引起全表扫描，即使比较的字段上有索引</p><p>解决方法：通过把不等于操作符改成 or，可以使用索引，避免全表扫描</p><p>例如，把<code>column&lt;&gt;’aaa’，改成 column&gt;’aaa’ or column&lt;’aaa’</code>，就可以使用索引了</p><p><strong>适当使用前缀索引</strong></p><p>适当地使用前缀所云，可以降低索引的空间占用，提高索引的查询效率。</p><p>比如，邮箱的后缀都是固定的“<code>@xxx.com</code>”，那么类似这种后面几位为固定值的字段就非常适合定义为前缀索引</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">table</span> test <span class="token keyword">add</span> <span class="token keyword">index</span> index2<span class="token punctuation">(</span>email<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>PS: 需要注意的是，前缀索引也存在缺点，MySQL 无法利用前缀索引做 order by 和 group by 操作，也无法作为覆盖索引</p><p><strong>避免列上函数运算</strong></p><p>要避免在列字段上进行算术运算或其他表达式运算，否则可能会导致存储引擎无法正确使用索引，从而影响了查询的效率</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test <span class="token keyword">where</span> id <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test <span class="token keyword">where</span> <span class="token keyword">month</span><span class="token punctuation">(</span>updateTime<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>正确使用联合索引</strong></p><p>使用联合索引的时候，注意最左匹配原则。</p><h4 id="join-优化" tabindex="-1"><a class="header-anchor" href="#join-优化" aria-hidden="true">#</a> JOIN 优化</h4><p><strong>优化子查询</strong></p><p>尽量使用 Join 语句来替代子查询，因为子查询是嵌套查询，而嵌套查询会新创建一张临时表，而临时表的创建与销毁会占用一定的系统资源以及花费一定的时间，同时对于返回结果集比较大的子查询，其对查询性能的影响更大</p><p><strong>小表驱动大表</strong></p><p>关联查询的时候要拿小表去驱动大表，因为关联的时候，MySQL 内部会遍历驱动表，再去连接被驱动表。</p><p>比如 left join，左表就是驱动表，A 表小于 B 表，建立连接的次数就少，查询速度就被加快了。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code> <span class="token keyword">select</span> name <span class="token keyword">from</span> A <span class="token keyword">left</span> <span class="token keyword">join</span> B <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>适当增加冗余字段</strong></p><p>增加冗余字段可以减少大量的连表查询，因为多张表的连表查询性能很低，所有可以适当的增加冗余字段，以减少多张表的关联查询，这是以空间换时间的优化策略</p><p><strong>避免使用 JOIN 关联太多的表</strong></p><p>《阿里巴巴 Java 开发手册》规定不要 join 超过三张表，第一 join 太多降低查询的速度，第二 join 的 buffer 会占用更多的内存。</p><p>如果不可避免要 join 多张表，可以考虑使用数据异构的方式异构到 ES 中查询。</p><h4 id="排序优化" tabindex="-1"><a class="header-anchor" href="#排序优化" aria-hidden="true">#</a> 排序优化</h4><p><strong>利用索引扫描做排序</strong></p><p>MySQL 有两种方式生成有序结果：其一是对结果集进行排序的操作，其二是按照索引顺序扫描得出的结果自然是有序的</p><p>但是如果索引不能覆盖查询所需列，就不得不每扫描一条记录回表查询一次，这个读操作是随机 IO，通常会比顺序全表扫描还慢</p><p>因此，在设计索引时，尽可能使用同一个索引既满足排序又用于查找行</p><p>例如：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">--建立索引（date,staff_id,customer_id）</span>
<span class="token keyword">select</span> staff_id<span class="token punctuation">,</span> customer_id <span class="token keyword">from</span> test <span class="token keyword">where</span> <span class="token keyword">date</span> <span class="token operator">=</span> <span class="token string">&#39;2010-01-01&#39;</span> <span class="token keyword">order</span> <span class="token keyword">by</span> staff_id<span class="token punctuation">,</span>customer_id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>只有当索引的列顺序和 ORDER BY 子句的顺序完全一致，并且所有列的排序方向都一样时，才能够使用索引来对结果做排序</p><p><strong>条件下推</strong></p><p>MySQL 处理 union 的策略是先创建临时表，然后将各个查询结果填充到临时表中最后再来做查询，很多优化策略在 union 查询中都会失效，因为它无法利用索引</p><p>最好手工将 where、limit 等子句下推到 union 的各个子查询中，以便优化器可以充分利用这些条件进行优化</p><p>此外，除非确实需要服务器去重，一定要使用 union all，如果不加 all 关键字，MySQL 会给临时表加上 distinct 选项，这会导致对整个临时表做唯一性检查，代价很高。</p><h3 id="【中等】mysql-中如何解决深分页问题" tabindex="-1"><a class="header-anchor" href="#【中等】mysql-中如何解决深分页问题" aria-hidden="true">#</a> 【中等】MySQL 中如何解决深分页问题？</h3><p>深分页 (Deep Pagination) 是指当数据量很大时，查询靠后的分页数据（比如第 1000 页）性能急剧下降的问题。</p><p>解决方案有以下几种：</p><p>（1）<strong>使用索引覆盖+延迟关联</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 原始深分页查询（性能差）</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> large_table <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> id <span class="token keyword">LIMIT</span> <span class="token number">100000</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token comment">-- 优化后的查询</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> large_table
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token punctuation">(</span>
    <span class="token keyword">SELECT</span> id <span class="token keyword">FROM</span> large_table
    <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> id
    <span class="token keyword">LIMIT</span> <span class="token number">100000</span><span class="token punctuation">,</span> <span class="token number">10</span>
<span class="token punctuation">)</span> <span class="token keyword">AS</span> tmp <span class="token keyword">USING</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）<strong>使用游标分页</strong>（记录上一页最后一条记录）</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 第一页</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> large_table <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> id <span class="token keyword">LIMIT</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token comment">-- 获取上一页最后一条记录的 id=12345</span>
<span class="token comment">-- 下一页查询</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> large_table
<span class="token keyword">WHERE</span> id <span class="token operator">&gt;</span> <span class="token number">12345</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> id
<span class="token keyword">LIMIT</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（3）<strong>使用子查询优化</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> large_table
<span class="token keyword">WHERE</span> id <span class="token operator">&gt;=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> id <span class="token keyword">FROM</span> large_table <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> id <span class="token keyword">LIMIT</span> <span class="token number">100000</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> id
<span class="token keyword">LIMIT</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="【中等】哪种-count-性能最好" tabindex="-1"><a class="header-anchor" href="#【中等】哪种-count-性能最好" aria-hidden="true">#</a> 【中等】哪种 COUNT 性能最好？</h3><p>先说结论：<strong>按照效率排序的话，<code>COUNT（字段）</code> &lt; <code>COUNT（主键 id)</code> &lt; <code>COUNT(1)</code> ≈ <code>COUNT(*)</code></strong>。<strong>推荐采用 <code>COUNT(*)</code></strong> 。</p><p><strong>对于 <code>COUNT（主键 id)</code> 来说</strong>，InnoDB 引擎会遍历整张表，把每一行的 id 值都取出来，返回给 server 层。server 层拿到 id 后，判断是不可能为空的，就按行累加。</p><p><strong>对于 <code>COUNT(1)</code> 来说</strong>，InnoDB 引擎遍历整张表，但不取值。server 层对于返回的每一行，放一个数字“1”进去，判断是不可能为空的，按行累加。</p><p>单看这两个用法的差别的话，你能对比出来，<code>COUNT(1)</code> 执行得要比 <code>COUNT（主键 id)</code> 快。因为从引擎返回 id 会涉及到解析数据行，以及拷贝字段值的操作。</p><p><strong>对于 <code>COUNT（字段）</code> 来说</strong>：</p><ul><li>如果这个“字段”是定义为 <code>not null</code> 的话，一行行地从记录里面读出这个字段，判断不能为 <code>null</code>，按行累加；</li><li>如果这个“字段”定义允许为 <code>null</code>，那么执行的时候，判断到有可能是 <code>null</code>，还要把值取出来再判断一下，不是 <code>null</code> 才累加。</li></ul><p><strong>但是 <code>COUNT(*)</code> 是例外</strong>，并不会把全部字段取出来，而是专门做了优化，不取值。<code>COUNT(*)</code> 肯定不是 <code>null</code>，按行累加。</p><blockquote><p>InnoDB 和 MyISAM 的 <code>count(*)</code> 实现方式有什么区别？</p></blockquote><p>不同的 MySQL 引擎中，<code>COUNT(*)</code> 有不同的实现方式：</p><ul><li>MyISAM 引擎把一个表的总行数存在了磁盘上，因此执行 <code>COUNT(*)</code> 的时候会直接返回这个数，效率很高；</li><li>而 InnoDB 引擎就麻烦了，它执行 <code>COUNT(*)</code> 的时候，需要把数据一行一行地从引擎里面读出来，然后累积计数。</li></ul><blockquote><p>为什么 InnoDB 不跟 MyISAM 一样，也维护一个计数器？</p></blockquote><p>因为即使是在同一个时刻的多个查询，由于多版本并发控制（MVCC）的原因，InnoDB 表“应该返回多少行”也是不确定的。</p><p>InnoDB 是索引组织表，主键索引树的叶子节点是数据，而普通索引树的叶子节点是主键值。所以，普通索引树比主键索引树小很多。对于 <code>COUNT(*)</code> 这样的操作，遍历哪个索引树得到的结果逻辑上都是一样的。因此，MySQL 优化器会找到最小的那棵树来遍历。</p><ul><li>MyISAM 表虽然 <code>COUNT(*)</code> 很快，但是不支持事务；</li><li><code>show table status</code> 命令虽然返回很快，但是不准确；</li><li>InnoDB 表直接 <code>COUNT(*)</code> 会遍历全表，虽然结果准确，但会导致性能问题。</li></ul><blockquote><p>如何优化查询计数？</p></blockquote><ul><li>可以使用 Redis 保存计数，但存在数据丢失和逻辑不一致的问题。</li><li>可以使用数据库其他表保存计数，利用事务的原子性和隔离性，可以避免数据丢失和逻辑不一致的问题。</li></ul><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,98),K={href:"https://book.douban.com/subject/23008813/",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://time.geekbang.org/column/intro/139",target:"_blank",rel:"noopener noreferrer"},$={href:"https://xiaolincoding.com/mysql/",target:"_blank",rel:"noopener noreferrer"};function nn(sn,an){const e=p("ExternalLinkIcon"),i=p("Tabs");return d(),u("div",null,[k,n("blockquote",null,[h,n("ul",null,[n("li",null,[n("a",m,[s("《SQL 必知必会》"),a(e)]),s(" - SQL 的基本概念和语法【入门】")]),n("li",null,[n("a",b,[s("《MySQL 必知必会》"),a(e)]),s(" - MySQL 的基本概念和语法【入门】")])])]),y,a(i,{id:"247",data:[{id:"INSERT IGNORE INTO"},{id:"REPLACE INTO"},{id:"INSERT ... ON DUPLICATE KEY UPDATE"}],"tab-id":"避免重复插入数据"},{title0:t(({value:l,isActive:r})=>[s("INSERT IGNORE INTO")]),title1:t(({value:l,isActive:r})=>[s("REPLACE INTO")]),title2:t(({value:l,isActive:r})=>[s("INSERT ... ON DUPLICATE KEY UPDATE")]),tab0:t(({value:l,isActive:r})=>[v,f,w]),tab1:t(({value:l,isActive:r})=>[L,I,S]),tab2:t(({value:l,isActive:r})=>[E,M,N]),_:1},8,["data"]),T,n("blockquote",null,[n("p",null,[s("扩展阅读："),n("a",x,[s("https://www.cnblogs.com/eiffelzero/p/18608160"),a(e)])])]),n("p",null,[n("a",_,[s("《阿里巴巴 Java 开发手册》"),a(e)]),s(" 中强制要求超过三个表禁止 join。这是为什么呢？")]),q,n("blockquote",null,[A,n("ul",null,[n("li",null,[n("a",O,[s("MySQL 官方文档之数据类型"),a(e)])]),n("li",null,[n("a",R,[s("MySQL 如何选择 float, double, decimal"),a(e)])])])]),Q,n("blockquote",null,[n("p",null,[s("扩展阅读："),n("a",C,[s("MySQL 如何选择 float, double, decimal"),a(e)])])]),D,n("blockquote",null,[B,n("ul",null,[n("li",null,[n("a",U,[s("MySQL 官方文档之 InnoDB 存储引擎"),a(e)])]),n("li",null,[n("a",P,[s("MySQL 官方文档之可选的存储引擎"),a(e)])])])]),F,n("blockquote",null,[n("p",null,[s("分布式 ID 的解决方案详见："),n("a",J,[s("分布式 ID"),a(e)])])]),H,Y,n("blockquote",null,[n("p",null,[s("分布式事务的解决方案详见："),n("a",j,[s("分布式事务"),a(e)])])]),z,n("blockquote",null,[n("p",null,[s("扩展阅读："),n("a",V,[s("SQL 的书写顺序和执行顺序"),a(e)])])]),X,n("blockquote",null,[n("p",null,[s("更多内容请参考："),n("a",G,[s("MySQL 性能优化神器 Explain 使用分析"),a(e)])])]),W,n("ul",null,[n("li",null,[n("a",K,[s("《高性能 MySQL》"),a(e)])]),n("li",null,[n("a",Z,[s("极客时间教程 - MySQL 实战 45 讲"),a(e)])]),n("li",null,[n("a",$,[s("图解 MySQL 介绍"),a(e)])])])])}const tn=c(g,[["render",nn],["__file","index.html.vue"]]);export{tn as default};
