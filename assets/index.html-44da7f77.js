const e=JSON.parse('{"key":"v-69235b72","path":"/pages/f5df515a/","title":"Spring Bean","lang":"zh-CN","frontmatter":{"title":"Spring Bean","date":"2021-12-10T19:15:42.000Z","order":1,"permalink":"/pages/f5df515a/","category":["Java","框架","Spring","Spring核心"],"tag":["Java","框架","Spring","Bean","BeanDefinition"],"description":"Spring Bean 在 Spring 中，构成应用程序主体由 Spring IoC 容器管理的对象称为 Bean。Bean 是由 Spring IoC 容器实例化、装配和管理的对象。 Bean 以及它们之间的依赖关系反映在容器使用的配置元数据中。 Spring Bean 定义 BeanDefinition Spring IoC 容器本身，并不能识别配置的元数据。为此，要将这些配置信息转为 Spring 能识别的格式——BeanDefinition 对象。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/f5df515a/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"Spring Bean"}],["meta",{"property":"og:description","content":"Spring Bean 在 Spring 中，构成应用程序主体由 Spring IoC 容器管理的对象称为 Bean。Bean 是由 Spring IoC 容器实例化、装配和管理的对象。 Bean 以及它们之间的依赖关系反映在容器使用的配置元数据中。 Spring Bean 定义 BeanDefinition Spring IoC 容器本身，并不能识别配置的元数据。为此，要将这些配置信息转为 Spring 能识别的格式——BeanDefinition 对象。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-14T13:48:12.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"框架"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:tag","content":"Bean"}],["meta",{"property":"article:tag","content":"BeanDefinition"}],["meta",{"property":"article:published_time","content":"2021-12-10T19:15:42.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-14T13:48:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring Bean\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-12-10T19:15:42.000Z\\",\\"dateModified\\":\\"2025-09-14T13:48:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"Spring Bean 定义","slug":"spring-bean-定义","link":"#spring-bean-定义","children":[{"level":3,"title":"BeanDefinition","slug":"beandefinition","link":"#beandefinition","children":[]},{"level":3,"title":"Spring Bean 命名","slug":"spring-bean-命名","link":"#spring-bean-命名","children":[]}]},{"level":2,"title":"Spring Bean 生命周期","slug":"spring-bean-生命周期","link":"#spring-bean-生命周期","children":[]},{"level":2,"title":"Spring Bean 注册","slug":"spring-bean-注册","link":"#spring-bean-注册","children":[{"level":3,"title":"XML 配置元信息","slug":"xml-配置元信息","link":"#xml-配置元信息","children":[]},{"level":3,"title":"注解配置元信息","slug":"注解配置元信息","link":"#注解配置元信息","children":[]},{"level":3,"title":"Java API 配置元信息","slug":"java-api-配置元信息","link":"#java-api-配置元信息","children":[]}]},{"level":2,"title":"Spring Bean 实例化","slug":"spring-bean-实例化","link":"#spring-bean-实例化","children":[]},{"level":2,"title":"Spring Bean 初始化和销毁","slug":"spring-bean-初始化和销毁","link":"#spring-bean-初始化和销毁","children":[]},{"level":2,"title":"Spring Bean 垃圾回收","slug":"spring-bean-垃圾回收","link":"#spring-bean-垃圾回收","children":[]},{"level":2,"title":"Spring Bean 作用范围","slug":"spring-bean-作用范围","link":"#spring-bean-作用范围","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1757857692000,"updatedTime":1757857692000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":1}]},"readingTime":{"minutes":7.16,"words":2147},"filePathRelative":"01.Java/13.框架/Spring/Spring核心/SpringBean.md","localizedDate":"2021年12月10日","excerpt":"<h1> Spring Bean</h1>\\n<p>在 Spring 中，构成应用程序主体由 Spring IoC 容器管理的对象称为 Bean。<strong>Bean 是由 Spring IoC 容器实例化、装配和管理的对象</strong>。 Bean 以及它们之间的依赖关系反映在容器使用的配置元数据中。</p>\\n<h2> Spring Bean 定义</h2>\\n<h3> BeanDefinition</h3>\\n<p>Spring IoC 容器本身，并不能识别配置的元数据。为此，要将这些配置信息转为 Spring 能识别的格式——<code>BeanDefinition</code> 对象。</p>","autoDesc":true}');export{e as data};
