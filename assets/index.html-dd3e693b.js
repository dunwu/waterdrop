import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as c,c as l,a as n,b as s,d as e,e as t}from"./app-c6dda127.js";const i={},u=t('<h1 id="java-和-json-序列化" tabindex="-1"><a class="header-anchor" href="#java-和-json-序列化" aria-hidden="true">#</a> Java 和 JSON 序列化</h1><blockquote><p>JSON（JavaScript Object Notation）是一种基于文本的数据交换格式。几乎所有的编程语言都有很好的库或第三方工具来提供基于 JSON 的 API 支持，因此你可以非常方便地使用任何自己喜欢的编程语言来处理 JSON 数据。</p><p>本文主要从 Java 语言的角度来讲解 JSON 的应用。</p></blockquote><h2 id="json-简介" tabindex="-1"><a class="header-anchor" href="#json-简介" aria-hidden="true">#</a> JSON 简介</h2><h3 id="json-是什么" tabindex="-1"><a class="header-anchor" href="#json-是什么" aria-hidden="true">#</a> JSON 是什么</h3>',4),r={href:"http://javascript.crockford.com/",target:"_blank",rel:"noopener noreferrer"},d={href:"http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf",target:"_blank",rel:"noopener noreferrer"},k=n("br",null,null,-1),m={href:"http://www.ietf.org/rfc/rfc4627.txt",target:"_blank",rel:"noopener noreferrer"},v={href:"http://www.json.org/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/burningtree/awesome-json",target:"_blank",rel:"noopener noreferrer"},b=t(`<h3 id="json-标准" tabindex="-1"><a class="header-anchor" href="#json-标准" aria-hidden="true">#</a> JSON 标准</h3><p>这估计是最简单标准规范之一：</p><ul><li>只有两种结构：对象内的键值对集合结构和数组，对象用 <code>{}</code> 表示、内部是 <code>&quot;key&quot;:&quot;value&quot;</code>，数组用 <code>[]</code> 表示，不同值用逗号分开</li><li>基本数值有 7 个： <code>false</code> / <code>null</code> / <code>true</code> / <code>object</code> / <code>array</code> / <code>number</code> / <code>string</code></li><li>再加上结构可以嵌套，进而可以用来表达复杂的数据</li><li>一个简单实例：</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;Image&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;Width&quot;</span><span class="token operator">:</span> <span class="token number">800</span><span class="token punctuation">,</span>
    <span class="token property">&quot;Height&quot;</span><span class="token operator">:</span> <span class="token number">600</span><span class="token punctuation">,</span>
    <span class="token property">&quot;Title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;View from 15th Floor&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;Thumbnail&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;Url&quot;</span><span class="token operator">:</span> <span class="token string">&quot;http://www.example.com/image/481989943&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;Height&quot;</span><span class="token operator">:</span> <span class="token number">125</span><span class="token punctuation">,</span>
      <span class="token property">&quot;Width&quot;</span><span class="token operator">:</span> <span class="token string">&quot;100&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;IDs&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">943</span><span class="token punctuation">,</span> <span class="token number">234</span><span class="token punctuation">,</span> <span class="token number">38793</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),g=n("p",null,"扩展阅读：",-1),f={href:"http://www.json.org/json-zh.html",target:"_blank",rel:"noopener noreferrer"},w={href:"http://tools.ietf.org/html/rfc4627",target:"_blank",rel:"noopener noreferrer"},_=n("h3",{id:"json-优缺点",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#json-优缺点","aria-hidden":"true"},"#"),s(" JSON 优缺点")],-1),j=n("p",null,"优点：",-1),y=n("ul",null,[n("li",null,"基于纯文本，所以对于人类阅读是很友好的。"),n("li",null,"规范简单，所以容易处理，开箱即用，特别是 JS 类的 ECMA 脚本里是内建支持的，可以直接作为对象使用。"),n("li",null,"平台无关性，因为类型和结构都是平台无关的，而且好处理，容易实现不同语言的处理类库，可以作为多个不同异构系统之间的数据传输格式协议，特别是在 HTTP/REST 下的数据格式。")],-1),S=n("p",null,"缺点：",-1),q=n("li",null,"性能一般，文本表示的数据一般来说比二进制大得多，在数据传输上和解析处理上都要更影响性能。",-1),J={href:"https://spacetelescope.github.io/understanding-json-schema/index.html",target:"_blank",rel:"noopener noreferrer"},x={href:"http://usingjsonschema.com/downloads/",target:"_blank",rel:"noopener noreferrer"},O={href:"http://azimi.me/json-schema-view/demo/demo.html",target:"_blank",rel:"noopener noreferrer"},N={href:"https://www.w3.org/Submission/wadl/",target:"_blank",rel:"noopener noreferrer"},I=n("h3",{id:"json-工具",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#json-工具","aria-hidden":"true"},"#"),s(" JSON 工具")],-1),M={href:"http://www.jsonrpc.org/",target:"_blank",rel:"noopener noreferrer"},P={href:"https://github.com/json-path/JsonPath",target:"_blank",rel:"noopener noreferrer"},F={href:"http://jsonpath.com/",target:"_blank",rel:"noopener noreferrer"},G={href:"http://jsbeautifier.org/",target:"_blank",rel:"noopener noreferrer"},L={href:"http://www.cnplugins.com/zhuanti/five-chrome-json-plugins.html",target:"_blank",rel:"noopener noreferrer"},A={href:"https://www.easy-mock.com/",target:"_blank",rel:"noopener noreferrer"},T={href:"https://www.soapui.org/rest-testing-mocking/rest-service-mocking.html",target:"_blank",rel:"noopener noreferrer"},U={href:"https://github.com/andrzejchm/RESTMock",target:"_blank",rel:"noopener noreferrer"},V=n("h3",{id:"java-json-库",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#java-json-库","aria-hidden":"true"},"#"),s(" Java JSON 库")],-1),C=n("p",null,"Java 中比较流行的 JSON 库有：",-1),B={href:"https://github.com/alibaba/fastjson",target:"_blank",rel:"noopener noreferrer"},z={href:"http://wiki.fasterxml.com/JacksonHome",target:"_blank",rel:"noopener noreferrer"},R={href:"https://github.com/google/gson",target:"_blank",rel:"noopener noreferrer"},E=n("p",null,"从性能上来看，一般情况下：Fastjson > Jackson > Gson",-1),D=n("h3",{id:"json-编码指南",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#json-编码指南","aria-hidden":"true"},"#"),s(" JSON 编码指南")],-1),X=n("p",null,"遵循好的设计与编码风格，能提前解决 80%的问题，个人推荐 Google JSON 风格指南。",-1),H={href:"https://google.github.io/styleguide/jsoncstyleguide.xml",target:"_blank",rel:"noopener noreferrer"},W={href:"https://google.github.io/styleguide/jsoncstyleguide.xml",target:"_blank",rel:"noopener noreferrer"},K={href:"https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md",target:"_blank",rel:"noopener noreferrer"},Y=t("<p>简单摘录如下：</p><ul><li>属性名和值都是用双引号，不要把注释写到对象里面，对象数据要简洁</li><li>不要随意结构化分组对象，推荐是用扁平化方式，层次不要太复杂</li><li>命名方式要有意义，比如单复数表示</li><li>驼峰式命名，遵循 Bean 规范</li><li>使用版本来控制变更冲突</li><li>对于一些关键字，不要拿来做 key</li><li>如果一个属性是可选的或者包含空值或 null 值，考虑从 JSON 中去掉该属性，除非它的存在有很强的语义原因</li><li>序列化枚举类型时，使用 name 而不是 value</li><li>日期要用标准格式处理</li><li>设计好通用的分页参数</li><li>设计好异常处理</li></ul>",2),Z={href:"http://jsonapi.org.cn/format/",target:"_blank",rel:"noopener noreferrer"},$={href:"http://jsonapi.org.cn/format/",target:"_blank",rel:"noopener noreferrer"},nn=t(`<p>JSON API 设计用来最小化请求的数量，以及客户端与服务器间传输的数据量。在高效实现的同时，无需牺牲可读性、灵活性和可发现性。</p><h2 id="fastjson-应用" tabindex="-1"><a class="header-anchor" href="#fastjson-应用" aria-hidden="true">#</a> Fastjson 应用</h2><h3 id="添加-maven-依赖" tabindex="-1"><a class="header-anchor" href="#添加-maven-依赖" aria-hidden="true">#</a> 添加 maven 依赖</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>x.x.x<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="fastjson-api" tabindex="-1"><a class="header-anchor" href="#fastjson-api" aria-hidden="true">#</a> Fastjson API</h3><h4 id="定义-bean" tabindex="-1"><a class="header-anchor" href="#定义-bean" aria-hidden="true">#</a> 定义 Bean</h4><p><strong>Group.java</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Group</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Long</span>       id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span>     name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>User.java</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Long</span>   id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>初始化 Bean</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Group</span> group <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
group<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
group<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">User</span> guestUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
guestUser<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">2L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
guestUser<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;guest&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">User</span> rootUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
rootUser<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">3L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
rootUser<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

group<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span>guestUser<span class="token punctuation">)</span><span class="token punctuation">;</span>
group<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span>rootUser<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="序列化" tabindex="-1"><a class="header-anchor" href="#序列化" aria-hidden="true">#</a> 序列化</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> jsonString <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="反序列化" tabindex="-1"><a class="header-anchor" href="#反序列化" aria-hidden="true">#</a> 反序列化</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Group</span> bean <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">,</span> <span class="token class-name">Group</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="fastjson-注解" tabindex="-1"><a class="header-anchor" href="#fastjson-注解" aria-hidden="true">#</a> Fastjson 注解</h3><h4 id="jsonfield" tabindex="-1"><a class="header-anchor" href="#jsonfield" aria-hidden="true">#</a> <code>@JSONField</code></h4>`,18),sn={href:"https://github.com/alibaba/fastjson/wiki/JSONField",target:"_blank",rel:"noopener noreferrer"},an=t(`<p>可以配置在属性（setter、getter）和字段（必须是 public field）上。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;ID&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> id<span class="token punctuation">;</span><span class="token punctuation">}</span>

<span class="token comment">// 配置date序列化和反序列使用yyyyMMdd日期格式</span>
<span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>format<span class="token operator">=</span><span class="token string">&quot;yyyyMMdd&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Date</span> date1<span class="token punctuation">;</span>

<span class="token comment">// 不序列化</span>
<span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>serialize<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Date</span> date2<span class="token punctuation">;</span>

<span class="token comment">// 不反序列化</span>
<span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>deserialize<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Date</span> date3<span class="token punctuation">;</span>

<span class="token comment">// 按ordinal排序</span>
<span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>ordinal <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> f1<span class="token punctuation">;</span>

<span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>ordinal <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> f2<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="jsontype" tabindex="-1"><a class="header-anchor" href="#jsontype" aria-hidden="true">#</a> <code>@JSONType</code></h4>`,3),en={href:"https://github.com/alibaba/fastjson/wiki/JSONType_serializer",target:"_blank",rel:"noopener noreferrer"},tn={href:"https://github.com/alibaba/fastjson/wiki/JSONType_seeAlso_cn",target:"_blank",rel:"noopener noreferrer"},on=t(`<p>JSONType.alphabetic 属性: fastjson 缺省时会使用字母序序列化，如果你是希望按照 java fields/getters 的自然顺序序列化，可以配置 JSONType.alphabetic，使用方法如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@JSONType</span><span class="token punctuation">(</span>alphabetic <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> f2<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> f1<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> f0<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jackson-应用" tabindex="-1"><a class="header-anchor" href="#jackson-应用" aria-hidden="true">#</a> Jackson 应用</h2>`,3),pn={href:"https://github.com/FasterXML/jackson-databind",target:"_blank",rel:"noopener noreferrer"},cn=t(`<h3 id="添加-maven-依赖-1" tabindex="-1"><a class="header-anchor" href="#添加-maven-依赖-1" aria-hidden="true">#</a> 添加 maven 依赖</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.9.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="jackson-api" tabindex="-1"><a class="header-anchor" href="#jackson-api" aria-hidden="true">#</a> Jackson API</h3><h4 id="序列化-1" tabindex="-1"><a class="header-anchor" href="#序列化-1" aria-hidden="true">#</a> 序列化</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

mapper<span class="token punctuation">.</span><span class="token function">writeValue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;result.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> myResultObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// or:</span>
<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> jsonBytes <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsBytes</span><span class="token punctuation">(</span>myResultObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// or:</span>
<span class="token class-name">String</span> jsonString <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>myResultObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="反序列化-1" tabindex="-1"><a class="header-anchor" href="#反序列化-1" aria-hidden="true">#</a> 反序列化</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">MyValue</span> value <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;data.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">MyValue</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// or:</span>
value <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">&quot;http://some.com/api/entry.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">MyValue</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// or:</span>
value <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span><span class="token string">&quot;{\\&quot;name\\&quot;:\\&quot;Bob\\&quot;, \\&quot;age\\&quot;:13}&quot;</span><span class="token punctuation">,</span> <span class="token class-name">MyValue</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="容器的序列化和反序列化" tabindex="-1"><a class="header-anchor" href="#容器的序列化和反序列化" aria-hidden="true">#</a> 容器的序列化和反序列化</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;Tom&quot;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;Jack&quot;</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Person</span> p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;Mary&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> persons <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
persons<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
persons<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
persons<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;persons&quot;</span><span class="token punctuation">,</span> persons<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
 json <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JsonProcessingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="jackson-注解" tabindex="-1"><a class="header-anchor" href="#jackson-注解" aria-hidden="true">#</a> Jackson 注解</h3>`,10),ln={href:"https://github.com/FasterXML/jackson-annotations/wiki/Jackson-Annotations",target:"_blank",rel:"noopener noreferrer"},un=t(`<h4 id="jsonproperty" tabindex="-1"><a class="header-anchor" href="#jsonproperty" aria-hidden="true">#</a> <code>@JsonProperty</code></h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBean</span> <span class="token punctuation">{</span>
   <span class="token keyword">private</span> <span class="token class-name">String</span> _name<span class="token punctuation">;</span>

   <span class="token comment">// without annotation, we&#39;d get &quot;theName&quot;, but we want &quot;name&quot;:</span>
   <span class="token annotation punctuation">@JsonProperty</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span>
   <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getTheName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _name<span class="token punctuation">;</span> <span class="token punctuation">}</span>

   <span class="token comment">// note: it is enough to add annotation on just getter OR setter;</span>
   <span class="token comment">// so we can omit it here</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTheName</span><span class="token punctuation">(</span><span class="token class-name">String</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span> _name <span class="token operator">=</span> n<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="jsonignoreproperties-和-jsonignore" tabindex="-1"><a class="header-anchor" href="#jsonignoreproperties-和-jsonignore" aria-hidden="true">#</a> <code>@JsonIgnoreProperties</code> 和 <code>@JsonIgnore</code></h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// means that if we see &quot;foo&quot; or &quot;bar&quot; in JSON, they will be quietly skipped</span>
<span class="token comment">// regardless of whether POJO has such properties</span>
<span class="token annotation punctuation">@JsonIgnoreProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bar&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBean</span> <span class="token punctuation">{</span>
   <span class="token comment">// will not be written as JSON; nor assigned from JSON:</span>
   <span class="token annotation punctuation">@JsonIgnore</span>
   <span class="token keyword">public</span> <span class="token class-name">String</span> internal<span class="token punctuation">;</span>

   <span class="token comment">// no annotation, public field is read/written normally</span>
   <span class="token keyword">public</span> <span class="token class-name">String</span> external<span class="token punctuation">;</span>

   <span class="token annotation punctuation">@JsonIgnore</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCode</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span> _code <span class="token operator">=</span> c<span class="token punctuation">;</span> <span class="token punctuation">}</span>

   <span class="token comment">// note: will also be ignored because setter has annotation!</span>
   <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _code<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="jsoncreator" tabindex="-1"><a class="header-anchor" href="#jsoncreator" aria-hidden="true">#</a> <code>@JsonCreator</code></h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CtorBean</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>

  <span class="token annotation punctuation">@JsonCreator</span> <span class="token comment">// constructor can be public, private, whatever</span>
  <span class="token keyword">private</span> <span class="token class-name">CtorBean</span><span class="token punctuation">(</span><span class="token annotation punctuation">@JsonProperty</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span>
    <span class="token annotation punctuation">@JsonProperty</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="jsonpropertyorder" tabindex="-1"><a class="header-anchor" href="#jsonpropertyorder" aria-hidden="true">#</a> <code>@JsonPropertyOrder</code></h4><p>alphabetic 设为 true 表示，json 字段按自然顺序排列，默认为 false。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@JsonPropertyOrder</span><span class="token punctuation">(</span>alphabetic <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JacksonAnnotationBean</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="gson-应用" tabindex="-1"><a class="header-anchor" href="#gson-应用" aria-hidden="true">#</a> Gson 应用</h2>`,10),rn={href:"https://github.com/google/gson/blob/master/UserGuide.md",target:"_blank",rel:"noopener noreferrer"},dn=t(`<h3 id="添加-maven-依赖-2" tabindex="-1"><a class="header-anchor" href="#添加-maven-依赖-2" aria-hidden="true">#</a> 添加 maven 依赖</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.google.code.gson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>gson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.8.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="gson-api" tabindex="-1"><a class="header-anchor" href="#gson-api" aria-hidden="true">#</a> Gson API</h3><h4 id="序列化-2" tabindex="-1"><a class="header-anchor" href="#序列化-2" aria-hidden="true">#</a> 序列化</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Gson</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// ==&gt; 1</span>
gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span><span class="token string">&quot;abcd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// ==&gt; &quot;abcd&quot;</span>
gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span><span class="token number">10L</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ==&gt; 10</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// ==&gt; [1]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="反序列化-2" tabindex="-1"><a class="header-anchor" href="#反序列化-2" aria-hidden="true">#</a> 反序列化</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> i1 <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> i2 <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Long</span> l1 <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Boolean</span> b1 <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token string">&quot;false&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> str <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token string">&quot;\\&quot;abc\\&quot;&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> anotherStr <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token string">&quot;[\\&quot;abc\\&quot;]&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="gsonbuilder" tabindex="-1"><a class="header-anchor" href="#gsonbuilder" aria-hidden="true">#</a> GsonBuilder</h4><p><code>Gson</code> 实例可以通过 <code>GsonBuilder</code> 来定制实例化，以控制其序列化、反序列化行为。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Gson</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">setPrettyPrinting</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">setDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">excludeFieldsWithModifiers</span><span class="token punctuation">(</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token constant">STATIC</span><span class="token punctuation">,</span> <span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token constant">TRANSIENT</span><span class="token punctuation">,</span> <span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token constant">VOLATILE</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="gson-注解" tabindex="-1"><a class="header-anchor" href="#gson-注解" aria-hidden="true">#</a> Gson 注解</h3><h4 id="since" tabindex="-1"><a class="header-anchor" href="#since" aria-hidden="true">#</a> <code>@Since</code></h4>`,12),kn={href:"https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/annotations/Since.java",target:"_blank",rel:"noopener noreferrer"},mn=n("code",null,"@Since",-1),vn=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VersionedClass</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Since</span><span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> newerField<span class="token punctuation">;</span>
  <span class="token annotation punctuation">@Since</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> newField<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> field<span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token class-name">VersionedClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>newerField <span class="token operator">=</span> <span class="token string">&quot;newer&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>newField <span class="token operator">=</span> <span class="token string">&quot;new&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>field <span class="token operator">=</span> <span class="token string">&quot;old&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token class-name">VersionedClass</span> versionedObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VersionedClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Gson</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVersion</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> jsonOutput <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>versionedObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jsonOutput<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
jsonOutput <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>versionedObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jsonOutput<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="serializedname" tabindex="-1"><a class="header-anchor" href="#serializedname" aria-hidden="true">#</a> <code>@SerializedName</code></h4><p><code>@SerializedName</code> 用于将类成员按照指定名称序列化、反序列化。示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">SomeObject</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@SerializedName</span><span class="token punctuation">(</span><span class="token string">&quot;custom_naming&quot;</span><span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> someField<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> someOtherField<span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token class-name">SomeObject</span><span class="token punctuation">(</span><span class="token class-name">String</span> a<span class="token punctuation">,</span> <span class="token class-name">String</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>someField <span class="token operator">=</span> a<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>someOtherField <span class="token operator">=</span> b<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="示例源码" tabindex="-1"><a class="header-anchor" href="#示例源码" aria-hidden="true">#</a> 示例源码</h2>`,5),hn={href:"https://github.com/dunwu/java-tutorial/tree/master/javalib-io-json",target:"_blank",rel:"noopener noreferrer"},bn=n("h2",{id:"参考资料",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考资料","aria-hidden":"true"},"#"),s(" 参考资料")],-1),gn=n("strong",null,"官方",-1),fn={href:"https://github.com/alibaba/fastjson",target:"_blank",rel:"noopener noreferrer"},wn={href:"https://github.com/google/gson",target:"_blank",rel:"noopener noreferrer"},_n={href:"https://github.com/FasterXML/jackson-docs",target:"_blank",rel:"noopener noreferrer"},jn={href:"https://github.com/FasterXML/jackson-databind",target:"_blank",rel:"noopener noreferrer"},yn=n("strong",null,"文章",-1),Sn={href:"http://www.json.org/json-zh.html",target:"_blank",rel:"noopener noreferrer"},qn={href:"http://tools.ietf.org/html/rfc4627",target:"_blank",rel:"noopener noreferrer"},Jn={href:"https://kimmking.github.io/2017/06/06/json-best-practice/",target:"_blank",rel:"noopener noreferrer"},xn={href:"https://www.jianshu.com/p/8b428e1d1564",target:"_blank",rel:"noopener noreferrer"};function On(Nn,In){const a=p("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("JSON 起源于 1999 年的 "),n("a",r,[s("JS 语言规范 ECMA262 的一个子集"),e(a)]),s("（即 15.12 章节描述了格式与解析），后来 2003 年作为一个数据格式"),n("a",d,[s("ECMA404"),e(a)]),s("（很囧的序号有不有？）发布。"),k,s(" 2006 年，作为 "),n("a",m,[s("rfc4627"),e(a)]),s(" 发布，这时规范增加到 18 页，去掉没用的部分，十页不到。")]),n("p",null,[s("JSON 的应用很广泛，这里有超过 100 种语言下的 JSON 库："),n("a",v,[s("json.org"),e(a)]),s("。")]),n("p",null,[s("更多的可以参考这里，"),n("a",h,[s("关于 json 的一切"),e(a)]),s("。")]),b,n("blockquote",null,[g,n("ul",null,[n("li",null,[n("p",null,[n("a",f,[s("http://www.json.org/json-zh.html"),e(a)]),s(" - 图文并茂介绍 json 数据形式")])]),n("li",null,[n("p",null,[n("a",w,[s("json 的 RFC 文档"),e(a)])])])])]),_,j,y,S,n("ul",null,[q,n("li",null,[s("缺乏 schema，跟同是文本数据格式的 XML 比，在类型的严格性和丰富性上要差很多。XML 可以借由 XSD 或 DTD 来定义复杂的格式，并由此来验证 XML 文档是否符合格式要求，甚至进一步的，可以基于 XSD 来生成具体语言的操作代码，例如 apache xmlbeans。并且这些工具组合到一起，形成一套庞大的生态，例如基于 XML 可以实现 SOAP 和 WSDL，一系列的 ws-*规范。但是我们也可以看到 JSON 在缺乏规范的情况下，实际上有更大一些的灵活性，特别是近年来 REST 的快速发展，已经有一些 schema 相关的发展(例如"),n("a",J,[s("理解 JSON Schema"),e(a)]),s("，"),n("a",x,[s("使用 JSON Schema"),e(a)]),s("， "),n("a",O,[s("在线 schema 测试"),e(a)]),s(")，也有类似于 WSDL 的"),n("a",N,[s("WADL"),e(a)]),s("出现。")])]),I,n("ul",null,[n("li",null,[n("p",null,[s("使用 JSON 实现 RPC（类似 XML-RPC）："),n("a",M,[s("JSON-RPC"),e(a)])])]),n("li",null,[n("p",null,[s("使用 JSON 实现 path 查询操作（类似 XML-PATH）："),n("a",P,[s("JsonPATH"),e(a)])])]),n("li",null,[n("p",null,[s("在线查询工具："),n("a",F,[s("JsonPATH"),e(a)])])]),n("li",null,[n("p",null,[s("格式化工具："),n("a",G,[s("jsbeautifier"),e(a)])])]),n("li",null,[n("p",null,[s("chrome 插件："),n("a",L,[s("5 个 Json View 插件"),e(a)])])]),n("li",null,[n("p",null,[s("在线 Mock: "),n("a",A,[s("在线 mock"),e(a)])])]),n("li",null,[n("p",null,[s("其他 Mock："),n("a",T,[s("SoapUI"),e(a)]),s("可以支持，SwaggerUI 也可以，"),n("a",U,[s("RestMock"),e(a)]),s("也可以。")])])]),V,C,n("ul",null,[n("li",null,[n("a",B,[s("Fastjson"),e(a)]),s(" - 阿里巴巴开发的 JSON 库，性能十分优秀。")]),n("li",null,[n("a",z,[s("Jackson"),e(a)]),s(" - 社区十分活跃且更新速度很快。Spring 框架默认 JSON 库。")]),n("li",null,[n("a",R,[s("Gson"),e(a)]),s(" - 谷歌开发的 JSON 库，目前功能最全的 JSON 库 。")])]),E,D,n("blockquote",null,[X,n("ul",null,[n("li",null,[s("英文版"),n("a",H,[s("Google JSON Style Guide"),e(a)]),s("："),n("a",W,[s("https://google.github.io/styleguide/jsoncstyleguide.xml"),e(a)])]),n("li",null,[s("中文版"),n("a",K,[s("Google JSON 风格指南"),e(a)]),s("："),n("a",Q,[s("https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md"),e(a)])])])]),Y,n("p",null,[n("a",Z,[s("JSON API"),e(a)]),s("与 Google JSON 风格指南有很多可以相互参照之处。")]),n("p",null,[n("a",$,[s("JSON API"),e(a)]),s("是数据交互规范，用以定义客户端如何获取与修改资源，以及服务器如何响应对应请求。")]),nn,n("blockquote",null,[n("p",null,[s("扩展阅读：更多 API 使用细节可以参考："),n("a",sn,[s("JSONField 用法"),e(a)]),s("，这里介绍基本用法。")])]),an,n("ul",null,[n("li",null,[s("自定义序列化："),n("a",en,[s("ObjectSerializer"),e(a)])]),n("li",null,[s("子类型处理："),n("a",tn,[s("SeeAlso"),e(a)])])]),on,n("blockquote",null,[n("p",null,[s("扩展阅读：更多 API 使用细节可以参考 "),n("a",pn,[s("jackson-databind 官方说明"),e(a)])])]),cn,n("blockquote",null,[n("p",null,[s("扩展阅读：更多注解使用细节可以参考 "),n("a",ln,[s("jackson-annotations 官方说明"),e(a)])])]),un,n("blockquote",null,[n("p",null,[s("详细内容可以参考官方文档："),n("a",rn,[s("Gson 用户指南"),e(a)])])]),dn,n("p",null,[n("a",kn,[mn,e(a)]),s(" 用于控制对象的序列化版本。示例：")]),vn,n("blockquote",null,[n("p",null,[s("示例源码："),n("a",hn,[s("javalib-io-json"),e(a)])])]),bn,n("ul",null,[n("li",null,[gn,n("ul",null,[n("li",null,[n("a",fn,[s("Fastjson Github"),e(a)])]),n("li",null,[n("a",wn,[s("Gson Github"),e(a)])]),n("li",null,[n("a",_n,[s("jackson 官方文档"),e(a)])]),n("li",null,[n("a",jn,[s("jackson-databind"),e(a)])])])]),n("li",null,[yn,n("ul",null,[n("li",null,[n("a",Sn,[s("http://www.json.org/json-zh.html"),e(a)])]),n("li",null,[n("a",qn,[s("json 的 RFC 文档"),e(a)])]),n("li",null,[n("a",Jn,[s("JSON 最佳实践"),e(a)])]),n("li",null,[n("a",xn,[s("【简明教程】JSON"),e(a)])])])])])])}const Fn=o(i,[["render",On],["__file","index.html.vue"]]);export{Fn as default};
