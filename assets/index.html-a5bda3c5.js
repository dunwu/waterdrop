import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o,c as p,a,b as n,d as e,e as c}from"./app-470d0b3f.js";const r={},l={href:"https://sourcemaking.com/refactoring/smells/bloaters",target:"_blank",rel:"noopener noreferrer"},u=a("p",null,[a("strong",null,"代码臃肿(Bloated)这组坏味道意味着：代码中的类、函数、字段没有经过合理的组织，只是简单的堆砌起来。这一类型的问题通常在代码的初期并不明显，但是随着代码规模的增长而逐渐积累（特别是当没有人努力去根除它们时）。")],-1),d=c(`<h2 id="基本类型偏执" tabindex="-1"><a class="header-anchor" href="#基本类型偏执" aria-hidden="true">#</a> 基本类型偏执</h2><blockquote><p>基本类型偏执(Primitive Obsession)</p><ul><li>使用基本类型而不是小对象来实现简单任务（例如货币、范围、电话号码字符串等）。</li><li>使用常量编码信息（例如一个用于引用管理员权限的常量<code>USER_ADMIN_ROLE = 1</code> ）。</li><li>使用字符串常量作为字段名在数组中使用。</li></ul></blockquote><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/primitive-obsession-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="问题原因" tabindex="-1"><a class="header-anchor" href="#问题原因" aria-hidden="true">#</a> 问题原因</h3><p>类似其他大部分坏味道，基本类型偏执诞生于类初建的时候。一开始，可能只是不多的字段，随着表示的特性越来越多，基本数据类型字段也越来越多。</p><p>基本类型常常被用于表示模型的类型。你有一组数字或字符串用来表示某个实体。</p><p>还有一个场景：在模拟场景，大量的字符串常量被用于数组的索引。</p><h3 id="解决方法" tabindex="-1"><a class="header-anchor" href="#解决方法" aria-hidden="true">#</a> 解决方法</h3><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/primitive-obsession-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>大多数编程语言都支持基本数据类型和结构类型（类、结构体等）。结构类型允许程序员将基本数据类型组织起来，以代表某一事物的模型。</p><p>基本数据类型可以看成是机构类型的积木块。当基本数据类型数量成规模后，将它们有组织地结合起来，可以更方便的管理这些数据。</p><ul><li>如果你有大量的基本数据类型字段，就有可能将其中部分存在逻辑联系的字段组织起来，形成一个类。更进一步的是，将与这些数据有关联的方法也一并移入类中。为了实现这个目标，可以尝试 <code>以类取代类型码(Replace Type Code with Class)</code> 。</li><li>如果基本数据类型字段的值是用于方法的参数，可以使用 <code>引入参数对象(Introduce Parameter Object)</code> 或 <code>保持对象完整(Preserve Whole Object)</code> 。</li><li>如果想要替换的数据值是类型码，而它并不影响行为，则可以运用 <code>以类取代类型码(Replace Type Code with Class)</code> 将它替换掉。如果你有与类型码相关的条件表达式，可运用 <code>以子类取代类型码(Replace Type Code with Subclass)</code> 或 <code>以状态/策略模式取代类型码(Replace Type Code with State/Strategy)</code> 加以处理。</li><li>如果你发现自己正从数组中挑选数据，可运用 <code>以对象取代数组(Replace Array with Object)</code> 。</li></ul><h3 id="收益" tabindex="-1"><a class="header-anchor" href="#收益" aria-hidden="true">#</a> 收益</h3><ul><li>多亏了使用对象替代基本数据类型，使得代码变得更加灵活。</li><li>代码变得更加易读和更加有组织。特殊数据可以集中进行操作，而不像之前那样分散。不用再猜测这些陌生的常量的意义以及它们为什么在数组中。</li><li>更容易发现重复代码。</li></ul><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/primitive-obsession-3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="重构方法说明" tabindex="-1"><a class="header-anchor" href="#重构方法说明" aria-hidden="true">#</a> 重构方法说明</h3><h4 id="以类取代类型码-replace-type-code-with-class" tabindex="-1"><a class="header-anchor" href="#以类取代类型码-replace-type-code-with-class" aria-hidden="true">#</a> 以类取代类型码(Replace Type Code with Class)</h4><p><strong>问题</strong></p><p>类之中有一个数值类型码，但它并不影响类的行为。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/replace-type-code-with-class-before.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>解决</strong></p><p>以一个新的类替换该数值类型码。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/replace-type-code-with-class-after.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="引入参数对象-introduce-parameter-object" tabindex="-1"><a class="header-anchor" href="#引入参数对象-introduce-parameter-object" aria-hidden="true">#</a> 引入参数对象(Introduce Parameter Object)</h4><p><strong>问题</strong></p><p>某些参数总是很自然地同时出现。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/introduce-parameter-object-before.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>解决</strong></p><p>以一个对象来取代这些参数。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/introduce-parameter-object-after.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="保持对象完整-preserve-whole-object" tabindex="-1"><a class="header-anchor" href="#保持对象完整-preserve-whole-object" aria-hidden="true">#</a> 保持对象完整(Preserve Whole Object)</h4><p><strong>问题</strong></p><p>你从某个对象中取出若干值，将它们作为某一次函数调用时的参数。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> low <span class="token operator">=</span> daysTempRange<span class="token punctuation">.</span><span class="token function">getLow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> high <span class="token operator">=</span> daysTempRange<span class="token punctuation">.</span><span class="token function">getHigh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> withinPlan <span class="token operator">=</span> plan<span class="token punctuation">.</span><span class="token function">withinRange</span><span class="token punctuation">(</span>low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解决</strong></p><p>改为传递整个对象。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">boolean</span> withinPlan <span class="token operator">=</span> plan<span class="token punctuation">.</span><span class="token function">withinRange</span><span class="token punctuation">(</span>daysTempRange<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="以子类取代类型码-replace-type-code-with-subclass" tabindex="-1"><a class="header-anchor" href="#以子类取代类型码-replace-type-code-with-subclass" aria-hidden="true">#</a> 以子类取代类型码(Replace Type Code with Subclass)</h4><p><strong>问题</strong></p><p>你有一个不可变的类型码，它会影响类的行为。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/replace-type-code-with-subclasses-before.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>解决</strong></p><p>以子类取代这个类型码。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/replace-type-code-with-subclasses-after.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="以状态-策略模式取代类型码-replace-type-code-with-state-strategy" tabindex="-1"><a class="header-anchor" href="#以状态-策略模式取代类型码-replace-type-code-with-state-strategy" aria-hidden="true">#</a> 以状态/策略模式取代类型码(Replace Type Code with State/Strategy)</h4><p><strong>问题</strong></p><p>你有一个类型码，它会影响类的行为，但你无法通过继承消除它。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/replace-type-code-with-state-strategy-before.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>解决</strong></p><p>以状态对象取代类型码。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/replace-type-code-with-state-strategy-after.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="以对象取代数组-replace-array-with-object" tabindex="-1"><a class="header-anchor" href="#以对象取代数组-replace-array-with-object" aria-hidden="true">#</a> 以对象取代数组(Replace Array with Object)</h4><p><strong>问题</strong></p><p>你有一个数组，其中的元素各自代表不同的东西。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> row <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Liverpool&quot;</span><span class="token punctuation">;</span>
row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;15&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解决</strong></p><p>以对象替换数组。对于数组中的每个元素，以一个字段来表示。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Performance</span> row <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Performance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
row<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;Liverpool&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
row<span class="token punctuation">.</span><span class="token function">setWins</span><span class="token punctuation">(</span><span class="token string">&quot;15&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据泥团" tabindex="-1"><a class="header-anchor" href="#数据泥团" aria-hidden="true">#</a> 数据泥团</h2><blockquote><p>数据泥团(Data Clumps)</p><p>有时，代码的不同部分包含相同的变量组（例如用于连接到数据库的参数）。这些绑在一起出现的数据应该拥有自己的对象。</p></blockquote><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/data-clumps-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="问题原因-1" tabindex="-1"><a class="header-anchor" href="#问题原因-1" aria-hidden="true">#</a> 问题原因</h3><p>通常，数据泥团的出现时因为糟糕的编程结构或“复制-粘贴式编程”。</p><p>有一个判断是否是数据泥团的好办法：删掉众多数据中的一项。这么做，其他数据有没有因而失去意义？如果它们不再有意义，这就是个明确的信号：你应该为它们产生一个新的对象。</p><h3 id="解决方法-1" tabindex="-1"><a class="header-anchor" href="#解决方法-1" aria-hidden="true">#</a> 解决方法</h3><ul><li>首先找出这些数据以字段形式出现的地方，运用 <code>提炼类(Extract Class)</code> 将它们提炼到一个独立对象中。</li><li>如果数据泥团在函数的参数列中出现，运用 <code>引入参数对象(Introduce Parameter Object)</code> 将它们组织成一个类。</li><li>如果数据泥团的部分数据出现在其他函数中，考虑运用 <code>保持对象完整(Preserve Whole Object)</code> 将整个数据对象传入到函数中。</li><li>检视一下使用这些字段的代码，也许，将它们移入一个数据类是个不错的主意。</li></ul><h3 id="收益-1" tabindex="-1"><a class="header-anchor" href="#收益-1" aria-hidden="true">#</a> 收益</h3><ul><li>提高代码易读性和组织性。对于特殊数据的操作，可以集中进行处理，而不像以前那样分散。</li><li>减少代码量。</li></ul><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/data-clumps-3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="何时忽略" tabindex="-1"><a class="header-anchor" href="#何时忽略" aria-hidden="true">#</a> 何时忽略</h3><ul><li>有时为了对象中的部分数据而将整个对象作为参数传递给函数，可能会产生让两个类之间不收欢迎的依赖关系，这中情况下可以不传递整个对象。</li></ul><h3 id="重构方法说明-1" tabindex="-1"><a class="header-anchor" href="#重构方法说明-1" aria-hidden="true">#</a> 重构方法说明</h3><h4 id="提炼类-extract-class" tabindex="-1"><a class="header-anchor" href="#提炼类-extract-class" aria-hidden="true">#</a> 提炼类(Extract Class)</h4><p><strong>问题</strong></p><p>某个类做了不止一件事。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/extract-class-before.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>解决</strong></p><p>建立一个新类，将相关的字段和函数从旧类搬移到新类。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/extract-class-after.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="引入参数对象-introduce-parameter-object-1" tabindex="-1"><a class="header-anchor" href="#引入参数对象-introduce-parameter-object-1" aria-hidden="true">#</a> 引入参数对象(Introduce Parameter Object)</h4><p><strong>问题</strong></p><p>某些参数总是很自然地同时出现。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/introduce-parameter-object-before.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>解决</strong></p><p>以一个对象来取代这些参数。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/introduce-parameter-object-after.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="保持对象完整-preserve-whole-object-1" tabindex="-1"><a class="header-anchor" href="#保持对象完整-preserve-whole-object-1" aria-hidden="true">#</a> 保持对象完整(Preserve Whole Object)</h4><p><strong>问题</strong></p><p>你从某个对象中取出若干值，将它们作为某一次函数调用时的参数。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> low <span class="token operator">=</span> daysTempRange<span class="token punctuation">.</span><span class="token function">getLow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> high <span class="token operator">=</span> daysTempRange<span class="token punctuation">.</span><span class="token function">getHigh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> withinPlan <span class="token operator">=</span> plan<span class="token punctuation">.</span><span class="token function">withinRange</span><span class="token punctuation">(</span>low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解决</strong></p><p>改为传递整个对象。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">boolean</span> withinPlan <span class="token operator">=</span> plan<span class="token punctuation">.</span><span class="token function">withinRange</span><span class="token punctuation">(</span>daysTempRange<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="过大的类" tabindex="-1"><a class="header-anchor" href="#过大的类" aria-hidden="true">#</a> 过大的类</h2><blockquote><p>过大的类(Large Class)</p><p>一个类含有过多字段、函数、代码行。</p></blockquote><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/large-class-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="问题原因-2" tabindex="-1"><a class="header-anchor" href="#问题原因-2" aria-hidden="true">#</a> 问题原因</h3><p>类通常一开始很小，但是随着程序的增长而逐渐膨胀。</p><p>类似于过长函数，程序员通常觉得在一个现存类中添加新特性比创建一个新的类要容易。</p><h3 id="解决方法-2" tabindex="-1"><a class="header-anchor" href="#解决方法-2" aria-hidden="true">#</a> 解决方法</h3><p>设计模式中有一条重要原则：职责单一原则。一个类应该只赋予它一个职责。如果它所承担的职责太多，就该考虑为它减减负。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/large-class-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>如果过大类中的部分行为可以提炼到一个独立的组件中，可以使用 <code>提炼类(Extract Class)</code>。</li><li>如果过大类中的部分行为可以用不同方式实现或使用于特殊场景，可以使用 <code>提炼子类(Extract Subclass)</code>。</li><li>如果有必要为客户端提供一组操作和行为，可以使用 <code>提炼接口(Extract Interface)</code>。</li><li>如果你的过大类是个 GUI 类，可能需要把数据和行为移到一个独立的领域对象去。你可能需要两边各保留一些重复数据，并保持两边同步。 <code>复制被监视数据(Duplicate Observed Data)</code> 可以告诉你怎么做。</li></ul><h3 id="收益-2" tabindex="-1"><a class="header-anchor" href="#收益-2" aria-hidden="true">#</a> 收益</h3><ul><li>重构过大的类可以使程序员不必记住一个类中大量的属性。</li><li>在大多数情况下，分割过大的类可以避免代码和功能的重复。</li></ul><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/large-class-3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="重构方法说明-2" tabindex="-1"><a class="header-anchor" href="#重构方法说明-2" aria-hidden="true">#</a> 重构方法说明</h3><h4 id="提炼类-extract-class-1" tabindex="-1"><a class="header-anchor" href="#提炼类-extract-class-1" aria-hidden="true">#</a> 提炼类(Extract Class)</h4><p><strong>问题</strong></p><p>某个类做了不止一件事。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/extract-class-before.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>解决</strong></p><p>建立一个新类，将相关的字段和函数从旧类搬移到新类。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/extract-class-after.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="提炼子类-extract-subclass" tabindex="-1"><a class="header-anchor" href="#提炼子类-extract-subclass" aria-hidden="true">#</a> 提炼子类(Extract Subclass)</h4><p><strong>问题</strong></p><p>一个类中有些特性仅用于特定场景。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/extract-subclass-before.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>解决</strong></p><p>创建一个子类，并将用于特殊场景的特性置入其中。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/extract-subclass-after.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="提炼接口-extract-interface" tabindex="-1"><a class="header-anchor" href="#提炼接口-extract-interface" aria-hidden="true">#</a> 提炼接口(Extract Interface)</h4><p><strong>问题</strong></p><p>多个客户端使用一个类部分相同的函数。另一个场景是两个类中的部分函数相同。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/extract-interface-before.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>解决</strong></p><p>移动相同的部分函数到接口中。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/extract-interface-after.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="复制被监视数据-duplicate-observed-data" tabindex="-1"><a class="header-anchor" href="#复制被监视数据-duplicate-observed-data" aria-hidden="true">#</a> 复制被监视数据(Duplicate Observed Data)</h4><p><strong>问题</strong></p><p>如果存储在类中的数据是负责 GUI 的。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/duplicate-observed-data-before.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>解决</strong></p><p>一个比较好的方法是将负责 GUI 的数据放入一个独立的类，以确保 GUI 数据与域类之间的连接和同步。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/duplicate-observed-data-after.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="过长函数" tabindex="-1"><a class="header-anchor" href="#过长函数" aria-hidden="true">#</a> 过长函数</h2><blockquote><p>过长函数(Long Method)</p><p>一个函数含有太多行代码。一般来说，任何函数超过 10 行时，你就可以考虑是不是过长了。<br> 函数中的代码行数原则上不要超过 100 行。</p></blockquote><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/long-method-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="问题的原因" tabindex="-1"><a class="header-anchor" href="#问题的原因" aria-hidden="true">#</a> 问题的原因</h3><p>通常情况下，创建一个新函数的难度要大于添加功能到一个已存在的函数。大部分人都觉得：“我就添加这么两行代码，为此新建一个函数实在是小题大做了。”于是，张三加两行，李四加两行，王五加两行。。。函数日益庞大，最终烂的像一锅浆糊，再也没人能完全看懂了。于是大家就更不敢轻易动这个函数了，只能恶性循环的往其中添加代码。所以，如果你看到一个超过 200 行的函数，通常都是多个程序员东拼西凑出来的。</p><h3 id="解决函数" tabindex="-1"><a class="header-anchor" href="#解决函数" aria-hidden="true">#</a> 解决函数</h3><p>一个很好的技巧是：<strong>寻找注释</strong>。添加注释，一般有这么几个原因：代码逻辑较为晦涩或复杂；这段代码功能相对独立；特殊处理。<br> 如果代码前方有一行注释，就是在提醒你：可以将这段代码替换成一个函数，而且可以在注释的基础上给这个函数命名。如果函数有一个描述恰当的名字，就不需要去看内部代码究竟是如何实现的。就算只有一行代码，如果它需要以注释来说明，那也值得将它提炼到独立函数中。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/long-method-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>为了给一个函数瘦身，可以使用 <code>提炼函数(Extract Method)</code>。</li><li>如果局部变量和参数干扰提炼函数，可以使用 <code>以查询取代临时变量(Replace Temp with Query)</code>，<code>引入参数对象(Introduce Parameter Object)</code> 或 <code>保持对象完整(Preserve Whole Object)</code> 。</li><li>如果前面两条没有帮助，可以通过 <code>以函数对象取代函数(Replace Method with Method Object)</code> 尝试移动整个函数到一个独立的对象中。</li><li>条件表达式和循环常常也是提炼的信号。对于条件表达式，可以使用 <code>分解条件表达式(Decompose Conditional)</code> 。至于循环，应该使用 <code>提炼函数(Extract Method)</code> 将循环和其内的代码提炼到独立函数中。</li></ul><h3 id="收益-3" tabindex="-1"><a class="header-anchor" href="#收益-3" aria-hidden="true">#</a> 收益</h3><ul><li>在所有类型的面向对象代码中，函数比较短小精悍的类往往生命周期较长。一个函数越长，就越不容易理解和维护。</li><li>此外，过长函数中往往含有难以发现的重复代码。</li></ul><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/long-method-3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="性能" tabindex="-1"><a class="header-anchor" href="#性能" aria-hidden="true">#</a> 性能</h3><p>是否像许多人说的那样，增加函数的数量会影响性能？在几乎绝大多数情况下，这种影响是可以忽略不计，所以不用担心。<br> 此外，现在有了清晰和易读的代码，在需要的时候，你将更容易找到真正有效的函数来重组代码和提高性能。</p><h3 id="重构方法说明-3" tabindex="-1"><a class="header-anchor" href="#重构方法说明-3" aria-hidden="true">#</a> 重构方法说明</h3><h4 id="提炼函数-extract-method" tabindex="-1"><a class="header-anchor" href="#提炼函数-extract-method" aria-hidden="true">#</a> 提炼函数(Extract Method)</h4><p><strong>问题</strong></p><p>你有一段代码可以组织在一起。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">printOwing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">printBanner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">//print details</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;name: &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;amount: &quot;</span> <span class="token operator">+</span> <span class="token function">getOutstanding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解决</strong></p><p>移动这段代码到一个新的函数中，使用函数的调用来替代老代码。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">printOwing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">printBanner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printDetails</span><span class="token punctuation">(</span><span class="token function">getOutstanding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">printDetails</span><span class="token punctuation">(</span><span class="token keyword">double</span> outstanding<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;name: &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;amount: &quot;</span> <span class="token operator">+</span> outstanding<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="以查询取代临时变量-replace-temp-with-query" tabindex="-1"><a class="header-anchor" href="#以查询取代临时变量-replace-temp-with-query" aria-hidden="true">#</a> 以查询取代临时变量(Replace Temp with Query)</h4><p><strong>问题</strong></p><p>将表达式的结果放在局部变量中，然后在代码中使用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">double</span> <span class="token function">calculateTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">double</span> basePrice <span class="token operator">=</span> quantity <span class="token operator">*</span> itemPrice<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>basePrice <span class="token operator">&gt;</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> basePrice <span class="token operator">*</span> <span class="token number">0.95</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> basePrice <span class="token operator">*</span> <span class="token number">0.98</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解决</strong></p><p>将整个表达式移动到一个独立的函数中并返回结果。使用查询函数来替代使用变量。如果需要，可以在其他函数中合并新函数。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">double</span> <span class="token function">calculateTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">basePrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">basePrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.95</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">basePrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.98</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">double</span> <span class="token function">basePrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> quantity <span class="token operator">*</span> itemPrice<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="引入参数对象-introduce-parameter-object-2" tabindex="-1"><a class="header-anchor" href="#引入参数对象-introduce-parameter-object-2" aria-hidden="true">#</a> 引入参数对象(Introduce Parameter Object)</h4><p><strong>问题</strong></p><p>某些参数总是很自然地同时出现。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/introduce-parameter-object-before.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>解决</strong></p><p>以一个对象来取代这些参数。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/introduce-parameter-object-after.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="保持对象完整-preserve-whole-object-2" tabindex="-1"><a class="header-anchor" href="#保持对象完整-preserve-whole-object-2" aria-hidden="true">#</a> 保持对象完整(Preserve Whole Object)</h4><p><strong>问题</strong></p><p>你从某个对象中取出若干值，将它们作为某一次函数调用时的参数。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> low <span class="token operator">=</span> daysTempRange<span class="token punctuation">.</span><span class="token function">getLow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> high <span class="token operator">=</span> daysTempRange<span class="token punctuation">.</span><span class="token function">getHigh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> withinPlan <span class="token operator">=</span> plan<span class="token punctuation">.</span><span class="token function">withinRange</span><span class="token punctuation">(</span>low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解决</strong></p><p>改为传递整个对象。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">boolean</span> withinPlan <span class="token operator">=</span> plan<span class="token punctuation">.</span><span class="token function">withinRange</span><span class="token punctuation">(</span>daysTempRange<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="以函数对象取代函数-replace-method-with-method-object" tabindex="-1"><a class="header-anchor" href="#以函数对象取代函数-replace-method-with-method-object" aria-hidden="true">#</a> 以函数对象取代函数(Replace Method with Method Object)</h4><p><strong>问题</strong></p><p>你有一个过长函数，它的局部变量交织在一起，以致于你无法应用提炼函数(Extract Method) 。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span>
  <span class="token comment">//...</span>
  <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">double</span> primaryBasePrice<span class="token punctuation">;</span>
    <span class="token keyword">double</span> secondaryBasePrice<span class="token punctuation">;</span>
    <span class="token keyword">double</span> tertiaryBasePrice<span class="token punctuation">;</span>
    <span class="token comment">// long computation.</span>
    <span class="token comment">//...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解决</strong></p><p>将函数移到一个独立的类中，使得局部变量成了这个类的字段。然后，你可以将函数分割成这个类中的多个函数。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span>
  <span class="token comment">//...</span>
  <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PriceCalculator</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">PriceCalculator</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">double</span> primaryBasePrice<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">double</span> secondaryBasePrice<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">double</span> tertiaryBasePrice<span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token class-name">PriceCalculator</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// copy relevant information from order object.</span>
    <span class="token comment">//...</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// long computation.</span>
    <span class="token comment">//...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="分解条件表达式-decompose-conditional" tabindex="-1"><a class="header-anchor" href="#分解条件表达式-decompose-conditional" aria-hidden="true">#</a> 分解条件表达式(Decompose Conditional)</h4><p><strong>问题</strong></p><p>你有复杂的条件表达式。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token constant">SUMMER_START</span><span class="token punctuation">)</span> <span class="token operator">||</span> date<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token constant">SUMMER_END</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  charge <span class="token operator">=</span> quantity <span class="token operator">*</span> winterRate <span class="token operator">+</span> winterServiceCharge<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span> <span class="token punctuation">{</span>
  charge <span class="token operator">=</span> quantity <span class="token operator">*</span> summerRate<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解决</strong></p><p>根据条件分支将整个条件表达式分解成几个函数。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">notSummer</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  charge <span class="token operator">=</span> <span class="token function">winterCharge</span><span class="token punctuation">(</span>quantity<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span> <span class="token punctuation">{</span>
  charge <span class="token operator">=</span> <span class="token function">summerCharge</span><span class="token punctuation">(</span>quantity<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="过长参数列" tabindex="-1"><a class="header-anchor" href="#过长参数列" aria-hidden="true">#</a> 过长参数列</h2><blockquote><p>过长参数列(Long Parameter List)</p><p>一个函数有超过 3、4 个入参。</p></blockquote><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/long-parameter-list-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="问题原因-3" tabindex="-1"><a class="header-anchor" href="#问题原因-3" aria-hidden="true">#</a> 问题原因</h3><p>过长参数列可能是将多个算法并到一个函数中时发生的。函数中的入参可以用来控制最终选用哪个算法去执行。</p><p>过长参数列也可能是解耦类之间依赖关系时的副产品。例如，用于创建函数中所需的特定对象的代码已从函数移动到调用函数的代码处，但创建的对象是作为参数传递到函数中。因此，原始类不再知道对象之间的关系，并且依赖性也已经减少。但是如果创建的这些对象，每一个都将需要它自己的参数，这意味着过长参数列。</p><p>太长的参数列难以理解，太多参数会造成前后不一致、不易使用，而且一旦需要更多数据，就不得不修改它。</p><h3 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案" aria-hidden="true">#</a> 解决方案</h3><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/long-parameter-list-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>如果向已有的对象发出一条请求就可以取代一个参数，那么你应该使用 <code>以函数取代参数(Replace Parameter with Methods)</code> 。在这里，，“已有的对象”可能是函数所属类里的一个字段，也可能是另一个参数。</li><li>你还可以运用 <code>保持对象完整(Preserve Whole Object)</code> 将来自同一对象的一堆数据收集起来，并以该对象替换它们。</li><li>如果某些数据缺乏合理的对象归属，可使用 <code>引入参数对象(Introduce Parameter Object)</code> 为它们制造出一个“参数对象”。</li></ul><h3 id="收益-4" tabindex="-1"><a class="header-anchor" href="#收益-4" aria-hidden="true">#</a> 收益</h3><ul><li>更易读，更简短的代码。</li><li>重构可能会暴露出之前未注意到的重复代码。</li></ul><h3 id="何时忽略-1" tabindex="-1"><a class="header-anchor" href="#何时忽略-1" aria-hidden="true">#</a> 何时忽略</h3><ul><li>这里有一个重要的例外：有时候你明显不想造成&quot;被调用对象&quot;与&quot;较大对象&quot;间的某种依赖关系。这时候将数据从对象中拆解出来单独作为参数，也很合情理。但是请注意其所引发的代价。如果参数列太长或变化太频繁，就需要重新考虑自己的依赖结构了。</li></ul><h3 id="重构方法说明-4" tabindex="-1"><a class="header-anchor" href="#重构方法说明-4" aria-hidden="true">#</a> 重构方法说明</h3><h4 id="以函数取代参数-replace-parameter-with-methods" tabindex="-1"><a class="header-anchor" href="#以函数取代参数-replace-parameter-with-methods" aria-hidden="true">#</a> 以函数取代参数(Replace Parameter with Methods)</h4><p><strong>问题</strong></p><p>对象调用某个函数，并将所得结果作为参数，传递给另一个函数。而接受该参数的函数本身也能够调用前一个函数。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> basePrice <span class="token operator">=</span> quantity <span class="token operator">*</span> itemPrice<span class="token punctuation">;</span>
<span class="token keyword">double</span> seasonDiscount <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSeasonalDiscount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> fees <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getFees</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> finalPrice <span class="token operator">=</span> <span class="token function">discountedPrice</span><span class="token punctuation">(</span>basePrice<span class="token punctuation">,</span> seasonDiscount<span class="token punctuation">,</span> fees<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解决</strong></p><p>让参数接受者去除该项参数，并直接调用前一个函数。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> basePrice <span class="token operator">=</span> quantity <span class="token operator">*</span> itemPrice<span class="token punctuation">;</span>
<span class="token keyword">double</span> finalPrice <span class="token operator">=</span> <span class="token function">discountedPrice</span><span class="token punctuation">(</span>basePrice<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="保持对象完整-preserve-whole-object-3" tabindex="-1"><a class="header-anchor" href="#保持对象完整-preserve-whole-object-3" aria-hidden="true">#</a> 保持对象完整(Preserve Whole Object)</h4><p><strong>问题</strong></p><p>你从某个对象中取出若干值，将它们作为某一次函数调用时的参数。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> low <span class="token operator">=</span> daysTempRange<span class="token punctuation">.</span><span class="token function">getLow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> high <span class="token operator">=</span> daysTempRange<span class="token punctuation">.</span><span class="token function">getHigh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> withinPlan <span class="token operator">=</span> plan<span class="token punctuation">.</span><span class="token function">withinRange</span><span class="token punctuation">(</span>low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解决</strong></p><p>改为传递整个对象。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">boolean</span> withinPlan <span class="token operator">=</span> plan<span class="token punctuation">.</span><span class="token function">withinRange</span><span class="token punctuation">(</span>daysTempRange<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="引入参数对象-introduce-parameter-object-3" tabindex="-1"><a class="header-anchor" href="#引入参数对象-introduce-parameter-object-3" aria-hidden="true">#</a> 引入参数对象(Introduce Parameter Object)</h4><p><strong>问题</strong></p><p>某些参数总是很自然地同时出现。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/introduce-parameter-object-before.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>解决</strong></p><p>以一个对象来取代这些参数。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/introduce-parameter-object-after.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="扩展阅读" tabindex="-1"><a class="header-anchor" href="#扩展阅读" aria-hidden="true">#</a> 扩展阅读</h2>`,229),g={href:"https://github.com/dunwu/design/blob/master/docs/refactor/%E4%BB%A3%E7%A0%81%E7%9A%84%E5%9D%8F%E5%91%B3%E9%81%93%E5%92%8C%E9%87%8D%E6%9E%84.md",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/dunwu/design/blob/master/docs/refactor/%E4%BB%A3%E7%A0%81%E5%9D%8F%E5%91%B3%E9%81%93%E4%B9%8B%E4%BB%A3%E7%A0%81%E8%87%83%E8%82%BF.md",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/dunwu/design/blob/master/docs/refactor/%E4%BB%A3%E7%A0%81%E5%9D%8F%E5%91%B3%E9%81%93%E4%B9%8B%E6%BB%A5%E7%94%A8%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1.md",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/dunwu/design/blob/master/docs/refactor/%E4%BB%A3%E7%A0%81%E5%9D%8F%E5%91%B3%E9%81%93%E4%B9%8B%E5%8F%98%E9%9D%A9%E7%9A%84%E9%9A%9C%E7%A2%8D.md",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/dunwu/design/blob/master/docs/refactor/%E4%BB%A3%E7%A0%81%E5%9D%8F%E5%91%B3%E9%81%93%E4%B9%8B%E9%9D%9E%E5%BF%85%E8%A6%81%E7%9A%84.md",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/dunwu/design/blob/master/docs/refactor/%E4%BB%A3%E7%A0%81%E5%9D%8F%E5%91%B3%E9%81%93%E4%B9%8B%E8%80%A6%E5%90%88.md",target:"_blank",rel:"noopener noreferrer"},f=a("h2",{id:"参考资料",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#参考资料","aria-hidden":"true"},"#"),n(" 参考资料")],-1),w={href:"https://book.douban.com/subject/4199741/",target:"_blank",rel:"noopener noreferrer"},y={href:"https://book.douban.com/subject/4262627/",target:"_blank",rel:"noopener noreferrer"},x={href:"https://book.douban.com/subject/1477390/",target:"_blank",rel:"noopener noreferrer"},j={href:"https://sourcemaking.com/refactoring",target:"_blank",rel:"noopener noreferrer"};function E(P,_){const s=i("ExternalLinkIcon");return o(),p("div",null,[a("blockquote",null,[a("p",null,[n("翻译自："),a("a",l,[n("https://sourcemaking.com/refactoring/smells/bloaters"),e(s)])]),u]),d,a("ul",null,[a("li",null,[a("a",g,[n("代码的坏味道和重构"),e(s)])]),a("li",null,[a("a",m,[n("代码坏味道之代码臃肿"),e(s)])]),a("li",null,[a("a",h,[n("代码坏味道之滥用面向对象"),e(s)])]),a("li",null,[a("a",k,[n("代码坏味道之变革的障碍"),e(s)])]),a("li",null,[a("a",b,[n("代码坏味道之非必要的"),e(s)])]),a("li",null,[a("a",v,[n("代码坏味道之耦合"),e(s)])])]),f,a("ul",null,[a("li",null,[a("a",w,[n("《代码整洁之道》"),e(s)])]),a("li",null,[a("a",y,[n("《重构 - 改善既有代码的设计》"),e(s)])]),a("li",null,[a("a",x,[n("《代码大全》"),e(s)])]),a("li",null,[a("a",j,[n("https://sourcemaking.com/refactoring"),e(s)])])])])}const q=t(r,[["render",E],["__file","index.html.vue"]]);export{q as default};
