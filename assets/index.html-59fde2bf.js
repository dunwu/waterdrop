import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c,a as n,b as a,d as t,e as i}from"./app-0dbc8ea8.js";const l={},u=i(`<h1 id="spring-校验" tabindex="-1"><a class="header-anchor" href="#spring-校验" aria-hidden="true">#</a> Spring 校验</h1><p>Java API 规范(<code>JSR303</code>)定义了<code>Bean</code>校验的标准<code>validation-api</code>，但没有提供实现。<code>hibernate validation</code>是对这个规范的实现，并增加了校验注解如<code>@Email</code>、<code>@Length</code>等。<code>Spring Validation</code>是对<code>hibernate validation</code>的二次封装，用于支持<code>spring mvc</code>参数自动校验。</p><h2 id="快速入门" tabindex="-1"><a class="header-anchor" href="#快速入门" aria-hidden="true">#</a> 快速入门</h2><h3 id="引入依赖" tabindex="-1"><a class="header-anchor" href="#引入依赖" aria-hidden="true">#</a> 引入依赖</h3><p>如果 spring-boot 版本小于 2.3.x，spring-boot-starter-web 会自动传入 hibernate-validator 依赖。如果 spring-boot 版本大于 2.3.x，则需要手动引入依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.hibernate.validator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hibernate-validator-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>6.2.5.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于 web 服务来说，为防止非法参数对业务造成影响，在 Controller 层一定要做参数校验的！大部分情况下，请求参数分为如下两种形式：</p><ul><li>POST、PUT 请求，使用 requestBody 传递参数；</li><li>GET 请求，使用 requestParam/PathVariable 传递参数。</li></ul><p>实际上，不管是 requestBody 参数校验还是方法级别的校验，最终都是调用 Hibernate Validator 执行校验，Spring Validation 只是做了一层封装。</p><h3 id="校验示例" tabindex="-1"><a class="header-anchor" href="#校验示例" aria-hidden="true">#</a> 校验示例</h3><p>（1）在实体上标记校验注解</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Data</span>
<span class="token annotation builtin">@NoArgsConstructor</span>
<span class="token annotation builtin">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> User implements Serializable <span class="token punctuation">{</span>

    <span class="token annotation builtin">@NotNull</span>
    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>

    <span class="token annotation builtin">@NotBlank</span>
    <span class="token annotation builtin">@Size</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>

    <span class="token annotation builtin">@Min</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token annotation builtin">@Max</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）在方法参数上声明校验注解</p><div class="language-less line-numbers-mode" data-ext="less"><pre class="language-less"><code><span class="token atrule">@Slf4j
@Validated
@RestController
@RequestMapping<span class="token punctuation">(</span>&quot;validate1&quot;<span class="token punctuation">)</span>
public class ValidatorController</span> <span class="token punctuation">{</span>

    <span class="token comment">/**
     * {@link RequestBody} 参数校验
     */</span>
    <span class="token atrule">@PostMapping<span class="token punctuation">(</span>value = &quot;save&quot;<span class="token punctuation">)</span>
    public DataResult&lt;Boolean&gt; save<span class="token punctuation">(</span>@Valid @RequestBody User entity<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
        log.info<span class="token selector">(&quot;保存一条记录：</span><span class="token punctuation">{</span><span class="token punctuation">}</span>&quot;<span class="token punctuation">,</span> JSONUtil.<span class="token function">toJsonStr</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        return DataResult.<span class="token function">ok</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/**
     * {@link RequestParam} 参数校验
     */</span>
    <span class="token atrule">@GetMapping<span class="token punctuation">(</span>value = &quot;queryByName&quot;<span class="token punctuation">)</span>
    public DataResult&lt;User&gt; queryByName<span class="token punctuation">(</span>
        @RequestParam<span class="token punctuation">(</span>&quot;username&quot;<span class="token punctuation">)</span>
        @NotBlank
        @Size<span class="token punctuation">(</span>min = 2, max = 10<span class="token punctuation">)</span>
        String name
    <span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
        User user = new <span class="token function">User</span><span class="token punctuation">(</span>1L<span class="token punctuation">,</span> name<span class="token punctuation">,</span> 18<span class="token punctuation">)</span><span class="token punctuation">;</span>
        return DataResult.<span class="token function">ok</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/**
     * {@link PathVariable} 参数校验
     */</span>
    <span class="token variable">@GetMapping</span><span class="token selector">(value = &quot;detail/</span><span class="token punctuation">{</span>id<span class="token punctuation">}</span>&quot;<span class="token selector">)
    public DataResult&lt;User&gt; detail(<span class="token variable">@PathVariable</span>(&quot;id&quot;) <span class="token variable">@Min</span>(1L) Long id)</span> <span class="token punctuation">{</span>
        User user = new <span class="token function">User</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token string">&quot;李四&quot;</span><span class="token punctuation">,</span> 18<span class="token punctuation">)</span><span class="token punctuation">;</span>
        return DataResult.<span class="token function">ok</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（3）如果请求参数不满足校验规则，则会抛出 <code>ConstraintViolationException</code> 或 <code>MethodArgumentNotValidException</code> 异常。</p><h3 id="统一异常处理" tabindex="-1"><a class="header-anchor" href="#统一异常处理" aria-hidden="true">#</a> 统一异常处理</h3><p>在实际项目开发中，通常会用统一异常处理来返回一个更友好的提示。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@ControllerAdvice</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 处理所有不可知的异常
     */</span>
    <span class="token annotation punctuation">@ResponseBody</span>
    <span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">OK</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">handleException</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;未知异常&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token class-name">ResultStatus</span><span class="token punctuation">.</span><span class="token constant">HTTP_SERVER_ERROR</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 统一处理请求参数校验异常(普通传参)
     *
     * <span class="token keyword">@param</span> <span class="token parameter">e</span> ConstraintViolationException
     * <span class="token keyword">@return</span> <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">DataResult</span></span><span class="token punctuation">}</span>
     */</span>
    <span class="token annotation punctuation">@ResponseBody</span>
    <span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">BAD_REQUEST</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">ConstraintViolationException</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">handleConstraintViolationException</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ConstraintViolationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;ConstraintViolationException&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> errors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ConstraintViolation</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> violation <span class="token operator">:</span> e<span class="token punctuation">.</span><span class="token function">getConstraintViolations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Path</span> path <span class="token operator">=</span> violation<span class="token punctuation">.</span><span class="token function">getPropertyPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> pathArr <span class="token operator">=</span> <span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token char">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            errors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pathArr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> violation<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token class-name">ResultStatus</span><span class="token punctuation">.</span><span class="token constant">REQUEST_ERROR</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">CollectionUtil</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>errors<span class="token punctuation">,</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 处理参数校验异常
     *
     * <span class="token keyword">@param</span> <span class="token parameter">e</span> MethodArgumentNotValidException
     * <span class="token keyword">@return</span> <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">DataResult</span></span><span class="token punctuation">}</span>
     */</span>
    <span class="token annotation punctuation">@ResponseBody</span>
    <span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">BAD_REQUEST</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">MethodArgumentNotValidException</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Result</span> <span class="token function">handleMethodArgumentNotValidException</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">MethodArgumentNotValidException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;MethodArgumentNotValidException&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> errors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ObjectError</span> error <span class="token operator">:</span> e<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAllErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            errors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">FieldError</span><span class="token punctuation">)</span> error<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> error<span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token class-name">ResultStatus</span><span class="token punctuation">.</span><span class="token constant">REQUEST_ERROR</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">CollectionUtil</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>errors<span class="token punctuation">,</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="进阶使用" tabindex="-1"><a class="header-anchor" href="#进阶使用" aria-hidden="true">#</a> 进阶使用</h2><h3 id="分组校验" tabindex="-1"><a class="header-anchor" href="#分组校验" aria-hidden="true">#</a> 分组校验</h3><p>在实际项目中，可能多个方法需要使用同一个 DTO 类来接收参数，而不同方法的校验规则很可能是不一样的。这个时候，简单地在 DTO 类的字段上加约束注解无法解决这个问题。因此，spring-validation 支持了分组校验的功能，专门用来解决这类问题。</p><p>（1）定义分组</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">FIELD</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">PARAMETER</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">AddCheck</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">FIELD</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">PARAMETER</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">EditCheck</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）在实体上标记校验注解</p><div class="language-less line-numbers-mode" data-ext="less"><pre class="language-less"><code><span class="token atrule">@Data
public class User2</span> <span class="token punctuation">{</span>

    <span class="token variable">@NotNull</span><span class="token punctuation">(</span>groups = EditCheck.class<span class="token punctuation">)</span>
    private Long id<span class="token punctuation">;</span>

    <span class="token variable">@NotNull</span><span class="token selector">(groups =</span> <span class="token punctuation">{</span> AddCheck.class<span class="token punctuation">,</span> EditCheck.class <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token variable">@Size</span><span class="token selector">(min = 2, max = 10, groups =</span> <span class="token punctuation">{</span> AddCheck.class<span class="token punctuation">,</span> EditCheck.class <span class="token punctuation">}</span><span class="token punctuation">)</span>
    private String name<span class="token punctuation">;</span>

    <span class="token variable">@IsMobile</span><span class="token selector">(message = &quot;不是有效手机号&quot;, groups =</span> <span class="token punctuation">{</span> AddCheck.class<span class="token punctuation">,</span> EditCheck.class <span class="token punctuation">}</span><span class="token punctuation">)</span>
    private String mobile<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（3）在方法上根据不同场景进行校验分组</p><div class="language-less line-numbers-mode" data-ext="less"><pre class="language-less"><code><span class="token atrule">@Slf4j
@Validated
@RestController
@RequestMapping<span class="token punctuation">(</span>&quot;validate2&quot;<span class="token punctuation">)</span>
public class ValidatorController2</span> <span class="token punctuation">{</span>

    <span class="token comment">/**
     * {@link RequestBody} 参数校验
     */</span>
    <span class="token atrule">@PostMapping<span class="token punctuation">(</span>value = &quot;add&quot;<span class="token punctuation">)</span>
    public DataResult&lt;Boolean&gt; add<span class="token punctuation">(</span>@Validated<span class="token punctuation">(</span>AddCheck.class<span class="token punctuation">)</span> @RequestBody User2 entity<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
        log.info<span class="token selector">(&quot;添加一条记录：</span><span class="token punctuation">{</span><span class="token punctuation">}</span>&quot;<span class="token punctuation">,</span> JSONUtil.<span class="token function">toJsonStr</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        return DataResult.<span class="token function">ok</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/**
     * {@link RequestBody} 参数校验
     */</span>
    <span class="token atrule">@PostMapping<span class="token punctuation">(</span>value = &quot;edit&quot;<span class="token punctuation">)</span>
    public DataResult&lt;Boolean&gt; edit<span class="token punctuation">(</span>@Validated<span class="token punctuation">(</span>EditCheck.class<span class="token punctuation">)</span> @RequestBody User2 entity<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
        log.info<span class="token selector">(&quot;编辑一条记录：</span><span class="token punctuation">{</span><span class="token punctuation">}</span>&quot;<span class="token punctuation">,</span> JSONUtil.<span class="token function">toJsonStr</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        return DataResult.<span class="token function">ok</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="嵌套校验" tabindex="-1"><a class="header-anchor" href="#嵌套校验" aria-hidden="true">#</a> 嵌套校验</h3><p>前面的示例中，DTO 类里面的字段都是基本数据类型和 String 类型。但是实际场景中，有可能某个字段也是一个对象，这种情况先，可以使用嵌套校验。<br> post<br> 比如，上面保存 User 信息的时候同时还带有 Job 信息。需要注意的是，此时 DTO 类的对应字段必须标记@Valid 注解。</p><div class="language-less line-numbers-mode" data-ext="less"><pre class="language-less"><code><span class="token atrule">@Data
public class UserDTO</span> <span class="token punctuation">{</span>

    <span class="token variable">@Min</span><span class="token punctuation">(</span>value = 10000000000000000L<span class="token punctuation">,</span> groups = Update.class<span class="token punctuation">)</span>
    private Long userId<span class="token punctuation">;</span>

    <span class="token variable">@NotNull</span><span class="token selector">(groups =</span> <span class="token punctuation">{</span>Save.class<span class="token punctuation">,</span> Update.class<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token variable">@Length</span><span class="token selector">(min = 2, max = 10, groups =</span> <span class="token punctuation">{</span>Save.class<span class="token punctuation">,</span> Update.class<span class="token punctuation">}</span><span class="token punctuation">)</span>
    private String userName<span class="token punctuation">;</span>

    <span class="token variable">@NotNull</span><span class="token selector">(groups =</span> <span class="token punctuation">{</span>Save.class<span class="token punctuation">,</span> Update.class<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token variable">@Length</span><span class="token selector">(min = 6, max = 20, groups =</span> <span class="token punctuation">{</span>Save.class<span class="token punctuation">,</span> Update.class<span class="token punctuation">}</span><span class="token punctuation">)</span>
    private String account<span class="token punctuation">;</span>

    <span class="token variable">@NotNull</span><span class="token selector">(groups =</span> <span class="token punctuation">{</span>Save.class<span class="token punctuation">,</span> Update.class<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token variable">@Length</span><span class="token selector">(min = 6, max = 20, groups =</span> <span class="token punctuation">{</span>Save.class<span class="token punctuation">,</span> Update.class<span class="token punctuation">}</span><span class="token punctuation">)</span>
    private String password<span class="token punctuation">;</span>

    <span class="token variable">@NotNull</span><span class="token selector">(groups =</span> <span class="token punctuation">{</span>Save.class<span class="token punctuation">,</span> Update.class<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token variable">@Valid</span>
    private Job job<span class="token punctuation">;</span>

    <span class="token atrule">@Data
    public static class Job</span> <span class="token punctuation">{</span>

        <span class="token variable">@Min</span><span class="token punctuation">(</span>value = 1<span class="token punctuation">,</span> groups = Update.class<span class="token punctuation">)</span>
        private Long jobId<span class="token punctuation">;</span>

        <span class="token variable">@NotNull</span><span class="token selector">(groups =</span> <span class="token punctuation">{</span>Save.class<span class="token punctuation">,</span> Update.class<span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token variable">@Length</span><span class="token selector">(min = 2, max = 10, groups =</span> <span class="token punctuation">{</span>Save.class<span class="token punctuation">,</span> Update.class<span class="token punctuation">}</span><span class="token punctuation">)</span>
        private String jobName<span class="token punctuation">;</span>

        <span class="token variable">@NotNull</span><span class="token selector">(groups =</span> <span class="token punctuation">{</span>Save.class<span class="token punctuation">,</span> Update.class<span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token variable">@Length</span><span class="token selector">(min = 2, max = 10, groups =</span> <span class="token punctuation">{</span>Save.class<span class="token punctuation">,</span> Update.class<span class="token punctuation">}</span><span class="token punctuation">)</span>
        private String position<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/**
     * 保存的时候校验分组
     */</span>
    <span class="token selector">public interface Save</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/**
     * 更新的时候校验分组
     */</span>
    <span class="token selector">public interface Update</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>嵌套校验可以结合分组校验一起使用。还有就是嵌套集合校验会对集合里面的每一项都进行校验，例如<code>List&lt;Job&gt;</code>字段会对这个 list 里面的每一个 Job 对象都进行校验</p><h3 id="自定义校验注解" tabindex="-1"><a class="header-anchor" href="#自定义校验注解" aria-hidden="true">#</a> 自定义校验注解</h3><p>（1）自定义校验注解 <code>@IsMobile</code></p><div class="language-less line-numbers-mode" data-ext="less"><pre class="language-less"><code><span class="token variable">@Target</span><span class="token selector">(</span><span class="token punctuation">{</span> METHOD<span class="token punctuation">,</span> FIELD<span class="token punctuation">,</span> ANNOTATION_TYPE<span class="token punctuation">,</span> CONSTRUCTOR<span class="token punctuation">,</span> PARAMETER<span class="token punctuation">,</span> TYPE_USE <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token atrule">@Retention<span class="token punctuation">(</span>RUNTIME<span class="token punctuation">)</span>
@Constraint<span class="token punctuation">(</span>validatedBy = MobileValidator.class<span class="token punctuation">)</span>
public @interface IsMobile</span> <span class="token punctuation">{</span>

    String <span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token selector">Class&lt;?&gt;[] groups() default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token selector">Class&lt;? extends Payload&gt;[] payload() default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）实现 <code>ConstraintValidator</code> 接口，编写 <code>@IsMobile</code> 校验注解的解析器</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">StrUtil</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>github<span class="token punctuation">.</span>dunwu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>core<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">IsMobile</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>github<span class="token punctuation">.</span>dunwu<span class="token punctuation">.</span>tool<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ValidatorUtil</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span></span><span class="token class-name">ConstraintValidator</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span></span><span class="token class-name">ConstraintValidatorContext</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MobileValidator</span> <span class="token keyword">implements</span> <span class="token class-name">ConstraintValidator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IsMobile</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token class-name">IsMobile</span> isMobile<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">ConstraintValidatorContext</span> constraintValidatorContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">ValidatorUtil</span><span class="token punctuation">.</span><span class="token function">isMobile</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自定义校验" tabindex="-1"><a class="header-anchor" href="#自定义校验" aria-hidden="true">#</a> 自定义校验</h3><p>可以通过实现 <code>org.springframework.validation.Validator</code> 接口来自定义校验。</p><p>有以下要点</p><ul><li>实现 <code>supports</code> 方法</li><li>实现 <code>validate</code> 方法 <ul><li>通过 <code>Errors</code> 对象收集错误 <ul><li><code>ObjectError</code>：对象（Bean）错误：</li><li><code>FieldError</code>：对象（Bean）属性（Property）错误</li></ul></li><li>通过 <code>ObjectError</code> 和 <code>FieldError</code> 关联 <code>MessageSource</code> 实现获取最终的错误文案</li></ul></li></ul><div class="language-less line-numbers-mode" data-ext="less"><pre class="language-less"><code>package io.github.dunwu.spring.core.validation<span class="token punctuation">;</span>

import io.github.dunwu.spring.core.validation.annotation.Valid<span class="token punctuation">;</span>
import io.github.dunwu.spring.core.validation.config.CustomValidatorConfig<span class="token punctuation">;</span>
import io.github.dunwu.spring.core.validation.entity.Person<span class="token punctuation">;</span>
import org.springframework.stereotype.Component<span class="token punctuation">;</span>
import org.springframework.validation.Errors<span class="token punctuation">;</span>
import org.springframework.validation.ValidationUtils<span class="token punctuation">;</span>
import org.springframework.validation.Validator<span class="token punctuation">;</span>

import java.lang.annotation.Annotation<span class="token punctuation">;</span>
import java.lang.reflect.Field<span class="token punctuation">;</span>
import java.util.ArrayList<span class="token punctuation">;</span>
import java.util.Collections<span class="token punctuation">;</span>
import java.util.List<span class="token punctuation">;</span>

<span class="token atrule">@Component
public class CustomValidator implements Validator</span> <span class="token punctuation">{</span>

    private final CustomValidatorConfig validatorConfig<span class="token punctuation">;</span>

    <span class="token selector">public CustomValidator(CustomValidatorConfig validatorConfig)</span> <span class="token punctuation">{</span>
        this.validatorConfig = validatorConfig<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/**
     * 本校验器只针对 Person 对象进行校验
     */</span>
    <span class="token atrule">@Override
    public boolean supports<span class="token punctuation">(</span>Class&lt;?&gt; clazz<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
        return Person.class.<span class="token function">equals</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token atrule">@Override
    public void validate<span class="token punctuation">(</span>Object target, Errors errors<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
        ValidationUtils.<span class="token function">rejectIfEmpty</span><span class="token punctuation">(</span>errors<span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;name.empty&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        List&lt;Field&gt; fields = <span class="token function">getFields</span><span class="token punctuation">(</span>target.<span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token selector">for (Field field : fields)</span> <span class="token punctuation">{</span>
            Annotation[] annotations = field.<span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token selector">for (Annotation annotation : annotations)</span> <span class="token punctuation">{</span>
                <span class="token selector">if (annotation.annotationType().getAnnotation(Valid.class) != null)</span> <span class="token punctuation">{</span>
                    <span class="token selector">try</span> <span class="token punctuation">{</span>
                        ValidatorRule validatorRule = validatorConfig.<span class="token function">findRule</span><span class="token punctuation">(</span>annotation<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token selector">if (validatorRule != null)</span> <span class="token punctuation">{</span>
                            validatorRule.<span class="token function">valid</span><span class="token punctuation">(</span>annotation<span class="token punctuation">,</span> target<span class="token punctuation">,</span> field<span class="token punctuation">,</span> errors<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span> <span class="token selector">catch (Exception e)</span> <span class="token punctuation">{</span>
                        e.<span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token selector">private List&lt;Field&gt; getFields(Class&lt;?&gt; clazz)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 声明Field数组</span>
        List&lt;Field&gt; fields = new ArrayList&lt;&gt;<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果class类型不为空</span>
        <span class="token selector">while (clazz != null)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 添加属性到属性数组</span>
            Collections.<span class="token function">addAll</span><span class="token punctuation">(</span>fields<span class="token punctuation">,</span> clazz.<span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            clazz = clazz.<span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        return fields<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="快速失败-fail-fast" tabindex="-1"><a class="header-anchor" href="#快速失败-fail-fast" aria-hidden="true">#</a> 快速失败(Fail Fast)</h3><p>Spring Validation 默认会校验完所有字段，然后才抛出异常。可以通过一些简单的配置，开启 Fali Fast 模式，一旦校验失败就立即返回。</p><div class="language-scss line-numbers-mode" data-ext="scss"><pre class="language-scss"><code>@Bean
public Validator <span class="token function">validator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ValidatorFactory validatorFactory = Validation.<span class="token function">byProvider</span><span class="token punctuation">(</span>HibernateValidator.class<span class="token punctuation">)</span>
            .<span class="token function">configure</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token comment">// 快速失败模式</span>
            .<span class="token function">failFast</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
            .<span class="token function">buildValidatorFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    return validatorFactory.<span class="token function">getValidator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="spring-校验原理" tabindex="-1"><a class="header-anchor" href="#spring-校验原理" aria-hidden="true">#</a> Spring 校验原理</h2><h3 id="spring-校验使用场景" tabindex="-1"><a class="header-anchor" href="#spring-校验使用场景" aria-hidden="true">#</a> Spring 校验使用场景</h3><ul><li>Spring 常规校验（Validator）</li><li>Spring 数据绑定（DataBinder）</li><li>Spring Web 参数绑定（WebDataBinder）</li><li>Spring WebMVC/WebFlux 处理方法参数校验</li></ul><h3 id="validator-接口设计" tabindex="-1"><a class="header-anchor" href="#validator-接口设计" aria-hidden="true">#</a> Validator 接口设计</h3><ul><li>接口职责 <ul><li>Spring 内部校验器接口，通过编程的方式校验目标对象</li></ul></li><li>核心方法 <ul><li><code>supports(Class)</code>：校验目标类能否校验</li><li><code>validate(Object,Errors)</code>：校验目标对象，并将校验失败的内容输出至 Errors 对象</li></ul></li><li>配套组件 <ul><li>错误收集器：<code>org.springframework.validation.Errors</code></li><li>Validator 工具类：<code>org.springframework.validation.ValidationUtils</code></li></ul></li></ul><h3 id="errors-接口设计" tabindex="-1"><a class="header-anchor" href="#errors-接口设计" aria-hidden="true">#</a> Errors 接口设计</h3><ul><li>接口职责 <ul><li>数据绑定和校验错误收集接口，与 Java Bean 和其属性有强关联性</li></ul></li><li>核心方法 <ul><li><code>reject</code> 方法（重载）：收集错误文案</li><li><code>rejectValue</code> 方法（重载）：收集对象字段中的错误文案</li></ul></li><li>配套组件 <ul><li>Java Bean 错误描述：<code>org.springframework.validation.ObjectError</code></li><li>Java Bean 属性错误描述：<code>org.springframework.validation.FieldError</code></li></ul></li></ul><h3 id="errors-文案来源" tabindex="-1"><a class="header-anchor" href="#errors-文案来源" aria-hidden="true">#</a> Errors 文案来源</h3><p>Errors 文案生成步骤</p><ul><li>选择 Errors 实现（如：<code>org.springframework.validation.BeanPropertyBindingResult</code>）</li><li>调用 reject 或 rejectValue 方法</li><li>获取 Errors 对象中 ObjectError 或 FieldError</li><li>将 ObjectError 或 FieldError 中的 code 和 args，关联 MessageSource 实现（如：<code>ResourceBundleMessageSource</code>）</li></ul><h3 id="spring-web-校验原理" tabindex="-1"><a class="header-anchor" href="#spring-web-校验原理" aria-hidden="true">#</a> spring web 校验原理</h3><h4 id="requestbody-参数校验实现原理" tabindex="-1"><a class="header-anchor" href="#requestbody-参数校验实现原理" aria-hidden="true">#</a> RequestBody 参数校验实现原理</h4><p>在 spring-mvc 中，<code>RequestResponseBodyMethodProcessor</code> 是用于解析 <code>@RequestBody</code> 标注的参数以及处理<code>@ResponseBody</code> 标注方法的返回值的。其中，执行参数校验的逻辑肯定就在解析参数的方法 <code>resolveArgument()</code> 中：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">resolveArgument</span><span class="token punctuation">(</span><span class="token class-name">MethodParameter</span> parameter<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ModelAndViewContainer</span> mavContainer<span class="token punctuation">,</span>
    <span class="token class-name">NativeWebRequest</span> webRequest<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">WebDataBinderFactory</span> binderFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>

    parameter <span class="token operator">=</span> parameter<span class="token punctuation">.</span><span class="token function">nestedIfOptional</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Object</span> arg <span class="token operator">=</span> <span class="token function">readWithMessageConverters</span><span class="token punctuation">(</span>webRequest<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> parameter<span class="token punctuation">.</span><span class="token function">getNestedGenericParameterType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token class-name">Conventions</span><span class="token punctuation">.</span><span class="token function">getVariableNameForParameter</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>binderFactory <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">WebDataBinder</span> binder <span class="token operator">=</span> binderFactory<span class="token punctuation">.</span><span class="token function">createBinder</span><span class="token punctuation">(</span>webRequest<span class="token punctuation">,</span> arg<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>arg <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 尝试进行参数校验</span>
            <span class="token function">validateIfApplicable</span><span class="token punctuation">(</span>binder<span class="token punctuation">,</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>binder<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isBindExceptionRequired</span><span class="token punctuation">(</span>binder<span class="token punctuation">,</span> parameter<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 如果存在校验错误，则抛出 MethodArgumentNotValidException</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MethodArgumentNotValidException</span><span class="token punctuation">(</span>parameter<span class="token punctuation">,</span> binder<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>mavContainer <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            mavContainer<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token class-name">BindingResult</span><span class="token punctuation">.</span><span class="token constant">MODEL_KEY_PREFIX</span> <span class="token operator">+</span> name<span class="token punctuation">,</span> binder<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token function">adaptArgumentIfNecessary</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，resolveArgument()调用了 validateIfApplicable()进行参数校验。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">validateIfApplicable</span><span class="token punctuation">(</span><span class="token class-name">WebDataBinder</span> binder<span class="token punctuation">,</span> <span class="token class-name">MethodParameter</span> parameter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取参数注解，如 @RequestBody、@Valid、@Validated</span>
    <span class="token class-name">Annotation</span><span class="token punctuation">[</span><span class="token punctuation">]</span> annotations <span class="token operator">=</span> parameter<span class="token punctuation">.</span><span class="token function">getParameterAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Annotation</span> ann <span class="token operator">:</span> annotations<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 先尝试获取 @Validated 注解</span>
        <span class="token class-name">Validated</span> validatedAnn <span class="token operator">=</span> <span class="token class-name">AnnotationUtils</span><span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>ann<span class="token punctuation">,</span> <span class="token class-name">Validated</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果标注了 @Validated，直接开始校验。</span>
        <span class="token comment">// 如果没有，那么判断参数前是否有 Valid 开头的注解。</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>validatedAnn <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> ann<span class="token punctuation">.</span><span class="token function">annotationType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;Valid&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Object</span> hints <span class="token operator">=</span> <span class="token punctuation">(</span>validatedAnn <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> validatedAnn<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token class-name">AnnotationUtils</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>ann<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> validationHints <span class="token operator">=</span> <span class="token punctuation">(</span>hints <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> hints <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>hints<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 执行校验</span>
            binder<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>validationHints<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码，就解释了 Spring 为什么能同时支持 <code>@Validated</code>、<code>@Valid</code> 两个注解。</p><p>接下来，看一下 WebDataBinder.validate() 的实现：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Override</span></span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">validate</span><span class="token punctuation">(</span>Object target<span class="token punctuation">,</span> Errors errors<span class="token punctuation">,</span> Object<span class="token operator">...</span> validationHints<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>targetValidator <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">processConstraintViolations</span><span class="token punctuation">(</span>
            <span class="token comment">// 此处调用 Hibernate Validator 执行真正的校验</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>targetValidator<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token function">asValidationGroups</span><span class="token punctuation">(</span>validationHints<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> errors<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上面代码，可以看出 Spring 校验实际上是基于 Hibernate Validator 的封装。</p><h4 id="方法级别的参数校验实现原理" tabindex="-1"><a class="header-anchor" href="#方法级别的参数校验实现原理" aria-hidden="true">#</a> 方法级别的参数校验实现原理</h4><p>Spring 支持根据方法去进行拦截、校验，原理就在于应用了 AOP 技术。具体来说，是通过 <code>MethodValidationPostProcessor</code> 动态注册 AOP 切面，然后使用 <code>MethodValidationInterceptor</code> 对切点方法织入增强。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodValidationPostProcessor</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractBeanFactoryAwareAdvisingPostProcessorimplements</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 为所有 @Validated 标注的 Bean 创建切面</span>
        <span class="token class-name">Pointcut</span> pointcut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationMatchingPointcut</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>validatedAnnotationType<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 创建 Advisor 进行增强</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>advisor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultPointcutAdvisor</span><span class="token punctuation">(</span>pointcut<span class="token punctuation">,</span> <span class="token function">createMethodValidationAdvice</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>validator<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 创建 Advice，本质就是一个方法拦截器</span>
    <span class="token keyword">protected</span> <span class="token class-name">Advice</span> <span class="token function">createMethodValidationAdvice</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Validator</span> validator<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>validator <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">MethodValidationInterceptor</span><span class="token punctuation">(</span>validator<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">MethodValidationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着看一下 <code>MethodValidationInterceptor</code>：</p><div class="language-scss line-numbers-mode" data-ext="scss"><pre class="language-scss"><code><span class="token selector">public class MethodValidationInterceptor implements MethodInterceptor </span><span class="token punctuation">{</span>
    <span class="token atrule"><span class="token rule">@Override</span>
    public Object <span class="token function">invoke</span><span class="token punctuation">(</span>MethodInvocation invocation<span class="token punctuation">)</span> throws Throwable</span> <span class="token punctuation">{</span>
        <span class="token comment">// 无需增强的方法，直接跳过</span>
        if <span class="token punctuation">(</span><span class="token function">isFactoryBeanMetadataMethod</span><span class="token punctuation">(</span>invocation.<span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            return invocation.<span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 获取分组信息</span>
        Class&lt;?&gt;[] groups = <span class="token function">determineValidationGroups</span><span class="token punctuation">(</span>invocation<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ExecutableValidator execVal = this.validator.<span class="token function">forExecutables</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Method methodToValidate = invocation.<span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Set&lt;ConstraintViolation&lt;Object&gt;&gt; result<span class="token punctuation">;</span>
        <span class="token selector">try </span><span class="token punctuation">{</span>
            <span class="token comment">// 方法入参校验，最终还是委托给 Hibernate Validator 来校验</span>
            result = execVal.<span class="token function">validateParameters</span><span class="token punctuation">(</span>
                invocation.<span class="token function">getThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> methodToValidate<span class="token punctuation">,</span> invocation.<span class="token function">getArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> groups<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        catch <span class="token punctuation">(</span>IllegalArgumentException ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ...
        <span class="token punctuation">}</span>
        <span class="token comment">// 有异常直接抛出</span>
        if <span class="token punctuation">(</span>!result.<span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            throw new <span class="token function">ConstraintViolationException</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 真正的方法调用</span>
        Object returnValue = invocation.<span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 对返回值做校验，最终还是委托给Hibernate Validator来校验</span>
        result = execVal.<span class="token function">validateReturnValue</span><span class="token punctuation">(</span>invocation.<span class="token function">getThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> methodToValidate<span class="token punctuation">,</span> returnValue<span class="token punctuation">,</span> groups<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 有异常直接抛出</span>
        if <span class="token punctuation">(</span>!result.<span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            throw new <span class="token function">ConstraintViolationException</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        return returnValue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际上，不管是 requestBody 参数校验还是方法级别的校验，最终都是调用 Hibernate Validator 执行校验，Spring Validation 只是做了一层封装。</p><h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题</h2><p><strong>Spring 有哪些校验核心组件</strong>？</p><ul><li>检验器：<code>org.springframework.validation.Validator</code></li><li>错误收集器：<code>org.springframework.validation.Errors</code></li><li>Java Bean 错误描述：<code>org.springframework.validation.ObjectError</code></li><li>Java Bean 属性错误描述：<code>org.springframework.validation.FieldError</code></li><li>Bean Validation 适配：<code>org.springframework.validation.beanvalidation.LocalValidatorFactoryBean</code></li></ul><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,74),r={href:"https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans",target:"_blank",rel:"noopener noreferrer"},d={href:"https://time.geekbang.org/course/intro/265",target:"_blank",rel:"noopener noreferrer"},k={href:"https://juejin.cn/post/6856541106626363399",target:"_blank",rel:"noopener noreferrer"};function v(m,b){const s=p("ExternalLinkIcon");return o(),c("div",null,[u,n("ul",null,[n("li",null,[n("a",r,[a("Spring 官方文档之 Core Technologies"),t(s)])]),n("li",null,[n("a",d,[a("《小马哥讲 Spring 核心编程思想》"),t(s)])]),n("li",null,[n("a",k,[a("https://juejin.cn/post/6856541106626363399"),t(s)])])])])}const f=e(l,[["render",v],["__file","index.html.vue"]]);export{f as default};
