import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as d,c as a,a as t,b as o,d as r,e as s}from"./app-a70a1432.js";const g={},l=s(`<h1 id="mq-面试" tabindex="-1"><a class="header-anchor" href="#mq-面试" aria-hidden="true">#</a> MQ 面试</h1><h2 id="mq-简介" tabindex="-1"><a class="header-anchor" href="#mq-简介" aria-hidden="true">#</a> MQ 简介</h2><h3 id="【简单】mq-是什么" tabindex="-1"><a class="header-anchor" href="#【简单】mq-是什么" aria-hidden="true">#</a> 【简单】MQ 是什么？</h3><p><strong>MQ（Message Queue，消息队列）</strong> 是一种<strong>异步通信机制</strong>，用于在不同服务、应用或系统组件之间<strong>可靠地传递消息</strong>。它的核心思想是<strong>解耦生产者和消费者</strong>，通过缓冲消息来提高系统的可靠性、扩展性和可维护性。</p><p><strong>MQ 的核心概念</strong></p><ul><li><strong>生产者（Producer）</strong>：发送消息的应用或服务。</li><li><strong>消费者（Consumer）</strong>：接收并处理消息的应用或服务。</li><li><strong>消息（Message）</strong>：传输的数据单位，可以是文本、JSON、二进制等格式。</li><li><strong>队列（Queue）</strong>：存储消息的缓冲区，遵循 <strong>FIFO（先进先出）</strong> 或优先级策略。</li><li><strong>Broker（消息代理）</strong>：负责接收、存储和转发消息的中间件（如 RabbitMQ、Kafka）。</li><li><strong>背压</strong>：背压是一种消息传递机制中的流控策略。当消费者处理速度跟不上生产者发送速度时，通过<strong>反向施加压力</strong>，迫使生产者降速或停止发送，以防止系统被压垮。</li></ul><p>目前主流的 MQ 有：Kafka、RabbitMQ、RocketMQ、ActiveMQ。</p><h3 id="【简单】mq-有哪些应用场景-🌟" tabindex="-1"><a class="header-anchor" href="#【简单】mq-有哪些应用场景-🌟" aria-hidden="true">#</a> 【简单】MQ 有哪些应用场景？🌟</h3><div class="hint-container tip"><p class="hint-container-title">关键点</p><p>MQ 的典型应用场景</p><ul><li><strong>异步处理</strong></li><li><strong>系统解耦</strong></li><li><strong>流量削峰</strong></li><li><strong>系统间通信</strong></li><li><strong>传输缓冲</strong></li><li><strong>最终一致性</strong></li></ul></div><div class="hint-container info"><p class="hint-container-title">异步处理</p></div><p>MQ 可以将系统间的处理流程异步化，减少等待响应的时间，从而提高整体并发吞吐量。一般，MQ 异步处理应用于非核心流程，例如：短信/邮件通知、数据推送、上报数据到监控中心、日志中心等。</p><p>假设这样一个场景，用户向系统 A 发起请求，系统 A 处理计算只需要 <code>10ms</code>，然后通知系统 BCD 写库，系统 BCD 写库耗时分别为：<code>100ms</code>、<code>200ms</code>、<code>300ms</code>。最终总耗时为： <code>10ms+100ms+200ms+300ms=610ms</code>。此外，加上请求和响应的网络传输时间，从用户角度看，可能要等待将近 <code>1s</code> 才能得到结果。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202502021707928.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果使用 MQ，系统 A 接到请求后，耗时 <code>10ms</code> 处理计算，然后向系统 BCD 连续发送消息，假设耗时 <code>5ms</code>。那么 这一过程的总耗时为 <code>3ms + 5ms = 8ms</code>，这相比于 <code>610 ms</code>，大大缩短了响应时间。至于系统 BCD 的写库操作，只要自行消费 MQ 后处理即可，用户无需关注。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202502021707517.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="hint-container info"><p class="hint-container-title">系统解耦</p></div><p>通过 MQ，可以消除系统间的强耦合。它的好处在于：</p><ul><li>消息的消费者系统可以随意增加，无需修改生产者系统的代码。</li><li>生产者系统、消费者系统彼此不会影响对方的流程。 <ul><li>如果生产者系统宕机，消费者系统收不到消息，就不会有下一步的动作。</li><li>如果消费者系统宕机，生产者系统让然可以正常发送消息，不影响流程。</li></ul></li></ul><p>不同系统如果要建立通信，传统的做法是：调用接口。</p><p>如果需要和新的系统建立通信或删除已建立的通信，都需要修改代码，这种方案显然耦合度很高。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202502021719775.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果使用 MQ，系统间的通信只需要通过发布/订阅（Pub/Sub）模型即可，彼此没有直接联系，也就不需要相互感知，从而达到 <strong>解耦</strong>。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202502021719470.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="hint-container info"><p class="hint-container-title">流量削峰</p></div><p>当 <strong>上下游系统</strong> 处理能力存在差距的时候，利用 MQ 做一个 “<strong>漏斗</strong>” 模型，进行 <strong>流控</strong>。把 MQ 当成可靠的 <strong>消息缓冲池</strong>，进行一定程度的 <strong>消息堆积</strong>；在下游有能力处理的时候，再发送消息。</p><p>MQ 的流量削峰常用于高并发场景（例如：秒杀、团抢等业务场景），它是缓解瞬时暴增流量的核心手段之一。</p><p>如果没有 MQ，两个系统之间通过 <strong>协商</strong>、<strong>滑动窗口</strong>、<strong>限流</strong>/<strong>降级</strong>/<strong>熔断</strong> 等复杂的方案也能实现 <strong>流控</strong>。但 <strong>系统复杂性</strong> 指数级增长，势必在上游或者下游做存储，并且要处理 <strong>定时</strong>、<strong>拥塞</strong> 等一系列问题。而且每当有 <strong>处理能力有差距</strong> 的时候，都需要 <strong>单独</strong> 开发一套逻辑来维护这套逻辑。</p><p>假设某个系统读写数据库的稳定性能为每秒处理 1000 条数据。平常情况下，远远达不到这么大的处理量。假设，因为因为做活动，系统的瞬时请求量剧增，达到每秒 10000 个并发请求，数据库根本承受不了，可能直接就把数据库给整崩溃了，这样系统服务就不可用了。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202502021738906.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果使用 MQ，每秒写入 10000 条请求，但是系统 A 每秒只从 MQ 中消费 1000 条请求，然后写入数据库。这样，就不会超过数据库的承受能力，而是把请求积压在 MQ 中。只要高峰期一过，系统 A 就会很快把积压的消息给处理掉。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202502021739806.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="hint-container info"><p class="hint-container-title">系统间通信</p></div><p>消息队列一般都内置了 <strong>高效的通信机制</strong>，因此也可以用于单纯的 <strong>消息通讯</strong>，比如实现 <strong>点对点消息队列</strong> 或者 <strong>聊天室</strong> 等。</p><p><strong>生产者/消费者</strong> 模式，只需要关心消息是否 <strong>送达队列</strong>，至于谁希望订阅和需要消费，是 <strong>下游</strong> 的事情，无疑极大地减少了开发和联调的工作量。</p><div class="hint-container info"><p class="hint-container-title">传输缓冲</p></div><p>（1）MQ 常被用于做海量数据的传输缓冲。</p><p>例如，Kafka 常被用于做为各种日志数据、采集数据的数据中转。然后，Kafka 将数据转发给 Logstash、Elasticsearch 中，然后基于 Elasticsearch 来做日志中心，提供检索、聚合、分析日志的能力。开发者可以通过 Kibana 集成 Elasticsearch 数据进行可视化展示，或自行进行定制化开发。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20200930164342.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>（2）MQ 也可以被用于流式处理。</p><p>例如，Kafka 几乎已经是流计算的数据采集端的标准组件。而流计算通过实时数据处理能力，提供了更为快捷的聚合计算能力，被大量应用于链路监控、实时监控、实时数仓、实时大屏、风控、推荐等应用领域。</p><div class="hint-container info"><p class="hint-container-title">最终一致性</p></div><p><strong>最终一致性</strong> 不是 <strong>消息队列</strong> 的必备特性，但确实可以依靠 <strong>消息队列</strong> 来做 <strong>最终一致性</strong> 的事情。</p><ul><li><strong>先写消息再操作</strong>，确保操作完成后再修改消息状态。<strong>定时任务补偿机制</strong> 实现消息 <strong>可靠发送接收</strong>、业务操作的可靠执行，要注意 <strong>消息重复</strong> 与 <strong>幂等设计</strong>。</li><li>所有不保证 <code>100%</code> <strong>不丢消息</strong> 的消息队列，理论上无法实现 <strong>最终一致性</strong>。</li></ul><blockquote><p>像 <code>Kafka</code> 一类的设计，在设计层面上就有 <strong>丢消息</strong> 的可能（比如 <strong>定时刷盘</strong>，如果掉电就会丢消息）。哪怕只丢千分之一的消息，业务也必须用其他的手段来保证结果正确。</p></blockquote><h3 id="【中等】引入-mq-带来哪些问题" tabindex="-1"><a class="header-anchor" href="#【中等】引入-mq-带来哪些问题" aria-hidden="true">#</a> 【中等】引入 MQ 带来哪些问题？</h3><p>任何技术都会有利有弊，MQ 给整体系统架构带来很多好处，但也会付出一定的代价。</p><p>MQ 主要引入了以下问题：</p><ul><li><strong>系统可用性降低</strong>：引入了 MQ 后，通信需要基于 MQ 完成，如果 MQ 宕机，则服务不可用。因此，MQ 要保证是高可用的。</li><li><strong>系统复杂度提高</strong>：使用 MQ，需要关注一些新的问题： <ul><li>如何保证消息没有 <strong>重复消费</strong>？</li><li>如何处理 <strong>消息丢失</strong> 的问题？</li><li>如何保证传递 <strong>消息的顺序性</strong>？</li><li>如何处理大量 <strong>消息积压</strong> 的问题？</li></ul></li><li><strong>一致性问题</strong>：假设系统 A 处理完直接返回成功的结果给用户，用户认为请求成功。但如果此时，系统 BCD 中只要有任意一个写库失败，那么数据就不一致了。这种情况如何处理？</li></ul><h3 id="【中等】mq-有哪些通信模型-🌟" tabindex="-1"><a class="header-anchor" href="#【中等】mq-有哪些通信模型-🌟" aria-hidden="true">#</a> 【中等】MQ 有哪些通信模型？🌟</h3><p>MQ（消息队列）常见的通信模型主要有以下几种，适用于不同的业务场景：</p><table><thead><tr><th style="text-align:left;">模型</th><th style="text-align:left;">通信模式</th><th style="text-align:left;">核心特点</th><th style="text-align:left;">典型应用</th><th style="text-align:left;">代表产品</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>点对点</strong></td><td style="text-align:left;">一对一</td><td style="text-align:left;">一条消息只被一个消费者消费，负载均衡</td><td style="text-align:left;">任务队列、订单处理</td><td style="text-align:left;">RabbitMQ, ActiveMQ</td></tr><tr><td style="text-align:left;"><strong>发布/订阅</strong></td><td style="text-align:left;">一对多</td><td style="text-align:left;">一条消息被所有订阅者消费，事件广播</td><td style="text-align:left;">事件驱动、实时通知</td><td style="text-align:left;">Kafka, RocketMQ</td></tr><tr><td style="text-align:left;"><strong>扇出模式</strong></td><td style="text-align:left;">一对多（广播）</td><td style="text-align:left;">无条件复制分发给所有绑定队列</td><td style="text-align:left;">全局公告、日志广播</td><td style="text-align:left;">RabbitMQ (Fanout)</td></tr><tr><td style="text-align:left;"><strong>主题模式</strong></td><td style="text-align:left;">一对多（路由）</td><td style="text-align:left;">基于主题模式匹配进行选择性分发</td><td style="text-align:left;">消息路由、系统日志分级</td><td style="text-align:left;">RabbitMQ (Topic), MQTT</td></tr><tr><td style="text-align:left;"><strong>请求-应答</strong></td><td style="text-align:left;">双向通信</td><td style="text-align:left;">消费者处理完后必须返回响应</td><td style="text-align:left;">RPC 调用、同步查询</td><td style="text-align:left;">普遍支持</td></tr></tbody></table><h3 id="【中等】mq-推拉模式各有什么利弊-如何选择-🌟" tabindex="-1"><a class="header-anchor" href="#【中等】mq-推拉模式各有什么利弊-如何选择-🌟" aria-hidden="true">#</a> 【中等】MQ 推拉模式各有什么利弊，如何选择？🌟</h3><p>消息引擎（MQ）获取消息的模式主要分为 <strong>Push（推）</strong> 和 <strong>Pull（拉）</strong> 两种，不同消息队列中间件采用不同的策略，部分系统还支持 <strong>混合模式</strong>。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202502031317162.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>消息队列消费模式对比：</p><table><thead><tr><th style="text-align:left;">维度</th><th style="text-align:left;">Push</th><th style="text-align:left;">Pull</th><th style="text-align:left;">长轮询</th><th style="text-align:left;">混合模式</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>特点</strong></td><td style="text-align:left;">Broker <strong>主动</strong>推送给消费者，消费者<strong>被动</strong>接收；实时性高，减少消费者轮询开销</td><td style="text-align:left;">消费者<strong>主动</strong>从 Broker 拉取消息，按需获取；消费者控制消费速率</td><td style="text-align:left;">Push 和 Pull 的<strong>折中方案</strong>；请求被保持，直到有消息或超时</td><td style="text-align:left;"><strong>关键消息用 Push</strong>，<strong>批量数据用 Pull</strong>；消费者可动态切换模式</td></tr><tr><td style="text-align:left;"><strong>优点</strong></td><td style="text-align:left;"><strong>低延迟</strong>，适合实时性要求高的场景（如即时通讯）</td><td style="text-align:left;">避免消息堆积冲击消费者，适合<strong>高吞吐场景</strong>（如日志处理）</td><td style="text-align:left;"><strong>减少无效轮询</strong>，平衡实时性与服务端压力</td><td style="text-align:left;"><strong>灵活性强</strong>，能兼顾实时性和吞吐量，适应复杂场景</td></tr><tr><td style="text-align:left;"><strong>缺点</strong></td><td style="text-align:left;">可能造成<strong>消费者过载</strong>（需背压机制控制流速）</td><td style="text-align:left;">存在<strong>空轮询开销</strong>（可通过长轮询优化）</td><td style="text-align:left;">实现复杂度高于纯 Pull，需维护挂起的请求连接</td><td style="text-align:left;">系统设计和实现的<strong>复杂度最高</strong></td></tr><tr><td style="text-align:left;"><strong>典型实现</strong></td><td style="text-align:left;">RabbitMQ、ActiveMQ、RocketMQ（默认长轮询模拟 Push）</td><td style="text-align:left;"><strong>Kafka</strong>、<strong>Pulsar</strong>（原生 Pull）、<strong>RocketMQ</strong>（支持显式 Pull）</td><td style="text-align:left;"><strong>RocketMQ</strong>（默认模式）、HTTP 长轮询（如 WebSocket）</td><td style="text-align:left;"><strong>Pulsar</strong>（支持多模式）、部分自研 MQ 系统</td></tr></tbody></table><p><strong>选择建议</strong></p><ul><li>需要低延迟 → <strong>Push</strong>（如 RabbitMQ）</li><li>需要高吞吐 → <strong>Pull</strong>（如 Kafka）</li><li>平衡场景 → <strong>长轮询</strong>（如 RocketMQ）</li></ul><h2 id="mq-可靠传输" tabindex="-1"><a class="header-anchor" href="#mq-可靠传输" aria-hidden="true">#</a> MQ 可靠传输</h2><h3 id="【困难】如何保证-mq-消息不丢失-🌟🌟🌟" tabindex="-1"><a class="header-anchor" href="#【困难】如何保证-mq-消息不丢失-🌟🌟🌟" aria-hidden="true">#</a> 【困难】如何保证 MQ 消息不丢失？🌟🌟🌟</h3><p>要保证 MQ 中的消息不丢失，需从 <strong>生产端、MQ 服务端、消费端</strong> 三个环节进行可靠性设计。一言以蔽之，<strong>生产端确认+服务端持久化+消费端手动 ACK+监控补偿</strong> 是保证消息不丢失的核心逻辑，需根据业务场景权衡性能与可靠性。</p><div class="hint-container info"><p class="hint-container-title">生产端防丢失</p></div><table><thead><tr><th></th><th>Kafka</th><th>RocketMQ</th></tr></thead><tbody><tr><td><strong>发送方式</strong></td><td>支持同步、异步、异步回调发送方式<br>同步性能低；异步无视成功与否；异步回调比较合适</td><td>支持同步、异步回调发送方式<br>同步性能低；异步回调比较合适</td></tr><tr><td><strong>生产 ACK</strong></td><td><code>acks</code> 参数确保消息被多少副本写入成功后才返回确认<br><code>min.insync.replicas</code> 配合 <code>acks</code> 使用，设定最少写入副本数</td><td>（配合刷盘机制）若配置为同步刷盘，消息必须先成功写入磁盘，发送方才能收到写成功的确认</td></tr><tr><td><strong>失败重试</strong></td><td><code>retries</code> 参数控制失败重试次数</td><td><code>retryTimesWhenSendFailed</code> 参数控制失败重试次数</td></tr><tr><td><strong>事务</strong></td><td>通过事务+生产幂等，实现 exactly once 语义，非真正的分布式事务</td><td>可实现分布式事务</td></tr></tbody></table><div class="hint-container info"><p class="hint-container-title">MQ 服务端防丢失</p></div><table><thead><tr><th></th><th>Kafka</th><th>RocketMQ</th></tr></thead><tbody><tr><td><strong>持久化</strong></td><td>消息写入页缓存（PageCache），即可返回生产 ACK，由 OS 负责刷盘（<code>fsync</code>）<br>可设置自动刷盘的间隔时间或消息数阈值<br>可以通过 AdminClient 手动刷盘</td><td>默认采用异步刷盘，类似 Kafka，先写入页缓存（PageCache），由 OS 负责刷盘（<code>fsync</code>）<br>也支持同步刷盘，消息必须先成功写入磁盘，发送方才能收到写成功的确认</td></tr><tr><td><strong>副本机制</strong></td><td>通过副本机制保证冗余，避免单点故障<br>副本的粒度是针对分区<br><code>replication.factor</code> 设置分区副本数<br><code>min.insync.replicas</code> 控制写入到多少个副本才算是“已提交”</td><td>通过副本机制保证冗余，避免单点故障<br>副本的粒度是针对节点（Broker）</td></tr><tr><td><strong>故障检测</strong></td><td>所有 Broker 会向 zk 的<code>/borker</code>路径写临时节点，而 Controller 会监听该目录<br>一旦有 Broker 故障或失联，zk 会话中断，zk 自动删除临时节点，并通知 Controller<br>Controller 将 Broker 视为下线，并将该 Broker 上的分区 Leader 置为无效</td><td>主节点定期向从节点发送心跳以续活<br>超时未收到消息，从节点视主节点为下线</td></tr><tr><td><strong>故障恢复</strong></td><td>Controller 负责选新的分区 Leader，优先从 ISR 中选<br>通过 <code>unclean.leader.election.enable</code> 可设置是否允许从非 ISR 中选 Leader，但丢失数据风险增大</td><td>采用 Raft 来选主</td></tr></tbody></table><div class="hint-container info"><p class="hint-container-title">消费端防丢失</p></div><table><thead><tr><th></th><th><strong>Kafka</strong></th><th><strong>RocketMQ</strong></th></tr></thead><tbody><tr><td><strong>消费 ACK</strong></td><td>支持自动、手动提交 Offset（<code>enable.auto.commit=false</code>配置）<br>关闭自动提交，处理完整事务后，再手动提交 Offset</td><td>支持自动、手动提交 Offset（consumer.setAutoCommit 配置）<br>关闭自动提交，处理完整事务后，再手动提交 Offset</td></tr><tr><td><strong>重置 Offset</strong></td><td><code>auto.offset.reset</code> 可以重置消费的 Offset</td><td></td></tr><tr><td><strong>失败重试</strong></td><td>不完善：自动提交不支持重试；手动提交续自行处理重试逻辑</td><td>默认重试 16 次<br>多次消费失败后会被投递到<strong>死信队列</strong>，供后续特殊处理</td></tr></tbody></table><div class="hint-container info"><p class="hint-container-title">监控与补偿</p></div><ul><li><strong>消息堆积告警</strong>：监控队列长度，及时发现异常。</li><li><strong>定期对账</strong>：对比生产与消费的记录，修复差异（如定时扫描数据库补发）。</li></ul><h3 id="【困难】如何保证-mq-消息不重复-🌟🌟🌟" tabindex="-1"><a class="header-anchor" href="#【困难】如何保证-mq-消息不重复-🌟🌟🌟" aria-hidden="true">#</a> 【困难】如何保证 MQ 消息不重复？🌟🌟🌟</h3><div class="hint-container info"><p class="hint-container-title">MQ 为什么会出现重复消息？</p></div><ul><li>生产端重试（网络抖动时自动重发）</li><li>消费端超时后 MQ 重新投递（如 RabbitMQ 未及时 ACK）</li><li>消息队列集群脑裂（如 Kafka 副本切换）</li></ul><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202502022054834.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>以 Kafka 举例，Kafka 每个 Partition 都是一个有序的、不可变的记录序列，不断追加到结构化的提交日志中。Partition 中为每条记录分配一个连续的 id 号，称为偏移量（Offset），用于唯一标识 Partition 内的记录。</p><p>Kafka 的客户端和 Broker 都会保存 Offset。客户端消费消息后，每隔一段时间，就把已消费的 Offset 提交给 Kafka Broker，表示已消费。</p><p>在这个过程中，如果客户端应用消费消息后，因为宕机、重启等情况而没有提交已消费的 Offset 。当系统恢复后，会继续消费消息，由于 Offset 未提交，就会出现重复消费的问题。</p><div class="hint-container info"><p class="hint-container-title">重复消息通用解决方案</p></div><p>处理重复消息 = <strong>“业务幂等为基础，缓存/DB 去重为辅助，监控兜底保万一”</strong>。</p><p>处理 MQ 重复消息的核心思路是 <strong>幂等性设计</strong> + <strong>去重机制</strong>，确保即使消息被多次消费，业务结果也不会出错。</p><p>（1）<strong>业务层幂等设计</strong></p><ul><li><p><strong>唯一标识</strong>：每条消息携带唯一业务 ID（如订单号、支付流水号），处理前先查库判断是否已执行。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">status</span> <span class="token keyword">FROM</span> orders <span class="token keyword">WHERE</span> order_id <span class="token operator">=</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">;</span>
<span class="token comment">-- 若已处理则直接跳过</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>状态机控制</strong>：业务状态严格流转（如「已支付」订单不允许重复扣款）。</p></li></ul><p>（2）<strong>去重表/缓存</strong></p><ul><li><p><strong>数据库去重表</strong>：消费前先 <code>INSERT</code> 唯一键（消息 ID），利用主键冲突避免重复处理。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> message_processed<span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;msg_123&#39;</span><span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">DUPLICATE</span> <span class="token keyword">KEY</span> <span class="token keyword">IGNORE</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>Redis 去重</strong>：用 <code>SETNX</code> 设置消息 ID 过期时间（适合高频场景）。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>SETNX msg_123 <span class="token number">1</span> EX <span class="token number">3600</span>  <span class="token comment"># 1 小时内不重复处理</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><div class="hint-container info"><p class="hint-container-title">主流 MQ 处理</p></div><table><thead><tr><th>消息队列</th><th>重复触发场景</th><th>推荐方案</th></tr></thead><tbody><tr><td><strong>Kafka</strong></td><td>消费者重启导致 offset 回滚</td><td>业务幂等 + 本地 offset 持久化</td></tr><tr><td><strong>RabbitMQ</strong></td><td>未 ACK 导致重新入队</td><td>手动 ACK + 死信队列监控</td></tr><tr><td><strong>RocketMQ</strong></td><td>消息重试机制（16 次后进死信）</td><td>消费日志 + 人工干预</td></tr></tbody></table><p>极端情况兜底：</p><ul><li><strong>对账系统</strong>：定时扫描业务数据与消息记录，修复不一致（如定时补发短信）。</li><li><strong>人工告警</strong>：监控重复消息频率（如 1 分钟同消息 ID 出现 3 次以上则报警）。</li></ul><div class="hint-container info"><p class="hint-container-title">方案选型</p></div><ul><li><strong>低频业务</strong>：数据库唯一索引（简单可靠）。</li><li><strong>高频业务</strong>：Redis + 过期时间（高性能）。</li><li><strong>金融级场景</strong>：幂等 + 对账 + 人工审核（强一致）。</li></ul><h3 id="【困难】如何保证-mq-消息的顺序性-🌟🌟🌟" tabindex="-1"><a class="header-anchor" href="#【困难】如何保证-mq-消息的顺序性-🌟🌟🌟" aria-hidden="true">#</a> 【困难】如何保证 MQ 消息的顺序性？🌟🌟🌟</h3><p>要保证 MQ 消息的顺序性，需从 <strong>生产、存储、消费</strong> 三个环节控制。</p><p>核心思路是：<strong>“同一业务 ID 锁定同一队列 + 单线程消费”</strong>，需结合业务需求选择局部顺序或全局顺序方案。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202502022152450.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="hint-container info"><p class="hint-container-title">生产端保序</p></div><ul><li><p><strong>单生产者+单线程发送</strong>：同一业务 ID（如订单 ID）的消息由 <strong>同一生产者线程</strong> 顺序发送，避免多线程并发乱序。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 示例：相同 orderId 的消息由同一线程发送</span>
mqProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> orderId<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 通过 hash 选择分区</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>禁用异步发送重试</strong>：异步发送失败时可能乱序，需同步发送或关闭重试（如 Kafka 配置 <code>max.in.flight.requests.per.connection=1</code>）。</p></li></ul><div class="hint-container info"><p class="hint-container-title">MQ 服务端保序</p></div><ul><li><p><strong>单分区/队列有序</strong></p><ul><li><p><strong>Kafka/RocketMQ</strong>：同一业务 ID 的消息发送到 <strong>同一分区</strong>（Partition）。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 根据 orderId 哈希选择分区</span>
<span class="token keyword">int</span> partition <span class="token operator">=</span> orderId<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> partitionNum<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>RabbitMQ</strong>：使用单队列（或一致性哈希交换器绑定唯一队列）。</p></li></ul></li><li><p><strong>关闭分区/队列并行</strong>：避免服务端多分区/多副本间的顺序混乱（如 Kafka 的 <code>unclean.leader.election.enable=false</code>）。</p></li></ul><div class="hint-container info"><p class="hint-container-title">消费端保序</p></div><ul><li><strong>单消费者串行消费</strong><ul><li>同一队列/分区由 <strong>单消费者线程</strong> 处理（如 Kafka 单线程消费或 <code>max.poll.records=1</code>）。</li><li>多消费者时，相同业务 ID 的消息路由到同一消费者（如 RocketMQ 的 <code>MessageQueueSelector</code>）。</li></ul></li><li><strong>内存队列排序</strong>（复杂场景）：消费者拉取消息后，按业务 ID 分组存入内存队列，由不同线程分别串行处理。</li></ul><div class="hint-container info"><p class="hint-container-title">特殊场景处理</p></div><ul><li><strong>全局严格顺序</strong>：牺牲性能，全链路单线程（生产→MQ→消费），仅适合低吞吐场景（如 Binlog 同步）。</li><li><strong>局部顺序</strong>：仅保证同一业务 ID 的顺序（如订单的创建→支付→退款），允许不同订单并发。</li></ul><div class="hint-container info"><p class="hint-container-title">主流 MQ 处理</p></div><table><thead><tr><th></th><th><strong>Kafka</strong></th><th><strong>RocketMQ</strong></th></tr></thead><tbody><tr><td><strong>单分区/队列有序</strong></td><td>单分区追加写入，天然有序</td><td>单队列有序</td></tr><tr><td><strong>哈希路由</strong></td><td>采用哈希路由，相同 key 固定发往同一分区<br>如果不指定 key，则采用轮询方式选择分区</td><td>使用 <code>MessageQueueSelector</code> 指定队列</td></tr><tr><td><strong>单线程生产</strong></td><td><code>max.in.flight.requests.per.connection=1</code> 控制</td><td></td></tr><tr><td><strong>单线程消费</strong></td><td>确保一个分区仅由一个消费者线程处理（Kafka 默认规则）</td><td>使用 <code>MessageListenerOrderly</code></td></tr><tr><td><strong>业务保证</strong></td><td>避免多线程并发消费同一队列<br>分布式锁（如 Redis）<br>关键业务操作加锁，防止并发执行乱序</td><td>避免多线程并发消费同一队列<br>分布式锁（如 Redis）<br>关键业务操作加锁，防止并发执行乱序</td></tr></tbody></table><div class="hint-container info"><p class="hint-container-title">注意事项</p></div><ul><li><strong>性能权衡</strong>：顺序性越高，并发性能越低（需根据业务容忍度平衡）。</li><li><strong>错误处理</strong>：消费失败时需暂停当前分区消费（如 Kafka 的 <code>pause()</code>），避免跳过消息导致乱序。</li><li><strong>监控</strong>：定期检查消息积压和顺序偏移（如 Kafka 的 <code>consumer.position()</code>）。</li></ul><h3 id="【困难】如何处理-mq-消息积压-🌟🌟" tabindex="-1"><a class="header-anchor" href="#【困难】如何处理-mq-消息积压-🌟🌟" aria-hidden="true">#</a> 【困难】如何处理 MQ 消息积压？🌟🌟</h3><p>处理 MQ 消息积压的核心思路是 <strong>“快速消费存量+优化生产速率”</strong>，需结合监控、扩容、降级等手段综合治理。</p><p>大致可以归纳为：</p><ul><li><strong>短期</strong>：扩容+降级，优先恢复服务。</li><li><strong>长期</strong>：优化消费逻辑+自动化运维，预防再次积压。</li><li><strong>口诀</strong>：<strong>监控早发现，扩容扛流量，消费改批量，生产限流速</strong>。</li></ul><div class="hint-container info"><p class="hint-container-title">快速消费积压消息</p></div><ul><li><strong>增加消费者实例</strong>：横向扩展消费者服务（如 Kubernetes 动态扩容 Pod），注意分区数限制（Kafka 需提前规划足够分区）。</li><li><strong>提升消费并行度</strong>： <ul><li>调整消费者并发参数（如 Kafka 的 <code>max.poll.records</code>、RabbitMQ 的 <code>prefetch_count</code>）。</li><li>多线程消费（需保证无顺序要求的场景）。</li></ul></li><li><strong>临时降级</strong>：非核心业务暂停消费（如日志处理），集中资源处理核心业务消息。</li></ul><div class="hint-container info"><p class="hint-container-title">优化消费能力</p></div><ul><li><strong>批量处理</strong>：合并多条消息一次处理（如数据库批量插入）。</li><li><strong>异步化+削峰</strong>：消费者将消息存入内存队列，后台线程异步处理，避免同步阻塞。</li><li><strong>跳过非关键逻辑</strong>：临时关闭日志记录、数据校验等非必要操作。</li></ul><div class="hint-container info"><p class="hint-container-title">控制生产端流量</p></div><ul><li><strong>限流</strong>：生产端启用速率限制（如 Kafka 的 <code>quota</code>、Redis 令牌桶）。</li><li><strong>削峰填谷</strong>：消息先写入缓存层（如 Redis List），再匀速写入 MQ。</li><li><strong>业务降级</strong>：高峰期关闭非核心功能的消息生产（如暂停推荐系统更新）。</li></ul><div class="hint-container info"><p class="hint-container-title">监控与告警</p></div><ul><li><strong>实时监控指标</strong>： <ul><li>队列堆积量（如 Kafka 的 <code>lag</code>）、消费速率（TPS）、消费者状态。</li><li>设置阈值告警（如积压超过 10W 条触发短信通知）。</li></ul></li><li><strong>根因分析工具</strong>： <ul><li>日志分析（消费者卡顿、GC 问题）。</li><li>链路追踪（如 SkyWalking 定位慢消费）。</li></ul></li></ul><div class="hint-container info"><p class="hint-container-title">长期预防措施</p></div><ul><li><strong>容量规划</strong>：根据业务峰值预先扩容分区/队列（如 Kafka 分区数 = 消费者数 × 1.5）。</li><li><strong>死信队列+重试机制</strong>：处理失败的消息转入死信队列，避免阻塞正常消费。</li><li><strong>自动化扩缩容</strong>：基于积压指标动态调整消费者数量（如 K8s HPA）。</li></ul><div class="hint-container info"><p class="hint-container-title">主流 MQ 处理</p></div><table><thead><tr><th>消息队列</th><th>关键操作</th></tr></thead><tbody><tr><td><strong>Kafka</strong></td><td>增加分区+消费者，调整 <code>fetch.max.bytes</code></td></tr><tr><td><strong>RabbitMQ</strong></td><td>镜像队列扩容，提高 <code>prefetch_count</code></td></tr><tr><td><strong>RocketMQ</strong></td><td>消费组扩容，启用定时消息延迟消费</td></tr></tbody></table><h2 id="mq-高可用" tabindex="-1"><a class="header-anchor" href="#mq-高可用" aria-hidden="true">#</a> MQ 高可用</h2><h3 id="【困难】如何保证-mq-的高可用" tabindex="-1"><a class="header-anchor" href="#【困难】如何保证-mq-的高可用" aria-hidden="true">#</a> 【困难】如何保证 MQ 的高可用？</h3><p>不同 MQ 实现高可用的原理各不相同。因为 Kafka 比较具有代表性，所以这里以 Kafka 为例。</p><div class="hint-container info"><p class="hint-container-title">Kafka 的核心概念</p></div><p>了解 Kafka，必须先了解 Kafka 的核心概念：</p><ul><li><p><strong>Broker</strong> - Kafka 集群包含一个或多个节点，这种节点被称为 Broker。</p></li><li><p><strong>Topic</strong> - 每条发布到 Kafka 集群的消息都有一个类别，这个类别被称为 Topic。（不同 Topic 的消息是物理隔离的；同一个 Topic 的消息保存在一个或多个 Broker 上，但用户只需指定消息的 Topic 即可生产或消费数据而不必关心数据存于何处）。对于每一个 Topic， Kafka 集群都会维持一个分区日志。</p></li><li><p><strong>Partition</strong> - 了提高 Kafka 的吞吐率，每个 Topic 包含一个或多个 Partition，每个 Partition 在物理上对应一个文件夹，该文件夹下存储这个 Partition 的所有消息和索引文件。</p><ul><li>Kafka 日志的分区（Partition）分布在 Kafka 集群的节点上。每个节点在处理数据和请求时，共享这些分区。每一个分区都会在已配置的节点上进行备份，确保容错性。</li></ul></li></ul><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/distributed/mq/kafka/kafka-cluster-roles.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><div class="hint-container info"><p class="hint-container-title">Kafka 的副本机制</p></div><p>Kafka 是如何实现高可用的呢？</p><p>Kafka 在 0.8 以前的版本中，如果一个 Broker 宕机了，其上面的 Partition 都不能用了，这自然不是高可用的。</p><p>为了实现高可用，Kafka 引入了复制功能，简单来说，就是副本机制（ Replicate ）：</p><p><strong>每个 Partition 都有一个 Leader，零个或多个 Follower</strong>。Leader 和 Follower 都是 Broker，每个 Broker 都会成为某些分区的 Leader 和某些分区的 Follower，因此集群的负载是平衡的。</p><ul><li><strong>Leader 处理一切对 Partition （分区）的读写请求</strong>；</li><li><strong>而 Follower 只需被动的同步 Leader 上的数据</strong>。</li></ul><p><strong>同一个 Topic 的不同 Partition 会分布在多个 Broker 上，而且一个 Partition 还会在其他的 Broker 上面进行备份</strong>，Producer 在发布消息到某个 Partition 时，先找到该 Partition 的 Leader，然后向这个 Leader 推送消息；每个 Follower 都从 Leader 拉取消息，拉取消息成功之后，向 Leader 发送一个 ACK 确认。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/distributed/mq/kafka/kafka-replication.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>FAQ</p><p>问：为什么让 Leader 处理一切对对 Partition （分区）的读写请求？</p><p>答：因为如果允许所有 Broker 都可以处理读写请求，就可能产生数据一致性问题。</p></blockquote><div class="hint-container info"><p class="hint-container-title">Kafka 选举 Leader</p></div><p>由上文可知，Partition 在多个 Broker 上存在副本。</p><p>如果某个 Follower 宕机，啥事儿没有，正常工作。</p><p>如果 Leader 宕机了，会从 Follower 中<strong>重新选举</strong>一个新的 Leader。</p><h2 id="mq-架构" tabindex="-1"><a class="header-anchor" href="#mq-架构" aria-hidden="true">#</a> MQ 架构</h2><h3 id="【困难】kafka、activemq、rabbitmq、rocketmq-有什么优缺点" tabindex="-1"><a class="header-anchor" href="#【困难】kafka、activemq、rabbitmq、rocketmq-有什么优缺点" aria-hidden="true">#</a> 【困难】Kafka、ActiveMQ、RabbitMQ、RocketMQ 有什么优缺点？</h3><div class="hint-container info"><p class="hint-container-title">ActiveMQ</p></div><p><code>ActiveMQ</code> 是由 <code>Apache</code> 出品，<code>ActiveMQ</code> 是一个完全支持<code>JMS1.1</code> 和 <code>J2EE 1.4</code> 规范的 <code>JMS Provider</code> 实现。它非常快速，支持 <strong>多种语言的客户端</strong> 和 <strong>协议</strong>，而且可以非常容易的嵌入到企业的应用环境中，并有许多高级功能。</p><p><strong>(a) 主要特性</strong></p><ol><li><strong>服从 JMS 规范</strong>：<code>JMS</code> 规范提供了良好的标准和保证，包括：<strong>同步</strong> 或 <strong>异步</strong> 的消息分发，一次和仅一次的消息分发，<strong>消息接收</strong> 和 <strong>订阅</strong> 等等。遵从 <code>JMS</code> 规范的好处在于，不论使用什么 <code>JMS</code> 实现提供者，这些基础特性都是可用的；</li><li><strong>连接灵活性</strong>：<code>ActiveMQ</code> 提供了广泛的 <strong>连接协议</strong>，支持的协议有：<code>HTTP/S</code>，<code>IP</code> <strong>多播</strong>，<code>SSL</code>，<code>TCP</code>，<code>UDP</code> 等等。对众多协议的支持让 <code>ActiveMQ</code> 拥有了很好的灵活性；</li><li><strong>支持的协议种类多</strong>：<code>OpenWire</code>、<code>STOMP</code>、<code>REST</code>、<code>XMPP</code>、<code>AMQP</code>；</li><li><strong>持久化插件和安全插件</strong>：<code>ActiveMQ</code> 提供了 <strong>多种持久化</strong> 选择。而且，<code>ActiveMQ</code> 的安全性也可以完全依据用户需求进行 <strong>自定义鉴权</strong> 和 <strong>授权</strong>；</li><li><strong>支持的客户端语言种类多</strong>：除了 <code>Java</code> 之外，还有：<code>C/C++</code>，<code>.NET</code>，<code>Perl</code>，<code>PHP</code>，<code>Python</code>，<code>Ruby</code>；</li><li><strong>代理集群</strong>：多个 <code>ActiveMQ</code> <strong>代理</strong> 可以组成一个 <strong>集群</strong> 来提供服务；</li><li><strong>异常简单的管理</strong>：<code>ActiveMQ</code> 是以开发者思维被设计的。所以，它并不需要专门的管理员，因为它提供了简单又使用的管理特性。有很多中方法可以 <strong>监控</strong> <code>ActiveMQ</code> 不同层面的数据，包括使用在 <code>JConsole</code> 或者在 <code>ActiveMQ</code> 的 <code>Web Console</code> 中使用 <code>JMX</code>。通过处理 <code>JMX</code> 的告警消息，通过使用 <strong>命令行脚本</strong>，甚至可以通过监控各种类型的 <strong>日志</strong>。</li></ol><p><strong>(b) 部署环境</strong></p><p><code>ActiveMQ</code> 可以运行在 <code>Java</code> 语言所支持的平台之上。使用 <code>ActiveMQ</code> 需要：</p><ul><li><code>Java JDK</code></li><li><code>ActiveMQ</code> 安装包</li></ul><p><strong>(c) 优点</strong></p><ol><li><strong>跨平台</strong> (<code>JAVA</code> 编写与平台无关，<code>ActiveMQ</code> 几乎可以运行在任何的 <code>JVM</code> 上）；</li><li>可以用 <code>JDBC</code>：可以将 <strong>数据持久化</strong> 到数据库。虽然使用 <code>JDBC</code> 会降低 <code>ActiveMQ</code> 的性能，但是数据库一直都是开发人员最熟悉的存储介质；</li><li>支持 <code>JMS</code> 规范：支持 <code>JMS</code> 规范提供的 <strong>统一接口</strong>;</li><li>支持 <strong>自动重连</strong> 和 <strong>错误重试机制</strong>；</li><li>有安全机制：支持基于 <code>shiro</code>，<code>jaas</code> 等多种 <strong>安全配置机制</strong>，可以对 <code>Queue/Topic</code> 进行 <strong>认证和授权</strong>；</li><li>监控完善：拥有完善的 <strong>监控</strong>，包括 <code>Web Console</code>，<code>JMX</code>，<code>Shell</code> 命令行，<code>Jolokia</code> 的 <code>RESTful API</code>；</li><li>界面友善：提供的 <code>Web Console</code> 可以满足大部分情况，还有很多 <strong>第三方的组件</strong> 可以使用，比如 <code>hawtio</code>；</li></ol><p><strong>(d) 缺点</strong></p><ol><li>社区活跃度不及 <code>RabbitMQ</code> 高；</li><li>根据其他用户反馈，会出莫名其妙的问题，会 <strong>丢失消息</strong>；</li><li>目前重心放到 <code>activemq 6.0</code> 产品 <code>Apollo</code>，对 <code>5.x</code> 的维护较少；</li><li>不适合用于 <strong>上千个队列</strong> 的应用场景；</li></ol><div class="hint-container info"><p class="hint-container-title">RabbitMQ</p></div><p><code>RabbitMQ</code> 于 <code>2007</code> 年发布，是一个在 <code>AMQP</code> (<strong>高级消息队列协议</strong>) 基础上完成的，可复用的企业消息系统，是当前最主流的消息中间件之一。</p><p><strong>(a) 主要特性</strong></p><ol><li><strong>可靠性</strong>：提供了多种技术可以让你在 <strong>性能</strong> 和 <strong>可靠性</strong> 之间进行 <strong>权衡</strong>。这些技术包括 <strong>持久性机制</strong>、<strong>投递确认</strong>、<strong>发布者证实</strong> 和 <strong>高可用性机制</strong>；</li><li><strong>灵活的路由</strong>：消息在到达队列前是通过 <strong>交换机</strong> 进行 <strong>路由</strong> 的。<code>RabbitMQ</code> 为典型的路由逻辑提供了 <strong>多种内置交换机</strong> 类型。如果你有更复杂的路由需求，可以将这些交换机组合起来使用，你甚至可以实现自己的交换机类型，并且当做 <code>RabbitMQ</code> 的 <strong>插件</strong> 来使用；</li><li><strong>消息集群</strong>：在相同局域网中的多个 <code>RabbitMQ</code> 服务器可以 <strong>聚合</strong> 在一起，作为一个独立的逻辑代理来使用；</li><li><strong>队列高可用</strong>：队列可以在集群中的机器上 <strong>进行镜像</strong>，以确保在硬件问题下还保证 <strong>消息安全</strong>；</li><li><strong>支持多种协议</strong>：支持 <strong>多种消息队列协议</strong>；</li><li><strong>支持多种语言</strong>：用 <code>Erlang</code> 语言编写，支持只要是你能想到的 <strong>所有编程语言</strong>；</li><li><strong>管理界面</strong>： <code>RabbitMQ</code> 有一个易用的 <strong>用户界面</strong>，使得用户可以 <strong>监控</strong> 和 <strong>管理</strong> 消息 <code>Broker</code> 的许多方面；</li><li><strong>跟踪机制</strong>：如果 <strong>消息异常</strong>，<code>RabbitMQ</code> 提供消息跟踪机制，使用者可以找出发生了什么；</li><li><strong>插件机制</strong>：提供了许多 <strong>插件</strong>，来从多方面进行扩展，也可以编写自己的插件。</li></ol><p><strong>(b) 部署环境</strong></p><p><code>RabbitMQ</code> 可以运行在 <code>Erlang</code> 语言所支持的平台之上，包括 <code>Solaris</code>，<code>BSD</code>，<code>Linux</code>，<code>MacOSX</code>，<code>TRU64</code>，<code>Windows</code> 等。使用 <code>RabbitMQ</code> 需要：</p><ul><li><code>ErLang</code> 语言包</li><li><code>RabbitMQ</code> 安装包</li></ul><p><strong>(c) 优点</strong></p><ol><li>由于 <code>Erlang</code> 语言的特性，消息队列性能较好，支持 <strong>高并发</strong>；</li><li>健壮、稳定、易用、<strong>跨平台</strong>、支持 <strong>多种语言</strong>、文档齐全；</li><li>有消息 <strong>确认机制</strong> 和 <strong>持久化机制</strong>，可靠性高；</li><li>高度可定制的 <strong>路由</strong>；</li><li><strong>管理界面</strong> 较丰富，在互联网公司也有较大规模的应用，社区活跃度高。</li></ol><p><strong>(d) 缺点</strong></p><ol><li>尽管结合 <code>Erlang</code> 语言本身的并发优势，性能较好，但是不利于做 <strong>二次开发和维护</strong>；</li><li>实现了 <strong>代理架构</strong>，意味着消息在发送到客户端之前可以在 <strong>中央节点</strong> 上排队。此特性使得 <code>RabbitMQ</code> 易于使用和部署，但是使得其 <strong>运行速度较慢</strong>，因为中央节点 <strong>增加了延迟</strong>，<strong>消息封装后</strong> 也比较大；</li><li>需要学习 <strong>比较复杂</strong> 的 <strong>接口和协议</strong>，学习和维护成本较高。</li></ol><div class="hint-container info"><p class="hint-container-title">RocketMQ</p></div><p><code>RocketMQ</code> 出自 <strong>阿里</strong> 的开源产品，用 <code>Java</code> 语言实现，在设计时参考了 <code>Kafka</code>，并做出了自己的一些改进，<strong>消息可靠性上</strong> 比 <code>Kafka</code> 更好。<code>RocketMQ</code> 在阿里内部 \b 被广泛应用在 <strong>订单</strong>，<strong>交易</strong>，<strong>充值</strong>，<strong>流计算</strong>，<strong>消息推送</strong>，<strong>日志流式处理</strong>，<code>binglog</code> <strong>分发</strong> 等场景。</p><p><strong>(a) 主要特性</strong></p><ol><li>基于 <strong>队列模型</strong>：具有 <strong>高性能</strong>、<strong>高可靠</strong>、<strong>高实时</strong>、<strong>分布式</strong> 等特点；</li><li><code>Producer</code>、<code>Consumer</code>、<strong>队列</strong> 都支持 <strong>分布式</strong>；</li><li><code>Producer</code> 向一些队列轮流发送消息，<strong>队列集合</strong> 称为 <code>Topic</code>。<code>Consumer</code> 如果做 <strong>广播消费</strong>，则一个 <code>Consumer</code> 实例消费这个 <code>Topic</code> 对应的 <strong>所有队列</strong>；如果做 <strong>集群消费</strong>，则 <strong>多个</strong> <code>Consumer</code> 实例 <strong>平均消费</strong> 这个 <code>Topic</code> 对应的队列集合；</li><li>能够保证 <strong>严格的消息顺序</strong>；</li><li>提供丰富的 <strong>消息拉取模式</strong>；</li><li>高效的订阅者 <strong>水平扩展</strong>能力；</li><li><strong>实时</strong> 的 <strong>消息订阅机制</strong>；</li><li>亿级 <strong>消息堆积</strong> 能力；</li><li>较少的外部依赖。</li></ol><p><strong>(b) 部署环境</strong></p><p><code>RocketMQ</code> 可以运行在 <code>Java</code> 语言所支持的平台之上。使用 <code>RocketMQ</code> 需要：</p><ul><li><code>Java JDK</code></li><li>安装 <code>git</code>、<code>Maven</code></li><li><code>RocketMQ</code> 安装包</li></ul><p><strong>(c) 优点</strong></p><ol><li><strong>单机</strong> 支持 <code>1</code> 万以上 <strong>持久化队列</strong>；</li><li><code>RocketMQ</code> 的所有消息都是 <strong>持久化的</strong>，先写入系统 <code>PAGECACHE</code>，然后 <strong>刷盘</strong>，可以保证 <strong>内存</strong> 与 <strong>磁盘</strong> 都有一份数据，而 <strong>访问</strong> 时，直接 <strong>从内存读取</strong>。</li><li>模型简单，接口易用（<code>JMS</code> 的接口很多场合并不太实用）；</li><li><strong>性能非常好</strong>，可以允许 <strong>大量堆积消息</strong> 在 <code>Broker</code> 中；</li><li>支持 <strong>多种消费模式</strong>，包括 <strong>集群消费</strong>、<strong>广播消费</strong>等；</li><li>各个环节 <strong>分布式扩展设计</strong>，支持 <strong>主从</strong> 和 <strong>高可用</strong>；</li><li>开发度较活跃，版本更新很快。</li></ol><p><strong>(d) 缺点</strong></p><ol><li>支持的 <strong>客户端语言</strong> 不多，目前是 <code>Java</code> 及 <code>C++</code>，其中 <code>C++</code> 还不成熟；</li><li><code>RocketMQ</code> 社区关注度及成熟度也不及前两者；</li><li>没有 <code>Web</code> 管理界面，提供了一个 <code>CLI</code> （命令行界面） 管理工具带来 <strong>查询</strong>、<strong>管理</strong> 和 <strong>诊断各种问题</strong>；</li><li>没有在 <code>MQ</code> 核心里实现 <code>JMS</code> 等接口；</li></ol><div class="hint-container info"><p class="hint-container-title">Kafka</p></div><p><code>Apache Kafka</code> 是一个 <strong>分布式消息发布订阅</strong> 系统。它最初由 <code>LinkedIn</code> 公司基于独特的设计实现为一个 <strong>分布式的日志提交系统</strong> (<code>a distributed commit log</code>)，之后成为 <code>Apache</code> 项目的一部分。<code>Kafka</code> <strong>性能高效</strong>、<strong>可扩展良好</strong> 并且 <strong>可持久化</strong>。它的 <strong>分区特性</strong>，<strong>可复制</strong> 和 <strong>可容错</strong> 都是其不错的特性。</p><p><strong>(a) 主要特性</strong></p><ol><li><strong>快速持久化</strong>：可以在 <code>O(1)</code> 的系统开销下进行 <strong>消息持久化</strong>；</li><li><strong>高吞吐</strong>：在一台普通的服务器上既可以达到 <code>10W/s</code> 的 <strong>吞吐速率</strong>；</li><li><strong>完全的分布式系统</strong>：<code>Broker</code>、<code>Producer</code> 和 <code>Consumer</code> 都原生自动支持 <strong>分布式</strong>，自动实现 <strong>负载均衡</strong>；</li><li>支持 <strong>同步</strong> 和 <strong>异步</strong> 复制两种 <strong>高可用机制</strong>；</li><li>支持 <strong>数据批量发送</strong> 和 <strong>拉取</strong>；</li><li><strong>零拷贝技术 (zero-copy)</strong>：减少 <code>IO</code> 操作步骤，提高 <strong>系统吞吐量</strong>；</li><li><strong>数据迁移</strong>、<strong>扩容</strong> 对用户透明；</li><li><strong>无需停机</strong> 即可扩展机器；</li><li><strong>其他特性</strong>：丰富的 <strong>消息拉取模型</strong>、高效 <strong>订阅者水平扩展</strong>、实时的 <strong>消息订阅</strong>、亿级的 <strong>消息堆积能力</strong>、定期删除机制；</li></ol><p><strong>(b) 部署环境</strong></p><p>使用 <code>Kafka</code> 需要：</p><ul><li><code>Java JDK</code></li><li><code>Kafka</code> 安装包</li></ul><p><strong>(c) 优点</strong></p><ol><li><strong>客户端语言丰富</strong>：支持 <code>Java</code>、<code>.Net</code>、<code>PHP</code>、<code>Ruby</code>、<code>Python</code>、<code>Go</code> 等多种语言；</li><li><strong>高性能</strong>：单机写入 <code>TPS</code> 约在 <code>100</code> 万条/秒，消息大小 <code>10</code> 个字节；</li><li>提供 <strong>完全分布式架构</strong>，并有 <code>replica</code> 机制，拥有较高的 <strong>可用性</strong> 和 <strong>可靠性</strong>，理论上支持 <strong>消息无限堆积</strong>；</li><li>支持批量操作；</li><li><strong>消费者</strong> 采用 <code>Pull</code> 方式获取消息。<strong>消息有序</strong>，<strong>通过控制</strong> 能够保证所有消息被消费且仅被消费 <strong>一次</strong>；</li><li>有优秀的第三方 <code>Kafka Web</code> 管理界面 <code>Kafka-Manager</code>；</li><li>在 <strong>日志领域</strong> 比较成熟，被多家公司和多个开源项目使用。</li></ol><p><strong>(d) 缺点</strong></p><ol><li><code>Kafka</code> 单机超过 <code>64</code> 个 <strong>队列/分区</strong> 时，<code>Load</code> 时会发生明显的飙高现象。<strong>队列</strong> 越多，<strong>负载</strong> 越高，发送消息 <strong>响应时间变长</strong>；</li><li>使用 <strong>短轮询方式</strong>，<strong>实时性</strong> 取决于 <strong>轮询间隔时间</strong>；</li><li>消费失败 <strong>不支持重试</strong>；</li><li>支持 <strong>消息顺序</strong>，但是 <strong>一台代理宕机</strong> 后，就会产生 <strong>消息乱序</strong>；</li><li>社区更新较慢。</li></ol><div class="hint-container info"><p class="hint-container-title">技术选型</p></div><table><thead><tr><th>特性</th><th>ActiveMQ</th><th>RabbitMQ</th><th>RocketMQ</th><th>Kafka</th></tr></thead><tbody><tr><td>单机吞吐量</td><td>万级，比 RocketMQ、Kafka 低一个数量级</td><td>同 ActiveMQ</td><td>10 万级，支撑高吞吐</td><td>10 万级，高吞吐，一般配合大数据类的系统来进行实时数据计算、日志采集等场景</td></tr><tr><td>topic 数量对吞吐量的影响</td><td></td><td></td><td>topic 可以达到几百/几千的级别，吞吐量会有较小幅度的下降，这是 RocketMQ 的一大优势，在同等机器下，可以支撑大量的 topic</td><td>topic 从几十到几百个时候，吞吐量会大幅度下降，在同等机器下，Kafka 尽量保证 topic 数量不要过多，如果要支撑大规模的 topic，需要增加更多的机器资源</td></tr><tr><td>时效性</td><td>ms 级</td><td>微秒级，这是 RabbitMQ 的一大特点，延迟最低</td><td>ms 级</td><td>延迟在 ms 级以内</td></tr><tr><td>可用性</td><td>高，基于主从架构实现高可用</td><td>同 ActiveMQ</td><td>非常高，分布式架构</td><td>非常高，分布式，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用</td></tr><tr><td>消息可靠性</td><td>有较低的概率丢失数据</td><td>基本不丢</td><td>经过参数优化配置，可以做到 0 丢失</td><td>同 RocketMQ</td></tr><tr><td>功能支持</td><td>MQ 领域的功能极其完备</td><td>基于 erlang 开发，并发能力很强，性能极好，延时很低</td><td>MQ 功能较为完善，还是分布式的，扩展性好</td><td>功能较为简单，主要支持简单的 MQ 功能，在大数据领域的实时计算以及日志采集被大规模使用</td></tr></tbody></table><p>综上，各种对比之后，有如下建议：</p>`,190),c=t("li",null,"一般的业务系统要引入 MQ，最早大家都用 ActiveMQ，但是现在确实大家用的不多了，没经过大规模吞吐量场景的验证，社区也不是很活跃，所以大家还是算了吧，我个人不推荐用这个了；",-1),p=t("li",null,"后来大家开始用 RabbitMQ，但是确实 erlang 语言阻止了大量的 Java 工程师去深入研究和掌控它，对公司而言，几乎处于不可控的状态，但是确实人家是开源的，比较稳定的支持，活跃度也高；",-1),h={href:"https://github.com/apache/rocketmq",target:"_blank",rel:"noopener noreferrer"},u=t("li",null,[o("所以"),t("strong",null,"中小型公司"),o("，技术实力较为一般，技术挑战不是特别高，用 RabbitMQ 是不错的选择；"),t("strong",null,"大型公司"),o("，基础架构研发实力较强，用 RocketMQ 是很好的选择。")],-1),f=t("li",null,[o("如果是"),t("strong",null,"大数据领域"),o("的实时计算、日志采集等场景，用 Kafka 是业内标准的，绝对没问题，社区活跃度很高，绝对不会黄，何况几乎是全世界这个领域的事实性规范。")],-1),b=s('<h3 id="【困难】什么是-jms" tabindex="-1"><a class="header-anchor" href="#【困难】什么是-jms" aria-hidden="true">#</a> 【困难】什么是 JMS？</h3><p>提到 MQ，就顺便提一下 JMS 。</p><p><strong>JMS（JAVA Message Service，java 消息服务）API 是一个消息服务的标准/规范，允许应用程序组件基于 JavaEE 平台创建、发送、接收和读取消息</strong>。它使分布式通信耦合度更低，消息服务更加可靠以及异步性。</p><p>在 EJB 架构中，有消息 bean 可以无缝的与 JMS 消息服务集成。在 J2EE 架构模式中，有消息服务者模式，用于实现消息与应用直接的解耦。</p><div class="hint-container info"><p class="hint-container-title">JMS 消息模型</p></div><p>在 JMS 标准中，有两种消息模型：</p><ul><li>P2P(Point to Point)</li><li>Pub/Sub(Publish/Subscribe)</li></ul><p><strong>P2P 模式</strong></p><figure><img src="http://upload-images.jianshu.io/upload_images/3101171-2adc66e2367cd2c2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>P2P 模式包含三个角色：MQ（Queue），发送者 (Sender)，接收者 (Receiver)。每个消息都被发送到一个特定的队列，接收者从队列中获取消息。队列保留着消息，直到他们被消费或超时。</p><p>P2P 的特点</p><ul><li>每个消息只有一个消费者（Consumer）（即一旦被消费，消息就不再在 MQ 中）</li><li>发送者和接收者之间在时间上没有依赖性，也就是说当发送者发送了消息之后，不管接收者有没有正在运行，它不会影响到消息被发送到队列</li><li>接收者在成功接收消息之后需向队列应答成功</li></ul><p>如果希望发送的每个消息都会被成功处理的话，那么需要 P2P 模式。</p><p><strong>Pub/sub 模式</strong></p><figure><img src="http://upload-images.jianshu.io/upload_images/3101171-12afe9581da889ea.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>包含三个角色主题（Topic），发布者（Publisher），订阅者（Subscriber） 。多个发布者将消息发送到 Topic, 系统将这些消息传递给多个订阅者。</p><p>Pub/Sub 的特点</p><ul><li>每个消息可以有多个消费者</li><li>发布者和订阅者之间有时间上的依赖性。针对某个主题（Topic）的订阅者，它必须创建一个订阅者之后，才能消费发布者的消息。</li><li>为了消费消息，订阅者必须保持运行的状态。</li></ul><p>为了缓和这样严格的时间相关性，JMS 允许订阅者创建一个可持久化的订阅。这样，即使订阅者没有被激活（运行），它也能接收到发布者的消息。</p><p>如果希望发送的消息可以不被做任何处理、或者只被一个消息者处理、或者可以被多个消费者处理的话，那么可以采用 Pub/Sub 模型。</p><div class="hint-container info"><p class="hint-container-title">JMS 消息消费</p></div><p>在 JMS 中，消息的产生和消费都是异步的。对于消费来说，JMS 的消息者可以通过两种方式来消费消息。</p><ul><li><strong>同步</strong> - 订阅者或接收者通过 <code>receive</code> 方法来接收消息，<code>receive</code> 方法在接收到消息之前（或超时之前）将一直阻塞；</li><li><strong>异步</strong> - 订阅者或接收者可以注册为一个消息监听器。当消息到达之后，系统自动调用监听器的 <code>onMessage</code> 方法。</li></ul><p><code>JNDI</code> - Java 命名和目录接口，是一种标准的 Java 命名系统接口。可以在网络上查找和访问服务。通过指定一个资源名称，该名称对应于数据库或命名服务中的一个记录，同时返回资源连接建立所必须的信息。</p><p>JNDI 在 JMS 中起到查找和访问发送目标或消息来源的作用。</p><h3 id="【中等】什么是-amqp" tabindex="-1"><a class="header-anchor" href="#【中等】什么是-amqp" aria-hidden="true">#</a> 【中等】什么是 AMQP？</h3><p>AMQP（Advanced Message Queuing Protocol）是一种应用层协议，<strong>用于在消息队列系统中定义消息的格式、传输方式和处理机制</strong>。</p><p>AMQP 是一个<strong>面向消息的</strong>、<strong>异步传输</strong>的协议，具有高可靠性、可拓展性、跨平台的特性，适合在分布式系统中传输重要数据。它是 RabbitMQ、ActiveMQ 等消息中间件的底层协议。</p><p><strong>核心组件</strong></p><table><thead><tr><th><strong>组件</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>Connection</strong></td><td>客户端与消息代理（如 RabbitMQ）的物理连接</td></tr><tr><td><strong>Channel</strong></td><td>逻辑通信链路（多路复用连接，减少开销）</td></tr><tr><td><strong>Exchange</strong></td><td>消息路由枢纽（支持多种路由策略）</td></tr><tr><td><strong>Queue</strong></td><td>存储消息的容器，消费者从中拉取数据</td></tr><tr><td><strong>Binding</strong></td><td>定义 Exchange 与 Queue 的映射关系（含路由规则）</td></tr></tbody></table><p><strong>路由模型</strong></p><ul><li><strong>Direct</strong>：精确匹配路由键（如 <code>order.create</code>）</li><li><strong>Fanout</strong>：广播到所有绑定队列（无视路由键）</li><li><strong>Topic</strong>：通配符匹配（如 <code>order.*</code>）</li><li><strong>Headers</strong>：基于消息头键值匹配（非路由键）</li></ul><p><strong>可靠性保障</strong></p><ul><li><strong>消息确认</strong>：消费者手动确认，失败则重入队列</li><li><strong>持久化</strong>：队列/消息持久化防丢失</li><li><strong>事务</strong>：支持原子性提交/回滚（批量操作）</li></ul><p><strong>协议对比</strong></p><table><thead><tr><th><strong>协议</strong></th><th><strong>优势场景</strong></th><th><strong>局限性</strong></th></tr></thead><tbody><tr><td><strong>AMQP</strong></td><td>企业级应用（强事务、高可靠）</td><td>略重（不适合 IoT 轻量场景）</td></tr><tr><td><strong>MQTT</strong></td><td>物联网（低功耗、低带宽）</td><td>功能简单（无复杂路由）</td></tr><tr><td><strong>JMS</strong></td><td>Java 生态集成</td><td>仅限 Java，跨平台性弱</td></tr></tbody></table><h2 id="主流-mq" tabindex="-1"><a class="header-anchor" href="#主流-mq" aria-hidden="true">#</a> 主流 MQ</h2><h3 id="【中等】rocketmq-和-kafka-在架构和功能上有什么区别" tabindex="-1"><a class="header-anchor" href="#【中等】rocketmq-和-kafka-在架构和功能上有什么区别" aria-hidden="true">#</a> 【中等】RocketMQ 和 Kafka 在架构和功能上有什么区别？</h3><div class="hint-container info"><p class="hint-container-title">RocketMQ 和 Kafka 架构对比</p></div><table><thead><tr><th><strong>维度</strong></th><th><strong>RocketMQ</strong></th><th><strong>Kafka</strong></th></tr></thead><tbody><tr><td><strong>注册中心</strong></td><td>自研轻量级 <strong>NameServer</strong>（AP 模型）</td><td>依赖 <strong>ZooKeeper</strong>（CP 模型），Kafka 新版本计划用 KRaft 取代 ZooKeeper</td></tr><tr><td><strong>Broker 角色</strong></td><td>主从架构（Master-Slave）</td><td>无主从区分（所有节点平等）</td></tr><tr><td><strong>存储模型</strong></td><td>单个 CommitLog 文件（含所有 Topic 数据） + 消费队列索引</td><td><strong>主题-分区-段</strong>的层级结构</td></tr><tr><td><strong>消费模式</strong></td><td>支持 Push/Pull 两种模式</td><td>仅 Pull 模式</td></tr></tbody></table><div class="hint-container info"><p class="hint-container-title">RocketMQ 和 Kafka 功能对比</p></div><p>设计差异：</p><ul><li><strong>RocketMQ</strong>： <ul><li><strong>业务友好</strong>：强事务、延迟消息、过滤等开箱即用</li><li><strong>轻量可控</strong>：NameServer 简化集群管理</li></ul></li><li><strong>Kafka</strong>： <ul><li><strong>流式优先</strong>：高吞吐、分区弹性伸缩</li><li><strong>生态整合</strong>：与 Flink/Spark 等深度兼容</li></ul></li></ul><p>主要功能差异如下：</p><table><thead><tr><th><strong>功能</strong></th><th><strong>RocketMQ</strong></th><th><strong>Kafka</strong></th></tr></thead><tbody><tr><td><strong>消息类型</strong></td><td>普通消息、顺序消息、事务消息、延迟消息</td><td>主要支持普通消息（需扩展实现其他特性）</td></tr><tr><td><strong>事务支持</strong></td><td>二阶段提交+事务回查（业务级事务）</td><td>精确一次语义（内部消息事务）</td></tr><tr><td><strong>延迟消息</strong></td><td>内置 18 个固定延迟级别</td><td>需外部实现（如流处理或自定义调度）</td></tr><tr><td><strong>消息回溯</strong></td><td>支持按时间/偏移量回溯</td><td>仅支持按偏移量回溯</td></tr><tr><td><strong>消息过滤</strong></td><td>支持给 Topic 打标签，进一步分类</td><td>仅支持通过 Topic 给消息分类</td></tr><tr><td><strong>死信队列</strong></td><td>消息消费重试失败多次后，进入死信队列</td><td>Kafka 原生不支持</td></tr></tbody></table><div class="hint-container info"><p class="hint-container-title">RocketMQ 和 Kafka 性能与扩展对比</p></div><table><thead><tr><th><strong>维度</strong></th><th><strong>RocketMQ</strong></th><th><strong>Kafka</strong></th></tr></thead><tbody><tr><td><strong>吞吐量</strong></td><td>单机约 10 万 TPS</td><td>单机可达百万 TPS（更高吞吐）</td></tr><tr><td><strong>延迟</strong></td><td>毫秒级（优化后更低）</td><td>毫秒级（依赖 PageCache）</td></tr><tr><td><strong>水平扩展</strong></td><td>需手动调整队列数</td><td>分区自动均衡（更易扩展）</td></tr><tr><td><strong>数据保留</strong></td><td>基于时间/大小策略</td><td>基于时间/大小策略（支持日志压缩）</td></tr></tbody></table><div class="hint-container info"><p class="hint-container-title">RocketMQ 和 Kafka 应用场景与选型</p></div><table><thead><tr><th><strong>场景</strong></th><th><strong>RocketMQ</strong></th><th><strong>Kafka</strong></th></tr></thead><tbody><tr><td><strong>电商/金融业务</strong></td><td>订单、支付等业务级事务</td><td>日志收集、流处理（如 Flink）</td></tr><tr><td><strong>延迟/定时任务</strong></td><td>内置支持（如订单超时）</td><td>需外部系统配合</td></tr><tr><td><strong>大规模日志流</strong></td><td>适合中小规模</td><td>超大规模日志场景（如大数据管道）</td></tr><tr><td><strong>多协议支持</strong></td><td>兼容 JMS、MQTT 等</td><td>仅原生协议</td></tr></tbody></table><p><strong>总结选择建议</strong>：</p><ul><li>选 <strong>RocketMQ</strong>：需要 <strong>业务级事务、延迟消息、多协议支持</strong> 的场景</li><li>选 <strong>Kafka</strong>：需要 <strong>超高吞吐、流处理集成、大规模日志</strong> 的场景</li></ul><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>',52),k={href:"https://www.mianshiya.com/bank/1801255316257841153",target:"_blank",rel:"noopener noreferrer"};function M(m,Q){const n=i("ExternalLinkIcon");return d(),a("div",null,[l,t("ul",null,[c,p,t("li",null,[o("不过现在确实越来越多的公司会去用 RocketMQ，确实很不错，毕竟是阿里出品，但社区可能有突然黄掉的风险（目前 RocketMQ 已捐给 "),t("a",h,[o("Apache"),r(n)]),o("，但 GitHub 上的活跃度其实不算高）对自己公司技术实力有绝对自信的，推荐用 RocketMQ，否则回去老老实实用 RabbitMQ 吧，人家有活跃的开源社区，绝对不会黄。")]),u,f]),b,t("ul",null,[t("li",null,[t("a",k,[o("面试鸭 - 消息队列面试"),r(n)])])])])}const x=e(g,[["render",M],["__file","index.html.vue"]]);export{x as default};
