const e=JSON.parse('{"key":"v-9d7053a2","path":"/pages/eeaed507/","title":"ZooKeeper 原理","lang":"zh-CN","frontmatter":{"title":"ZooKeeper 原理","date":"2020-06-02T22:28:54.000Z","permalink":"/pages/eeaed507/","category":["分布式","分布式协同","ZooKeeper"],"tag":["分布式","协同","zookeeper","面试"],"description":"ZooKeeper 面试 ZooKeeper 简介 【基础】什么是 ZooKeeper？ 要点 Zookeeper 是一个开源的分布式协调服务，目前由 Apache 进行维护。Zookeeper 可以用于实现分布式系统中常见的发布/订阅、负载均衡、命令服务、分布式协调/通知、集群管理、Master 选举、分布式锁和分布式队列等功能。 Zookeeper 具有以下特性： 顺序一致性：从一个客户端发起的事务请求，最终都会严格按照其发起顺序被应用到 Zookeeper 中； 原子性：所有事务请求的处理结果在整个集群中所有机器上都是一致的；不存在部分机器应用了该事务，而另一部分没有应用的情况； 单一视图：所有客户端看到的服务端数据模型都是一致的； 可靠性：一旦服务端成功应用了一个事务，则其引起的改变会一直保留，直到被另外一个事务所更改； 实时性：一旦一个事务被成功应用后，Zookeeper 可以保证客户端立即可以读取到这个事务变更后的最新状态的数据。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/eeaed507/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"ZooKeeper 原理"}],["meta",{"property":"og:description","content":"ZooKeeper 面试 ZooKeeper 简介 【基础】什么是 ZooKeeper？ 要点 Zookeeper 是一个开源的分布式协调服务，目前由 Apache 进行维护。Zookeeper 可以用于实现分布式系统中常见的发布/订阅、负载均衡、命令服务、分布式协调/通知、集群管理、Master 选举、分布式锁和分布式队列等功能。 Zookeeper 具有以下特性： 顺序一致性：从一个客户端发起的事务请求，最终都会严格按照其发起顺序被应用到 Zookeeper 中； 原子性：所有事务请求的处理结果在整个集群中所有机器上都是一致的；不存在部分机器应用了该事务，而另一部分没有应用的情况； 单一视图：所有客户端看到的服务端数据模型都是一致的； 可靠性：一旦服务端成功应用了一个事务，则其引起的改变会一直保留，直到被另外一个事务所更改； 实时性：一旦一个事务被成功应用后，Zookeeper 可以保证客户端立即可以读取到这个事务变更后的最新状态的数据。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-23T15:53:48.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"分布式"}],["meta",{"property":"article:tag","content":"协同"}],["meta",{"property":"article:tag","content":"zookeeper"}],["meta",{"property":"article:tag","content":"面试"}],["meta",{"property":"article:published_time","content":"2020-06-02T22:28:54.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-23T15:53:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ZooKeeper 原理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-06-02T22:28:54.000Z\\",\\"dateModified\\":\\"2025-09-23T15:53:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"ZooKeeper 简介","slug":"zookeeper-简介","link":"#zookeeper-简介","children":[{"level":3,"title":"【基础】什么是 ZooKeeper？","slug":"【基础】什么是-zookeeper","link":"#【基础】什么是-zookeeper","children":[]},{"level":3,"title":"【基础】ZooKeeper 中有哪些应用场景？","slug":"【基础】zookeeper-中有哪些应用场景","link":"#【基础】zookeeper-中有哪些应用场景","children":[]}]},{"level":2,"title":"ZooKeeper 存储","slug":"zookeeper-存储","link":"#zookeeper-存储","children":[{"level":3,"title":"【基础】ZooKeeper 如何存储数据？","slug":"【基础】zookeeper-如何存储数据","link":"#【基础】zookeeper-如何存储数据","children":[]},{"level":3,"title":"【基础】ZooKeeper 有几种节点类型？","slug":"【基础】zookeeper-有几种节点类型","link":"#【基础】zookeeper-有几种节点类型","children":[]}]},{"level":2,"title":"ZooKeeper 架构","slug":"zookeeper-架构","link":"#zookeeper-架构","children":[{"level":3,"title":"【中级】ZooKeeper 的设计目标是什么？","slug":"【中级】zookeeper-的设计目标是什么","link":"#【中级】zookeeper-的设计目标是什么","children":[]},{"level":3,"title":"【中级】ZooKeeper 集群有几种角色？","slug":"【中级】zookeeper-集群有几种角色","link":"#【中级】zookeeper-集群有几种角色","children":[]},{"level":3,"title":"【中级】ZooKeeper 的权限控制如何设计的？","slug":"【中级】zookeeper-的权限控制如何设计的","link":"#【中级】zookeeper-的权限控制如何设计的","children":[]},{"level":3,"title":"【高级】ZooKeeper 的架构有什么缺点？","slug":"【高级】zookeeper-的架构有什么缺点","link":"#【高级】zookeeper-的架构有什么缺点","children":[]}]},{"level":2,"title":"ZooKeeper 工作流","slug":"zookeeper-工作流","link":"#zookeeper-工作流","children":[{"level":3,"title":"【中级】ZooKeeper 读操作工作流程是怎样的？","slug":"【中级】zookeeper-读操作工作流程是怎样的","link":"#【中级】zookeeper-读操作工作流程是怎样的","children":[]},{"level":3,"title":"【中级】ZooKeeper 写操作工作流程是怎样的？","slug":"【中级】zookeeper-写操作工作流程是怎样的","link":"#【中级】zookeeper-写操作工作流程是怎样的","children":[]},{"level":3,"title":"【中级】ZooKeeper 事务机制是怎样的？","slug":"【中级】zookeeper-事务机制是怎样的","link":"#【中级】zookeeper-事务机制是怎样的","children":[]},{"level":3,"title":"【中级】ZooKeeper 监听机制是怎样的？","slug":"【中级】zookeeper-监听机制是怎样的","link":"#【中级】zookeeper-监听机制是怎样的","children":[]},{"level":3,"title":"【中级】ZooKeeper 会话机制是怎样的？","slug":"【中级】zookeeper-会话机制是怎样的","link":"#【中级】zookeeper-会话机制是怎样的","children":[]}]},{"level":2,"title":"Zab 协议","slug":"zab-协议","link":"#zab-协议","children":[{"level":3,"title":"【中级】什么是 Zab 协议？","slug":"【中级】什么是-zab-协议","link":"#【中级】什么是-zab-协议","children":[]},{"level":3,"title":"【高级】Zab 协议中故障恢复的流程是怎样的？","slug":"【高级】zab-协议中故障恢复的流程是怎样的","link":"#【高级】zab-协议中故障恢复的流程是怎样的","children":[]},{"level":3,"title":"【高级】Zab 协议中原子广播的流程是怎样的？","slug":"【高级】zab-协议中原子广播的流程是怎样的","link":"#【高级】zab-协议中原子广播的流程是怎样的","children":[]},{"level":3,"title":"【中级】Zab 和 Paxos 有什么区别？","slug":"【中级】zab-和-paxos-有什么区别","link":"#【中级】zab-和-paxos-有什么区别","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1758642828000,"updatedTime":1758642828000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":1}]},"readingTime":{"minutes":29.93,"words":8980},"filePathRelative":"15.分布式/分布式协同/ZooKeeper/ZooKeeper_面试.md","localizedDate":"2020年6月2日","excerpt":"<h1> ZooKeeper 面试</h1>\\n<h2> ZooKeeper 简介</h2>\\n<h3> 【基础】什么是 ZooKeeper？</h3>\\n<details class=\\"hint-container details\\"><summary>要点</summary>\\n<p>Zookeeper 是一个开源的分布式协调服务，目前由 Apache 进行维护。Zookeeper 可以用于实现分布式系统中常见的发布/订阅、负载均衡、命令服务、分布式协调/通知、集群管理、Master 选举、分布式锁和分布式队列等功能。</p>\\n<p>Zookeeper 具有以下特性：</p>\\n<ul>\\n<li><strong>顺序一致性</strong>：从一个客户端发起的事务请求，最终都会严格按照其发起顺序被应用到 Zookeeper 中；</li>\\n<li><strong>原子性</strong>：所有事务请求的处理结果在整个集群中所有机器上都是一致的；不存在部分机器应用了该事务，而另一部分没有应用的情况；</li>\\n<li><strong>单一视图</strong>：所有客户端看到的服务端数据模型都是一致的；</li>\\n<li><strong>可靠性</strong>：一旦服务端成功应用了一个事务，则其引起的改变会一直保留，直到被另外一个事务所更改；</li>\\n<li><strong>实时性</strong>：一旦一个事务被成功应用后，Zookeeper 可以保证客户端立即可以读取到这个事务变更后的最新状态的数据。</li>\\n</ul>\\n</details>","autoDesc":true}');export{e as data};
