const e=JSON.parse('{"key":"v-ba17ca66","path":"/pages/fcbb3c4e/","title":"MQ 面试","lang":"zh-CN","frontmatter":{"title":"MQ 面试","date":"2022-02-17T22:34:30.000Z","permalink":"/pages/fcbb3c4e/","category":["分布式","分布式通信","MQ"],"tag":["分布式","通信","MQ","面试"],"description":"MQ 面试 MQ 简介 【简单】MQ 是什么？ MQ（Message Queue，消息队列） 是一种异步通信机制，用于在不同服务、应用或系统组件之间可靠地传递消息。它的核心思想是解耦生产者和消费者，通过缓冲消息来提高系统的可靠性、扩展性和可维护性。 MQ 的核心概念 生产者（Producer）：发送消息的应用或服务。 消费者（Consumer）：接收并处理消息的应用或服务。 消息（Message）：传输的数据单位，可以是文本、JSON、二进制等格式。 队列（Queue）：存储消息的缓冲区，遵循 FIFO（先进先出） 或优先级策略。 Broker（消息代理）：负责接收、存储和转发消息的中间件（如 RabbitMQ、Kafka）。 背压：背压是一种消息传递机制中的流控策略。当消费者处理速度跟不上生产者发送速度时，通过反向施加压力，迫使生产者降速或停止发送，以防止系统被压垮。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/fcbb3c4e/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"MQ 面试"}],["meta",{"property":"og:description","content":"MQ 面试 MQ 简介 【简单】MQ 是什么？ MQ（Message Queue，消息队列） 是一种异步通信机制，用于在不同服务、应用或系统组件之间可靠地传递消息。它的核心思想是解耦生产者和消费者，通过缓冲消息来提高系统的可靠性、扩展性和可维护性。 MQ 的核心概念 生产者（Producer）：发送消息的应用或服务。 消费者（Consumer）：接收并处理消息的应用或服务。 消息（Message）：传输的数据单位，可以是文本、JSON、二进制等格式。 队列（Queue）：存储消息的缓冲区，遵循 FIFO（先进先出） 或优先级策略。 Broker（消息代理）：负责接收、存储和转发消息的中间件（如 RabbitMQ、Kafka）。 背压：背压是一种消息传递机制中的流控策略。当消费者处理速度跟不上生产者发送速度时，通过反向施加压力，迫使生产者降速或停止发送，以防止系统被压垮。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-28T14:55:50.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"分布式"}],["meta",{"property":"article:tag","content":"通信"}],["meta",{"property":"article:tag","content":"MQ"}],["meta",{"property":"article:tag","content":"面试"}],["meta",{"property":"article:published_time","content":"2022-02-17T22:34:30.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-28T14:55:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MQ 面试\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-02-17T22:34:30.000Z\\",\\"dateModified\\":\\"2025-09-28T14:55:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"MQ 简介","slug":"mq-简介","link":"#mq-简介","children":[{"level":3,"title":"【简单】MQ 是什么？","slug":"【简单】mq-是什么","link":"#【简单】mq-是什么","children":[]},{"level":3,"title":"【简单】MQ 有哪些应用场景？🌟","slug":"【简单】mq-有哪些应用场景-🌟","link":"#【简单】mq-有哪些应用场景-🌟","children":[]},{"level":3,"title":"【中等】引入 MQ 带来哪些问题？","slug":"【中等】引入-mq-带来哪些问题","link":"#【中等】引入-mq-带来哪些问题","children":[]},{"level":3,"title":"【中等】MQ 有哪些通信模型？🌟","slug":"【中等】mq-有哪些通信模型-🌟","link":"#【中等】mq-有哪些通信模型-🌟","children":[]},{"level":3,"title":"【中等】MQ 推拉模式各有什么利弊，如何选择？🌟","slug":"【中等】mq-推拉模式各有什么利弊-如何选择-🌟","link":"#【中等】mq-推拉模式各有什么利弊-如何选择-🌟","children":[]}]},{"level":2,"title":"MQ 可靠传输","slug":"mq-可靠传输","link":"#mq-可靠传输","children":[{"level":3,"title":"【困难】如何保证 MQ 消息不丢失？🌟🌟🌟","slug":"【困难】如何保证-mq-消息不丢失-🌟🌟🌟","link":"#【困难】如何保证-mq-消息不丢失-🌟🌟🌟","children":[]},{"level":3,"title":"【困难】如何保证 MQ 消息不重复？🌟🌟🌟","slug":"【困难】如何保证-mq-消息不重复-🌟🌟🌟","link":"#【困难】如何保证-mq-消息不重复-🌟🌟🌟","children":[]},{"level":3,"title":"【困难】如何保证 MQ 消息的顺序性？🌟🌟🌟","slug":"【困难】如何保证-mq-消息的顺序性-🌟🌟🌟","link":"#【困难】如何保证-mq-消息的顺序性-🌟🌟🌟","children":[]},{"level":3,"title":"【困难】如何处理 MQ 消息积压？🌟🌟","slug":"【困难】如何处理-mq-消息积压-🌟🌟","link":"#【困难】如何处理-mq-消息积压-🌟🌟","children":[]}]},{"level":2,"title":"MQ 高可用","slug":"mq-高可用","link":"#mq-高可用","children":[{"level":3,"title":"【困难】如何保证 MQ 的高可用？","slug":"【困难】如何保证-mq-的高可用","link":"#【困难】如何保证-mq-的高可用","children":[]}]},{"level":2,"title":"MQ 架构","slug":"mq-架构","link":"#mq-架构","children":[{"level":3,"title":"【困难】Kafka、ActiveMQ、RabbitMQ、RocketMQ 有什么优缺点？","slug":"【困难】kafka、activemq、rabbitmq、rocketmq-有什么优缺点","link":"#【困难】kafka、activemq、rabbitmq、rocketmq-有什么优缺点","children":[]},{"level":3,"title":"【困难】什么是 JMS？","slug":"【困难】什么是-jms","link":"#【困难】什么是-jms","children":[]},{"level":3,"title":"【中等】什么是 AMQP？","slug":"【中等】什么是-amqp","link":"#【中等】什么是-amqp","children":[]}]},{"level":2,"title":"主流 MQ","slug":"主流-mq","link":"#主流-mq","children":[{"level":3,"title":"【中等】RocketMQ 和 Kafka 在架构和功能上有什么区别？","slug":"【中等】rocketmq-和-kafka-在架构和功能上有什么区别","link":"#【中等】rocketmq-和-kafka-在架构和功能上有什么区别","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1758642828000,"updatedTime":1759071350000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":2}]},"readingTime":{"minutes":38.55,"words":11565},"filePathRelative":"15.分布式/分布式通信/MQ/MQ_面试.md","localizedDate":"2022年2月17日","excerpt":"<h1> MQ 面试</h1>\\n<h2> MQ 简介</h2>\\n<h3> 【简单】MQ 是什么？</h3>\\n<p><strong>MQ（Message Queue，消息队列）</strong> 是一种<strong>异步通信机制</strong>，用于在不同服务、应用或系统组件之间<strong>可靠地传递消息</strong>。它的核心思想是<strong>解耦生产者和消费者</strong>，通过缓冲消息来提高系统的可靠性、扩展性和可维护性。</p>\\n<p><strong>MQ 的核心概念</strong></p>\\n<ul>\\n<li><strong>生产者（Producer）</strong>：发送消息的应用或服务。</li>\\n<li><strong>消费者（Consumer）</strong>：接收并处理消息的应用或服务。</li>\\n<li><strong>消息（Message）</strong>：传输的数据单位，可以是文本、JSON、二进制等格式。</li>\\n<li><strong>队列（Queue）</strong>：存储消息的缓冲区，遵循 <strong>FIFO（先进先出）</strong> 或优先级策略。</li>\\n<li><strong>Broker（消息代理）</strong>：负责接收、存储和转发消息的中间件（如 RabbitMQ、Kafka）。</li>\\n<li><strong>背压</strong>：背压是一种消息传递机制中的流控策略。当消费者处理速度跟不上生产者发送速度时，通过<strong>反向施加压力</strong>，迫使生产者降速或停止发送，以防止系统被压垮。</li>\\n</ul>","autoDesc":true}');export{e as data};
