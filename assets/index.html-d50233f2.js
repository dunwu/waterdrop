import{_ as h}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as i,c as d,a as E,b as A,d as a,w as t,e as r}from"./app-de4383da.js";const B={},o=r('<h1 id="设计模式面试" tabindex="-1"><a class="header-anchor" href="#设计模式面试" aria-hidden="true">#</a> 设计模式面试</h1><h2 id="综合" tabindex="-1"><a class="header-anchor" href="#综合" aria-hidden="true">#</a> 综合</h2><h3 id="【简单】什么是设计模式-为什么需要设计模式" tabindex="-1"><a class="header-anchor" href="#【简单】什么是设计模式-为什么需要设计模式" aria-hidden="true">#</a> 【简单】什么是设计模式？为什么需要设计模式？</h3><p><strong>设计模式</strong>是软件设计中常见问题的典型解决方案。</p><p><strong>设计模式</strong>是针对软件设计中<strong>常见问题</strong>的、<strong>可重用</strong>的<strong>解决方案模板</strong>和<strong>最佳实践</strong>。</p><p>模式是针对软件设计中常见问题的解决方案工具箱， 它们定义了一种让你的团队能更高效沟通的通用语言。</p><h3 id="【中等】设计模式可以分为哪几类-一共有多少种主流的设计模式" tabindex="-1"><a class="header-anchor" href="#【中等】设计模式可以分为哪几类-一共有多少种主流的设计模式" aria-hidden="true">#</a> 【中等】设计模式可以分为哪几类？一共有多少种主流的设计模式？</h3><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/202509211833382.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>一共有 23 种主流设计模式</p>',9),s=E("strong",null,"创建型模式",-1),u=E("strong",null,"结构型模式",-1),c=E("strong",null,"行为型模式",-1),F=r('<h3 id="谈谈你了解的最常见的几种设计模式-说说他们的应用场景" tabindex="-1"><a class="header-anchor" href="#谈谈你了解的最常见的几种设计模式-说说他们的应用场景" aria-hidden="true">#</a> 谈谈你了解的最常见的几种设计模式，说说他们的应用场景</h3><h3 id="设计模式是什么-为什么要学习和使用设计模式" tabindex="-1"><a class="header-anchor" href="#设计模式是什么-为什么要学习和使用设计模式" aria-hidden="true">#</a> 设计模式是什么？为什么要学习和使用设计模式？</h3><p>工程最佳实践，编程范式。</p><h2 id="创建型模式" tabindex="-1"><a class="header-anchor" href="#创建型模式" aria-hidden="true">#</a> 创建型模式</h2><h3 id="单例模式有哪几种实现-如何保证线程安全" tabindex="-1"><a class="header-anchor" href="#单例模式有哪几种实现-如何保证线程安全" aria-hidden="true">#</a> 单例模式有哪几种实现？如何保证线程安全？</h3><h3 id="工厂模式和抽象工厂模式有什么区别" tabindex="-1"><a class="header-anchor" href="#工厂模式和抽象工厂模式有什么区别" aria-hidden="true">#</a> 工厂模式和抽象工厂模式有什么区别？</h3><h3 id="请描述简单工厂模式的工作原理。" tabindex="-1"><a class="header-anchor" href="#请描述简单工厂模式的工作原理。" aria-hidden="true">#</a> 请描述简单工厂模式的工作原理。</h3><h2 id="结构型模式" tabindex="-1"><a class="header-anchor" href="#结构型模式" aria-hidden="true">#</a> 结构型模式</h2><h2 id="行为型模式" tabindex="-1"><a class="header-anchor" href="#行为型模式" aria-hidden="true">#</a> 行为型模式</h2><h3 id="什么是策略模式-一般用在什么场景" tabindex="-1"><a class="header-anchor" href="#什么是策略模式-一般用在什么场景" aria-hidden="true">#</a> 什么是策略模式？一般用在什么场景？</h3><h3 id="什么是代理模式-一般用在什么场景" tabindex="-1"><a class="header-anchor" href="#什么是代理模式-一般用在什么场景" aria-hidden="true">#</a> 什么是代理模式？一般用在什么场景？</h3><h3 id="什么是观察者模式-一般用在什么场景" tabindex="-1"><a class="header-anchor" href="#什么是观察者模式-一般用在什么场景" aria-hidden="true">#</a> 什么是观察者模式？一般用在什么场景？</h3><h3 id="什么是模板方法模式-一般用在什么场景" tabindex="-1"><a class="header-anchor" href="#什么是模板方法模式-一般用在什么场景" aria-hidden="true">#</a> 什么是模板方法模式？一般用在什么场景？</h3><h3 id="什么是责任链模式-一般用在什么场景" tabindex="-1"><a class="header-anchor" href="#什么是责任链模式-一般用在什么场景" aria-hidden="true">#</a> 什么是责任链模式？一般用在什么场景？</h3><h3 id="什么是单例模式-使用单例模式有什么好处-有哪些常用的单例模式实现方式-各自的应用场景是什么" tabindex="-1"><a class="header-anchor" href="#什么是单例模式-使用单例模式有什么好处-有哪些常用的单例模式实现方式-各自的应用场景是什么" aria-hidden="true">#</a> 什么是单例模式？使用单例模式有什么好处？有哪些常用的单例模式实现方式？各自的应用场景是什么？</h3><ul><li><strong>饿汉式</strong></li><li><strong>懒汉式</strong></li><li><strong>双重锁</strong></li></ul><h3 id="什么是工厂模式-使用工厂模式有什么好处-工厂模式有哪些分类-各自的应用场景是什么" tabindex="-1"><a class="header-anchor" href="#什么是工厂模式-使用工厂模式有什么好处-工厂模式有哪些分类-各自的应用场景是什么" aria-hidden="true">#</a> 什么是工厂模式？使用工厂模式有什么好处？工厂模式有哪些分类？各自的应用场景是什么？</h3><p>工厂模式可以延迟初始化</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>',19),f={href:"https://www.mianshiya.com/bank/1801559627969929217",target:"_blank",rel:"noopener noreferrer"};function C(_,m){const e=l("RouterLink"),n=l("ExternalLinkIcon");return i(),d("div",null,[o,E("ul",null,[E("li",null,[s,A("：创建型模式提供了创建对象的机制， 能够提升已有代码的灵活性和可复用性。 "),E("ul",null,[E("li",null,[a(e,{to:"/03.%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.html"},{default:t(()=>[A("简单工厂模式 (Simple Factory)")]),_:1})]),E("li",null,[a(e,{to:"/03.%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.html"},{default:t(()=>[A("工厂方法模式 (Factory Method)")]),_:1})]),E("li",null,[a(e,{to:"/03.%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.html"},{default:t(()=>[A("抽象工厂模式 (Abstract Factory)")]),_:1})]),E("li",null,[a(e,{to:"/03.%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F.html"},{default:t(()=>[A("建造者模式 (Builder)")]),_:1})]),E("li",null,[a(e,{to:"/03.%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F.html"},{default:t(()=>[A("原型模式 (Prototype)")]),_:1})]),E("li",null,[a(e,{to:"/03.%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html"},{default:t(()=>[A("单例模式 (Singleton)")]),_:1})])])]),E("li",null,[u,A("：结构型模式介绍如何将对象和类组装成较大的结构， 并同时保持结构的灵活和高效。 "),E("ul",null,[E("li",null,[a(e,{to:"/03.%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F.html"},{default:t(()=>[A("适配器模式 (Adapter)")]),_:1})]),E("li",null,[a(e,{to:"/03.%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F.html"},{default:t(()=>[A("桥接模式 (Bridge)")]),_:1})]),E("li",null,[a(e,{to:"/03.%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F.html"},{default:t(()=>[A("组合模式 (Composite)")]),_:1})]),E("li",null,[a(e,{to:"/03.%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F.html"},{default:t(()=>[A("装饰模式 (Decorator)")]),_:1})]),E("li",null,[a(e,{to:"/03.%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F.html"},{default:t(()=>[A("外观模式 (Facade)")]),_:1})]),E("li",null,[a(e,{to:"/03.%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F.html"},{default:t(()=>[A("享元模式 (Flyweight)")]),_:1})]),E("li",null,[a(e,{to:"/03.%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.html"},{default:t(()=>[A("代理模式 (Proxy)")]),_:1})])])]),E("li",null,[c,A("：行为模式负责对象间的高效沟通和职责委派。 "),E("ul",null,[E("li",null,[a(e,{to:"/03.%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.html"},{default:t(()=>[A("模板方法模式 (Template Method)")]),_:1})]),E("li",null,[a(e,{to:"/03.%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F.html"},{default:t(()=>[A("命令模式 (Command)")]),_:1})]),E("li",null,[a(e,{to:"/03.%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F.html"},{default:t(()=>[A("迭代器模式 (Iterator)")]),_:1})]),E("li",null,[a(e,{to:"/03.%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.html"},{default:t(()=>[A("观察者模式 (Observer)")]),_:1})]),E("li",null,[a(e,{to:"/03.%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F.html"},{default:t(()=>[A("解释器模式 (Interpreter)")]),_:1})]),E("li",null,[a(e,{to:"/03.%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F.html"},{default:t(()=>[A("中介者模式 (Mediator)")]),_:1})]),E("li",null,[a(e,{to:"/03.%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F.html"},{default:t(()=>[A("职责链模式 (Chain of Responsibility)")]),_:1})]),E("li",null,[a(e,{to:"/03.%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F.html"},{default:t(()=>[A("备忘录模式 (Memento)")]),_:1})]),E("li",null,[a(e,{to:"/03.%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.html"},{default:t(()=>[A("策略模式 (Strategy)")]),_:1})]),E("li",null,[a(e,{to:"/03.%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F.html"},{default:t(()=>[A("访问者模式 (Visitor)")]),_:1})]),E("li",null,[a(e,{to:"/03.%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F.html"},{default:t(()=>[A("状态模式 (State)")]),_:1})])])])]),F,E("ul",null,[E("li",null,[E("a",f,[A("面试鸭 - 设计模式面试"),a(n)])])])])}const x=h(B,[["render",C],["__file","index.html.vue"]]);export{x as default};
