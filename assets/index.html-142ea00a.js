import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a as n,b as s,d as e,e as t}from"./app-4519767e.js";const r={},u=t(`<h1 id="java-虚拟机之调优" tabindex="-1"><a class="header-anchor" href="#java-虚拟机之调优" aria-hidden="true">#</a> Java 虚拟机之调优</h1><h2 id="jvm-调优概述" tabindex="-1"><a class="header-anchor" href="#jvm-调优概述" aria-hidden="true">#</a> JVM 调优概述</h2><h3 id="gc-性能指标" tabindex="-1"><a class="header-anchor" href="#gc-性能指标" aria-hidden="true">#</a> GC 性能指标</h3><p>对于 JVM 调优来说，需要先明确调优的目标。<br> 从性能的角度看，通常关注三个指标：</p><ul><li><code>吞吐量（throughput）</code> - 指不考虑 GC 引起的停顿时间或内存消耗，垃圾收集器能支撑应用达到的最高性能指标。</li><li><code>停顿时间（latency）</code> - 其度量标准是缩短由于垃圾啊收集引起的停顿时间或者完全消除因垃圾收集所引起的停顿，避免应用运行时发生抖动。</li><li><code>垃圾回收频率</code> - 久发生一次指垃圾回收呢？通常垃圾回收的频率越低越好，增大堆内存空间可以有效降低垃圾回收发生的频率，但同时也意味着堆积的回收对象越多，最终也会增加回收时的停顿时间。所以我们只要适当地增大堆内存空间，保证正常的垃圾回收频率即可。</li></ul><p>大多数情况下调优会侧重于其中一个或者两个方面的目标，很少有情况可以兼顾三个不同的角度。</p><h3 id="调优原则" tabindex="-1"><a class="header-anchor" href="#调优原则" aria-hidden="true">#</a> 调优原则</h3><p>GC 优化的两个目标：</p><ul><li><strong>降低 Full GC 的频率</strong></li><li><strong>减少 Full GC 的执行时间</strong></li></ul><p>GC 优化的基本原则是：将不同的 GC 参数应用到两个及以上的服务器上然后比较它们的性能，然后将那些被证明可以提高性能或减少 GC 执行时间的参数应用于最终的工作服务器上。</p><h4 id="降低-minor-gc-频率" tabindex="-1"><a class="header-anchor" href="#降低-minor-gc-频率" aria-hidden="true">#</a> 降低 Minor GC 频率</h4><p>如果新生代空间较小，Eden 区很快被填满，就会导致频繁 Minor GC，因此我们可以通过增大新生代空间来降低 Minor GC 的频率。</p><p>可能你会有这样的疑问，扩容 Eden 区虽然可以减少 Minor GC 的次数，但不会增加单次 Minor GC 的时间吗？如果单次 Minor GC 的时间增加，那也很难达到我们期待的优化效果呀。</p><p>我们知道，单次 Minor GC 时间是由两部分组成：T1（扫描新生代）和 T2（复制存活对象）。假设一个对象在 Eden 区的存活时间为 500ms，Minor GC 的时间间隔是 300ms，那么正常情况下，Minor GC 的时间为 ：T1+T2。</p><p>当我们增大新生代空间，Minor GC 的时间间隔可能会扩大到 600ms，此时一个存活 500ms 的对象就会在 Eden 区中被回收掉，此时就不存在复制存活对象了，所以再发生 Minor GC 的时间为：两次扫描新生代，即 2T1。</p><p>可见，扩容后，Minor GC 时增加了 T1，但省去了 T2 的时间。通常在虚拟机中，复制对象的成本要远高于扫描成本。</p><p>如果在堆内存中存在较多的长期存活的对象，此时增加年轻代空间，反而会增加 Minor GC 的时间。如果堆中的短期对象很多，那么扩容新生代，单次 Minor GC 时间不会显著增加。因此，单次 Minor GC 时间更多取决于 GC 后存活对象的数量，而非 Eden 区的大小。</p><h4 id="降低-full-gc-的频率" tabindex="-1"><a class="header-anchor" href="#降低-full-gc-的频率" aria-hidden="true">#</a> 降低 Full GC 的频率</h4><p>Full GC 相对来说会比 Minor GC 更耗时。减少进入老年代的对象数量可以显著降低 Full GC 的频率。</p><p><strong>减少创建大对象：<strong>如果</strong>对象占用内存过大，在 Eden 区被创建后会直接被传入老年代</strong>。在平常的业务场景中，我们习惯一次性从数据库中查询出一个大对象用于 web 端显示。例如，我之前碰到过一个一次性查询出 60 个字段的业务操作，这种大对象如果超过年轻代最大对象阈值，会被直接创建在老年代；即使被创建在了年轻代，由于年轻代的内存空间有限，通过 Minor GC 之后也会进入到老年代。这种大对象很容易产生较多的 Full GC。</p><p>我们可以将这种大对象拆解出来，首次只查询一些比较重要的字段，如果还需要其它字段辅助查看，再通过第二次查询显示剩余的字段。</p><p>**增大堆内存空间：**在堆内存不足的情况下，增大堆内存空间，且设置初始化堆内存为最大堆内存，也可以降低 Full GC 的频率。</p><h4 id="降低-full-gc-的时间" tabindex="-1"><a class="header-anchor" href="#降低-full-gc-的时间" aria-hidden="true">#</a> 降低 Full GC 的时间</h4><p>Full GC 的执行时间比 Minor GC 要长很多，因此，如果在 Full GC 上花费过多的时间（超过 1s），将可能出现超时错误。</p><ul><li>如果<strong>通过减小老年代内存来减少 Full GC 时间</strong>，可能会引起 <code>OutOfMemoryError</code> 或者导致 Full GC 的频率升高。</li><li>另外，如果<strong>通过增加老年代内存来降低 Full GC 的频率</strong>，Full GC 的时间可能因此增加。</li></ul><p>因此，你<strong>需要把老年代的大小设置成一个“合适”的值</strong>。</p><p><strong>GC 优化需要考虑的 JVM 参数</strong></p><table><thead><tr><th><strong>类型</strong></th><th><strong>参数</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>堆内存大小</td><td><code>-Xms</code></td><td>启动 JVM 时堆内存的大小</td></tr><tr><td></td><td><code>-Xmx</code></td><td>堆内存最大限制</td></tr><tr><td>新生代空间大小</td><td><code>-XX:NewRatio</code></td><td>新生代和老年代的内存比</td></tr><tr><td></td><td><code>-XX:NewSize</code></td><td>新生代内存大小</td></tr><tr><td></td><td><code>-XX:SurvivorRatio</code></td><td>Eden 区和 Survivor 区的内存比</td></tr></tbody></table><p>GC 优化时最常用的参数是<code>-Xms</code>,<code>-Xmx</code>和<code>-XX:NewRatio</code>。<code>-Xms</code>和<code>-Xmx</code>参数通常是必须的，所以<code>NewRatio</code>的值将对 GC 性能产生重要的影响。</p><p>有些人可能会问<strong>如何设置永久代内存大小</strong>，你可以用<code>-XX:PermSize</code>和<code>-XX:MaxPermSize</code>参数来进行设置，但是要记住，只有当出现<code>OutOfMemoryError</code>错误时你才需要去设置永久代内存。</p><h3 id="gc-优化的过程" tabindex="-1"><a class="header-anchor" href="#gc-优化的过程" aria-hidden="true">#</a> GC 优化的过程</h3><p>GC 优化的过程大致可分为以下步骤：</p><h4 id="_1-监控-gc-状态" tabindex="-1"><a class="header-anchor" href="#_1-监控-gc-状态" aria-hidden="true">#</a> （1）监控 GC 状态</h4><p>你需要监控 GC 从而检查系统中运行的 GC 的各种状态。</p><h4 id="_2-分析-gc-日志" tabindex="-1"><a class="header-anchor" href="#_2-分析-gc-日志" aria-hidden="true">#</a> （2）分析 GC 日志</h4><p>在检查 GC 状态后，你需要分析监控结构并决定是否需要进行 GC 优化。如果分析结果显示运行 GC 的时间只有 0.1-0.3 秒，那么就不需要把时间浪费在 GC 优化上，但如果运行 GC 的时间达到 1-3 秒，甚至大于 10 秒，那么 GC 优化将是很有必要的。</p><p>但是，如果你已经分配了大约 10GB 内存给 Java，并且这些内存无法省下，那么就无法进行 GC 优化了。在进行 GC 优化之前，你需要考虑为什么你需要分配这么大的内存空间，如果你分配了 1GB 或 2GB 大小的内存并且出现了<code>OutOfMemoryError</code>，那你就应该执行**堆快照（heap dump）**来消除导致异常的原因。</p><blockquote><p>🔔 注意：</p></blockquote><blockquote><p>**堆快照（heap dump）**是一个用来检查 Java 内存中的对象和数据的内存文件。该文件可以通过执行 JDK 中的<code>jmap</code>命令来创建。在创建文件的过程中，所有 Java 程序都将暂停，因此，不要在系统执行过程中创建该文件。</p></blockquote><blockquote><p>你可以在互联网上搜索 heap dump 的详细说明。</p></blockquote><h4 id="_3-选择合适-gc-回收器" tabindex="-1"><a class="header-anchor" href="#_3-选择合适-gc-回收器" aria-hidden="true">#</a> （3）选择合适 GC 回收器</h4><p>如果你决定要进行 GC 优化，那么你需要选择一个 GC 回收器，并且为它设置合理 JVM 参数。此时如果你有多个服务器，请如上文提到的那样，在每台机器上设置不同的 GC 参数并分析它们的区别。</p><h4 id="_4-分析结果" tabindex="-1"><a class="header-anchor" href="#_4-分析结果" aria-hidden="true">#</a> （4）分析结果</h4><p>在设置完 GC 参数后就可以开始收集数据，请在收集至少 24 小时后再进行结果分析。如果你足够幸运，你可能会找到系统的最佳 GC 参数。如若不然，你还需要分析输出日志并检查分配的内存，然后需要通过不断调整 GC 类型/内存大小来找到系统的最佳参数。</p><h4 id="_5-应用优化配置" tabindex="-1"><a class="header-anchor" href="#_5-应用优化配置" aria-hidden="true">#</a> （5）应用优化配置</h4><p>如果 GC 优化的结果令人满意，就可以将参数应用到所有服务器上，并停止 GC 优化。</p><p>在下面的章节中，你将会看到上述每一步所做的具体工作。</p><h2 id="gc-日志" tabindex="-1"><a class="header-anchor" href="#gc-日志" aria-hidden="true">#</a> GC 日志</h2><h3 id="获取-gc-日志" tabindex="-1"><a class="header-anchor" href="#获取-gc-日志" aria-hidden="true">#</a> 获取 GC 日志</h3><p>获取 GC 日志有两种方式：</p><ul><li>使用 <code>jstat</code> 命令动态查看</li><li>在容器中设置相关参数打印 GC 日志</li></ul><h4 id="jstat-命令查看-gc" tabindex="-1"><a class="header-anchor" href="#jstat-命令查看-gc" aria-hidden="true">#</a> jstat 命令查看 GC</h4><p><code>jstat -gc</code> 统计垃圾回收堆的行为：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>jstat <span class="token operator">-</span>gc <span class="token number">1262</span>
 <span class="token constant">S0C</span>    <span class="token constant">S1C</span>     <span class="token constant">S0U</span>     <span class="token constant">S1U</span>   <span class="token constant">EC</span>       <span class="token constant">EU</span>        <span class="token constant">OC</span>         <span class="token constant">OU</span>        <span class="token constant">PC</span>       <span class="token constant">PU</span>         <span class="token constant">YGC</span>    <span class="token constant">YGCT</span>    <span class="token constant">FGC</span>    <span class="token constant">FGCT</span>     <span class="token constant">GCT</span>
<span class="token number">26112.0</span> <span class="token number">24064.0</span> <span class="token number">6562.5</span>  <span class="token number">0.0</span>   <span class="token number">564224.0</span> <span class="token number">76274.5</span>   <span class="token number">434176.0</span>   <span class="token number">388518.3</span>  <span class="token number">524288.0</span> <span class="token number">42724.7</span>    <span class="token number">320</span>    <span class="token number">6.417</span>   <span class="token number">1</span>      <span class="token number">0.398</span>    <span class="token number">6.815</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以设置间隔固定时间来打印：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>jstat <span class="token parameter variable">-gc</span> <span class="token number">1262</span> <span class="token number">2000</span> <span class="token number">20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令意思就是每隔 2000ms 输出 1262 的 gc 情况，一共输出 20 次</p><h4 id="打印-gc-的参数" tabindex="-1"><a class="header-anchor" href="#打印-gc-的参数" aria-hidden="true">#</a> 打印 GC 的参数</h4><p>通过 JVM 参数预先设置 GC 日志，通常有以下几种 JVM 参数设置：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-XX:+PrintGC 输出 GC 日志
-XX:+PrintGCDetails 输出 GC 的详细日志
-XX:+PrintGCTimeStamps 输出 GC 的时间戳（以基准时间的形式）
-XX:+PrintGCDateStamps 输出 GC 的时间戳（以日期的形式，如 2013-05-04T21:53:59.234+0800）
-XX:+PrintHeapAtGC 在进行 GC 的前后打印出堆的信息
-verbose:gc -Xloggc:../logs/gc.log 日志文件的输出路径
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,60),i={href:"https://sourceforge.net/projects/gcviewer/",target:"_blank",rel:"noopener noreferrer"},k=t(`<p>【示例】Tomcat 设置示例</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">JAVA_OPTS</span><span class="token operator">=</span><span class="token string">&quot;-server -Xms2000m -Xmx2000m -Xmn800m -XX:PermSize=64m -XX:MaxPermSize=256m -XX:SurvivorRatio=4
-verbose:gc -Xloggc:<span class="token variable">$CATALINA_HOME</span>/logs/gc.log
-Djava.awt.headless=true
-XX:+PrintGCTimeStamps -XX:+PrintGCDetails
-Dsun.rmi.dgc.server.gcInterval=600000 -Dsun.rmi.dgc.client.gcInterval=600000
-XX:+UseConcMarkSweepGC -XX:MaxTenuringThreshold=15&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>-Xms2000m -Xmx2000m -Xmn800m -XX:PermSize=64m -XX:MaxPermSize=256m</code><br> Xms，即为 jvm 启动时得 JVM 初始堆大小,Xmx 为 jvm 的最大堆大小，xmn 为新生代的大小，permsize 为永久代的初始大小，MaxPermSize 为永久代的最大空间。</li><li><code>-XX:SurvivorRatio=4</code><br> SurvivorRatio 为新生代空间中的 Eden 区和救助空间 Survivor 区的大小比值，默认是 8，则两个 Survivor 区与一个 Eden 区的比值为 2:8,一个 Survivor 区占整个年轻代的 1/10。调小这个参数将增大 survivor 区，让对象尽量在 survitor 区呆长一点，减少进入年老代的对象。去掉救助空间的想法是让大部分不能马上回收的数据尽快进入年老代，加快年老代的回收频率，减少年老代暴涨的可能性，这个是通过将-XX:SurvivorRatio 设置成比较大的值（比如 65536)来做到。</li><li><code>-verbose:gc -Xloggc:$CATALINA_HOME/logs/gc.log</code><br> 将虚拟机每次垃圾回收的信息写到日志文件中，文件名由 file 指定，文件格式是平文件，内容和-verbose:gc 输出内容相同。</li><li><code>-Djava.awt.headless=true</code> Headless 模式是系统的一种配置模式。在该模式下，系统缺少了显示设备、键盘或鼠标。</li><li><code>-XX:+PrintGCTimeStamps -XX:+PrintGCDetails</code><br> 设置 gc 日志的格式</li><li><code>-Dsun.rmi.dgc.server.gcInterval=600000 -Dsun.rmi.dgc.client.gcInterval=600000</code><br> 指定 rmi 调用时 gc 的时间间隔</li><li><code>-XX:+UseConcMarkSweepGC -XX:MaxTenuringThreshold=15</code> 采用并发 gc 方式，经过 15 次 minor gc 后进入年老代</li></ul><h3 id="分析-gc-日志" tabindex="-1"><a class="header-anchor" href="#分析-gc-日志" aria-hidden="true">#</a> 分析 GC 日志</h3><p>Young GC 回收日志:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">2016</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">05</span><span class="token constant">T10</span><span class="token operator">:</span><span class="token number">43</span><span class="token operator">:</span><span class="token number">18.093</span><span class="token operator">+</span><span class="token number">0800</span><span class="token operator">:</span> <span class="token number">25.395</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">GC</span> <span class="token punctuation">[</span><span class="token class-name">PSYoungGen</span><span class="token operator">:</span> <span class="token number">274931</span>K<span class="token operator">-&gt;</span><span class="token function">10738K</span><span class="token punctuation">(</span><span class="token number">274944</span>K<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token number">371093</span>K<span class="token operator">-&gt;</span><span class="token function">147186K</span><span class="token punctuation">(</span><span class="token number">450048</span>K<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0668480</span> secs<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token class-name">Times</span><span class="token operator">:</span> user<span class="token operator">=</span><span class="token number">0.17</span> sys<span class="token operator">=</span><span class="token number">0.08</span><span class="token punctuation">,</span> real<span class="token operator">=</span><span class="token number">0.07</span> secs<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Full GC 回收日志:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">2016</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">05</span><span class="token constant">T10</span><span class="token operator">:</span><span class="token number">43</span><span class="token operator">:</span><span class="token number">18.160</span><span class="token operator">+</span><span class="token number">0800</span><span class="token operator">:</span> <span class="token number">25.462</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token class-name">Full</span> <span class="token constant">GC</span> <span class="token punctuation">[</span><span class="token class-name">PSYoungGen</span><span class="token operator">:</span> <span class="token number">10738</span>K<span class="token operator">-&gt;</span><span class="token function">0K</span><span class="token punctuation">(</span><span class="token number">274944</span>K<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token class-name">ParOldGen</span><span class="token operator">:</span> <span class="token number">136447</span>K<span class="token operator">-&gt;</span><span class="token function">140379K</span><span class="token punctuation">(</span><span class="token number">302592</span>K<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token number">147186</span>K<span class="token operator">-&gt;</span><span class="token function">140379K</span><span class="token punctuation">(</span><span class="token number">577536</span>K<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token class-name">PSPermGen</span><span class="token operator">:</span> <span class="token number">85411</span>K<span class="token operator">-&gt;</span><span class="token function">85376K</span><span class="token punctuation">(</span><span class="token number">171008</span>K<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0.6763541</span> secs<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token class-name">Times</span><span class="token operator">:</span> user<span class="token operator">=</span><span class="token number">1.75</span> sys<span class="token operator">=</span><span class="token number">0.02</span><span class="token punctuation">,</span> real<span class="token operator">=</span><span class="token number">0.68</span> secs<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过上面日志分析得出，PSYoungGen、ParOldGen、PSPermGen 属于 Parallel 收集器。其中 PSYoungGen 表示 gc 回收前后年轻代的内存变化；ParOldGen 表示 gc 回收前后老年代的内存变化；PSPermGen 表示 gc 回收前后永久区的内存变化。young gc 主要是针对年轻代进行内存回收比较频繁，耗时短；full gc 会对整个堆内存进行回城，耗时长，因此一般尽量减少 full gc 的次数</p><p>通过两张图非常明显看出 gc 日志构成：</p><p>YOUNG GC</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20220107093538.jfif" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>FULL GC</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20220107093543.jfif" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="cpu-过高" tabindex="-1"><a class="header-anchor" href="#cpu-过高" aria-hidden="true">#</a> CPU 过高</h4><p>定位步骤：</p><p>（1）执行 top -c 命令，找到 cpu 最高的进程的 id</p><p>（2）jstack PID 导出 Java 应用程序的线程堆栈信息。</p><p>示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>jstack <span class="token number">6795</span>

<span class="token string">&quot;Low Memory Detector&quot;</span> daemon prio<span class="token operator">=</span><span class="token number">10</span> tid<span class="token operator">=</span><span class="token number">0x081465f8</span> nid<span class="token operator">=</span><span class="token number">0x7</span> runnable <span class="token punctuation">[</span><span class="token number">0x00000000</span><span class="token punctuation">.</span><span class="token number">.0</span>x00000000<span class="token punctuation">]</span>
        <span class="token string">&quot;CompilerThread0&quot;</span> daemon prio<span class="token operator">=</span><span class="token number">10</span> tid<span class="token operator">=</span><span class="token number">0x08143c58</span> nid<span class="token operator">=</span><span class="token number">0x6</span> waiting on condition <span class="token punctuation">[</span><span class="token number">0x00000000</span><span class="token punctuation">.</span><span class="token number">.0</span>xfb5fd798<span class="token punctuation">]</span>
        <span class="token string">&quot;Signal Dispatcher&quot;</span> daemon prio<span class="token operator">=</span><span class="token number">10</span> tid<span class="token operator">=</span><span class="token number">0x08142f08</span> nid<span class="token operator">=</span><span class="token number">0x5</span> waiting on condition <span class="token punctuation">[</span><span class="token number">0x00000000</span><span class="token punctuation">.</span><span class="token number">.0</span>x00000000<span class="token punctuation">]</span>
        <span class="token string">&quot;Finalizer&quot;</span> daemon prio<span class="token operator">=</span><span class="token number">10</span> tid<span class="token operator">=</span><span class="token number">0x08137ca0</span> nid<span class="token operator">=</span><span class="token number">0x4</span> in <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">0xfbeed000</span><span class="token punctuation">.</span><span class="token number">.0</span>xfbeeddb8<span class="token punctuation">]</span>

        at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Object</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token class-name">Native</span> <span class="token class-name">Method</span><span class="token punctuation">)</span>

        <span class="token operator">-</span> waiting on <span class="token generics"><span class="token punctuation">&lt;</span>0xef600848<span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span>a <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ref<span class="token punctuation">.</span></span>ReferenceQueue</span>$<span class="token class-name">Lock</span><span class="token punctuation">)</span>

        at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ref<span class="token punctuation">.</span></span>ReferenceQueue</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">ReferenceQueue</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">116</span><span class="token punctuation">)</span>

        <span class="token operator">-</span> locked <span class="token generics"><span class="token punctuation">&lt;</span>0xef600848<span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span>a <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ref<span class="token punctuation">.</span></span>ReferenceQueue</span>$<span class="token class-name">Lock</span><span class="token punctuation">)</span>

        at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ref<span class="token punctuation">.</span></span>ReferenceQueue</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">ReferenceQueue</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">132</span><span class="token punctuation">)</span>

        at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ref<span class="token punctuation">.</span></span>Finalizer</span>$<span class="token class-name">FinalizerThread</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Finalizer</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">159</span><span class="token punctuation">)</span>

        <span class="token string">&quot;Reference Handler&quot;</span> daemon prio<span class="token operator">=</span><span class="token number">10</span> tid<span class="token operator">=</span><span class="token number">0x081370f0</span> nid<span class="token operator">=</span><span class="token number">0x3</span> in <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">0xfbf4a000</span><span class="token punctuation">.</span><span class="token number">.0</span>xfbf4aa38<span class="token punctuation">]</span>

        at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Object</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token class-name">Native</span> <span class="token class-name">Method</span><span class="token punctuation">)</span>

        <span class="token operator">-</span> waiting on <span class="token generics"><span class="token punctuation">&lt;</span>0xef600758<span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span>a <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ref<span class="token punctuation">.</span></span>Reference</span>$<span class="token class-name">Lock</span><span class="token punctuation">)</span>

        at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Object</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">474</span><span class="token punctuation">)</span>

        at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ref<span class="token punctuation">.</span></span>Reference</span>$<span class="token class-name">ReferenceHandler</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Reference</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">116</span><span class="token punctuation">)</span>

        <span class="token operator">-</span> locked <span class="token generics"><span class="token punctuation">&lt;</span>0xef600758<span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span>a <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ref<span class="token punctuation">.</span></span>Reference</span>$<span class="token class-name">Lock</span><span class="token punctuation">)</span>

        <span class="token string">&quot;VM Thread&quot;</span> prio<span class="token operator">=</span><span class="token number">10</span> tid<span class="token operator">=</span><span class="token number">0x08134878</span> nid<span class="token operator">=</span><span class="token number">0x2</span> runnable

        <span class="token string">&quot;VM Periodic Task Thread&quot;</span> prio<span class="token operator">=</span><span class="token number">10</span> tid<span class="token operator">=</span><span class="token number">0x08147768</span> nid<span class="token operator">=</span><span class="token number">0x8</span> waiting on condition
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在打印的堆栈日志文件中，tid 和 nid 的含义：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>nid : 对应的 Linux 操作系统下的 tid 线程号，也就是前面转化的 16 进制数字
tid: 这个应该是 jvm 的 jmm 内存规范中的唯一地址定位
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在 CPU 过高的情况下，查找响应的线程，一般定位都是用 nid 来定位的。而如果发生死锁之类的问题，一般用 tid 来定位。</p><p>（3）定位 CPU 高的线程打印其 nid</p><p>查看线程下具体进程信息的命令如下：</p><p>top -H -p 6735</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>top <span class="token operator">-</span> <span class="token number">14</span><span class="token operator">:</span><span class="token number">20</span><span class="token operator">:</span><span class="token number">09</span> up <span class="token number">611</span> days<span class="token punctuation">,</span>  <span class="token number">2</span><span class="token operator">:</span><span class="token number">56</span><span class="token punctuation">,</span>  <span class="token number">1</span> user<span class="token punctuation">,</span>  load average<span class="token operator">:</span> <span class="token number">13.19</span><span class="token punctuation">,</span> <span class="token number">7.76</span><span class="token punctuation">,</span> <span class="token number">7.82</span>
<span class="token class-name">Threads</span><span class="token operator">:</span> <span class="token number">6991</span> total<span class="token punctuation">,</span>  <span class="token number">17</span> running<span class="token punctuation">,</span> <span class="token number">6974</span> sleeping<span class="token punctuation">,</span>   <span class="token number">0</span> stopped<span class="token punctuation">,</span>   <span class="token number">0</span> zombie
<span class="token operator">%</span><span class="token class-name">Cpu</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token number">90.4</span> us<span class="token punctuation">,</span>  <span class="token number">2.1</span> sy<span class="token punctuation">,</span>  <span class="token number">0.0</span> ni<span class="token punctuation">,</span>  <span class="token number">7.0</span> id<span class="token punctuation">,</span>  <span class="token number">0.0</span> wa<span class="token punctuation">,</span>  <span class="token number">0.0</span> hi<span class="token punctuation">,</span>  <span class="token number">0.4</span> si<span class="token punctuation">,</span>  <span class="token number">0.0</span> st
<span class="token class-name">KiB</span> <span class="token class-name">Mem</span><span class="token operator">:</span>  <span class="token number">32783044</span> total<span class="token punctuation">,</span> <span class="token number">32505008</span> used<span class="token punctuation">,</span>   <span class="token number">278036</span> free<span class="token punctuation">,</span>   <span class="token number">120304</span> buffers
<span class="token class-name">KiB</span> <span class="token class-name">Swap</span><span class="token operator">:</span>        <span class="token number">0</span> total<span class="token punctuation">,</span>        <span class="token number">0</span> used<span class="token punctuation">,</span>        <span class="token number">0</span> free<span class="token punctuation">.</span> <span class="token number">4497428</span> cached <span class="token class-name">Mem</span>

  <span class="token constant">PID</span> <span class="token constant">USER</span>      <span class="token constant">PR</span>  <span class="token constant">NI</span>    <span class="token constant">VIRT</span>    <span class="token constant">RES</span>    <span class="token constant">SHR</span> <span class="token class-name">S</span> <span class="token operator">%</span><span class="token constant">CPU</span> <span class="token operator">%</span><span class="token constant">MEM</span>     <span class="token constant">TIME</span><span class="token operator">+</span> <span class="token constant">COMMAND</span>
 <span class="token number">6800</span> root      <span class="token number">20</span>   <span class="token number">0</span> <span class="token number">27.299</span>g <span class="token number">0.021</span>t   <span class="token number">7172</span> <span class="token class-name">S</span> <span class="token number">54.7</span> <span class="token number">70.1</span> <span class="token number">187</span><span class="token operator">:</span><span class="token number">55.61</span> java
 <span class="token number">6803</span> root      <span class="token number">20</span>   <span class="token number">0</span> <span class="token number">27.299</span>g <span class="token number">0.021</span>t   <span class="token number">7172</span> <span class="token class-name">S</span> <span class="token number">54.4</span> <span class="token number">70.1</span> <span class="token number">187</span><span class="token operator">:</span><span class="token number">52.59</span> java
 <span class="token number">6798</span> root      <span class="token number">20</span>   <span class="token number">0</span> <span class="token number">27.299</span>g <span class="token number">0.021</span>t   <span class="token number">7172</span> <span class="token class-name">S</span> <span class="token number">53.7</span> <span class="token number">70.1</span> <span class="token number">187</span><span class="token operator">:</span><span class="token number">55.08</span> java
 <span class="token number">6801</span> root      <span class="token number">20</span>   <span class="token number">0</span> <span class="token number">27.299</span>g <span class="token number">0.021</span>t   <span class="token number">7172</span> <span class="token class-name">S</span> <span class="token number">53.7</span> <span class="token number">70.1</span> <span class="token number">187</span><span class="token operator">:</span><span class="token number">55.25</span> java
 <span class="token number">6797</span> root      <span class="token number">20</span>   <span class="token number">0</span> <span class="token number">27.299</span>g <span class="token number">0.021</span>t   <span class="token number">7172</span> <span class="token class-name">S</span> <span class="token number">53.1</span> <span class="token number">70.1</span> <span class="token number">187</span><span class="token operator">:</span><span class="token number">52.78</span> java
 <span class="token number">6804</span> root      <span class="token number">20</span>   <span class="token number">0</span> <span class="token number">27.299</span>g <span class="token number">0.021</span>t   <span class="token number">7172</span> <span class="token class-name">S</span> <span class="token number">53.1</span> <span class="token number">70.1</span> <span class="token number">187</span><span class="token operator">:</span><span class="token number">55.76</span> java
 <span class="token number">6802</span> root      <span class="token number">20</span>   <span class="token number">0</span> <span class="token number">27.299</span>g <span class="token number">0.021</span>t   <span class="token number">7172</span> <span class="token class-name">S</span> <span class="token number">52.1</span> <span class="token number">70.1</span> <span class="token number">187</span><span class="token operator">:</span><span class="token number">54.79</span> java
 <span class="token number">6799</span> root      <span class="token number">20</span>   <span class="token number">0</span> <span class="token number">27.299</span>g <span class="token number">0.021</span>t   <span class="token number">7172</span> <span class="token class-name">S</span> <span class="token number">51.8</span> <span class="token number">70.1</span> <span class="token number">187</span><span class="token operator">:</span><span class="token number">53.36</span> java
 <span class="token number">6807</span> root      <span class="token number">20</span>   <span class="token number">0</span> <span class="token number">27.299</span>g <span class="token number">0.021</span>t   <span class="token number">7172</span> <span class="token class-name">S</span> <span class="token number">13.6</span> <span class="token number">70.1</span>  <span class="token number">48</span><span class="token operator">:</span><span class="token number">58.60</span> java
<span class="token number">11014</span> root      <span class="token number">20</span>   <span class="token number">0</span> <span class="token number">27.299</span>g <span class="token number">0.021</span>t   <span class="token number">7172</span> <span class="token class-name">R</span>  <span class="token number">8.4</span> <span class="token number">70.1</span>   <span class="token number">8</span><span class="token operator">:</span><span class="token number">00.32</span> java
<span class="token number">10642</span> root      <span class="token number">20</span>   <span class="token number">0</span> <span class="token number">27.299</span>g <span class="token number">0.021</span>t   <span class="token number">7172</span> <span class="token class-name">R</span>  <span class="token number">6.5</span> <span class="token number">70.1</span>   <span class="token number">6</span><span class="token operator">:</span><span class="token number">32.06</span> java
 <span class="token number">6808</span> root      <span class="token number">20</span>   <span class="token number">0</span> <span class="token number">27.299</span>g <span class="token number">0.021</span>t   <span class="token number">7172</span> <span class="token class-name">S</span>  <span class="token number">6.1</span> <span class="token number">70.1</span> <span class="token number">159</span><span class="token operator">:</span><span class="token number">08.40</span> java
<span class="token number">11315</span> root      <span class="token number">20</span>   <span class="token number">0</span> <span class="token number">27.299</span>g <span class="token number">0.021</span>t   <span class="token number">7172</span> <span class="token class-name">S</span>  <span class="token number">3.9</span> <span class="token number">70.1</span>   <span class="token number">5</span><span class="token operator">:</span><span class="token number">54.10</span> java
<span class="token number">12545</span> root      <span class="token number">20</span>   <span class="token number">0</span> <span class="token number">27.299</span>g <span class="token number">0.021</span>t   <span class="token number">7172</span> <span class="token class-name">S</span>  <span class="token number">3.9</span> <span class="token number">70.1</span>   <span class="token number">6</span><span class="token operator">:</span><span class="token number">55.48</span> java
<span class="token number">23353</span> root      <span class="token number">20</span>   <span class="token number">0</span> <span class="token number">27.299</span>g <span class="token number">0.021</span>t   <span class="token number">7172</span> <span class="token class-name">S</span>  <span class="token number">3.9</span> <span class="token number">70.1</span>   <span class="token number">2</span><span class="token operator">:</span><span class="token number">20.55</span> java
<span class="token number">24868</span> root      <span class="token number">20</span>   <span class="token number">0</span> <span class="token number">27.299</span>g <span class="token number">0.021</span>t   <span class="token number">7172</span> <span class="token class-name">S</span>  <span class="token number">3.9</span> <span class="token number">70.1</span>   <span class="token number">2</span><span class="token operator">:</span><span class="token number">12.46</span> java
 <span class="token number">9146</span> root      <span class="token number">20</span>   <span class="token number">0</span> <span class="token number">27.299</span>g <span class="token number">0.021</span>t   <span class="token number">7172</span> <span class="token class-name">S</span>  <span class="token number">3.6</span> <span class="token number">70.1</span>   <span class="token number">7</span><span class="token operator">:</span><span class="token number">42.72</span> java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由此可以看出占用 CPU 较高的线程，但是这些还不高，无法直接定位到具体的类。nid 是 16 进制的，所以我们要获取线程的 16 进制 ID：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>printf &quot;%x\\n&quot; 6800
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输出结果:45cd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后根据输出结果到 jstack 打印的堆栈日志中查定位：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token string">&quot;catalina-exec-5692&quot;</span> daemon prio<span class="token operator">=</span><span class="token number">10</span> tid<span class="token operator">=</span><span class="token number">0x00007f3b05013800</span> nid<span class="token operator">=</span><span class="token number">0x45cd</span> waiting on condition <span class="token punctuation">[</span><span class="token number">0x00007f3ae08e3000</span><span class="token punctuation">]</span>
   <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Thread<span class="token punctuation">.</span>State</span><span class="token operator">:</span> <span class="token constant">TIMED_WAITING</span> <span class="token punctuation">(</span>parking<span class="token punctuation">)</span>
        at <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span></span>Unsafe</span><span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token class-name">Native</span> <span class="token class-name">Method</span><span class="token punctuation">)</span>
        <span class="token operator">-</span> parking <span class="token keyword">to</span> <span class="token namespace">wait</span> <span class="token keyword">for</span>  <span class="token generics"><span class="token punctuation">&lt;</span>0x00000006a7800598<span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span>a <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span>AbstractQueuedSynchronizer</span>$<span class="token class-name">ConditionObject</span><span class="token punctuation">)</span>
        at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span>LockSupport</span><span class="token punctuation">.</span><span class="token function">parkNanos</span><span class="token punctuation">(</span><span class="token class-name">LockSupport</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">226</span><span class="token punctuation">)</span>
        at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span>AbstractQueuedSynchronizer</span>$<span class="token class-name">ConditionObject</span><span class="token punctuation">.</span><span class="token function">awaitNanos</span><span class="token punctuation">(</span><span class="token class-name">AbstractQueuedSynchronizer</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2082</span><span class="token punctuation">)</span>
        at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>LinkedBlockingQueue</span><span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token class-name">LinkedBlockingQueue</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">467</span><span class="token punctuation">)</span>
        at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>threads<span class="token punctuation">.</span></span>TaskQueue</span><span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token class-name">TaskQueue</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">86</span><span class="token punctuation">)</span>
        at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>threads<span class="token punctuation">.</span></span>TaskQueue</span><span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token class-name">TaskQueue</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">32</span><span class="token punctuation">)</span>
        at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>ThreadPoolExecutor</span><span class="token punctuation">.</span><span class="token function">getTask</span><span class="token punctuation">(</span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1068</span><span class="token punctuation">)</span>
        at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>ThreadPoolExecutor</span><span class="token punctuation">.</span><span class="token function">runWorker</span><span class="token punctuation">(</span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1130</span><span class="token punctuation">)</span>
        at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>ThreadPoolExecutor</span>$<span class="token class-name">Worker</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">615</span><span class="token punctuation">)</span>
        at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>threads<span class="token punctuation">.</span></span>TaskThread</span>$<span class="token class-name">WrappingRunnable</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">TaskThread</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">61</span><span class="token punctuation">)</span>
        at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Thread</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">745</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="gc-配置" tabindex="-1"><a class="header-anchor" href="#gc-配置" aria-hidden="true">#</a> GC 配置</h2>`,33),d={href:"http://www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html",target:"_blank",rel:"noopener noreferrer"},m=t(`<h3 id="堆大小设置" tabindex="-1"><a class="header-anchor" href="#堆大小设置" aria-hidden="true">#</a> 堆大小设置</h3><p><strong>年轻代的设置很关键。</strong></p><p>JVM 中最大堆大小有三方面限制：</p><ol><li>相关操作系统的数据模型（32-bt 还是 64-bit）限制；</li><li>系统的可用虚拟内存限制；</li><li>系统的可用物理内存限制。</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>整个堆大小 = 年轻代大小 + 年老代大小 + 持久代大小
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>持久代一般固定大小为 <code>64m</code>。使用 <code>-XX:PermSize</code> 设置。</li><li>官方推荐年轻代占整个堆的 3/8。使用 <code>-Xmn</code> 设置。</li></ul><h3 id="jvm-内存配置" tabindex="-1"><a class="header-anchor" href="#jvm-内存配置" aria-hidden="true">#</a> JVM 内存配置</h3><table><thead><tr><th>配置</th><th>描述</th></tr></thead><tbody><tr><td><code>-Xss</code></td><td>虚拟机栈大小。</td></tr><tr><td><code>-Xms</code></td><td>堆空间初始值。</td></tr><tr><td><code>-Xmx</code></td><td>堆空间最大值。</td></tr><tr><td><code>-Xmn</code></td><td>新生代空间大小。</td></tr><tr><td><code>-XX:NewSize</code></td><td>新生代空间初始值。</td></tr><tr><td><code>-XX:MaxNewSize</code></td><td>新生代空间最大值。</td></tr><tr><td><code>-XX:NewRatio</code></td><td>新生代与年老代的比例。默认为 2，意味着老年代是新生代的 2 倍。</td></tr><tr><td><code>-XX:SurvivorRatio</code></td><td>新生代中调整 eden 区与 survivor 区的比例，默认为 8。即 <code>eden</code> 区为 80% 的大小，两个 <code>survivor</code> 分别为 10% 的大小。</td></tr><tr><td><code>-XX:PermSize</code></td><td>永久代空间的初始值。</td></tr><tr><td><code>-XX:MaxPermSize</code></td><td>永久代空间的最大值。</td></tr></tbody></table><h3 id="gc-类型配置" tabindex="-1"><a class="header-anchor" href="#gc-类型配置" aria-hidden="true">#</a> GC 类型配置</h3><table><thead><tr><th>配置</th><th>描述</th></tr></thead><tbody><tr><td><code>-XX:+UseSerialGC</code></td><td>使用 Serial + Serial Old 垃圾回收器组合</td></tr><tr><td><code>-XX:+UseParallelGC</code></td><td>使用 Parallel Scavenge + Parallel Old 垃圾回收器组合</td></tr><tr><td><s><code>-XX:+UseParallelOldGC</code></s></td><td><s>使用 Parallel Old 垃圾回收器（JDK5 后已无用）</s></td></tr><tr><td><code>-XX:+UseParNewGC</code></td><td>使用 ParNew + Serial Old 垃圾回收器</td></tr><tr><td><code>-XX:+UseConcMarkSweepGC</code></td><td>使用 CMS + ParNew + Serial Old 垃圾回收器组合</td></tr><tr><td><code>-XX:+UseG1GC</code></td><td>使用 G1 垃圾回收器</td></tr><tr><td><code>-XX:ParallelCMSThreads</code></td><td>并发标记扫描垃圾回收器 = 为使用的线程数量</td></tr></tbody></table><h3 id="垃圾回收器通用参数" tabindex="-1"><a class="header-anchor" href="#垃圾回收器通用参数" aria-hidden="true">#</a> 垃圾回收器通用参数</h3><table><thead><tr><th>配置</th><th>描述</th></tr></thead><tbody><tr><td><code>PretenureSizeThreshold</code></td><td>晋升年老代的对象大小。默认为 0。比如设为 10M，则超过 10M 的对象将不在 eden 区分配，而直接进入年老代。</td></tr><tr><td><code>MaxTenuringThreshold</code></td><td>晋升老年代的最大年龄。默认为 15。比如设为 10，则对象在 10 次普通 GC 后将会被放入年老代。</td></tr><tr><td><code>DisableExplicitGC</code></td><td>禁用 <code>System.gc()</code></td></tr></tbody></table><h3 id="jmx" tabindex="-1"><a class="header-anchor" href="#jmx" aria-hidden="true">#</a> JMX</h3><p>开启 JMX 后，可以使用 <code>jconsole</code> 或 <code>jvisualvm</code> 进行监控 Java 程序的基本信息和运行情况。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">-</span><span class="token class-name">Dcom</span><span class="token punctuation">.</span>sun<span class="token punctuation">.</span>management<span class="token punctuation">.</span>jmxremote<span class="token operator">=</span><span class="token boolean">true</span>
<span class="token operator">-</span><span class="token class-name">Dcom</span><span class="token punctuation">.</span>sun<span class="token punctuation">.</span>management<span class="token punctuation">.</span>jmxremote<span class="token punctuation">.</span>ssl<span class="token operator">=</span><span class="token boolean">false</span>
<span class="token operator">-</span><span class="token class-name">Dcom</span><span class="token punctuation">.</span>sun<span class="token punctuation">.</span>management<span class="token punctuation">.</span>jmxremote<span class="token punctuation">.</span>authenticate<span class="token operator">=</span><span class="token boolean">false</span>
<span class="token operator">-</span><span class="token class-name">Djava</span><span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>server<span class="token punctuation">.</span>hostname<span class="token operator">=</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span>
<span class="token operator">-</span><span class="token class-name">Dcom</span><span class="token punctuation">.</span>sun<span class="token punctuation">.</span>management<span class="token punctuation">.</span>jmxremote<span class="token punctuation">.</span>port<span class="token operator">=</span><span class="token number">18888</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>-Djava.rmi.server.hostname</code> 指定 Java 程序运行的服务器，<code>-Dcom.sun.management.jmxremote.port</code> 指定服务监听端口。</p><h3 id="远程-debug" tabindex="-1"><a class="header-anchor" href="#远程-debug" aria-hidden="true">#</a> 远程 DEBUG</h3><p>如果开启 Java 应用的远程 Debug 功能，需要指定如下参数：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">-</span><span class="token class-name">Xdebug</span>
<span class="token operator">-</span><span class="token class-name">Xnoagent</span>
<span class="token operator">-</span><span class="token class-name">Djava</span><span class="token punctuation">.</span>compiler<span class="token operator">=</span><span class="token constant">NONE</span>
<span class="token operator">-</span><span class="token class-name">Xrunjdwp</span><span class="token operator">:</span>transport<span class="token operator">=</span>dt_socket<span class="token punctuation">,</span>address<span class="token operator">=</span><span class="token number">28888</span><span class="token punctuation">,</span>server<span class="token operator">=</span>y<span class="token punctuation">,</span>suspend<span class="token operator">=</span>n
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>address 即为远程 debug 的监听端口。</p><h3 id="heapdump" tabindex="-1"><a class="header-anchor" href="#heapdump" aria-hidden="true">#</a> HeapDump</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token operator">-</span><span class="token class-name">OmitStackTraceInFastThrow</span> <span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token operator">+</span><span class="token class-name">HeapDumpOnOutOfMemoryError</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="辅助配置" tabindex="-1"><a class="header-anchor" href="#辅助配置" aria-hidden="true">#</a> 辅助配置</h3><table><thead><tr><th>配置</th><th>描述</th></tr></thead><tbody><tr><td><code>-XX:+PrintGCDetails</code></td><td>打印 GC 日志</td></tr><tr><td><code>-Xloggc:&lt;filename&gt;</code></td><td>指定 GC 日志文件名</td></tr><tr><td><code>-XX:+HeapDumpOnOutOfMemoryError</code></td><td>内存溢出时输出堆快照文件</td></tr></tbody></table><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,25),b={href:"https://book.douban.com/subject/34907497/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://time.geekbang.org/column/intro/100028001",target:"_blank",rel:"noopener noreferrer"},h={href:"https://www.douban.com/doulist/2545443/",target:"_blank",rel:"noopener noreferrer"},g={href:"http://www.importnew.com/23761.html",target:"_blank",rel:"noopener noreferrer"},f={href:"https://www.cnblogs.com/zhguang/p/Java-JVM-GC.html",target:"_blank",rel:"noopener noreferrer"},C={href:"https://segmentfault.com/a/1190000005174819",target:"_blank",rel:"noopener noreferrer"},G={href:"http://www.importnew.com/19264.html",target:"_blank",rel:"noopener noreferrer"},x={href:"https://juejin.im/post/59f02f406fb9a0451869f01c",target:"_blank",rel:"noopener noreferrer"},j={href:"http://www.ityouknow.com/jvm/2017/09/21/How-to-optimize-Java-GC.html",target:"_blank",rel:"noopener noreferrer"},X={href:"https://my.oschina.net/feichexia/blog/196575",target:"_blank",rel:"noopener noreferrer"};function S(M,_){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("如果是长时间的 GC 日志，我们很难通过文本形式去查看整体的 GC 性能。此时，我们可以通过"),n("a",i,[s("GCView"),e(a)]),s("工具打开日志文件，图形化界面查看整体的 GC 性能。")]),k,n("blockquote",null,[n("p",null,[s("详细参数说明请参考官方文档："),n("a",d,[s("JavaHotSpot VM Options"),e(a)]),s("，这里仅列举常用参数。")])]),m,n("ul",null,[n("li",null,[n("a",b,[s("《深入理解 Java 虚拟机》"),e(a)])]),n("li",null,[n("a",v,[s("极客时间教程 - Java 性能调优实战"),e(a)])]),n("li",null,[n("a",h,[s("从表到里学习 JVM 实现"),e(a)])]),n("li",null,[n("a",g,[s("JVM（4）：Jvm 调优-命令篇"),e(a)])]),n("li",null,[n("a",f,[s("Java 系列笔记(4) - JVM 监控与调优"),e(a)])]),n("li",null,[n("a",C,[s("Java 服务 GC 参数调优案例"),e(a)])]),n("li",null,[n("a",G,[s("JVM 调优总结（5）：典型配置"),e(a)])]),n("li",null,[n("a",x,[s("如何合理的规划一次 jvm 性能调优"),e(a)])]),n("li",null,[n("a",j,[s("jvm 系列(九):如何优化 Java GC“译”"),e(a)])]),n("li",null,[n("a",X,[s("https://my.oschina.net/feichexia/blog/196575"),e(a)])])])])}const T=p(r,[["render",S],["__file","index.html.vue"]]);export{T as default};
