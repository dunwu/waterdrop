const e=JSON.parse('{"key":"v-5a11744e","path":"/pages/bcf0fb8c/","title":"负载均衡","lang":"zh-CN","frontmatter":{"title":"负载均衡","cover":"https://raw.githubusercontent.com/dunwu/images/master/snap/202310250658719.png","date":"2018-07-05T15:50:00.000Z","permalink":"/pages/bcf0fb8c/","category":["分布式","分布式调度"],"tag":["分布式","服务治理","调度","负载均衡"],"description":"负载均衡 负载均衡简介 大型系统面临的挑战 大型系统通常要面对高并发、高可用、海量数据等挑战。 为了提升系统整体的性能，可以采用垂直扩展和水平扩展两种方式。 垂直扩展：在网站发展早期，可以从单机的角度通过提升硬件处理能力，比如 CPU 处理能力，内存容量，磁盘等方面，实现机器处理能力的提升。但是，单机是有性能瓶颈的，一旦触及瓶颈，再想提升，付出的成本和代价会极高。通俗来说，就三个字：得加钱！这显然不能满足大型分布式系统（网站）所有应对的大流量，高并发，海量数据等挑战。 水平扩展：通过集群来分担大型网站的流量。集群中的应用机器（节点）通常被设计成无状态，用户可以请求任何一个节点，这些节点共同分担访问压力。水平扩展有两个要点： 集群化、分区化：将一个完整的应用化整为零，如果是无状态应用，可以直接集群化部署；如果是有状态应用，可以将状态数据分区（分片），然后部署到多台机器上。 负载均衡：集群化、分区化后，要解决的问题是，请求应该被分发（寻址）到哪台机器上。这就需要通过某种策略来控制分发，这种技术就是负载均衡。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/bcf0fb8c/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"负载均衡"}],["meta",{"property":"og:description","content":"负载均衡 负载均衡简介 大型系统面临的挑战 大型系统通常要面对高并发、高可用、海量数据等挑战。 为了提升系统整体的性能，可以采用垂直扩展和水平扩展两种方式。 垂直扩展：在网站发展早期，可以从单机的角度通过提升硬件处理能力，比如 CPU 处理能力，内存容量，磁盘等方面，实现机器处理能力的提升。但是，单机是有性能瓶颈的，一旦触及瓶颈，再想提升，付出的成本和代价会极高。通俗来说，就三个字：得加钱！这显然不能满足大型分布式系统（网站）所有应对的大流量，高并发，海量数据等挑战。 水平扩展：通过集群来分担大型网站的流量。集群中的应用机器（节点）通常被设计成无状态，用户可以请求任何一个节点，这些节点共同分担访问压力。水平扩展有两个要点： 集群化、分区化：将一个完整的应用化整为零，如果是无状态应用，可以直接集群化部署；如果是有状态应用，可以将状态数据分区（分片），然后部署到多台机器上。 负载均衡：集群化、分区化后，要解决的问题是，请求应该被分发（寻址）到哪台机器上。这就需要通过某种策略来控制分发，这种技术就是负载均衡。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/dunwu/images/master/snap/202310250658719.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-29T23:17:22.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"负载均衡"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"分布式"}],["meta",{"property":"article:tag","content":"服务治理"}],["meta",{"property":"article:tag","content":"调度"}],["meta",{"property":"article:tag","content":"负载均衡"}],["meta",{"property":"article:published_time","content":"2018-07-05T15:50:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-29T23:17:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"负载均衡\\",\\"image\\":[\\"https://raw.githubusercontent.com/dunwu/images/master/snap/202310250658719.png\\"],\\"datePublished\\":\\"2018-07-05T15:50:00.000Z\\",\\"dateModified\\":\\"2024-12-29T23:17:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"负载均衡简介","slug":"负载均衡简介","link":"#负载均衡简介","children":[{"level":3,"title":"大型系统面临的挑战","slug":"大型系统面临的挑战","link":"#大型系统面临的挑战","children":[]},{"level":3,"title":"什么是负载均衡","slug":"什么是负载均衡","link":"#什么是负载均衡","children":[]}]},{"level":2,"title":"负载均衡的分类","slug":"负载均衡的分类","link":"#负载均衡的分类","children":[{"level":3,"title":"载体维度分类","slug":"载体维度分类","link":"#载体维度分类","children":[]},{"level":3,"title":"网络通信分类","slug":"网络通信分类","link":"#网络通信分类","children":[]}]},{"level":2,"title":"负载均衡算法","slug":"负载均衡算法","link":"#负载均衡算法","children":[{"level":3,"title":"轮询算法","slug":"轮询算法","link":"#轮询算法","children":[]},{"level":3,"title":"随机算法","slug":"随机算法","link":"#随机算法","children":[]},{"level":3,"title":"加权轮询/随机算法","slug":"加权轮询-随机算法","link":"#加权轮询-随机算法","children":[]},{"level":3,"title":"最少连接数算法","slug":"最少连接数算法","link":"#最少连接数算法","children":[]},{"level":3,"title":"最少响应时间算法","slug":"最少响应时间算法","link":"#最少响应时间算法","children":[]},{"level":3,"title":"哈希算法","slug":"哈希算法","link":"#哈希算法","children":[]},{"level":3,"title":"一致性哈希算法","slug":"一致性哈希算法","link":"#一致性哈希算法","children":[]},{"level":3,"title":"虚拟一致性哈希算法","slug":"虚拟一致性哈希算法","link":"#虚拟一致性哈希算法","children":[]},{"level":3,"title":"小结","slug":"小结","link":"#小结","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1734395124000,"updatedTime":1735514242000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":2}]},"readingTime":{"minutes":35.76,"words":10727},"filePathRelative":"15.分布式/12.分布式调度/负载均衡.md","localizedDate":"2018年7月5日","excerpt":"<h1> 负载均衡</h1>\\n<h2> 负载均衡简介</h2>\\n<h3> 大型系统面临的挑战</h3>\\n<p>大型系统通常要面对高并发、高可用、海量数据等挑战。</p>\\n<p>为了提升系统整体的性能，可以采用垂直扩展和水平扩展两种方式。</p>\\n<ul>\\n<li><strong>垂直扩展</strong>：在网站发展早期，可以从单机的角度通过<strong>提升硬件处理能力</strong>，比如 CPU 处理能力，内存容量，磁盘等方面，实现机器处理能力的提升。但是，单机是有性能瓶颈的，一旦触及瓶颈，再想提升，付出的成本和代价会极高。通俗来说，就三个字：<strong>得加钱</strong>！这显然不能满足大型分布式系统（网站）所有应对的大流量，高并发，海量数据等挑战。</li>\\n<li><strong>水平扩展</strong>：通过集群来分担大型网站的流量。集群中的应用机器（节点）通常被设计成无状态，用户可以请求任何一个节点，这些节点共同分担访问压力。水平扩展有两个要点：\\n<ul>\\n<li><strong>集群化、分区化</strong>：将一个完整的应用化整为零，如果是无状态应用，可以直接集群化部署；如果是有状态应用，可以将状态数据分区（分片），然后部署到多台机器上。</li>\\n<li><strong>负载均衡</strong>：集群化、分区化后，要解决的问题是，请求应该被分发（寻址）到哪台机器上。这就需要通过某种策略来控制分发，这种技术就是负载均衡。</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{e as data};
