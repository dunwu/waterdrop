const e=JSON.parse('{"key":"v-3a126862","path":"/pages/2d3132d1/","title":"系统架构概述","lang":"zh-CN","frontmatter":{"title":"系统架构概述","date":"2018-07-05T15:11:00.000Z","order":2,"permalink":"/pages/2d3132d1/","category":["设计","架构","综合"],"tag":["架构","分布式","微服务"],"description":"系统架构概述 大型系统架构演化 一个大型系统的架构是一个渐进的演化过程。罗马不是一天建成的，同理，微信、淘宝等大型系统绝不是一蹴而就的。随着业务的不断发展，用户体量的增加，系统的复杂度势必不断攀升，最终迫使系统架构进化，以应对挑战。 了解大型系统架构的演化过程，有利于我们了解架构进化的发展规律和业界一些成熟的应对方案。帮助我们在实际工作中，如何去思考架构，如何去凝练解决方案。 大型系统架构演化比较具有代表性的就是大型网站的演化过程。这里介绍一下大型网站演化的一般规律。 单机架构 问题：网站运营初期，访问用户少，一台服务器绰绰有余。 特征：应用程序、数据库、文件等所有的资源都在一台服务器上。 描述：通常服务器操作系统使用 linux，应用程序使用 PHP 开发，然后部署在 Apache 上，数据库使用 Mysql，通俗称为 LAMP。汇集各种免费开源软件以及一台廉价服务器就可以开始系统的发展之路了。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/2d3132d1/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"系统架构概述"}],["meta",{"property":"og:description","content":"系统架构概述 大型系统架构演化 一个大型系统的架构是一个渐进的演化过程。罗马不是一天建成的，同理，微信、淘宝等大型系统绝不是一蹴而就的。随着业务的不断发展，用户体量的增加，系统的复杂度势必不断攀升，最终迫使系统架构进化，以应对挑战。 了解大型系统架构的演化过程，有利于我们了解架构进化的发展规律和业界一些成熟的应对方案。帮助我们在实际工作中，如何去思考架构，如何去凝练解决方案。 大型系统架构演化比较具有代表性的就是大型网站的演化过程。这里介绍一下大型网站演化的一般规律。 单机架构 问题：网站运营初期，访问用户少，一台服务器绰绰有余。 特征：应用程序、数据库、文件等所有的资源都在一台服务器上。 描述：通常服务器操作系统使用 linux，应用程序使用 PHP 开发，然后部署在 Apache 上，数据库使用 Mysql，通俗称为 LAMP。汇集各种免费开源软件以及一台廉价服务器就可以开始系统的发展之路了。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-15T00:29:21.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"架构"}],["meta",{"property":"article:tag","content":"分布式"}],["meta",{"property":"article:tag","content":"微服务"}],["meta",{"property":"article:published_time","content":"2018-07-05T15:11:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-15T00:29:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"系统架构概述\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2018-07-05T15:11:00.000Z\\",\\"dateModified\\":\\"2025-09-15T00:29:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"大型系统架构演化","slug":"大型系统架构演化","link":"#大型系统架构演化","children":[{"level":3,"title":"单机架构","slug":"单机架构","link":"#单机架构","children":[]},{"level":3,"title":"应用服务和数据服务分离","slug":"应用服务和数据服务分离","link":"#应用服务和数据服务分离","children":[]},{"level":3,"title":"使用缓存改善性能","slug":"使用缓存改善性能","link":"#使用缓存改善性能","children":[]},{"level":3,"title":"负载均衡","slug":"负载均衡","link":"#负载均衡","children":[]},{"level":3,"title":"数据库读写分离","slug":"数据库读写分离","link":"#数据库读写分离","children":[]},{"level":3,"title":"多级缓存","slug":"多级缓存","link":"#多级缓存","children":[]},{"level":3,"title":"业务拆分","slug":"业务拆分","link":"#业务拆分","children":[]},{"level":3,"title":"分库分表","slug":"分库分表","link":"#分库分表","children":[]},{"level":3,"title":"分布式组件","slug":"分布式组件","link":"#分布式组件","children":[]},{"level":3,"title":"微服务","slug":"微服务","link":"#微服务","children":[]}]},{"level":2,"title":"架构设计的考量","slug":"架构设计的考量","link":"#架构设计的考量","children":[{"level":3,"title":"什么是架构","slug":"什么是架构","link":"#什么是架构","children":[]},{"level":3,"title":"架构设计的目标","slug":"架构设计的目标","link":"#架构设计的目标","children":[]},{"level":3,"title":"架构设计的原则","slug":"架构设计的原则","link":"#架构设计的原则","children":[]},{"level":3,"title":"高性能","slug":"高性能","link":"#高性能","children":[]},{"level":3,"title":"高可用","slug":"高可用","link":"#高可用","children":[]},{"level":3,"title":"扩展性","slug":"扩展性","link":"#扩展性","children":[]},{"level":3,"title":"伸缩性","slug":"伸缩性","link":"#伸缩性","children":[]},{"level":3,"title":"安全性","slug":"安全性","link":"#安全性","children":[]}]},{"level":2,"title":"常见架构模型","slug":"常见架构模型","link":"#常见架构模型","children":[{"level":3,"title":"分层架构","slug":"分层架构","link":"#分层架构","children":[]},{"level":3,"title":"事件驱动架构","slug":"事件驱动架构","link":"#事件驱动架构","children":[]},{"level":3,"title":"微核架构","slug":"微核架构","link":"#微核架构","children":[]},{"level":3,"title":"微服务架构","slug":"微服务架构","link":"#微服务架构","children":[]},{"level":3,"title":"云架构","slug":"云架构","link":"#云架构","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1757896161000,"updatedTime":1757896161000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":1}]},"readingTime":{"minutes":25.51,"words":7652},"filePathRelative":"03.设计/架构/综合/系统架构概述.md","localizedDate":"2018年7月5日","excerpt":"<h1> 系统架构概述</h1>\\n<h2> 大型系统架构演化</h2>\\n<p>一个大型系统的架构是一个渐进的演化过程。罗马不是一天建成的，同理，微信、淘宝等大型系统绝不是一蹴而就的。随着业务的不断发展，用户体量的增加，系统的复杂度势必不断攀升，最终迫使系统架构进化，以应对挑战。</p>\\n<p>了解大型系统架构的演化过程，有利于我们了解架构进化的发展规律和业界一些成熟的应对方案。帮助我们在实际工作中，如何去思考架构，如何去凝练解决方案。</p>\\n<p>大型系统架构演化比较具有代表性的就是大型网站的演化过程。这里介绍一下大型网站演化的一般规律。</p>\\n<h3> 单机架构</h3>\\n<ul>\\n<li><strong>问题</strong>：网站运营初期，访问用户少，一台服务器绰绰有余。</li>\\n<li><strong>特征</strong>：<strong>应用程序、数据库、文件等所有的资源都在一台服务器上。</strong></li>\\n<li><strong>描述</strong>：通常服务器操作系统使用 linux，应用程序使用 PHP 开发，然后部署在 Apache 上，数据库使用 Mysql，通俗称为 LAMP。汇集各种免费开源软件以及一台廉价服务器就可以开始系统的发展之路了。</li>\\n</ul>","autoDesc":true}');export{e as data};
