import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as r,c,a,b as n,d as e,e as i}from"./app-449e60aa.js";const l={},p=i(`<h1 id="git-帮助手册" tabindex="-1"><a class="header-anchor" href="#git-帮助手册" aria-hidden="true">#</a> Git 帮助手册</h1><p>国外网友制作了一张 Git Cheat Sheet，总结很精炼，各位不妨收藏一下。</p><p>本节选择性介绍 git 中比较常用的命令行场景。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/web/git/git-cheat-sheet.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><p><strong>（1）Debian/Ubuntu 环境安装</strong></p><p>如果你使用的系统是 Debian/Ubuntu ， 安装命令为：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">apt-get</span> <span class="token function">install</span> libcurl4-gnutls-dev libexpat1-dev gettext <span class="token punctuation">\\</span>
<span class="token operator">&gt;</span> libz-dev libssl-dev
$ <span class="token function">apt-get</span> <span class="token function">install</span> git-core
$ <span class="token function">git</span> <span class="token parameter variable">--version</span>
<span class="token function">git</span> version <span class="token number">1.8</span>.1.2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（2）Centos/RedHat 环境安装</strong></p><p>如果你使用的系统是 Centos/RedHat ，安装命令为：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ yum <span class="token function">install</span> curl-devel expat-devel gettext-devel <span class="token punctuation">\\</span>
<span class="token operator">&gt;</span> openssl-devel zlib-devel
$ yum <span class="token parameter variable">-y</span> <span class="token function">install</span> git-core
$ <span class="token function">git</span> <span class="token parameter variable">--version</span>
<span class="token function">git</span> version <span class="token number">1.7</span>.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（3）Windows 环境安装</strong></p>`,12),d={href:"https://git-scm.com/downloads",target:"_blank",rel:"noopener noreferrer"},u=a("p",null,"建议安装 Git Bash 这个 git 的命令行工具。",-1),m=a("p",null,[a("strong",null,"（4）Mac 环境安装")],-1),h={href:"https://git-scm.com/downloads",target:"_blank",rel:"noopener noreferrer"},b=i(`<h2 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h2><p>Git 自带一个 <code>git config</code> 的工具来帮助设置控制 Git 外观和行为的配置变量。 这些变量存储在三个不同的位置：</p><ul><li><code>/etc/gitconfig</code> 文件: 包含系统上每一个用户及他们仓库的通用配置。 如果使用带有 <code>--system</code> 选项的 <code>git config</code> 时，它会从此文件读写配置变量。</li><li><code>~/.gitconfig</code> 或 <code>~/.config/git/config</code> 文件：只针对当前用户。 可以传递 <code>--global</code> 选项让 Git 读写此文件。</li><li>当前使用仓库的 Git 目录中的 <code>config</code> 文件（就是 <code>.git/config</code>）：针对该仓库。</li></ul><p>每一个级别覆盖上一级别的配置，所以 <code>.git/config</code> 的配置变量会覆盖 <code>/etc/gitconfig</code> 中的配置变量。</p><p>在 Windows 系统中，Git 会查找 <code>$HOME</code> 目录下（一般情况下是 <code>C:\\Users\\$USER</code>）的 <code>.gitconfig</code> 文件。 Git 同样也会寻找 <code>/etc/gitconfig</code> 文件，但只限于 MSys 的根目录下，即安装 Git 时所选的目标位置。</p><h3 id="配置用户信息" tabindex="-1"><a class="header-anchor" href="#配置用户信息" aria-hidden="true">#</a> 配置用户信息</h3><p>当安装完 Git 应该做的第一件事就是设置你的用户名称与邮件地址。 这样做很重要，因为每一个 Git 的提交都会使用这些信息，并且它会写入到你的每一次提交中，不可更改：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">&quot;John Doe&quot;</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email johndoe@example.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>再次强调，如果使用了 <code>--global</code> 选项，那么该命令只需要运行一次，因为之后无论你在该系统上做任何事情， Git 都会使用那些信息。 当你想针对特定项目使用不同的用户名称与邮件地址时，可以在那个项目目录下运行没有 <code>--global</code> 选项的命令来配置。</p><p>很多 GUI 工具都会在第一次运行时帮助你配置这些信息。</p><h3 id="给-git-命令添加别名" tabindex="-1"><a class="header-anchor" href="#给-git-命令添加别名" aria-hidden="true">#</a> 给 Git 命令添加别名</h3><p>在 OS X 和 Linux 下, 你的 Git 的配置文件储存在 <code>~/.gitconfig</code>。我在<code>[alias]</code> 部分添加了一些快捷别名(和一些我容易拼写错误的)，如下:</p><div class="language-vim line-numbers-mode" data-ext="vim"><pre class="language-vim"><code><span class="token punctuation">[</span>alias<span class="token punctuation">]</span>
    a <span class="token operator">=</span> add
    amend <span class="token operator">=</span> commit <span class="token operator">-</span><span class="token operator">-</span>amend
    <span class="token keyword">c</span> <span class="token operator">=</span> commit
    <span class="token keyword">ca</span> <span class="token operator">=</span> commit <span class="token operator">-</span><span class="token operator">-</span>amend
    <span class="token builtin">ci</span> <span class="token operator">=</span> commit <span class="token operator">-</span>a
    <span class="token keyword">co</span> <span class="token operator">=</span> checkout
    <span class="token keyword">d</span> <span class="token operator">=</span> <span class="token builtin">diff</span>
    dc <span class="token operator">=</span> <span class="token builtin">diff</span> <span class="token operator">-</span><span class="token operator">-</span>changed
    <span class="token keyword">ds</span> <span class="token operator">=</span> <span class="token builtin">diff</span> <span class="token operator">-</span><span class="token operator">-</span>staged
    <span class="token keyword">f</span> <span class="token operator">=</span> fetch
    loll <span class="token operator">=</span> log <span class="token operator">-</span><span class="token operator">-</span>graph <span class="token operator">-</span><span class="token operator">-</span>decorate <span class="token operator">-</span><span class="token operator">-</span>pretty<span class="token operator">=</span>oneline <span class="token operator">-</span><span class="token operator">-</span>abbrev<span class="token operator">-</span>commit
    <span class="token keyword">m</span> <span class="token operator">=</span> merge
    one <span class="token operator">=</span> log <span class="token operator">-</span><span class="token operator">-</span>pretty<span class="token operator">=</span>oneline
    outstanding <span class="token operator">=</span> rebase <span class="token operator">-</span>i @<span class="token punctuation">{</span><span class="token keyword">u</span><span class="token punctuation">}</span>
    s <span class="token operator">=</span> status
    unpushed <span class="token operator">=</span> log @<span class="token punctuation">{</span><span class="token keyword">u</span><span class="token punctuation">}</span>
    <span class="token builtin">wc</span> <span class="token operator">=</span> whatchanged
    wip <span class="token operator">=</span> rebase <span class="token operator">-</span>i @<span class="token punctuation">{</span><span class="token keyword">u</span><span class="token punctuation">}</span>
    zap <span class="token operator">=</span> fetch <span class="token operator">-</span><span class="token keyword">p</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="缓存一个仓库的用户名和密码" tabindex="-1"><a class="header-anchor" href="#缓存一个仓库的用户名和密码" aria-hidden="true">#</a> 缓存一个仓库的用户名和密码</h3><p>你可能有一个仓库需要授权，这时你可以缓存用户名和密码，而不用每次推/拉(push/pull)的时候都输入，Credential helper 能帮你。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> credential.helper cache
<span class="token comment">## Set git to use the credential memory cache</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> credential.helper <span class="token string">&#39;cache --timeout=3600&#39;</span>
<span class="token comment">## Set the cache to timeout after 1 hour (setting is in seconds)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="仓库" tabindex="-1"><a class="header-anchor" href="#仓库" aria-hidden="true">#</a> 仓库</h2><h3 id="初始化仓库" tabindex="-1"><a class="header-anchor" href="#初始化仓库" aria-hidden="true">#</a> 初始化仓库</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="克隆仓库" tabindex="-1"><a class="header-anchor" href="#克隆仓库" aria-hidden="true">#</a> 克隆仓库</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 通过 SSH</span>
$ <span class="token function">git</span> clone ssh://user@domain.com/repo.git
<span class="token comment"># 通过 HTTP</span>
$ <span class="token function">git</span> clone http://domain.com/user/repo.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="储藏" tabindex="-1"><a class="header-anchor" href="#储藏" aria-hidden="true">#</a> 储藏</h2><p>有时，我们需要在同一个项目的不同分支上工作。当需要切换分支时，偏偏本地的工作还没有完成，此时，提交修改显得不严谨，但是不提交代码又无法切换分支。这时，你可以使用 <code>git stash</code> 将本地的修改内容作为草稿储藏起来。</p><p>官方称之为储藏，但我个人更喜欢称之为存草稿。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 1. 将修改作为当前分支的草稿保存</span>
$ <span class="token function">git</span> stash

<span class="token comment"># 2. 查看草稿列表</span>
$ <span class="token function">git</span> stash list
stash@<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span>: WIP on master: 6fae349 :memo: Writing docs.

<span class="token comment"># 3.1 删除草稿</span>
$ <span class="token function">git</span> stash drop stash@<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span>

<span class="token comment"># 3.2 读取草稿</span>
$ <span class="token function">git</span> stash apply stash@<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="暂存" tabindex="-1"><a class="header-anchor" href="#暂存" aria-hidden="true">#</a> 暂存</h2><p><code>git add</code> 命令用于将修改添加到暂存区。</p><h3 id="暂存指定文件" tabindex="-1"><a class="header-anchor" href="#暂存指定文件" aria-hidden="true">#</a> 暂存指定文件</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> xxx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="暂存当前目录下所有修改" tabindex="-1"><a class="header-anchor" href="#暂存当前目录下所有修改" aria-hidden="true">#</a> 暂存当前目录下所有修改</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="暂存所有修改" tabindex="-1"><a class="header-anchor" href="#暂存所有修改" aria-hidden="true">#</a> 暂存所有修改</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git add -A
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="暂存文件部分内容" tabindex="-1"><a class="header-anchor" href="#暂存文件部分内容" aria-hidden="true">#</a> 暂存文件部分内容</h3><p>暂存文件部分内容</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">--patch</span> filename.x
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>-p</code> 简写。这会打开交互模式， 你将能够用 <code>s</code> 选项来分隔提交(commit)；</p><p>然而, 如果这个文件是新的, 会没有这个选择， 添加一个新文件时，这样做:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-N</span> filename.x
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后, 你需要用 <code>e</code> 选项来手动选择需要添加的行，执行 <code>git diff --cached</code> 将会显示哪些行暂存了哪些行只是保存在本地了。</p><h3 id="把暂存的内容变成未暂存-把未暂存的内容暂存起来" tabindex="-1"><a class="header-anchor" href="#把暂存的内容变成未暂存-把未暂存的内容暂存起来" aria-hidden="true">#</a> 把暂存的内容变成未暂存，把未暂存的内容暂存起来</h3><p>这个有点困难， 我能想到的最好的方法是先 stash 未暂存的内容， 然后重置(reset)，再 pop 第一步 stashed 的内容, 最后再 add 它们。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> stash <span class="token parameter variable">-k</span>
<span class="token function">git</span> reset <span class="token parameter variable">--hard</span>
<span class="token function">git</span> stash pop
<span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-A</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="提交" tabindex="-1"><a class="header-anchor" href="#提交" aria-hidden="true">#</a> 提交</h2><p><code>git commit</code> 命令用于将修改保存到到本地仓库。</p><h3 id="查看最近一次提交" tabindex="-1"><a class="header-anchor" href="#查看最近一次提交" aria-hidden="true">#</a> 查看最近一次提交</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> show
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> log <span class="token parameter variable">-n1</span> <span class="token parameter variable">-p</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="提交本地的所有修改" tabindex="-1"><a class="header-anchor" href="#提交本地的所有修改" aria-hidden="true">#</a> 提交本地的所有修改</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">-a</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="提交暂存的修改" tabindex="-1"><a class="header-anchor" href="#提交暂存的修改" aria-hidden="true">#</a> 提交暂存的修改</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> commit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="把暂存的内容添加到上一次的提交" tabindex="-1"><a class="header-anchor" href="#把暂存的内容添加到上一次的提交" aria-hidden="true">#</a> 把暂存的内容添加到上一次的提交</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">--amend</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="附加消息提交" tabindex="-1"><a class="header-anchor" href="#附加消息提交" aria-hidden="true">#</a> 附加消息提交</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;commit message&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="修改提交信息" tabindex="-1"><a class="header-anchor" href="#修改提交信息" aria-hidden="true">#</a> 修改提交信息</h3><p>如果你的提交信息写错了且这次提交（commit）还没有推送（push），可以使用以下命令修改：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">--amend</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">--amend</span> <span class="token parameter variable">-m</span> <span class="token string">&#39;xxxxxxx&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="修改提交信息中的用户名和邮箱" tabindex="-1"><a class="header-anchor" href="#修改提交信息中的用户名和邮箱" aria-hidden="true">#</a> 修改提交信息中的用户名和邮箱</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">--amend</span> <span class="token parameter variable">--author</span> <span class="token string">&quot;New Authorname &lt;authoremail@mydomain.com&gt;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="从提交中移除一个文件" tabindex="-1"><a class="header-anchor" href="#从提交中移除一个文件" aria-hidden="true">#</a> 从提交中移除一个文件</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout HEAD^ myfile
<span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-A</span>
<span class="token function">git</span> commit <span class="token parameter variable">--amend</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="删除最后一次提交" tabindex="-1"><a class="header-anchor" href="#删除最后一次提交" aria-hidden="true">#</a> 删除最后一次提交</h3><p>如果你需要删除推了的提交(pushed commits)，你可以使用下面的方法。可是，这会不可逆的改变你的历史，也会搞乱那些已经从该仓库拉取(pulled)了的人的历史。简而言之，如果你不是很确定，千万不要这么做。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> reset HEAD^ <span class="token parameter variable">--hard</span>
<span class="token function">git</span> push <span class="token parameter variable">-f</span> <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你还没有推到远程, 把 Git 重置(reset)到你最后一次提交前的状态就可以了(同时保存暂存的变化):</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>my-branch*<span class="token punctuation">)</span>$ <span class="token function">git</span> reset <span class="token parameter variable">--soft</span> HEAD@<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这只能在没有推送之前有用. 如果你已经推了, 唯一安全能做的是 <code>git revert SHAofBadCommit</code>， 那会创建一个新的提交(commit)用于撤消前一个提交的所有变化(changes)； 或者, 如果你推的这个分支是 rebase-safe 的 (例如： 其它开发者不会从这个分支拉), 只需要使用 <code>git push -f</code>； 更多, 请参考 <a href="#deleteremove-last-pushed-commit">the above section</a>。</p><h3 id="删除任意提交" tabindex="-1"><a class="header-anchor" href="#删除任意提交" aria-hidden="true">#</a> 删除任意提交</h3><p>同样的警告：不到万不得已的时候不要这么做.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> rebase <span class="token parameter variable">--onto</span> SHA1_OF_BAD_COMMIT^ SHA1_OF_BAD_COMMIT
<span class="token function">git</span> push <span class="token parameter variable">-f</span> <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>或者做一个 <a href="#interactive-rebase">交互式 rebase</a> 删除那些你想要删除的提交(commit)里所对应的行。</p><h3 id="我尝试推一个修正后的提交-amended-commit-到远程-但是报错" tabindex="-1"><a class="header-anchor" href="#我尝试推一个修正后的提交-amended-commit-到远程-但是报错" aria-hidden="true">#</a> 我尝试推一个修正后的提交(amended commit)到远程，但是报错</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>To https://github.com/yourusername/repo.git
<span class="token operator">!</span> <span class="token punctuation">[</span>rejected<span class="token punctuation">]</span>        mybranch -<span class="token operator">&gt;</span> mybranch <span class="token punctuation">(</span>non-fast-forward<span class="token punctuation">)</span>
error: failed to push some refs to <span class="token string">&#39;https://github.com/tanay1337/webmaker.org.git&#39;</span>
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Integrate the remote changes <span class="token punctuation">(</span>e.g.
hint: <span class="token string">&#39;git pull ...&#39;</span><span class="token punctuation">)</span> before pushing again.
hint: See the <span class="token string">&#39;Note about fast-forwards&#39;</span> <span class="token keyword">in</span> <span class="token string">&#39;git push --help&#39;</span> <span class="token keyword">for</span> details.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意, rebasing(见下面)和修正(amending)会用一个<strong>新的提交(commit)代替旧的</strong>, 所以如果之前你已经往远程仓库上推过一次修正前的提交(commit)，那你现在就必须强推(force push) (<code>-f</code>)。 注意 – <em>总是</em> 确保你指明一个分支!</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>my-branch<span class="token punctuation">)</span>$ <span class="token function">git</span> push origin mybranch <span class="token parameter variable">-f</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>一般来说, <strong>要避免强推</strong>. 最好是创建和推(push)一个新的提交(commit)，而不是强推一个修正后的提交。后者会使那些与该分支或该分支的子分支工作的开发者，在源历史中产生冲突。</p><h3 id="不小心强制重置-想找回内容" tabindex="-1"><a class="header-anchor" href="#不小心强制重置-想找回内容" aria-hidden="true">#</a> 不小心强制重置，想找回内容</h3><p>如果你意外的做了 <code>git reset --hard</code>, 你通常能找回你的提交(commit), 因为 Git 对每件事都会有日志，且都会保存几天。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>master<span class="token punctuation">)</span>$ <span class="token function">git</span> reflog
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你将会看到一个你过去提交(commit)的列表, 和一个重置的提交。 选择你想要回到的提交(commit)的 SHA，再重置一次:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>master<span class="token punctuation">)</span>$ <span class="token function">git</span> reset <span class="token parameter variable">--hard</span> SHA1234
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样就完成了。</p><h2 id="重置" tabindex="-1"><a class="header-anchor" href="#重置" aria-hidden="true">#</a> 重置</h2><p>撤销本地修改：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 移除缓存区的所有文件（i.e. 撤销上次git add）</span>
$ <span class="token function">git</span> reset HEAD

<span class="token comment"># 将HEAD重置到上一次提交的版本，并将之后的修改标记为未添加到缓存区的修改</span>
$ <span class="token function">git</span> reset <span class="token operator">&lt;</span>commit<span class="token operator">&gt;</span>

<span class="token comment"># 将HEAD重置到上一次提交的版本，并保留未提交的本地修改</span>
$ <span class="token function">git</span> reset <span class="token parameter variable">--keep</span> <span class="token operator">&lt;</span>commit<span class="token operator">&gt;</span>

<span class="token comment"># 放弃工作目录下的所有修改</span>
$ <span class="token function">git</span> reset <span class="token parameter variable">--hard</span> HEAD

<span class="token comment"># 将HEAD重置到指定的版本，并抛弃该版本之后的所有修改</span>
$ <span class="token function">git</span> reset <span class="token parameter variable">--hard</span> <span class="token operator">&lt;</span>commit-hash<span class="token operator">&gt;</span>

<span class="token comment"># 用远端分支强制覆盖本地分支</span>
$ <span class="token function">git</span> reset <span class="token parameter variable">--hard</span> <span class="token operator">&lt;</span>remote/branch<span class="token operator">&gt;</span> e.g., upstream/master, origin/my-feature

<span class="token comment"># 放弃某个文件的所有本地修改</span>
$ <span class="token function">git</span> checkout HEAD <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>删除添加<code>.gitignore</code>文件前错误提交的文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 提交一条 git 记录，提交信息为 remove xyz file</span>
$ <span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">--cached</span> <span class="token builtin class-name">.</span>
$ <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
$ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;remove xyz file&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>撤销远程修改（创建一个新的提交，并回滚到指定版本）：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># revert 哈希号为 commit-hash 的记录</span>
$ <span class="token function">git</span> revert <span class="token operator">&lt;</span>commit-hash<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>彻底删除指定版本：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 执行下面命令后，commit-hash 提交后的记录都会被彻底删除，使用需谨慎</span>
$ <span class="token function">git</span> reset <span class="token parameter variable">--hard</span> <span class="token operator">&lt;</span>commit-hash<span class="token operator">&gt;</span>
$ <span class="token function">git</span> push <span class="token parameter variable">-f</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="更新" tabindex="-1"><a class="header-anchor" href="#更新" aria-hidden="true">#</a> 更新</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 下载远程端版本，但不合并到HEAD中</span>
$ <span class="token function">git</span> fetch <span class="token operator">&lt;</span>remote<span class="token operator">&gt;</span>

<span class="token comment"># 将远程端版本合并到本地版本中</span>
$ <span class="token function">git</span> pull origin master

<span class="token comment"># 以rebase方式将远端分支与本地合并</span>
$ <span class="token function">git</span> pull <span class="token parameter variable">--rebase</span> <span class="token operator">&lt;</span>remote<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>branch<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="推送" tabindex="-1"><a class="header-anchor" href="#推送" aria-hidden="true">#</a> 推送</h2><h3 id="推送提交到远程仓库" tabindex="-1"><a class="header-anchor" href="#推送提交到远程仓库" aria-hidden="true">#</a> 推送提交到远程仓库</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push remote <span class="token operator">&lt;</span>remote<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>branch<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="发布标签" tabindex="-1"><a class="header-anchor" href="#发布标签" aria-hidden="true">#</a> 发布标签</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push <span class="token parameter variable">--tags</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="未暂存" tabindex="-1"><a class="header-anchor" href="#未暂存" aria-hidden="true">#</a> 未暂存</h2><blockquote><p>未暂存(Unstaged)的内容</p></blockquote><h3 id="把未暂存的内容移动到一个新分支" tabindex="-1"><a class="header-anchor" href="#把未暂存的内容移动到一个新分支" aria-hidden="true">#</a> 把未暂存的内容移动到一个新分支</h3><ul><li><code>git checkout -b my-branch</code></li></ul><h3 id="我想把未暂存的内容移动到另一个已存在的分支" tabindex="-1"><a class="header-anchor" href="#我想把未暂存的内容移动到另一个已存在的分支" aria-hidden="true">#</a> 我想把未暂存的内容移动到另一个已存在的分支</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> stash
<span class="token function">git</span> checkout my-branch
<span class="token function">git</span> stash pop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="丢弃本地未提交的变化" tabindex="-1"><a class="header-anchor" href="#丢弃本地未提交的变化" aria-hidden="true">#</a> 丢弃本地未提交的变化</h3><p>如果你只是想重置源(origin)和你本地(local)之间的一些提交(commit)，你可以：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## one commit</span>
$ <span class="token function">git</span> reset <span class="token parameter variable">--hard</span> HEAD^
<span class="token comment">## two commits</span>
$ <span class="token function">git</span> reset <span class="token parameter variable">--hard</span> HEAD^^
<span class="token comment">## four commits</span>
$ <span class="token function">git</span> reset <span class="token parameter variable">--hard</span> HEAD~4
<span class="token comment">## or</span>
$ <span class="token function">git</span> checkout <span class="token parameter variable">-f</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重置某个特殊的文件, 你可以用文件名做为参数:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> reset filename
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="我想丢弃某些未暂存的内容" tabindex="-1"><a class="header-anchor" href="#我想丢弃某些未暂存的内容" aria-hidden="true">#</a> 我想丢弃某些未暂存的内容</h3><p>如果你想丢弃工作拷贝中的一部分内容，而不是全部。</p><p>签出(checkout)不需要的内容，保留需要的。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> checkout <span class="token parameter variable">-p</span>
<span class="token comment">## Answer y to all of the snippets you want to drop</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>另外一个方法是使用 <code>stash</code>， Stash 所有要保留下的内容, 重置工作拷贝, 重新应用保留的部分。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> stash <span class="token parameter variable">-p</span>
<span class="token comment">## Select all of the snippets you want to save</span>
$ <span class="token function">git</span> reset <span class="token parameter variable">--hard</span>
$ <span class="token function">git</span> stash pop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者, stash 你不需要的部分, 然后 stash drop。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> stash <span class="token parameter variable">-p</span>
<span class="token comment">## Select all of the snippets you don&#39;t want to save</span>
$ <span class="token function">git</span> stash drop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="分支" tabindex="-1"><a class="header-anchor" href="#分支" aria-hidden="true">#</a> 分支</h2><blockquote><p>分支(Branches)</p></blockquote><h3 id="列出所有的分支" tabindex="-1"><a class="header-anchor" href="#列出所有的分支" aria-hidden="true">#</a> 列出所有的分支</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="列出所有的远端分支" tabindex="-1"><a class="header-anchor" href="#列出所有的远端分支" aria-hidden="true">#</a> 列出所有的远端分支</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch <span class="token parameter variable">-r</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="基于当前分支创建新分支" tabindex="-1"><a class="header-anchor" href="#基于当前分支创建新分支" aria-hidden="true">#</a> 基于当前分支创建新分支</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch <span class="token operator">&lt;</span>new-branch<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="基于远程分支创建新分支" tabindex="-1"><a class="header-anchor" href="#基于远程分支创建新分支" aria-hidden="true">#</a> 基于远程分支创建新分支</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch <span class="token parameter variable">--track</span> <span class="token operator">&lt;</span>new-branch<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>remote-branch<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="删除本地分支" tabindex="-1"><a class="header-anchor" href="#删除本地分支" aria-hidden="true">#</a> 删除本地分支</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch <span class="token parameter variable">-d</span> <span class="token operator">&lt;</span>branch<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="强制删除本地分支" tabindex="-1"><a class="header-anchor" href="#强制删除本地分支" aria-hidden="true">#</a> 强制删除本地分支</h3><blockquote><p>注意：强制删除本地分支，将会丢失未合并的修改</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch <span class="token parameter variable">-D</span> <span class="token operator">&lt;</span>branch<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="删除远程分支" tabindex="-1"><a class="header-anchor" href="#删除远程分支" aria-hidden="true">#</a> 删除远程分支</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push <span class="token operator">&lt;</span>remote<span class="token operator">&gt;</span> :<span class="token operator">&lt;</span>branch<span class="token operator">&gt;</span> <span class="token punctuation">(</span>since Git v1.5.0<span class="token punctuation">)</span>
<span class="token function">git</span> push <span class="token operator">&lt;</span>remote<span class="token operator">&gt;</span> <span class="token parameter variable">--delete</span> <span class="token operator">&lt;</span>branch<span class="token operator">&gt;</span> <span class="token punctuation">(</span>since Git v1.7.0<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="切换分支" tabindex="-1"><a class="header-anchor" href="#切换分支" aria-hidden="true">#</a> 切换分支</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout <span class="token operator">&lt;</span>branch<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="创建并切换到新分支" tabindex="-1"><a class="header-anchor" href="#创建并切换到新分支" aria-hidden="true">#</a> 创建并切换到新分支</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> <span class="token operator">&lt;</span>branch<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="我从错误的分支拉取了内容-或把内容拉取到了错误的分支" tabindex="-1"><a class="header-anchor" href="#我从错误的分支拉取了内容-或把内容拉取到了错误的分支" aria-hidden="true">#</a> 我从错误的分支拉取了内容，或把内容拉取到了错误的分支</h3><p>这是另外一种使用 <code>git reflog</code> 情况，找到在这次错误拉(pull) 之前 HEAD 的指向。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>master<span class="token punctuation">)</span>$ <span class="token function">git</span> reflog
ab7555f HEAD@<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span>: pull origin wrong-branch: Fast-forward
c5bc55a HEAD@<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span>: checkout: checkout message goes here
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重置分支到你所需的提交(desired commit):</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> reset <span class="token parameter variable">--hard</span> c5bc55a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>完成。</p><h3 id="我想扔掉本地的提交-commit-以便我的分支与远程的保持一致" tabindex="-1"><a class="header-anchor" href="#我想扔掉本地的提交-commit-以便我的分支与远程的保持一致" aria-hidden="true">#</a> 我想扔掉本地的提交(commit)，以便我的分支与远程的保持一致</h3><p>先确认你没有推(push)你的内容到远程。</p><p><code>git status</code> 会显示你领先(ahead)源(origin)多少个提交:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>my-branch<span class="token punctuation">)</span>$ <span class="token function">git</span> status
<span class="token comment">## On branch my-branch</span>
<span class="token comment">## Your branch is ahead of &#39;origin/my-branch&#39; by 2 commits.</span>
<span class="token comment">##   (use &quot;git push&quot; to publish your local commits)</span>
<span class="token comment">#</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一种方法是:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>master<span class="token punctuation">)</span>$ <span class="token function">git</span> reset <span class="token parameter variable">--hard</span> origin/my-branch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="我需要提交到一个新分支-但错误的提交到了-master" tabindex="-1"><a class="header-anchor" href="#我需要提交到一个新分支-但错误的提交到了-master" aria-hidden="true">#</a> 我需要提交到一个新分支，但错误的提交到了 master</h3><p>在 master 下创建一个新分支，不切换到新分支,仍在 master 下:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>master<span class="token punctuation">)</span>$ <span class="token function">git</span> branch my-branch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>把 master 分支重置到前一个提交:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>master<span class="token punctuation">)</span>$ <span class="token function">git</span> reset <span class="token parameter variable">--hard</span> HEAD^
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>HEAD^</code> 是 <code>HEAD^1</code> 的简写，你可以通过指定要设置的<code>HEAD</code>来进一步重置。</p><p>或者, 如果你不想使用 <code>HEAD^</code>, 找到你想重置到的提交(commit)的 hash(<code>git log</code> 能够完成)， 然后重置到这个 hash。 使用<code>git push</code> 同步内容到远程。</p><p>例如, master 分支想重置到的提交的 hash 为<code>a13b85e</code>:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>master<span class="token punctuation">)</span>$ <span class="token function">git</span> reset <span class="token parameter variable">--hard</span> a13b85e
HEAD is now at a13b85e
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>签出(checkout)刚才新建的分支继续工作:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>master<span class="token punctuation">)</span>$ <span class="token function">git</span> checkout my-branch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="我想保留来自另外一个-ref-ish-的整个文件" tabindex="-1"><a class="header-anchor" href="#我想保留来自另外一个-ref-ish-的整个文件" aria-hidden="true">#</a> 我想保留来自另外一个 ref-ish 的整个文件</h3><p>假设你正在做一个原型方案(原文为 working spike (see note)), 有成百的内容，每个都工作得很好。现在, 你提交到了一个分支，保存工作内容:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>solution<span class="token punctuation">)</span>$ <span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-A</span> <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;Adding all changes from this spike into one big commit.&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当你想要把它放到一个分支里 (可能是<code>feature</code>, 或者 <code>develop</code>), 你关心是保持整个文件的完整，你想要一个大的提交分隔成比较小。</p><p>假设你有:</p><ul><li>分支 <code>solution</code>, 拥有原型方案， 领先 <code>develop</code> 分支。</li><li>分支 <code>develop</code>, 在这里你应用原型方案的一些内容。</li></ul><p>我去可以通过把内容拿到你的分支里，来解决这个问题:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>develop<span class="token punctuation">)</span>$ <span class="token function">git</span> checkout solution -- file1.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这会把这个文件内容从分支 <code>solution</code> 拿到分支 <code>develop</code> 里来:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## On branch develop</span>
<span class="token comment">## Your branch is up-to-date with &#39;origin/develop&#39;.</span>
<span class="token comment">## Changes to be committed:</span>
<span class="token comment">##  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span>
<span class="token comment">#</span>
<span class="token comment">##        modified:   file1.txt</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后, 正常提交。</p>`,178),v={href:"https://en.wikipedia.org/wiki/Extreme_programming_practices",target:"_blank",rel:"noopener noreferrer"},g=i(`<h3 id="我把几个提交-commit-提交到了同一个分支-而这些提交应该分布在不同的分支里" tabindex="-1"><a class="header-anchor" href="#我把几个提交-commit-提交到了同一个分支-而这些提交应该分布在不同的分支里" aria-hidden="true">#</a> 我把几个提交(commit)提交到了同一个分支，而这些提交应该分布在不同的分支里</h3><p>假设你有一个<code>master</code>分支， 执行<code>git log</code>, 你看到你做过两次提交:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>master<span class="token punctuation">)</span>$ <span class="token function">git</span> log

commit e3851e817c451cc36f2e6f3049db528415e3c114
Author: Alex Lee <span class="token operator">&lt;</span>alexlee@example.com<span class="token operator">&gt;</span>
Date:   Tue Jul <span class="token number">22</span> <span class="token number">15</span>:39:27 <span class="token number">2014</span> <span class="token parameter variable">-0400</span>

    Bug <span class="token comment">#21 - Added CSRF protection</span>

commit 5ea51731d150f7ddc4a365437931cd8be3bf3131
Author: Alex Lee <span class="token operator">&lt;</span>alexlee@example.com<span class="token operator">&gt;</span>
Date:   Tue Jul <span class="token number">22</span> <span class="token number">15</span>:39:12 <span class="token number">2014</span> <span class="token parameter variable">-0400</span>

    Bug <span class="token comment">#14 - Fixed spacing on title</span>

commit a13b85e984171c6e2a1729bb061994525f626d14
Author: Aki Rose <span class="token operator">&lt;</span>akirose@example.com<span class="token operator">&gt;</span>
Date:   Tue Jul <span class="token number">21</span> 01:12:48 <span class="token number">2014</span> <span class="token parameter variable">-0400</span>

    First commit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们用提交 hash(commit hash)标记 bug (<code>e3851e8</code> for #21, <code>5ea5173</code> for #14).</p><p>首先, 我们把<code>master</code>分支重置到正确的提交(<code>a13b85e</code>):</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>master<span class="token punctuation">)</span>$ <span class="token function">git</span> reset <span class="token parameter variable">--hard</span> a13b85e
HEAD is now at a13b85e
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>现在, 我们对 bug #21 创建一个新的分支:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>master<span class="token punctuation">)</span>$ <span class="token function">git</span> checkout <span class="token parameter variable">-b</span> <span class="token number">21</span>
<span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span>$
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接着, 我们用 <em>cherry-pick</em> 把对 bug #21 的提交放入当前分支。 这意味着我们将应用(apply)这个提交(commit)，仅仅这一个提交(commit)，直接在 HEAD 上面。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span>$ <span class="token function">git</span> cherry-pick e3851e8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这时候, 这里可能会产生冲突， 参见<a href="#interactive-rebase">交互式 rebasing 章</a> <a href="#merge-conflict"><strong>冲突节</strong></a> 解决冲突.</p><p>再者， 我们为 bug #14 创建一个新的分支, 也基于<code>master</code>分支</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span>$ <span class="token function">git</span> checkout master
<span class="token punctuation">(</span>master<span class="token punctuation">)</span>$ <span class="token function">git</span> checkout <span class="token parameter variable">-b</span> <span class="token number">14</span>
<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span>$
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后, 为 bug #14 执行 <code>cherry-pick</code>:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span>$ <span class="token function">git</span> cherry-pick 5ea5173
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="我想删除上游-upstream-分支被删除了的本地分支" tabindex="-1"><a class="header-anchor" href="#我想删除上游-upstream-分支被删除了的本地分支" aria-hidden="true">#</a> 我想删除上游(upstream)分支被删除了的本地分支</h3><p>一旦你在 github 上面合并(merge)了一个 pull request, 你就可以删除你 fork 里被合并的分支。 如果你不准备继续在这个分支里工作, 删除这个分支的本地拷贝会更干净，使你不会陷入工作分支和一堆陈旧分支的混乱之中。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> fetch <span class="token parameter variable">-p</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="我不小心删除了我的分支" tabindex="-1"><a class="header-anchor" href="#我不小心删除了我的分支" aria-hidden="true">#</a> 我不小心删除了我的分支</h3><p>如果你定期推送到远程, 多数情况下应该是安全的，但有些时候还是可能删除了还没有推到远程的分支。 让我们先创建一个分支和一个新的文件:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>master<span class="token punctuation">)</span>$ <span class="token function">git</span> checkout <span class="token parameter variable">-b</span> my-branch
<span class="token punctuation">(</span>my-branch<span class="token punctuation">)</span>$ <span class="token function">git</span> branch
<span class="token punctuation">(</span>my-branch<span class="token punctuation">)</span>$ <span class="token function">touch</span> foo.txt
<span class="token punctuation">(</span>my-branch<span class="token punctuation">)</span>$ <span class="token function">ls</span>
README.md foo.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加文件并做一次提交</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>my-branch<span class="token punctuation">)</span>$ <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
<span class="token punctuation">(</span>my-branch<span class="token punctuation">)</span>$ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;foo.txt added&#39;</span>
<span class="token punctuation">(</span>my-branch<span class="token punctuation">)</span>$ foo.txt added
 <span class="token number">1</span> files changed, <span class="token number">1</span> insertions<span class="token punctuation">(</span>+<span class="token punctuation">)</span>
 create mode <span class="token number">100644</span> foo.txt
<span class="token punctuation">(</span>my-branch<span class="token punctuation">)</span>$ <span class="token function">git</span> log

commit 4e3cd85a670ced7cc17a2b5d8d3d809ac88d5012
Author: siemiatj <span class="token operator">&lt;</span>siemiatj@example.com<span class="token operator">&gt;</span>
Date:   Wed Jul <span class="token number">30</span> 00:34:10 <span class="token number">2014</span> +0200

    foo.txt added

commit 69204cdf0acbab201619d95ad8295928e7f411d5
Author: Kate Hudson <span class="token operator">&lt;</span>katehudson@example.com<span class="token operator">&gt;</span>
Date:   Tue Jul <span class="token number">29</span> <span class="token number">13</span>:14:46 <span class="token number">2014</span> <span class="token parameter variable">-0400</span>

    Fixes <span class="token comment">#6: Force pushing after amending commits</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们切回到主(master)分支，‘不小心的’删除<code>my-branch</code>分支</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>my-branch<span class="token punctuation">)</span>$ <span class="token function">git</span> checkout master
Switched to branch <span class="token string">&#39;master&#39;</span>
Your branch is up-to-date with <span class="token string">&#39;origin/master&#39;</span><span class="token builtin class-name">.</span>
<span class="token punctuation">(</span>master<span class="token punctuation">)</span>$ <span class="token function">git</span> branch <span class="token parameter variable">-D</span> my-branch
Deleted branch my-branch <span class="token punctuation">(</span>was 4e3cd85<span class="token punctuation">)</span>.
<span class="token punctuation">(</span>master<span class="token punctuation">)</span>$ <span class="token builtin class-name">echo</span> oh noes, deleted my branch<span class="token operator">!</span>
oh noes, deleted my branch<span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这时候你应该想起了<code>reflog</code>, 一个升级版的日志，它存储了仓库(repo)里面所有动作的历史。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>master<span class="token punctuation">)</span>$ <span class="token function">git</span> reflog
69204cd HEAD@<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span>: checkout: moving from my-branch to master
4e3cd85 HEAD@<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span>: commit: foo.txt added
69204cd HEAD@<span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span>: checkout: moving from master to my-branch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如你所见，我们有一个来自删除分支的提交 hash(commit hash)，接下来看看是否能恢复删除了的分支。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>master<span class="token punctuation">)</span>$ <span class="token function">git</span> checkout <span class="token parameter variable">-b</span> my-branch-help
Switched to a new branch <span class="token string">&#39;my-branch-help&#39;</span>
<span class="token punctuation">(</span>my-branch-help<span class="token punctuation">)</span>$ <span class="token function">git</span> reset <span class="token parameter variable">--hard</span> 4e3cd85
HEAD is now at 4e3cd85 foo.txt added
<span class="token punctuation">(</span>my-branch-help<span class="token punctuation">)</span>$ <span class="token function">ls</span>
README.md foo.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看! 我们把删除的文件找回来了。 Git 的 <code>reflog</code> 在 rebasing 出错的时候也是同样有用的。</p><h3 id="我想删除一个分支" tabindex="-1"><a class="header-anchor" href="#我想删除一个分支" aria-hidden="true">#</a> 我想删除一个分支</h3><p>删除一个远程分支:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>master<span class="token punctuation">)</span>$ <span class="token function">git</span> push origin <span class="token parameter variable">--delete</span> my-branch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你也可以:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>master<span class="token punctuation">)</span>$ <span class="token function">git</span> push origin :my-branch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>删除一个本地分支:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>master<span class="token punctuation">)</span>$ <span class="token function">git</span> branch <span class="token parameter variable">-D</span> my-branch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="我想从别人正在工作的远程分支签出-checkout-一个分支" tabindex="-1"><a class="header-anchor" href="#我想从别人正在工作的远程分支签出-checkout-一个分支" aria-hidden="true">#</a> 我想从别人正在工作的远程分支签出(checkout)一个分支</h3><p>首先, 从远程拉取(fetch) 所有分支:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>master<span class="token punctuation">)</span>$ <span class="token function">git</span> fetch <span class="token parameter variable">--all</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>假设你想要从远程的<code>daves</code>分支签出到本地的<code>daves</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>master<span class="token punctuation">)</span>$ <span class="token function">git</span> checkout <span class="token parameter variable">--track</span> origin/daves
Branch daves <span class="token builtin class-name">set</span> up to track remote branch daves from origin.
Switched to a new branch <span class="token string">&#39;daves&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>(<code>--track</code> 是 <code>git checkout -b [branch] [remotename]/[branch]</code> 的简写)</p><p>这样就得到了一个<code>daves</code>分支的本地拷贝, 任何推过(pushed)的更新，远程都能看到.</p><h2 id="标签" tabindex="-1"><a class="header-anchor" href="#标签" aria-hidden="true">#</a> 标签</h2><h3 id="添加标签" tabindex="-1"><a class="header-anchor" href="#添加标签" aria-hidden="true">#</a> 添加标签</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> tag <span class="token operator">&lt;</span>tag-name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="添加标签并附加消息" tabindex="-1"><a class="header-anchor" href="#添加标签并附加消息" aria-hidden="true">#</a> 添加标签并附加消息</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> tag <span class="token parameter variable">-a</span> <span class="token operator">&lt;</span>tag-name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="删除标签" tabindex="-1"><a class="header-anchor" href="#删除标签" aria-hidden="true">#</a> 删除标签</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> tag <span class="token parameter variable">-d</span> <span class="token operator">&lt;</span>tag_name<span class="token operator">&gt;</span>
<span class="token function">git</span> push <span class="token operator">&lt;</span>remote<span class="token operator">&gt;</span> :refs/tags/<span class="token operator">&lt;</span>tag_name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="恢复已删除标签" tabindex="-1"><a class="header-anchor" href="#恢复已删除标签" aria-hidden="true">#</a> 恢复已删除标签</h3><p>如果你想恢复一个已删除标签(tag), 可以按照下面的步骤: 首先, 需要找到无法访问的标签(unreachable tag):</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">fsck</span> <span class="token parameter variable">--unreachable</span> <span class="token operator">|</span> <span class="token function">grep</span> tag
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,54),k={href:"http://git-scm.com/docs/git-update-ref",target:"_blank",rel:"noopener noreferrer"},f=i(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> update-ref refs/tags/<span class="token operator">&lt;</span>tag_name<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>hash<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这时你的标签(tag)应该已经恢复了。</p><h2 id="rebase-和-merge" tabindex="-1"><a class="header-anchor" href="#rebase-和-merge" aria-hidden="true">#</a> Rebase 和 Merge</h2><blockquote><p>merge 与 rebase 虽然是 git 常用功能，但是强烈建议不要使用 git 命令来完成这项工作。</p><p>因为如果出现代码冲突，在没有代码比对工具的情况下，实在太艰难了。</p><p>你可以考虑使用各种 Git GUI 工具。</p></blockquote><h3 id="将分支合并到当前-head-中" tabindex="-1"><a class="header-anchor" href="#将分支合并到当前-head-中" aria-hidden="true">#</a> 将分支合并到当前 HEAD 中</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> merge <span class="token operator">&lt;</span>branch<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="将当前-head-版本重置到分支中" tabindex="-1"><a class="header-anchor" href="#将当前-head-版本重置到分支中" aria-hidden="true">#</a> 将当前 HEAD 版本重置到分支中</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> rebase <span class="token operator">&lt;</span>branch<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="撤销-rebase-merge" tabindex="-1"><a class="header-anchor" href="#撤销-rebase-merge" aria-hidden="true">#</a> 撤销 rebase/merge</h3><p>你可以合并(merge)或 rebase 了一个错误的分支, 或者完成不了一个进行中的 rebase/merge。 Git 在进行危险操作的时候会把原始的 HEAD 保存在一个叫 ORIG_HEAD 的变量里, 所以要把分支恢复到 rebase/merge 前的状态是很容易的。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>my-branch<span class="token punctuation">)</span>$ <span class="token function">git</span> reset <span class="token parameter variable">--hard</span> ORIG_HEAD
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="我已经-rebase-过-但是我不想强推-force-push" tabindex="-1"><a class="header-anchor" href="#我已经-rebase-过-但是我不想强推-force-push" aria-hidden="true">#</a> 我已经 rebase 过, 但是我不想强推(force push)</h3><p>不幸的是，如果你想把这些变化(changes)反应到远程分支上，你就必须得强推(force push)。 是因你快进(Fast forward)了提交，改变了 Git 历史, 远程分支不会接受变化(changes)，除非强推(force push)。这就是许多人使用 merge 工作流, 而不是 rebasing 工作流的主要原因之一， 开发者的强推(force push)会使大的团队陷入麻烦。使用时需要注意，一种安全使用 rebase 的方法是，不要把你的变化(changes)反映到远程分支上, 而是按下面的做:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>master<span class="token punctuation">)</span>$ <span class="token function">git</span> checkout my-branch
<span class="token punctuation">(</span>my-branch<span class="token punctuation">)</span>$ <span class="token function">git</span> rebase <span class="token parameter variable">-i</span> master
<span class="token punctuation">(</span>my-branch<span class="token punctuation">)</span>$ <span class="token function">git</span> checkout master
<span class="token punctuation">(</span>master<span class="token punctuation">)</span>$ <span class="token function">git</span> merge --ff-only my-branch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),x={href:"http://stackoverflow.com/questions/11058312/how-can-i-use-git-rebase-without-requiring-a-forced-push",target:"_blank",rel:"noopener noreferrer"},_=i(`<h3 id="我需要组合-combine-几个提交-commit" tabindex="-1"><a class="header-anchor" href="#我需要组合-combine-几个提交-commit" aria-hidden="true">#</a> 我需要组合(combine)几个提交(commit)</h3><p>假设你的工作分支将会做对于 <code>master</code> 的 pull-request。 一般情况下你不关心提交(commit)的时间戳，只想组合 <em>所有</em> 提交(commit) 到一个单独的里面, 然后重置(reset)重提交(recommit)。 确保主(master)分支是最新的和你的变化都已经提交了, 然后:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>my-branch<span class="token punctuation">)</span>$ <span class="token function">git</span> reset <span class="token parameter variable">--soft</span> master
<span class="token punctuation">(</span>my-branch<span class="token punctuation">)</span>$ <span class="token function">git</span> commit <span class="token parameter variable">-am</span> <span class="token string">&quot;New awesome feature&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你想要更多的控制, 想要保留时间戳, 你需要做交互式 rebase (interactive rebase):</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>my-branch<span class="token punctuation">)</span>$ <span class="token function">git</span> rebase <span class="token parameter variable">-i</span> master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果没有相对的其它分支， 你将不得不相对自己的<code>HEAD</code> 进行 rebase。 例如：你想组合最近的两次提交(commit), 你将相对于<code>HEAD\\~2</code> 进行 rebase， 组合最近 3 次提交(commit), 相对于<code>HEAD\\~3</code>, 等等。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>master<span class="token punctuation">)</span>$ <span class="token function">git</span> rebase <span class="token parameter variable">-i</span> HEAD~2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在你执行了交互式 rebase 的命令(interactive rebase command)后, 你将在你的编辑器里看到类似下面的内容:</p><div class="language-vim line-numbers-mode" data-ext="vim"><pre class="language-vim"><code>pick a9c8a1d Some refactoring
pick 01b2fd8 New awesome feature
pick b729ad5 fixup
pick e3851e8 another <span class="token keyword">fix</span>

## Rebase 8074d12<span class="token operator">.</span><span class="token operator">.</span>b729ad5 onto 8074d12
#
## Commands<span class="token punctuation">:</span>
##  <span class="token keyword">p</span><span class="token punctuation">,</span> pick <span class="token operator">=</span> use commit
##  <span class="token keyword">r</span><span class="token punctuation">,</span> reword <span class="token operator">=</span> use commit<span class="token punctuation">,</span> but <span class="token keyword">edit</span> the commit message
##  <span class="token keyword">e</span><span class="token punctuation">,</span> <span class="token keyword">edit</span> <span class="token operator">=</span> use commit<span class="token punctuation">,</span> but <span class="token keyword">stop</span> <span class="token keyword">for</span> amending
##  s<span class="token punctuation">,</span> squash <span class="token operator">=</span> use commit<span class="token punctuation">,</span> but meld into <span class="token keyword">previous</span> commit
##  <span class="token keyword">f</span><span class="token punctuation">,</span> fixup <span class="token operator">=</span> like <span class="token string">&quot;squash&quot;</span><span class="token punctuation">,</span> but discard this commit&#39;s log message
##  <span class="token keyword">x</span><span class="token punctuation">,</span> exec <span class="token operator">=</span> run command <span class="token punctuation">(</span>the rest of the line<span class="token punctuation">)</span> using <span class="token keyword">shell</span>
#
## These <span class="token builtin">lines</span> can <span class="token keyword">be</span> re<span class="token operator">-</span>ordered<span class="token punctuation">;</span> they are executed from <span class="token builtin">top</span> <span class="token keyword">to</span> bottom<span class="token operator">.</span>
#
## If you remove a line here THAT COMMIT WILL BE LOST<span class="token operator">.</span>
#
## However<span class="token punctuation">,</span> <span class="token keyword">if</span> you remove everything<span class="token punctuation">,</span> the rebase will <span class="token keyword">be</span> aborted<span class="token operator">.</span>
#
## Note that empty commits are commented out
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所有以 <code>#</code> 开头的行都是注释, 不会影响 rebase.</p><p>然后，你可以用任何上面命令列表的命令替换 <code>pick</code>, 你也可以通过删除对应的行来删除一个提交(commit)。</p><p>例如, 如果你想 <strong>单独保留最旧(first)的提交(commit),组合所有剩下的到第二个里面</strong>, 你就应该编辑第二个提交(commit)后面的每个提交(commit) 前的单词为 <code>f</code>:</p><div class="language-vim line-numbers-mode" data-ext="vim"><pre class="language-vim"><code>pick a9c8a1d Some refactoring
pick 01b2fd8 New awesome feature
<span class="token keyword">f</span> b729ad5 fixup
<span class="token keyword">f</span> e3851e8 another <span class="token keyword">fix</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你想组合这些提交(commit) <strong>并重命名这个提交(commit)</strong>, 你应该在第二个提交(commit)旁边添加一个<code>r</code>，或者更简单的用<code>s</code> 替代 <code>f</code>:</p><div class="language-vim line-numbers-mode" data-ext="vim"><pre class="language-vim"><code>pick a9c8a1d Some refactoring
pick 01b2fd8 New awesome feature
s b729ad5 fixup
s e3851e8 another <span class="token keyword">fix</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以在接下来弹出的文本提示框里重命名提交(commit)。</p><div class="language-vim line-numbers-mode" data-ext="vim"><pre class="language-vim"><code>Newer<span class="token punctuation">,</span> awesomer features

## Please enter the commit message <span class="token keyword">for</span> your <span class="token keyword">changes</span><span class="token operator">.</span> Lines starting
## with <span class="token string">&#39;#&#39;</span> will <span class="token keyword">be</span> ignored<span class="token punctuation">,</span> and an empty message aborts the commit<span class="token operator">.</span>
## rebase <span class="token keyword">in</span> progress<span class="token punctuation">;</span> onto 8074d12
## You are currently editing a commit <span class="token keyword">while</span> rebasing branch <span class="token string">&#39;master&#39;</span> <span class="token keyword">on</span> <span class="token string">&#39;8074d12&#39;</span><span class="token operator">.</span>
#
## Changes <span class="token keyword">to</span> <span class="token keyword">be</span> committed<span class="token punctuation">:</span>
# <span class="token builtin">modified</span><span class="token punctuation">:</span>   README<span class="token operator">.</span>md
#

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果成功了, 你应该看到类似下面的内容:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>master<span class="token punctuation">)</span>$ Successfully rebased and updated refs/heads/master.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="安全合并-merging-策略" tabindex="-1"><a class="header-anchor" href="#安全合并-merging-策略" aria-hidden="true">#</a> 安全合并(merging)策略</h4><p><code>--no-commit</code> 执行合并(merge)但不自动提交, 给用户在做提交前检查和修改的机会。 <code>no-ff</code> 会为特性分支(feature branch)的存在过留下证据, 保持项目历史一致。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>master<span class="token punctuation">)</span>$ <span class="token function">git</span> merge --no-ff --no-commit my-branch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="我需要将一个分支合并成一个提交-commit" tabindex="-1"><a class="header-anchor" href="#我需要将一个分支合并成一个提交-commit" aria-hidden="true">#</a> 我需要将一个分支合并成一个提交(commit)</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>master<span class="token punctuation">)</span>$ <span class="token function">git</span> merge <span class="token parameter variable">--squash</span> my-branch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="我只想组合-combine-未推的提交-unpushed-commit" tabindex="-1"><a class="header-anchor" href="#我只想组合-combine-未推的提交-unpushed-commit" aria-hidden="true">#</a> 我只想组合(combine)未推的提交(unpushed commit)</h4><p>有时候，在将数据推向上游之前，你有几个正在进行的工作提交(commit)。这时候不希望把已经推(push)过的组合进来，因为其他人可能已经有提交(commit)引用它们了。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>master<span class="token punctuation">)</span>$ <span class="token function">git</span> rebase <span class="token parameter variable">-i</span> @<span class="token punctuation">{</span>u<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这会产生一次交互式的 rebase(interactive rebase), 只会列出没有推(push)的提交(commit)， 在这个列表时进行 reorder/fix/squash 都是安全的。</p><h3 id="检查是否分支上的所有提交-commit-都合并-merge-过了" tabindex="-1"><a class="header-anchor" href="#检查是否分支上的所有提交-commit-都合并-merge-过了" aria-hidden="true">#</a> 检查是否分支上的所有提交(commit)都合并(merge)过了</h3><p>检查一个分支上的所有提交(commit)是否都已经合并(merge)到了其它分支, 你应该在这些分支的 head(或任何 commits)之间做一次 diff:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>master<span class="token punctuation">)</span>$ <span class="token function">git</span> log <span class="token parameter variable">--graph</span> --left-right --cherry-pick <span class="token parameter variable">--oneline</span> HEAD<span class="token punctuation">..</span>.feature/120-on-scroll
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这会告诉你在一个分支里有而另一个分支没有的所有提交(commit), 和分支之间不共享的提交(commit)的列表。 另一个做法可以是:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>master<span class="token punctuation">)</span>$ <span class="token function">git</span> log master ^feature/120-on-scroll --no-merges
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="交互式-rebase-interactive-rebase-可能出现的问题" tabindex="-1"><a class="header-anchor" href="#交互式-rebase-interactive-rebase-可能出现的问题" aria-hidden="true">#</a> 交互式 rebase(interactive rebase)可能出现的问题</h3><h4 id="这个-rebase-编辑屏幕出现-noop" tabindex="-1"><a class="header-anchor" href="#这个-rebase-编辑屏幕出现-noop" aria-hidden="true">#</a> 这个 rebase 编辑屏幕出现&#39;noop&#39;</h4><p>如果你看到的是这样:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>noop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这意味着你 rebase 的分支和当前分支在同一个提交(commit)上, 或者 <em>领先(ahead)</em> 当前分支。 你可以尝试:</p><ul><li>检查确保主(master)分支没有问题</li><li>rebase <code>HEAD\\~2</code> 或者更早</li></ul><h4 id="有冲突的情况" tabindex="-1"><a class="header-anchor" href="#有冲突的情况" aria-hidden="true">#</a> 有冲突的情况</h4><p>如果你不能成功的完成 rebase, 你可能必须要解决冲突。</p><p>首先执行 <code>git status</code> 找出哪些文件有冲突:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>my-branch<span class="token punctuation">)</span>$ <span class="token function">git</span> status
On branch my-branch
Changes not staged <span class="token keyword">for</span> commit:
  <span class="token punctuation">(</span>use <span class="token string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed<span class="token punctuation">)</span>
  <span class="token punctuation">(</span>use <span class="token string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="token keyword">in</span> working directory<span class="token punctuation">)</span>

  modified:   README.md
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子里面, <code>README.md</code> 有冲突。 打开这个文件找到类似下面的内容:</p><div class="language-vim line-numbers-mode" data-ext="vim"><pre class="language-vim"><code>   <span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token operator">&lt;</span> HEAD
   some code
   <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
   some code
   <span class="token operator">&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">new</span><span class="token operator">-</span>commit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你需要解决新提交的代码(示例里, 从中间<code>==</code>线到<code>new-commit</code>的地方)与<code>HEAD</code> 之间不一样的地方.</p><p>有时候这些合并非常复杂，你应该使用可视化的差异编辑器(visual diff editor):</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>master*<span class="token punctuation">)</span>$ <span class="token function">git</span> mergetool <span class="token parameter variable">-t</span> opendiff
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在你解决完所有冲突和测试过后, <code>git add</code> 变化了的(changed)文件, 然后用<code>git rebase --continue</code> 继续 rebase。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>my-branch<span class="token punctuation">)</span>$ <span class="token function">git</span> <span class="token function">add</span> README.md
<span class="token punctuation">(</span>my-branch<span class="token punctuation">)</span>$ <span class="token function">git</span> rebase <span class="token parameter variable">--continue</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果在解决完所有的冲突过后，得到了与提交前一样的结果, 可以执行<code>git rebase --skip</code>。</p><p>任何时候你想结束整个 rebase 过程，回来 rebase 前的分支状态, 你可以做:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>my-branch<span class="token punctuation">)</span>$ <span class="token function">git</span> rebase <span class="token parameter variable">--abort</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="查看信息" tabindex="-1"><a class="header-anchor" href="#查看信息" aria-hidden="true">#</a> 查看信息</h2><p>显示工作路径下已修改的文件：<code>git status</code></p><p>显示与上次提交版本文件的不同：<code>git diff</code></p><p>显示提交历史：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 从最新提交开始，显示所有的提交记录（显示hash， 作者信息，提交的标题和时间）</span>
$ <span class="token function">git</span> log

<span class="token comment"># 显示某个用户的所有提交</span>
$ <span class="token function">git</span> log <span class="token parameter variable">--author</span><span class="token operator">=</span><span class="token string">&quot;username&quot;</span>

<span class="token comment"># 显示某个文件的所有修改</span>
$ <span class="token function">git</span> log <span class="token parameter variable">-p</span> <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>显示搜索内容：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 从当前目录的所有文件中查找文本内容</span>
$ <span class="token function">git</span> <span class="token function">grep</span> <span class="token string">&quot;Hello&quot;</span>

<span class="token comment"># 在某一版本中搜索文本</span>
$ <span class="token function">git</span> <span class="token function">grep</span> <span class="token string">&quot;Hello&quot;</span> v2.5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h2><h3 id="克隆所有子模块" tabindex="-1"><a class="header-anchor" href="#克隆所有子模块" aria-hidden="true">#</a> 克隆所有子模块</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone <span class="token parameter variable">--recursive</span> git://github.com/foo/bar.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果已经克隆了:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> submodule update <span class="token parameter variable">--init</span> <span class="token parameter variable">--recursive</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="已删除补丁-patch" tabindex="-1"><a class="header-anchor" href="#已删除补丁-patch" aria-hidden="true">#</a> 已删除补丁(patch)</h3><p>如果某人在 GitHub 上给你发了一个 pull request, 但是然后他删除了他自己的原始 fork, 你将没法克隆他们的提交(commit)或使用 <code>git am</code>。在这种情况下, 最好手动的查看他们的提交(commit)，并把它们拷贝到一个本地新分支，然后做提交。</p><p>做完提交后, 再修改作者，参见<a href="#commit-wrong-author">变更作者</a>。 然后, 应用变化, 再发起一个新的 pull request。</p><h2 id="跟踪文件-tracking-files" tabindex="-1"><a class="header-anchor" href="#跟踪文件-tracking-files" aria-hidden="true">#</a> 跟踪文件(Tracking Files)</h2><h3 id="我只想改变一个文件名字的大小写-而不修改内容" tabindex="-1"><a class="header-anchor" href="#我只想改变一个文件名字的大小写-而不修改内容" aria-hidden="true">#</a> 我只想改变一个文件名字的大小写，而不修改内容</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>master<span class="token punctuation">)</span>$ <span class="token function">git</span> <span class="token function">mv</span> <span class="token parameter variable">--force</span> myfile MyFile
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="我想从-git-删除一个文件-但保留该文件" tabindex="-1"><a class="header-anchor" href="#我想从-git-删除一个文件-但保留该文件" aria-hidden="true">#</a> 我想从 Git 删除一个文件，但保留该文件</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>master<span class="token punctuation">)</span>$ <span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">--cached</span> log.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="fork-项目" tabindex="-1"><a class="header-anchor" href="#fork-项目" aria-hidden="true">#</a> Fork 项目</h2><p>GitHub 中 Fork 是 服务端的代码仓库克隆（即 新克隆出来的代码仓库在远程服务端），包含了原来的仓库（即 upstream repository，上游仓库）所有内容，如分支、Tag、提交。代码托管服务（如 Github、BitBucket）提供了方便的完成 Fork 操作的功能（在仓库页面点一下 Fork 按钮）。这样有了一个你自己的可以自由提交的远程仓库，然后可以通过的 Pull Request 把你的提交贡献回 原仓库。而对于原仓库 Owner 来说，鼓励别人 Fork 自己的仓库，通过 Pull Request 给自己的仓库做贡献，也能提高了自己仓库的知名度。</p>`,75),w={href:"https://docs.github.com/en/github/getting-started-with-github/fork-a-repo",target:"_blank",rel:"noopener noreferrer"},y=i(`<p>（1）执行 <code>git remote -v</code>，您将看到当前为 fork 配置的远程存储库。</p><p>（2）添加上游项目的仓库地址</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> remote <span class="token function">add</span> upstream <span class="token operator">&lt;</span>github仓库地址<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（3）确认是否添加成功，再次键入 <code>git remote -v</code>。</p><p>（4）获取上游项目更新，可以执行 <code>git fetch upstream</code></p><p>（5）同步上游项目的代码到新仓库</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># merge</span>
<span class="token function">git</span> merge upstream/master
<span class="token comment"># rebase</span>
<span class="token function">git</span> rebase upstream/master origin/master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="我不知道我做错了些什么" tabindex="-1"><a class="header-anchor" href="#我不知道我做错了些什么" aria-hidden="true">#</a> 我不知道我做错了些什么</h2><p>你把事情搞砸了：你 <code>重置(reset)</code> 了一些东西, 或者你合并了错误的分支, 亦或你强推了后找不到你自己的提交(commit)了。有些时候, 你一直都做得很好, 但你想回到以前的某个状态。</p><p>这就是 <code>git reflog</code> 的目的， <code>reflog</code> 记录对分支顶端(the tip of a branch)的任何改变, 即使那个顶端没有被任何分支或标签引用。基本上, 每次 HEAD 的改变, 一条新的记录就会增加到<code>reflog</code>。遗憾的是，这只对本地分支起作用，且它只跟踪动作 (例如，不会跟踪一个没有被记录的文件的任何改变)。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>master<span class="token punctuation">)</span>$ <span class="token function">git</span> reflog
0a2e358 HEAD@<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span>: reset: moving to HEAD<span class="token punctuation">\\</span>~2
0254ea7 HEAD@<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span>: checkout: moving from <span class="token number">2.2</span> to master
c10f740 HEAD@<span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span>: checkout: moving from master to <span class="token number">2.2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的 reflog 展示了从 master 分支签出(checkout)到 2.2 分支，然后再签回。 那里，还有一个硬重置(hard reset)到一个较旧的提交。最新的动作出现在最上面以 <code>HEAD@{0}</code>标识.</p><p>如果事实证明你不小心回移(move back)了提交(commit), reflog 会包含你不小心回移前 master 上指向的提交(0254ea7)。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> reset <span class="token parameter variable">--hard</span> 0254ea7
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后使用 git reset 就可以把 master 改回到之前的 commit，这提供了一个在历史被意外更改情况下的安全网。</p><h2 id="📚-资料" tabindex="-1"><a class="header-anchor" href="#📚-资料" aria-hidden="true">#</a> 📚 资料</h2>`,16),$=a("strong",null,"官方资源",-1),A={href:"https://git-scm.com/",target:"_blank",rel:"noopener noreferrer"},D={href:"https://github.com/git/git",target:"_blank",rel:"noopener noreferrer"},E={href:"https://guides.github.com/",target:"_blank",rel:"noopener noreferrer"},G=a("strong",null,"模板",-1),H={href:"https://github.com/github/gitignore",target:"_blank",rel:"noopener noreferrer"},q={href:"https://github.com/alexkaratarakis/gitattributes",target:"_blank",rel:"noopener noreferrer"},S={href:"https://github.com/tiimgreen/github-cheat-sheet",target:"_blank",rel:"noopener noreferrer"},T=a("strong",null,"Git 教程",-1),C={href:"https://learngitbranching.js.org/",target:"_blank",rel:"noopener noreferrer"},O={href:"https://git-scm.com/book/zh/v2",target:"_blank",rel:"noopener noreferrer"},M={href:"https://github.com/k88hudson/git-flight-rules",target:"_blank",rel:"noopener noreferrer"},F={href:"https://github.com/521xueweihan/git-tips",target:"_blank",rel:"noopener noreferrer"},R={href:"https://github.com/geeeeeeeeek/git-recipes",target:"_blank",rel:"noopener noreferrer"},I={href:"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000",target:"_blank",rel:"noopener noreferrer"},N={href:"https://github.com/xirong/my-git",target:"_blank",rel:"noopener noreferrer"},B=a("strong",null,"文章",-1),L={href:"https://github.com/k88hudson/git-flight-rules/blob/master/README_zh-CN.md",target:"_blank",rel:"noopener noreferrer"},U={href:"https://github.com/521xueweihan/git-tips",target:"_blank",rel:"noopener noreferrer"},z={href:"https://github.com/aseaday/git-style-guide",target:"_blank",rel:"noopener noreferrer"},W={href:"http://www.cnblogs.com/cnblogsfans/p/5075073.html",target:"_blank",rel:"noopener noreferrer"},j={href:"http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html",target:"_blank",rel:"noopener noreferrer"},J=a("strong",null,"Git 工具",-1),P={href:"https://git-scm.com/downloads/guis",target:"_blank",rel:"noopener noreferrer"},X={href:"https://github.com/gogits/gogs",target:"_blank",rel:"noopener noreferrer"},V={href:"https://github.com/nvie/gitflow",target:"_blank",rel:"noopener noreferrer"},Y={href:"http://nvie.com/posts/a-successful-git-branching-model/",target:"_blank",rel:"noopener noreferrer"},K={href:"http://firstaidgit.io/",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://github.com/unixorn/git-extra-commands",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://github.com/tj/git-extras",target:"_blank",rel:"noopener noreferrer"},aa={href:"https://github.com/qw3rtman/git-fire",target:"_blank",rel:"noopener noreferrer"},na={href:"https://github.com/git-tips/tips",target:"_blank",rel:"noopener noreferrer"},sa={href:"https://github.com/Originate/git-town",target:"_blank",rel:"noopener noreferrer"},ea=a("strong",null,"GUI 客户端",-1),ia={href:"https://www.gitkraken.com/",target:"_blank",rel:"noopener noreferrer"},ta={href:"https://git-cola.github.io/",target:"_blank",rel:"noopener noreferrer"},oa={href:"https://github.com/git-up/GitUp",target:"_blank",rel:"noopener noreferrer"},ra={href:"https://rowanj.github.io/gitx/",target:"_blank",rel:"noopener noreferrer"},ca={href:"https://www.sourcetreeapp.com/",target:"_blank",rel:"noopener noreferrer"},la={href:"http://www.git-tower.com/",target:"_blank",rel:"noopener noreferrer"},pa=a("strong",null,"git cheat sheet",-1),da={href:"https://services.github.com/on-demand/downloads/github-git-cheat-sheet.pdf",target:"_blank",rel:"noopener noreferrer"};function ua(ma,ha){const s=o("ExternalLinkIcon");return r(),c("div",null,[p,a("p",null,[n("在"),a("a",d,[n("Git 官方下载地址"),e(s)]),n("下载 exe 安装包。按照安装向导安装即可。")]),u,m,a("p",null,[n("在"),a("a",h,[n("Git 官方下载地址"),e(s)]),n("下载 mac 安装包。按照安装向导安装即可。")]),b,a("p",null,[n("Note: Spike solutions are made to analyze or solve the problem. These solutions are used for estimation and discarded once everyone gets clear visualization of the problem. ~ "),a("a",v,[n("Wikipedia"),e(s)]),n(".")]),g,a("p",null,[n("记下这个标签(tag)的 hash，然后用 Git 的 "),a("a",k,[n("update-ref"),e(s)]),n(":")]),f,a("p",null,[n("更多, 参见 "),a("a",x,[n("this SO thread"),e(s)]),n(".")]),_,a("blockquote",null,[a("p",null,[n("参考："),a("a",w,[n("Fork a repo"),e(s)])])]),y,a("ul",null,[a("li",null,[$,a("ul",null,[a("li",null,[a("a",A,[n("Git 官网"),e(s)])]),a("li",null,[a("a",D,[n("Git Github"),e(s)])]),a("li",null,[a("a",E,[n("Github 官方教程"),e(s)])])])]),a("li",null,[G,a("ul",null,[a("li",null,[a("a",H,[n("gitignore 模板"),e(s)]),n(" - .gitignore 文件模板")]),a("li",null,[a("a",q,[n("gitattributes 模板"),e(s)]),n(" - .gitattributes 文件模板")]),a("li",null,[a("a",S,[n("github-cheat-sheet"),e(s)]),n(" - git 命令简略图表")])])]),a("li",null,[T,a("ul",null,[a("li",null,[a("a",C,[n("Learn Git branching"),e(s)]),n(" - 交互式教程")]),a("li",null,[a("a",O,[n("Git 官方推荐教程"),e(s)]),n(" - Scott Chacon 的 Git 书。 "),a("ul",null,[a("li",null,[a("a",M,[n("git-flight-rules"),e(s)])])])]),a("li",null,[a("a",F,[n("git-tips"),e(s)])]),a("li",null,[a("a",R,[n("Git 中文教程"),e(s)])]),a("li",null,[a("a",I,[n("廖雪峰的 Git 教程"),e(s)])]),a("li",null,[a("a",N,[n("有关 git 的学习资源"),e(s)])])])]),a("li",null,[B,a("ul",null,[a("li",null,[a("a",L,[n("Git Cookbook"),e(s)])]),a("li",null,[a("a",U,[n("Git 奇技淫巧"),e(s)])]),a("li",null,[a("a",z,[n("Git 风格指南"),e(s)])]),a("li",null,[a("a",W,[n("Git 在团队中的最佳实践--如何正确使用 Git Flow"),e(s)])]),a("li",null,[a("a",j,[n("Commit message 和 Change log 编写指南"),e(s)])])])]),a("li",null,[J,a("ul",null,[a("li",null,[a("a",P,[n("guis"),e(s)]),n(" - Git 官网展示的客户端工具列表。")]),a("li",null,[a("a",X,[n("gogs"),e(s)]),n(" - 极易搭建的自助 Git 服务。")]),a("li",null,[a("a",V,[n("gitflow"),e(s)]),n(" - 应用 "),a("a",Y,[n("fit-flow"),e(s)]),n(" 模型的工具。")]),a("li",null,[a("a",K,[n("firstaidgit.io"),e(s)]),n(" 一个可搜索的最常被问到的 Git 的问题")]),a("li",null,[a("a",Q,[n("git-extra-commands"),e(s)]),n(" - 一堆有用的额外的 Git 脚本")]),a("li",null,[a("a",Z,[n("git-extras"),e(s)]),n(" - GIT 工具集 -- repo summary, repl, changelog population, author commit percentages and more")]),a("li",null,[a("a",aa,[n("git-fire"),e(s)]),n(" - git-fire 是一个 Git 插件，用于帮助在紧急情况下添加所有当前文件, 做提交(committing), 和推(push)到一个新分支(阻止合并冲突)。")]),a("li",null,[a("a",na,[n("git-tips"),e(s)]),n(" - Git 小提示")]),a("li",null,[a("a",sa,[n("git-town"),e(s)]),n(" - 通用，高级 Git 工作流支持！")])])]),a("li",null,[ea,a("ul",null,[a("li",null,[a("a",ia,[n("GitKraken"),e(s)]),n(" - 豪华的 Git 客户端 Windows, Mac & Linux")]),a("li",null,[a("a",ta,[n("git-cola"),e(s)]),n(" - 另外一个 Git 客户端 Windows & OS X")]),a("li",null,[a("a",oa,[n("GitUp"),e(s)]),n(" - 一个新的 Git 客户端，在处理 Git 的复杂性上有自己的特点")]),a("li",null,[a("a",ra,[n("gitx-dev"),e(s)]),n(" - 图形化的 Git 客户端 OS X")]),a("li",null,[a("a",ca,[n("Source Tree"),e(s)]),n(" - 免费的图形化 Git 客户端 Windows & OS X")]),a("li",null,[a("a",la,[n("Tower"),e(s)]),n(" - 图形化 Git 客户端 OS X(付费)")])])]),a("li",null,[pa,a("ul",null,[a("li",null,[a("a",da,[n("github-git-cheat-sheet"),e(s)])])])])])])}const ga=t(l,[["render",ua],["__file","index.html.vue"]]);export{ga as default};
