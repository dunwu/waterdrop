import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as i,c as l,a as n,b as s,d as t,e}from"./app-6745ace7.js";const c={},r=e('<h1 id="分布式-id" tabindex="-1"><a class="header-anchor" href="#分布式-id" aria-hidden="true">#</a> 分布式 ID</h1><h2 id="分布式-id-简介" tabindex="-1"><a class="header-anchor" href="#分布式-id-简介" aria-hidden="true">#</a> 分布式 ID 简介</h2><h3 id="什么是分布式-id" tabindex="-1"><a class="header-anchor" href="#什么是分布式-id" aria-hidden="true">#</a> 什么是分布式 ID？</h3><p>ID 是 Identity 的缩写，用于唯一的标识一条数据。<strong>分布式 ID</strong>，顾名思义，是<strong>用于在分布式系统中唯一标识数据的 ID</strong>。</p><h3 id="为什么需要分布式-id" tabindex="-1"><a class="header-anchor" href="#为什么需要分布式-id" aria-hidden="true">#</a> 为什么需要分布式 ID？</h3><p>传统数据库基本都支持针对单表生成唯一性的自增主键。随着数据的膨胀，单机成为了性能和容量的瓶颈。为了解决这个问题，有了分库分表技术。分库分表所要面临的第一个问题是：数据分布在不同机器上，数据库无法保证多个节点上产生的主键唯一。 这就需要用到分布式 ID 了，它起到了分布式系统中<strong>全局 ID</strong> 的作用。</p><h3 id="分布式-id-的设计目标" tabindex="-1"><a class="header-anchor" href="#分布式-id-的设计目标" aria-hidden="true">#</a> 分布式 ID 的设计目标</h3><p>首先，分布式 ID 应该具备哪些特性呢？</p><ol><li><strong>全局唯一性</strong> - 不能出现重复的 ID 号，既然是唯一标识，这是最基本的要求。</li><li><strong>单调递增</strong> - 保证下一个 ID 一定大于上一个 ID，例如事务版本号、IM 增量消息、排序等特殊需求。</li><li><strong>高性能</strong> - 分布式 ID 的生成速度要快，对本地资源消耗要小。</li><li><strong>高可用</strong> - 生成分布式 ID 的服务要保证可用性无限接近于 100%。</li><li><strong>安全性</strong> - ID 中不应包括敏感信息。</li></ol><h2 id="uuid" tabindex="-1"><a class="header-anchor" href="#uuid" aria-hidden="true">#</a> UUID</h2><p>UUID 是通用唯一识别码（Universally Unique Identifier）的缩写，是一种 128 位的标识符，由32个16进制字符表示。<strong>UUID 会根据运行应用的计算机网卡 MAC 地址、时间戳、命名空间等元素，通过一定的随机算法产生</strong>。</p><p>UUID 不保证全局唯一性，我们需要小心 ID 冲突（尽管这种可能性很小）。</p>',12),u={href:"https://zh.wikipedia.org/wiki/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81",target:"_blank",rel:"noopener noreferrer"},d=e('<h3 id="版本-1" tabindex="-1"><a class="header-anchor" href="#版本-1" aria-hidden="true">#</a> 版本 1</h3><p>UUID 版本 1 <strong>根据时间和 MAC 地址生成 UUID</strong>。</p><figure><img src="https://bleid.netlify.app/img/version/version_1_uuid.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>组成参数说明：</p><ul><li><strong>time_low</strong> - 与日期时间信息的低值有关</li><li><strong>time_mid</strong> - 与日期时间信息的 mid 值有关</li><li><strong>time_high_and_version</strong> - 与日期时间信息的高值有关</li><li><strong>clock_seq_hi_and_reserved</strong> - 与计算机系统的内部时钟序列有关</li><li><strong>MAC 地址</strong> - 设备的 MAC 地址</li></ul><h3 id="版本-2" tabindex="-1"><a class="header-anchor" href="#版本-2" aria-hidden="true">#</a> 版本 2</h3><p>UUID 版本 2 <strong>根据时间和 MAC 地址、DCE Security 生成 UUID</strong>。</p><p>它将版本 1 中的日期时间信息替换为本地域名。它没有被广泛使用，因为它降低了唯一性。</p><h3 id="版本-3" tabindex="-1"><a class="header-anchor" href="#版本-3" aria-hidden="true">#</a> 版本 3</h3><p>UUID 版本 3 <strong>使用命名空间和名称生成 UUID</strong>。<strong>命名空间</strong>本身是一个 UUID，URL 名称用作标识。二者组合后，通过 <strong>MD5</strong> 哈希算法计算生成 UUID。</p><figure><img src="https://bleid.netlify.app/img/version/version_3_uuid.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="版本-5" tabindex="-1"><a class="header-anchor" href="#版本-5" aria-hidden="true">#</a> 版本 5</h3><p>UUID 版本 5 和 版本 4 近似，都<strong>使用命名空间和名称生成 UUID</strong>。差异在于：<strong>版本 3 采用 MD5 作为哈希算法</strong>；<strong>版本 5 采用 SHA1 作为哈希算法</strong>。</p><figure><img src="https://bleid.netlify.app/img/version/version_5_uuid.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>版本 3 、版本 5</strong> - 基于哈希命名空间标识符和名称生成 UUID，差异在于：版本 3 采用 MD5 作为哈希算法；版本 5 采用 SHA1 作为哈希算法。</p><h3 id="版本-4" tabindex="-1"><a class="header-anchor" href="#版本-4" aria-hidden="true">#</a> 版本 4</h3><p>版本 4 随机生成 UUID，不包含其他 UUID 中使用的任何信息 （命名空间、MAC 地址、时间）。识别它的唯一方法是版本 4 UUID，字符只是 <strong>4</strong> 位于 UUID 第三部分的第一个位置。其他字符是随机生成的。</p><figure><img src="https://bleid.netlify.app/img/version/version_4_uuid.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>版本 4 是最常见的 UUID 实现，JDK 中也提供了实现，示例如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> uuid <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="uuid-的优缺点" tabindex="-1"><a class="header-anchor" href="#uuid-的优缺点" aria-hidden="true">#</a> UUID 的优缺点</h3><ul><li><strong>优点</strong><ul><li>简单、生成速度较快（本地生成，不依赖其他服务）</li></ul></li><li><strong>缺点</strong><ul><li><strong>无序</strong> - 不能生成递增有序的数字，这不利于一些特定场景。如：MySQL InnoDB 存储引擎使用 B+ 树存储索引数据，索引数据在 B+ 树中是有序排列的。而 UUID 的无序性可能会引起数据位置频繁变动，严重影响性能。</li><li><strong>长度过长</strong> - UUID 需要占用 32 个字节</li><li><strong>信息不安全</strong> - 基于 MAC 地址生成 UUID 的算法，可能会造成 MAC 地址泄露，这个漏洞曾被用于寻找梅丽莎病毒的制作者位置。</li></ul></li></ul><h2 id="数据库自增序列" tabindex="-1"><a class="header-anchor" href="#数据库自增序列" aria-hidden="true">#</a> 数据库自增序列</h2><p>大多数数据库都支持自增主键。基于此特性，可以利用事务管理控制生成唯一 ID。</p><p>以 MySQL 举例，我们通过下面的方式即可。</p><p>（1）创建一个专用于生成 ID 的表</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>sequence_id<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>\n  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>stub<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>\n  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>stub<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>stub<span class="token punctuation">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>stub</code> 字段无意义，只是为了占位，便于我们插入或者修改数据。并且，给 <code>stub</code> 字段创建了唯一索引，保证其唯一性。</p><p>（2）通过 <code>replace into</code> 来插入数据。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">BEGIN</span><span class="token punctuation">;</span>\n<span class="token keyword">REPLACE</span> <span class="token keyword">INTO</span> sequence_id <span class="token punctuation">(</span>stub<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;stub&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">SELECT</span> LAST_INSERT_ID<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">COMMIT</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>插入数据这里，我们没有使用 <code>insert into</code> 而是使用 <code>replace into</code> 来插入数据，具体步骤是这样的：</p><ul><li>第一步：尝试把数据插入到表中。</li><li>第二步：如果主键或唯一索引字段出现重复数据错误而插入失败时，先从表中删除含有重复关键字值的冲突行，然后再次尝试把数据插入到表中。</li></ul><p>这种方式的优缺点也比较明显：</p><ul><li><strong>优点</strong>： <ul><li>方案简单</li><li>有序</li><li>ID 长度小</li></ul></li><li><strong>缺点</strong>： <ul><li>性能差</li><li>每次获取 ID 都要访问一次数据库，增加了对数据库的压力</li><li>不安全，根据发号数量信息可能推测出业务规模</li><li>单点问题，如果数据库宕机会造成服务不可用，可以使用高可用方案来解决，但会增加复杂度</li></ul></li></ul><h2 id="数据库生成号段" tabindex="-1"><a class="header-anchor" href="#数据库生成号段" aria-hidden="true">#</a> 数据库生成号段</h2><p>数据库自增序列这种模式，每次获取 ID 都要请求一次数据库。当请求并发量高时，会给数据库带来很大的压力，并且生成 ID 的性能也比较差。</p><p>可以采用<strong>批处理</strong>的思路来优化数据库自增序列方案。申请 ID 改为批量获取，不再一次只申请一个 ID，而是一次批量生成一个 segment（号段），号段的大小由 step（步长）控制。用完之后再去数据库获取新的号段，可以大大的减轻数据库的压力。各个业务不同的发号需求用 biz_tag 字段来区分，每个 biz_tag 的 ID 获取相互隔离，互不影响。如果以后有性能需求需要对数据库扩容，不需要上述描述的复杂的扩容操作，只需要对 biz_tag 分库分表就行。</p><p>以 MySQL 举例，我们通过下面的方式即可。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>leaf_alloc<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>\n  <span class="token identifier"><span class="token punctuation">`</span>biz_tag<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>max_id<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>step<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>description<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span>  <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>update_time<span class="token punctuation">`</span></span> <span class="token keyword">timestamp</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">,</span>\n  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>biz_tag<span class="token punctuation">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span><span class="token punctuation">;</span>\n\n<span class="token keyword">insert</span> <span class="token keyword">into</span> leaf_alloc<span class="token punctuation">(</span>biz_tag<span class="token punctuation">,</span> max_id<span class="token punctuation">,</span> step<span class="token punctuation">,</span> description<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">&#39;leaf-segment-test&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token string">&#39;Test leaf Segment Mode Get Id&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重要字段说明：</p><ul><li><code>biz_tag</code> 用来区分业务</li><li><code>max_id</code> 表示该 <code>biz_tag</code> 目前所被分配的 ID 号段的最大值</li><li><code>step</code> 表示每次分配的号段长度。原来获取 ID 每次都需要写数据库，现在只需要把 <code>step</code> 设置得足够大，比如 1000。那么只有当 1000 个号被消耗完了之后才会去重新读写一次数据库。读写数据库的频率从 1 减小到了 1/step。</li></ul><p>大致架构如下图所示：</p><figure><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2017/5e4ff128.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>test_tag 在第一台 Leaf 机器上是 <code>1~1000</code> 的号段，当这个号段用完时，会去加载另一个长度为 step=1000 的号段，假设另外两台号段都没有更新，这个时候第一台机器新加载的号段就应该是 <code>3001~4000</code>。同时数据库对应的 biz_tag 这条数据的 max_id 会从 3000 被更新成 4000，更新号段的 SQL 语句如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">Begin</span>\n<span class="token keyword">UPDATE</span> <span class="token keyword">table</span> <span class="token keyword">SET</span> max_id<span class="token operator">=</span>max_id<span class="token operator">+</span>step <span class="token keyword">WHERE</span> biz_tag<span class="token operator">=</span>xxx\n<span class="token keyword">SELECT</span> tag<span class="token punctuation">,</span> max_id<span class="token punctuation">,</span> step <span class="token keyword">FROM</span> <span class="token keyword">table</span> <span class="token keyword">WHERE</span> biz_tag<span class="token operator">=</span>xxx\n<span class="token keyword">Commit</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>数据库号段模式的优缺点：</strong></p><ul><li><strong>优点</strong>： <ul><li>有序</li><li>ID 长度小</li><li>效率比数据库自增序列方式高很多</li></ul></li><li><strong>缺点</strong><ul><li>号段使用完，还是需要向数据库发起事务更新，以获取新号段</li><li>不安全，根据发号数量信息可能推测出业务规模</li><li>单点问题，如果数据库宕机会造成服务不可用，可以使用高可用方案来解决，但会增加复杂度</li></ul></li></ul>',47),k={href:"https://github.com/didi/tinyid",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/Meituan-Dianping/Leaf",target:"_blank",rel:"noopener noreferrer"},h={href:"https://tech.meituan.com/2017/04/21/mt-leaf.html",target:"_blank",rel:"noopener noreferrer"},m=n("ul",null,[n("li",null,"Leaf 采用双 Buffer 优化，避免号段耗尽时，阻塞以获取新号段。其本质上是：通过双缓存，提前预热号段缓存。"),n("li",null,"此外，基于 Atlas（以改名 DBProxy）保障数据库的高可用。也就是保护了号段数据存储的高可用。")],-1),b=e(`<h2 id="原子计数器" tabindex="-1"><a class="header-anchor" href="#原子计数器" aria-hidden="true">#</a> 原子计数器</h2><p>一些 NoSQL 数据库提供了原子性的计数器，可以基于这点，来实现分布式 ID。</p><h3 id="redis-生成自增键" tabindex="-1"><a class="header-anchor" href="#redis-生成自增键" aria-hidden="true">#</a> Redis 生成自增键</h3><p>Redis 的 String 类型提供 <code>INCR</code> 和 <code>INCRBY</code> 命令将 key 中储存的数字<strong>原子递增</strong>。</p><p>为避免单点问题，可以采用 Redis Cluster。</p><p><strong>Redis 方案的优缺点：</strong></p><ul><li><strong>优点</strong>：高性能、有序</li><li><strong>缺点</strong>：和数据库自增序列方案的缺点类似</li></ul><h3 id="zookeeper-生成自增键" tabindex="-1"><a class="header-anchor" href="#zookeeper-生成自增键" aria-hidden="true">#</a> ZooKeeper 生成自增键</h3><p>利用 ZooKeeper 中的顺序节点特性，很容易使我们创建的 ID 编码具有有序的特性。并且我们也可以通过客户端传递节点的名称，根据不同的业务编码区分不同的业务系统，从而使编码的扩展能力更强。</p><p><strong>每个需要 ID 编码的业务服务器可以看作是 ZooKeeper 的客户端</strong>。ID 编码生成器可以作为 ZooKeeper 的服务端。客户端通过发送请求到 ZooKeeper 服务器，来获取编码信息，服务端接收到请求后，发送 ID 编码给客户端。</p><figure><img src="https://learn.lianglianglee.com/专栏/ZooKeeper源码分析与实战-完/assets/CgqCHl8RTBGAB7QNAAAvwu3rspw007.png" alt="Drawing 2.png" tabindex="0" loading="lazy"><figcaption>Drawing 2.png</figcaption></figure><p>可以利用 ZooKeeper 数据模型中的顺序节点作为 ID 编码。客户端通过调用 create 函数创建顺序节点。服务器成功创建节点后，会响应客户端请求，把创建好的节点信息发送给客户端。客户端用数据节点名称作为 ID 编码，进行之后的本地业务操作。</p><details class="hint-container details"><summary>要点</summary><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZookeeperDistributedId</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>

        <span class="token comment">// 获取客户端</span>
        <span class="token class-name">RetryPolicy</span> retryPolicy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExponentialBackoffRetry</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">CuratorFramework</span> client <span class="token operator">=</span> <span class="token class-name">CuratorFrameworkFactory</span><span class="token punctuation">.</span><span class="token function">newClient</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1:2181&quot;</span><span class="token punctuation">,</span> retryPolicy<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 开启会话</span>
        client<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">String</span> id1 <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                           <span class="token punctuation">.</span><span class="token function">creatingParentsIfNeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                           <span class="token punctuation">.</span><span class="token function">withMode</span><span class="token punctuation">(</span><span class="token class-name">CreateMode</span><span class="token punctuation">.</span><span class="token constant">PERSISTENT_SEQUENTIAL</span><span class="token punctuation">)</span>
                           <span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">&quot;/zkid/id_&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;id: {}&quot;</span><span class="token punctuation">,</span> id1<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">String</span> id2 <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                           <span class="token punctuation">.</span><span class="token function">creatingParentsIfNeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                           <span class="token punctuation">.</span><span class="token function">withMode</span><span class="token punctuation">(</span><span class="token class-name">CreateMode</span><span class="token punctuation">.</span><span class="token constant">PERSISTENT_SEQUENTIAL</span><span class="token punctuation">)</span>
                           <span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">&quot;/zkid/id_&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;id: {}&quot;</span><span class="token punctuation">,</span> id2<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> children <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">&quot;/zkid&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtil</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> child <span class="token operator">:</span> children<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                client<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">&quot;/zkid/&quot;</span> <span class="token operator">+</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        client<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">&quot;/zkid&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 关闭客户端</span>
        client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p><strong>ZooKeeper 方案的优缺点：</strong></p><ul><li><strong>优点</strong>：简单、可靠性高</li><li><strong>缺点</strong>：性能不高</li></ul><h2 id="雪花算法-snowflake" tabindex="-1"><a class="header-anchor" href="#雪花算法-snowflake" aria-hidden="true">#</a> 雪花算法（Snowflake）</h2><p>雪花算法（Snowflake）是由 Twitter 公布的分布式主键生成算法，<strong>它会生成一个 <code>64 bit</code> 的整数</strong>，可以保证不同进程主键的不重复性，以及相同进程主键的有序性。在同一个进程中，它首先是通过时间位保证不重复，如果时间相同则是通过序列位保证。 同时由于时间位是单调递增的，且各个服务器如果大体做了时间同步，那么生成的主键在分布式环境可以认为是总体有序的，这就保证了对索引字段的插入的高效性。</p><h3 id="键的组成" tabindex="-1"><a class="header-anchor" href="#键的组成" aria-hidden="true">#</a> 键的组成</h3><p>使用<strong>雪花算法生成的主键，二进制表示形式包含 4 部分</strong>，从高位到低位分表为：1bit 符号位、41bit 时间戳位、10bit 工作进程位以及 12bit 序列号位。</p><ul><li><strong>符号位 (1bit)</strong></li></ul><p>预留的符号位，恒为零。</p><ul><li><strong>时间戳位 (41bit)</strong></li></ul><p>41 位的时间戳可以容纳的毫秒数是 2 的 41 次幂，一年所使用的毫秒数是：<code>365 * 24 * 60 * 60 * 1000</code>。通过计算可知：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">365</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果约等于 69.73 年。ShardingSphere 的雪花算法的时间纪元从 2016 年 11 月 1 日零点开始，可以使用到 2086 年，相信能满足绝大部分系统的要求。</p><ul><li><strong>工作进程位 (10bit)</strong></li></ul><p>该标志在 Java 进程内是唯一的，如果是分布式应用部署应保证每个工作进程的 id 是不同的。该值默认为 0，可通过属性设置。</p><ul><li><strong>序列号位 (12bit)</strong></li></ul><p>该序列是用来在同一个毫秒内生成不同的 ID。如果在这个毫秒内生成的数量超过 4096(2 的 12 次幂），那么生成器会等待到下个毫秒继续生成。</p><p>雪花算法主键的详细结构见下图：</p><figure><img src="https://shardingsphere.apache.org/document/current/img/sharding/snowflake_cn_v2.png" alt="雪花算法" tabindex="0" loading="lazy"><figcaption>雪花算法</figcaption></figure><h3 id="时钟回拨" tabindex="-1"><a class="header-anchor" href="#时钟回拨" aria-hidden="true">#</a> 时钟回拨</h3><p>服务器时钟回拨会导致产生重复序列，因此默认分布式主键生成器提供了一个最大容忍的时钟回拨毫秒数。 如果时钟回拨的时间超过最大容忍的毫秒数阈值，则程序报错；如果在可容忍的范围内，默认分布式主键生成器会等待时钟同步到最后一次主键生成的时间后再继续工作。 最大容忍的时钟回拨毫秒数的默认值为 0，可通过属性设置。</p><p>雪花算法是强依赖于时间的，而如果机器时间发生回拨，有可能会生成重复的 ID。</p><p>我们可以针对算法做一些优化，来防止时钟回拨生成重复 ID。</p><p>用当前时间和上一次的时间进行判断，如果当前时间小于上一次的时间那么肯定是发生了回拨。普通的算法会直接抛出异常，这里我们可以对其进行优化，一般分为两个情况：</p><ul><li>如果时间回拨时间较短，比如配置 <code>5ms</code> 以内，那么可以直接等待一定的时间，让机器的时间追上来。</li><li>如果时间的回拨时间较长，我们不能接受这么长的阻塞等待，那么又有两个策略： <ul><li>直接拒绝，抛出异常。打日志，通知 RD 时钟回滚。</li><li>利用扩展位。上面我们讨论过，不同业务场景位数可能用不到那么多比特位，那么我们可以把扩展位数利用起来。比如：当这个时间回拨比较长的时候，我们可以不需要等待，直接在扩展位加 1。两位的扩展位允许我们有三次大的时钟回拨，一般来说就够了，如果其超过三次我们还是选择抛出异常，打日志。</li></ul></li></ul><h3 id="灵活定制" tabindex="-1"><a class="header-anchor" href="#灵活定制" aria-hidden="true">#</a> 灵活定制</h3><p>上面只是一个将 <code>64bit</code> 划分的标准，当然也不一定这么做，可以根据不同业务的具体场景来划分，比如下面给出一个业务场景：</p><ul><li>服务目前 QPS10 万，预计几年之内会发展到百万。</li><li>当前机器三地部署，上海，北京，深圳都有。</li><li>当前机器 10 台左右，预计未来会增加至百台。</li></ul><p>这个时候我们根据上面的场景可以再次合理的划分 62bit，QPS 几年之内会发展到百万，那么每毫秒就是千级的请求，目前 10 台机器那么每台机器承担百级的请求，为了保证扩展，后面的循环位可以限制到 1024，也就是 2^10，那么循环位 10 位就足够了。</p><p>机器三地部署我们可以用 3bit 总共 8 来表示机房位置，当前的机器 10 台，为了保证扩展到百台那么可以用 7bit 128 来表示，时间位依然是 41bit，那么还剩下 64-10-3-7-41-1 = 2bit，还剩下 2bit 可以用来进行扩展。</p><figure><img src="https://user-gold-cdn.xitu.io/2018/9/29/16624909d2007c22?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="雪花算法小结" tabindex="-1"><a class="header-anchor" href="#雪花算法小结" aria-hidden="true">#</a> 雪花算法小结</h3><p>雪花算法的<strong>利弊</strong>：</p><ul><li><strong>优点</strong><ul><li>生成的 ID 都是趋势递增的。</li><li>不依赖数据库等第三方系统，以服务的方式部署，稳定性更高，生成 ID 的性能也是非常高的。</li><li>可以根据自身业务特性分配 bit 位，非常灵活。</li></ul></li><li><strong>缺点</strong><ul><li>强依赖机器时钟，如果机器上时钟回拨，会导致发号重复或者服务会处于不可用状态。</li></ul></li></ul><p>雪花算法的<strong>适用场景</strong>：</p><p>当我们需要无序不能被猜测的 ID，并且需要一定高性能，且需要 long 型，那么就可以使用我们雪花算法。比如常见的订单 ID，用雪花算法别人就无法猜测你每天的订单量是多少。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,49),v={href:"https://juejin.im/post/5bb0217ef265da0ac2567b42",target:"_blank",rel:"noopener noreferrer"},f={href:"https://segmentfault.com/a/1190000011282426",target:"_blank",rel:"noopener noreferrer"},_={href:"https://tech.meituan.com/2017/04/21/mt-leaf.html",target:"_blank",rel:"noopener noreferrer"},I={href:"https://www.ietf.org/rfc/rfc4122.txt",target:"_blank",rel:"noopener noreferrer"},D={href:"https://github.com/baidu/uid-generator/blob/master/README.zh_cn.md",target:"_blank",rel:"noopener noreferrer"},y={href:"https://shardingsphere.apache.org/document/current/cn/features/sharding/other-features/key-generator/",target:"_blank",rel:"noopener noreferrer"},w={href:"https://medium.com/bytebytego-system-design-alliance/7-famous-approaches-to-generate-distributed-id-with-comparison-table-af89afe4601f",target:"_blank",rel:"noopener noreferrer"},U={href:"https://www.cnblogs.com/throwable/p/14343086.html",target:"_blank",rel:"noopener noreferrer"},E={href:"https://bleid.netlify.app/",target:"_blank",rel:"noopener noreferrer"};function x(A,L){const a=o("ExternalLinkIcon");return i(),l("div",null,[r,n("p",null,[n("a",u,[s("维基百科 - UUID"),t(a)]),s(" 中介绍了 5 种 UUID 算法。")]),d,n("blockquote",null,[n("p",null,[s("扩展：滴滴的 "),n("a",k,[s("tinyid"),t(a)]),s(" 和美团的 "),n("a",g,[s("Leaf"),t(a)]),s(" 都是基于数据库生成号段方案实现的，不过都各自做了一些优化。")]),n("p",null,[s("美团技术团队还对分布式 ID 生成做了一篇技术分享："),n("a",h,[s("Leaf——美团点评分布式 ID 生成系统"),t(a)]),s("，其对于数据库号段模式的优化要点如下：")]),m]),b,n("ul",null,[n("li",null,[n("a",v,[s("如果再有人问你分布式 ID，这篇文章丢给他"),t(a)])]),n("li",null,[n("a",f,[s("理解分布式 id 生成算法 SnowFlake"),t(a)])]),n("li",null,[n("a",_,[s("Leaf——美团点评分布式 ID 生成系统"),t(a)])]),n("li",null,[n("a",I,[s("UUID 规范"),t(a)])]),n("li",null,[n("a",D,[s("百度分布式 ID"),t(a)])]),n("li",null,[n("a",y,[s("ShardingSphere 分布式主键"),t(a)])]),n("li",null,[n("a",w,[s("7 Famous Approaches to Generate Distributed ID with Comparison Table"),t(a)])]),n("li",null,[n("a",U,[s("冷饭新炒：理解 JDK 中 UUID 的底层实现"),t(a)])]),n("li",null,[n("a",E,[s("What is UUID?"),t(a)])])])])}const N=p(c,[["render",x],["__file","index.html.vue"]]);export{N as default};
