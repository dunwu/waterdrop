const e=JSON.parse('{"key":"v-6d4bf4fc","path":"/pages/9e884ba6/","title":"Redis 面试之应用篇","lang":"zh-CN","frontmatter":{"icon":"logos:Redis","title":"Redis 面试之应用篇","cover":"https://raw.githubusercontent.com/dunwu/images/master/snap/202503110803916.jpg","date":"2020-07-13T17:03:42.000Z","permalink":"/pages/9e884ba6/","category":["数据库","KV数据库","Redis"],"tag":["数据库","KV 数据库","Redis","面试"],"description":"Redis 面试之应用篇 缓存 【中等】如何避免缓存雪崩、缓存击穿、缓存穿透？ 缓存击穿：指某个热点数据在缓存中失效，导致大量请求直接访问数据库。此时，由于瞬间的高并发，可能导致数据库崩溃。 使用互斥锁，确保同一时间只有一个请求可以去数据库查询并更新缓存。 热点数据永不过期。 缓存穿透：指查询一个不存在的数据，缓存中没有相应的记录，每次请求都会去数据库查询，造成数据库负担加重。 使用布隆过滤器，过滤掉不存在的请求，避免直接访问数据库。 对查询结果进行缓存，即使是不存在的数据，也可以缓存一个标识，以减少对数据库的请求。 缓存雪崩：指多个缓存数据在同一时间过期，导致大量请求同时访问数据库，从而造成数据库瞬间负载激增。 采用随机过期时间策略，避免多个数据同时过期。 使用双缓存策略，将数据同时存储在两层缓存中，减少数据库直接请求。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/9e884ba6/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"Redis 面试之应用篇"}],["meta",{"property":"og:description","content":"Redis 面试之应用篇 缓存 【中等】如何避免缓存雪崩、缓存击穿、缓存穿透？ 缓存击穿：指某个热点数据在缓存中失效，导致大量请求直接访问数据库。此时，由于瞬间的高并发，可能导致数据库崩溃。 使用互斥锁，确保同一时间只有一个请求可以去数据库查询并更新缓存。 热点数据永不过期。 缓存穿透：指查询一个不存在的数据，缓存中没有相应的记录，每次请求都会去数据库查询，造成数据库负担加重。 使用布隆过滤器，过滤掉不存在的请求，避免直接访问数据库。 对查询结果进行缓存，即使是不存在的数据，也可以缓存一个标识，以减少对数据库的请求。 缓存雪崩：指多个缓存数据在同一时间过期，导致大量请求同时访问数据库，从而造成数据库瞬间负载激增。 采用随机过期时间策略，避免多个数据同时过期。 使用双缓存策略，将数据同时存储在两层缓存中，减少数据库直接请求。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/dunwu/images/master/snap/202503110803916.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-14T13:48:12.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"Redis 面试之应用篇"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"数据库"}],["meta",{"property":"article:tag","content":"KV 数据库"}],["meta",{"property":"article:tag","content":"Redis"}],["meta",{"property":"article:tag","content":"面试"}],["meta",{"property":"article:published_time","content":"2020-07-13T17:03:42.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-14T13:48:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis 面试之应用篇\\",\\"image\\":[\\"https://raw.githubusercontent.com/dunwu/images/master/snap/202503110803916.jpg\\"],\\"datePublished\\":\\"2020-07-13T17:03:42.000Z\\",\\"dateModified\\":\\"2025-09-14T13:48:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"缓存","slug":"缓存","link":"#缓存","children":[{"level":3,"title":"【中等】如何避免缓存雪崩、缓存击穿、缓存穿透？","slug":"【中等】如何避免缓存雪崩、缓存击穿、缓存穿透","link":"#【中等】如何避免缓存雪崩、缓存击穿、缓存穿透","children":[]},{"level":3,"title":"【中等】如何保证缓存与数据库的数据一致性？","slug":"【中等】如何保证缓存与数据库的数据一致性","link":"#【中等】如何保证缓存与数据库的数据一致性","children":[]},{"level":3,"title":"【中等】有哪些常见的内存淘汰算法？","slug":"【中等】有哪些常见的内存淘汰算法","link":"#【中等】有哪些常见的内存淘汰算法","children":[]}]},{"level":2,"title":"分布式锁","slug":"分布式锁","link":"#分布式锁","children":[{"level":3,"title":"【中等】实现分布式锁需要解决哪些问题？","slug":"【中等】实现分布式锁需要解决哪些问题","link":"#【中等】实现分布式锁需要解决哪些问题","children":[]},{"level":3,"title":"【中等】Redis 中如何实现分布式锁？","slug":"【中等】redis-中如何实现分布式锁","link":"#【中等】redis-中如何实现分布式锁","children":[]},{"level":3,"title":"【中等】Red Lock 分布式锁的原理是什么？","slug":"【中等】red-lock-分布式锁的原理是什么","link":"#【中等】red-lock-分布式锁的原理是什么","children":[]},{"level":3,"title":"【中等】Redisson 分布式锁的原理是什么？","slug":"【中等】redisson-分布式锁的原理是什么","link":"#【中等】redisson-分布式锁的原理是什么","children":[]}]},{"level":2,"title":"消息队列","slug":"消息队列","link":"#消息队列","children":[{"level":3,"title":"【中等】Redis 如何实现消息队列？","slug":"【中等】redis-如何实现消息队列","link":"#【中等】redis-如何实现消息队列","children":[]}]},{"level":2,"title":"延时任务","slug":"延时任务","link":"#延时任务","children":[{"level":3,"title":"【中等】如何基于 Redis 实现延时任务？","slug":"【中等】如何基于-redis-实现延时任务","link":"#【中等】如何基于-redis-实现延时任务","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1757857692000,"updatedTime":1757857692000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":1}]},"readingTime":{"minutes":14.41,"words":4322},"filePathRelative":"12.数据库/05.KV数据库/Redis/Redis_面试_应用.md","localizedDate":"2020年7月13日","excerpt":"<h1> Redis 面试之应用篇</h1>\\n<h2> 缓存</h2>\\n<h3> 【中等】如何避免缓存雪崩、缓存击穿、缓存穿透？</h3>\\n<ul>\\n<li><strong>缓存击穿</strong>：指某个热点数据在缓存中失效，导致大量请求直接访问数据库。此时，由于瞬间的高并发，可能导致数据库崩溃。\\n<ul>\\n<li>使用互斥锁，确保同一时间只有一个请求可以去数据库查询并更新缓存。</li>\\n<li>热点数据永不过期。</li>\\n</ul>\\n</li>\\n<li><strong>缓存穿透</strong>：指查询一个不存在的数据，缓存中没有相应的记录，每次请求都会去数据库查询，造成数据库负担加重。\\n<ul>\\n<li>使用布隆过滤器，过滤掉不存在的请求，避免直接访问数据库。</li>\\n<li>对查询结果进行缓存，即使是不存在的数据，也可以缓存一个标识，以减少对数据库的请求。<br>\\n<img src=\\"https://raw.githubusercontent.com/dunwu/images/master/202506151115189.png\\" alt=\\"\\" loading=\\"lazy\\"></li>\\n</ul>\\n</li>\\n<li><strong>缓存雪崩</strong>：指多个缓存数据在同一时间过期，导致大量请求同时访问数据库，从而造成数据库瞬间负载激增。\\n<ul>\\n<li>采用随机过期时间策略，避免多个数据同时过期。</li>\\n<li>使用双缓存策略，将数据同时存储在两层缓存中，减少数据库直接请求。</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{e as data};
