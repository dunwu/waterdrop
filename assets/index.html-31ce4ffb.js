const a=JSON.parse('{"key":"v-7875abad","path":"/pages/404a13d7/","title":"Kafka 面试","lang":"zh-CN","frontmatter":{"icon":"openmoji:military-medal","title":"Kafka 面试","cover":"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/distributed/mq/kafka/kafka-event-system.png","date":"2025-02-03T11:15:43.000Z","permalink":"/pages/404a13d7/","category":["分布式","分布式通信","mq","kafka"],"tag":["Java","中间件","mq","kafka","面试"],"description":"Kafka 面试 Kafka 简介 【基础】什么是 Kafka? 要点 Apache Kafka 是一款开源的消息引擎系统，也是一个分布式流计算平台，此外，还可以作为数据存储。 img Kafka 的核心功能如下： 消息引擎 - Kafka 可以作为一个消息引擎系统。 流处理 - Kafka 可以作为一个分布式流处理平台。 存储 - Kafka 可以作为一个安全的分布式存储。 Kafka 的设计目标： 高性能 分区、分段、索引：基于分区机制提供并发处理能力。分段、索引提升了数据读写的查询效率。 顺序读写：使用顺序读写提升磁盘 IO 性能。 零拷贝：利用零拷贝技术，提升网络 I/O 效率。 页缓存：利用操作系统的 PageCache 来缓存数据（典型的利用空间换时间） 批量读写：批量读写可以有效提升网络 I/O 效率。 数据压缩：Kafka 支持数据压缩，可以有效提升网络 I/O 效率。 pull 模式：Kafka 架构基于 pull 模式，可以自主控制消费策略，提升传输效率。 高可用 持久化：Kafka 所有的消息都存储在磁盘，天然支持持久化。 副本机制：Kafka 的 Broker 集群支持副本机制，可以通过冗余，来保证其整体的可用性。 选举 Leader：Kafka 基于 ZooKeeper 支持选举 Leader，实现了故障转移能力。 伸缩性 分区：Kafka 的分区机制使得其具有良好的伸缩性。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/404a13d7/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"Kafka 面试"}],["meta",{"property":"og:description","content":"Kafka 面试 Kafka 简介 【基础】什么是 Kafka? 要点 Apache Kafka 是一款开源的消息引擎系统，也是一个分布式流计算平台，此外，还可以作为数据存储。 img Kafka 的核心功能如下： 消息引擎 - Kafka 可以作为一个消息引擎系统。 流处理 - Kafka 可以作为一个分布式流处理平台。 存储 - Kafka 可以作为一个安全的分布式存储。 Kafka 的设计目标： 高性能 分区、分段、索引：基于分区机制提供并发处理能力。分段、索引提升了数据读写的查询效率。 顺序读写：使用顺序读写提升磁盘 IO 性能。 零拷贝：利用零拷贝技术，提升网络 I/O 效率。 页缓存：利用操作系统的 PageCache 来缓存数据（典型的利用空间换时间） 批量读写：批量读写可以有效提升网络 I/O 效率。 数据压缩：Kafka 支持数据压缩，可以有效提升网络 I/O 效率。 pull 模式：Kafka 架构基于 pull 模式，可以自主控制消费策略，提升传输效率。 高可用 持久化：Kafka 所有的消息都存储在磁盘，天然支持持久化。 副本机制：Kafka 的 Broker 集群支持副本机制，可以通过冗余，来保证其整体的可用性。 选举 Leader：Kafka 基于 ZooKeeper 支持选举 Leader，实现了故障转移能力。 伸缩性 分区：Kafka 的分区机制使得其具有良好的伸缩性。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/distributed/mq/kafka/kafka-event-system.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-24T15:22:10.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"Kafka 面试"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"中间件"}],["meta",{"property":"article:tag","content":"mq"}],["meta",{"property":"article:tag","content":"kafka"}],["meta",{"property":"article:tag","content":"面试"}],["meta",{"property":"article:published_time","content":"2025-02-03T11:15:43.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-24T15:22:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Kafka 面试\\",\\"image\\":[\\"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/distributed/mq/kafka/kafka-event-system.png\\"],\\"datePublished\\":\\"2025-02-03T11:15:43.000Z\\",\\"dateModified\\":\\"2025-02-24T15:22:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"Kafka 简介","slug":"kafka-简介","link":"#kafka-简介","children":[{"level":3,"title":"【基础】什么是 Kafka?","slug":"【基础】什么是-kafka","link":"#【基础】什么是-kafka","children":[]},{"level":3,"title":"【基础】Kafka 有哪些核心术语？","slug":"【基础】kafka-有哪些核心术语","link":"#【基础】kafka-有哪些核心术语","children":[]}]},{"level":2,"title":"Kafka 存储","slug":"kafka-存储","link":"#kafka-存储","children":[{"level":3,"title":"【中级】Kafka 是如何存储数据的？","slug":"【中级】kafka-是如何存储数据的","link":"#【中级】kafka-是如何存储数据的","children":[]},{"level":3,"title":"【高级】Kafka 文件格式是怎样的？","slug":"【高级】kafka-文件格式是怎样的","link":"#【高级】kafka-文件格式是怎样的","children":[]},{"level":3,"title":"【高级】Kafka 如何检索数据？","slug":"【高级】kafka-如何检索数据","link":"#【高级】kafka-如何检索数据","children":[]},{"level":3,"title":"【高级】Kafka 如何清理数据？","slug":"【高级】kafka-如何清理数据","link":"#【高级】kafka-如何清理数据","children":[]}]},{"level":2,"title":"生产者","slug":"生产者","link":"#生产者","children":[{"level":3,"title":"【中级】Kafka 发送消息的工作流程是怎样的？","slug":"【中级】kafka-发送消息的工作流程是怎样的","link":"#【中级】kafka-发送消息的工作流程是怎样的","children":[]}]},{"level":2,"title":"消费者","slug":"消费者","link":"#消费者","children":[{"level":3,"title":"【基础】Kafka 为什么要支持消费者群组？","slug":"【基础】kafka-为什么要支持消费者群组","link":"#【基础】kafka-为什么要支持消费者群组","children":[]},{"level":3,"title":"【中级】如何消费 Kafka 消息？","slug":"【中级】如何消费-kafka-消息","link":"#【中级】如何消费-kafka-消息","children":[]}]},{"level":2,"title":"分区","slug":"分区","link":"#分区","children":[{"level":3,"title":"【中级】什么是分区？为什么要分区？","slug":"【中级】什么是分区-为什么要分区","link":"#【中级】什么是分区-为什么要分区","children":[]},{"level":3,"title":"【中级】Kafka 的分区策略是怎样的？","slug":"【中级】kafka-的分区策略是怎样的","link":"#【中级】kafka-的分区策略是怎样的","children":[]},{"level":3,"title":"【中级】如何自定义分区策略？","slug":"【中级】如何自定义分区策略","link":"#【中级】如何自定义分区策略","children":[]},{"level":3,"title":"【高级】Kafka 如何实现分区再均衡？","slug":"【高级】kafka-如何实现分区再均衡","link":"#【高级】kafka-如何实现分区再均衡","children":[]},{"level":3,"title":"【高级】分区再均衡存在什么问题？如何避免分区再均衡？","slug":"【高级】分区再均衡存在什么问题-如何避免分区再均衡","link":"#【高级】分区再均衡存在什么问题-如何避免分区再均衡","children":[]}]},{"level":2,"title":"复制","slug":"复制","link":"#复制","children":[{"level":3,"title":"【中级】Kafka 如何管理副本？","slug":"【中级】kafka-如何管理副本","link":"#【中级】kafka-如何管理副本","children":[]}]},{"level":2,"title":"可靠传输","slug":"可靠传输","link":"#可靠传输","children":[{"level":3,"title":"【高级】如何保证 Kafka 消息不丢失？","slug":"【高级】如何保证-kafka-消息不丢失","link":"#【高级】如何保证-kafka-消息不丢失","children":[]},{"level":3,"title":"【高级】如何保证 Kafka 消息不重复？","slug":"【高级】如何保证-kafka-消息不重复","link":"#【高级】如何保证-kafka-消息不重复","children":[]},{"level":3,"title":"【高级】如何保证 Kafka 消息有序？","slug":"【高级】如何保证-kafka-消息有序","link":"#【高级】如何保证-kafka-消息有序","children":[]},{"level":3,"title":"【高级】如何应对 Kafka 消息积压？","slug":"【高级】如何应对-kafka-消息积压","link":"#【高级】如何应对-kafka-消息积压","children":[]}]},{"level":2,"title":"事务","slug":"事务","link":"#事务","children":[{"level":3,"title":"【中级】Kafka 是否支持事务？如何支持事务？","slug":"【中级】kafka-是否支持事务-如何支持事务","link":"#【中级】kafka-是否支持事务-如何支持事务","children":[]}]},{"level":2,"title":"架构","slug":"架构","link":"#架构","children":[{"level":3,"title":"【高级】Kafka 的数据存储在磁盘上，为什么还能这么快？","slug":"【高级】kafka-的数据存储在磁盘上-为什么还能这么快","link":"#【高级】kafka-的数据存储在磁盘上-为什么还能这么快","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1738766333000,"updatedTime":1740410530000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":4}]},"readingTime":{"minutes":45.42,"words":13626},"filePathRelative":"15.分布式/21.分布式通信/02.MQ/01.Kafka/Kafka面试.md","localizedDate":"2025年2月3日","excerpt":"<h1> Kafka 面试</h1>\\n<h2> Kafka 简介</h2>\\n<h3> 【基础】什么是 Kafka?</h3>\\n<details class=\\"hint-container details\\"><summary>要点</summary>\\n<p><strong>Apache Kafka 是一款开源的消息引擎系统，也是一个分布式流计算平台，此外，还可以作为数据存储</strong>。</p>\\n<figure><img src=\\"https://raw.githubusercontent.com/dunwu/images/master/snap/202502070719480.gif\\" alt=\\"img\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>img</figcaption></figure>\\n<p>Kafka 的核心功能如下：</p>\\n<ul>\\n<li><strong>消息引擎</strong> - Kafka 可以作为一个消息引擎系统。</li>\\n<li><strong>流处理</strong> - Kafka 可以作为一个分布式流处理平台。</li>\\n<li><strong>存储</strong> - Kafka 可以作为一个安全的分布式存储。</li>\\n</ul>\\n<p>Kafka 的设计目标：</p>\\n<ul>\\n<li><strong>高性能</strong>\\n<ul>\\n<li><strong>分区、分段、索引</strong>：基于分区机制提供并发处理能力。分段、索引提升了数据读写的查询效率。</li>\\n<li><strong>顺序读写</strong>：使用顺序读写提升磁盘 IO 性能。</li>\\n<li><strong>零拷贝</strong>：利用零拷贝技术，提升网络 I/O 效率。</li>\\n<li><strong>页缓存</strong>：利用操作系统的 PageCache 来缓存数据（典型的利用空间换时间）</li>\\n<li><strong>批量读写</strong>：批量读写可以有效提升网络 I/O 效率。</li>\\n<li><strong>数据压缩</strong>：Kafka 支持数据压缩，可以有效提升网络 I/O 效率。</li>\\n<li><strong>pull 模式</strong>：Kafka 架构基于 pull 模式，可以自主控制消费策略，提升传输效率。</li>\\n</ul>\\n</li>\\n<li><strong>高可用</strong>\\n<ul>\\n<li><strong>持久化</strong>：Kafka 所有的消息都存储在磁盘，天然支持持久化。</li>\\n<li><strong>副本机制</strong>：Kafka 的 Broker 集群支持副本机制，可以通过冗余，来保证其整体的可用性。</li>\\n<li><strong>选举 Leader</strong>：Kafka 基于 ZooKeeper 支持选举 Leader，实现了故障转移能力。</li>\\n</ul>\\n</li>\\n<li><strong>伸缩性</strong>\\n<ul>\\n<li><strong>分区</strong>：Kafka 的分区机制使得其具有良好的伸缩性。</li>\\n</ul>\\n</li>\\n</ul>\\n</details>","autoDesc":true}');export{a as data};
