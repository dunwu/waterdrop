import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as n,o as l,c as o,a as e,b as a,d as i,e as r}from"./app-af13b01d.js";const h={},d=e("h1",{id:"分布式存储面试",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#分布式存储面试","aria-hidden":"true"},"#"),a(" 分布式存储面试")],-1),c=e("h2",{id:"缓存",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#缓存","aria-hidden":"true"},"#"),a(" 缓存")],-1),u=e("p",null,"扩展：",-1),g={href:"https://item.jd.com/11322972.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://link.juejin.im/?target=https%3A%2F%2Fjuejin.im%2Fpost%2F5b7593496fb9a009b62904fa",target:"_blank",rel:"noopener noreferrer"},p={href:"https://link.juejin.im/?target=https%3A%2F%2Fjuejin.im%2Fpost%2F5b849878e51d4538c77a974a",target:"_blank",rel:"noopener noreferrer"},f={href:"https://www.jianshu.com/p/73ce0ef820f9",target:"_blank",rel:"noopener noreferrer"},_={href:"https://tech.meituan.com/2017/03/17/cache-about.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.cnblogs.com/rjzheng/p/9041659.html",target:"_blank",rel:"noopener noreferrer"},y={href:"https://zhuanlan.zhihu.com/p/102293437",target:"_blank",rel:"noopener noreferrer"},x={href:"https://segmentfault.com/a/1190000021716418",target:"_blank",rel:"noopener noreferrer"},C={href:"https://zhuanlan.zhihu.com/p/60950750",target:"_blank",rel:"noopener noreferrer"},F=r(`<h3 id="【基础】什么是缓存-为什么需要缓存" tabindex="-1"><a class="header-anchor" href="#【基础】什么是缓存-为什么需要缓存" aria-hidden="true">#</a> 【基础】什么是缓存？为什么需要缓存？</h3><details class="hint-container details"><summary>要点</summary><p><strong>缓存就是数据交换的缓冲区，用于将频繁访问的数据暂存在访问速度快的存储介质</strong>。</p><p>缓存的本质是一种利用<strong>空间换时间</strong>的设计：牺牲一定的数据实时性，使得访问<strong>更快</strong>、<strong>更近</strong>：</p><ul><li>将数据存储到读取速度<strong>更快</strong>的存储（设备）；</li><li>将数据存储到<strong>离应用最近</strong>的位置；</li><li>将数据存储到<strong>离用户最近</strong>的位置。</li></ul><p>缓存是用于存储数据的硬件或软件的组成部分，以使得后续更快访问相应的数据。缓存中的数据可能是提前计算好的结果、数据的副本等。典型的应用场景：有 cpu cache, 磁盘 cache 等。本文中提及到缓存主要是指互联网应用中所使用的缓存组件。</p><p><strong>缓存命中率</strong>是缓存的重要度量指标，命中率越高越好。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>缓存命中率 = 从缓存中读取次数 / 总读取次数
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><h3 id="【基础】何时需要缓存" tabindex="-1"><a class="header-anchor" href="#【基础】何时需要缓存" aria-hidden="true">#</a> 【基础】何时需要缓存？</h3><details class="hint-container details"><summary>要点</summary><p>引入缓存，会增加系统的复杂度，并牺牲一定的数据实时性。所以，引入缓存前，需要先权衡是否值得，考量点如下：</p><ul><li><strong>CPU 开销</strong> - 如果应用某个计算需要消耗大量 CPU，可以考虑缓存其计算结果。典型场景：复杂的、频繁调用的正则计算；分布式计算中间状态等。</li><li><strong>IO 开销</strong> - 如果数据库连接池比较繁忙，可以考虑缓存其查询结果。</li></ul><p>在数据层引入缓存，有以下几个好处：</p><ul><li>提升数据读取速度。</li><li>提升系统扩展能力，通过扩展缓存，提升系统承载能力。</li><li>降低存储成本，Cache+DB 的方式可以承担原有需要多台 DB 才能承担的请求量，节省机器成本。</li></ul></details><h3 id="【中级】缓存有哪些分类" tabindex="-1"><a class="header-anchor" href="#【中级】缓存有哪些分类" aria-hidden="true">#</a> 【中级】缓存有哪些分类？</h3><details class="hint-container details"><summary>要点</summary><p>缓存从部署角度，可以分为客户端缓存和服务端缓存。</p><p><strong>客户端缓存</strong></p><ul><li><strong>Http 缓存</strong>：HTTP/1.1 中的 <code>Cache-Control</code>、HTTP/1 中的 <code>Expires</code></li><li><strong>浏览器缓存</strong>：HTML5 提供的 SessionStorage 和 LocalStorage、Cookie</li><li><strong>APP 缓存</strong><ul><li>Android</li><li>IOS</li></ul></li></ul><p><strong>服务端缓存</strong></p><ul><li><strong>CDN 缓存</strong> - CDN 将数据缓存到离用户物理距离最近的服务器，使得用户可以就近获取请求内容。CDN 一般缓存静态资源文件（页面，脚本，图片，视频，文件等）。</li><li><strong>反向代理缓存</strong> - 反向代理（Reverse Proxy）方式是指以代理服务器来接受网络连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给客户端，此时代理服务器对外就表现为一个反向代理服务器。反向代理缓存一般针对的是静态资源，而将动态资源请求转发到应用服务器处理。</li><li><strong>数据库缓存</strong> - 数据库（如 Mysql）自身一般也有缓存，但因为命中率和更新频率问题，不推荐使用。</li><li><strong>进程内缓存</strong> - 缓存应用字典等常用数据。</li><li><strong>分布式缓存</strong> - 缓存数据库中的热点数据。</li></ul><blockquote><p>其中，CDN 缓存、反向代理缓存、数据库缓存一般由专职人员维护（运维、DBA）。</p><p>后端开发一般聚焦于进程内缓存、分布式缓存。</p></blockquote></details><h3 id="【中级】cdn-缓存是如何工作的" tabindex="-1"><a class="header-anchor" href="#【中级】cdn-缓存是如何工作的" aria-hidden="true">#</a> 【中级】CDN 缓存是如何工作的？</h3><details class="hint-container details"><summary>要点</summary><p><strong>CDN 将数据缓存到离用户物理距离最近的服务器，使得用户可以就近获取请求内容。CDN 一般缓存静态资源文件（页面，脚本，图片，视频，文件等）</strong>。</p><p>国内网络异常复杂，跨运营商的网络访问会很慢。为了解决跨运营商或各地用户访问问题，可以在重要的城市，部署 CDN 应用。使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/1559138689425.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="cdn-缓存原理" tabindex="-1"><a class="header-anchor" href="#cdn-缓存原理" aria-hidden="true">#</a> CDN 缓存原理</h4><p>CDN 的基本原理是广泛采用各种缓存服务器，将这些缓存服务器分布到用户访问相对集中的地区或网络中，在用户访问网站时，利用全局负载技术将用户的访问指向距离最近的工作正常的缓存服务器上，由缓存服务器直接响应用户请求。</p><p>（1）未部署 CDN 应用前的网络路径：</p><ul><li>请求：本机网络（局域网）=&gt; 运营商网络 =&gt; 应用服务器机房</li><li>响应：应用服务器机房 =&gt; 运营商网络 =&gt; 本机网络（局域网）</li></ul><p>在不考虑复杂网络的情况下，从请求到响应需要经过 3 个节点，6 个步骤完成一次用户访问操作。</p><p>（2）部署 CDN 应用后网络路径：</p><ul><li>请求：本机网络（局域网） =&gt; 运营商网络</li><li>响应：运营商网络 =&gt; 本机网络（局域网）</li></ul><p>在不考虑复杂网络的情况下，从请求到响应需要经过 2 个节点，2 个步骤完成一次用户访问操作。</p><p>与不部署 CDN 服务相比，减少了 1 个节点，4 个步骤的访问。极大的提高了系统的响应速度。</p><h4 id="cdn-特点" tabindex="-1"><a class="header-anchor" href="#cdn-特点" aria-hidden="true">#</a> CDN 特点</h4><p><strong>优点</strong></p><ul><li><strong>本地 Cache 加速</strong> - 提升访问速度，尤其含有大量图片和静态页面站点；</li><li><strong>实现跨运营商的网络加速</strong> - 消除了不同运营商之间互联的瓶颈造成的影响，实现了跨运营商的网络加速，保证不同网络中的用户都能得到良好的访问质量；</li><li><strong>远程加速</strong> - 远程访问用户根据 DNS 负载均衡技术智能自动选择 Cache 服务器，选择最快的 Cache 服务器，加快远程访问的速度；</li><li><strong>带宽优化</strong> - 自动生成服务器的远程 Mirror（镜像）cache 服务器，远程用户访问时从 cache 服务器上读取数据，减少远程访问的带宽、分担网络流量、减轻原站点 WEB 服务器负载等功能。</li><li><strong>集群抗攻击</strong> - 广泛分布的 CDN 节点加上节点之间的智能冗余机制，可以有效地预防黑客入侵以及降低各种 D.D.o.S 攻击对网站的影响，同时保证较好的服务质量。</li></ul><p><strong>缺点</strong></p><ul><li><strong>不适宜缓存动态资源</strong><ul><li>解决方案：主要缓存静态资源，动态资源建立多级缓存或准实时同步；</li></ul></li><li><strong>存在数据的一致性问题</strong><ul><li>解决方案（主要是在性能和数据一致性二者间寻找一个平衡）</li><li>设置缓存失效时间（1 个小时，过期后同步数据）。</li><li>针对资源设置版本号。</li></ul></li></ul></details><h3 id="【中级】反向代理缓存是如何工作的" tabindex="-1"><a class="header-anchor" href="#【中级】反向代理缓存是如何工作的" aria-hidden="true">#</a> 【中级】反向代理缓存是如何工作的？</h3><details class="hint-container details"><summary>要点</summary><p><strong>反向代理（Reverse Proxy）方式是指以代理服务器来接受网络连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给客户端，此时代理服务器对外就表现为一个反向代理服务器。</strong></p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/web/nginx/reverse-proxy.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>反向代理位于应用服务器同一网络，处理所有对 WEB 服务器的请求。</p><p>反向代理缓存的原理：</p><ul><li>如果用户请求的页面在代理服务器上有缓存的话，代理服务器直接将缓存内容发送给用户。</li><li>如果没有缓存则先向 WEB 服务器发出请求，取回数据，本地缓存后再发送给用户。</li></ul><p>这种方式通过降低向 WEB 服务器的请求数，从而降低了 WEB 服务器的负载。</p><p><strong>反向代理缓存一般针对的是静态资源，而将动态资源请求转发到应用服务器处理</strong>。常用的缓存应用服务器有 Varnish，Ngnix，Squid。</p></details><h3 id="【中级】缓存有哪些淘汰算法" tabindex="-1"><a class="header-anchor" href="#【中级】缓存有哪些淘汰算法" aria-hidden="true">#</a> 【中级】缓存有哪些淘汰算法？</h3>`,11),w=e("p",null,"扩展：",-1),k={href:"https://www.youtube.com/watch?v=7lxAfszjy68&list=PLBlnK6fEyqRjdT1xkkBZSXKwFKqQoYhwy&index=23",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.youtube.com/watch?v=_Hh-NcdbHCY&list=PLBlnK6fEyqRjdT1xkkBZSXKwFKqQoYhwy&index=25",target:"_blank",rel:"noopener noreferrer"},N=r('<details class="hint-container details"><summary>要点</summary><p>缓存一般存于访问速度较快的存储介质，快也就意味着资源昂贵并且有限。正所谓，好钢要用在刀刃上。因此，缓存要合理利用，需要设定一些机制，将一些访问频率偏低或过期的数据淘汰。</p><p>淘汰缓存首先要做的是，确定什么时候触发淘汰缓存，一般有以下几个思路：</p><ul><li><strong>基于空间</strong> - 设置缓存空间大小。</li><li><strong>基于容量</strong> - 设置缓存存储记录数。</li><li><strong>基于时间</strong><ul><li><strong>TTL（Time To Live，即存活期）</strong> - 缓存数据从创建到过期的时间。</li><li><strong>TTI（Time To Idle，即空闲期）</strong> - 缓存数据多久没被访问的时间。</li></ul></li></ul><p>接下来，就要确定如何淘汰缓存，常见的缓存淘汰算法有以下几个：</p><ul><li><strong>FIFO（First In First Out，先进先出）</strong> - 淘汰最先进入的缓存数据。缓存的行为就像一个队列。 <ul><li>优点：这种方案非常简单</li><li>缺点：可能会导致<strong>缓存命中率低</strong>。因为，进入缓存的先后顺序和访问频率无关，这种算法可能会将访问频率高的数据给淘汰。</li></ul></li><li><strong>LIFO（Last In First Out，后进先出）</strong> - 淘汰最后进入的缓存数据。缓存的行为就像一个栈。 <ul><li>优点：这种方案非常简单</li><li>缺点：和 FIFO 一样，也可能会导致<strong>缓存命中率低</strong>。因为，进入缓存的先后顺序和访问频率无关，这种算法可能会将访问频率高的数据给淘汰。</li></ul></li><li><strong>MRU（Most Recently Used，最近最多使用）</strong> - 淘汰最近最多使用缓存。 <ul><li>优点：适用于一些特殊场景，例如数据访问具有较强的局部性。举个例子，用户访问一个信息流页面，已经看过的内容，他肯定不想再看到，此时就可以使用 MRU。</li><li>缺点：某些情况下，可能会导致频繁的淘汰缓存，从而降低缓存命中率</li></ul></li><li><strong>LRU（Least Recently Used，最近最少使用）</strong> - 淘汰最近最少使用缓存。 <ul><li>优点：避免了 FIFO <strong>缓存命中率低</strong>的问题。</li><li>缺点：存在<strong>临界区</strong>问题。假设，缓存只保留 1 分钟以内的热点数据。如果有个数据在 1 个小时的前 59 分钟访问了 1 万次（可见这是个热点数据），最后一分钟没有任何访问；而其他数据有被访问，就会导致这个热点数据被淘汰。</li></ul></li><li><strong>LFU（Less Frequently Used，最近最少频率使用）</strong> - 该算法对 LRU 做了进一步优化：利用额外的空间记录每个数据的使用频率，然后淘汰使用频率最低的数据，如果所有数据使用频率相同，可以用 FIFO 淘汰最早的缓存数据。 <ul><li>优点：解决了 LRU 的<strong>临界区</strong>问题。</li><li>缺点：记录使用频率，会产生额外的空间开销</li></ul></li></ul></details><h3 id="【高级】缓存更新有哪些策略" tabindex="-1"><a class="header-anchor" href="#【高级】缓存更新有哪些策略" aria-hidden="true">#</a> 【高级】缓存更新有哪些策略？</h3>',2),T={class:"hint-container details"},D=e("summary",null,"要点",-1),L={href:"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F3smq5msfo852zeoej5iz.jpg",target:"_blank",rel:"noopener noreferrer"},R=e("img",{src:"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F3smq5msfo852zeoej5iz.jpg",alt:"top 5 caching strategies for System design interviews",tabindex:"0",loading:"lazy"},null,-1),j=e("figcaption",null,"top 5 caching strategies for System design interviews",-1),P=r('<p>一般来说，系统如果不是严格要求缓存和数据库保持一致性的话，尽量不要将<strong>读请求和写请求串行化</strong>。串行化可以保证一定不会出现数据不一致的情况，但是它会导致系统的吞吐量大幅度下降。缓存更新的常见策略有以下几种：</p><ul><li>Cache Aside</li><li>Wirte Through</li><li>Read Though</li><li>Wirte Behind</li></ul><p>需要注意的是：以上几种缓存更新策略，都无法保证数据强一致。如果一定要保证强一致性，可以通过两阶段提交（2PC）或 Paxos 协议来实现。但是 2PC 太慢，而 Paxos 太复杂，所以如果不是非常重要的数据，不建议使用强一致性方案。</p><h4 id="cache-aside" tabindex="-1"><a class="header-anchor" href="#cache-aside" aria-hidden="true">#</a> Cache Aside</h4><h4 id="wirte-through" tabindex="-1"><a class="header-anchor" href="#wirte-through" aria-hidden="true">#</a> Wirte Through</h4><h4 id="read-though" tabindex="-1"><a class="header-anchor" href="#read-though" aria-hidden="true">#</a> Read Though</h4><h4 id="wirte-behind" tabindex="-1"><a class="header-anchor" href="#wirte-behind" aria-hidden="true">#</a> Wirte Behind</h4>',7),B=r('<h3 id="【高级】多级缓存架构如何设计" tabindex="-1"><a class="header-anchor" href="#【高级】多级缓存架构如何设计" aria-hidden="true">#</a> 【高级】多级缓存架构如何设计？</h3><details class="hint-container details"><summary>要点</summary></details><h3 id="【中级】什么是缓存穿透-如何应对" tabindex="-1"><a class="header-anchor" href="#【中级】什么是缓存穿透-如何应对" aria-hidden="true">#</a> 【中级】什么是缓存穿透？如何应对？</h3><details class="hint-container details"><summary>要点</summary></details><h3 id="【中级】什么是缓存击穿-如何应对" tabindex="-1"><a class="header-anchor" href="#【中级】什么是缓存击穿-如何应对" aria-hidden="true">#</a> 【中级】什么是缓存击穿？如何应对？</h3><details class="hint-container details"><summary>要点</summary></details><h3 id="【中级】什么是缓存雪崩-如何应对" tabindex="-1"><a class="header-anchor" href="#【中级】什么是缓存雪崩-如何应对" aria-hidden="true">#</a> 【中级】什么是缓存雪崩？如何应对？</h3><details class="hint-container details"><summary>要点</summary></details><h3 id="【中级】什么是缓存预热-如何预热" tabindex="-1"><a class="header-anchor" href="#【中级】什么是缓存预热-如何预热" aria-hidden="true">#</a> 【中级】什么是缓存预热？如何预热？</h3><details class="hint-container details"><summary>要点</summary></details><h2 id="读写分离" tabindex="-1"><a class="header-anchor" href="#读写分离" aria-hidden="true">#</a> 读写分离</h2><h3 id="【基础】什么是读写分离-为什么需要读写分离" tabindex="-1"><a class="header-anchor" href="#【基础】什么是读写分离-为什么需要读写分离" aria-hidden="true">#</a> 【基础】什么是读写分离？为什么需要读写分离？</h3><details class="hint-container details"><summary>要点</summary></details><h3 id="【中级】如何实现读写分离" tabindex="-1"><a class="header-anchor" href="#【中级】如何实现读写分离" aria-hidden="true">#</a> 【中级】如何实现读写分离？</h3><details class="hint-container details"><summary>要点</summary></details><h2 id="分库分表" tabindex="-1"><a class="header-anchor" href="#分库分表" aria-hidden="true">#</a> 分库分表</h2><h3 id="【基础】什么是分库分表-为什么需要分库分表" tabindex="-1"><a class="header-anchor" href="#【基础】什么是分库分表-为什么需要分库分表" aria-hidden="true">#</a> 【基础】什么是分库分表？为什么需要分库分表？</h3><details class="hint-container details"><summary>要点</summary></details><h3 id="【高级】如何实现分库分表" tabindex="-1"><a class="header-anchor" href="#【高级】如何实现分库分表" aria-hidden="true">#</a> 【高级】如何实现分库分表？</h3><details class="hint-container details"><summary>要点</summary></details><h3 id="【高级】分库分表后-如何应对扩容和迁移" tabindex="-1"><a class="header-anchor" href="#【高级】分库分表后-如何应对扩容和迁移" aria-hidden="true">#</a> 【高级】分库分表后，如何应对扩容和迁移？</h3><details class="hint-container details"><summary>要点</summary></details>',22);function z(I,U){const t=n("ExternalLinkIcon");return l(),o("div",null,[d,c,e("blockquote",null,[u,e("ul",null,[e("li",null,[e("a",g,[a("《大型网站技术架构：核心原理与案例分析》"),i(t)])]),e("li",null,[e("a",m,[a("你应该知道的缓存进化史"),i(t)])]),e("li",null,[e("a",p,[a("如何优雅的设计和使用缓存？"),i(t)])]),e("li",null,[e("a",f,[a("理解分布式系统中的缓存架构（上）"),i(t)])]),e("li",null,[e("a",_,[a("缓存那些事"),i(t)])]),e("li",null,[e("a",b,[a("分布式之数据库和缓存双写一致性方案解析 "),i(t)])]),e("li",null,[e("a",y,[a("Cache 的基本原理"),i(t)])]),e("li",null,[e("a",x,[a("5 分钟看懂系列：HTTP 缓存机制详解"),i(t)])]),e("li",null,[e("a",C,[a("浏览器缓存看这一篇就够了"),i(t)])])])]),F,e("blockquote",null,[w,e("p",null,[e("a",k,[a("Cache Replacement Policies - RR, FIFO, LIFO, & Optimal"),i(t)])]),e("p",null,[e("a",v,[a("Cache Replacement Policies - MRU, LRU, Pseudo-LRU, & LFU"),i(t)])])]),N,e("details",T,[D,e("figure",null,[e("a",L,[R,i(t)]),j]),P]),B])}const S=s(h,[["render",z],["__file","index.html.vue"]]);export{S as default};
