const e=JSON.parse('{"key":"v-69db3f52","path":"/pages/4280e99c/","title":"Docker 快速入门","lang":"zh-CN","frontmatter":{"icon":"devicon:docker-wordmark","title":"Docker 快速入门","date":"2018-03-19T15:17:00.000Z","order":1,"permalink":"/pages/4280e99c/","category":["DevOps","工具","Docker"],"tag":["DevOps","Docker"],"description":"Docker 快速入门 一、Docker 的简介 什么是 Docker Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。 它是目前最流行的 Linux 容器解决方案。 Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。 总体来说，Docker 的接口相当简单，用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/4280e99c/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"Docker 快速入门"}],["meta",{"property":"og:description","content":"Docker 快速入门 一、Docker 的简介 什么是 Docker Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。 它是目前最流行的 Linux 容器解决方案。 Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。 总体来说，Docker 的接口相当简单，用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-24T23:52:19.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"DevOps"}],["meta",{"property":"article:tag","content":"Docker"}],["meta",{"property":"article:published_time","content":"2018-03-19T15:17:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-24T23:52:19.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker 快速入门\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2018-03-19T15:17:00.000Z\\",\\"dateModified\\":\\"2025-09-24T23:52:19.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"一、Docker 的简介","slug":"一、docker-的简介","link":"#一、docker-的简介","children":[{"level":3,"title":"什么是 Docker","slug":"什么是-docker","link":"#什么是-docker","children":[]},{"level":3,"title":"为什么需要 Docker","slug":"为什么需要-docker","link":"#为什么需要-docker","children":[]},{"level":3,"title":"Docker 的主要用途","slug":"docker-的主要用途","link":"#docker-的主要用途","children":[]},{"level":3,"title":"Docker 的核心概念","slug":"docker-的核心概念","link":"#docker-的核心概念","children":[]}]},{"level":2,"title":"二、Docker 的运维","slug":"二、docker-的运维","link":"#二、docker-的运维","children":[]},{"level":2,"title":"三、Hello World 实例","slug":"三、hello-world-实例","link":"#三、hello-world-实例","children":[]},{"level":2,"title":"四、制作 Docker 容器","slug":"四、制作-docker-容器","link":"#四、制作-docker-容器","children":[{"level":3,"title":"编写 Dockerfile 文件","slug":"编写-dockerfile-文件","link":"#编写-dockerfile-文件","children":[]},{"level":3,"title":"创建 image 文件","slug":"创建-image-文件","link":"#创建-image-文件","children":[]},{"level":3,"title":"生成容器","slug":"生成容器","link":"#生成容器","children":[]},{"level":3,"title":"CMD 命令","slug":"cmd-命令","link":"#cmd-命令","children":[]},{"level":3,"title":"发布 image 文件","slug":"发布-image-文件","link":"#发布-image-文件","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1758757939000,"updatedTime":1758757939000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":1}]},"readingTime":{"minutes":16.61,"words":4984},"filePathRelative":"04.DevOps/工具/Docker/Docker_快速入门.md","localizedDate":"2018年3月19日","excerpt":"<h1> Docker 快速入门</h1>\\n<h2> 一、Docker 的简介</h2>\\n<h3> 什么是 Docker</h3>\\n<blockquote>\\n<p><strong>Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。</strong></p>\\n</blockquote>\\n<p>它是目前最流行的 Linux 容器解决方案。</p>\\n<p>Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。</p>\\n<p>总体来说，Docker 的接口相当简单，用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。</p>","autoDesc":true}');export{e as data};
