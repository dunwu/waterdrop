import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as r,c as l,a as e,b as n,d as t,e as i}from"./app-7f6fb44d.js";const c={},d=i('<h1 id="如何优雅的玩转-git" tabindex="-1"><a class="header-anchor" href="#如何优雅的玩转-git" aria-hidden="true">#</a> 如何优雅的玩转 Git</h1><h2 id="git-简介" tabindex="-1"><a class="header-anchor" href="#git-简介" aria-hidden="true">#</a> Git 简介</h2><h3 id="git-是什么" tabindex="-1"><a class="header-anchor" href="#git-是什么" aria-hidden="true">#</a> Git 是什么</h3><p>Git 是一个开源的分布式版本控制系统。</p><p>Git 和其它版本控制系统（包括 Subversion 和近似工具）的主要差别在于 Git 对待数据的方式。 从概念上来说，其它大部分系统以文件变更列表的方式存储信息，而 Git 是把数据看作是对小型文件系统的一系列快照。</p><h3 id="什么是版本控制" tabindex="-1"><a class="header-anchor" href="#什么是版本控制" aria-hidden="true">#</a> 什么是版本控制</h3><p>版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。</p><h4 id="集中化的版本控制系统" tabindex="-1"><a class="header-anchor" href="#集中化的版本控制系统" aria-hidden="true">#</a> 集中化的版本控制系统</h4><p>介绍分布式版本控制系统前，有必要先了解一下传统的集中式版本控制系统。</p><p><strong>集中化的版本控制系统</strong>，诸如 CVS，Subversion 等，都有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。</p><p>这么做最显而易见的缺点是中央服务器的单点故障。如果宕机一小时，那么在这一小时内，谁都无法提交更新，也就无法协同工作。要是中央服务器的磁盘发生故障，碰巧没做备份，或者备份不够及时，就会有丢失数据的风险。最坏的情况是彻底丢失整个项目的所有历史更改记录。</p><figure><img src="https://git-scm.com/figures/18333fig0102-tn.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="分布式版本控制系统" tabindex="-1"><a class="header-anchor" href="#分布式版本控制系统" aria-hidden="true">#</a> 分布式版本控制系统</h4><p><strong>分布式版本控制系统</strong>的客户端并不只提取最新版本的文件快照，而是把代码仓库完整地镜像下来。这么一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复。因为每一次的提取操作，实际上都是一次对代码仓库的完整备份。</p><figure><img src="https://git-scm.com/figures/18333fig0103-tn.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="为什么使用-git" tabindex="-1"><a class="header-anchor" href="#为什么使用-git" aria-hidden="true">#</a> 为什么使用 Git</h3><p>Git 是分布式的。这是 Git 和其它非分布式的版本控制系统（例如 svn，cvs 等），最核心的区别。分布式带来以下好处：</p><ul><li><strong>工作时不需要联网</strong> - 首先，分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？比方说你在自己电脑上改了文件 A，你的同事也在他的电脑上改了文件 A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</li><li><strong>更加安全</strong><ul><li>集中式版本控制系统，一旦中央服务器出了问题，所有人都无法工作。</li><li>分布式版本控制系统，每个人电脑中都有完整的版本库，所以某人的机器挂了，并不影响其它人。</li></ul></li></ul><h3 id="git-的工作原理" tabindex="-1"><a class="header-anchor" href="#git-的工作原理" aria-hidden="true">#</a> Git 的工作原理</h3><p>个人认为，对于 Git 这个版本工具，再不了解原理的情况下，直接去学习命令行，可能会一头雾水。所以，本文特意将原理放在命令使用章节之前讲解。</p><h4 id="版本库" tabindex="-1"><a class="header-anchor" href="#版本库" aria-hidden="true">#</a> 版本库</h4><p>当你一个项目到本地或创建一个 git 项目，项目目录下会有一个隐藏的 <code>.git</code> 子目录。这个目录是 git 用来跟踪管理版本库的，如果不熟悉其工作机制，千万不要手动修改。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20210419093855.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li><code>hooks</code> 目录：包含客户端或服务端的钩子脚本（hook scripts）</li><li><code>info</code> 目录：包含一个全局性排除（global exclude）文件， 用以放置那些不希望被记录在 <code>.gitignore</code> 文件中的忽略模式（ignored patterns）。</li><li><code>objects</code> 目录：存储所有数据内容。</li><li><code>refs</code> 目录：存储指向数据（分支、远程仓库和标签等）的提交对象的指针</li><li><code>HEAD</code> 文件：指向目前被检出的分支。</li><li><code>index</code> 文件保存暂存区信息。</li><li><code>config</code> 文件：包含项目特有的配置选项。</li><li><code>description</code> 文件：<code>description</code> 文件仅供 GitWeb 程序使用，我们无需关心。</li></ul><h4 id="哈希值" tabindex="-1"><a class="header-anchor" href="#哈希值" aria-hidden="true">#</a> 哈希值</h4><p>Git 中所有数据在存储前都计算校验和，然后以校验和来引用。 这意味着不可能在 Git 不知情时更改任何文件内容或目录内容。 这个功能构筑在 Git 底层，是 Git 的关键组件。 若你在传送过程中丢失信息或损坏文件，Git 就能发现。</p><p>Git 计算校验和的使用 SHA-1 哈希算法。 这是一个由 40 个十六进制字符（0-9 和 a-f）组成字符串，基于 Git 中文件的内容或目录结构计算出来。 SHA-1 哈希值看起来是这样：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>24b9da6552252987aa493b52f8696cd6d3b00373\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Git 中使用这种哈希值的情况很多，你将经常看到这种哈希值。 实际上，Git 数据库中保存的信息都是以文件内容的哈希值来索引，而不是文件名。</p><h4 id="文件状态" tabindex="-1"><a class="header-anchor" href="#文件状态" aria-hidden="true">#</a> 文件状态</h4><p>在 GIt 中，你的文件可能会处于三种状态之一：</p><ul><li><strong>已修改（modified）</strong> - 已修改表示修改了文件，但还没保存到数据库中。</li><li><strong>已暂存（staged）</strong> - 已暂存表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</li><li><strong>已提交（committed）</strong> - 已提交表示数据已经安全的保存在本地数据库中。</li></ul><h4 id="工作区域" tabindex="-1"><a class="header-anchor" href="#工作区域" aria-hidden="true">#</a> 工作区域</h4><p>与文件状态对应的，不同状态的文件在 Git 中处于不同的工作区域。</p><ul><li><strong>工作区（working）</strong> - 当你 <code>git clone</code> 一个项目到本地，相当于在本地克隆了项目的一个副本。工作区是对项目的某个版本独立提取出来的内容。 这些从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。</li><li><strong>暂存区（staging）</strong> - 暂存区是一个文件，保存了下次将提交的文件列表信息，一般在 Git 仓库目录中。 有时候也被称作`‘索引’&#39;，不过一般说法还是叫暂存区。</li><li><strong>本地仓库（local）</strong> - 提交更新，找到暂存区域的文件，将快照永久性存储到 Git 本地仓库。</li><li><strong>远程仓库（remote）</strong> - 以上几个工作区都是在本地。为了让别人可以看到你的修改，你需要将你的更新推送到远程仓库。同理，如果你想同步别人的修改，你需要从远程仓库拉取更新。</li></ul><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/web/git/git-theory.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="分支管理" tabindex="-1"><a class="header-anchor" href="#分支管理" aria-hidden="true">#</a> 分支管理</h2><h3 id="git-flow" tabindex="-1"><a class="header-anchor" href="#git-flow" aria-hidden="true">#</a> Git Flow</h3><p>Git Flow 应该是目前流传最广的 Git 分支管理策略。Git Flow 围绕的核心点是版本发布（release），它适用于迭代版本较长的项目。</p><blockquote><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20210419110634.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure></blockquote>',40),p={href:"http://www.cnblogs.com/cnblogsfans/p/5075073.html",target:"_blank",rel:"noopener noreferrer"},u=i('<p>Git Flow 常用分支：</p><ul><li><strong><code>master</code></strong> - 主线分支</li><li><strong><code>develop</code></strong> - 开发分支</li><li><strong><code>feature</code></strong> - 特性分支</li><li><strong><code>release</code></strong> - 发布分支</li><li><strong><code>hotfix</code></strong> - 问题修复分支</li></ul><p>Git Flow 工作流程</p><h4 id="_2-1-主干分支" tabindex="-1"><a class="header-anchor" href="#_2-1-主干分支" aria-hidden="true">#</a> 2.1. 主干分支</h4><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20210419113532.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>主干分支有两个，它们是伴随着项目生命周期长期存在的分支。</p><ul><li><code>master</code> - 这个分支对应发布到生产环境的代码。这个分支<strong>只允许从其他分支合入代码</strong>，不能在这个分支直接修改。所有在 master 分支上的 Commit 都应该打 Tag。</li><li><code>develop</code> - 这个分支包含所有要发布到下一个 release 的代码，这个分支<strong>主要是从其他分支合入代码</strong>，比如 feature 分支。</li></ul><h4 id="_2-2-feature-分支" tabindex="-1"><a class="header-anchor" href="#_2-2-feature-分支" aria-hidden="true">#</a> 2.2. <code>feature</code> 分支</h4><p>这个分支主要是用来开发一个新的功能，一旦开发完成，我们合并回 develop 分支进入下一个 release。feature 分支开发结束后，必须合并回 develop 分支, 合并完分支后一般会删点这个 feature 分支，但是我们也可以保留。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20210419114042.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="_2-3-release-分支" tabindex="-1"><a class="header-anchor" href="#_2-3-release-分支" aria-hidden="true">#</a> 2.3. <strong><code>release</code> 分支</strong></h4><p>release 分支基于 develop 分支创建，创建后，我们可以在这个 release 分支上进行测试，修复 Bug 等工作。同时，其它开发人员可以基于它开发新的 feature (记住：一旦创建了 release 分支之后不要从 develop 分支上合并新的改动到 release 分支)。</p><p>发布 release 分支时，合并 release 到 master 和 develop， 同时在 master 分支上打个 Tag 记住 release 版本号，然后可以删除 release 分支了。</p><h4 id="_2-4-hotfix-分支" tabindex="-1"><a class="header-anchor" href="#_2-4-hotfix-分支" aria-hidden="true">#</a> 2.4. <code>hotfix</code> 分支</h4><p>当出现线上 bug 时，也意味着 master 存在 Bug。这时，我们需要基于 master 创建一个 hotfix 分支，在此分支上完成 bug 修复。修复后，我们应该将此分支合并回 master 和 develop 分支，同时在 master 上打一个 tag。所以，hotfix 的改动会进入下一个 release。</p><figure><img src="https://nvie.com/img/hotfix-branches@2x.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="_2-5-如何应用-git-flow" tabindex="-1"><a class="header-anchor" href="#_2-5-如何应用-git-flow" aria-hidden="true">#</a> 2.5. 如何应用 Git Flow</h4><p>在实际开发中，如何具体落地 Git Flow 流程呢？</p>',18),g=e("code",null,"git flow",-1),h={href:"https://www.sourcetreeapp.com/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://marketplace.visualstudio.com/items?itemName=vs-publisher-57624.GitFlowforVisualStudio",target:"_blank",rel:"noopener noreferrer"},b=e("p",null,"想了解更详细的 Git Flow 介绍，可以参考：",-1),v={href:"http://nvie.com/posts/a-successful-git-branching-model/",target:"_blank",rel:"noopener noreferrer"},f={href:"http://www.cnblogs.com/cnblogsfans/p/5075073.html",target:"_blank",rel:"noopener noreferrer"},_=e("h3",{id:"github-flow",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#github-flow","aria-hidden":"true"},"#"),n(" Github Flow")],-1),k=e("p",null,"对于简单且迭代频繁的项目来说，Git Flow 可能有些太复杂了。这时，可以考虑 Github Flow。",-1),G=e("p",null,"在 Github Flow 策略中，所有分支都是基于 master 创建。在 Feature 或 Bugfix 分支中完成工作后，将其合入 master，然后继续迭代。",-1),w=e("figure",null,[e("img",{src:"https://raw.githubusercontent.com/dunwu/images/master/snap/20210420194518.png",alt:"img",tabindex:"0",loading:"lazy"}),e("figcaption",null,"img")],-1),x={href:"http://scottchacon.com/2011/08/31/github-flow.html",target:"_blank",rel:"noopener noreferrer"},y=i('<h2 id="git-commit-规范" tabindex="-1"><a class="header-anchor" href="#git-commit-规范" aria-hidden="true">#</a> Git Commit 规范</h2><p>Git 每次提交代码，都要写 Commit message（提交说明），否则就不允许提交。</p><p>好的 Commit message 可以让人一眼就明白提交者修改了什么内容，有什么影响；而不好的 Commit message 写了和没写一样，甚至还可能误导别人。</p><p>先来看下图中不好的 Commit message 范例，从提交信息完全看不出来修改了什么。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20210420152215.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>再来一张较好的 Commit message 范例，每次提交的是什么内容，做了什么一目了然。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20210420151352.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="commit-message-的作用" tabindex="-1"><a class="header-anchor" href="#commit-message-的作用" aria-hidden="true">#</a> Commit message 的作用</h3><p>从前面，我们不难看出，完善的 Commit message 非常有利于项目维护。即时是个人维护的项目，时间久了，可能也会忘记当初自己改了什么。</p><p>Commit message 的作用还不仅仅是理解历史信息，它的主要作用如下：</p><p>（1）提供易于理解的历史信息，方便检索</p><p>（2）可以过滤某些 commit（比如文档改动），便于快速查找信息。</p><p>（3）可以直接从 commit 生成 Change log。</p><h3 id="commit-message-的规范" tabindex="-1"><a class="header-anchor" href="#commit-message-的规范" aria-hidden="true">#</a> Commit message 的规范</h3>',14),S={href:"https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#heading=h.greljkmo14y0",target:"_blank",rel:"noopener noreferrer"},C=i('<p>它主要有以下组成部分：</p><ul><li>标题行：必填, 描述主要修改类型和内容</li><li>主题内容：描述为什么修改, 做了什么样的修改, 以及开发的思路等等</li><li>页脚注释：放 Breaking Changes 或 Closed Issues</li></ul><p>常用的修改项</p><ul><li><code>type</code>：commit 的类型</li><li><code>feat</code>：新特性</li><li><code>fix</code>：修改问题</li><li><code>refactor</code>：代码重构</li><li><code>docs</code>：文档修改</li><li><code>style</code>：代码格式修改, 注意不是 css 修改</li><li><code>test</code>：测试用例修改</li><li><code>chore</code>：其他修改, 比如构建流程, 依赖管理.</li><li><code>scope</code>：commit 影响的范围, 比如：route, component, utils, build...</li><li><code>subject</code>：commit 的概述</li><li><code>body</code>：commit 具体修改内容, 可以分为多行</li><li><code>footer</code>：一些备注, 通常是 BREAKING CHANGE 或修复的 bug 的链接</li></ul><h3 id="git-commit-template" tabindex="-1"><a class="header-anchor" href="#git-commit-template" aria-hidden="true">#</a> Git Commit Template</h3>',5),j={href:"https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#heading=h.greljkmo14y0",target:"_blank",rel:"noopener noreferrer"},q={href:"https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#heading=h.greljkmo14y0",target:"_blank",rel:"noopener noreferrer"},F=e("p",null,"其使用步骤如下：",-1),A=e("p",null,"第一步，安装插件",-1),I=e("figure",null,[e("img",{src:"https://raw.githubusercontent.com/dunwu/images/master/snap/20210419145223.png",alt:"img",tabindex:"0",loading:"lazy"}),e("figcaption",null,"img")],-1),H=e("p",null,"第二步，提交代码时，按照模板填写 commit message",-1),L=e("figure",null,[e("img",{src:"https://raw.githubusercontent.com/dunwu/images/master/snap/20210419145327.png",alt:"img",tabindex:"0",loading:"lazy"}),e("figcaption",null,"img")],-1),E=e("h3",{id:"生成-change-log",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#生成-change-log","aria-hidden":"true"},"#"),n(" 生成 Change log")],-1),z={href:"https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#heading=h.greljkmo14y0",target:"_blank",rel:"noopener noreferrer"},N=e("p",null,"生成的文档包括以下三个部分。",-1),O=e("ul",null,[e("li",null,"New features"),e("li",null,"Bug fixes"),e("li",null,"Breaking changes.")],-1),D=e("p",null,"每个部分都会罗列相关的 commit ，并且有指向这些 commit 的链接。当然，生成的文档允许手动修改，所以发布前，你还可以添加其他内容。",-1),T={href:"https://github.com/ajoslin/conventional-changelog",target:"_blank",rel:"noopener noreferrer"},M=i(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> conventional-changelog
$ <span class="token builtin class-name">cd</span> my-project
$ conventional-changelog <span class="token parameter variable">-p</span> angular <span class="token parameter variable">-i</span> CHANGELOG.md <span class="token parameter variable">-w</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面命令不会覆盖以前的 Change log，只会在<code>CHANGELOG.md</code>的头部加上自从上次发布以来的变动。</p><p>如果你想生成所有发布的 Change log，要改为运行下面的命令。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ conventional-changelog <span class="token parameter variable">-p</span> angular <span class="token parameter variable">-i</span> CHANGELOG.md <span class="token parameter variable">-w</span> <span class="token parameter variable">-r</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>为了方便使用，可以将其写入<code>package.json</code>的<code>scripts</code>字段。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;changelog&quot;</span><span class="token operator">:</span> <span class="token string">&quot;conventional-changelog -p angular -i CHANGELOG.md -w -r 0&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以后，直接运行下面的命令即可。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> run changelog
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="git-奇技淫巧" tabindex="-1"><a class="header-anchor" href="#git-奇技淫巧" aria-hidden="true">#</a> Git 奇技淫巧</h2><h3 id="生成-ssh-公钥" tabindex="-1"><a class="header-anchor" href="#生成-ssh-公钥" aria-hidden="true">#</a> 生成 SSH 公钥</h3><p>许多 Git 服务器都使用 SSH 公钥进行认证。 为了向 Git 服务器提供 SSH 公钥，如果某系统用户尚未拥有密钥，必须事先为其生成一份。 这个过程在所有操作系统上都是相似的。 首先，你需要确认自己是否已经拥有密钥。 默认情况下，用户的 SSH 密钥存储在其 <code>~/.ssh</code> 目录下。 进入该目录并列出其中内容，你便可以快速确认自己是否已拥有密钥：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token builtin class-name">cd</span> ~/.ssh
$ <span class="token function">ls</span>
authorized_keys2  id_dsa       known_hosts
config            id_dsa.pub
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们需要寻找一对以 <code>id_dsa</code> 或 <code>id_rsa</code> 命名的文件，其中一个带有 <code>.pub</code> 扩展名。 <code>.pub</code> 文件是你的公钥，另一个则是私钥。 如果找不到这样的文件（或者根本没有 <code>.ssh</code> 目录），你可以通过运行 <code>ssh-keygen</code> 程序来创建它们。在 Linux/Mac 系统中，<code>ssh-keygen</code> 随 SSH 软件包提供；在 Windows 上，该程序包含于 MSysGit 软件包中。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ssh-keygen
Generating public/private rsa key pair.
Enter <span class="token function">file</span> <span class="token keyword">in</span> <span class="token function">which</span> to save the key <span class="token punctuation">(</span>/home/schacon/.ssh/id_rsa<span class="token punctuation">)</span>:
Created directory <span class="token string">&#39;/home/schacon/.ssh&#39;</span><span class="token builtin class-name">.</span>
Enter passphrase <span class="token punctuation">(</span>empty <span class="token keyword">for</span> no passphrase<span class="token punctuation">)</span>:
Enter same passphrase again:
Your identification has been saved <span class="token keyword">in</span> /home/schacon/.ssh/id_rsa.
Your public key has been saved <span class="token keyword">in</span> /home/schacon/.ssh/id_rsa.pub.
The key fingerprint is:
d0:82:24:8e:d7:f1:bb:9b:33:53:96:93:49:da:9b:e3 schacon@mylaptop.local
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先 <code>ssh-keygen</code> 会确认密钥的存储位置（默认是 <code>.ssh/id_rsa</code>），然后它会要求你输入两次密钥口令。如果你不想在使用密钥时输入口令，将其留空即可。</p><p>现在，进行了上述操作的用户需要将各自的公钥发送给任意一个 Git 服务器管理员（假设服务器正在使用基于公钥的 SSH 验证设置）。 他们所要做的就是复制各自的 <code>.pub</code> 文件内容，并将其通过邮件发送。 公钥看起来是这样的：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">cat</span> ~/.ssh/id_rsa.pub
ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAklOUpkDHrfHY17SbrmTIpNLTGK9Tjom/BWDSU
GPl+nafzlHDTYW7hdI4yZ5ew18JH4JW9jbhUFrviQzM7xlELEVf4h9lFX5QVkbPppSwg0cda3
Pbv7kOdJ/MTyBlWXFCR+HAo3FXRitBqxiX1nKhXpHAZsMciLq8V6RjsNAQwdsdMFvSlVK/7XA
t3FaoJoAsncM1Q9x5+3V0Ww68/eIFmb1zuUFljQJKprrX88XypNDvjYNby6vw/Pb0rwert/En
mZ+AW4OZPnTPI89ZPmVMLuayrD2cE86Z/il8b+gw3r3+1nKatmIkjn2so1d01QraTlMqVSsbx
NrRFi9wrf+M7Q<span class="token operator">==</span> schacon@mylaptop.local
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在你的 Github 账户中，依次点击 <strong>Settings</strong> &gt; <strong>SSH and GPG keys</strong> &gt; <strong>New SSH key</strong></p><p>然后，将上面生成的公钥内容粘贴到 <code>Key</code> 编辑框并保存。至此大功告成。</p><p>后面，你在克隆你的 Github 项目时使用 SSH 方式即可。</p>`,20),B={href:"https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/",target:"_blank",rel:"noopener noreferrer"},J=i(`<h3 id="使用-gitignore-忽略不必提交内容" tabindex="-1"><a class="header-anchor" href="#使用-gitignore-忽略不必提交内容" aria-hidden="true">#</a> 使用 .gitignore 忽略不必提交内容</h3><p><code>.gitignore</code> 文件可能从字面含义也不难猜出：这个文件里配置的文件或目录，会自动被 git 所忽略，不纳入版本控制。</p><p>在日常开发中，我们的项目经常会产生一些临时文件，如编译 Java 产生的 <code>*.class</code> 文件，又或是 IDE 自动生成的隐藏目录（Intellij 的 <code>.idea</code> 目录、Eclipse 的 <code>.settings</code> 目录等）等等。这些文件或目录实在没必要纳入版本管理。在这种场景下，你就需要用到 <code>.gitignore</code> 配置来过滤这些文件或目录。</p><p><code>.gitignore</code> 配置的规则很简单，也没什么可说的，看几个例子，自然就明白了。</p><p>【示例】一份 Java 的 .gitignore</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># Compiled class file
*.class

# Log file
*.log

# BlueJ files
*.ctxt

# Mobile Tools for Java (J2ME)
.mtj.tmp/

# Package Files #
*.jar
*.war
*.nar
*.ear
*.zip
*.tar.gz
*.rar

# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml
hs_err_pid*
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),P={href:"https://github.com/github/gitignore",target:"_blank",rel:"noopener noreferrer"},W=e("code",null,".gitignore",-1),U=i(`<h3 id="使用-gitattributes-解决-lf-和-crlf-问题" tabindex="-1"><a class="header-anchor" href="#使用-gitattributes-解决-lf-和-crlf-问题" aria-hidden="true">#</a> 使用 .gitattributes 解决 LF 和 CRLF 问题</h3><p>你有没有在和多人协同开发时遇到过以下烦恼？</p><p>开发者们分别使用不同的操作系统进行开发，有的人用 Windows，有的人用 Linux/MacOS。众所周知，不同操作系统默认的文件结尾行是不同的：在 Windows 上默认的是回车换行（Carriage Return Line Feed, CRLF），然而，在 Linux/MacOS 上则是换行（Line Feed, LF）。这就可能导致这种情况：明明文件内容一模一样，但是版本比对时仍然存在版本差异。</p><p>那么如何解决这个问题呢？Git 提供了 <code>.gitattributes</code> 配置文件，它允许使用者指定由 git 使用的文件和路径的属性。</p><p>在 Git 库中，一个普通文本文件的行尾默认是 <code>LF</code>。对于工作目录，除了 <code>text</code> 属性之外，还可以设置 <code>eol</code> 属性或 <code>core.eol</code> 配置变量。</p><p><code>.gitattributes</code> 文件中，可以用 text 属性指定某类文件或目录下的文件，控制它的行结束标准化。当一个文本文件被标准化时，它的行尾将在存储库中转换为 <code>LF</code>。要控制工作目录中使用的行结束风格，请使用单个文件的<code>eol</code>属性和所有文本文件的 <code>core.eol</code> 配置变量。</p><p>【示例】一份 .gitattributes 示例</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>* text=auto eol=lf

*.txt text
*.java text
*.scala text
*.groovy text
*.gradle text
*.properties text

# unix style
*.sh text eol=lf

# win style
*.bat text eol=crlf

# binary
*.jar binary
*.war binary
*.zip binary
*.tar binary
*.tar.gz binary
*.gz binary
*.apk binary
*.bin binary
*.exe binary
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),V={href:"https://github.com/alexkaratarakis/gitattributes",target:"_blank",rel:"noopener noreferrer"},Q=e("code",null,".gitignore",-1),R=i(`<h3 id="同时提交代码到不同的远程仓库" tabindex="-1"><a class="header-anchor" href="#同时提交代码到不同的远程仓库" aria-hidden="true">#</a> 同时提交代码到不同的远程仓库</h3><p>如果，你在不同的 Git 远程仓库中维护同一个项目，你可能会有这样的需求：能不能一次提交，同时 push 到多个远程仓库中呢？</p><p>这个可以有，解决方案如下：</p><p>比如，我有一个 blog 项目，同时维护在 Github 和 Gitee 上。</p><p>（1）首先，在 Github 和 Gitee 上配置本地的 ssh 公钥（如果是 Gitlab，也同样如此），这样中央仓库就能识别本地。</p><p>生成 SSH 公钥的方法，请参考上文的 “生成 SSH 公钥” 章节。</p><p>（2）进入 git 项目的隐藏目录 <code>.git</code>，打开 config 文件，参考下面配置进行编辑：</p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">core</span><span class="token punctuation">]</span></span>
	<span class="token key attr-name">repositoryformatversion</span> <span class="token punctuation">=</span> <span class="token value attr-value">0</span>
	<span class="token key attr-name">filemode</span> <span class="token punctuation">=</span> <span class="token value attr-value">false</span>
	<span class="token key attr-name">bare</span> <span class="token punctuation">=</span> <span class="token value attr-value">false</span>
	<span class="token key attr-name">logallrefupdates</span> <span class="token punctuation">=</span> <span class="token value attr-value">true</span>
	<span class="token key attr-name">symlinks</span> <span class="token punctuation">=</span> <span class="token value attr-value">false</span>
	<span class="token key attr-name">ignorecase</span> <span class="token punctuation">=</span> <span class="token value attr-value">true</span>
<span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">remote &quot;origin&quot;</span><span class="token punctuation">]</span></span>
	<span class="token key attr-name">url</span> <span class="token punctuation">=</span> <span class="token value attr-value">git@github.com:dunwu/blog.git</span>
	<span class="token key attr-name">url</span> <span class="token punctuation">=</span> <span class="token value attr-value">git@gitee.com:turnon/blog.git</span>
	<span class="token key attr-name">fetch</span> <span class="token punctuation">=</span> <span class="token value attr-value">+refs/heads/*:refs/remotes/origin/*</span>
<span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">branch &quot;master&quot;</span><span class="token punctuation">]</span></span>
	<span class="token key attr-name">remote</span> <span class="token punctuation">=</span> <span class="token value attr-value">origin</span>
	<span class="token key attr-name">merge</span> <span class="token punctuation">=</span> <span class="token value attr-value">refs/heads/master</span>
<span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">user</span><span class="token punctuation">]</span></span>
	<span class="token key attr-name">name</span> <span class="token punctuation">=</span> <span class="token value attr-value">dunwu</span>
	<span class="token key attr-name">email</span> <span class="token punctuation">=</span> <span class="token value attr-value">forbreak@163.com</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重点在于 <code>remote &quot;origin&quot;</code>，同时配置了两个 url。配置后，一旦触发 push 远程仓库的动作，就会同时推送提交记录到配置的远程仓库。</p><h3 id="github-issue-和-gitlab-issue" tabindex="-1"><a class="header-anchor" href="#github-issue-和-gitlab-issue" aria-hidden="true">#</a> Github Issue 和 Gitlab Issue</h3><p>开发软件，Bug 再所难免，出现问题不可怕，可怕的是放任不管；所以，优秀的软件项目，都应该管理好问题追踪。软件的使用者，在使用中，可能会遇到形形色色的问题，难以解决，需要向维护者寻求帮助。</p><p>问题追踪如此重要，所以各种代码托管平台都会提供 Issue 维护机制，如 Github Issue 和 Gitlab Issue。</p><p>如果一个项目的开源社区很活跃，在没有任何约束的前提下，提问肯定是五花八门的，让维护者难以招架。</p>`,13),X={href:"https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way",target:"_blank",rel:"noopener noreferrer"},Y=i('<p>作为开发者，你不能期望所有提问者都是训练有素的提问者。所以，使用规范化的 Issue 模板来引导提问者提问，可以大大减轻开发者的负担。</p><h4 id="github-issue-模板" tabindex="-1"><a class="header-anchor" href="#github-issue-模板" aria-hidden="true">#</a> Github Issue 模板</h4><p>如何在 Github Issue 平台上创建 Issue 模板呢？方法如下：</p><p>（1）在仓库根目录创建新目录 <code>.github</code></p><p>（2）在 <code>.github</code> 目录中添加 <code>ISSUE_TEMPLATE</code> 目录，在其中添加的 md 文件都会被 Github 自动识，并将其作为 issue 的默认模板。</p>',5),$={href:"https://github.com/ctripcorp/apollo",target:"_blank",rel:"noopener noreferrer"},K=e("figure",null,[e("img",{src:"https://raw.githubusercontent.com/dunwu/images/master/snap/20210420114644.png",alt:"img",tabindex:"0",loading:"lazy"}),e("figcaption",null,"img")],-1),Z={href:"https://github.com/stevemao/github-issue-templates",target:"_blank",rel:"noopener noreferrer"},ee=i('<h4 id="gitlab-issue-模板" tabindex="-1"><a class="header-anchor" href="#gitlab-issue-模板" aria-hidden="true">#</a> Gitlab Issue 模板</h4><p>如何在 Gitlab Issue 平台上创建 Issue 模板呢？方法如下：</p><p>（1）在仓库根目录创建新目录 <code>.gitlab</code></p><p>（2）在 <code>.gitlab</code> 目录中添加 <code>issue_templates</code> 目录，在其中添加的 md 文件都会被 Gitlab 自动识，并将其作为 issue 的默认模板。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20210420141838.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>',5),ne={href:"https://gitlab.com/gitlab-org/gitlab/-/tree/master/.gitlab/issue_templates",target:"_blank",rel:"noopener noreferrer"},ae=i('<h3 id="git-hook" tabindex="-1"><a class="header-anchor" href="#git-hook" aria-hidden="true">#</a> Git Hook</h3><p>在执行提交代码（git commit），推送代码（git push）等行为时，我们可能希望做一些代码检查性工作，例如：代码 lint 检查、代码格式化等。当检查发现代码存在问题时，就拒绝代码提交，从而保证项目质量。</p><p>Git 提供了 Git Hook 机制，允许使用者在特定的重要动作发生时触发自定义脚本。有两类钩子：客户端钩子和服务器端钩子。客户端钩子由诸如提交和合并等操作所触发调用，而服务器端钩子作用于诸如接收被推送的提交这样的联网操作。钩子都被存储在 Git 项目目录下的 <code>.git/hooks</code> 子目录中。Git 在这个目录下放置了一些示例，这些示例的名字都是以 <code>.sample</code> 结尾，如果想启用它们，得先移除这个后缀。</p><p>常用的客户端钩子：</p><ul><li><code>pre-commit</code> 钩子：在提交信息前运行。 它用于检查即将提交的快照，例如，检查是否有所遗漏，确保测试运行，以及核查代码。 如果该钩子以非零值退出，Git 将放弃此次提交，不过你可以用 <code>git commit --no-verify</code> 来绕过这个环节。 你可以利用该钩子，来检查代码风格是否一致（运行类似 <code>lint</code> 的程序）、尾随空白字符是否存在（自带的钩子就是这么做的），或新方法的文档是否适当。</li><li><code>prepare-commit-msg</code> 钩子：在启动提交信息编辑器之前，默认信息被创建之后运行。 它允许你编辑提交者所看到的默认信息。 该钩子接收一些选项：存有当前提交信息的文件的路径、提交类型和修补提交的提交的 SHA-1 校验。 它对一般的提交来说并没有什么用；然而对那些会自动产生默认信息的提交，如提交信息模板、合并提交、压缩提交和修订提交等非常实用。 你可以结合提交模板来使用它，动态地插入信息。</li><li><code>commit-msg</code> 钩子：接收一个参数，此参数即上文提到的，存有当前提交信息的临时文件的路径。 如果该钩子脚本以非零值退出，Git 将放弃提交，因此，可以用来在提交通过前验证项目状态或提交信息。 在本章的最后一节，我们将展示如何使用该钩子来核对提交信息是否遵循指定的模板。</li><li><code>post-commit</code> 钩子：在整个提交过程完成后运行。它不接收任何参数，但你可以很容易地通过运行 <code>git log -1 HEAD</code> 来获得最后一次的提交信息。 该钩子一般用于通知之类的事情。</li><li><code>pre-push</code> 钩子：会在 <code>git push</code> 运行期间， 更新了远程引用但尚未传送对象时被调用。 它接受远程分支的名字和位置作为参数，同时从标准输入中读取一系列待更新的引用。 你可以在推送开始之前，用它验证对引用的更新操作（一个非零的退出码将终止推送过程）。</li></ul><h4 id="javascript-应用-git-hook" tabindex="-1"><a class="header-anchor" href="#javascript-应用-git-hook" aria-hidden="true">#</a> Javascript 应用 Git Hook</h4>',6),te={href:"https://github.com/typicode/husky",target:"_blank",rel:"noopener noreferrer"},ie=i(`<p>使用方法很简单，先安装 husky</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm i -D husky
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后，在 package.json 中添加配置：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;husky&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;hooks&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;pre-commit&quot;</span><span class="token operator">:</span> <span class="token string">&quot;lint-staged&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token property">&quot;lint-staged&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;src/**/*.{js,vue}&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;eslint --fix&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;git add&quot;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上配置的作用是，当提交代码前（ <code>pre-commit</code> ），先执行 <code>lint-staged</code>；</p><p><code>lint-staged</code> 中执行的动作是，对 src 目录的所有 js、vue 文件进行 eslint 检查，并尝试修复。如果修复后没有问题，就 git add 添加修改后的文件；如果修复失败，则拒绝提交代码。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,7),se=e("strong",null,"官方资源",-1),oe={href:"https://git-scm.com/",target:"_blank",rel:"noopener noreferrer"},re={href:"https://github.com/git/git",target:"_blank",rel:"noopener noreferrer"},le={href:"https://guides.github.com/",target:"_blank",rel:"noopener noreferrer"},ce=e("strong",null,"模板",-1),de={href:"https://github.com/github/gitignore",target:"_blank",rel:"noopener noreferrer"},pe={href:"https://github.com/alexkaratarakis/gitattributes",target:"_blank",rel:"noopener noreferrer"},ue={href:"https://github.com/tiimgreen/github-cheat-sheet",target:"_blank",rel:"noopener noreferrer"},ge=e("strong",null,"Git 教程",-1),he={href:"https://learngitbranching.js.org/",target:"_blank",rel:"noopener noreferrer"},me={href:"https://git-scm.com/book/zh/v2",target:"_blank",rel:"noopener noreferrer"},be={href:"https://github.com/k88hudson/git-flight-rules",target:"_blank",rel:"noopener noreferrer"},ve={href:"https://github.com/521xueweihan/git-tips",target:"_blank",rel:"noopener noreferrer"},fe={href:"https://github.com/geeeeeeeeek/git-recipes",target:"_blank",rel:"noopener noreferrer"},_e={href:"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000",target:"_blank",rel:"noopener noreferrer"},ke={href:"https://github.com/xirong/my-git",target:"_blank",rel:"noopener noreferrer"},Ge=e("strong",null,"文章",-1),we={href:"https://github.com/k88hudson/git-flight-rules/blob/master/README_zh-CN.md",target:"_blank",rel:"noopener noreferrer"},xe={href:"https://github.com/521xueweihan/git-tips",target:"_blank",rel:"noopener noreferrer"},ye={href:"https://github.com/aseaday/git-style-guide",target:"_blank",rel:"noopener noreferrer"},Se={href:"http://www.cnblogs.com/cnblogsfans/p/5075073.html",target:"_blank",rel:"noopener noreferrer"},Ce={href:"http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html",target:"_blank",rel:"noopener noreferrer"},je=e("strong",null,"Git 工具",-1),qe={href:"https://git-scm.com/downloads/guis",target:"_blank",rel:"noopener noreferrer"},Fe={href:"https://github.com/gogits/gogs",target:"_blank",rel:"noopener noreferrer"},Ae={href:"https://github.com/nvie/gitflow",target:"_blank",rel:"noopener noreferrer"},Ie={href:"http://nvie.com/posts/a-successful-git-branching-model/",target:"_blank",rel:"noopener noreferrer"},He={href:"http://firstaidgit.io/",target:"_blank",rel:"noopener noreferrer"},Le={href:"https://github.com/unixorn/git-extra-commands",target:"_blank",rel:"noopener noreferrer"},Ee={href:"https://github.com/tj/git-extras",target:"_blank",rel:"noopener noreferrer"},ze={href:"https://github.com/qw3rtman/git-fire",target:"_blank",rel:"noopener noreferrer"},Ne={href:"https://github.com/git-tips/tips",target:"_blank",rel:"noopener noreferrer"},Oe={href:"https://github.com/Originate/git-town",target:"_blank",rel:"noopener noreferrer"},De=e("strong",null,"GUI 客户端",-1),Te={href:"https://www.gitkraken.com/",target:"_blank",rel:"noopener noreferrer"},Me={href:"https://git-cola.github.io/",target:"_blank",rel:"noopener noreferrer"},Be={href:"https://github.com/git-up/GitUp",target:"_blank",rel:"noopener noreferrer"},Je={href:"https://rowanj.github.io/gitx/",target:"_blank",rel:"noopener noreferrer"},Pe={href:"https://www.sourcetreeapp.com/",target:"_blank",rel:"noopener noreferrer"},We={href:"http://www.git-tower.com/",target:"_blank",rel:"noopener noreferrer"},Ue=e("strong",null,"git cheat sheet",-1),Ve={href:"https://services.github.com/on-demand/downloads/github-git-cheat-sheet.pdf",target:"_blank",rel:"noopener noreferrer"};function Qe(Re,Xe){const a=o("ExternalLinkIcon");return r(),l("div",null,[d,e("blockquote",null,[e("p",null,[n("详细内容，可以参考这篇文章："),e("a",p,[n("Git 在团队中的最佳实践--如何正确使用 Git Flow"),t(a)])])]),u,e("p",null,[n("git 提供了 "),g,n(" 命令来手动管理，但是比较麻烦，所以还是建议使用 Git Flow 的 GUI 工具。比如："),e("a",h,[n("SourceTree"),t(a)]),n("、"),e("a",m,[n("VScode 的 GitFlow 插件"),t(a)]),n("、Intellij 的 GitFlow 插件等。")]),e("blockquote",null,[b,e("p",null,[e("a",v,[n("A Successful Git Branching Model"),t(a)])]),e("p",null,[e("a",f,[n("Git 在团队中的最佳实践--如何正确使用 Git Flow"),t(a)])])]),_,k,G,w,e("blockquote",null,[e("p",null,[n("想了解更详细的 Github Flow 介绍，可以参考："),e("a",x,[n("GitHub Flow"),t(a)])])]),y,e("p",null,[n("开源社区有很多 Commit message 的规范，个人推荐使用 "),e("a",S,[n("Angular Git Commit 规范"),t(a)]),n("，这是目前使用最广的写法，比较合理和系统化，并且有配套的工具。")]),C,e("p",null,[n("Intellij 中有集成 "),e("a",j,[n("Angular Git Commit 规范"),t(a)]),n(" 的插件，可以帮助我们快速创建符合 "),e("a",q,[n("Angular Git Commit 规范"),t(a)]),n(" 的 Git Commit Message。")]),F,A,I,H,L,E,e("p",null,[n("如果你的所有 Commit 都符合 "),e("a",z,[n("Angular Git Commit 规范"),t(a)]),n("，那么发布新版本时，就可以用脚本自动生成 Change log。")]),N,O,D,e("p",null,[e("a",T,[n("conventional-changelog"),t(a)]),n(" 就是生成 Change log 的工具，运行下面的命令即可。")]),M,e("p",null,[n("如果觉得我的讲解还不够细致，可以参考："),e("a",B,[n("adding-a-new-ssh-key-to-your-github-account"),t(a)])]),J,e("blockquote",null,[e("p",null,[n("【推荐】这里推荐一个 Github 的开源项目："),e("a",P,[n("gitignore"),t(a)]),n("，在这里，你可以找到很多常用的 .gitignore 模板，如：Java、Nodejs、C++ 的 "),W,n(" 模板等等。")])]),U,e("blockquote",null,[e("p",null,[n("【推荐】这里推荐一个 Github 的开源项目："),e("a",V,[n("gitignore"),t(a)]),n("，在这里，你可以找到很多常用的 .gitignore 模板，如：Java、Nodejs、C++ 的 "),Q,n(" 模板等等。")])]),R,e("p",null,[n("其实，提问也是一门艺术，如果提问者的问题长篇大幅，言不达意，让别人难以理解，就很难得到有效帮助。关于如何高效的提问，推荐参考 "),e("a",X,[n("提问的智慧"),t(a)]),n(" 这篇文章，作者整理的非常好。")]),Y,e("p",null,[n("示例，下面是携程 "),e("a",$,[n("apollo"),t(a)]),n(" 的一个 Issue 模板，要求提问者填充 bug 描述、复现步骤、期望、截图、日志等细节。")]),K,e("blockquote",null,[e("p",null,[n("更多模板："),e("a",Z,[n("Github issue_templates 模板"),t(a)])])]),ee,e("blockquote",null,[e("p",null,[n("更多模板："),e("a",ne,[n("Gitlab 官方 issue_templates 模板"),t(a)])])]),ae,e("p",null,[n("想在 JavaScript 应用中使用 Git Hook，推荐使用 "),e("a",te,[n("husky"),t(a)]),n(" ，可以很方便的编写钩子处理命令。")]),ie,e("ul",null,[e("li",null,[se,e("ul",null,[e("li",null,[e("a",oe,[n("Git 官网"),t(a)])]),e("li",null,[e("a",re,[n("Git Github"),t(a)])]),e("li",null,[e("a",le,[n("Github 官方教程"),t(a)])])])]),e("li",null,[ce,e("ul",null,[e("li",null,[e("a",de,[n("gitignore 模板"),t(a)]),n(" - .gitignore 文件模板")]),e("li",null,[e("a",pe,[n("gitattributes 模板"),t(a)]),n(" - .gitattributes 文件模板")]),e("li",null,[e("a",ue,[n("github-cheat-sheet"),t(a)]),n(" - git 命令简略图表")])])]),e("li",null,[ge,e("ul",null,[e("li",null,[e("a",he,[n("Learn Git branching"),t(a)]),n(" - 交互式教程")]),e("li",null,[e("a",me,[n("Git 官方推荐教程"),t(a)]),n(" - Scott Chacon 的 Git 书。 "),e("ul",null,[e("li",null,[e("a",be,[n("git-flight-rules"),t(a)])])])]),e("li",null,[e("a",ve,[n("git-tips"),t(a)])]),e("li",null,[e("a",fe,[n("Git 中文教程"),t(a)])]),e("li",null,[e("a",_e,[n("廖雪峰的 Git 教程"),t(a)])]),e("li",null,[e("a",ke,[n("有关 git 的学习资源"),t(a)])])])]),e("li",null,[Ge,e("ul",null,[e("li",null,[e("a",we,[n("Git Cookbook"),t(a)])]),e("li",null,[e("a",xe,[n("Git 奇技淫巧"),t(a)])]),e("li",null,[e("a",ye,[n("Git 风格指南"),t(a)])]),e("li",null,[e("a",Se,[n("Git 在团队中的最佳实践--如何正确使用 Git Flow"),t(a)])]),e("li",null,[e("a",Ce,[n("Commit message 和 Change log 编写指南"),t(a)])])])]),e("li",null,[je,e("ul",null,[e("li",null,[e("a",qe,[n("guis"),t(a)]),n(" - Git 官网展示的客户端工具列表。")]),e("li",null,[e("a",Fe,[n("gogs"),t(a)]),n(" - 极易搭建的自助 Git 服务。")]),e("li",null,[e("a",Ae,[n("gitflow"),t(a)]),n(" - 应用 "),e("a",Ie,[n("fit-flow"),t(a)]),n(" 模型的工具。")]),e("li",null,[e("a",He,[n("firstaidgit.io"),t(a)]),n(" 一个可搜索的最常被问到的 Git 的问题")]),e("li",null,[e("a",Le,[n("git-extra-commands"),t(a)]),n(" - 一堆有用的额外的 Git 脚本")]),e("li",null,[e("a",Ee,[n("git-extras"),t(a)]),n(" - GIT 工具集 -- repo summary, repl, changelog population, author commit percentages and more")]),e("li",null,[e("a",ze,[n("git-fire"),t(a)]),n(" - git-fire 是一个 Git 插件，用于帮助在紧急情况下添加所有当前文件, 做提交(committing), 和推(push)到一个新分支(阻止合并冲突)。")]),e("li",null,[e("a",Ne,[n("git-tips"),t(a)]),n(" - Git 小提示")]),e("li",null,[e("a",Oe,[n("git-town"),t(a)]),n(" - 通用，高级 Git 工作流支持！")])])]),e("li",null,[De,e("ul",null,[e("li",null,[e("a",Te,[n("GitKraken"),t(a)]),n(" - 豪华的 Git 客户端 Windows, Mac & Linux")]),e("li",null,[e("a",Me,[n("git-cola"),t(a)]),n(" - 另外一个 Git 客户端 Windows & OS X")]),e("li",null,[e("a",Be,[n("GitUp"),t(a)]),n(" - 一个新的 Git 客户端，在处理 Git 的复杂性上有自己的特点")]),e("li",null,[e("a",Je,[n("gitx-dev"),t(a)]),n(" - 图形化的 Git 客户端 OS X")]),e("li",null,[e("a",Pe,[n("Source Tree"),t(a)]),n(" - 免费的图形化 Git 客户端 Windows & OS X")]),e("li",null,[e("a",We,[n("Tower"),t(a)]),n(" - 图形化 Git 客户端 OS X(付费)")])])]),e("li",null,[Ue,e("ul",null,[e("li",null,[e("a",Ve,[n("github-git-cheat-sheet"),t(a)])])])])])])}const Ke=s(c,[["render",Qe],["__file","index.html.vue"]]);export{Ke as default};
