const e=JSON.parse('{"key":"v-d8191fe0","path":"/pages/4431bbfc/","title":"Redis 面试","lang":"zh-CN","frontmatter":{"icon":"logos:redis","title":"Redis 面试","cover":"https://raw.githubusercontent.com/dunwu/images/master/snap/202503110803916.jpg","date":"2020-07-13T17:03:42.000Z","permalink":"/pages/4431bbfc/","category":["数据库","KV 数据库","redis"],"tag":["数据库","KV 数据库","redis","面试"],"description":"Redis 面试 Redis 简介 【基础】什么是 Redis？ 要点 什么是 Redis？ Redis 是一个开源的、数据存于内存中的 K-V 数据库。由于，Redis 的读写操作都是在内存中完成，因此其读写速度非常快。 高性能 - 由于，Redis 的读写操作都是在内存中完成，因此性能极高。 高并发 - Redis 单机 QPS 能达到 10w+，将近是 Mysql 的 10 倍。 Redis 常被用于缓存，消息队列、分布式锁等场景。 Redis 有什么功能和特性？ Redis 的功能和特性： Redis 支持多种数据类型。如：String（字符串）、Hash（哈希）、 List （列表）、Set（集合）、Zset（有序集合）、Bitmaps（位图）、HyperLogLog（基数统计）、GEO（地理空间）、Stream（流）。 Redis 的读写采用“单线程”模型，因此，其操作天然就具有原子性。需要注意的是，Redis 6.0 后在其网络模块中引入了多线程 I/O 机制。 Redis 支持两种持久化策略：RDB 和 AOF。 Redis 有多种高可用方案：主从复制模式、哨兵模式、集群模式。 Redis 支持很多丰富的特性，如：事务 、Lua 脚本、发布订阅、过期删除、内存淘汰等等。 图来自 Redis Explained","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/4431bbfc/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"Redis 面试"}],["meta",{"property":"og:description","content":"Redis 面试 Redis 简介 【基础】什么是 Redis？ 要点 什么是 Redis？ Redis 是一个开源的、数据存于内存中的 K-V 数据库。由于，Redis 的读写操作都是在内存中完成，因此其读写速度非常快。 高性能 - 由于，Redis 的读写操作都是在内存中完成，因此性能极高。 高并发 - Redis 单机 QPS 能达到 10w+，将近是 Mysql 的 10 倍。 Redis 常被用于缓存，消息队列、分布式锁等场景。 Redis 有什么功能和特性？ Redis 的功能和特性： Redis 支持多种数据类型。如：String（字符串）、Hash（哈希）、 List （列表）、Set（集合）、Zset（有序集合）、Bitmaps（位图）、HyperLogLog（基数统计）、GEO（地理空间）、Stream（流）。 Redis 的读写采用“单线程”模型，因此，其操作天然就具有原子性。需要注意的是，Redis 6.0 后在其网络模块中引入了多线程 I/O 机制。 Redis 支持两种持久化策略：RDB 和 AOF。 Redis 有多种高可用方案：主从复制模式、哨兵模式、集群模式。 Redis 支持很多丰富的特性，如：事务 、Lua 脚本、发布订阅、过期删除、内存淘汰等等。 图来自 Redis Explained"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/dunwu/images/master/snap/202503110803916.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-31T23:17:18.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"Redis 面试"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"数据库"}],["meta",{"property":"article:tag","content":"KV 数据库"}],["meta",{"property":"article:tag","content":"redis"}],["meta",{"property":"article:tag","content":"面试"}],["meta",{"property":"article:published_time","content":"2020-07-13T17:03:42.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-31T23:17:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis 面试\\",\\"image\\":[\\"https://raw.githubusercontent.com/dunwu/images/master/snap/202503110803916.jpg\\"],\\"datePublished\\":\\"2020-07-13T17:03:42.000Z\\",\\"dateModified\\":\\"2025-03-31T23:17:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"Redis 简介","slug":"redis-简介","link":"#redis-简介","children":[{"level":3,"title":"【基础】什么是 Redis？","slug":"【基础】什么是-redis","link":"#【基础】什么是-redis","children":[]},{"level":3,"title":"【基础】Redis 有哪些应用场景？","slug":"【基础】redis-有哪些应用场景","link":"#【基础】redis-有哪些应用场景","children":[]},{"level":3,"title":"【基础】Redis 有哪些里程碑版本？","slug":"【基础】redis-有哪些里程碑版本","link":"#【基础】redis-有哪些里程碑版本","children":[]},{"level":3,"title":"【基础】对比一下 Redis 和 Memcached？","slug":"【基础】对比一下-redis-和-memcached","link":"#【基础】对比一下-redis-和-memcached","children":[]},{"level":3,"title":"【基础】Redis 有哪些 Java 客户端？各有什么优劣？","slug":"【基础】redis-有哪些-java-客户端-各有什么优劣","link":"#【基础】redis-有哪些-java-客户端-各有什么优劣","children":[]}]},{"level":2,"title":"Redis 内存管理","slug":"redis-内存管理","link":"#redis-内存管理","children":[{"level":3,"title":"【中级】Redis 支持哪些过期删除策略？","slug":"【中级】redis-支持哪些过期删除策略","link":"#【中级】redis-支持哪些过期删除策略","children":[]},{"level":3,"title":"【中级】Redis 有哪些内存淘汰策略？","slug":"【中级】redis-有哪些内存淘汰策略","link":"#【中级】redis-有哪些内存淘汰策略","children":[]},{"level":3,"title":"【中级】Redis 持久化时，对过期键会如何处理？","slug":"【中级】redis-持久化时-对过期键会如何处理","link":"#【中级】redis-持久化时-对过期键会如何处理","children":[]},{"level":3,"title":"【中级】Redis 主从复制时，对过期键会如何处理？","slug":"【中级】redis-主从复制时-对过期键会如何处理","link":"#【中级】redis-主从复制时-对过期键会如何处理","children":[]},{"level":3,"title":"【中级】Redis 中的内存碎片化是什么？如何进行优化？","slug":"【中级】redis-中的内存碎片化是什么-如何进行优化","link":"#【中级】redis-中的内存碎片化是什么-如何进行优化","children":[]}]},{"level":2,"title":"Redis 持久化","slug":"redis-持久化","link":"#redis-持久化","children":[{"level":3,"title":"【中级】Redis 如何保证数据不丢失？","slug":"【中级】redis-如何保证数据不丢失","link":"#【中级】redis-如何保证数据不丢失","children":[]},{"level":3,"title":"【中级】AOF 的缓冲区回写策略有几种？","slug":"【中级】aof-的缓冲区回写策略有几种","link":"#【中级】aof-的缓冲区回写策略有几种","children":[]},{"level":3,"title":"【中级】AOF 的重写机制是怎样的？","slug":"【中级】aof-的重写机制是怎样的","link":"#【中级】aof-的重写机制是怎样的","children":[]}]},{"level":2,"title":"Redis 批处理","slug":"redis-批处理","link":"#redis-批处理","children":[{"level":3,"title":"【中级】Redis 支持事务吗？","slug":"【中级】redis-支持事务吗","link":"#【中级】redis-支持事务吗","children":[]},{"level":3,"title":"【中级】Redis 事务是严格意义的事务吗？","slug":"【中级】redis-事务是严格意义的事务吗","link":"#【中级】redis-事务是严格意义的事务吗","children":[]},{"level":3,"title":"【中级】Redis Pipeline 能保证原子性吗？","slug":"【中级】redis-pipeline-能保证原子性吗","link":"#【中级】redis-pipeline-能保证原子性吗","children":[]},{"level":3,"title":"【中级】Redis Lua 脚本有什么用？","slug":"【中级】redis-lua-脚本有什么用","link":"#【中级】redis-lua-脚本有什么用","children":[]}]},{"level":2,"title":"Redis 高可用","slug":"redis-高可用","link":"#redis-高可用","children":[{"level":3,"title":"【中级】Redis 如何实现主从复制？","slug":"【中级】redis-如何实现主从复制","link":"#【中级】redis-如何实现主从复制","children":[]},{"level":3,"title":"【中级】Redis 哨兵是如何工作的？","slug":"【中级】redis-哨兵是如何工作的","link":"#【中级】redis-哨兵是如何工作的","children":[]},{"level":3,"title":"【中级】Redis 集群是如何工作的？","slug":"【中级】redis-集群是如何工作的","link":"#【中级】redis-集群是如何工作的","children":[]},{"level":3,"title":"【高级】Redis 中的脑裂问题是如何产生的？","slug":"【高级】redis-中的脑裂问题是如何产生的","link":"#【高级】redis-中的脑裂问题是如何产生的","children":[]},{"level":3,"title":"【高级】如何解决 Redis 中的脑裂问题？","slug":"【高级】如何解决-redis-中的脑裂问题","link":"#【高级】如何解决-redis-中的脑裂问题","children":[]}]},{"level":2,"title":"Redis 架构","slug":"redis-架构","link":"#redis-架构","children":[{"level":3,"title":"【中级】Redis 为什么快？","slug":"【中级】redis-为什么快","link":"#【中级】redis-为什么快","children":[]},{"level":3,"title":"【中级】Redis 单线程模式是怎样的？","slug":"【中级】redis-单线程模式是怎样的","link":"#【中级】redis-单线程模式是怎样的","children":[]},{"level":3,"title":"【中级】Redis 6.0 之后为什么引入了多线程？","slug":"【中级】redis-6-0-之后为什么引入了多线程","link":"#【中级】redis-6-0-之后为什么引入了多线程","children":[]},{"level":3,"title":"【中级】什么是 Redis 模块？有什么用？","slug":"【中级】什么是-redis-模块-有什么用","link":"#【中级】什么是-redis-模块-有什么用","children":[]},{"level":3,"title":"【高级】Redis 有哪些巧妙的设计？","slug":"【高级】redis-有哪些巧妙的设计","link":"#【高级】redis-有哪些巧妙的设计","children":[]}]},{"level":2,"title":"Redis 优化","slug":"redis-优化","link":"#redis-优化","children":[{"level":3,"title":"【中级】为什么会有慢查询命令？","slug":"【中级】为什么会有慢查询命令","link":"#【中级】为什么会有慢查询命令","children":[]},{"level":3,"title":"【中级】如何找到慢查询命令？","slug":"【中级】如何找到慢查询命令","link":"#【中级】如何找到慢查询命令","children":[]},{"level":3,"title":"【中级】Redis 中的 Big Key 问题是什么？如何解决？","slug":"【中级】redis-中的-big-key-问题是什么-如何解决","link":"#【中级】redis-中的-big-key-问题是什么-如何解决","children":[]},{"level":3,"title":"【中级】如何解决 Redis 中的热点 key 问题？","slug":"【中级】如何解决-redis-中的热点-key-问题","link":"#【中级】如何解决-redis-中的热点-key-问题","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1741093684000,"updatedTime":1743463038000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":6}]},"readingTime":{"minutes":46.64,"words":13992},"filePathRelative":"12.数据库/05.KV数据库/redis/Redis_面试.md","localizedDate":"2020年7月13日","excerpt":"<h1> Redis 面试</h1>\\n<h2> Redis 简介</h2>\\n<h3> 【基础】什么是 Redis？</h3>\\n<details class=\\"hint-container details\\"><summary>要点</summary>\\n<blockquote>\\n<p>什么是 Redis？</p>\\n</blockquote>\\n<p><strong>Redis 是一个开源的、数据存于内存中的 K-V 数据库</strong>。由于，Redis 的读写操作都是在内存中完成，因此其<strong>读写速度非常快</strong>。</p>\\n<ul>\\n<li><strong>高性能</strong> - 由于，Redis 的读写操作都是在内存中完成，因此性能极高。</li>\\n<li><strong>高并发</strong> - Redis 单机 QPS 能达到 10w+，将近是 Mysql 的 10 倍。</li>\\n</ul>\\n<p>Redis 常被用于<strong>缓存，消息队列、分布式锁等场景</strong>。</p>\\n<blockquote>\\n<p>Redis 有什么功能和特性？</p>\\n</blockquote>\\n<p>Redis 的功能和特性：</p>\\n<ul>\\n<li><strong>Redis 支持多种数据类型</strong>。如：String（字符串）、Hash（哈希）、 List （列表）、Set（集合）、Zset（有序集合）、Bitmaps（位图）、HyperLogLog（基数统计）、GEO（地理空间）、Stream（流）。</li>\\n<li><strong>Redis 的读写采用“单线程”模型</strong>，因此，其操作天然就具有<strong>原子性</strong>。需要注意的是，Redis 6.0 后在其网络模块中引入了多线程 I/O 机制。</li>\\n<li>Redis 支持两种持久化策略：RDB 和 AOF。</li>\\n<li>Redis 有多种高可用方案：<strong>主从复制</strong>模式、<strong>哨兵</strong>模式、<strong>集群</strong>模式。</li>\\n<li>Redis 支持很多丰富的特性，如：<strong>事务</strong> 、<strong>Lua 脚本</strong>、<strong>发布订阅</strong>、<strong>过期删除</strong>、<strong>内存淘汰</strong>等等。</li>\\n</ul>\\n<figure><img src=\\"https://raw.githubusercontent.com/dunwu/images/master/snap/202411231010326.png\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>\\n<p><em>图来自 <a href=\\"https://architecturenotes.co/p/redis\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Redis Explained</a></em></p>\\n</details>","autoDesc":true}');export{e as data};
