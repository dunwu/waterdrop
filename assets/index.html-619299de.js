import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as a,c as l,a as t,b as o,d as r,e as s}from"./app-45448717.js";const g={},d=s(`<h1 id="mq-面试" tabindex="-1"><a class="header-anchor" href="#mq-面试" aria-hidden="true">#</a> MQ 面试</h1><blockquote><p>消息队列（Message Queue，简称 MQ）技术是<strong>应用间交换信息</strong>的一种技术。</p><p>消息队列主要解决异步处理、应用间耦合，流量削锋等问题，实现高性能，高可用，可伸缩和最终一致性架构。是大型分布式系统不可缺少的中间件。</p><p>目前主流的 MQ 有：Kafka、RabbitMQ、RocketMQ、ActiveMQ，而部分数据库如 Redis、MySQL 以及 phxsql 也可实现消息队列的功能。</p><p>注意：<em>为了简便，下文中除了文章标题，一律使用 MQ 简称</em>。</p></blockquote><h2 id="mq-简介" tabindex="-1"><a class="header-anchor" href="#mq-简介" aria-hidden="true">#</a> MQ 简介</h2><h3 id="【简单】什么是-mq" tabindex="-1"><a class="header-anchor" href="#【简单】什么是-mq" aria-hidden="true">#</a> 【简单】什么是 MQ？</h3><p><strong>MQ（Message Queue，消息队列）</strong> 是一种<strong>异步通信机制</strong>，用于在不同服务、应用或系统组件之间<strong>可靠地传递消息</strong>。它的核心思想是<strong>解耦生产者和消费者</strong>，通过缓冲消息来提高系统的可靠性、扩展性和可维护性。</p><p><strong>MQ 的核心概念</strong></p><ul><li><strong>生产者（Producer）</strong>：发送消息的应用或服务。</li><li><strong>消费者（Consumer）</strong>：接收并处理消息的应用或服务。</li><li><strong>消息（Message）</strong>：传输的数据单位，可以是文本、JSON、二进制等格式。</li><li><strong>队列（Queue）</strong>：存储消息的缓冲区，遵循 <strong>FIFO（先进先出）</strong> 或优先级策略。</li><li><strong>Broker（消息代理）</strong>：负责接收、存储和转发消息的中间件（如 RabbitMQ、Kafka）。</li></ul><p>消息队列主要解决应用耦合，异步消息，流量削锋等问题，实现高性能，高可用，可伸缩和最终一致性架构。是大型分布式系统不可缺少的中间件。</p><p>MQ 是消费-生产者模型的一个典型的代表，一端往消息队列中不断写入消息，而另一端则可以读取队列中的消息。消息发布者只管把消息发布到 MQ 中而不用管谁来取，消息使用者只管从 MQ 中取消息而不管是谁发布的。这样发布者和使用者都不用知道对方的存在。</p><p>MQ 的数据可驻留在内存或磁盘上，直到它们被应用程序读取。通过 MQ，应用程序可独立地执行，它们不需要知道彼此的位置，不需要等待接收程序接收此消息。在分布式计算环境中，为了集成分布式应用，开发者需要对异构网络环境下的分布式应用提供有效的通信手段。为了管理需要共享的信息，对应用提供公共的信息交换机制是重要的。</p><p>目前主流的 MQ 有：Kafka、RabbitMQ、RocketMQ、ActiveMQ。</p><h3 id="【简单】为什么需要-mq" tabindex="-1"><a class="header-anchor" href="#【简单】为什么需要-mq" aria-hidden="true">#</a> 【简单】为什么需要 MQ？</h3><p><strong>MQ 的典型应用场景</strong></p><ul><li><strong>异步处理</strong></li><li><strong>系统解耦</strong></li><li><strong>流量削峰</strong></li><li><strong>系统间通信</strong></li><li><strong>传输缓冲</strong></li><li><strong>最终一致性</strong></li></ul><div class="hint-container info"><p class="hint-container-title">异步处理</p></div><p>MQ 可以将系统间的处理流程异步化，减少等待响应的时间，从而提高整体并发吞吐量。一般，MQ 异步处理应用于非核心流程，例如：短信/邮件通知、数据推送、上报数据到监控中心、日志中心等。</p><p>假设这样一个场景，用户向系统 A 发起请求，系统 A 处理计算只需要 <code>10ms</code>，然后通知系统 BCD 写库，系统 BCD 写库耗时分别为：<code>100ms</code>、<code>200ms</code>、<code>300ms</code>。最终总耗时为： <code>10ms+100ms+200ms+300ms=610ms</code>。此外，加上请求和响应的网络传输时间，从用户角度看，可能要等待将近 <code>1s</code> 才能得到结果。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202502021707928.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果使用 MQ，系统 A 接到请求后，耗时 <code>10ms</code> 处理计算，然后向系统 BCD 连续发送消息，假设耗时 <code>5ms</code>。那么 这一过程的总耗时为 <code>3ms + 5ms = 8ms</code>，这相比于 <code>610 ms</code>，大大缩短了响应时间。至于系统 BCD 的写库操作，只要自行消费 MQ 后处理即可，用户无需关注。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202502021707517.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="hint-container info"><p class="hint-container-title">系统解耦</p></div><p>通过 MQ，可以消除系统间的强耦合。它的好处在于：</p><ul><li>消息的消费者系统可以随意增加，无需修改生产者系统的代码。</li><li>生产者系统、消费者系统彼此不会影响对方的流程。 <ul><li>如果生产者系统宕机，消费者系统收不到消息，就不会有下一步的动作。</li><li>如果消费者系统宕机，生产者系统让然可以正常发送消息，不影响流程。</li></ul></li></ul><p>不同系统如果要建立通信，传统的做法是：调用接口。</p><p>如果需要和新的系统建立通信或删除已建立的通信，都需要修改代码，这种方案显然耦合度很高。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202502021719775.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果使用 MQ，系统间的通信只需要通过发布/订阅（Pub/Sub）模型即可，彼此没有直接联系，也就不需要相互感知，从而达到 <strong>解耦</strong>。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202502021719470.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="hint-container info"><p class="hint-container-title">流量削峰</p></div><p>当 <strong>上下游系统</strong> 处理能力存在差距的时候，利用 MQ 做一个 “<strong>漏斗</strong>” 模型，进行 <strong>流控</strong>。把 MQ 当成可靠的 <strong>消息缓冲池</strong>，进行一定程度的 <strong>消息堆积</strong>；在下游有能力处理的时候，再发送消息。</p><p>MQ 的流量削峰常用于高并发场景（例如：秒杀、团抢等业务场景），它是缓解瞬时暴增流量的核心手段之一。</p><p>如果没有 MQ，两个系统之间通过 <strong>协商</strong>、<strong>滑动窗口</strong>、<strong>限流</strong>/<strong>降级</strong>/<strong>熔断</strong> 等复杂的方案也能实现 <strong>流控</strong>。但 <strong>系统复杂性</strong> 指数级增长，势必在上游或者下游做存储，并且要处理 <strong>定时</strong>、<strong>拥塞</strong> 等一系列问题。而且每当有 <strong>处理能力有差距</strong> 的时候，都需要 <strong>单独</strong> 开发一套逻辑来维护这套逻辑。</p><p>假设某个系统读写数据库的稳定性能为每秒处理 1000 条数据。平常情况下，远远达不到这么大的处理量。假设，因为因为做活动，系统的瞬时请求量剧增，达到每秒 10000 个并发请求，数据库根本承受不了，可能直接就把数据库给整崩溃了，这样系统服务就不可用了。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202502021738906.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果使用 MQ，每秒写入 10000 条请求，但是系统 A 每秒只从 MQ 中消费 1000 条请求，然后写入数据库。这样，就不会超过数据库的承受能力，而是把请求积压在 MQ 中。只要高峰期一过，系统 A 就会很快把积压的消息给处理掉。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202502021739806.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="hint-container info"><p class="hint-container-title">系统间通信</p></div><p>消息队列一般都内置了 <strong>高效的通信机制</strong>，因此也可以用于单纯的 <strong>消息通讯</strong>，比如实现 <strong>点对点消息队列</strong> 或者 <strong>聊天室</strong> 等。</p><p><strong>生产者/消费者</strong> 模式，只需要关心消息是否 <strong>送达队列</strong>，至于谁希望订阅和需要消费，是 <strong>下游</strong> 的事情，无疑极大地减少了开发和联调的工作量。</p><div class="hint-container info"><p class="hint-container-title">传输缓冲</p></div><p>（1）MQ 常被用于做海量数据的传输缓冲。</p><p>例如，Kafka 常被用于做为各种日志数据、采集数据的数据中转。然后，Kafka 将数据转发给 Logstash、Elasticsearch 中，然后基于 Elasticsearch 来做日志中心，提供检索、聚合、分析日志的能力。开发者可以通过 Kibana 集成 Elasticsearch 数据进行可视化展示，或自行进行定制化开发。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20200930164342.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>（2）MQ 也可以被用于流式处理。</p><p>例如，Kafka 几乎已经是流计算的数据采集端的标准组件。而流计算通过实时数据处理能力，提供了更为快捷的聚合计算能力，被大量应用于链路监控、实时监控、实时数仓、实时大屏、风控、推荐等应用领域。</p><div class="hint-container info"><p class="hint-container-title">最终一致性</p></div><p><strong>最终一致性</strong> 不是 <strong>消息队列</strong> 的必备特性，但确实可以依靠 <strong>消息队列</strong> 来做 <strong>最终一致性</strong> 的事情。</p><ul><li><strong>先写消息再操作</strong>，确保操作完成后再修改消息状态。<strong>定时任务补偿机制</strong> 实现消息 <strong>可靠发送接收</strong>、业务操作的可靠执行，要注意 <strong>消息重复</strong> 与 <strong>幂等设计</strong>。</li><li>所有不保证 <code>100%</code> <strong>不丢消息</strong> 的消息队列，理论上无法实现 <strong>最终一致性</strong>。</li></ul><blockquote><p>像 <code>Kafka</code> 一类的设计，在设计层面上就有 <strong>丢消息</strong> 的可能（比如 <strong>定时刷盘</strong>，如果掉电就会丢消息）。哪怕只丢千分之一的消息，业务也必须用其他的手段来保证结果正确。</p></blockquote><h3 id="【中等】引入-mq-带来哪些问题" tabindex="-1"><a class="header-anchor" href="#【中等】引入-mq-带来哪些问题" aria-hidden="true">#</a> 【中等】引入 MQ 带来哪些问题？</h3><p>任何技术都会有利有弊，MQ 给整体系统架构带来很多好处，但也会付出一定的代价。</p><p>MQ 主要引入了以下问题：</p><ul><li><strong>系统可用性降低</strong>：引入了 MQ 后，通信需要基于 MQ 完成，如果 MQ 宕机，则服务不可用。因此，MQ 要保证是高可用的。</li><li><strong>系统复杂度提高</strong>：使用 MQ，需要关注一些新的问题： <ul><li>如何保证消息没有 <strong>重复消费</strong>？</li><li>如何处理 <strong>消息丢失</strong> 的问题？</li><li>如何保证传递 <strong>消息的顺序性</strong>？</li><li>如何处理大量 <strong>消息积压</strong> 的问题？</li></ul></li><li><strong>一致性问题</strong>：假设系统 A 处理完直接返回成功的结果给用户，用户认为请求成功。但如果此时，系统 BCD 中只要有任意一个写库失败，那么数据就不一致了。这种情况如何处理？</li></ul><h3 id="【中等】mq-有哪些通信模型" tabindex="-1"><a class="header-anchor" href="#【中等】mq-有哪些通信模型" aria-hidden="true">#</a> 【中等】MQ 有哪些通信模型？</h3><p>MQ（消息队列）常见的通信模型主要有以下几种，适用于不同的业务场景：</p><p><strong>点对点（Point-to-Point / Queue）</strong></p><ul><li><strong>特点</strong>：消息由 <strong>一个生产者</strong> 发送到 <strong>一个队列</strong>，<strong>只有一个消费者</strong> 能消费该消息（竞争消费），消息被消费后即从队列删除。</li><li><strong>适用场景</strong>：任务分发（如订单处理、异步任务）。</li><li><strong>示例</strong>：RabbitMQ 的普通队列、ActiveMQ 的 Queue。</li></ul><p><strong>发布/订阅（Publish/Subscribe / Topic）</strong></p><ul><li><strong>特点</strong>：消息由 <strong>一个生产者</strong> 发送到 <strong>Topic（主题）</strong>，<strong>多个消费者</strong>（订阅者）可同时接收同一消息，消息会广播给所有订阅者。</li><li><strong>适用场景</strong>：事件通知（如系统日志广播、实时数据同步）。</li><li><strong>示例</strong>：RabbitMQ 的 Exchange + Fanout 模式、Kafka 的 Topic。</li></ul><p><strong>请求/响应（Request/Reply）</strong></p><ul><li><strong>特点</strong>：生产者发送消息后，消费者处理并返回响应（类似 RPC），通常需要 <strong>临时队列</strong> 存储响应。</li><li><strong>适用场景</strong>：需要同步结果的异步调用（如支付状态查询）。</li><li><strong>示例</strong>：RabbitMQ 的 RPC 模式、Kafka 的 Request-Reply 扩展。</li></ul><p><strong>扇出（Fanout）</strong></p><ul><li><strong>特点</strong>：消息发送到 Exchange 后，<strong>无条件广播</strong> 给所有绑定的队列（无路由规则），类似发布/订阅，但更简单。</li><li><strong>适用场景</strong>：实时通知多个系统（如价格变动、库存更新）。</li><li><strong>示例</strong>：RabbitMQ 的 Fanout Exchange。</li></ul><p><strong>路由（Routing / Direct）</strong></p><ul><li><strong>特点</strong>：消息根据 <strong>Routing Key</strong> 被精准投递到匹配的队列，消费者只接收符合规则的消息。</li><li><strong>适用场景</strong>：条件过滤（如错误日志分级处理）。</li><li><strong>示例</strong>：RabbitMQ 的 Direct Exchange。</li></ul><p><strong>主题路由（Topic）</strong></p><ul><li><strong>特点</strong>：基于 <strong>通配符</strong>（如 <code>user.*</code>）匹配 Routing Key，实现灵活订阅，比 Direct 更灵活，比 Fanout 更精准。</li><li><strong>适用场景</strong>：复杂事件分发（如物联网设备消息分类）。</li><li><strong>示例</strong>：RabbitMQ 的 Topic Exchange、MQTT 的 Topic。</li></ul><p><strong>总结</strong></p><table><thead><tr><th>模型</th><th>生产者-消费者关系</th><th>典型应用场景</th></tr></thead><tbody><tr><td><strong>点对点</strong></td><td>1:1（竞争消费）</td><td>任务队列、订单处理</td></tr><tr><td><strong>发布/订阅</strong></td><td>1:N（广播）</td><td>日志广播、实时通知</td></tr><tr><td><strong>请求/响应</strong></td><td>1:1（带响应）</td><td>异步 RPC、结果回调</td></tr><tr><td><strong>扇出</strong></td><td>1:N（无条件广播）</td><td>多系统数据同步</td></tr><tr><td><strong>路由</strong></td><td>1:1（精准匹配）</td><td>条件过滤、优先级队列</td></tr><tr><td><strong>主题路由</strong></td><td>1:N（通配符匹配）</td><td>复杂事件分类（如 IoT）</td></tr></tbody></table><h3 id="【中等】mq-推拉模式各有什么利弊-如何选择" tabindex="-1"><a class="header-anchor" href="#【中等】mq-推拉模式各有什么利弊-如何选择" aria-hidden="true">#</a> 【中等】MQ 推拉模式各有什么利弊，如何选择？</h3><p>消息引擎（MQ）获取消息的模式主要分为 <strong>Push（推）</strong> 和 <strong>Pull（拉）</strong> 两种，不同消息队列中间件采用不同的策略，部分系统还支持 <strong>混合模式</strong>。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202502031317162.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>Push 模式（服务端推送）</strong></p><ul><li><strong>特点</strong>： <ul><li><strong>消息由 Broker 主动推送给消费者</strong>，消费者被动接收。</li><li>实时性高，减少消费者轮询开销。</li></ul></li><li><strong>优点</strong>：低延迟，适合实时性要求高的场景（如即时通讯）。</li><li><strong>缺点</strong>：可能造成消费者过载（需背压机制控制流速）。</li><li><strong>典型实现</strong>：RabbitMQ、ActiveMQ、RocketMQ（默认长轮询模拟 Push）。</li></ul><p><strong>Pull 模式（客户端拉取）</strong></p><ul><li><strong>特点</strong>： <ul><li><strong>消费者主动从 Broker 拉取消息</strong>，按需获取。</li><li>消费者控制消费速率。</li></ul></li><li><strong>优点</strong>：避免消息堆积冲击消费者，适合高吞吐场景（如日志处理）。</li><li><strong>缺点</strong>：存在空轮询开销（可通过长轮询优化）。</li><li><strong>典型实现</strong>：Kafka、Pulsar（原生 Pull）、RocketMQ（支持显式 Pull）。</li></ul><p><strong>长轮询（Long Polling）</strong></p><ul><li><strong>特点</strong>：<strong>Push 和 Pull 的折中方案</strong>。消费者发起请求后，Broker 若无消息则保持连接，直到有消息或超时才返回。</li><li><strong>优点</strong>：减少无效轮询，平衡实时性与服务端压力。</li><li><strong>典型实现</strong>：RocketMQ（默认模式）、HTTP 长轮询（如 WebSocket）。</li></ul><p><strong>混合模式（Push + Pull）</strong></p><ul><li><strong>特点</strong>： <ul><li>关键消息用 Push 保证实时性，批量数据用 Pull 提高吞吐。</li><li>消费者可动态切换模式。</li></ul></li><li><strong>典型实现</strong>：Pulsar（支持多模式）、部分自研 MQ 系统。</li></ul><p><strong>对比总结</strong></p><table><thead><tr><th>模式</th><th>实时性</th><th>服务端压力</th><th>消费者控制力</th><th>适用场景</th></tr></thead><tbody><tr><td><strong>Push</strong></td><td>高</td><td>高</td><td>低</td><td>即时通讯、事件通知</td></tr><tr><td><strong>Pull</strong></td><td>低</td><td>低</td><td>高</td><td>大数据处理、日志收集</td></tr><tr><td><strong>长轮询</strong></td><td>中</td><td>中</td><td>中</td><td>平衡实时性与性能（如电商）</td></tr></tbody></table><p><strong>选择建议</strong></p><ul><li>需要低延迟 → <strong>Push</strong>（如 RabbitMQ）。</li><li>需要高吞吐 → <strong>Pull</strong>（如 Kafka）。</li><li>平衡场景 → <strong>长轮询</strong>（如 RocketMQ）。</li></ul><h2 id="mq-可靠传输" tabindex="-1"><a class="header-anchor" href="#mq-可靠传输" aria-hidden="true">#</a> MQ 可靠传输</h2><h3 id="【困难】如何保证-mq-消息不丢失" tabindex="-1"><a class="header-anchor" href="#【困难】如何保证-mq-消息不丢失" aria-hidden="true">#</a> 【困难】如何保证 MQ 消息不丢失？</h3><p>要保证 MQ 中的消息不丢失，需从 <strong>生产端、MQ 服务端、消费端</strong> 三个环节进行可靠性设计。一言以蔽之，<strong>生产端确认+服务端持久化+消费端手动 ACK+监控补偿</strong> 是保证消息不丢失的核心逻辑，需根据业务场景权衡性能与可靠性。</p><div class="hint-container info"><p class="hint-container-title">生产端防丢失</p></div><ul><li><strong>确认机制</strong>：开启生产者确认（如 RabbitMQ 的 <code>publisher confirms</code>、Kafka 的 <code>acks=all</code>），确保消息成功写入 Broker。</li><li><strong>重试策略</strong>：异常时自动重试，避免因短暂故障丢失。</li><li><strong>事务</strong>（强一致性）：使用 MQ 事务（如 RabbitMQ 的 <code>txSelect</code>），但性能较低，推荐用确认机制+重试。</li><li><strong>本地消息表</strong>（最终一致性）：消息先存数据库，异步推送 MQ，定时补偿失败消息。</li></ul><div class="hint-container info"><p class="hint-container-title">MQ 服务端防丢失</p></div><ul><li><strong>持久化</strong>：消息+队列持久化（如 RabbitMQ 的 <code>delivery_mode=2</code>、Kafka 的 <code>replication-factor≥2</code>）。</li><li><strong>高可用架构</strong>：集群部署（如 Kafka 多副本、RabbitMQ 镜像队列），避免单点故障。</li><li><strong>磁盘可靠性</strong>：关闭磁盘写缓存（Kafka 的 <code>flush.messages</code> 配置），防止断电丢数据。</li></ul><div class="hint-container info"><p class="hint-container-title">消费端防丢失</p></div><ul><li><strong>手动 ACK</strong>：关闭自动确认（如 RabbitMQ 的 <code>autoAck=false</code>，Kafka 的<code>enable.auto.commit=false</code>），业务处理成功后再手动提交。</li><li><strong>死信队列</strong>：处理失败的消息转入死信队列，人工干预或自动重试。</li></ul><div class="hint-container info"><p class="hint-container-title">监控与补偿</p></div><ul><li><strong>消息堆积告警</strong>：监控队列长度，及时发现异常。</li><li><strong>定期对账</strong>：对比生产与消费的记录，修复差异（如定时扫描数据库补发）。</li></ul><div class="hint-container info"><p class="hint-container-title">主流 MQ 处理</p></div><table><thead><tr><th style="text-align:left;">中间件</th><th style="text-align:left;">关键配置项</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>Kafka</strong></td><td style="text-align:left;"><code>acks=all</code>, <code>min.insync.replicas=2</code>, 启用副本</td></tr><tr><td style="text-align:left;"><strong>RabbitMQ</strong></td><td style="text-align:left;">持久化队列+消息，生产者确认，镜像队列</td></tr><tr><td style="text-align:left;"><strong>RocketMQ</strong></td><td style="text-align:left;">同步刷盘 (<code>flushDiskType=SYNC_FLUSH</code>), 多副本</td></tr></tbody></table><h3 id="【困难】如何处理重复-mq-消息" tabindex="-1"><a class="header-anchor" href="#【困难】如何处理重复-mq-消息" aria-hidden="true">#</a> 【困难】如何处理重复 MQ 消息？</h3><div class="hint-container info"><p class="hint-container-title">MQ 为什么会出现重复消息？</p></div><ul><li>生产端重试（网络抖动时自动重发）</li><li>消费端超时后 MQ 重新投递（如 RabbitMQ 未及时 ACK）</li><li>消息队列集群脑裂（如 Kafka 副本切换）</li></ul><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202502022054834.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>以 Kafka 举例，Kafka 每个 Partition 都是一个有序的、不可变的记录序列，不断追加到结构化的提交日志中。Partition 中为每条记录分配一个连续的 id 号，称为偏移量（Offset），用于唯一标识 Partition 内的记录。</p><p>Kafka 的客户端和 Broker 都会保存 Offset。客户端消费消息后，每隔一段时间，就把已消费的 Offset 提交给 Kafka Broker，表示已消费。</p><p>在这个过程中，如果客户端应用消费消息后，因为宕机、重启等情况而没有提交已消费的 Offset 。当系统恢复后，会继续消费消息，由于 Offset 未提交，就会出现重复消费的问题。</p><div class="hint-container info"><p class="hint-container-title">重复消息通用解决方案</p></div><p>处理重复消息 = <strong>“业务幂等为基础，缓存/DB 去重为辅助，监控兜底保万一”</strong>。</p><p>处理 MQ 重复消息的核心思路是 <strong>幂等性设计</strong> + <strong>去重机制</strong>，确保即使消息被多次消费，业务结果也不会出错。</p><p>（1）<strong>业务层幂等设计</strong></p><ul><li><p><strong>唯一标识</strong>：每条消息携带唯一业务 ID（如订单号、支付流水号），处理前先查库判断是否已执行。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">status</span> <span class="token keyword">FROM</span> orders <span class="token keyword">WHERE</span> order_id <span class="token operator">=</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">;</span>
<span class="token comment">-- 若已处理则直接跳过</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>状态机控制</strong>：业务状态严格流转（如「已支付」订单不允许重复扣款）。</p></li></ul><p>（2）<strong>去重表/缓存</strong></p><ul><li><p><strong>数据库去重表</strong>：消费前先 <code>INSERT</code> 唯一键（消息 ID），利用主键冲突避免重复处理。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> message_processed<span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;msg_123&#39;</span><span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">DUPLICATE</span> <span class="token keyword">KEY</span> <span class="token keyword">IGNORE</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>Redis 去重</strong>：用 <code>SETNX</code> 设置消息 ID 过期时间（适合高频场景）。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>SETNX msg_123 <span class="token number">1</span> EX <span class="token number">3600</span>  <span class="token comment"># 1 小时内不重复处理</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><div class="hint-container info"><p class="hint-container-title">主流 MQ 处理</p></div><table><thead><tr><th>消息队列</th><th>重复触发场景</th><th>推荐方案</th></tr></thead><tbody><tr><td><strong>Kafka</strong></td><td>消费者重启导致 offset 回滚</td><td>业务幂等 + 本地 offset 持久化</td></tr><tr><td><strong>RabbitMQ</strong></td><td>未 ACK 导致重新入队</td><td>手动 ACK + 死信队列监控</td></tr><tr><td><strong>RocketMQ</strong></td><td>消息重试机制（16 次后进死信）</td><td>消费日志 + 人工干预</td></tr></tbody></table><p>极端情况兜底：</p><ul><li><strong>对账系统</strong>：定时扫描业务数据与消息记录，修复不一致（如定时补发短信）。</li><li><strong>人工告警</strong>：监控重复消息频率（如 1 分钟同消息 ID 出现 3 次以上则报警）。</li></ul><div class="hint-container info"><p class="hint-container-title">方案选型</p></div><ul><li><strong>低频业务</strong>：数据库唯一索引（简单可靠）。</li><li><strong>高频业务</strong>：Redis + 过期时间（高性能）。</li><li><strong>金融级场景</strong>：幂等 + 对账 + 人工审核（强一致）。</li></ul><h3 id="【困难】如何保证-mq-消息的顺序性" tabindex="-1"><a class="header-anchor" href="#【困难】如何保证-mq-消息的顺序性" aria-hidden="true">#</a> 【困难】如何保证 MQ 消息的顺序性？</h3><p>要保证 MQ 消息的顺序性，需从 <strong>生产、存储、消费</strong> 三个环节控制。</p><p>核心思路是：<strong>“同一业务 ID 锁定同一队列 + 单线程消费”</strong>，需结合业务需求选择局部顺序或全局顺序方案。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202502022152450.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="hint-container info"><p class="hint-container-title">生产端保序</p></div><ul><li><p><strong>单生产者+单线程发送</strong>：同一业务 ID（如订单 ID）的消息由 <strong>同一生产者线程</strong> 顺序发送，避免多线程并发乱序。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 示例：相同 orderId 的消息由同一线程发送</span>
mqProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> orderId<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 通过 hash 选择分区</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>禁用异步发送重试</strong>：异步发送失败时可能乱序，需同步发送或关闭重试（如 Kafka 配置 <code>max.in.flight.requests.per.connection=1</code>）。</p></li></ul><div class="hint-container info"><p class="hint-container-title">MQ 服务端保序</p></div><ul><li><strong>单分区/队列有序</strong><ul><li><p><strong>Kafka/RocketMQ</strong>：同一业务 ID 的消息发送到 <strong>同一分区</strong>（Partition）。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 根据 orderId 哈希选择分区</span>
<span class="token keyword">int</span> partition <span class="token operator">=</span> orderId<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> partitionNum<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>RabbitMQ</strong>：使用单队列（或一致性哈希交换器绑定唯一队列）。</p></li></ul></li><li><strong>关闭分区/队列并行</strong>：避免服务端多分区/多副本间的顺序混乱（如 Kafka 的 <code>unclean.leader.election.enable=false</code>）。</li></ul><div class="hint-container info"><p class="hint-container-title">消费端保序</p></div><ul><li><strong>单消费者串行消费</strong><ul><li>同一队列/分区由 <strong>单消费者线程</strong> 处理（如 Kafka 单线程消费或 <code>max.poll.records=1</code>）。</li><li>多消费者时，相同业务 ID 的消息路由到同一消费者（如 RocketMQ 的 <code>MessageQueueSelector</code>）。</li></ul></li><li><strong>内存队列排序</strong>（复杂场景）：消费者拉取消息后，按业务 ID 分组存入内存队列，由不同线程分别串行处理。</li></ul><div class="hint-container info"><p class="hint-container-title">特殊场景处理</p></div><ul><li><strong>全局严格顺序</strong>：牺牲性能，全链路单线程（生产→MQ→消费），仅适合低吞吐场景（如 Binlog 同步）。</li><li><strong>局部顺序</strong>：仅保证同一业务 ID 的顺序（如订单的创建→支付→退款），允许不同订单并发。</li></ul><div class="hint-container info"><p class="hint-container-title">主流 MQ 处理</p></div><table><thead><tr><th>消息队列</th><th>保序方案</th><th>适用场景</th></tr></thead><tbody><tr><td><strong>Kafka</strong></td><td>单分区有序 + 单消费者线程</td><td>高吞吐局部顺序</td></tr><tr><td><strong>RocketMQ</strong></td><td>顺序消息（MessageQueueSelector）</td><td>电商订单流程</td></tr><tr><td><strong>RabbitMQ</strong></td><td>单队列 + 单消费者</td><td>低吞吐严格顺序</td></tr></tbody></table><div class="hint-container info"><p class="hint-container-title">注意事项</p></div><ul><li><strong>性能权衡</strong>：顺序性越高，并发性能越低（需根据业务容忍度平衡）。</li><li><strong>错误处理</strong>：消费失败时需暂停当前分区消费（如 Kafka 的 <code>pause()</code>），避免跳过消息导致乱序。</li><li><strong>监控</strong>：定期检查消息积压和顺序偏移（如 Kafka 的 <code>consumer.position()</code>）。</li></ul><h3 id="【困难】如何处理-mq-消息积压" tabindex="-1"><a class="header-anchor" href="#【困难】如何处理-mq-消息积压" aria-hidden="true">#</a> 【困难】如何处理 MQ 消息积压？</h3><p>处理 MQ 消息积压的核心思路是 <strong>“快速消费存量+优化生产速率”</strong>，需结合监控、扩容、降级等手段综合治理。</p><p>大致可以归纳为：</p><ul><li><strong>短期</strong>：扩容+降级，优先恢复服务。</li><li><strong>长期</strong>：优化消费逻辑+自动化运维，预防再次积压。</li><li><strong>口诀</strong>：<strong>监控早发现，扩容扛流量，消费改批量，生产限流速</strong>。</li></ul><div class="hint-container info"><p class="hint-container-title">快速消费积压消息</p></div><ul><li><strong>增加消费者实例</strong>：横向扩展消费者服务（如 Kubernetes 动态扩容 Pod），注意分区数限制（Kafka 需提前规划足够分区）。</li><li><strong>提升消费并行度</strong>： <ul><li>调整消费者并发参数（如 Kafka 的 <code>max.poll.records</code>、RabbitMQ 的 <code>prefetch_count</code>）。</li><li>多线程消费（需保证无顺序要求的场景）。</li></ul></li><li><strong>临时降级</strong>：非核心业务暂停消费（如日志处理），集中资源处理核心业务消息。</li></ul><div class="hint-container info"><p class="hint-container-title">优化消费能力</p></div><ul><li><strong>批量处理</strong>：合并多条消息一次处理（如数据库批量插入）。</li><li><strong>异步化+削峰</strong>：消费者将消息存入内存队列，后台线程异步处理，避免同步阻塞。</li><li><strong>跳过非关键逻辑</strong>：临时关闭日志记录、数据校验等非必要操作。</li></ul><div class="hint-container info"><p class="hint-container-title">控制生产端流量</p></div><ul><li><strong>限流</strong>：生产端启用速率限制（如 Kafka 的 <code>quota</code>、Redis 令牌桶）。</li><li><strong>削峰填谷</strong>：消息先写入缓存层（如 Redis List），再匀速写入 MQ。</li><li><strong>业务降级</strong>：高峰期关闭非核心功能的消息生产（如暂停推荐系统更新）。</li></ul><div class="hint-container info"><p class="hint-container-title">监控与告警</p></div><ul><li><strong>实时监控指标</strong>： <ul><li>队列堆积量（如 Kafka 的 <code>lag</code>）、消费速率（TPS）、消费者状态。</li><li>设置阈值告警（如积压超过 10W 条触发短信通知）。</li></ul></li><li><strong>根因分析工具</strong>： <ul><li>日志分析（消费者卡顿、GC 问题）。</li><li>链路追踪（如 SkyWalking 定位慢消费）。</li></ul></li></ul><div class="hint-container info"><p class="hint-container-title">长期预防措施</p></div><ul><li><strong>容量规划</strong>：根据业务峰值预先扩容分区/队列（如 Kafka 分区数 = 消费者数 × 1.5）。</li><li><strong>死信队列+重试机制</strong>：处理失败的消息转入死信队列，避免阻塞正常消费。</li><li><strong>自动化扩缩容</strong>：基于积压指标动态调整消费者数量（如 K8s HPA）。</li></ul><div class="hint-container info"><p class="hint-container-title">主流 MQ 处理</p></div><table><thead><tr><th>消息队列</th><th>关键操作</th></tr></thead><tbody><tr><td><strong>Kafka</strong></td><td>增加分区+消费者，调整 <code>fetch.max.bytes</code></td></tr><tr><td><strong>RabbitMQ</strong></td><td>镜像队列扩容，提高 <code>prefetch_count</code></td></tr><tr><td><strong>RocketMQ</strong></td><td>消费组扩容，启用定时消息延迟消费</td></tr></tbody></table><h2 id="mq-高可用" tabindex="-1"><a class="header-anchor" href="#mq-高可用" aria-hidden="true">#</a> MQ 高可用</h2><h3 id="【困难】如何保证-mq-的高可用" tabindex="-1"><a class="header-anchor" href="#【困难】如何保证-mq-的高可用" aria-hidden="true">#</a> 【困难】如何保证 MQ 的高可用？</h3><p>不同 MQ 实现高可用的原理各不相同。因为 Kafka 比较具有代表性，所以这里以 Kafka 为例。</p><div class="hint-container info"><p class="hint-container-title">Kafka 的核心概念</p></div><p>了解 Kafka，必须先了解 Kafka 的核心概念：</p><ul><li><p><strong>Broker</strong> - Kafka 集群包含一个或多个节点，这种节点被称为 Broker。</p></li><li><p><strong>Topic</strong> - 每条发布到 Kafka 集群的消息都有一个类别，这个类别被称为 Topic。（不同 Topic 的消息是物理隔离的；同一个 Topic 的消息保存在一个或多个 Broker 上，但用户只需指定消息的 Topic 即可生产或消费数据而不必关心数据存于何处）。对于每一个 Topic， Kafka 集群都会维持一个分区日志。</p></li><li><p><strong>Partition</strong> - 了提高 Kafka 的吞吐率，每个 Topic 包含一个或多个 Partition，每个 Partition 在物理上对应一个文件夹，该文件夹下存储这个 Partition 的所有消息和索引文件。</p><ul><li>Kafka 日志的分区（Partition）分布在 Kafka 集群的节点上。每个节点在处理数据和请求时，共享这些分区。每一个分区都会在已配置的节点上进行备份，确保容错性。</li></ul></li></ul><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/distributed/mq/kafka/kafka-cluster-roles.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><div class="hint-container info"><p class="hint-container-title">Kafka 的副本机制</p></div><p>Kafka 是如何实现高可用的呢？</p><p>Kafka 在 0.8 以前的版本中，如果一个 Broker 宕机了，其上面的 Partition 都不能用了，这自然不是高可用的。</p><p>为了实现高可用，Kafka 引入了复制功能，简单来说，就是副本机制（ Replicate ）：</p><p><strong>每个 Partition 都有一个 Leader，零个或多个 Follower</strong>。Leader 和 Follower 都是 Broker，每个 Broker 都会成为某些分区的 Leader 和某些分区的 Follower，因此集群的负载是平衡的。</p><ul><li><strong>Leader 处理一切对 Partition （分区）的读写请求</strong>；</li><li><strong>而 Follower 只需被动的同步 Leader 上的数据</strong>。</li></ul><p><strong>同一个 Topic 的不同 Partition 会分布在多个 Broker 上，而且一个 Partition 还会在其他的 Broker 上面进行备份</strong>，Producer 在发布消息到某个 Partition 时，先找到该 Partition 的 Leader，然后向这个 Leader 推送消息；每个 Follower 都从 Leader 拉取消息，拉取消息成功之后，向 Leader 发送一个 ACK 确认。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/distributed/mq/kafka/kafka-replication.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>FAQ</p><p>问：为什么让 Leader 处理一切对对 Partition （分区）的读写请求？</p><p>答：因为如果允许所有 Broker 都可以处理读写请求，就可能产生数据一致性问题。</p></blockquote><div class="hint-container info"><p class="hint-container-title">Kafka 选举 Leader</p></div><p>由上文可知，Partition 在多个 Broker 上存在副本。</p><p>如果某个 Follower 宕机，啥事儿没有，正常工作。</p><p>如果 Leader 宕机了，会从 Follower 中<strong>重新选举</strong>一个新的 Leader。</p><h2 id="mq-架构" tabindex="-1"><a class="header-anchor" href="#mq-架构" aria-hidden="true">#</a> MQ 架构</h2><h3 id="【困难】kafka、activemq、rabbitmq、rocketmq-有什么优缺点" tabindex="-1"><a class="header-anchor" href="#【困难】kafka、activemq、rabbitmq、rocketmq-有什么优缺点" aria-hidden="true">#</a> 【困难】Kafka、ActiveMQ、RabbitMQ、RocketMQ 有什么优缺点？</h3><div class="hint-container info"><p class="hint-container-title">ActiveMQ</p></div><p><code>ActiveMQ</code> 是由 <code>Apache</code> 出品，<code>ActiveMQ</code> 是一个完全支持<code>JMS1.1</code> 和 <code>J2EE 1.4</code> 规范的 <code>JMS Provider</code> 实现。它非常快速，支持 <strong>多种语言的客户端</strong> 和 <strong>协议</strong>，而且可以非常容易的嵌入到企业的应用环境中，并有许多高级功能。</p><p><strong>(a) 主要特性</strong></p><ol><li><strong>服从 JMS 规范</strong>：<code>JMS</code> 规范提供了良好的标准和保证，包括：<strong>同步</strong> 或 <strong>异步</strong> 的消息分发，一次和仅一次的消息分发，<strong>消息接收</strong> 和 <strong>订阅</strong> 等等。遵从 <code>JMS</code> 规范的好处在于，不论使用什么 <code>JMS</code> 实现提供者，这些基础特性都是可用的；</li><li><strong>连接灵活性</strong>：<code>ActiveMQ</code> 提供了广泛的 <strong>连接协议</strong>，支持的协议有：<code>HTTP/S</code>，<code>IP</code> <strong>多播</strong>，<code>SSL</code>，<code>TCP</code>，<code>UDP</code> 等等。对众多协议的支持让 <code>ActiveMQ</code> 拥有了很好的灵活性；</li><li><strong>支持的协议种类多</strong>：<code>OpenWire</code>、<code>STOMP</code>、<code>REST</code>、<code>XMPP</code>、<code>AMQP</code>；</li><li><strong>持久化插件和安全插件</strong>：<code>ActiveMQ</code> 提供了 <strong>多种持久化</strong> 选择。而且，<code>ActiveMQ</code> 的安全性也可以完全依据用户需求进行 <strong>自定义鉴权</strong> 和 <strong>授权</strong>；</li><li><strong>支持的客户端语言种类多</strong>：除了 <code>Java</code> 之外，还有：<code>C/C++</code>，<code>.NET</code>，<code>Perl</code>，<code>PHP</code>，<code>Python</code>，<code>Ruby</code>；</li><li><strong>代理集群</strong>：多个 <code>ActiveMQ</code> <strong>代理</strong> 可以组成一个 <strong>集群</strong> 来提供服务；</li><li><strong>异常简单的管理</strong>：<code>ActiveMQ</code> 是以开发者思维被设计的。所以，它并不需要专门的管理员，因为它提供了简单又使用的管理特性。有很多中方法可以 <strong>监控</strong> <code>ActiveMQ</code> 不同层面的数据，包括使用在 <code>JConsole</code> 或者在 <code>ActiveMQ</code> 的 <code>Web Console</code> 中使用 <code>JMX</code>。通过处理 <code>JMX</code> 的告警消息，通过使用 <strong>命令行脚本</strong>，甚至可以通过监控各种类型的 <strong>日志</strong>。</li></ol><p><strong>(b) 部署环境</strong></p><p><code>ActiveMQ</code> 可以运行在 <code>Java</code> 语言所支持的平台之上。使用 <code>ActiveMQ</code> 需要：</p><ul><li><code>Java JDK</code></li><li><code>ActiveMQ</code> 安装包</li></ul><p><strong>(c) 优点</strong></p><ol><li><strong>跨平台</strong> (<code>JAVA</code> 编写与平台无关，<code>ActiveMQ</code> 几乎可以运行在任何的 <code>JVM</code> 上）；</li><li>可以用 <code>JDBC</code>：可以将 <strong>数据持久化</strong> 到数据库。虽然使用 <code>JDBC</code> 会降低 <code>ActiveMQ</code> 的性能，但是数据库一直都是开发人员最熟悉的存储介质；</li><li>支持 <code>JMS</code> 规范：支持 <code>JMS</code> 规范提供的 <strong>统一接口</strong>;</li><li>支持 <strong>自动重连</strong> 和 <strong>错误重试机制</strong>；</li><li>有安全机制：支持基于 <code>shiro</code>，<code>jaas</code> 等多种 <strong>安全配置机制</strong>，可以对 <code>Queue/Topic</code> 进行 <strong>认证和授权</strong>；</li><li>监控完善：拥有完善的 <strong>监控</strong>，包括 <code>Web Console</code>，<code>JMX</code>，<code>Shell</code> 命令行，<code>Jolokia</code> 的 <code>RESTful API</code>；</li><li>界面友善：提供的 <code>Web Console</code> 可以满足大部分情况，还有很多 <strong>第三方的组件</strong> 可以使用，比如 <code>hawtio</code>；</li></ol><p><strong>(d) 缺点</strong></p><ol><li>社区活跃度不及 <code>RabbitMQ</code> 高；</li><li>根据其他用户反馈，会出莫名其妙的问题，会 <strong>丢失消息</strong>；</li><li>目前重心放到 <code>activemq 6.0</code> 产品 <code>Apollo</code>，对 <code>5.x</code> 的维护较少；</li><li>不适合用于 <strong>上千个队列</strong> 的应用场景；</li></ol><div class="hint-container info"><p class="hint-container-title">RabbitMQ</p></div><p><code>RabbitMQ</code> 于 <code>2007</code> 年发布，是一个在 <code>AMQP</code> (<strong>高级消息队列协议</strong>) 基础上完成的，可复用的企业消息系统，是当前最主流的消息中间件之一。</p><p><strong>(a) 主要特性</strong></p><ol><li><strong>可靠性</strong>：提供了多种技术可以让你在 <strong>性能</strong> 和 <strong>可靠性</strong> 之间进行 <strong>权衡</strong>。这些技术包括 <strong>持久性机制</strong>、<strong>投递确认</strong>、<strong>发布者证实</strong> 和 <strong>高可用性机制</strong>；</li><li><strong>灵活的路由</strong>：消息在到达队列前是通过 <strong>交换机</strong> 进行 <strong>路由</strong> 的。<code>RabbitMQ</code> 为典型的路由逻辑提供了 <strong>多种内置交换机</strong> 类型。如果你有更复杂的路由需求，可以将这些交换机组合起来使用，你甚至可以实现自己的交换机类型，并且当做 <code>RabbitMQ</code> 的 <strong>插件</strong> 来使用；</li><li><strong>消息集群</strong>：在相同局域网中的多个 <code>RabbitMQ</code> 服务器可以 <strong>聚合</strong> 在一起，作为一个独立的逻辑代理来使用；</li><li><strong>队列高可用</strong>：队列可以在集群中的机器上 <strong>进行镜像</strong>，以确保在硬件问题下还保证 <strong>消息安全</strong>；</li><li><strong>支持多种协议</strong>：支持 <strong>多种消息队列协议</strong>；</li><li><strong>支持多种语言</strong>：用 <code>Erlang</code> 语言编写，支持只要是你能想到的 <strong>所有编程语言</strong>；</li><li><strong>管理界面</strong>： <code>RabbitMQ</code> 有一个易用的 <strong>用户界面</strong>，使得用户可以 <strong>监控</strong> 和 <strong>管理</strong> 消息 <code>Broker</code> 的许多方面；</li><li><strong>跟踪机制</strong>：如果 <strong>消息异常</strong>，<code>RabbitMQ</code> 提供消息跟踪机制，使用者可以找出发生了什么；</li><li><strong>插件机制</strong>：提供了许多 <strong>插件</strong>，来从多方面进行扩展，也可以编写自己的插件。</li></ol><p><strong>(b) 部署环境</strong></p><p><code>RabbitMQ</code> 可以运行在 <code>Erlang</code> 语言所支持的平台之上，包括 <code>Solaris</code>，<code>BSD</code>，<code>Linux</code>，<code>MacOSX</code>，<code>TRU64</code>，<code>Windows</code> 等。使用 <code>RabbitMQ</code> 需要：</p><ul><li><code>ErLang</code> 语言包</li><li><code>RabbitMQ</code> 安装包</li></ul><p><strong>(c) 优点</strong></p><ol><li>由于 <code>Erlang</code> 语言的特性，消息队列性能较好，支持 <strong>高并发</strong>；</li><li>健壮、稳定、易用、<strong>跨平台</strong>、支持 <strong>多种语言</strong>、文档齐全；</li><li>有消息 <strong>确认机制</strong> 和 <strong>持久化机制</strong>，可靠性高；</li><li>高度可定制的 <strong>路由</strong>；</li><li><strong>管理界面</strong> 较丰富，在互联网公司也有较大规模的应用，社区活跃度高。</li></ol><p><strong>(d) 缺点</strong></p><ol><li>尽管结合 <code>Erlang</code> 语言本身的并发优势，性能较好，但是不利于做 <strong>二次开发和维护</strong>；</li><li>实现了 <strong>代理架构</strong>，意味着消息在发送到客户端之前可以在 <strong>中央节点</strong> 上排队。此特性使得 <code>RabbitMQ</code> 易于使用和部署，但是使得其 <strong>运行速度较慢</strong>，因为中央节点 <strong>增加了延迟</strong>，<strong>消息封装后</strong> 也比较大；</li><li>需要学习 <strong>比较复杂</strong> 的 <strong>接口和协议</strong>，学习和维护成本较高。</li></ol><div class="hint-container info"><p class="hint-container-title">RocketMQ</p></div><p><code>RocketMQ</code> 出自 <strong>阿里</strong> 的开源产品，用 <code>Java</code> 语言实现，在设计时参考了 <code>Kafka</code>，并做出了自己的一些改进，<strong>消息可靠性上</strong> 比 <code>Kafka</code> 更好。<code>RocketMQ</code> 在阿里内部 \b 被广泛应用在 <strong>订单</strong>，<strong>交易</strong>，<strong>充值</strong>，<strong>流计算</strong>，<strong>消息推送</strong>，<strong>日志流式处理</strong>，<code>binglog</code> <strong>分发</strong> 等场景。</p><p><strong>(a) 主要特性</strong></p><ol><li>基于 <strong>队列模型</strong>：具有 <strong>高性能</strong>、<strong>高可靠</strong>、<strong>高实时</strong>、<strong>分布式</strong> 等特点；</li><li><code>Producer</code>、<code>Consumer</code>、<strong>队列</strong> 都支持 <strong>分布式</strong>；</li><li><code>Producer</code> 向一些队列轮流发送消息，<strong>队列集合</strong> 称为 <code>Topic</code>。<code>Consumer</code> 如果做 <strong>广播消费</strong>，则一个 <code>Consumer</code> 实例消费这个 <code>Topic</code> 对应的 <strong>所有队列</strong>；如果做 <strong>集群消费</strong>，则 <strong>多个</strong> <code>Consumer</code> 实例 <strong>平均消费</strong> 这个 <code>Topic</code> 对应的队列集合；</li><li>能够保证 <strong>严格的消息顺序</strong>；</li><li>提供丰富的 <strong>消息拉取模式</strong>；</li><li>高效的订阅者 <strong>水平扩展</strong>能力；</li><li><strong>实时</strong> 的 <strong>消息订阅机制</strong>；</li><li>亿级 <strong>消息堆积</strong> 能力；</li><li>较少的外部依赖。</li></ol><p><strong>(b) 部署环境</strong></p><p><code>RocketMQ</code> 可以运行在 <code>Java</code> 语言所支持的平台之上。使用 <code>RocketMQ</code> 需要：</p><ul><li><code>Java JDK</code></li><li>安装 <code>git</code>、<code>Maven</code></li><li><code>RocketMQ</code> 安装包</li></ul><p><strong>(c) 优点</strong></p><ol><li><strong>单机</strong> 支持 <code>1</code> 万以上 <strong>持久化队列</strong>；</li><li><code>RocketMQ</code> 的所有消息都是 <strong>持久化的</strong>，先写入系统 <code>PAGECACHE</code>，然后 <strong>刷盘</strong>，可以保证 <strong>内存</strong> 与 <strong>磁盘</strong> 都有一份数据，而 <strong>访问</strong> 时，直接 <strong>从内存读取</strong>。</li><li>模型简单，接口易用（<code>JMS</code> 的接口很多场合并不太实用）；</li><li><strong>性能非常好</strong>，可以允许 <strong>大量堆积消息</strong> 在 <code>Broker</code> 中；</li><li>支持 <strong>多种消费模式</strong>，包括 <strong>集群消费</strong>、<strong>广播消费</strong>等；</li><li>各个环节 <strong>分布式扩展设计</strong>，支持 <strong>主从</strong> 和 <strong>高可用</strong>；</li><li>开发度较活跃，版本更新很快。</li></ol><p><strong>(d) 缺点</strong></p><ol><li>支持的 <strong>客户端语言</strong> 不多，目前是 <code>Java</code> 及 <code>C++</code>，其中 <code>C++</code> 还不成熟；</li><li><code>RocketMQ</code> 社区关注度及成熟度也不及前两者；</li><li>没有 <code>Web</code> 管理界面，提供了一个 <code>CLI</code> （命令行界面） 管理工具带来 <strong>查询</strong>、<strong>管理</strong> 和 <strong>诊断各种问题</strong>；</li><li>没有在 <code>MQ</code> 核心里实现 <code>JMS</code> 等接口；</li></ol><div class="hint-container info"><p class="hint-container-title">Kafka</p></div><p><code>Apache Kafka</code> 是一个 <strong>分布式消息发布订阅</strong> 系统。它最初由 <code>LinkedIn</code> 公司基于独特的设计实现为一个 <strong>分布式的日志提交系统</strong> (<code>a distributed commit log</code>)，之后成为 <code>Apache</code> 项目的一部分。<code>Kafka</code> <strong>性能高效</strong>、<strong>可扩展良好</strong> 并且 <strong>可持久化</strong>。它的 <strong>分区特性</strong>，<strong>可复制</strong> 和 <strong>可容错</strong> 都是其不错的特性。</p><p><strong>(a) 主要特性</strong></p><ol><li><strong>快速持久化</strong>：可以在 <code>O(1)</code> 的系统开销下进行 <strong>消息持久化</strong>；</li><li><strong>高吞吐</strong>：在一台普通的服务器上既可以达到 <code>10W/s</code> 的 <strong>吞吐速率</strong>；</li><li><strong>完全的分布式系统</strong>：<code>Broker</code>、<code>Producer</code> 和 <code>Consumer</code> 都原生自动支持 <strong>分布式</strong>，自动实现 <strong>负载均衡</strong>；</li><li>支持 <strong>同步</strong> 和 <strong>异步</strong> 复制两种 <strong>高可用机制</strong>；</li><li>支持 <strong>数据批量发送</strong> 和 <strong>拉取</strong>；</li><li><strong>零拷贝技术 (zero-copy)</strong>：减少 <code>IO</code> 操作步骤，提高 <strong>系统吞吐量</strong>；</li><li><strong>数据迁移</strong>、<strong>扩容</strong> 对用户透明；</li><li><strong>无需停机</strong> 即可扩展机器；</li><li><strong>其他特性</strong>：丰富的 <strong>消息拉取模型</strong>、高效 <strong>订阅者水平扩展</strong>、实时的 <strong>消息订阅</strong>、亿级的 <strong>消息堆积能力</strong>、定期删除机制；</li></ol><p><strong>(b) 部署环境</strong></p><p>使用 <code>Kafka</code> 需要：</p><ul><li><code>Java JDK</code></li><li><code>Kafka</code> 安装包</li></ul><p><strong>(c) 优点</strong></p><ol><li><strong>客户端语言丰富</strong>：支持 <code>Java</code>、<code>.Net</code>、<code>PHP</code>、<code>Ruby</code>、<code>Python</code>、<code>Go</code> 等多种语言；</li><li><strong>高性能</strong>：单机写入 <code>TPS</code> 约在 <code>100</code> 万条/秒，消息大小 <code>10</code> 个字节；</li><li>提供 <strong>完全分布式架构</strong>，并有 <code>replica</code> 机制，拥有较高的 <strong>可用性</strong> 和 <strong>可靠性</strong>，理论上支持 <strong>消息无限堆积</strong>；</li><li>支持批量操作；</li><li><strong>消费者</strong> 采用 <code>Pull</code> 方式获取消息。<strong>消息有序</strong>，<strong>通过控制</strong> 能够保证所有消息被消费且仅被消费 <strong>一次</strong>；</li><li>有优秀的第三方 <code>Kafka Web</code> 管理界面 <code>Kafka-Manager</code>；</li><li>在 <strong>日志领域</strong> 比较成熟，被多家公司和多个开源项目使用。</li></ol><p><strong>(d) 缺点</strong></p><ol><li><code>Kafka</code> 单机超过 <code>64</code> 个 <strong>队列/分区</strong> 时，<code>Load</code> 时会发生明显的飙高现象。<strong>队列</strong> 越多，<strong>负载</strong> 越高，发送消息 <strong>响应时间变长</strong>；</li><li>使用 <strong>短轮询方式</strong>，<strong>实时性</strong> 取决于 <strong>轮询间隔时间</strong>；</li><li>消费失败 <strong>不支持重试</strong>；</li><li>支持 <strong>消息顺序</strong>，但是 <strong>一台代理宕机</strong> 后，就会产生 <strong>消息乱序</strong>；</li><li>社区更新较慢。</li></ol><div class="hint-container info"><p class="hint-container-title">技术选型</p></div><table><thead><tr><th>特性</th><th>ActiveMQ</th><th>RabbitMQ</th><th>RocketMQ</th><th>Kafka</th></tr></thead><tbody><tr><td>单机吞吐量</td><td>万级，比 RocketMQ、Kafka 低一个数量级</td><td>同 ActiveMQ</td><td>10 万级，支撑高吞吐</td><td>10 万级，高吞吐，一般配合大数据类的系统来进行实时数据计算、日志采集等场景</td></tr><tr><td>topic 数量对吞吐量的影响</td><td></td><td></td><td>topic 可以达到几百/几千的级别，吞吐量会有较小幅度的下降，这是 RocketMQ 的一大优势，在同等机器下，可以支撑大量的 topic</td><td>topic 从几十到几百个时候，吞吐量会大幅度下降，在同等机器下，Kafka 尽量保证 topic 数量不要过多，如果要支撑大规模的 topic，需要增加更多的机器资源</td></tr><tr><td>时效性</td><td>ms 级</td><td>微秒级，这是 RabbitMQ 的一大特点，延迟最低</td><td>ms 级</td><td>延迟在 ms 级以内</td></tr><tr><td>可用性</td><td>高，基于主从架构实现高可用</td><td>同 ActiveMQ</td><td>非常高，分布式架构</td><td>非常高，分布式，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用</td></tr><tr><td>消息可靠性</td><td>有较低的概率丢失数据</td><td>基本不丢</td><td>经过参数优化配置，可以做到 0 丢失</td><td>同 RocketMQ</td></tr><tr><td>功能支持</td><td>MQ 领域的功能极其完备</td><td>基于 erlang 开发，并发能力很强，性能极好，延时很低</td><td>MQ 功能较为完善，还是分布式的，扩展性好</td><td>功能较为简单，主要支持简单的 MQ 功能，在大数据领域的实时计算以及日志采集被大规模使用</td></tr></tbody></table><p>综上，各种对比之后，有如下建议：</p>`,218),c=t("li",null,"一般的业务系统要引入 MQ，最早大家都用 ActiveMQ，但是现在确实大家用的不多了，没经过大规模吞吐量场景的验证，社区也不是很活跃，所以大家还是算了吧，我个人不推荐用这个了；",-1),p=t("li",null,"后来大家开始用 RabbitMQ，但是确实 erlang 语言阻止了大量的 Java 工程师去深入研究和掌控它，对公司而言，几乎处于不可控的状态，但是确实人家是开源的，比较稳定的支持，活跃度也高；",-1),u={href:"https://github.com/apache/rocketmq",target:"_blank",rel:"noopener noreferrer"},h=t("li",null,[o("所以"),t("strong",null,"中小型公司"),o("，技术实力较为一般，技术挑战不是特别高，用 RabbitMQ 是不错的选择；"),t("strong",null,"大型公司"),o("，基础架构研发实力较强，用 RocketMQ 是很好的选择。")],-1),f=t("li",null,[o("如果是"),t("strong",null,"大数据领域"),o("的实时计算、日志采集等场景，用 Kafka 是业内标准的，绝对没问题，社区活跃度很高，绝对不会黄，何况几乎是全世界这个领域的事实性规范。")],-1),k=s('<h3 id="【困难】什么是-jms" tabindex="-1"><a class="header-anchor" href="#【困难】什么是-jms" aria-hidden="true">#</a> 【困难】什么是 JMS？</h3><p>提到 MQ，就顺便提一下 JMS 。</p><p><strong>JMS（JAVA Message Service，java 消息服务）API 是一个消息服务的标准/规范，允许应用程序组件基于 JavaEE 平台创建、发送、接收和读取消息</strong>。它使分布式通信耦合度更低，消息服务更加可靠以及异步性。</p><p>在 EJB 架构中，有消息 bean 可以无缝的与 JMS 消息服务集成。在 J2EE 架构模式中，有消息服务者模式，用于实现消息与应用直接的解耦。</p><div class="hint-container info"><p class="hint-container-title">JMS 消息模型</p></div><p>在 JMS 标准中，有两种消息模型：</p><ul><li>P2P(Point to Point)</li><li>Pub/Sub(Publish/Subscribe)</li></ul><p><strong>P2P 模式</strong></p><figure><img src="http://upload-images.jianshu.io/upload_images/3101171-2adc66e2367cd2c2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>P2P 模式包含三个角色：MQ（Queue），发送者 (Sender)，接收者 (Receiver)。每个消息都被发送到一个特定的队列，接收者从队列中获取消息。队列保留着消息，直到他们被消费或超时。</p><p>P2P 的特点</p><ul><li>每个消息只有一个消费者（Consumer）（即一旦被消费，消息就不再在 MQ 中）</li><li>发送者和接收者之间在时间上没有依赖性，也就是说当发送者发送了消息之后，不管接收者有没有正在运行，它不会影响到消息被发送到队列</li><li>接收者在成功接收消息之后需向队列应答成功</li></ul><p>如果希望发送的每个消息都会被成功处理的话，那么需要 P2P 模式。</p><p><strong>Pub/sub 模式</strong></p><figure><img src="http://upload-images.jianshu.io/upload_images/3101171-12afe9581da889ea.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>包含三个角色主题（Topic），发布者（Publisher），订阅者（Subscriber） 。多个发布者将消息发送到 Topic, 系统将这些消息传递给多个订阅者。</p><p>Pub/Sub 的特点</p><ul><li>每个消息可以有多个消费者</li><li>发布者和订阅者之间有时间上的依赖性。针对某个主题（Topic）的订阅者，它必须创建一个订阅者之后，才能消费发布者的消息。</li><li>为了消费消息，订阅者必须保持运行的状态。</li></ul><p>为了缓和这样严格的时间相关性，JMS 允许订阅者创建一个可持久化的订阅。这样，即使订阅者没有被激活（运行），它也能接收到发布者的消息。</p><p>如果希望发送的消息可以不被做任何处理、或者只被一个消息者处理、或者可以被多个消费者处理的话，那么可以采用 Pub/Sub 模型。</p><div class="hint-container info"><p class="hint-container-title">JMS 消息消费</p></div><p>在 JMS 中，消息的产生和消费都是异步的。对于消费来说，JMS 的消息者可以通过两种方式来消费消息。</p><ul><li><strong>同步</strong> - 订阅者或接收者通过 <code>receive</code> 方法来接收消息，<code>receive</code> 方法在接收到消息之前（或超时之前）将一直阻塞；</li><li><strong>异步</strong> - 订阅者或接收者可以注册为一个消息监听器。当消息到达之后，系统自动调用监听器的 <code>onMessage</code> 方法。</li></ul><p><code>JNDI</code> - Java 命名和目录接口，是一种标准的 Java 命名系统接口。可以在网络上查找和访问服务。通过指定一个资源名称，该名称对应于数据库或命名服务中的一个记录，同时返回资源连接建立所必须的信息。</p><p>JNDI 在 JMS 中起到查找和访问发送目标或消息来源的作用。</p><h3 id="【中等】说一下-amqp-协议" tabindex="-1"><a class="header-anchor" href="#【中等】说一下-amqp-协议" aria-hidden="true">#</a> 【中等】说一下 AMQP 协议？</h3><h2 id="kafka" tabindex="-1"><a class="header-anchor" href="#kafka" aria-hidden="true">#</a> Kafka</h2><h3 id="【困难】kafka-为什么性能高" tabindex="-1"><a class="header-anchor" href="#【困难】kafka-为什么性能高" aria-hidden="true">#</a> 【困难】Kafka 为什么性能高？</h3><p>Kafka 的数据存储在磁盘上，为什么还能这么快？</p><p>说 Kafka 很快时，他们通常指的是 Kafka 高效移动大量数据的能力。Kafka 为了提高传输效率，做了很多精妙的设计。</p><div class="hint-container info"><p class="hint-container-title">顺序 I/O（追加写入）</p></div><p>磁盘读写有两种方式：顺序读写或者随机读写。在顺序读写的情况下，磁盘的顺序读写速度和内存接近。因为磁盘是机械结构，每次读写都会寻址写入，其中寻址是一个“机械动作”。Kafka 利用了一种分段式的、只追加 (Append-Only) 的日志，基本上把自身的读写操作限制为<strong>顺序 I/O</strong>，也就使得它在各种存储介质上能有很快的速度。</p><div class="hint-container info"><p class="hint-container-title">零拷贝</p></div><p>Kafka 数据传输是一个从网络到磁盘，再由磁盘到网络的过程。在网络和磁盘之间传输数据时，消除多余的复制是提高效率的关键。<strong>Kafka 利用零拷贝技术来消除传输过程中的多余复制</strong>。</p><p>如果不采用零拷贝，Kafka 将数据同步给消费者的大致流程是：</p><ol><li>从磁盘加载数据到 os buffer</li><li>拷贝数据到 app buffer</li><li>再拷贝数据到 socket buffer</li><li>接下来，将数据拷贝到网卡 buffer</li><li>最后，通过网络传输，将数据发送到消费者</li></ol><p>采用零拷贝技术，Kafka 使用 <code>sendfile()</code> 系统方法，将数据从 os buffer 直接复制到网卡 buffer。这个过程中，唯一一次复制数据是从 os buffer 到网卡 buffer。这个复制过程是通过 DMA（Direct Memory Access，直接内存访问） 完成的。使用 DMA 时，CPU 不参与，这使得它非常高效。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202502070727055.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="hint-container info"><p class="hint-container-title">其他性能设计</p></div><ul><li><strong>页缓存</strong> - Kafka 的数据并不是实时的写入磁盘，它充分利用了现代操作系统分页存储来利用内存提高 I/O 效率。具体来说，就是把磁盘中的数据缓存到内存中，把对磁盘的访问变为对内存的访问。Kafka 接收来自 socket buffer 的网络数据，应用进程不需要中间处理、直接进行持久化时。可以使用 mmap 内存文件映射。</li><li><strong>压缩</strong> - Kafka 内置了几种压缩算法，并允许定制化压缩算法。通过压缩算法，可以有效减少传输数据的大小，从而提升传输效率。</li><li><strong>批处理</strong> - Kafka 的 Clients 和 Brokers 会把多条读写的日志记录合并成一个批次，然后才通过网络发送出去。日志记录的批处理通过使用更大的包以及提高带宽效率来摊薄网络往返的开销。</li><li><strong>分区</strong> - Kafka 将 Topic 分区，每个分区对应一个名为的 Log 的磁盘目录，而 Log 又根据大小，可以分为多个 Log Segment 文件。这种分而治之的策略，使得 Kafka 可以<strong>并发</strong>读，以支撑非常高的吞吐量。此外，Kafka 支持负载均衡机制，将数据分区近似均匀地分配给消费者群组的各个消费者。</li></ul><h3 id="【困难】zookeeper-在-kafka-中的作用是什么" tabindex="-1"><a class="header-anchor" href="#【困难】zookeeper-在-kafka-中的作用是什么" aria-hidden="true">#</a> 【困难】ZooKeeper 在 Kafka 中的作用是什么？</h3><p>ZooKeeper 在 Kafka 中扮演着<strong>核心的协调者角色</strong>，主要负责集群的元数据管理、Broker 协调和状态维护。这些管理机制可以确保集群一致性、高可用性和协调能力。</p><p><strong>Broker 管理</strong></p><ul><li><strong>节点注册与存活监控</strong>：每个 Kafka Broker 启动时会在 ZooKeeper 中注册临时节点（<code>/brokers/ids</code>）。ZooKeeper 通过心跳机制监控 Broker 存活状态，若 Broker 宕机，临时节点消失，集群会触发重新选举或分区重新分配。</li><li><strong>Leader 选举</strong>：Kafka 分区的 Leader 副本选举由 ZooKeeper 协调完成（旧版本依赖 ZooKeeper，新版本已逐步迁移至 Kafka 自身协议）。</li></ul><p><strong>Topic 与分区元数据</strong></p><ul><li><strong>存储拓扑信息</strong>：Topic 的分区数量、副本分布（<code>/brokers/topics/[topic]</code>）等元数据由 ZooKeeper 维护，供所有 Broker 和客户端查询。</li><li><strong>分区状态同步</strong>：分区 Leader 变更、ISR（In-Sync Replicas）列表更新等操作通过 ZooKeeper 通知其他 Broker。</li></ul><p><strong>控制器（Controller）选举</strong></p><p>Kafka 集群中的某个 Broker 会被选举为 Controller（通过 ZooKeeper 的临时节点竞争），负责分区 Leader 选举、副本分配等关键任务。Controller 故障时，ZooKeeper 会触发重新选举。</p><p><strong>客户端服务发现</strong></p><p>生产者和消费者通过 ZooKeeper（旧版本）或直接通过 Broker（新版本）获取集群的 Broker 列表和 Topic 元数据，以确定数据的读写位置。</p><p><strong>ACL 与配额管理</strong>（可选）</p><p>ZooKeeper 存储访问控制列表（ACL）和客户端配额配置，用于权限控制和流量限制。</p><p><strong>KRaft 将替代 ZooKeeper</strong></p><p><strong>Kafka 2.8+ 版本</strong>开始支持<strong>KRaft 模式</strong>（基于 Raft 协议），逐步弃用 ZooKeeper，将元数据管理和选举逻辑内置于 Kafka 自身，以简化架构并提升性能。但在大多数生产环境中，ZooKeeper 仍广泛使用。</p><h3 id="【中等】kafka-为什么要弃用-zookeeper" tabindex="-1"><a class="header-anchor" href="#【中等】kafka-为什么要弃用-zookeeper" aria-hidden="true">#</a> 【中等】Kafka 为什么要弃用 Zookeeper？</h3><p>Kafka 弃用 ZooKeeper 主要是为了<strong>简化架构、提升性能、降低运维复杂度</strong>。</p><p><strong>减少外部依赖</strong></p><ul><li><strong>架构简化</strong>：ZooKeeper 是独立的外部系统，需额外部署和维护。移除后，Kafka 成为完全自包含的系统，降低部署和运维成本。</li><li><strong>避免单点风险</strong>：ZooKeeper 本身需要集群化，若出现故障会影响 Kafka 的元数据管理，内嵌治理逻辑可减少此类风险。</li></ul><p><strong>提升扩展性与性能</strong></p><ul><li><strong>元数据效率</strong>：ZooKeeper 的写操作（如 Leader 选举）是串行的，可能成为瓶颈。Kafka 内置的 <strong>KRaft 协议</strong>（基于 Raft）支持并行日志写入，显著提升元数据处理速度（如分区扩容、Leader 切换）。</li><li><strong>降低延迟</strong>：省去与 ZooKeeper 的网络通信，元数据操作（如 Broker 注册、Topic 变更）延迟更低。</li></ul><p><strong>统一元数据管理</strong></p><ul><li><strong>一致性模型统一</strong>：ZooKeeper 使用 ZAB 协议，而 Kafka 使用自身的日志复制机制，两者不一致可能导致协调问题。KRaft 模式通过单一协议（Raft）管理所有元数据，逻辑更清晰。</li><li><strong>简化客户端访问</strong>：旧版客户端需同时连接 Kafka 和 ZooKeeper，新版只需直连 Kafka Broker。</li></ul><p><strong>支持更大规模集群</strong></p><p><strong>ZooKeeper 的局限性</strong>：ZooKeeper 对节点数量（通常≤7）和 Watcher 数量有限制，影响 Kafka 集群的扩展性。KRaft 模式通过分片和流式元数据传递，支持超大规模集群（如数十万分区）。</p><p><strong>补充说明</strong></p><ul><li>Kafka 2.8+ 开始实验性支持 KRaft 模式，3.0+ 逐步稳定，但仍兼容 ZooKeeper 模式。</li><li>完全移除 ZooKeeper 需确保 KRaft 在生产环境中的成熟度（如故障恢复、监控工具链完善）。</li></ul><h3 id="【中等】你了解-kafka-中的时间轮实现吗" tabindex="-1"><a class="header-anchor" href="#【中等】你了解-kafka-中的时间轮实现吗" aria-hidden="true">#</a> 【中等】你了解 Kafka 中的时间轮实现吗？</h3><h3 id="【中等】kafka-的索引设计有什么亮点" tabindex="-1"><a class="header-anchor" href="#【中等】kafka-的索引设计有什么亮点" aria-hidden="true">#</a> 【中等】Kafka 的索引设计有什么亮点？</h3><h3 id="【中等】看过源码-那说说-kafka-处理请求的全流程" tabindex="-1"><a class="header-anchor" href="#【中等】看过源码-那说说-kafka-处理请求的全流程" aria-hidden="true">#</a> 【中等】看过源码？那说说 Kafka 处理请求的全流程？</h3><h3 id="【困难】说一下-kafka-中关于事务消息的实现" tabindex="-1"><a class="header-anchor" href="#【困难】说一下-kafka-中关于事务消息的实现" aria-hidden="true">#</a> 【困难】说一下 Kafka 中关于事务消息的实现？</h3><h3 id="【困难】看过源码-那说说-kafka-控制器事件处理全流程" tabindex="-1"><a class="header-anchor" href="#【困难】看过源码-那说说-kafka-控制器事件处理全流程" aria-hidden="true">#</a> 【困难】看过源码？那说说 Kafka 控制器事件处理全流程？</h3><h2 id="rocketmq" tabindex="-1"><a class="header-anchor" href="#rocketmq" aria-hidden="true">#</a> RocketMQ</h2><p>【中等】RocketMQ 的事务消息有什么缺点？你还了解过别的事务消息实现吗？</p><p>【中等】为什么 RocketMQ 不使用 Zookeeper 作为注册中心呢？而选择自己实现 NameServer？</p><p>【中等】RocketMQ 的延迟消息是怎么实现的？<br> 【中等】RocketMQ 的开发参考了 Kafka，那两者在架构和功能上有什么区别？<br> 【困难】说一下 RocketMQ 中关于事务消息的实现？</p><h2 id="rabbitmq" tabindex="-1"><a class="header-anchor" href="#rabbitmq" aria-hidden="true">#</a> RabbitMQ</h2><p>【简单】RabbitMQ 的 routing key 和 binding key 的最大长度是多少字节？</p><p>【中等】RabbitMQ 中无法路由的消息会去到哪里？<br> 【中等】RabbitMQ 中消息什么时候会进入死信交换机？<br> 【中等】说一下 RabbitMQ 的事务机制？<br> 【中等】RabbitMQ 中主要有哪几个角色或者说概念？<br> 【中等】说说 RabbitMQ 的工作模式？<br> 【中等】说说 RabbitMQ 的集群模式？</p><p>【中等】RabbitMQ 怎么实现延迟队列？</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>',80),b={href:"https://www.cnblogs.com/itfly8/p/5155983.html",target:"_blank",rel:"noopener noreferrer"},M={href:"https://www.cnblogs.com/itfly8/p/5156155.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.jianshu.com/p/453c6e7ff81c",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://juejin.im/entry/5a0abfb5f265da43062a4a91",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/doocs/advanced-java/blob/master/docs/high-concurrency/mq-interview.md",target:"_blank",rel:"noopener noreferrer"},K={href:"https://juejin.im/post/6844903635046924296",target:"_blank",rel:"noopener noreferrer"};function R(P,x){const n=i("ExternalLinkIcon");return a(),l("div",null,[d,t("ul",null,[c,p,t("li",null,[o("不过现在确实越来越多的公司会去用 RocketMQ，确实很不错，毕竟是阿里出品，但社区可能有突然黄掉的风险（目前 RocketMQ 已捐给 "),t("a",u,[o("Apache"),r(n)]),o("，但 GitHub 上的活跃度其实不算高）对自己公司技术实力有绝对自信的，推荐用 RocketMQ，否则回去老老实实用 RabbitMQ 吧，人家有活跃的开源社区，绝对不会黄。")]),h,f]),k,t("ul",null,[t("li",null,[t("a",b,[o("大型网站架构系列：分布式 MQ（一）"),r(n)])]),t("li",null,[t("a",M,[o("大型网站架构系列：MQ（二）"),r(n)])]),t("li",null,[t("a",m,[o("分布式开放 MQ(RocketMQ) 的原理与实践"),r(n)])]),t("li",null,[t("a",Q,[o("阿里 RocketMQ 优势对比"),r(n)])]),t("li",null,[t("a",v,[o("advanced-java 之 MQ"),r(n)])]),t("li",null,[t("a",K,[o("浅谈消息队列及常见的消息中间件"),r(n)])])])])}const A=e(g,[["render",R],["__file","index.html.vue"]]);export{A as default};
