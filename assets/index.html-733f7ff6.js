import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as i,c as u,d as c,w as t,a as n,b as s,e as o}from"./app-e3c6686a.js";const g={},k=o('<h1 id="java-并发面试二" tabindex="-1"><a class="header-anchor" href="#java-并发面试二" aria-hidden="true">#</a> Java 并发面试二</h1><h2 id="java-锁" tabindex="-1"><a class="header-anchor" href="#java-锁" aria-hidden="true">#</a> Java 锁</h2><h3 id="【中等】java-中-根据不同维度划分-锁有哪些分类" tabindex="-1"><a class="header-anchor" href="#【中等】java-中-根据不同维度划分-锁有哪些分类" aria-hidden="true">#</a> 【中等】Java 中，根据不同维度划分，锁有哪些分类？</h3><p>在 Java 中，锁可以按照 <strong>多个维度</strong> 进行分类，不同维度的锁适用于不同的并发场景。以下是详细的分类：</p><p><strong>按锁的公平性划分</strong></p><table><thead><tr><th><strong>锁类型</strong></th><th><strong>特点</strong></th><th><strong>实现类/关键字</strong></th></tr></thead><tbody><tr><td><strong>公平锁</strong></td><td>严格按照线程请求顺序（FIFO）分配锁，避免线程饥饿，但性能较低。</td><td><code>ReentrantLock(true)</code></td></tr><tr><td><strong>非公平锁</strong></td><td>允许插队，新请求的线程可能直接抢到锁，吞吐量高，但可能导致线程饥饿（默认方式）。</td><td><code>ReentrantLock(false)</code>、<code>synchronized</code></td></tr></tbody></table><p><strong>按锁的获取方式划分</strong></p><table><thead><tr><th><strong>锁类型</strong></th><th><strong>特点</strong></th><th><strong>实现类/关键字</strong></th></tr></thead><tbody><tr><td><strong>悲观锁</strong></td><td>认为并发冲突必然发生，先加锁再操作（阻塞其他线程）。</td><td><code>synchronized</code>、<code>ReentrantLock</code></td></tr><tr><td><strong>乐观锁</strong></td><td>认为并发冲突较少，不加锁，更新时检查（CAS 或版本号机制）。</td><td><code>AtomicInteger</code>、<code>StampedLock</code></td></tr></tbody></table><p><strong>按锁的可重入性划分</strong></p><table><thead><tr><th><strong>锁类型</strong></th><th><strong>特点</strong></th><th><strong>实现类/关键字</strong></th></tr></thead><tbody><tr><td><strong>可重入锁</strong></td><td>同一线程可多次获取同一把锁（避免死锁）。</td><td><code>ReentrantLock</code>、<code>synchronized</code></td></tr><tr><td><strong>不可重入锁</strong></td><td>同一线程重复获取同一把锁会导致死锁（Java 无原生实现，需自定义）。</td><td>无（需自行实现）</td></tr></tbody></table><p><strong>按锁的共享性划分</strong></p><table><thead><tr><th><strong>锁类型</strong></th><th><strong>特点</strong></th><th><strong>实现类/关键字</strong></th></tr></thead><tbody><tr><td><strong>独占锁（排他锁）</strong></td><td>同一时间只有一个线程能持有锁（如 <code>synchronized</code>、<code>ReentrantLock</code>）。</td><td><code>synchronized</code>、<code>ReentrantLock</code></td></tr><tr><td><strong>共享锁</strong></td><td>允许多个线程同时读取，但写入时独占（如 <code>ReadWriteLock</code>）。</td><td><code>ReentrantReadWriteLock</code></td></tr></tbody></table><p><strong>按锁的阻塞方式划分</strong></p><table><thead><tr><th><strong>锁类型</strong></th><th><strong>特点</strong></th><th><strong>实现类/关键字</strong></th></tr></thead><tbody><tr><td><strong>阻塞锁</strong></td><td>获取不到锁时，线程进入阻塞状态（如 <code>synchronized</code>）。</td><td><code>synchronized</code>、<code>ReentrantLock</code></td></tr><tr><td><strong>自旋锁</strong></td><td>获取不到锁时，线程循环尝试（避免线程切换，但消耗 CPU）。</td><td><code>AtomicInteger</code>（CAS 自旋）</td></tr><tr><td><strong>适应性自旋锁</strong></td><td>JVM 自动优化自旋次数（如 <code>synchronized</code> 在 JDK 6+ 的优化）。</td><td>JVM 内部优化</td></tr></tbody></table><p><strong>按锁的优化策略划分</strong></p><table><thead><tr><th><strong>锁类型</strong></th><th><strong>特点</strong></th><th><strong>实现类/关键字</strong></th></tr></thead><tbody><tr><td><strong>偏向锁</strong></td><td>单线程访问时无同步开销（JDK 6+ 对 <code>synchronized</code> 的优化）。</td><td>JVM 自动优化（<code>synchronized</code>）</td></tr><tr><td><strong>轻量级锁</strong></td><td>多线程无竞争时，使用 CAS 代替阻塞（JDK 6+ 优化）。</td><td>JVM 自动优化（<code>synchronized</code>）</td></tr><tr><td><strong>重量级锁</strong></td><td>真正的互斥锁，涉及 OS 线程阻塞（如 <code>synchronized</code> 竞争激烈时）。</td><td>JVM 自动升级（<code>synchronized</code>）</td></tr></tbody></table><p><strong>按锁的实现方式划分</strong></p><table><thead><tr><th><strong>锁类型</strong></th><th><strong>特点</strong></th><th><strong>实现类/关键字</strong></th></tr></thead><tbody><tr><td><strong>内置锁（JVM 锁）</strong></td><td>由 JVM 实现（如 <code>synchronized</code>）。</td><td><code>synchronized</code></td></tr><tr><td><strong>显式锁</strong></td><td>由 Java API 提供（如 <code>ReentrantLock</code>）。</td><td><code>ReentrantLock</code>、<code>ReadWriteLock</code></td></tr><tr><td><strong>分布式锁</strong></td><td>跨 JVM 的锁（如 Redis、ZooKeeper 实现）。</td><td><code>Redisson</code>、<code>Curator</code></td></tr></tbody></table><p><strong>总结</strong></p><table><thead><tr><th><strong>分类维度</strong></th><th><strong>锁类型</strong></th></tr></thead><tbody><tr><td><strong>公平性</strong></td><td>公平锁、非公平锁</td></tr><tr><td><strong>获取方式</strong></td><td>悲观锁、乐观锁</td></tr><tr><td><strong>可重入性</strong></td><td>可重入锁、不可重入锁</td></tr><tr><td><strong>共享性</strong></td><td>独占锁、共享锁</td></tr><tr><td><strong>阻塞方式</strong></td><td>阻塞锁、自旋锁、适应性自旋锁</td></tr><tr><td><strong>优化策略</strong></td><td>偏向锁、轻量级锁、重量级锁</td></tr><tr><td><strong>实现方式</strong></td><td>内置锁（<code>synchronized</code>）、显式锁（<code>ReentrantLock</code>）、分布式锁（<code>Redisson</code>）</td></tr></tbody></table><p><strong>选择合适的锁取决于：</strong></p><ul><li><strong>并发竞争程度</strong>（高竞争→悲观锁，低竞争→乐观锁）</li><li><strong>任务执行时间</strong>（长任务→公平锁，短任务→非公平锁）</li><li><strong>读写比例</strong>（读多→共享锁，写多→独占锁）</li><li><strong>是否需要跨 JVM</strong>（是→分布式锁）</li></ul><p>这些分类帮助开发者根据业务场景选择最优的锁策略，平衡 <strong>性能、公平性、一致性</strong>。</p><h3 id="【中等】悲观锁和乐观锁有什么区别" tabindex="-1"><a class="header-anchor" href="#【中等】悲观锁和乐观锁有什么区别" aria-hidden="true">#</a> 【中等】悲观锁和乐观锁有什么区别？</h3><p>以下是悲观锁与乐观锁的详细对比：</p><table><thead><tr><th><strong>对比维度</strong></th><th><strong>悲观锁</strong></th><th><strong>乐观锁</strong></th></tr></thead><tbody><tr><td><strong>核心思想</strong></td><td>假定并发冲突必然发生，先加锁再访问数据</td><td>假定并发冲突较少，先操作再检测冲突</td></tr><tr><td><strong>锁机制</strong></td><td>显式加锁（阻塞其他线程）</td><td>无锁机制（依赖 CAS 或版本号控制）</td></tr><tr><td><strong>实现方式</strong></td><td><code>synchronized</code>、<code>ReentrantLock</code>、数据库<code>SELECT FOR UPDATE</code></td><td><code>Atomic</code>类（CAS）、版本号机制、数据库乐观锁（如 MVCC）</td></tr><tr><td><strong>线程阻塞</strong></td><td>会阻塞竞争线程（线程挂起）</td><td>不阻塞线程，但可能自旋重试或失败</td></tr><tr><td><strong>数据一致性</strong></td><td>强一致性（独占访问）</td><td>最终一致性（可能需重试）</td></tr><tr><td><strong>适用场景</strong></td><td>- 写操作频繁<br>- 临界区代码执行时间长<br>- 强一致性要求高</td><td>- 读多写少<br>- 短平快操作<br>- 高吞吐量需求</td></tr><tr><td><strong>性能特点</strong></td><td>- 高竞争时性能下降明显（线程切换开销）<br>- 低竞争时仍有固定锁开销</td><td>- 低竞争时性能极佳（无阻塞）<br>- 高竞争时 CPU 自旋浪费</td></tr><tr><td><strong>冲突处理</strong></td><td>通过锁排队避免冲突</td><td>通过重试或放弃处理冲突</td></tr><tr><td><strong>典型应用</strong></td><td>- 银行转账<br>- 订单支付<br>- 数据库行级锁</td><td>- 库存扣减<br>- 计数器<br>- 点赞系统</td></tr><tr><td><strong>优缺点</strong></td><td>✅ 强一致性<br>❌ 吞吐量低、死锁风险</td><td>✅ 高并发性能好<br>❌ 实现复杂、可能 ABA 问题</td></tr></tbody></table><p><strong>选择建议</strong>：</p><ul><li><strong>悲观锁</strong>适合&quot;宁可排队等，不能出错&quot;的场景（如金融交易）。</li><li><strong>乐观锁</strong>适合&quot;宁可重试，不要阻塞&quot;的场景（如电商库存）。</li></ul><h3 id="【中等】公平锁和非公平锁有什么区别" tabindex="-1"><a class="header-anchor" href="#【中等】公平锁和非公平锁有什么区别" aria-hidden="true">#</a> 【中等】公平锁和非公平锁有什么区别？</h3><p><strong>Java 中公平锁和非公平锁的对比</strong>：</p><table><thead><tr><th><strong>对比维度</strong></th><th><strong>公平锁 (Fair Lock)</strong></th><th><strong>非公平锁 (Nonfair Lock)</strong></th></tr></thead><tbody><tr><td><strong>锁获取顺序</strong></td><td>严格按照线程请求顺序（FIFO）分配锁</td><td>允许插队，新请求的线程可能直接抢到锁</td></tr><tr><td><strong>实现原理</strong></td><td>通过队列维护等待线程，先到先得</td><td>线程直接尝试 CAS 抢锁，失败才进入队列</td></tr><tr><td><strong>性能表现</strong></td><td>吞吐量较低（上下文切换频繁）</td><td>吞吐量较高（减少线程切换，但可能线程饥饿）</td></tr><tr><td><strong>响应时间</strong></td><td>等待时间稳定（适合长任务）</td><td>短任务可能更快获取锁（适合高并发短任务）</td></tr><tr><td><strong>适用场景</strong></td><td>- 需要严格公平性<br>- 线程执行时间差异大（避免饥饿）</td><td>- 高并发短任务<br>- 追求吞吐量</td></tr><tr><td><strong>锁实现类</strong></td><td><code>ReentrantLock(true)</code></td><td><code>ReentrantLock(false)</code>（默认）</td></tr><tr><td><strong>底层机制</strong></td><td>依赖 <code>AbstractQueuedSynchronizer (AQS)</code> 的严格队列</td><td>先尝试 CAS 抢锁，失败后进入 AQS 队列</td></tr><tr><td><strong>线程饥饿</strong></td><td>不会发生</td><td>可能发生（高并发时某些线程长期无法获取锁）</td></tr><tr><td><strong>操作系统调度影响</strong></td><td>依赖系统线程调度，可能因优先级反转影响公平性</td><td>更依赖 JVM 的锁优化策略</td></tr><tr><td><strong>锁重入性</strong></td><td>支持（与公平性无关）</td><td>支持（与公平性无关）</td></tr><tr><td><strong>适用并发模型</strong></td><td>适合任务执行时间不均衡的场景</td><td>适合任务执行时间短的场景</td></tr></tbody></table><p><strong>如何选择？</strong></p><ul><li><p><strong>选公平锁</strong>：</p><ul><li>需要严格顺序执行（如订单处理）</li><li>避免低优先级线程饥饿</li><li>线程任务执行时间差异大</li></ul></li><li><p><strong>选非公平锁</strong>：</p><ul><li>追求高吞吐量（如秒杀系统）</li><li>任务执行时间短且均匀</li><li>能接受偶尔的线程饥饿</li></ul></li></ul><p><strong>注意事项：</strong></p><ul><li><strong>默认行为</strong>：<code>ReentrantLock</code> 和 <code>synchronized</code> 默认都是<strong>非公平锁</strong>（因为性能更好）。</li><li><strong>性能差异</strong>：非公平锁在高并发下吞吐量可提升 <strong>10%~30%</strong>，但可能增加延迟方差。</li><li><strong>synchronized 的公平性</strong>：Java 的 <code>synchronized</code> <strong>不支持公平锁</strong>，仅 <code>ReentrantLock</code> 可配置。</li></ul><h3 id="【中等】synchronized-和-reentrantlock-有什么区别" tabindex="-1"><a class="header-anchor" href="#【中等】synchronized-和-reentrantlock-有什么区别" aria-hidden="true">#</a> 【中等】synchronized 和 ReentrantLock 有什么区别？</h3><p>使用差异：</p>',37),h=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token comment"},"// 1. 用于代码块"),s(`
`),n("span",{class:"token keyword"},"synchronized"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token comment"},"// 2. 用于对象"),s(`
`),n("span",{class:"token keyword"},"synchronized"),s(),n("span",{class:"token punctuation"},"("),s("object"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token comment"},"// 3. 用于方法"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"synchronized"),s(),n("span",{class:"token keyword"},"void"),s(" test "),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token comment"},"// 4. 可重入"),s(`
`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(),n("span",{class:"token number"},"100"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"synchronized"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),v=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(" test "),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"throw"),s(),n("span",{class:"token class-name"},"Exception"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token comment"},"// 1. 初始化选择公平锁、非公平锁"),s(`
	`),n("span",{class:"token class-name"},"ReentrantLock"),s(" lock "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"ReentrantLock"),n("span",{class:"token punctuation"},"("),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token comment"},"// 2. 可用于代码块"),s(`
	lock`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"lock"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"try"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"try"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token comment"},"// 3. 支持多种加锁方式，比较灵活；具有可重入特性"),s(`
			`),n("span",{class:"token keyword"},"if"),n("span",{class:"token punctuation"},"("),s("lock"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"tryLock"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"100"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"TimeUnit"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"MILLISECONDS"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"finally"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token comment"},"// 4. 手动释放锁"),s(`
			lock`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"unlock"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"finally"),s(),n("span",{class:"token punctuation"},"{"),s(`
		lock`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"unlock"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),m=o(`<p>以下是 <strong><code>synchronized</code></strong> 和 <strong><code>ReentrantLock</code></strong> 的详细对比表格，涵盖 <strong>锁机制、功能、性能、使用场景</strong> 等核心维度：</p><hr><table><thead><tr><th><strong>对比维度</strong></th><th><strong><code>synchronized</code></strong></th><th><strong><code>ReentrantLock</code></strong></th></tr></thead><tbody><tr><td><strong>锁类型</strong></td><td>JVM 内置关键字（隐式锁）</td><td>JDK 提供的类（显式锁）</td></tr><tr><td><strong>是否可重入</strong></td><td>支持（同一线程可重复获取）</td><td>支持（同一线程可重复获取）</td></tr><tr><td><strong>锁的公平性</strong></td><td>仅支持非公平锁</td><td>可配置公平锁或非公平锁（构造函数传参 <code>true/false</code>）</td></tr><tr><td><strong>锁的获取方式</strong></td><td>自动加锁/释放锁（进入同步代码块加锁，退出时释放）</td><td>需手动调用 <code>lock()</code> 和 <code>unlock()</code>（必须配合 <code>try-finally</code> 使用）</td></tr><tr><td><strong>是否可中断</strong></td><td>不支持中断</td><td>支持 <code>lockInterruptibly()</code>，可响应中断</td></tr><tr><td><strong>超时获取锁</strong></td><td>不支持超时</td><td>支持 <code>tryLock(timeout, unit)</code>，可设置超时时间</td></tr><tr><td><strong>条件变量</strong></td><td>通过 <code>wait()</code>/<code>notify()</code> 实现，单一等待队列</td><td>支持多个 <code>Condition</code>，可精确控制线程唤醒（如 <code>await()</code>/<code>signal()</code>）</td></tr><tr><td><strong>性能优化</strong></td><td>JDK 6+ 优化后（偏向锁→轻量级锁→重量级锁）性能接近 <code>ReentrantLock</code></td><td>在高竞争场景下性能略优（减少上下文切换）</td></tr><tr><td><strong>死锁检测</strong></td><td>无内置死锁检测</td><td>可通过 <code>tryLock</code> 避免死锁</td></tr><tr><td><strong>代码可读性</strong></td><td>简洁（无需手动释放）</td><td>复杂（需显式加锁/解锁）</td></tr><tr><td><strong>适用场景</strong></td><td>简单同步场景（如单方法同步）</td><td>复杂同步需求（如公平锁、可中断锁、超时锁）</td></tr><tr><td><strong>底层实现</strong></td><td>JVM 通过 <code>monitorenter</code>/<code>monitorexit</code> 字节码实现</td><td>基于 <code>AbstractQueuedSynchronizer (AQS)</code> 实现</td></tr><tr><td><strong>锁释放保证</strong></td><td>自动释放（即使抛出异常）</td><td>需在 <code>finally</code> 中手动释放，否则可能死锁</td></tr></tbody></table><p><strong>关键区别总结</strong></p><ul><li><p><strong>灵活性</strong></p><ul><li><code>ReentrantLock</code> 更强大：支持公平锁、可中断、超时、多条件变量。</li><li><code>synchronized</code> 更简单：自动管理锁，适合基础同步需求。</li></ul></li><li><p><strong>性能差异</strong>：JDK 6 后两者性能接近，但 <code>ReentrantLock</code> 在高竞争场景仍略有优势。</p></li><li><p><strong>使用选择建议</strong></p><ul><li><strong>选择 <code>synchronized</code></strong>： <ul><li>需要简单的代码块同步。</li><li>不需要高级功能（如超时、公平锁）。</li></ul></li><li><strong>选择 <code>ReentrantLock</code></strong>： <ul><li>需要精细控制（如公平性、可中断）。</li><li>需要避免死锁（<code>tryLock</code>）。</li></ul></li></ul></li><li><p><strong>注意</strong></p><ul><li><code>ReentrantLock</code> <strong>必须手动释放锁</strong>，否则会导致死锁！</li><li><code>synchronized</code> 是 Java 并发的基础，而 <code>ReentrantLock</code> 是它的增强扩展。</li></ul></li></ul><p><strong>适用场景</strong></p><ul><li><strong><code>synchronized</code> 适用场景</strong>：单例模式的双重检查锁、简单的线程安全计数器。</li><li><strong><code>ReentrantLock</code> 适用场景</strong>： <ul><li>需要公平性的任务队列（如订单处理）。</li><li>需要超时控制的资源争用（如避免死锁）。</li><li>复杂的多条件线程协调（如生产者-消费者模型）。</li></ul></li></ul><h3 id="【困难】reentrantlock-的实现原理是什么" tabindex="-1"><a class="header-anchor" href="#【困难】reentrantlock-的实现原理是什么" aria-hidden="true">#</a> 【困难】ReentrantLock 的实现原理是什么？</h3><p><strong>ReentrantLock 基于 AQS（AbstractQueuedSynchronizer）实现</strong>：</p><ul><li><strong>核心依赖</strong>：<code>ReentrantLock</code> 通过内部类 <code>Sync</code>（继承 <code>AQS</code>）实现锁机制。</li><li><strong>AQS 作用</strong>：提供线程阻塞/唤醒的队列管理（CLH 变体）和状态（<code>state</code>）的原子操作。</li></ul><p><strong>锁状态（state）管理</strong></p><ul><li><strong><code>state</code> 字段</strong>： <ul><li><code>=0</code>：锁未被占用。</li><li><code>&gt;0</code>：锁被占用，数值表示重入次数（可重入性）。</li></ul></li><li><strong>修改方式</strong>：通过 <code>CAS</code>（Compare-And-Swap）保证原子性。</li></ul><p><strong>获取锁（公平 / 非公平）</strong></p><ul><li><strong>公平锁</strong>（<code>FairSync</code>）：严格按照 FIFO 顺序获取锁（先检查队列是否有等待线程）。 <ul><li>先检查是否有前驱节点（队列中有无等待线程），有则排队。</li><li>无则尝试 CAS 获取锁。</li></ul></li><li><strong>非公平锁</strong>（<code>NonfairSync</code>，默认）：新线程直接尝试 CAS 抢锁（可能插队），失败才进入队列。 <ul><li>直接尝试 CAS 修改 <code>state</code>（抢锁）。</li><li>失败后调用 <code>AQS.acquire()</code> 进入队列等待。</li></ul></li></ul><p><strong>释放锁</strong></p><ol><li>减少 <code>state</code> 值（重入次数减 1）。</li><li>若 <code>state=0</code>，唤醒队列中的下一个线程（通过 <code>LockSupport.unpark()</code>）。</li></ol><p><strong>可重入性</strong></p><ul><li>记录当前持有锁的线程（<code>exclusiveOwnerThread</code>）。</li><li>同一线程重复获取锁时，<code>state</code> 递增（无需重新排队）。</li></ul><p><strong>关键方法</strong></p><ul><li><strong><code>tryLock()</code></strong>：非阻塞尝试获取锁（直接 CAS）。</li><li><strong><code>lockInterruptibly()</code></strong>：支持中断的锁获取。</li><li><strong><code>Condition</code></strong>：基于 <code>AQS</code> 实现多个等待队列（如 <code>await()</code>/<code>signal()</code>）。</li></ul><p><strong>性能优化</strong></p><ul><li><strong>非公平锁</strong>：减少线程切换，提高吞吐量（但可能饥饿）。</li><li><strong>自旋优化</strong>：短暂自旋尝试获取锁，避免立即入队。</li></ul><p><strong>总结</strong></p><p><code>ReentrantLock</code> 的核心是通过 <strong>AQS 队列 + CAS 操作</strong> 实现：</p><ul><li><strong>锁竞争</strong>：通过 <code>state</code> 和 CLH 队列管理线程阻塞/唤醒。</li><li><strong>灵活性</strong>：支持公平性、可中断、超时等高级功能。</li><li><strong>可重入</strong>：记录持有线程和重入次数。</li></ul><p>适用于需要精细控制锁行为的场景（如公平性、条件变量）。</p><h3 id="【困难】aqs-的实现原理是什么" tabindex="-1"><a class="header-anchor" href="#【困难】aqs-的实现原理是什么" aria-hidden="true">#</a> 【困难】AQS 的实现原理是什么？</h3><p>AQS（<strong>AbstractQueuedSynchronizer</strong>）是 Java 并发包（<code>java.util.concurrent.locks</code>）的核心框架，用于构建锁（如 <code>ReentrantLock</code>）和同步器（如 <code>CountDownLatch</code>、<code>Semaphore</code>）。它的核心思想是 <strong>CLH 队列 + CAS + 状态管理</strong>，提供了一种高效、灵活的同步机制。</p><p><strong>关键属性</strong></p><ul><li><strong>状态变量（state）</strong>：一个 <code>volatile</code> 整型变量，用于表示同步状态。不同的同步组件对 <code>state</code> 有不同的解读，例如在 <code>ReentrantLock</code> 里，<code>state</code> 为 0 表示锁未被持有，大于 0 表示锁已被持有，且重入次数就是 <code>state</code> 的值。</li><li><strong>等待队列（head 和 tail）</strong>：指向 FIFO 队列的头尾节点。队列中的每个节点都代表一个等待获取同步状态的线程。每个 <code>Node</code> 包含以下重要属性： <ul><li><strong><code>thread</code></strong>：指向等待获取同步状态的线程。</li><li><strong><code>prev</code> 和 <code>next</code></strong>：分别指向前一个节点和后一个节点，从而形成双向链表。</li><li><strong><code>waitStatus</code></strong>：表示节点的等待状态，常见的状态有： <ul><li><code>CANCELLED</code>（1）：表示该节点对应的线程已取消等待。</li><li><code>SIGNAL</code>（-1）：表示该节点的后继节点需要被唤醒。</li><li><code>CONDITION</code>（-2）：表示该节点处于条件队列中。</li><li><code>PROPAGATE</code>（-3）：用于共享模式下，表明状态需要向后传播。</li></ul></li></ul></li></ul><p><strong>同步模式</strong></p><p>AQS 支持两种同步模式：</p><ul><li><strong>独占模式</strong>：同一时刻仅允许一个线程获取同步状态，例如 <code>ReentrantLock</code>。 <ul><li><strong>获取锁</strong>： <ul><li>线程调用 <code>acquire(int)</code> → <code>tryAcquire(int)</code>（子类实现）。</li><li>如果成功（<code>state</code> 修改成功），则获取锁。</li><li>如果失败，线程被封装成 <code>Node</code> 加入 <strong>CLH 队列</strong>，并进入 <code>park()</code> 等待。</li></ul></li><li><strong>释放锁</strong>： <ul><li>线程调用 <code>release(int)</code> → <code>tryRelease(int)</code>（子类实现）。</li><li>如果成功，唤醒队列中的下一个线程（<code>unparkSuccessor</code>）。</li></ul></li></ul></li><li><strong>共享模式</strong>：同一时刻允许多个线程获取同步状态，例如 <code>CountDownLatch</code> 和 <code>Semaphore</code>。 <ul><li><strong>获取锁</strong>： <ul><li>线程调用 <code>acquireShared(int)</code> → <code>tryAcquireShared(int)</code>（子类实现）。</li><li>如果成功（返回 <code>≥0</code>），获取锁；否则进入队列等待。</li></ul></li><li><strong>释放锁</strong>： <ul><li>线程调用 <code>releaseShared(int)</code> → <code>tryReleaseShared(int)</code>（子类实现）。</li><li>如果成功，唤醒后续等待的线程（可能多个）。</li></ul></li></ul></li></ul><p><strong>关键方法</strong></p><ul><li><strong>独占模式</strong><ul><li><strong><code>tryAcquire(int arg)</code></strong>：尝试以独占模式获取同步状态，此方法需由子类实现。</li><li><strong><code>acquire(int arg)</code></strong>：以独占模式获取同步状态，若获取失败则将线程加入队列并阻塞。</li><li><strong><code>tryRelease(int arg)</code></strong>：尝试以独占模式释放同步状态，需子类实现。</li><li><strong><code>release(int arg)</code></strong>：以独占模式释放同步状态，若释放成功则唤醒队列中的后继节点。</li></ul></li><li><strong>共享模式</strong><ul><li><strong><code>tryAcquireShared(int arg)</code></strong>：尝试以共享模式获取同步状态，需子类实现。</li><li><strong><code>acquireShared(int arg)</code></strong>：以共享模式获取同步状态，若获取失败则将线程加入队列并阻塞。</li><li><strong><code>tryReleaseShared(int arg)</code></strong>：尝试以共享模式释放同步状态，需子类实现。</li><li><strong><code>releaseShared(int arg)</code></strong>：以共享模式释放同步状态，若释放成功则唤醒队列中的后继节点。</li></ul></li></ul><div class="hint-container info"><p class="hint-container-title">AQS 核心机制</p><p><strong>CAS（Compare-And-Swap）</strong></p><p>使用 <code>Unsafe</code> 类的 <code>compareAndSwapXXX</code> 方法保证 <code>state</code> 和队列操作的原子性。</p><p>例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token keyword">int</span> expect<span class="token punctuation">,</span> <span class="token keyword">int</span> update<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> stateOffset<span class="token punctuation">,</span> expect<span class="token punctuation">,</span> update<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>自旋 + <code>park()</code> 等待</strong></p><ul><li>线程在入队前会自旋尝试获取锁（减少上下文切换）。</li><li>如果仍然失败，则调用 <code>LockSupport.park()</code> 挂起线程。</li></ul><p><strong>公平性控制</strong></p><ul><li><strong>公平锁</strong>：严格按照 CLH 队列顺序获取锁（<code>hasQueuedPredecessors()</code> 检查是否有前驱节点）。</li><li><strong>非公平锁</strong>：新线程可以插队（<code>tryAcquire</code> 直接尝试获取锁，不检查队列）。</li></ul></div>`,36),b={href:"https://tech.meituan.com/2019/12/05/aqs-theory-and-apply.html",target:"_blank",rel:"noopener noreferrer"},y=o(`<h2 id="java-无锁" tabindex="-1"><a class="header-anchor" href="#java-无锁" aria-hidden="true">#</a> Java 无锁</h2><h3 id="【中等】什么是-cas-cas-的实现原理是什么" tabindex="-1"><a class="header-anchor" href="#【中等】什么是-cas-cas-的实现原理是什么" aria-hidden="true">#</a> 【中等】什么是 CAS？CAS 的实现原理是什么？</h3><div class="hint-container info"><p class="hint-container-title">什么是 CAS？</p></div><p><strong>CAS（Compare-And-Swap，比较并交换）</strong> 是一种 <strong>无锁（Lock-Free）</strong> 的并发编程技术，基于 <strong>比较-交换</strong> 实现原子操作。它是现代并发编程的基石，被广泛应用于 Java 的 <code>Atomic</code> 类、<code>ReentrantLock</code>、<code>ConcurrentHashMap</code> 等并发工具中。</p><p>CAS 底层实现依赖 CPU 指令（如 <code>CMPXCHG</code>），通过 <code>Unsafe</code> 类调用本地方法。</p><p>CAS 的核心应用有：原子类、自旋锁、无锁数据结构（如 <code>ConcurrentHashMap</code>）。</p><p><strong>CAS 的核心思想</strong>：</p><ul><li><strong>比较</strong>：检查某个内存位置的值是否等于预期值（Expected Value）。</li><li><strong>交换</strong>：如果相等，则更新为新值（New Value），否则不做任何操作。</li><li><strong>原子性</strong>：整个操作由 <strong>CPU 指令</strong> 保证不可分割，不会出现线程安全问题。</li></ul><div class="hint-container info"><p class="hint-container-title">CAS 的实现原理是什么？</p></div><p><strong>（1）底层 CPU 指令支持</strong></p><p><strong>在 Java 中，通过 <code>Unsafe</code> 类调用本地方法（Native Method）实现 CAS</strong>。更底层的实现依赖于 <strong>硬件指令</strong>（如 x86 的 <code>CMPXCHG</code>、ARM 的 <code>LL/SC</code>），确保操作是原子的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> expected<span class="token punctuation">,</span> <span class="token keyword">int</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>（2）CAS 操作流程</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 伪代码</span>
<span class="token keyword">boolean</span> <span class="token function">CAS</span><span class="token punctuation">(</span><span class="token class-name">Variable</span> <span class="token keyword">var</span><span class="token punctuation">,</span> <span class="token keyword">int</span> expected<span class="token punctuation">,</span> <span class="token keyword">int</span> newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">var</span><span class="token punctuation">.</span>value <span class="token operator">==</span> expected<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 比较当前值是否等于预期值</span>
        <span class="token keyword">var</span><span class="token punctuation">.</span>value <span class="token operator">=</span> newValue<span class="token punctuation">;</span>     <span class="token comment">// 如果相等，更新为新值</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment">// 否则失败</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>实际执行流程</strong>：</p><ol><li>读取内存值 <code>V</code>。</li><li>比较 <code>V</code> 和预期值 <code>A</code>： <ul><li>如果 <code>V == A</code>，说明没有其他线程修改过，更新为 <code>B</code>。</li><li>如果 <code>V != A</code>，说明值已被修改，放弃更新。</li></ul></li><li>返回操作是否成功。</li></ol><p><strong>（3）Java 中的 CAS 实现（以 AtomicInteger 为例）</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">AtomicInteger</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// CAS 操作：如果当前值是 0，则设置为 1</span>
<span class="token keyword">boolean</span> success <span class="token operator">=</span> count<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 内部调用 Unsafe.compareAndSwapInt</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>底层实现</strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> expect<span class="token punctuation">,</span> <span class="token keyword">int</span> update<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> valueOffset<span class="token punctuation">,</span> expect<span class="token punctuation">,</span> update<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中：</p><ul><li><code>this</code>：目标对象（如 <code>AtomicInteger</code> 实例）。</li><li><code>valueOffset</code>：字段在对象内存中的偏移量（通过 <code>Unsafe.objectFieldOffset</code> 获取）。</li><li><code>expect</code>：预期值。</li><li><code>update</code>：新值。</li></ul><p><strong>CAS 的典型应用</strong></p><p><strong>（1）原子类（AtomicXXX）</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">AtomicInteger</span> atomicInt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
atomicInt<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// CAS 实现原子自增</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>底层实现</strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">getAndAddInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> valueOffset<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（2）自旋锁（SpinLock）</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">CAS</span><span class="token punctuation">(</span>lock<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 尝试获取锁</span>
    <span class="token comment">// 自旋等待</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（3）无锁数据结构</strong></p><ul><li><code>ConcurrentHashMap</code>（JDK 8 使用 CAS + <code>synchronized</code> 替代分段锁）。</li><li><code>CopyOnWriteArrayList</code>（CAS 保证写入原子性）。</li></ul><p><strong>CAS 的优缺点</strong></p><p><strong>优点</strong></p><table><thead><tr><th>优点</th><th>说明</th></tr></thead><tbody><tr><td><strong>无锁</strong></td><td>避免线程阻塞，减少上下文切换</td></tr><tr><td><strong>高性能</strong></td><td>在低竞争场景下比锁更高效</td></tr><tr><td><strong>可扩展</strong></td><td>适合高并发读多写少场景</td></tr></tbody></table><p><strong>缺点</strong></p><table><thead><tr><th>缺点</th><th>说明</th></tr></thead><tbody><tr><td><strong>ABA 问题</strong></td><td>值从 <code>A→B→A</code>，CAS 无法感知中间变化</td></tr><tr><td><strong>自旋开销</strong></td><td>高竞争时 CPU 空转</td></tr><tr><td><strong>单变量限制</strong></td><td>只能保证一个变量的原子性</td></tr><tr><td><strong>公平性问题</strong></td><td>无法保证先来先服务</td></tr></tbody></table><p><strong>CAS vs 锁</strong></p><table><thead><tr><th>对比项</th><th>CAS</th><th>锁（如 synchronized）</th></tr></thead><tbody><tr><td><strong>实现方式</strong></td><td>无锁（CPU 指令）</td><td>阻塞（JVM 管理）</td></tr><tr><td><strong>性能</strong></td><td>低竞争时更优</td><td>高竞争时更稳定</td></tr><tr><td><strong>适用场景</strong></td><td>简单原子操作</td><td>复杂临界区保护</td></tr><tr><td><strong>公平性</strong></td><td>非公平</td><td>可公平（如 <code>ReentrantLock(true)</code>）</td></tr></tbody></table><h3 id="【中等】cas-算法存在哪些问题" tabindex="-1"><a class="header-anchor" href="#【中等】cas-算法存在哪些问题" aria-hidden="true">#</a> 【中等】CAS 算法存在哪些问题？</h3><p>CAS（Compare-And-Swap）是一种无锁并发编程技术，广泛用于 Java 的 <code>Atomic</code> 类、AQS、<code>ConcurrentHashMap</code> 等并发工具中。但它也存在一些问题和限制：</p><p><strong>ABA 问题</strong></p><ul><li><strong>问题描述</strong>：变量值从 <code>A</code> → <code>B</code> → <code>A</code>，CAS 检查时认为没有变化，但实际上已经被修改过。</li><li><strong>影响</strong>：可能导致数据不一致（如链表操作时节点被替换但指针仍有效）。</li><li><strong>解决方案</strong>： <ul><li>使用 <strong>版本号/时间戳</strong>（如 <code>AtomicStampedReference</code>）。</li><li>使用 <code>boolean</code> 标记（如 <code>AtomicMarkableReference</code>）。</li></ul></li></ul><p><strong>自旋产生的 CPU 空转</strong></p><ul><li><strong>问题描述</strong>：如果 CAS 长时间失败，线程会持续自旋（<code>while</code> 循环），占用 CPU 资源。</li><li><strong>影响</strong>：高并发竞争时，可能导致 CPU 使用率飙升。</li><li><strong>解决方案</strong>： <ul><li>限制自旋次数（如 <code>LongAdder</code> 改用分段 CAS）。</li><li>结合 <code>yield()</code> 或 <code>Thread.sleep()</code> 减少竞争。</li></ul></li></ul><p><strong>只能保证单个变量的原子性</strong></p><ul><li><strong>问题描述</strong>：CAS 只能对一个变量进行原子操作，无法保证多个变量的复合操作（如 <code>i++</code> 和 <code>j--</code>）。</li><li><strong>影响</strong>：需要额外同步机制（如锁）来保证多变量一致性。</li><li><strong>解决方案</strong>： <ul><li>使用 <code>synchronized</code> 或 <code>ReentrantLock</code>。</li><li>设计不可变对象（如 <code>String</code>、<code>BigInteger</code>）。</li></ul></li></ul><p><strong>公平性问题</strong></p><ul><li><strong>问题描述</strong>：CAS 是非公平的，新线程可能比等待队列中的线程更快获取锁。</li><li><strong>影响</strong>：可能导致线程饥饿（某些线程长期得不到执行）。</li><li><strong>解决方案</strong>： <ul><li>使用公平锁（如 <code>ReentrantLock(true)</code>）。</li><li>结合队列调度（如 AQS 的 CLH 队列）。</li></ul></li></ul><p><strong>不适用于复杂操作</strong></p><ul><li><strong>问题描述</strong>：CAS 适合简单操作（如 <code>count++</code>），但不适合复杂逻辑（如数据库事务）。</li><li><strong>影响</strong>：需要拆分为多个 CAS 步骤，可能引入中间状态不一致。</li><li><strong>解决方案</strong>： <ul><li>使用锁（如 <code>synchronized</code>）。</li><li>改用事务内存（如 Clojure STM）。</li></ul></li></ul><p><strong>平台依赖性</strong></p><ul><li><strong>问题描述</strong>：CAS 依赖底层 CPU 指令（如 <code>CMPXCHG</code>），不同架构性能可能差异较大。</li><li><strong>影响</strong>：在 ARM 等弱内存模型平台可能出现意外行为。</li><li><strong>解决方案</strong>：使用 JVM 内置原子类（如 <code>AtomicInteger</code>），而非手动实现。</li></ul><p><strong>总结</strong></p><table><thead><tr><th>问题</th><th>影响</th><th>解决方案</th></tr></thead><tbody><tr><td><strong>ABA 问题</strong></td><td>数据不一致</td><td><code>AtomicStampedReference</code></td></tr><tr><td><strong>自旋开销</strong></td><td>CPU 占用高</td><td>限制自旋次数 / 退让策略</td></tr><tr><td><strong>单变量限制</strong></td><td>复合操作不安全</td><td>锁 / 不可变对象</td></tr><tr><td><strong>公平性</strong></td><td>线程饥饿</td><td>公平锁 / 队列调度</td></tr><tr><td><strong>复杂操作</strong></td><td>难以实现</td><td>锁 / 事务内存</td></tr><tr><td><strong>平台依赖</strong></td><td>跨平台兼容性差</td><td>使用标准库</td></tr></tbody></table><p>CAS 在无锁编程中非常高效，但需结合场景权衡利弊。在高竞争环境下，可能需要改用锁或其他并发策略。</p><h3 id="【中等】什么是-threadlocal" tabindex="-1"><a class="header-anchor" href="#【中等】什么是-threadlocal" aria-hidden="true">#</a> 【中等】什么是 ThreadLocal？</h3><div class="hint-container info"><p class="hint-container-title">什么是 ThreadLocal？</p></div><p>在多线程环境下，共享变量存在并发安全问题。换个思路，如果变量非共享，而是各个线程独享，就不会有并发安全问题。这种思想有个术语叫<strong>线程封闭</strong>，其本质上就是避免共享。没有共享，自然也就没有并发安全问题。在 Java 中，<code>ThreadLocal</code> 正是根据这个思路而设计的。</p><p><strong><code>ThreadLocal</code> 为每个线程都创建了一个本地副本</strong>，这个副本只能被当前线程访问，其他线程无法访问，那么自然是线程安全的。</p><div class="hint-container info"><p class="hint-container-title">ThreadLocal 有哪些应用场景？</p></div><p><strong>（1）存储线程私有数据</strong></p><ul><li><p><strong>用户会话（Session）管理</strong>：每个请求线程存储当前用户的 <code>Session</code>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> currentUser <span class="token operator">=</span> <span class="token class-name">ThreadLocal</span><span class="token punctuation">.</span><span class="token function">withInitial</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 设置当前用户</span>
currentUser<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 获取当前用户</span>
<span class="token class-name">User</span> user <span class="token operator">=</span> currentUser<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>数据库连接（Connection）管理</strong>：避免传递 <code>Connection</code> 参数。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Connection</span><span class="token punctuation">&gt;</span></span> connectionHolder <span class="token operator">=</span>
    <span class="token class-name">ThreadLocal</span><span class="token punctuation">.</span><span class="token function">withInitial</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p><strong>避免参数透传</strong></p><p><strong>问题</strong>：多层方法调用需要透传某个上下文参数（如 <code>traceId</code>）。</p><p><strong>解决</strong>：使用 <code>ThreadLocal</code> 存储，避免方法参数传递。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> traceIdHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 在入口处设置 traceId</span>
traceIdHolder<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;req-123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 在任意深层方法获取</span>
<span class="token class-name">String</span> traceId <span class="token operator">=</span> traceIdHolder<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 无需透传参数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（3）线程安全的工具类</strong></p><p><strong>例如</strong>：<code>SimpleDateFormat</code> 是线程不安全的，但可以用 <code>ThreadLocal</code> 包装：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">&gt;</span></span> dateFormatHolder <span class="token operator">=</span>
    <span class="token class-name">ThreadLocal</span><span class="token punctuation">.</span><span class="token function">withInitial</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 线程安全地使用</span>
<span class="token class-name">String</span> formattedDate <span class="token operator">=</span> dateFormatHolder<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>最佳实践</strong></p><p>（1）<strong>尽量用 <code>static final</code></strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> userHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>避免重复创建 <code>ThreadLocal</code> 实例。</p><p>（2）<strong>必须调用 <code>remove()</code></strong></p><p>尤其在线程池场景，否则会导致内存泄漏。</p><p>（3）<strong>推荐初始化默认值</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> userHolder <span class="token operator">=</span> <span class="token class-name">ThreadLocal</span><span class="token punctuation">.</span><span class="token function">withInitial</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（4）<strong>避免在父子线程间传递</strong></p><p><code>ThreadLocal</code> 不能自动继承，需手动处理（可用 <code>InheritableThreadLocal</code>）。</p><h3 id="【中等】threadlocal-的原理是什么" tabindex="-1"><a class="header-anchor" href="#【中等】threadlocal-的原理是什么" aria-hidden="true">#</a> 【中等】<code>ThreadLocal</code> 的原理是什么？</h3><p><strong>内部结构</strong></p><p><code>ThreadLocal</code> 主要依赖于两个类：<code>ThreadLocal</code> 自身和 <code>ThreadLocalMap</code>。</p><ul><li><strong><code>Thread</code> 类</strong>：每个 <code>Thread</code> 对象内部都有一个类型为 <code>ThreadLocalMap</code> 的成员变量 <code>threadLocals</code>，用于存储该线程的所有 <code>ThreadLocal</code> 变量及其对应的值。</li><li><strong><code>ThreadLocalMap</code></strong>：它是 <code>ThreadLocal</code> 的一个静态内部类，类似于 <code>HashMap</code>，但它使用弱引用的 <code>ThreadLocal</code> 对象作为键，值则是用户设置的对象。</li></ul><p><strong>存储机制</strong></p><ul><li>当调用 <code>ThreadLocal</code> 的 <code>set</code> 方法时，它会首先获取当前线程的 <code>ThreadLocalMap</code>。</li><li>如果 <code>ThreadLocalMap</code> 存在，则以当前 <code>ThreadLocal</code> 对象为键，将值存储到 <code>ThreadLocalMap</code> 中。</li><li>如果 <code>ThreadLocalMap</code> 不存在，则创建一个新的 <code>ThreadLocalMap</code>，并将当前 <code>ThreadLocal</code> 对象和值作为第一个元素存入其中。</li></ul><p><strong>获取机制</strong></p><ul><li>当调用 <code>ThreadLocal</code> 的 <code>get</code> 方法时，它会先获取当前线程的 <code>ThreadLocalMap</code>。</li><li>如果 <code>ThreadLocalMap</code> 存在，则以当前 <code>ThreadLocal</code> 对象为键去查找对应的值。</li><li>如果 <code>ThreadLocalMap</code> 不存在或者没有找到对应的值，则调用 <code>initialValue</code> 方法（可以通过继承 <code>ThreadLocal</code> 类并重写该方法来设置初始值）来获取初始值，并将其存储到 <code>ThreadLocalMap</code> 中。</li></ul><p><strong>弱引用机制</strong></p><p><code>ThreadLocalMap</code> 的键是对 <code>ThreadLocal</code> 对象的弱引用。这意味着当外部对 <code>ThreadLocal</code> 对象的强引用被释放后，<code>ThreadLocal</code> 对象会在下次垃圾回收时被回收。这样可以避免内存泄漏，因为如果使用强引用，即使外部不再使用 <code>ThreadLocal</code> 对象，它也不会被回收，从而导致 <code>ThreadLocalMap</code> 中的条目一直存在。</p><h3 id="【中等】如何解决-threadlocal-内存泄漏问题" tabindex="-1"><a class="header-anchor" href="#【中等】如何解决-threadlocal-内存泄漏问题" aria-hidden="true">#</a> 【中等】如何解决 <code>ThreadLocal</code> 内存泄漏问题？</h3><p><strong>ThreadLocal 的内存泄漏问题源于其特殊的 &quot;弱引用 Key + 强引用 Value&quot; 存储结构</strong>，主要发生在以下两种场景：</p><p><strong>(1) Key 被回收，Value 残留（主要泄漏场景）</strong></p><ul><li><code>ThreadLocal</code> 实例（Key）是<strong>弱引用</strong>，会被 GC 回收</li><li>对应的 Value 是<strong>强引用</strong>，会持续占用内存</li><li>导致 <code>ThreadLocalMap</code> 中出现 <code>key=null</code> 但 <code>value≠null</code> 的无效 Entry</li></ul><p><strong>(2) 线程长期存活时的累积泄漏</strong></p><ul><li>线程池复用线程（如 Tomcat worker 线程）</li><li>每次任务执行后未调用 <code>remove()</code></li><li>导致多个无效 Entry 堆积在 <code>ThreadLocalMap</code> 中</li></ul>`,95),A=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token class-name"},"ExecutorService"),s(" pool "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Executors"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"newFixedThreadPool"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token class-name"},"ThreadLocal"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"BigObject"),n("span",{class:"token punctuation"},">")]),s(" tl "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"ThreadLocal"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token punctuation"},">")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

pool`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"execute"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"->"),s(),n("span",{class:"token punctuation"},"{"),s(`
    tl`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"BigObject"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("  "),n("span",{class:"token comment"},"// 存储大对象"),s(`
    `),n("span",{class:"token comment"},"// 业务逻辑。.."),s(`
    `),n("span",{class:"token comment"},"// 缺少 tl.remove()！线程复用后旧 Value 仍然存在"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),L=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"final"),s(),n("span",{class:"token class-name"},"ThreadLocal"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"User"),n("span",{class:"token punctuation"},">")]),s(" userHolder "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"ThreadLocal"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token punctuation"},">")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"processRequest"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    userHolder`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"User"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 每次请求新 User 对象"),s(`
    `),n("span",{class:"token comment"},"// 业务逻辑。.."),s(`
    `),n("span",{class:"token comment"},"// 忘记调用 userHolder.remove()"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),w=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Service"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token class-name"},"ThreadLocal"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"Config"),n("span",{class:"token punctuation"},">")]),s(" configHolder "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"ThreadLocal"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token punctuation"},">")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 非 static"),s(`

    `),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"serve"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        configHolder`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"loadConfig"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token comment"},"// ..."),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),f=o(`<p><strong>解决方案与最佳实践</strong></p><p><strong>(1) 强制清理方案</strong></p><table><thead><tr><th>方案</th><th>实现方式</th><th>适用场景</th></tr></thead><tbody><tr><td><strong>try-finally</strong></td><td>确保 remove() 执行</td><td>通用场景</td></tr><tr><td><strong>拦截器清理</strong></td><td>AOP/@Around</td><td>Web 应用</td></tr><tr><td><strong>线程池钩子</strong></td><td><code>afterExecute</code></td><td>线程池任务</td></tr></tbody></table><p><strong>代码示例</strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 方案 1：try-finally（推荐）</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    threadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 业务逻辑。..</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    threadLocal<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 方案 2：Spring 拦截器</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span>
                          <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span>
                          <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    threadLocal<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>(2) 设计优化方案</strong></p><ol><li><p><strong>使用 static final 修饰</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> holder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>避免重复创建 ThreadLocal 实例</li></ul></li><li><p><strong>初始化默认值</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ThreadLocal</span><span class="token punctuation">.</span><span class="token function">withInitial</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">LightweightObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>避免持有大对象</li></ul></li><li><p><strong>改用 InheritableThreadLocal</strong>（需谨慎）</p><ul><li>适用于需要父子线程传递数据的场景</li></ul></li></ol><p><strong>ThreadLocalMap 的自动清理机制</strong></p><p>虽然 ThreadLocalMap 有部分自清理能力，但<strong>不可依赖</strong>：</p><ul><li><strong>set() 触发清理</strong>：探测式清理（expungeStaleEntry）</li><li><strong>get() 触发清理</strong>：启发式清理（cleanSomeSlots）</li><li><strong>remove() 触发清理</strong>：完全清理指定 Entry</li></ul><p><strong>重要结论</strong>：</p><ul><li>自动清理不彻底（只清理部分无效 Entry）</li><li>高并发场景可能清理不及时</li><li><strong>必须显式调用 remove()</strong></li></ul><h3 id="【中等】java-中支持哪些原子类" tabindex="-1"><a class="header-anchor" href="#【中等】java-中支持哪些原子类" aria-hidden="true">#</a> 【中等】Java 中支持哪些原子类？</h3><p>原子性是确保并发安全三大特性之一。为了兼顾原子性以及锁带来的性能问题，Java 引入了 CAS （主要体现在 <code>Unsafe</code> 类）来实现非阻塞同步（也叫乐观锁），CAS 底层基于 CPU 指令（硬件支持）支持，具有原子性。并基于 CAS ，提供了一套原子工具类。</p><p>原子类<strong>比锁的粒度更细，更轻量级</strong>，并且对于在多处理器系统上实现高性能的并发代码来说是非常关键的。原子变量将发生竞争的范围缩小到单个变量上。</p><p>原子类相当于一种泛化的 <code>volatile</code> 变量，能够<strong>支持原子的、有条件的读/改/写操</strong>作。</p><p>原子类可以分为 5 个类别，这 5 个类别提供的方法基本上是相似的：</p>`,17),S=n("li",null,[n("strong",null,"基本数据类型"),s("：基本数据类型原子类针对 Java 基本类型提供原子操作。 "),n("ul",null,[n("li",null,[n("code",null,"AtomicBoolean"),s(" - 布尔类型原子类")]),n("li",null,[n("code",null,"AtomicInteger"),s(" - 整型原子类")]),n("li",null,[n("code",null,"AtomicLong"),s(" - 长整型原子类")])])],-1),C=n("strong",null,"引用数据类型",-1),j=n("strong",null,"基本数据类型",-1),T=n("strong",null,"引用数据类型",-1),x={href:"https://dunwu.github.io/waterdrop/pages/3f3649ee/",target:"_blank",rel:"noopener noreferrer"},R=n("ul",null,[n("li",null,[n("code",null,"AtomicReference"),s(" - 引用类型原子类")]),n("li",null,[n("code",null,"AtomicMarkableReference"),s(" - 带有标记位的引用类型原子类")]),n("li",null,[n("code",null,"AtomicStampedReference"),s(" - 带有版本号的引用类型原子类")])],-1),_=o("<li><strong>数组数据类型</strong>：<strong>数组类型的原子类为数组元素提供了 <code>volatile</code> 类型的访问语义</strong>，这是普通数组所不具备的特性——<strong><code>volatile</code> 类型的数组仅在数组引用上具有 <code>volatile</code> 语义</strong>。 <ul><li><code>AtomicIntegerArray</code> - 整形数组原子类</li><li><code>AtomicLongArray</code> - 长整型数组原子类</li><li><code>AtomicReferenceArray</code> - 引用类型数组原子类</li></ul></li><li><strong>属性更新器类型</strong>：<strong>属性更新器支持基于反射机制的更新字段值的原子操作</strong>。 <ul><li><code>AtomicIntegerFieldUpdater</code> - 整型字段的原子更新器</li><li><code>AtomicLongFieldUpdater</code> - 长整型字段的原子更新器</li><li><code>AtomicReferenceFieldUpdater</code> - 原子更新引用类型里的字段</li></ul></li><li><strong>累加器</strong>：相比原子化的基本数据类型，速度更快，但是不支持 <code>compareAndSet()</code> 方法。 <ul><li><code>DoubleAdder</code> - 浮点型原子累加器</li><li><code>LongAdder</code> - 长整型原子累加器。</li><li><code>DoubleAccumulator</code> - 更复杂的浮点型原子累加器</li><li><code>LongAccumulator</code> - 更复杂的长整型原子累加器</li></ul></li>",3),I=o(`<p><strong>原子类底层实现</strong></p><p>所有原子类都基于 <strong>Unsafe + CAS</strong> 实现：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">getAndAddInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> valueOffset<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Unsafe</code>：直接操作内存（CAS 原子指令）</li><li><code>valueOffset</code>：字段内存偏移量</li></ul><p><strong>适用场景</strong></p><ul><li><strong>读多写少</strong>：<code>AtomicXXX</code></li><li><strong>高并发写</strong>：<code>LongAdder</code></li><li><strong>无锁数据结构</strong>：<code>AtomicReference</code> + CAS</li></ul><p><strong>注意事项</strong></p><ul><li>原子类 <strong>不适用于复合操作</strong>（如 <code>check-then-act</code>，仍需锁）</li><li><code>LongAdder</code> 适合统计，但 <strong>不保证实时精确值</strong>（调用 <code>sum()</code> 时才合并）。<code>LongAdder</code> 在操作后的返回值只是一个近似准确的数值，但是 <code>LongAdder</code> 最终返回的是一个准确的数值，所以在一些对实时性要求比较高的场景下，<code>LongAdder</code> 并不能取代 <code>AtomicInteger</code> 或 <code>AtomicLong</code>。</li></ul>`,8);function M(z,J){const l=r("CodeTabs"),d=r("ExternalLinkIcon");return i(),u("div",null,[k,c(l,{id:"807",data:[{id:"synchronized 使用"},{id:"ReentrantLock 使用"}],"tab-id":"synchronized 和 ReentrantLock 使用差异"},{title0:t(({value:a,isActive:e})=>[s("synchronized 使用")]),title1:t(({value:a,isActive:e})=>[s("ReentrantLock 使用")]),tab0:t(({value:a,isActive:e})=>[h]),tab1:t(({value:a,isActive:e})=>[v]),_:1}),m,n("blockquote",null,[n("p",null,[s("扩展："),n("a",b,[s("从 ReentrantLock 的实现看 AQS 的原理及应用"),c(d)])])]),y,c(l,{id:"2295",data:[{id:"线程池环境未清理"},{id:"静态 ThreadLocal 长期持有"},{id:"使用非 static 的 ThreadLocal"}],"tab-id":"内存泄漏的具体场景"},{title0:t(({value:a,isActive:e})=>[s("线程池环境未清理")]),title1:t(({value:a,isActive:e})=>[s("静态 ThreadLocal 长期持有")]),title2:t(({value:a,isActive:e})=>[s("使用非 static 的 ThreadLocal")]),tab0:t(({value:a,isActive:e})=>[A]),tab1:t(({value:a,isActive:e})=>[L]),tab2:t(({value:a,isActive:e})=>[w]),_:1}),f,n("ul",null,[S,n("li",null,[C,s("：Java 数据类型分为 "),j,s(" 和 "),T,s(" 两大类（不了解 Java 数据类型划分可以参考： "),n("a",x,[s("Java 基本数据类型"),c(d)]),s(" ）。如果想针对引用类型做原子操作怎么办？Java 也提供了相关的原子类： "),R]),_]),I])}const H=p(g,[["render",M],["__file","index.html.vue"]]);export{H as default};
