const t=JSON.parse('{"key":"v-cc595398","path":"/pages/b69d49b5/","title":"MySQL 面试之事务和锁篇","lang":"zh-CN","frontmatter":{"icon":"logos:mysql","title":"MySQL 面试之事务和锁篇","cover":"https://raw.githubusercontent.com/dunwu/images/master/snap/202503110803916.jpg","date":"2025-03-24T22:42:57.000Z","permalink":"/pages/b69d49b5/","category":["数据库","关系型数据库","mysql"],"tag":["数据库","关系型数据库","mysql","面试"],"description":"MySQL 面试之事务和锁篇 MySQL 事务 扩展阅读： MySQL 官方文档之 InnoDB 锁和事务模型 【基础】什么是事务，什么是 ACID？ 要点 事务指的是满足 ACID 特性的一组操作。事务内的 SQL 语句，要么全执行成功，要么全执行失败。可以通过 Commit 提交一个事务，也可以使用 Rollback 进行回滚。通俗来说，事务就是要保证一组数据库操作，要么全部成功，要么全部失败。 ACID 是数据库事务正确执行的四个基本要素。 原子性（Atomicity） 事务被视为不可分割的最小单元，事务中的所有操作要么全部提交成功，要么全部失败回滚。 回滚可以用日志来实现，日志记录着事务所执行的修改操作，在回滚时反向执行这些修改操作即可。 一致性（Consistency） 数据库在事务执行前后都保持一致性状态。 在一致性状态下，所有事务对一个数据的读取结果都是相同的。 隔离性（Isolation） 一个事务所做的修改在最终提交以前，对其它事务是不可见的。 持久性（Durability） 一旦事务提交，则其所做的修改将会永远保存到数据库中。即使系统发生崩溃，事务执行的结果也不能丢失。 可以通过数据库备份和恢复来实现，在系统发生奔溃时，使用备份的数据库进行数据恢复。 一个支持事务（Transaction）中的数据库系统，必需要具有这四种特性，否则在事务过程（Transaction processing）当中无法保证数据的正确性。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/b69d49b5/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"MySQL 面试之事务和锁篇"}],["meta",{"property":"og:description","content":"MySQL 面试之事务和锁篇 MySQL 事务 扩展阅读： MySQL 官方文档之 InnoDB 锁和事务模型 【基础】什么是事务，什么是 ACID？ 要点 事务指的是满足 ACID 特性的一组操作。事务内的 SQL 语句，要么全执行成功，要么全执行失败。可以通过 Commit 提交一个事务，也可以使用 Rollback 进行回滚。通俗来说，事务就是要保证一组数据库操作，要么全部成功，要么全部失败。 ACID 是数据库事务正确执行的四个基本要素。 原子性（Atomicity） 事务被视为不可分割的最小单元，事务中的所有操作要么全部提交成功，要么全部失败回滚。 回滚可以用日志来实现，日志记录着事务所执行的修改操作，在回滚时反向执行这些修改操作即可。 一致性（Consistency） 数据库在事务执行前后都保持一致性状态。 在一致性状态下，所有事务对一个数据的读取结果都是相同的。 隔离性（Isolation） 一个事务所做的修改在最终提交以前，对其它事务是不可见的。 持久性（Durability） 一旦事务提交，则其所做的修改将会永远保存到数据库中。即使系统发生崩溃，事务执行的结果也不能丢失。 可以通过数据库备份和恢复来实现，在系统发生奔溃时，使用备份的数据库进行数据恢复。 一个支持事务（Transaction）中的数据库系统，必需要具有这四种特性，否则在事务过程（Transaction processing）当中无法保证数据的正确性。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/dunwu/images/master/snap/202503110803916.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-25T23:38:36.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"MySQL 面试之事务和锁篇"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"数据库"}],["meta",{"property":"article:tag","content":"关系型数据库"}],["meta",{"property":"article:tag","content":"mysql"}],["meta",{"property":"article:tag","content":"面试"}],["meta",{"property":"article:published_time","content":"2025-03-24T22:42:57.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-25T23:38:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MySQL 面试之事务和锁篇\\",\\"image\\":[\\"https://raw.githubusercontent.com/dunwu/images/master/snap/202503110803916.jpg\\"],\\"datePublished\\":\\"2025-03-24T22:42:57.000Z\\",\\"dateModified\\":\\"2025-03-25T23:38:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"MySQL 事务","slug":"mysql-事务","link":"#mysql-事务","children":[{"level":3,"title":"【基础】什么是事务，什么是 ACID？","slug":"【基础】什么是事务-什么是-acid","link":"#【基础】什么是事务-什么是-acid","children":[]},{"level":3,"title":"【中级】事务存在哪些并发一致性问题？","slug":"【中级】事务存在哪些并发一致性问题","link":"#【中级】事务存在哪些并发一致性问题","children":[]},{"level":3,"title":"【中级】长事务可能会导致哪些问题？","slug":"【中级】长事务可能会导致哪些问题","link":"#【中级】长事务可能会导致哪些问题","children":[]},{"level":3,"title":"【高级】事务的二阶段提交是什么？","slug":"【高级】事务的二阶段提交是什么","link":"#【高级】事务的二阶段提交是什么","children":[]},{"level":3,"title":"【中级】有哪些事务隔离级别，分别解决了什么问题？","slug":"【中级】有哪些事务隔离级别-分别解决了什么问题","link":"#【中级】有哪些事务隔离级别-分别解决了什么问题","children":[]},{"level":3,"title":"【中级】MySQL 的默认事务隔离级别是什么？为什么？","slug":"【中级】mysql-的默认事务隔离级别是什么-为什么","link":"#【中级】mysql-的默认事务隔离级别是什么-为什么","children":[]},{"level":3,"title":"【高级】MySQL 是如何实现事务的？","slug":"【高级】mysql-是如何实现事务的","link":"#【高级】mysql-是如何实现事务的","children":[]},{"level":3,"title":"【高级】各事务隔离级别是如何实现的？","slug":"【高级】各事务隔离级别是如何实现的","link":"#【高级】各事务隔离级别是如何实现的","children":[]},{"level":3,"title":"【中级】什么是 MVCC？","slug":"【中级】什么是-mvcc","link":"#【中级】什么是-mvcc","children":[]},{"level":3,"title":"【高级】MVCC 的实现原理是什么？","slug":"【高级】mvcc-的实现原理是什么","link":"#【高级】mvcc-的实现原理是什么","children":[]},{"level":3,"title":"【高级】MVCC 实现了哪些隔离级别，如何实现的？","slug":"【高级】mvcc-实现了哪些隔离级别-如何实现的","link":"#【高级】mvcc-实现了哪些隔离级别-如何实现的","children":[]}]},{"level":2,"title":"MySQL 锁","slug":"mysql-锁","link":"#mysql-锁","children":[{"level":3,"title":"【中级】MySQL 中有哪些锁？","slug":"【中级】mysql-中有哪些锁","link":"#【中级】mysql-中有哪些锁","children":[]},{"level":3,"title":"【中级】独享锁 vs. 共享锁？","slug":"【中级】独享锁-vs-共享锁","link":"#【中级】独享锁-vs-共享锁","children":[]},{"level":3,"title":"【中级】悲观锁 vs. 乐观锁？","slug":"【中级】悲观锁-vs-乐观锁","link":"#【中级】悲观锁-vs-乐观锁","children":[]},{"level":3,"title":"【中级】全局锁 vs. 表级锁 vs. 行级锁？","slug":"【中级】全局锁-vs-表级锁-vs-行级锁","link":"#【中级】全局锁-vs-表级锁-vs-行级锁","children":[]},{"level":3,"title":"【中级】死锁是如何产生的？","slug":"【中级】死锁是如何产生的","link":"#【中级】死锁是如何产生的","children":[]},{"level":3,"title":"【高级】如何避免死锁？","slug":"【高级】如何避免死锁","link":"#【高级】如何避免死锁","children":[]},{"level":3,"title":"【高级】如何解决死锁？","slug":"【高级】如何解决死锁","link":"#【高级】如何解决死锁","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1742827377000,"updatedTime":1742945916000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":2}]},"readingTime":{"minutes":27.04,"words":8112},"filePathRelative":"12.数据库/03.关系型数据库/mysql/MySQL_面试_事务和锁.md","localizedDate":"2025年3月24日","excerpt":"<h1> MySQL 面试之事务和锁篇</h1>\\n<h2> MySQL 事务</h2>\\n<blockquote>\\n<p>扩展阅读：</p>\\n<ul>\\n<li><a href=\\"https://dev.mysql.com/doc/refman/8.4/en/innodb-locking-transaction-model.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">MySQL 官方文档之 InnoDB 锁和事务模型</a></li>\\n</ul>\\n</blockquote>\\n<h3> 【基础】什么是事务，什么是 ACID？</h3>\\n<details class=\\"hint-container details\\"><summary>要点</summary>\\n<p><strong>事务指的是满足 ACID 特性的一组操作</strong>。事务内的 SQL 语句，要么全执行成功，要么全执行失败。可以通过 <code>Commit</code> 提交一个事务，也可以使用 <code>Rollback</code> 进行回滚。通俗来说，<strong>事务就是要保证一组数据库操作，要么全部成功，要么全部失败</strong>。</p>\\n<figure><img src=\\"https://raw.githubusercontent.com/dunwu/images/master/snap/202503242207831.png\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>\\n<p>ACID 是数据库事务正确执行的四个基本要素。</p>\\n<ul>\\n<li><strong>原子性（Atomicity）</strong>\\n<ul>\\n<li>事务被视为不可分割的最小单元，事务中的所有操作要么全部提交成功，要么全部失败回滚。</li>\\n<li>回滚可以用日志来实现，日志记录着事务所执行的修改操作，在回滚时反向执行这些修改操作即可。</li>\\n</ul>\\n</li>\\n<li><strong>一致性（Consistency）</strong>\\n<ul>\\n<li>数据库在事务执行前后都保持一致性状态。</li>\\n<li>在一致性状态下，所有事务对一个数据的读取结果都是相同的。</li>\\n</ul>\\n</li>\\n<li><strong>隔离性（Isolation）</strong>\\n<ul>\\n<li>一个事务所做的修改在最终提交以前，对其它事务是不可见的。</li>\\n</ul>\\n</li>\\n<li><strong>持久性（Durability）</strong>\\n<ul>\\n<li>一旦事务提交，则其所做的修改将会永远保存到数据库中。即使系统发生崩溃，事务执行的结果也不能丢失。</li>\\n<li>可以通过数据库备份和恢复来实现，在系统发生奔溃时，使用备份的数据库进行数据恢复。</li>\\n</ul>\\n</li>\\n</ul>\\n<p>一个支持事务（Transaction）中的数据库系统，必需要具有这四种特性，否则在事务过程（Transaction processing）当中无法保证数据的正确性。</p>\\n</details>","autoDesc":true}');export{t as data};
