import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o as a,c as g,a as t,b as e,d as r,e as o}from"./app-8719940a.js";const d={},i=t("h1",{id:"主流数据库对比",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#主流数据库对比","aria-hidden":"true"},"#"),e(" 主流数据库对比")],-1),c=t("h2",{id:"数据类型",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#数据类型","aria-hidden":"true"},"#"),e(" 数据类型")],-1),h={class:"hint-container info"},f=t("p",{class:"hint-container-title"},"扩展阅读",-1),_={href:"https://www.elastic.co/docs/reference/query-languages/sql/sql-data-types",target:"_blank",rel:"noopener noreferrer"},u={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/bson-types/",target:"_blank",rel:"noopener noreferrer"},y=t("thead",null,[t("tr",null,[t("th",null,"类型"),t("th",null,"Elasticsearch"),t("th",null,"MongoDB")])],-1),p=t("td",null,"整数型",-1),x={href:"https://www.elastic.co/docs/reference/elasticsearch/mapping-reference/number",target:"_blank",rel:"noopener noreferrer"},b=t("code",null,"byte",-1),m={href:"https://www.elastic.co/docs/reference/elasticsearch/mapping-reference/number",target:"_blank",rel:"noopener noreferrer"},w=t("code",null,"short",-1),k={href:"https://www.elastic.co/docs/reference/elasticsearch/mapping-reference/number",target:"_blank",rel:"noopener noreferrer"},M=t("code",null,"integer",-1),S={href:"https://www.elastic.co/docs/reference/elasticsearch/mapping-reference/number",target:"_blank",rel:"noopener noreferrer"},E=t("code",null,"long",-1),B={href:"https://www.elastic.co/docs/reference/elasticsearch/mapping-reference/number",target:"_blank",rel:"noopener noreferrer"},D=t("code",null,"unsigned_long",-1),L=t("td",null,"int、long",-1),O=t("td",null,"浮点型",-1),Q={href:"https://www.elastic.co/docs/reference/elasticsearch/mapping-reference/number",target:"_blank",rel:"noopener noreferrer"},R=t("code",null,"float",-1),T={href:"https://www.elastic.co/docs/reference/elasticsearch/mapping-reference/number",target:"_blank",rel:"noopener noreferrer"},I=t("code",null,"double",-1),C=t("td",null,"double、decimal",-1),P=t("td",null,"布尔型",-1),A={href:"https://www.elastic.co/docs/reference/elasticsearch/mapping-reference/boolean",target:"_blank",rel:"noopener noreferrer"},v=t("code",null,"boolean",-1),W=t("td",null,"bool",-1),N=t("td",null,"字符串型",-1),j={href:"https://www.elastic.co/docs/reference/elasticsearch/mapping-reference/keyword",target:"_blank",rel:"noopener noreferrer"},z={href:"https://www.elastic.co/docs/reference/elasticsearch/mapping-reference/text",target:"_blank",rel:"noopener noreferrer"},$=t("code",null,"text",-1),U=t("td",null,"string",-1),q=t("td",null,"二进制型",-1),H={href:"https://www.elastic.co/docs/reference/elasticsearch/mapping-reference/binary",target:"_blank",rel:"noopener noreferrer"},G=t("code",null,"binary",-1),V=t("td",null,"binData",-1),K=t("td",null,"时间类型",-1),J={href:"https://www.elastic.co/docs/reference/elasticsearch/mapping-reference/date",target:"_blank",rel:"noopener noreferrer"},Y=t("code",null,"date",-1),F=t("td",null,"date、timestamp",-1),Z=t("td",null,"组合类型",-1),X={href:"https://www.elastic.co/docs/reference/elasticsearch/mapping-reference/object",target:"_blank",rel:"noopener noreferrer"},tt=t("code",null,"object",-1),et={href:"https://www.elastic.co/docs/reference/elasticsearch/mapping-reference/nested",target:"_blank",rel:"noopener noreferrer"},nt=t("code",null,"nested",-1),rt=t("td",null,"object、array",-1),ot=t("td",null,"特殊类型",-1),lt={href:"https://www.elastic.co/docs/reference/elasticsearch/mapping-reference/null-value",target:"_blank",rel:"noopener noreferrer"},st=t("code",null,"null",-1),at={href:"https://www.elastic.co/docs/reference/elasticsearch/mapping-reference/ip",target:"_blank",rel:"noopener noreferrer"},gt=t("code",null,"ip",-1),dt={href:"https://www.elastic.co/docs/reference/elasticsearch/mapping-reference/version",target:"_blank",rel:"noopener noreferrer"},it=t("code",null,"version",-1),ct=t("td",null,"null、regex、objectId、javascript",-1),ht=t("h2",{id:"crud",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#crud","aria-hidden":"true"},"#"),e(" CRUD")],-1),ft={class:"hint-container info"},_t=t("p",{class:"hint-container-title"},"扩展阅读",-1),ut={href:"https://www.mongodb.com/zh-cn/docs/manual/crud/",target:"_blank",rel:"noopener noreferrer"},yt={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/getting-started.html",target:"_blank",rel:"noopener noreferrer"},pt={href:"https://www.itshujia.com/read/elasticsearch/343.html",target:"_blank",rel:"noopener noreferrer"},xt=o('<table><thead><tr><th>操作</th><th>Elasticsearch</th><th>MongoDB</th></tr></thead><tbody><tr><td>增</td><td><code>PUT &lt;index&gt;/_doc/&lt;id&gt;</code><br><code>PUT &lt;index&gt;/_create/&lt;id&gt;</code><br><code>POST &lt;index&gt;/_doc</code></td><td><code>db.collection.insertOne()</code><br><code>db.collection.insertMany()</code></td></tr><tr><td>删</td><td><code>DELETE &lt;index&gt;/_doc/&lt;id&gt;</code></td><td><code>db.collection.deleteOne()</code><br><code>db.collection.deleteMany()</code></td></tr><tr><td>改</td><td><code>POST &lt;index&gt;/_update/&lt;id&gt;</code></td><td><code>db.collection.updateOne()</code><br><code>db.collection.updateMany()</code><br><code>db.collection.replaceOne()</code></td></tr><tr><td>查</td><td><code>GET &lt;index&gt;/_doc/&lt;id&gt;</code></td><td><code>db.collection.find()</code></td></tr><tr><td>批处理</td><td><code>_bulk</code>、<code>_mget</code>、<code>_msearch</code></td><td><code>db.collection.insertMany()</code><br><code>db.collection.bulkWrite()</code></td></tr></tbody></table><h2 id="聚合" tabindex="-1"><a class="header-anchor" href="#聚合" aria-hidden="true">#</a> 聚合</h2>',2),bt={class:"hint-container info"},mt=t("p",{class:"hint-container-title"},"扩展阅读",-1),wt={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations.html",target:"_blank",rel:"noopener noreferrer"},kt={href:"https://www.itshujia.com/read/elasticsearch/348.html",target:"_blank",rel:"noopener noreferrer"},Mt=t("h3",{id:"综合对比",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#综合对比","aria-hidden":"true"},"#"),e(" 综合对比")],-1),St=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"RDBM"),t("th",null,"Elasticsearch"),t("th",{style:{"text-align":"left"}},"MongoDB")])],-1),Et=t("td",{style:{"text-align":"left"}},[t("code",null,"WHERE")],-1),Bt=t("td",null,"query",-1),Dt={style:{"text-align":"left"}},Lt={href:"https://docs.mongodb.com/manual/reference/operator/aggregation/match/#pipe._S_match",target:"_blank",rel:"noopener noreferrer"},Ot=t("code",null,"$match",-1),Qt=t("td",{style:{"text-align":"left"}},[t("code",null,"GROUP BY"),e("、"),t("code",null,"HAVING")],-1),Rt={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket.html",target:"_blank",rel:"noopener noreferrer"},Tt=t("strong",null,"Bucket（桶聚合）",-1),It={style:{"text-align":"left"}},Ct={href:"https://docs.mongodb.com/manual/reference/operator/aggregation/group/#pipe._S_group",target:"_blank",rel:"noopener noreferrer"},Pt=t("code",null,"$group",-1),At={href:"https://docs.mongodb.com/manual/reference/operator/aggregation/match/#pipe._S_match",target:"_blank",rel:"noopener noreferrer"},vt=t("code",null,"$match",-1),Wt=t("td",{style:{"text-align":"left"}},[t("code",null,"SELECT")],-1),Nt=t("td",null,"field",-1),jt={style:{"text-align":"left"}},zt={href:"https://docs.mongodb.com/manual/reference/operator/aggregation/project/#pipe._S_project",target:"_blank",rel:"noopener noreferrer"},$t=t("code",null,"$project",-1),Ut=t("td",{style:{"text-align":"left"}},[t("code",null,"ORDER BY")],-1),qt=t("td",null,"order",-1),Ht={style:{"text-align":"left"}},Gt={href:"https://docs.mongodb.com/manual/reference/operator/aggregation/sort/#pipe._S_sort",target:"_blank",rel:"noopener noreferrer"},Vt=t("code",null,"$sort",-1),Kt=t("td",{style:{"text-align":"left"}},[t("code",null,"LIMIT")],-1),Jt=t("td",null,"size",-1),Yt={style:{"text-align":"left"}},Ft={href:"https://docs.mongodb.com/manual/reference/operator/aggregation/limit/#pipe._S_limit",target:"_blank",rel:"noopener noreferrer"},Zt=t("code",null,"$limit",-1),Xt=t("td",{style:{"text-align":"left"}},[t("code",null,"SUM()")],-1),te={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-sum-aggregation.html",target:"_blank",rel:"noopener noreferrer"},ee={style:{"text-align":"left"}},ne={href:"https://docs.mongodb.com/manual/reference/operator/aggregation/sum/#grp._S_sum",target:"_blank",rel:"noopener noreferrer"},re=t("code",null,"$sum",-1),oe=t("td",{style:{"text-align":"left"}},[t("code",null,"COUNT()")],-1),le={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-valuecount-aggregation.html",target:"_blank",rel:"noopener noreferrer"},se={style:{"text-align":"left"}},ae={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/operator/aggregation/count-accumulator/",target:"_blank",rel:"noopener noreferrer"},ge=t("code",null,"$count",-1),de=t("td",{style:{"text-align":"left"}},[t("code",null,"JOIN")],-1),ie=t("td",null,null,-1),ce={style:{"text-align":"left"}},he={href:"https://docs.mongodb.com/manual/reference/operator/aggregation/lookup/#pipe._S_lookup",target:"_blank",rel:"noopener noreferrer"},fe=t("code",null,"$lookup",-1),_e=t("td",{style:{"text-align":"left"}},[t("code",null,"SELECT INTO NEW_TABLE")],-1),ue=t("td",null,null,-1),ye={style:{"text-align":"left"}},pe={href:"https://docs.mongodb.com/manual/reference/operator/aggregation/out/#pipe._S_out",target:"_blank",rel:"noopener noreferrer"},xe=t("code",null,"$out",-1),be=t("td",{style:{"text-align":"left"}},[t("code",null,"MERGE INTO TABLE")],-1),me=t("td",null,null,-1),we={style:{"text-align":"left"}},ke={href:"https://docs.mongodb.com/manual/reference/operator/aggregation/merge/#pipe._S_merge",target:"_blank",rel:"noopener noreferrer"},Me=t("code",null,"$merge",-1),Se=t("td",{style:{"text-align":"left"}},[t("code",null,"UNION ALL")],-1),Ee=t("td",null,null,-1),Be={style:{"text-align":"left"}},De={href:"https://docs.mongodb.com/manual/reference/operator/aggregation/unionWith/#pipe._S_unionWith",target:"_blank",rel:"noopener noreferrer"},Le=t("code",null,"$unionWith",-1),Oe=t("p",null,"Elasticsearch 提供了极其丰富的聚合能力。",-1),Qe=t("p",null,"MongoDB 提供了丰富的聚合能力。",-1),Re=t("h3",{id:"elasticsearch-聚合",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#elasticsearch-聚合","aria-hidden":"true"},"#"),e(" Elasticsearch 聚合")],-1),Te=t("p",null,"在 ES 中，不仅仅是普通搜索，相关性计算（评分）和聚合计算也是先在每个 shard 的本地进行计算，再由 coordinate node 进行汇总。由于分片的本地计算是独立的，只能基于数据子集来进行计算，所以难免出现数据偏差。",-1),Ie=t("figure",null,[t("img",{src:"https://raw.githubusercontent.com/dunwu/images/master/snap/202412012144894.png",alt:"",tabindex:"0",loading:"lazy"}),t("figcaption")],-1),Ce=t("figure",null,[t("img",{src:"https://raw.githubusercontent.com/dunwu/images/master/snap/202412012145912.png",alt:"",tabindex:"0",loading:"lazy"}),t("figcaption")],-1),Pe=t("p",null,"要解决聚合准确性问题，有两个解决方案：",-1),Ae=t("li",null,[e("解决方案 1：当数据量不大的情况下，"),t("strong",null,"设置主分片数为 1"),e("，这意味着在数据全集上进行聚合。但这种方案不太现实。")],-1),ve={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-terms-aggregation.html#search-aggregations-bucket-terms-aggregation-shard-size",target:"_blank",rel:"noopener noreferrer"},We=t("code",null,"shard_size",-1),Ne=t("strong",null,"牺牲整体性能，提高精准度",-1),je=t("code",null,"size * 1.5 + 10",-1),ze=t("p",null,"Elasticsearch 将聚合分为三类：",-1),$e={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics.html",target:"_blank",rel:"noopener noreferrer"},Ue=t("strong",null,"Metric（指标聚合）",-1),qe=t("strong",null,"统计",-1),He={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-max-aggregation.html",target:"_blank",rel:"noopener noreferrer"},Ge={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-min-aggregation.html",target:"_blank",rel:"noopener noreferrer"},Ve={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-avg-aggregation.html",target:"_blank",rel:"noopener noreferrer"},Ke={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-sum-aggregation.html",target:"_blank",rel:"noopener noreferrer"},Je={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-stats-aggregation.html",target:"_blank",rel:"noopener noreferrer"},Ye={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-rate-aggregation.html",target:"_blank",rel:"noopener noreferrer"},Fe={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-cardinality-aggregation.html",target:"_blank",rel:"noopener noreferrer"},Ze=t("li",null,"...",-1),Xe={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket.html",target:"_blank",rel:"noopener noreferrer"},tn=t("strong",null,"Bucket（桶聚合）",-1),en=t("strong",null,"分组",-1),nn={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-filter-aggregation.html",target:"_blank",rel:"noopener noreferrer"},rn={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-filters-aggregation.html",target:"_blank",rel:"noopener noreferrer"},on={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-terms-aggregation.html",target:"_blank",rel:"noopener noreferrer"},ln={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-multi-terms-aggregation.html",target:"_blank",rel:"noopener noreferrer"},sn={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-range-aggregation.html",target:"_blank",rel:"noopener noreferrer"},an={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-composite-aggregation.html",target:"_blank",rel:"noopener noreferrer"},gn={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-nested-aggregation.html",target:"_blank",rel:"noopener noreferrer"},dn=t("li",null,"...",-1),cn={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-pipeline.html",target:"_blank",rel:"noopener noreferrer"},hn=t("strong",null,"Pipeline（管道聚合）",-1),fn=t("strong",null,"再次聚合",-1),_n={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-pipeline-max-bucket-aggregation.html",target:"_blank",rel:"noopener noreferrer"},un={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-pipeline-min-bucket-aggregation.html",target:"_blank",rel:"noopener noreferrer"},yn={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-pipeline-avg-bucket-aggregation.html",target:"_blank",rel:"noopener noreferrer"},pn={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-pipeline-sum-bucket-aggregation.html",target:"_blank",rel:"noopener noreferrer"},xn={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-pipeline-stats-bucket-aggregation.html",target:"_blank",rel:"noopener noreferrer"},bn={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-correlation-aggregation.html",target:"_blank",rel:"noopener noreferrer"},mn={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-pipeline-bucket-sort-aggregation.html",target:"_blank",rel:"noopener noreferrer"},wn={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-pipeline-normalize-aggregation.html",target:"_blank",rel:"noopener noreferrer"},kn=t("h3",{id:"mongodb-聚合",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#mongodb-聚合","aria-hidden":"true"},"#"),e(" MongoDB 聚合")],-1),Mn={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/method/db.collection.aggregate/#mongodb-method-db.collection.aggregate",target:"_blank",rel:"noopener noreferrer"},Sn=t("code",null,"db.collection.aggregate()",-1),En={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/operator/aggregation-pipeline/#std-label-aggregation-pipeline-operator-reference",target:"_blank",rel:"noopener noreferrer"},Bn=o('<h2 id="存储" tabindex="-1"><a class="header-anchor" href="#存储" aria-hidden="true">#</a> 存储</h2><h3 id="逻辑存储" tabindex="-1"><a class="header-anchor" href="#逻辑存储" aria-hidden="true">#</a> 逻辑存储</h3><table><thead><tr><th>RDBM</th><th>Elasticsearch</th><th>MongoDB</th></tr></thead><tbody><tr><td>database</td><td>无</td><td>database</td></tr><tr><td>table</td><td>index</td><td>collection</td></tr><tr><td>row</td><td>document</td><td>document</td></tr><tr><td>column</td><td>field</td><td>field</td></tr><tr><td>index</td><td>无</td><td>index</td></tr></tbody></table><h3 id="物理存储" tabindex="-1"><a class="header-anchor" href="#物理存储" aria-hidden="true">#</a> 物理存储</h3><p>MongoDB：MongoDB 的物理存储机制和 MySQL 较为相近。</p><ul><li><strong>文件级存储</strong>： 一个 MongoDB 实例可以包含多个数据库，每个数据库对应一组 <code>.wt</code> 文件，集合和索引分散在这些文件中。 <ul><li><code>collection-*.wt</code>： 存储集合数据的文件。</li><li><code>index-*.wt</code>： 存储索引数据的文件。</li><li><code>WiredTiger.wt</code>： 一个元数据文件，跟踪所有其他文件。</li><li><code>WiredTiger.lock</code>： 锁文件，标识该数据目录正在被使用。</li><li><code>journal/</code>： 预写事务日志目录。</li></ul></li><li><strong>内存优先</strong>： 几乎所有操作都在<strong>解压后的缓存</strong>中进行，延迟写入磁盘。 <ul><li><strong>工作方式</strong>： 它缓存的是<strong>解压后的</strong>数据和索引的<strong>页（Page）</strong>。查询首先在缓存中查找，如果找不到（cache miss），才会从磁盘读取对应的页，解压后加载到缓存中。</li><li><strong>页面淘汰</strong>： 使用 <strong>LRU (Least Recently Used)</strong> 算法淘汰最久未使用的页。</li></ul></li><li><strong>磁盘管理</strong><ul><li><strong>记录 (Record)</strong>： 对应一个 BSON 文档及其头部信息。</li><li><strong>页 (Page)</strong>： 磁盘 IO 的基本单位。一个页包含多个记录（文档）或索引项。</li><li><strong>区域 (Extent)</strong>： 一组连续的页，分配给特定的集合或索引。 <ul><li>当集合需要更多空间时，WiredTiger 会分配一个新的 Extent 给它。</li><li>这种预分配策略有助于减少碎片和提高写入性能。</li></ul></li></ul></li><li><strong>持久化</strong><ul><li><strong>oplog</strong>：服务层的逻辑日志，类似 MySQL 服务层的 binlog，用于主从同步，恢复数据。</li><li><strong>Journal</strong>：WiredTiger 存储引擎的物理日志，类似 InnoDB 的 Redo Log，都是**预写日志（Write-Ahead Log, WAL）**的实现。</li><li><strong>Checkpoint</strong>：MySQL 和 MongoDB 都会定期将内存中的修改<strong>批量、一致地</strong>写入磁盘文件，减少随机 IO。需要故障恢复时，也都是基于最后一个 Checkpoint，逐一重放操作，以恢复数据。</li></ul></li></ul><h2 id="索引" tabindex="-1"><a class="header-anchor" href="#索引" aria-hidden="true">#</a> 索引</h2><table><thead><tr><th></th><th>Elasticsearch</th><th>MongoDB</th></tr></thead><tbody><tr><td>索引数据结构</td><td>字典树（FST）</td><td>B+树</td></tr><tr><td>索引类型</td><td>倒排索引</td><td>单字段索引，复合索引，多键索引，全文搜索，地理空间索引，哈希索引</td></tr><tr><td>索引优化</td><td></td><td>覆盖索引、最左匹配原则</td></tr></tbody></table><h2 id="事务" tabindex="-1"><a class="header-anchor" href="#事务" aria-hidden="true">#</a> 事务</h2><h2 id="复制" tabindex="-1"><a class="header-anchor" href="#复制" aria-hidden="true">#</a> 复制</h2><h3 id="架构对比" tabindex="-1"><a class="header-anchor" href="#架构对比" aria-hidden="true">#</a> 架构对比</h3><table><thead><tr><th style="text-align:left;">特性</th><th style="text-align:left;">MySQL （以 InnoDB 集群为例）</th><th style="text-align:left;">Elasticsearch</th><th style="text-align:left;">MongoDB</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>复制单元</strong></td><td style="text-align:left;"><strong>数据库 (Database)</strong></td><td style="text-align:left;"><strong>索引 (Index)</strong> 的 <strong>分片</strong></td><td style="text-align:left;"><strong>集合 (Collection)</strong></td></tr><tr><td style="text-align:left;"><strong>核心架构模型</strong></td><td style="text-align:left;"><strong>主从复制 (Master-Slave)</strong>：主负责读写，从只负责读</td><td style="text-align:left;"><strong>对等节点 (Peer-to-Peer)</strong>：无中心主节点。任何节点都可接收请求并路由</td><td style="text-align:left;"><strong>副本集 (Replica Set)</strong>：主负责读写，从只负责读</td></tr><tr><td style="text-align:left;"><strong>节点角色</strong></td><td style="text-align:left;"><strong>Primary</strong> &amp; <strong>Replica</strong>：角色清晰固定</td><td style="text-align:left;"><strong>所有节点对等</strong>：但可配置专属角色（如 Master-eligible, Data, Ingest, Coordinating）</td><td style="text-align:left;"><strong>Primary</strong>, <strong>Secondary</strong>, <strong>Arbiter</strong>：角色清晰，内置<strong>自动故障转移</strong>（通过心跳和选举）</td></tr><tr><td style="text-align:left;"><strong>数据同步方式</strong></td><td style="text-align:left;"><strong>基于 Binlog 的逻辑复制</strong>：主节点将写操作记录到 Binlog，从节点拉取 Binlog，并重放（Replay）SQL 语句</td><td style="text-align:left;"><strong>基于 Translog 的段同步</strong>：主分片处理写请求，并将操作同步到副本分片</td><td style="text-align:left;"><strong>基于 Oplog 的逻辑复制</strong>：主节点将写操作记录到 Oplog，从节点异步拉取并重放这些操作</td></tr><tr><td style="text-align:left;"><strong>一致性模型</strong></td><td style="text-align:left;"><strong>强一致性（默认）</strong>：从节点默认异步复制，但可配置为<strong>半同步</strong>（至少一个从节点确认）以实现强一致性</td><td style="text-align:left;"><strong>最终一致性</strong>：默认异步复制，支持通过写入 <code>consistency</code> 参数来来控制写操作的一致性级别；通过 <code>preference</code> 参数来控制读一致性</td><td style="text-align:left;"><strong>最终一致性（默认）</strong>：读写关注（Write Concern &amp; Read Concern）可灵活配置，从最终一致到强一致（如 <code>{w: &quot;majority&quot;}</code>）</td></tr><tr><td style="text-align:left;"><strong>自动故障转移</strong></td><td style="text-align:left;"><strong>依赖外部组件</strong>：如 Group Replication 或 InnoDB Cluster 提供内置选主。传统主从依赖外部工具（MHA, Orchestrator）</td><td style="text-align:left;"><strong>内置</strong>：由主节点管理集群状态，并在节点失败时重新分配分片</td><td style="text-align:left;"><strong>内置</strong>：副本集成员通过心跳检测，自动触发选举产生新的主节点</td></tr></tbody></table><h3 id="相同点" tabindex="-1"><a class="header-anchor" href="#相同点" aria-hidden="true">#</a> 相同点</h3><ol><li><strong>核心目标一致</strong>：三者都为实现<strong>高可用（HA）</strong> 和<strong>灾难恢复（DR）</strong> 而设计，防止单点故障导致服务中断。</li><li><strong>数据冗余</strong>：都是通过将数据复制到多个节点来实现数据冗余。</li><li><strong>读写分离</strong>：都支持将读请求分发到副本节点，从而提升系统的整体读吞吐量。</li><li><strong>异步复制为基</strong>：默认的复制方式都是<strong>异步</strong>的，以优先保证主节点的写入性能。</li><li><strong>日志驱动</strong>：依赖于一种<strong>预写日志（WAL）</strong> 的变体来驱动复制： <ul><li>MySQL → Binlog 和 Redo Log（InnoDB 引擎）</li><li>Elasticsearch → Translog</li><li>MongoDB → Oplog 和 Journal（WiredTiger 引擎）</li></ul></li><li><strong>提供一致性配置</strong>： 三者都提供了配置参数，允许用户在<strong>性能</strong>和<strong>一致性</strong>之间进行权衡。</li></ol><h3 id="不同点" tabindex="-1"><a class="header-anchor" href="#不同点" aria-hidden="true">#</a> 不同点</h3><table><thead><tr><th style="text-align:left;">维度</th><th style="text-align:left;">MySQL</th><th style="text-align:left;">Elasticsearch</th><th style="text-align:left;">MongoDB</th><th style="text-align:left;">利弊分析</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>架构哲学</strong></td><td style="text-align:left;"><strong>中心化、主从分明</strong></td><td style="text-align:left;"><strong>去中心化、对等网络</strong></td><td style="text-align:left;"><strong>中心化、内置自治</strong></td><td style="text-align:left;"><strong>ES</strong> 的架构无单点瓶颈，更易于水平扩展。<strong>MySQL/MongoDB</strong> 的单一主节点简化了数据一致性管理，但主节点可能成为瓶颈和单点故障（需通过选主解决）。</td></tr><tr><td style="text-align:left;"><strong>配置与管理</strong></td><td style="text-align:left;"><strong>相对复杂</strong>：传统主从配置繁琐；现代组复制/InnoDB 集群简化了操作，但依然较重</td><td style="text-align:left;"><strong>非常简单</strong>：开箱即用。节点加入集群后自动分配数据，运维成本极低</td><td style="text-align:left;"><strong>非常简单</strong>：副本集配置简单，内置自动化程度高，运维友好</td><td style="text-align:left;"><strong>ES &amp; MongoDB</strong> 在易用性上胜出，<strong>MySQL</strong> 的复制生态更庞大但也更复杂</td></tr><tr><td style="text-align:left;"><strong>一致性控制</strong></td><td style="text-align:left;"><strong>最强最灵活</strong>：支持全局事务（XA）、半同步复制，能轻松实现跨节点的强一致性</td><td style="text-align:left;"><strong>最弱</strong>：主要为搜索场景设计，偏向最终一致性。虽支持仲裁，但不像关系型数据库那样严格</td><td style="text-align:left;"><strong>灵活可调</strong>：通过读写关注可在最终一致和强一致之间平滑切换，适应多种场景</td><td style="text-align:left;"><strong>MySQL</strong> 是金融等强一致性场景的首选。<strong>MongoDB</strong> 提供了很好的灵活性。<strong>ES</strong> 不适合强一致性事务场景。</td></tr><tr><td style="text-align:left;"><strong>扩展性</strong></td><td style="text-align:left;"><strong>读扩展性好，写扩展性差</strong>：可以通过添加只读副本来扩展读能力，但写操作始终只能在主节点上进行</td><td style="text-align:left;"><strong>读写扩展性极佳</strong>：通过分片将数据分散，读写都可以在多个分片上并行进行，真正实现水平扩展</td><td style="text-align:left;"><strong>读写扩展性好</strong>：结合<strong>分片集群</strong>，可以将数据分散到多个分片（每个分片是一个副本集），实现写的水平扩展。读扩展通过副本集本身实现</td><td style="text-align:left;"><strong>ES</strong> 和 <strong>MongoDB（分片集群）</strong> 在应对海量数据和高并发写入方面天生优于 <strong>MySQL</strong>。MySQL 的写扩展需要通过应用层分库分表，复杂度高</td></tr><tr><td style="text-align:left;"><strong>延迟与性能</strong></td><td style="text-align:left;">复制延迟可能导致从节点读到的数据是旧的</td><td style="text-align:left;">搜索性能极高，但数据同步延迟可能比数据库更高</td><td style="text-align:left;">复制延迟通常较低，Oplog 操作日志效率很高</td><td style="text-align:left;"><strong>ES</strong> 为搜索性能优化，可能牺牲部分实时性。<strong>MySQL/MongoDB</strong> 更注重数据的实时同步。</td></tr><tr><td style="text-align:left;"><strong>适用场景</strong></td><td style="text-align:left;"><strong>强一致性、复杂事务的 OLTP 应用</strong>：如金融系统、电商核心交易系统</td><td style="text-align:left;"><strong>搜索、日志分析、OLAP</strong>：如商品检索、日志平台、大数据分析</td><td style="text-align:left;"><strong>灵活模型、高吞吐的 Web 应用</strong>：如内容管理系统、用户画像、实时分析</td><td style="text-align:left;">复制机制的设计直接反映了其目标场景。<strong>MySQL 为交易而生，ES 为搜索而生，MongoDB 为灵活扩展的现代应用而生。</strong></td></tr></tbody></table><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h3><table><thead><tr><th style="text-align:left;">数据库</th><th style="text-align:left;">复制机制优势</th><th style="text-align:left;">复制机制劣势</th><th style="text-align:left;">典型使用场景</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>MySQL</strong></td><td style="text-align:left;"><strong>强一致性保证，事务支持完备</strong>，生态成熟。</td><td style="text-align:left;"><strong>写扩展性困难</strong>，架构复杂，运维成本较高。</td><td style="text-align:left;">银行系统、会计软件、任何需要严格 ACID 事务的场景。</td></tr><tr><td style="text-align:left;"><strong>Elasticsearch</strong></td><td style="text-align:left;"><strong>真正的水平扩展</strong>，读写性能极高，容错和恢复自动化程度极高，运维简单。</td><td style="text-align:left;"><strong>最终一致性</strong>，不支持事务，不保证数据的实时性。</td><td style="text-align:left;">全文搜索引擎、日志和指标分析、应用程序搜索。</td></tr><tr><td style="text-align:left;"><strong>MongoDB</strong></td><td style="text-align:left;"><strong>扩展性良好</strong>（读和写），<strong>灵活性高</strong>（一致性可调），运维简单，内置自动故障转移。</td><td style="text-align:left;">默认<strong>最终一致性</strong>，多文档事务性能有损耗（相比 MySQL）。</td><td style="text-align:left;">物联网、内容管理、移动应用、实时分析。</td></tr></tbody></table><p><strong>如何选择：</strong></p><ul><li><strong>如果应用核心是「交易」和「强一致性」</strong>：选择 <strong>MySQL</strong>。它的复制机制为数据安全性和一致性提供了最坚实的基础。</li><li><strong>如果应用核心是「搜索」和「大数据分析」</strong>：选择 <strong>Elasticsearch</strong>。它的分布式对等架构为海量数据的查询和分析提供了无与伦比的性能和扩展性。</li><li><strong>如果应用需要「灵活的数据模型」、「快速迭代」和「水平扩展」，同时需要一定的一致性控制</strong>：选择 <strong>MongoDB</strong>。它在扩展性、一致性和易用性之间取得了最佳平衡。</li></ul><h2 id="分区" tabindex="-1"><a class="header-anchor" href="#分区" aria-hidden="true">#</a> 分区</h2><h3 id="核心概念对比" tabindex="-1"><a class="header-anchor" href="#核心概念对比" aria-hidden="true">#</a> 核心概念对比</h3><table><thead><tr><th style="text-align:left;">特性维度</th><th style="text-align:left;">MySQL</th><th style="text-align:left;">Elasticsearch</th><th style="text-align:left;">MongoDB</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>分区目的</strong></td><td style="text-align:left;"><strong>水平扩展写入能力，管理超大表</strong></td><td style="text-align:left;"><strong>水平扩展读写能力，实现分布式计算</strong></td><td style="text-align:left;"><strong>水平扩展读写能力，支持海量数据增长</strong></td></tr><tr><td style="text-align:left;"><strong>分区/分片单元</strong></td><td style="text-align:left;"><strong>表 (Table)</strong></td><td style="text-align:left;"><strong>分片 (Shard)</strong><br>一个独立的Lucene索引，是数据移动的基本单位。</td><td style="text-align:left;"><strong>块 (Chunk)</strong><br>一个分片键值范围的连续数据段。默认大小64MB。</td></tr><tr><td style="text-align:left;"><strong>核心架构</strong></td><td style="text-align:left;"><strong>需要外部中间件或自定义逻辑</strong></td><td style="text-align:left;"><strong>原生集成，对应用完全透明</strong></td><td style="text-align:left;"><strong>原生集成，对应用近乎透明</strong></td></tr><tr><td style="text-align:left;"><strong>分片键 (Shard Key)</strong></td><td style="text-align:left;"><strong>分区键 (Partition Key)</strong>，在表定义时指定。</td><td style="text-align:left;"><strong>路由键 (Routing Key)</strong>，默认是 <code>_id</code>，可自定义。</td><td style="text-align:left;"><strong>分片键 (Shard Key)</strong>，在集合分片时指定，选择至关重要。</td></tr><tr><td style="text-align:left;"><strong>分片策略</strong></td><td style="text-align:left;"><strong>范围分区 (RANGE)</strong>、<strong>哈希分区 (HASH)</strong>、<strong>KEY 分区</strong></td><td style="text-align:left;"><strong>哈希分片 （默认）</strong>，基于路由键的哈希值。</td><td style="text-align:left;"><strong>范围分片 (Ranged)</strong>、<strong>哈希分片 (Hashed)</strong>、<strong>混合分片 (Zoned)</strong></td></tr><tr><td style="text-align:left;"><strong>数据分布目标</strong></td><td style="text-align:left;"><strong>将数据拆分到不同物理文件，</strong> 便于管理和局部优化。<strong>并不自动分布到不同服务器</strong>。</td><td style="text-align:left;"><strong>将数据均匀分布到集群所有节点</strong>，实现负载均衡和并行处理。</td><td style="text-align:left;"><strong>将数据均匀分布到分片集群的所有分片（Shard）</strong> 上，每个分片是一个副本集。</td></tr><tr><td style="text-align:left;"><strong>查询路由</strong></td><td style="text-align:left;"><strong>应用层负责</strong>。应用必须知道如何将查询路由到正确的分区。</td><td style="text-align:left;"><strong>协调节点负责</strong>。应用可连接任意节点，节点自动路由查询。</td><td style="text-align:left;"><strong>mongos 路由器负责</strong>。应用连接 <code>mongos</code>，由它自动路由和聚合结果。</td></tr><tr><td style="text-align:left;"><strong>跨分片查询</strong></td><td style="text-align:left;"><strong>极其困难</strong>。需要查询所有分区并手动合并结果，性能极差。</td><td style="text-align:left;"><strong>原生支持</strong>。搜索和聚合查询自动并行化，由协调节点汇总结果。</td><td style="text-align:left;"><strong>原生支持</strong>。多数查询通过 <code>mongos</code> 自动路由和聚合。但某些操作（如<code>$lookup</code>）受限。</td></tr><tr><td style="text-align:left;"><strong>再平衡 (Rebalance)</strong></td><td style="text-align:left;"><strong>不支持自动再平衡</strong>。需要手动导出/导入数据，操作复杂且耗时。</td><td style="text-align:left;"><strong>自动再平衡</strong><br>节点数变化后，ES 自动在节点间迁移分片，实现负载均衡<br>集群中的 master 节点负责所有元数据变更和分片分配决策</td><td style="text-align:left;"><strong>自动再平衡</strong>。<br>当分片间的块数量差异超过某个阈值时触发<br>由<strong>配置服务器（Config Server）</strong> 管理元数据，并触发平衡器迁移数据块</td></tr></tbody></table><h3 id="相同点-1" tabindex="-1"><a class="header-anchor" href="#相同点-1" aria-hidden="true">#</a> 相同点</h3><ol><li><strong>核心目标一致</strong>： 三者都为了突破单机硬件（CPU、内存、磁盘）的限制，通过将数据分散到多个节点来实现<strong>水平扩展</strong>。</li><li><strong>基于键值分区</strong>： 都要求选择一个或多个字段的值作为依据（分片键/分区键/路由键），通过这个值的哈希或范围来决定数据的具体位置。</li><li><strong>面临类似挑战</strong>： 都需要解决<strong>跨分片查询</strong>、<strong>数据分布均衡性</strong>、<strong>事务支持</strong>（难度高）和<strong>集群管理</strong>的复杂性。</li></ol><h3 id="不同点-1" tabindex="-1"><a class="header-anchor" href="#不同点-1" aria-hidden="true">#</a> 不同点</h3><table><thead><tr><th style="text-align:left;">维度</th><th style="text-align:left;">MySQL</th><th style="text-align:left;">Elasticsearch</th><th style="text-align:left;">MongoDB</th><th style="text-align:left;">利弊分析</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>易用性与集成度</strong></td><td style="text-align:left;"><strong>极低</strong> 自身分区功能弱，需借助中间件（如 Vitess, ShardingSphere）或应用层自己分库分表。</td><td style="text-align:left;"><strong>极高</strong> <strong>开箱即用</strong>。创建索引时指定分片数即可，集群自动管理数据分布、查询路由和再平衡。</td><td style="text-align:left;"><strong>高</strong> 原生支持。需部署 <code>mongos</code> 和配置服务器，但一旦搭建完成，对应用透明。</td><td style="text-align:left;"><strong>ES &gt; MongoDB &gt; MySQL</strong>。ES 的分布式设计是骨子里的，体验最无缝。MySQL 的分片需要大量的开发和运维投入。</td></tr><tr><td style="text-align:left;"><strong>数据均衡与再平衡</strong></td><td style="text-align:left;"><strong>手动</strong> 需要 DBA 手动干预数据迁移，过程繁琐且易出错。</td><td style="text-align:left;"><strong>全自动</strong> 是 ES 的核心优势之一。节点增减自动触发分片重平衡，无需人工干预。</td><td style="text-align:left;"><strong>自动</strong> 平衡器自动在分片间迁移<strong>数据块（Chunks）</strong> 以保持均衡。</td><td style="text-align:left;"><strong>ES 和 MongoDB 的自动再平衡是巨大优势</strong>，极大降低了运维成本。MySQL 在这方面几乎是空白的。</td></tr><tr><td style="text-align:left;"><strong>查询支持</strong></td><td style="text-align:left;"><strong>极差</strong> 跨分片查询是噩梦。JOIN、ORDER BY + LIMIT 等操作几乎无法高效进行。</td><td style="text-align:left;"><strong>极佳</strong> <strong>核心优势</strong>。所有搜索和聚合 API 都是为分布式设计，自动并行化，对用户无感。</td><td style="text-align:left;"><strong>良好</strong> 大多数 CRUD 操作都能被正确路由。但跨分片聚合、<code>$lookup</code>（表连接）性能较差。</td><td style="text-align:left;"><strong>ES 作为搜索引擎，在分布式查询上碾压其他两者</strong>。MongoDB 支持常见操作，但复杂操作受限。MySQL 的跨分片查询基本不可用。</td></tr><tr><td style="text-align:left;"><strong>分片键选择</strong></td><td style="text-align:left;"><strong>影响管理，不影响性能</strong> 选择主要影响数据归档和管理（如按时间分区删除旧数据）。</td><td style="text-align:left;"><strong>影响性能</strong> 路由键影响数据分布的均匀性。自定义路由键可优化查询，将相关数据放在同一分片。</td><td style="text-align:left;"><strong>至关重要</strong> <strong>一旦选择不可更改</strong>。直接影响性能、数据分布和扩展性。不合适的键会导致<strong>数据热点</strong>和<strong>性能瓶颈</strong>。</td><td style="text-align:left;"><strong>MongoDB 的分片键选择是“一次性”的重大架构决策</strong>，责任最大。ES 和 MySQL 相对灵活一些。</td></tr><tr><td style="text-align:left;"><strong>事务支持</strong></td><td style="text-align:left;"><strong>强（单机）</strong> 在单分区内支持完整 ACID。跨分片事务需要借助中间件，复杂度高，性能差。</td><td style="text-align:left;"><strong>无</strong> 不支持 ACID 事务。提供部分原子性操作（如脚本更新）。</td><td style="text-align:left;"><strong>支持（多文档）</strong> 4.0+ 支持跨分片的多文档事务，但性能有损耗，默认有 60 秒超时限制。</td><td style="text-align:left;"><strong>MySQL 在单机事务上最强</strong>。<strong>MongoDB 提供了跨分片事务的能力</strong>，是一个折中方案。<strong>ES 完全不考虑事务</strong>，这是为其搜索场景做的取舍。</td></tr></tbody></table><h3 id="小结-1" tabindex="-1"><a class="header-anchor" href="#小结-1" aria-hidden="true">#</a> 小结</h3><table><thead><tr><th style="text-align:left;">数据库</th><th style="text-align:left;">分区机制优势</th><th style="text-align:left;">分区机制劣势</th><th style="text-align:left;">典型使用场景</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>MySQL</strong></td><td style="text-align:left;"><strong>单机性能强大</strong>，分区可用于<strong>数据生命周期管理</strong>（如高效删除旧数据）。</td><td style="text-align:left;"><strong>分片功能极其薄弱</strong>，需要大量外部工作和自定义开发，<strong>运维复杂度最高</strong>。</td><td style="text-align:left;">单表数据量巨大且需要定期归档清理的场景（如日志表、事件表）。真正的水平扩展必须依赖中间件。</td></tr><tr><td style="text-align:left;"><strong>Elasticsearch</strong></td><td style="text-align:left;"><strong>原生分布式，易用性顶级</strong>，<strong>自动再平衡</strong>，<strong>分布式查询能力无敌</strong>。</td><td style="text-align:left;"><strong>不支持事务</strong>，不适合强一致性要求的 OLTP 场景。</td><td style="text-align:left;"><strong>搜索、日志、分析</strong>等海量数据<strong>读多写少</strong>的场景。天生为分布式查询而生。</td></tr><tr><td style="text-align:left;"><strong>MongoDB</strong></td><td style="text-align:left;"><strong>原生分片，自动平衡</strong>，对应用透明。<strong>支持跨分片事务</strong>（有限制）。</td><td style="text-align:left;"><strong>分片键选择是永久且关键的</strong>，一旦选择错误代价巨大。复杂查询支持不如 ES。</td><td style="text-align:left;"><strong>需要水平扩展的 OLTP 类应用</strong>，数据模型灵活，读写吞吐量要求高。如游戏、物联网、内容平台。</td></tr></tbody></table><p><strong>如何选择：</strong></p><ol><li><strong>如果主要需求是「搜索」和「分析」</strong>：选择 <strong>Elasticsearch</strong>。它的分区和分布式查询是业界的黄金标准，完全无需你操心数据如何分布和查询如何执行。</li><li><strong>如果需要一个「可水平扩展的通用数据库」，用于现代应用</strong>：选择 <strong>MongoDB</strong>。它的分片集群是内置的，提供了良好的扩展性和灵活性，同时还能支持跨分片事务，适合各种 Web 和移动应用。</li><li><strong>如果数据量很大但主要是「单机操作」，或需要「严格的单机事务」</strong>：选择 <strong>MySQL</strong>。可以使用其分区功能来管理大表，但不要指望它原生能提供分布式数据库的能力。真正的分片需要引入复杂的中间件，这通常是最后的选择。</li></ol><h2 id="故障恢复" tabindex="-1"><a class="header-anchor" href="#故障恢复" aria-hidden="true">#</a> 故障恢复</h2><h3 id="核心机制对比" tabindex="-1"><a class="header-anchor" href="#核心机制对比" aria-hidden="true">#</a> 核心机制对比</h3><table><thead><tr><th style="text-align:left;">特性维度</th><th style="text-align:left;">Elasticsearch</th><th style="text-align:left;">MongoDB</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>故障检测核心</strong></td><td style="text-align:left;"><strong>Zen Discovery</strong>：自定义的节点发现和故障检测协议。主节点（Master-elected）负责监控集群状态。</td><td style="text-align:left;"><strong>心跳机制 (Heartbeat)</strong> 副本集成员间每2秒发送一次心跳包。</td></tr><tr><td style="text-align:left;"><strong>检测指标</strong></td><td style="text-align:left;">节点存活状态、网络分区、分片分配状态</td><td style="text-align:left;">节点存活状态、优先级、Optime（操作时间戳）</td></tr><tr><td style="text-align:left;"><strong>故障恢复</strong></td><td style="text-align:left;"><strong>重新选主 &amp; 分片重分配</strong><br>1. 选举新主节点<br>2. 新主节点将缺失的副本分片提升为主分片，并在其他节点上创建新的副本分片</td><td style="text-align:left;"><strong>自动故障转移 (Failover)</strong><br>1. 剩余节点发起选举<br>2. 基于节点优先级、Optime 等规则选举出新主节点</td></tr><tr><td style="text-align:left;"><strong>选举算法</strong></td><td style="text-align:left;"><strong>Bully-like 算法</strong> 基于节点ID和集群状态，更简单高效。</td><td style="text-align:left;"><strong>Raft 协议变体</strong> 在分布式共识和效率之间取得平衡，易于理解。</td></tr><tr><td style="text-align:left;"><strong>数据一致性保证</strong></td><td style="text-align:left;"><strong>最终一致性</strong> 恢复期间可能读取旧数据，同步队列可能导致数据延迟。</td><td style="text-align:left;"><strong>最终一致性 -&gt; 强一致可调</strong> 默认最终一致，但通过写关注 <code>{w: &quot;majority&quot;}</code> 可保证读己之写和强一致性。</td></tr><tr><td style="text-align:left;"><strong>恢复后数据同步</strong></td><td style="text-align:left;"><strong>分片同步</strong> 新的副本分片从主分片拉取数据进行完整同步。</td><td style="text-align:left;"><strong>初始同步 &amp; Oplog 重放</strong> 新节点先做全量同步，然后持续重放主节点的 Oplog 以保持数据最新。</td></tr><tr><td style="text-align:left;"><strong>运维复杂度</strong></td><td style="text-align:left;"><strong>低</strong> 几乎全自动化，对用户透明，运维非常简单。</td><td style="text-align:left;"><strong>中</strong> 配置简单，但需要理解选举规则和优先级，运维比ES复杂但比MySQL简单。</td></tr></tbody></table><h3 id="相同点-2" tabindex="-1"><a class="header-anchor" href="#相同点-2" aria-hidden="true">#</a> 相同点</h3><ol><li><strong>基于心跳检测</strong>： 都依赖于节点间定期发送心跳包来检测对方是否存活。</li><li><strong>自动选主</strong>： 在主节点故障时，都具备<strong>自动选举新主节点</strong>的能力，无需人工干预。</li><li><strong>多数派原则</strong>： 都遵循“多数派”（Quorum）原则来避免脑裂（Split-Brain）。即集群必须拥有超过半数的投票节点在线才能正常进行主节点选举和数据写入，否则整个集群会进入只读或不可用状态以保护数据。</li></ol><h3 id="不同点-2" tabindex="-1"><a class="header-anchor" href="#不同点-2" aria-hidden="true">#</a> 不同点</h3><table><thead><tr><th style="text-align:left;">维度</th><th style="text-align:left;">Elasticsearch</th><th style="text-align:left;">MongoDB</th><th style="text-align:left;">利弊分析</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>架构哲学</strong></td><td style="text-align:left;"><strong>可用性与分区容错性优先</strong> 源自CAP理论的AP系统，优先保证服务可用性和扩展性，接受最终一致性。</td><td style="text-align:left;"><strong>灵活可调</strong> 在CAP中偏向CP（一致性+分区容错性），但通过读写关注允许应用选择一致性级别。</td><td style="text-align:left;">ES 为搜索性能和可用性牺牲一致性。MongoDB 试图在中间取得平衡。</td></tr><tr><td style="text-align:left;"><strong>故障检测粒度</strong></td><td style="text-align:left;"><strong>分片级 &amp; 节点级</strong> 不仅检测节点，更关注每个分片（数据副本）的状态，粒度更细。</td><td style="text-align:left;"><strong>节点级</strong> 关注副本集成员节点的状态。</td><td style="text-align:left;"><strong>ES 的检测粒度最细</strong>，因为它管理的是分片而非整个节点，恢复可以更精细。</td></tr><tr><td style="text-align:left;"><strong>恢复速度</strong></td><td style="text-align:left;"><strong>非常快</strong> 选举速度快，且分片恢复是并行进行的，单个分片故障不影响其他分片。</td><td style="text-align:left;"><strong>快</strong> Raft选举效率高，通常在10秒内完成故障转移。数据同步基于高效的Oplog。</td><td style="text-align:left;"><strong>ES 和 MongoDB 的恢复速度通常快于 MySQL</strong>，对业务影响更小。</td></tr><tr><td style="text-align:left;"><strong>脑裂</strong></td><td style="text-align:left;"><strong>通过 <code>minimum_master_nodes</code> 配置防止</strong> 需要人工正确配置，配置不当有脑裂风险。7.x 后，由集群自动控制</td><td style="text-align:left;"><strong>通过选举规则避免</strong> 只有拥有最新数据（最高optime）的节点才可能当选为主，防止数据回退。</td><td style="text-align:left;"><strong>ES 需要人工配置保证，MongoDB 通过规则自动保证</strong>。</td></tr><tr><td style="text-align:left;"><strong>数据冲突解决</strong></td><td style="text-align:left;"><strong>最后写入获胜</strong> 基于版本号或时间戳，可能导致数据丢失。</td><td style="text-align:left;"><strong>基于Oplog顺序</strong> 复制是单向的（主-&gt;从），从根本上避免了写入冲突。</td><td style="text-align:left;"><strong>MySQL 和 MongoDB 能很好地避免数据冲突，ES 不擅长处理写入冲突。</strong></td></tr></tbody></table><h3 id="小结-2" tabindex="-1"><a class="header-anchor" href="#小结-2" aria-hidden="true">#</a> 小结</h3><table><thead><tr><th style="text-align:left;">数据库</th><th style="text-align:left;">故障恢复优势</th><th style="text-align:left;">故障恢复劣势</th><th style="text-align:left;">典型使用场景</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>Elasticsearch</strong></td><td style="text-align:left;"><strong>恢复自动化程度最高，速度最快</strong>，分片级故障隔离，集群扩展和恢复无比流畅。</td><td style="text-align:left;"><strong>只有最终一致性</strong>，故障期间和恢复后可能读到旧数据，有脑裂配置风险。</td><td style="text-align:left;"><strong>日志、监控、搜索</strong>等允许数据短暂不一致、但要求高可用和高吞吐的AP场景。</td></tr><tr><td style="text-align:left;"><strong>MongoDB</strong></td><td style="text-align:left;"><strong>在一致性和可用性之间平衡良好</strong>，故障转移快（秒级），配置简单，支持可调一致性。</td><td style="text-align:left;"><strong>分片集群的恢复比副本集更复杂</strong>，可能会遇到<strong>性能抖动</strong>（jumbo chunks、平衡器运行）。</td><td style="text-align:left;"><strong>现代Web应用、物联网平台</strong>等需要<strong>高可用</strong>、<strong>灵活数据模型</strong>，并能接受最终一致或配置强一致的场景。</td></tr></tbody></table><p><strong>如何选择：</strong></p><ol><li><strong>如果业务要求是「数据绝对不能错」，宁可停止服务也要保证一致性</strong>：选择 <strong>MySQL</strong>。它的强一致性模型和基于共识的故障恢复机制为此而生。</li><li><strong>如果业务要求是「服务绝对不能停」，可以接受秒级的数据延迟</strong>：选择 <strong>Elasticsearch</strong>。它的分布式设计和快速恢复能力能最大程度保证服务的可用性和连续性。非常适合可观测性场景。</li><li><strong>如果需要一个「兼顾可用性与一致性」的通用数据库，希望故障恢复快速且对业务透明</strong>：选择 <strong>MongoDB</strong>。它在两者之间取得了最佳实践，故障转移速度快，并且通过读写关注给了开发者灵活选择的权利，适合大多数互联网应用。</li></ol>',42);function Dn(Ln,On){const n=s("ExternalLinkIcon");return a(),g("div",null,[i,c,t("div",h,[f,t("ul",null,[t("li",null,[t("a",_,[e("Elasticsearch 数据类型"),r(n)])]),t("li",null,[t("a",u,[e("MongoDB 数据类型"),r(n)])])])]),t("table",null,[y,t("tbody",null,[t("tr",null,[p,t("td",null,[t("a",x,[b,r(n)]),e("、"),t("a",m,[w,r(n)]),e("、"),t("a",k,[M,r(n)]),e("、"),t("a",S,[E,r(n)]),e("、"),t("a",B,[D,r(n)])]),L]),t("tr",null,[O,t("td",null,[t("a",Q,[R,r(n)]),e("、"),t("a",T,[I,r(n)])]),C]),t("tr",null,[P,t("td",null,[t("a",A,[v,r(n)])]),W]),t("tr",null,[N,t("td",null,[t("a",j,[e("keyword"),r(n)]),e("、"),t("a",z,[$,r(n)])]),U]),t("tr",null,[q,t("td",null,[t("a",H,[G,r(n)])]),V]),t("tr",null,[K,t("td",null,[t("a",J,[Y,r(n)])]),F]),t("tr",null,[Z,t("td",null,[t("a",X,[tt,r(n)]),e("、"),t("a",et,[nt,r(n)])]),rt]),t("tr",null,[ot,t("td",null,[t("a",lt,[st,r(n)]),e("、"),t("a",at,[gt,r(n)]),e("、"),t("a",dt,[it,r(n)])]),ct])])]),ht,t("div",ft,[_t,t("ul",null,[t("li",null,[t("a",ut,[e("MongoDB 官方文档之 CRUD 操作"),r(n)])]),t("li",null,[t("a",yt,[e("Elasticsearch 官方文档之快速入门"),r(n)])]),t("li",null,[t("a",pt,[e("Elasticsearch 从入门到实践之文档的基础操作"),r(n)])])])]),xt,t("div",bt,[mt,t("ul",null,[t("li",null,[t("a",wt,[e("Elasticsearch 官方文档之聚合"),r(n)])]),t("li",null,[t("a",kt,[e("Elasticsearch 从入门到实践之聚合"),r(n)])])])]),Mt,t("table",null,[St,t("tbody",null,[t("tr",null,[Et,Bt,t("td",Dt,[t("a",Lt,[Ot,r(n)])])]),t("tr",null,[Qt,t("td",null,[t("a",Rt,[Tt,r(n)])]),t("td",It,[t("a",Ct,[Pt,r(n)]),e("、"),t("a",At,[vt,r(n)])])]),t("tr",null,[Wt,Nt,t("td",jt,[t("a",zt,[$t,r(n)])])]),t("tr",null,[Ut,qt,t("td",Ht,[t("a",Gt,[Vt,r(n)])])]),t("tr",null,[Kt,Jt,t("td",Yt,[t("a",Ft,[Zt,r(n)])])]),t("tr",null,[Xt,t("td",null,[t("a",te,[e("sum"),r(n)])]),t("td",ee,[t("a",ne,[re,r(n)])])]),t("tr",null,[oe,t("td",null,[t("a",le,[e("value_count"),r(n)])]),t("td",se,[t("a",ae,[ge,r(n)])])]),t("tr",null,[de,ie,t("td",ce,[t("a",he,[fe,r(n)])])]),t("tr",null,[_e,ue,t("td",ye,[t("a",pe,[xe,r(n)])])]),t("tr",null,[be,me,t("td",we,[t("a",ke,[Me,r(n)])])]),t("tr",null,[Se,Ee,t("td",Be,[t("a",De,[Le,r(n)])])])])]),Oe,Qe,Re,Te,Ie,Ce,Pe,t("ul",null,[Ae,t("li",null,[e("解决方案 2："),t("strong",null,[e("设置 "),t("a",ve,[We,r(n)]),e(" 参数")]),e("，将计算数据范围变大，"),Ne,e("。shard_size 的默认值是 "),je,e("。")])]),ze,t("ul",null,[t("li",null,[t("a",$e,[Ue,r(n)]),e("：根据字段值进行"),qe,e("计算 "),t("ul",null,[t("li",null,[t("a",He,[e("max"),r(n)]),e("、"),t("a",Ge,[e("min"),r(n)]),e("、"),t("a",Ve,[e("avg"),r(n)]),e("、"),t("a",Ke,[e("sum"),r(n)]),e("、"),t("a",Je,[e("stats"),r(n)])]),t("li",null,[t("a",Ye,[e("rate"),r(n)])]),t("li",null,[t("a",Fe,[e("cardinality"),r(n)])]),Ze])]),t("li",null,[t("a",Xe,[tn,r(n)]),e("：根据字段值、范围或其他条件进行"),en,t("ul",null,[t("li",null,[t("a",nn,[e("filter"),r(n)]),e("、"),t("a",rn,[e("filters"),r(n)])]),t("li",null,[t("a",on,[e("terms"),r(n)]),e("、"),t("a",ln,[e("multi_terms"),r(n)]),e("、"),t("a",sn,[e("range"),r(n)])]),t("li",null,[t("a",an,[e("composite"),r(n)])]),t("li",null,[t("a",gn,[e("nested"),r(n)])]),dn])]),t("li",null,[t("a",cn,[hn,r(n)]),e("：对其他聚合输出的结果进行"),fn,t("ul",null,[t("li",null,[t("a",_n,[e("max_bucket"),r(n)]),e("、"),t("a",un,[e("min_bucket"),r(n)]),e("、"),t("a",yn,[e("avg_bucket"),r(n)]),e("、"),t("a",pn,[e("sum_bucket"),r(n)]),e("、"),t("a",xn,[e("stats_bucket"),r(n)])]),t("li",null,[t("a",bn,[e("bucket_correlation"),r(n)]),e("、"),t("a",mn,[e("bucket_sort"),r(n)])]),t("li",null,[t("a",wn,[e("normalize"),r(n)])])])])]),kn,t("p",null,[e("MongoDB 使用 "),t("a",Mn,[Sn,r(n)]),e(" 方法分 "),t("a",En,[e("阶段"),r(n)]),e(" 进行聚合计算。")]),Bn])}const Tn=l(d,[["render",Dn],["__file","index.html.vue"]]);export{Tn as default};
