import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as r,c as i,a as n,b as s,d as a,e as l}from"./app-afb37932.js";const p={},d=l(`<h1 id="spring-面试" tabindex="-1"><a class="header-anchor" href="#spring-面试" aria-hidden="true">#</a> Spring 面试</h1><h2 id="综合篇" tabindex="-1"><a class="header-anchor" href="#综合篇" aria-hidden="true">#</a> 综合篇</h2><h3 id="【简单】不同版本的-spring-有哪些主要功能" tabindex="-1"><a class="header-anchor" href="#【简单】不同版本的-spring-有哪些主要功能" aria-hidden="true">#</a> 【简单】不同版本的 Spring 有哪些主要功能？</h3><table><thead><tr><th>Version</th><th>Feature</th></tr></thead><tbody><tr><td>Spring 2.5</td><td>发布于 2007 年。这是第一个支持注解的版本。</td></tr><tr><td>Spring 3.0</td><td>发布于 2009 年。它完全利用了 Java5 中的改进，并为 JEE6 提供了支持。</td></tr><tr><td>Spring 4.0</td><td>发布于 2013 年。这是第一个完全支持 JAVA8 的版本。</td></tr></tbody></table><h3 id="【简单】spring、springmvc、springboot-三者之间是什么关系" tabindex="-1"><a class="header-anchor" href="#【简单】spring、springmvc、springboot-三者之间是什么关系" aria-hidden="true">#</a> 【简单】Spring、SpringMVC、SpringBoot 三者之间是什么关系？</h3><p>Spring 是一个应用级框架。</p><p>Spring MVC 是 Spring 一个子模块，主要支持 Web 领域的开发。</p><p>Spring Boot 是基于 Spring 框架，支持各种自动化默认配置，节省接入成本。其设计理念是：约定由于配置。</p><h3 id="【简单】什么是-spring" tabindex="-1"><a class="header-anchor" href="#【简单】什么是-spring" aria-hidden="true">#</a> 【简单】什么是 Spring？</h3><ul><li>Spring 是一个开源应用框架，旨在降低应用程序开发的复杂度。</li><li>它是轻量级、松散耦合的。</li><li>它具有分层体系结构，允许用户选择组件，同时还为 J2EE 应用程序开发提供了一个有凝聚力的框架。</li><li>它可以集成其他框架，如 Structs、Hibernate、EJB 等，所以又称为框架的框架。</li></ul><h3 id="【简单】列举-spring-framework-的优点。" tabindex="-1"><a class="header-anchor" href="#【简单】列举-spring-framework-的优点。" aria-hidden="true">#</a> 【简单】列举 Spring Framework 的优点。</h3><ul><li>由于 Spring Frameworks 的分层架构，用户可以自由选择自己需要的组件。</li><li>Spring Framework 支持 POJO(Plain Old Java Object) 编程，从而具备持续集成和可测试性。</li><li>由于依赖注入和控制反转，JDBC 得以简化。</li><li>它是开源免费的。</li></ul><h3 id="【中等】spring-有哪些模块-🌟" tabindex="-1"><a class="header-anchor" href="#【中等】spring-有哪些模块-🌟" aria-hidden="true">#</a> 【中等】Spring 有哪些模块？🌟</h3><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/java/spring/spring-framework.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>Spring 的核心模块主要包括以下部分：</p><ul><li><strong>Core Container 模块</strong><ul><li><strong>Spring Core</strong>：提供控制反转（IoC）和依赖注入（DI）功能，是 Spring 框架的基础。</li><li><strong>Spring Beans</strong>：管理 Bean 的生命周期和依赖关系，提供 BeanFactory，用于创建和管理对象。</li><li><strong>Spring Context</strong>：建立在 Core 和 Beans 模块之上，提供配置、国际化、事件传播等功能。</li><li><strong>Spring Expression Language（SpEL）</strong>：支持运行时查询和操作对象图的表达式语言。</li></ul></li><li><strong>AOP 模块</strong><ul><li><strong>Spring AOP</strong>：提供面向切面编程的支持，实现横切关注点的模块化，如日志、事务管理。</li><li><strong>Aspects</strong>：与 AspectJ 集成，提供更强大的 AOP 功能。</li></ul></li><li><strong>数据访问/集成模块</strong><ul><li><strong>Spring JDBC</strong>：简化 JDBC 操作，提供异常处理和资源管理。</li><li><strong>Spring ORM</strong>：集成主流 ORM 框架，如 Hibernate、JPA，提供统一的 DAO 支持。</li><li><strong>Spring Transactions</strong>：提供声明式和编程式事务管理，确保数据一致性。</li></ul></li><li><strong>Web 模块</strong><ul><li><strong>Spring Web</strong>：提供 Web 应用程序开发的基础功能，如多部分文件上传。</li><li><strong>Spring MVC</strong>：基于 MVC 设计模式的 Web 框架，支持灵活的视图技术。</li><li><strong>Spring WebFlux</strong>：响应式编程模型，支持非阻塞式 Web 应用。</li></ul></li><li><strong>测试模块</strong><ul><li><strong>Spring Test</strong>：提供对单元测试和集成测试的支持，简化测试代码的编写。</li></ul></li><li><strong>其他模块</strong><ul><li><strong>Spring Instrumentation</strong>：提供类加载器和类植入支持。</li><li><strong>Spring Messaging</strong>：支持消息传输，如 STOMP 协议和 WebSocket。</li></ul></li></ul><p>这些核心模块共同构成了 Spring 框架的基础，为开发者提供了全面的解决方案，简化了 Java 应用程序的开发。</p><h3 id="【中等】spring-是如何启动的-🌟🌟" tabindex="-1"><a class="header-anchor" href="#【中等】spring-是如何启动的-🌟🌟" aria-hidden="true">#</a> 【中等】Spring 是如何启动的？🌟🌟</h3><p>Spring 启动主要分为三阶段：</p><ol><li><strong>初始化容器</strong><ul><li>实例化 <code>ApplicationContext</code>。</li><li>调用核心的 <strong><code>refresh()</code></strong> 方法，触发启动流程。</li></ul></li><li><strong>加载解析配置</strong><ul><li>将配置（XML 或注解）解析为 <strong><code>BeanDefinition</code></strong> 对象。</li><li>将所有 <code>BeanDefinition</code> 注册到容器的“注册表”中。</li></ul></li><li><strong>创建与注入 Bean</strong><ul><li>实例化所有非懒加载的单例 Bean（<strong>调用构造方法</strong>）。</li><li><strong>进行依赖注入（DI）</strong>，为 Bean 填充属性。</li><li>执行 Bean 的<strong>初始化</strong>（Aware 接口、<code>BeanPostProcessor</code>、init-method）。</li></ul></li></ol><p>Spring 启动流程可以概括为：<strong>容器读取配置，生成 Bean 定义，然后根据定义通过反射创建 Bean 实例，并递归地完成依赖注入和初始化的过程</strong>。</p><h3 id="【中等】spring-框架中都用到了哪些设计模式-🌟🌟" tabindex="-1"><a class="header-anchor" href="#【中等】spring-框架中都用到了哪些设计模式-🌟🌟" aria-hidden="true">#</a> 【中等】Spring 框架中都用到了哪些设计模式？🌟🌟</h3><table><thead><tr><th style="text-align:left;">设计模式</th><th style="text-align:left;">Spring 中的应用场景</th><th style="text-align:left;">目的</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>工厂模式</strong></td><td style="text-align:left;"><code>BeanFactory</code>, <code>ApplicationContext</code></td><td style="text-align:left;">解耦对象的创建与使用</td></tr><tr><td style="text-align:left;"><strong>单例模式</strong></td><td style="text-align:left;">Bean 的默认作用域</td><td style="text-align:left;">保证一个类只有一个实例</td></tr><tr><td style="text-align:left;"><strong>代理模式</strong></td><td style="text-align:left;">AOP（如 <code>@Transactional</code>）</td><td style="text-align:left;">控制对象访问，增强功能</td></tr><tr><td style="text-align:left;"><strong>模板方法模式</strong></td><td style="text-align:left;"><code>JdbcTemplate</code>, <code>RestTemplate</code></td><td style="text-align:left;">封装固定流程，简化开发</td></tr><tr><td style="text-align:left;"><strong>观察者模式</strong></td><td style="text-align:left;">应用事件（<code>ApplicationEvent</code>）</td><td style="text-align:left;">实现事件驱动，解耦组件</td></tr><tr><td style="text-align:left;"><strong>策略模式</strong></td><td style="text-align:left;"><code>Resource</code>, <code>PlatformTransactionManager</code></td><td style="text-align:left;">封装可互换的算法族</td></tr><tr><td style="text-align:left;"><strong>适配器模式</strong></td><td style="text-align:left;"><code>HandlerAdapter</code></td><td style="text-align:left;">转换接口，使不兼容的类能合作</td></tr><tr><td style="text-align:left;"><strong>装饰者模式</strong></td><td style="text-align:left;"><code>HttpServletRequestWrapper</code></td><td style="text-align:left;">动态增强对象功能</td></tr></tbody></table><h2 id="bean" tabindex="-1"><a class="header-anchor" href="#bean" aria-hidden="true">#</a> Bean</h2><h3 id="【简单】什么是-spring-bean" tabindex="-1"><a class="header-anchor" href="#【简单】什么是-spring-bean" aria-hidden="true">#</a> 【简单】什么是 Spring Bean？</h3><p>在 Spring 中，构成应用程序主体由 Spring IoC 容器管理的对象称为 Bean。<strong>Bean 是由 Spring IoC 容器实例化、装配和管理的对象</strong>。 Bean 以及它们之间的依赖关系反映在容器使用的配置元数据中。</p><p>Spring IoC 容器本身，并不能识别配置的元数据。为此，要将这些配置信息转为 Spring 能识别的格式——<code>BeanDefinition</code> 对象。</p><p><strong><code>BeanDefinition</code> 是 Spring 中定义 Bean 的配置元信息接口</strong>，它包含：</p><ul><li>Bean 类名</li><li>Bean 行为配置元素，如：作用域、自动绑定的模式、生命周期回调等</li><li>其他 Bean 引用，也可称为合作者（Collaborators）或依赖（Dependencies）</li><li>配置设置，如 Bean 属性（Properties）</li></ul><h3 id="【简单】spring-提供了哪些配置方式" tabindex="-1"><a class="header-anchor" href="#【简单】spring-提供了哪些配置方式" aria-hidden="true">#</a> 【简单】Spring 提供了哪些配置方式？</h3><ul><li>基于 xml 配置</li></ul><p>bean 所需的依赖项和服务在 XML 格式的配置文件中指定。这些配置文件通常包含许多 bean 定义和特定于应用程序的配置选项。它们通常以 bean 标签开头。例如：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>studentbean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.edureka.firstSpring.StudentBean<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Edureka<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>基于注解配置</li></ul><p>您可以通过在相关的类，方法或字段声明上使用注解，将 bean 配置为组件类本身，而不是使用 XML 来描述 bean 装配。默认情况下，Spring 容器中未打开注解装配。因此，您需要在使用它之前在 Spring 配置文件中启用它。例如：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>annotation-config</span><span class="token punctuation">/&gt;</span></span>
<span class="token comment">&lt;!-- bean definitions go here --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>基于 Java API 配置</li></ul><p>Spring 的 Java 配置是通过使用 @Bean 和 @Configuration 来实现。</p><ol><li>@Bean 注解扮演与 <code>&lt;bean /&gt;</code> 元素相同的角色。</li><li>@Configuration 类允许通过简单地调用同一个类中的其他 @Bean 方法来定义 bean 间依赖关系。</li></ol><p>例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">StudentBean</span> <span class="token function">myStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">StudentBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="【中等】spring-bean-支持哪些作用域-🌟🌟" tabindex="-1"><a class="header-anchor" href="#【中等】spring-bean-支持哪些作用域-🌟🌟" aria-hidden="true">#</a> 【中等】Spring Bean 支持哪些作用域？🌟🌟</h3><table><thead><tr><th style="text-align:left;">作用域</th><th style="text-align:left;">说明</th><th style="text-align:left;">适用场景</th><th style="text-align:left;">配置</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>singleton</strong></td><td style="text-align:left;"><strong>默认</strong>，每个容器一个实例</td><td style="text-align:left;">无状态 Bean：Service, DAO, 工具类</td><td style="text-align:left;"><code>@Scope(&quot;singleton&quot;)</code> （默认）</td></tr><tr><td style="text-align:left;"><strong>prototype</strong></td><td style="text-align:left;">每次请求创建一个新实例</td><td style="text-align:left;">有状态 Bean：需要隔离的对象</td><td style="text-align:left;"><code>@Scope(&quot;prototype&quot;)</code></td></tr><tr><td style="text-align:left;"><strong>request</strong></td><td style="text-align:left;">每个 HTTP 请求一个实例</td><td style="text-align:left;">存储请求相关数据</td><td style="text-align:left;"><code>@RequestScope</code></td></tr><tr><td style="text-align:left;"><strong>session</strong></td><td style="text-align:left;">每个 HTTP Session 一个实例</td><td style="text-align:left;">存储用户会话信息：购物车、用户身份</td><td style="text-align:left;"><code>@SessionScope</code></td></tr><tr><td style="text-align:left;"><strong>application</strong></td><td style="text-align:left;">每个 Web 应用一个实例</td><td style="text-align:left;">存储全局应用级数据</td><td style="text-align:left;"><code>@ApplicationScope</code></td></tr></tbody></table><h3 id="【困难】spring-bean-的生命周期是怎样的-🌟🌟🌟" tabindex="-1"><a class="header-anchor" href="#【困难】spring-bean-的生命周期是怎样的-🌟🌟🌟" aria-hidden="true">#</a> 【困难】Spring Bean 的生命周期是怎样的？🌟🌟🌟</h3><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20211201102734.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Spring Bean 容器的生命周期如下：</p><ul><li><strong>实例化</strong>：Spring 容器根据配置文件或注解实例化 Bean 对象。</li><li><strong>属性注入</strong>：Spring 将依赖（通过构造器、setter 方法或字段注入）注入到 Bean 实例中。</li><li><strong>初始化前的扩展机制</strong>：如果 Bean 实现了 BeanNameAware 等 aware 接口，则执行 aware 注入。</li><li><strong>初始化前（BeanPostProcessor）</strong>：在 Bean 初始化之前，可以通过 BeanPostProcessor 接口对 Bean 进行一些额外的处理。</li><li><strong>初始化</strong>：调用 InitializingBean 接口的 afterPropertiesSet () 方法或通过 init-method 属性指定的初始化方法。</li><li><strong>初始化后（BeanPostProcessor）</strong>：在 Bean 初始化后，可以通过 BeanPostProcessor 进行进一步的处理。</li><li><strong>使用 Bean</strong>：Bean 已经初始化完成，可以被容器中的其他 Bean 使用。</li><li><strong>销毁</strong>：当容器关闭时，Spring 调用 DisposableBean 接口的 destroy () 方法或通过 destroy-method 属性指定的销毁方法。</li></ul><h3 id="【中等】什么是自动装配" tabindex="-1"><a class="header-anchor" href="#【中等】什么是自动装配" aria-hidden="true">#</a> 【中等】什么是自动装配？</h3><p>Spring 容器能够自动装配 bean。也就是说，可以通过检查 BeanFactory 的内容让 Spring 自动解析 bean 的协作者。</p><p>自动装配的不同模式：</p><ul><li><strong>no</strong> - 这是默认设置，表示没有自动装配。应使用显式 bean 引用进行装配。</li><li><strong>byName</strong> - 它根据 bean 的名称注入对象依赖项。它匹配并装配其属性与 XML 文件中由相同名称定义的 bean。</li><li><strong>byType</strong> - 它根据类型注入对象依赖项。如果属性的类型与 XML 文件中的一个 bean 名称匹配，则匹配并装配属性。</li><li><strong>构造器</strong> - 它通过调用类的构造器来注入依赖项。它有大量的参数。</li><li><strong>autodetect</strong> - 首先容器尝试通过构造器使用 autowire 装配，如果不能，则尝试通过 byType 自动装配。</li></ul><p>自动装配的局限：</p><ul><li>覆盖的可能性 - 您始终可以使用 <code>&lt;constructor-arg&gt;</code> 和 <code>&lt;property&gt;</code> 设置指定依赖项，这将覆盖自动装配。</li><li>基本元数据类型 - 简单属性（如原数据类型，字符串和类）无法自动装配。</li><li>令人困惑的性质 - 总是喜欢使用明确的装配，因为自动装配不太精确。</li></ul><h2 id="ioc" tabindex="-1"><a class="header-anchor" href="#ioc" aria-hidden="true">#</a> IoC</h2><h3 id="【简单】什么是-ioc-什么是依赖注入-什么是-spring-ioc-🌟🌟🌟" tabindex="-1"><a class="header-anchor" href="#【简单】什么是-ioc-什么是依赖注入-什么是-spring-ioc-🌟🌟🌟" aria-hidden="true">#</a> 【简单】什么是 IoC？什么是依赖注入？什么是 Spring IoC？🌟🌟🌟</h3><p><strong>控制反转（IoC）<strong>是一种</strong>设计思想</strong>：将对象的<strong>创建控制权</strong>从程序内部“反转”给<strong>外部容器</strong>，目的是<strong>解耦</strong>。</p><p><strong>依赖注入（DI）<strong>是实现 IoC 的</strong>具体技术</strong>：由容器<strong>动态地</strong>将依赖关系<strong>注入</strong>到对象中（通过构造器或 Setter）。</p><p><strong>Spring IoC</strong> 是 Spring 对 <strong>IoC/DI 的实现</strong>。Spring 的 <strong>IoC 容器</strong>负责管理所有对象（称为 <strong>Bean</strong>），包括创建、组装和管理其生命周期。</p><p>一言以蔽之：遵循 <strong>IoC</strong> 思想，通过 <strong>DI</strong> 技术实现，而 <strong>Spring IoC</strong> 就是最主流的实现容器。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20221005163639.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="【简单】依赖注入有哪些实现方式" tabindex="-1"><a class="header-anchor" href="#【简单】依赖注入有哪些实现方式" aria-hidden="true">#</a> 【简单】依赖注入有哪些实现方式？</h3><p>依赖注入有如下方式：</p><table><thead><tr><th>依赖注入方式</th><th>配置元数据举例</th></tr></thead><tbody><tr><td>Setter 方法注入</td><td><code>&lt;proeprty name=&quot;user&quot; ref=&quot;userBean&quot;/&gt;</code></td></tr><tr><td>构造器注入</td><td><code>&lt;constructor-arg name=&quot;user&quot; ref=&quot;userBean&quot; /&gt;</code></td></tr><tr><td>字段注入</td><td><code>@Autowired User user;</code></td></tr><tr><td>方法注入</td><td><code>@Autowired public void user(User user) { ... }</code></td></tr><tr><td>接口回调注入</td><td><code>class MyBean implements BeanFactoryAware { ... }</code></td></tr></tbody></table><h3 id="【简单】beanfactory-和-applicationcontext-有什么区别-🌟" tabindex="-1"><a class="header-anchor" href="#【简单】beanfactory-和-applicationcontext-有什么区别-🌟" aria-hidden="true">#</a> 【简单】BeanFactory 和 ApplicationContext 有什么区别？🌟</h3><p>在 Spring 中，有两种 IoC 容器：<code>BeanFactory</code> 和 <code>ApplicationContext</code>。</p><ul><li><code>BeanFactory</code>：<strong><code>BeanFactory</code> 是 Spring 基础 IoC 容器</strong>。<code>BeanFactory</code> 提供了 Spring 容器的配置框架和基本功能。</li><li><code>ApplicationContext</code>：<strong><code>ApplicationContext</code> 是具备应用特性的 <code>BeanFactory</code> 的子接口</strong>。它还扩展了其他一些接口，以支持更丰富的功能，如：国际化、访问资源、事件机制、更方便的支持 AOP、在 web 应用中指定应用层上下文等。</li></ul><p>实际开发中，更推荐使用 <code>ApplicationContext</code> 作为 IoC 容器，因为它的功能远多于 <code>BeanFactory</code>。</p><h3 id="【简单】beanfactory-和-factorybean-有什么区别-🌟" tabindex="-1"><a class="header-anchor" href="#【简单】beanfactory-和-factorybean-有什么区别-🌟" aria-hidden="true">#</a> 【简单】BeanFactory 和 FactoryBean 有什么区别？🌟</h3><p><strong><code>BeanFactory</code> 是 Spring 基础 IoC 容器</strong>。</p><p><strong><code>FactoryBean</code> 是创建 Bean 的一种方式</strong>，帮助实现复杂的初始化逻辑。</p><h3 id="【困难】spring-如何解决循环依赖-🌟🌟🌟" tabindex="-1"><a class="header-anchor" href="#【困难】spring-如何解决循环依赖-🌟🌟🌟" aria-hidden="true">#</a> 【困难】Spring 如何解决循环依赖？🌟🌟🌟</h3><p><strong>Spring 采用三级缓存来解决循环依赖</strong>，其关键是：<strong>提前暴露未完全创建完毕的 Bean</strong>。</p><p>三级缓存：</p><ul><li><strong>一级缓存（成品，<code>singletonObjects</code>）</strong>：存放完全初始化的单例 Bean。</li><li><strong>二级缓存（半成品，<code>earlySingletonObjects</code>）</strong>：存放从工厂中取出的早期引用，用于提前暴露对象，避免循环依赖问题。</li><li><strong>三级缓存（工厂，<code>singletonFactories</code>）</strong>：<strong>最关键的一步</strong>。存放 Bean 的工厂（<code>ObjectFactory</code>），用于<strong>提前暴露</strong>一个尚未初始化完成的 Bean 的引用（特别是为了支持 AOP 代理对象的创建）。</li></ul><p>解决步骤：</p><figure><img src="https://img2024.cnblogs.com/blog/786311/202506/786311-20250620213520068-1302403901.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li><strong>实例化 &amp; 暴露工厂</strong>：实例化 Bean A 后，立即将其工厂放入<strong>三级缓存</strong>，<strong>提前暴露引用</strong>。</li><li><strong>填充属性时循环引用</strong>：为 A 注入 B 时，触发创建 B。B 在注入 A 时，能从<strong>三级缓存</strong>的工厂中获取到 A 的早期引用。</li><li><strong>升级缓存 &amp; 完成注入</strong>：将获取到的早期引用 A 放入<strong>二级缓存</strong>，并注入给 B，从而让 B 和 A 都能顺利完成创建。</li></ol><h3 id="【困难】spring-解决循环依赖为什么一定要用三级缓存-🌟🌟" tabindex="-1"><a class="header-anchor" href="#【困难】spring-解决循环依赖为什么一定要用三级缓存-🌟🌟" aria-hidden="true">#</a> 【困难】Spring 解决循环依赖为什么一定要用三级缓存？🌟🌟</h3><p>选择<strong>三级缓存</strong>而非二级缓存，主要出于** AOP 代理**的考虑，而非单纯解决循环依赖。</p><ul><li><strong>二级缓存问题</strong>：如果使用二级缓存，必须在 Bean <strong>实例化后立即创建代理</strong>。这违背了 Spring 在 Bean <strong>初始化完成后才创建代理</strong>的设计原则，且可能导致注入的是原始对象而非最终代理对象。</li><li><strong>三级缓存优势</strong>：三级缓存存储的是<strong>一个能生产最终代理对象的工厂</strong>。当发生循环依赖时，由工厂动态决定返回原始对象还是代理对象，从而<strong>确保注入的总是最终版本的对象</strong>，同时遵守了代理的创建时机原则。</li></ul><p>一言以蔽之：<strong>三级缓存通过一个延迟处理的工厂，确保了在循环依赖中注入的也是最终的代理对象，维护了 AOP 与 IOC 的正确行为</strong>。</p><h2 id="aop" tabindex="-1"><a class="header-anchor" href="#aop" aria-hidden="true">#</a> AOP</h2><h3 id="【简单】什么是-aop-🌟🌟🌟" tabindex="-1"><a class="header-anchor" href="#【简单】什么是-aop-🌟🌟🌟" aria-hidden="true">#</a> 【简单】什么是 AOP？🌟🌟🌟</h3><p>**AOP（面向切面编程）**是一种编程思想，<strong>将与核心业务无关的公共功能（如日志、事务）从业务代码中剥离出来，集中管理和复用</strong>，作为 OOP（面向对象编程）的有效补充。</p><p><strong>为什么需要 AOP？</strong></p><p>解决 <strong>“横切关注点”</strong> 问题，即那些分散在各个模块中的重复性代码（如日志、安全、事务）。目标是：<strong>解耦、避免代码重复、提升可维护性</strong>。换句话说，<strong>AOP 能在不修改原有业务代码的情况下，给程序动态、统一地添加功能</strong>。</p><p><strong>AOP 核心概念</strong></p><ul><li><strong>切面（Aspect）</strong>：<strong>“做什么”</strong>。封装公共功能的模块（如日志模块）。</li><li><strong>通知（Advice）</strong>：<strong>“何时做”</strong>。定义切面工作的具体时机（如方法调用前、后）。 <ul><li><strong>前置通知（Before）</strong>：在方法执行之前执行的操作。</li><li><strong>后置通知（After）</strong>：在方法执行之后执行的操作。</li><li><strong>环绕通知（Around）</strong>：在方法执行前后都可以执行的操作，可以控制方法是否执行。</li><li><strong>异常通知（AfterThrowing）</strong>：在方法抛出异常后执行的操作。</li><li><strong>返回通知（AfterReturning）</strong>：在方法成功返回后执行的操作。</li></ul></li><li><strong>切点（Pointcut）</strong>：<strong>“在哪做”</strong>。通过表达式匹配需要切入的具体方法。</li><li><strong>连接点（JoinPoint）</strong>：<strong>“可以做的点”</strong>。程序执行中的节点（如方法调用），是切点的具体实例。</li></ul><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/java/spring/core/spring-aop.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="【中等】spring-aop-有哪些实现方式-🌟🌟🌟" tabindex="-1"><a class="header-anchor" href="#【中等】spring-aop-有哪些实现方式-🌟🌟🌟" aria-hidden="true">#</a> 【中等】Spring AOP 有哪些实现方式？🌟🌟🌟</h3><p>Spring AOP 基于<strong>动态代理</strong>，主要分为两种实现方式：</p><ul><li><p><strong>JDK 动态代理</strong></p><ul><li><strong>条件</strong>：代理<strong>实现了接口</strong>的类。</li><li><strong>原理</strong>：通过反射创建<strong>实现了相同接口</strong>的代理对象。</li><li><strong>限制</strong>：只能代理<strong>接口中定义的方法</strong>。</li></ul></li><li><p><strong>CGLIB 代理</strong></p><ul><li><strong>条件</strong>：代理<strong>未实现接口</strong>的类。</li><li><strong>原理</strong>：通过<strong>字节码技术</strong>生成目标类的<strong>子类</strong>作为代理对象。</li><li><strong>限制</strong>：无法代理 <strong><code>final</code> 类</strong> 或 <strong><code>final</code>/<code>static</code> 方法</strong>。</li></ul></li></ul><p><strong>选择策略</strong></p><ul><li><strong>默认行为</strong>：有接口用 <strong>JDK</strong>，无接口用 <strong>CGLIB</strong>。</li><li><strong>强制配置</strong>：可通过设置 <code>proxy-target-class=true</code> <strong>强制</strong>所有情况都使用 <strong>CGLIB</strong>。</li></ul><p><strong>一句话总结</strong>：Spring AOP 在运行时通过 <strong>JDK 代理（基于接口）</strong> 或 <strong>CGLIB 代理（基于继承）</strong> 动态生成代理对象，从而将切面逻辑织入目标方法。</p><h2 id="注解" tabindex="-1"><a class="header-anchor" href="#注解" aria-hidden="true">#</a> 注解</h2><h3 id="你用过哪些重要的-spring-注解" tabindex="-1"><a class="header-anchor" href="#你用过哪些重要的-spring-注解" aria-hidden="true">#</a> 你用过哪些重要的 Spring 注解？</h3><ul><li><strong>@Controller</strong> - 用于 Spring MVC 项目中的控制器类。</li><li><strong>@Service</strong> - 用于服务类。</li><li><strong>@RequestMapping</strong> - 用于在控制器处理程序方法中配置 URI 映射。</li><li><strong>@ResponseBody</strong> - 用于发送 Object 作为响应，通常用于发送 XML 或 JSON 数据作为响应。</li><li><strong>@PathVariable</strong> - 用于将动态值从 URI 映射到处理程序方法参数。</li><li><strong>@Autowired</strong> - 用于在 spring bean 中自动装配依赖项。</li><li><strong>@Qualifier</strong> - 使用 @Autowired 注解，以避免在存在多个 bean 类型实例时出现混淆。</li><li><strong>@Scope</strong> - 用于配置 spring bean 的范围。</li><li><strong>@Configuration</strong>，<strong>@ComponentScan</strong> 和 <strong>@Bean</strong> - 用于基于 java 的配置。</li><li><strong>@Aspect</strong>，<strong>@Before</strong>，<strong>@After</strong>，<strong>@Around</strong>，<strong>@Pointcut</strong> - 用于切面编程（AOP）。</li></ul><h3 id="如何在-spring-中启动注解装配" tabindex="-1"><a class="header-anchor" href="#如何在-spring-中启动注解装配" aria-hidden="true">#</a> 如何在 spring 中启动注解装配？</h3><p>默认情况下，Spring 容器中未打开注解装配。因此，要使用基于注解装配，我们必须通过配置<code>&lt;context：annotation-config /&gt;</code> 元素在 Spring 配置文件中启用它。</p><h3 id="component-controller-repository-service-有何区别" tabindex="-1"><a class="header-anchor" href="#component-controller-repository-service-有何区别" aria-hidden="true">#</a> @Component, @Controller, @Repository, @Service 有何区别？</h3><ul><li>@Component：这将 java 类标记为 bean。它是任何 Spring 管理组件的通用构造型。spring 的组件扫描机制现在可以将其拾取并将其拉入应用程序环境中。</li><li>@Controller：这将一个类标记为 Spring Web MVC 控制器。标有它的 Bean 会自动导入到 IoC 容器中。</li><li>@Service：此注解是组件注解的特化。它不会对 @Component 注解提供任何其他行为。您可以在服务层类中使用 @Service 而不是 @Component，因为它以更好的方式指定了意图。</li><li>@Repository：这个注解是具有类似用途和功能的 @Component 注解的特化。它为 DAO 提供了额外的好处。它将 DAO 导入 IoC 容器，并使未经检查的异常有资格转换为 Spring DataAccessException。</li></ul><h3 id="required-注解有什么用" tabindex="-1"><a class="header-anchor" href="#required-注解有什么用" aria-hidden="true">#</a> @Required 注解有什么用？</h3><p>@Required 应用于 bean 属性 setter 方法。此注解仅指示必须在配置时使用 bean 定义中的显式属性值或使用自动装配填充受影响的 bean 属性。如果尚未填充受影响的 bean 属性，则容器将抛出 BeanInitializationException。</p><p>示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Required</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> string <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="autowired-注解有什么用" tabindex="-1"><a class="header-anchor" href="#autowired-注解有什么用" aria-hidden="true">#</a> @Autowired 注解有什么用？</h3><p>@Autowired 可以更准确地控制应该在何处以及如何进行自动装配。此注解用于在 setter 方法，构造器，具有任意名称或多个参数的属性或方法上自动装配 bean。默认情况下，它是类型驱动的注入。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> string <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="qualifier-注解有什么用" tabindex="-1"><a class="header-anchor" href="#qualifier-注解有什么用" aria-hidden="true">#</a> @Qualifier 注解有什么用？</h3><p>当您创建多个相同类型的 bean 并希望仅使用属性装配其中一个 bean 时，您可以使用@Qualifier 注解和 @Autowired 通过指定应该装配哪个确切的 bean 来消除歧义。</p><p>例如，这里我们分别有两个类，Employee 和 EmpAccount。在 EmpAccount 中，使用@Qualifier 指定了必须装配 id 为 emp1 的 bean。</p><p>Employee.java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> string <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>EmpAccount.java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmpAccount</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Employee</span> emp<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>emp1<span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>“<span class="token class-name">Employee</span> name <span class="token operator">:</span> ”<span class="token operator">+</span>emp<span class="token punctuation">.</span>getName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="requestmapping-注解有什么用" tabindex="-1"><a class="header-anchor" href="#requestmapping-注解有什么用" aria-hidden="true">#</a> @RequestMapping 注解有什么用？</h3><p>@RequestMapping 注解用于将特定 HTTP 请求方法映射到将处理相应请求的控制器中的特定类/方法。此注解可应用于两个级别：</p><ul><li>类级别：映射请求的 URL</li><li>方法级别：映射 URL 以及 HTTP 请求方法</li></ul><h2 id="数据篇" tabindex="-1"><a class="header-anchor" href="#数据篇" aria-hidden="true">#</a> 数据篇</h2><h3 id="【中等】spring-dao-有哪些异常" tabindex="-1"><a class="header-anchor" href="#【中等】spring-dao-有哪些异常" aria-hidden="true">#</a> 【中等】Spring DAO 有哪些异常？</h3><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/java/spring/data-access/spring-data-access-exception.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="【中等】什么是-spring-的事务管理" tabindex="-1"><a class="header-anchor" href="#【中等】什么是-spring-的事务管理" aria-hidden="true">#</a> 【中等】什么是 Spring 的事务管理？</h3><p>Spring 支持声明式、编程式、注解式定义事务。</p><p>Spring 事务定义的属性有：</p><ul><li><strong>隔离级别</strong>：<code>DEFAULT</code>（使用数据库默认），<code>READ_COMMITTED</code>，<code>REPEATABLE_READ</code> 等</li><li><strong>传播行为</strong>：<code>REQUIRED</code>（默认），<code>REQUIRES_NEW</code>，<code>NESTED</code>，<code>SUPPORTS</code> 等</li><li><strong>回滚规则</strong>：指定哪些异常触发回滚</li><li><strong>是否只读</strong></li><li><strong>事务超时</strong></li></ul><h3 id="【中等】spring-事务支持哪些传播行为-🌟" tabindex="-1"><a class="header-anchor" href="#【中等】spring-事务支持哪些传播行为-🌟" aria-hidden="true">#</a> 【中等】Spring 事务支持哪些传播行为？🌟</h3><table><thead><tr><th style="text-align:left;">传播行为</th><th style="text-align:left;">值</th><th style="text-align:left;">当前有事务</th><th style="text-align:left;">当前无事务</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>REQUIRED</strong> （默认）</td><td style="text-align:left;"><code>Propagation.REQUIRED</code></td><td style="text-align:left;"><strong>加入</strong>当前事务</td><td style="text-align:left;"><strong>新建</strong>一个事务</td></tr><tr><td style="text-align:left;"><strong>SUPPORTS</strong></td><td style="text-align:left;"><code>Propagation.SUPPORTS</code></td><td style="text-align:left;"><strong>加入</strong>当前事务</td><td style="text-align:left;"><strong>非事务</strong>运行</td></tr><tr><td style="text-align:left;"><strong>MANDATORY</strong></td><td style="text-align:left;"><code>Propagation.MANDATORY</code></td><td style="text-align:left;"><strong>加入</strong>当前事务</td><td style="text-align:left;"><strong>抛出异常</strong></td></tr><tr><td style="text-align:left;"><strong>REQUIRES_NEW</strong></td><td style="text-align:left;"><code>Propagation.REQUIRES_NEW</code></td><td style="text-align:left;"><strong>挂起</strong>当前并<strong>新建</strong></td><td style="text-align:left;"><strong>新建</strong>一个事务</td></tr><tr><td style="text-align:left;"><strong>NOT_SUPPORTED</strong></td><td style="text-align:left;"><code>Propagation.NOT_SUPPORTED</code></td><td style="text-align:left;"><strong>挂起</strong>当前并<strong>非事务</strong>运行</td><td style="text-align:left;"><strong>非事务</strong>运行</td></tr><tr><td style="text-align:left;"><strong>NEVER</strong></td><td style="text-align:left;"><code>Propagation.NEVER</code></td><td style="text-align:left;"><strong>抛出异常</strong></td><td style="text-align:left;"><strong>非事务</strong>运行</td></tr><tr><td style="text-align:left;"><strong>NESTED</strong></td><td style="text-align:left;"><code>Propagation.NESTED</code></td><td style="text-align:left;">在<strong>嵌套事务</strong>中执行</td><td style="text-align:left;"><strong>新建</strong>一个事务</td></tr></tbody></table><h2 id="mvc" tabindex="-1"><a class="header-anchor" href="#mvc" aria-hidden="true">#</a> MVC</h2><h3 id="【困难】spring-mvc-是如何工作的-🌟🌟🌟" tabindex="-1"><a class="header-anchor" href="#【困难】spring-mvc-是如何工作的-🌟🌟🌟" aria-hidden="true">#</a> 【困难】Spring MVC 是如何工作的？🌟🌟🌟</h3><p><strong>Spring MVC 的核心是 <code>DispatcherServlet</code>，它充当了前端控制器（Front Controller）的模式，是所有请求的统一入口，负责协调各个组件完成请求处理</strong>。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/java/spring/web/spring-dispatcher-servlet.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>请求流程</strong></p><ol><li><strong>用户请求</strong>：用户通过浏览器发送 HTTP 请求到服务器。</li><li><strong>DispatcherServlet 接收请求</strong>：作为前端控制器，DispatcherServlet 拦截所有请求。</li><li><strong>HandlerMapping 映射处理器</strong>：DispatcherServlet 调用 HandlerMapping，根据请求的 URL 找到对应的处理器（Controller）。</li><li><strong>HandlerAdapter 调用处理器</strong>：DispatcherServlet 通过 HandlerAdapter 调用具体的处理器方法，执行业务逻辑。</li><li><strong>处理器返回 ModelAndView</strong>：处理器处理完请求后，返回包含模型数据和视图信息的 ModelAndView 对象。</li><li><strong>ViewResolver 解析视图</strong>：DispatcherServlet 使用 ViewResolver 将逻辑视图名解析为具体的视图实现（如 JSP）。</li><li><strong>渲染视图</strong>：视图组件将模型数据填充到视图中，生成最终的响应内容。</li><li><strong>返回响应</strong>：DispatcherServlet 将渲染后的视图返回给客户端，完成请求-响应的整个过程。</li></ol><p><strong>核心组件</strong></p><ul><li><strong><code>DispatcherServlet</code></strong>：作为前端控制器，负责接收请求并协调其他组件的工作。</li><li><strong><code>HandlerMapping</code></strong>：根据请求的 URL，将请求映射到对应的处理器。</li><li><strong><code>HandlerAdapter</code></strong>：调用处理器方法，并处理返回结果。</li><li><strong><code>Controller</code></strong>：处理具体的业务逻辑，生成模型和视图信息。</li><li><strong><code>ModelAndView</code></strong>：包含处理结果和视图信息的对象。</li><li><strong><code>ViewResolver</code></strong>：将逻辑视图名解析为实际的视图实现。</li><li><strong><code>View</code></strong>：负责将模型数据渲染成最终的响应内容。</li></ul><p><strong>配置与扩展</strong></p><ul><li>注解支持：使用 <code>@Controller</code>、<code>@RequestMapping</code> 等注解简化开发。</li><li>拦截器（Interceptor）：在请求处理前后执行额外的逻辑，如权限检查、日志记录等。</li><li>数据绑定与验证：提供数据绑定和验证机制，方便处理表单数据。<br> 通过以上流程和组件，Spring MVC 实现了请求的分发、处理、视图渲染等功能，使开发者能够高效地开发 Web 应用程序。</li></ul><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料" aria-hidden="true">#</a> 资料</h2>`,139),c={href:"https://www.mianshiya.com/bank/1797452903309508610",target:"_blank",rel:"noopener noreferrer"},g={href:"https://www.edureka.co/blog/interview-questions/spring-interview-questions/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://www.journaldev.com/2696/spring-interview-questions-and-answers",target:"_blank",rel:"noopener noreferrer"};function h(k,b){const t=o("ExternalLinkIcon");return r(),i("div",null,[d,n("ul",null,[n("li",null,[n("a",c,[s("面试鸭 - Spring 面试"),a(t)])]),n("li",null,[n("a",g,[s("Top 50 Spring Interview Questions You Must Prepare In 2018"),a(t)])]),n("li",null,[n("a",u,[s("Spring Interview Questions and Answers"),a(t)])])])])}const v=e(p,[["render",h],["__file","index.html.vue"]]);export{v as default};
