import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as l,c,a as n,b as s,d as e,e as t}from"./app-4ada5ecf.js";const i={},u=t('<h1 id="flink-api" tabindex="-1"><a class="header-anchor" href="#flink-api" aria-hidden="true">#</a> Flink API</h1><h2 id="flink-api-的分层" tabindex="-1"><a class="header-anchor" href="#flink-api-的分层" aria-hidden="true">#</a> Flink API 的分层</h2><p>Flink 为流式/批式处理应用程序的开发提供了不同级别的抽象。</p><figure><img src="https://nightlies.apache.org/flink/flink-docs-release-1.14/fig/levels_of_abstraction.svg" alt="Programming levels of abstraction" tabindex="0" loading="lazy"><figcaption>Programming levels of abstraction</figcaption></figure>',4),r=n("strong",null,"有状态实时流处理",-1),k={href:"https://nightlies.apache.org/flink/flink-docs-release-1.14/zh/docs/dev/datastream/operators/process_function/",target:"_blank",rel:"noopener noreferrer"},d=n("strong",null,"Process Function",-1),m={href:"https://nightlies.apache.org/flink/flink-docs-release-1.14/zh/docs/dev/datastream/overview/",target:"_blank",rel:"noopener noreferrer"},v=n("em",null,"状态",-1),h=n("strong",null,"Core APIs",-1),g=n("strong",null,"Core APIs",-1),b={href:"https://nightlies.apache.org/flink/flink-docs-release-1.14/zh/docs/dev/datastream/overview/",target:"_blank",rel:"noopener noreferrer"},f={href:"https://nightlies.apache.org/flink/flink-docs-release-1.14/zh/docs/dev/dataset/overview/",target:"_blank",rel:"noopener noreferrer"},_=n("p",null,[n("em",null,"Process Function"),s(" 这类底层抽象和 "),n("em",null,"DataStream API"),s(" 的相互集成使得用户可以选择使用更底层的抽象 API 来实现自己的需求。"),n("em",null,"DataSet API"),s(" 还额外提供了一些原语，比如循环/迭代（loop/iteration）操作。")],-1),P=n("strong",null,"Table API",-1),I=n("strong",null,"Table API",-1),A={href:"https://nightlies.apache.org/flink/flink-docs-release-1.14/zh/docs/dev/table/overview/",target:"_blank",rel:"noopener noreferrer"},S=n("em",null,"应执行的逻辑操作",-1),T=n("em",null,"应该执行的代码",-1),y=n("p",null,[s("表和 "),n("em",null,"DataStream"),s("/"),n("em",null,"DataSet"),s(" 可以进行无缝切换，Flink 允许用户在编写应用程序时将 "),n("em",null,"Table API"),s(" 与 "),n("em",null,"DataStream"),s("/"),n("em",null,"DataSet"),s(" API 混合使用。")],-1),w=n("strong",null,"SQL",-1),x=n("em",null,"Table API",-1),D={href:"https://nightlies.apache.org/flink/flink-docs-release-1.14/zh/docs/dev/table/overview/#sql",target:"_blank",rel:"noopener noreferrer"},F=n("em",null,"Table API",-1),L=n("h2",{id:"processfunction",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#processfunction","aria-hidden":"true"},"#"),s(" ProcessFunction")],-1),C={href:"https://nightlies.apache.org/flink/flink-docs-stable/dev/stream/operators/process_function.html",target:"_blank",rel:"noopener noreferrer"},E=n("strong",null,"对于时间和状态的细粒度控制",-1),N={href:"https://flink.apache.org/zh/usecases.html#eventDrivenApps",target:"_blank",rel:"noopener noreferrer"},q=t(`<p>下面的代码示例展示了如何在 <code>KeyedStream</code> 上利用 <code>KeyedProcessFunction</code> 对标记为 <code>START</code> 和 <code>END</code> 的事件进行处理。当收到 <code>START</code> 事件时，处理函数会记录其时间戳，并且注册一个时长 4 小时的计时器。如果在计时器结束之前收到 <code>END</code> 事件，处理函数会计算其与上一个 <code>START</code> 事件的时间间隔，清空状态并将计算结果返回。否则，计时器结束，并清空状态。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**

 * 将相邻的 keyed START 和 END 事件相匹配并计算两者的时间间隔
 * 输入数据为 Tuple2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String,</span> <span class="token attr-name">String</span><span class="token punctuation">&gt;</span></span> 类型，第一个字段为 key 值，
 * 第二个字段标记 START 和 END 事件。
    */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">StartEndDuration</span>
    <span class="token keyword">extends</span> <span class="token class-name">KeyedProcessFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

  <span class="token keyword">private</span> <span class="token class-name">ValueState</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> startTime<span class="token punctuation">;</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token class-name">Configuration</span> conf<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// obtain state handle</span>
    startTime <span class="token operator">=</span> <span class="token function">getRuntimeContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ValueStateDescriptor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;startTime&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/** Called for each processed event. */</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processElement</span><span class="token punctuation">(</span>
      <span class="token class-name">Tuple2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> in<span class="token punctuation">,</span>
      <span class="token class-name">Context</span> ctx<span class="token punctuation">,</span>
      <span class="token class-name">Collector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>

    <span class="token keyword">switch</span> <span class="token punctuation">(</span>in<span class="token punctuation">.</span>f1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token string">&quot;START&quot;</span><span class="token operator">:</span>
        <span class="token comment">// set the start time if we receive a start event.</span>
        startTime<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">timestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// register a timer in four hours from the start event.</span>
        ctx<span class="token punctuation">.</span><span class="token function">timerService</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">registerEventTimeTimer</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">timestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">&quot;END&quot;</span><span class="token operator">:</span>
        <span class="token comment">// emit the duration between start and end event</span>
        <span class="token class-name">Long</span> sTime <span class="token operator">=</span> startTime<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>sTime <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          out<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Tuple2</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>in<span class="token punctuation">.</span>f0<span class="token punctuation">,</span> ctx<span class="token punctuation">.</span><span class="token function">timestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> sTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">// clear the state</span>
          startTime<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token comment">// do nothing</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/** Called when a timer fires. */</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onTimer</span><span class="token punctuation">(</span>
      <span class="token keyword">long</span> timestamp<span class="token punctuation">,</span>
      <span class="token class-name">OnTimerContext</span> ctx<span class="token punctuation">,</span>
      <span class="token class-name">Collector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> out<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">// Timeout interval exceeded. Cleaning up the state.</span>
    startTime<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子充分展现了 <code>KeyedProcessFunction</code> 强大的表达力，也因此是一个实现相当复杂的接口。</p><h2 id="datastream-api" tabindex="-1"><a class="header-anchor" href="#datastream-api" aria-hidden="true">#</a> DataStream API</h2>`,4),j={href:"https://nightlies.apache.org/flink/flink-docs-stable/dev/datastream_api.html",target:"_blank",rel:"noopener noreferrer"},z=n("code",null,"map()",-1),R=n("code",null,"reduce()",-1),O=n("code",null,"aggregate()",-1),Q=t(`<p>下面的代码示例展示了如何捕获会话时间范围内所有的点击流事件，并对每一次会话的点击量进行计数。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 网站点击 Click 的数据流</span>
<span class="token class-name">DataStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Click</span><span class="token punctuation">&gt;</span></span> clicks <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token class-name">DataStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> clicks
  <span class="token comment">// 将网站点击映射为 (userId, 1) 以便计数</span>
  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>
    <span class="token comment">// 实现 MapFunction 接口定义函数</span>
    <span class="token keyword">new</span> <span class="token class-name">MapFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Click</span><span class="token punctuation">,</span> <span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token annotation punctuation">@Override</span>
      <span class="token keyword">public</span> <span class="token class-name">Tuple2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Click</span> click<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Tuple2</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>click<span class="token punctuation">.</span>userId<span class="token punctuation">,</span> <span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token comment">// 以 userId (field 0) 作为 key</span>
  <span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token comment">// 定义 30 分钟超时的会话窗口</span>
  <span class="token punctuation">.</span><span class="token function">window</span><span class="token punctuation">(</span><span class="token class-name">EventTimeSessionWindows</span><span class="token punctuation">.</span><span class="token function">withGap</span><span class="token punctuation">(</span><span class="token class-name">Time</span><span class="token punctuation">.</span><span class="token function">minutes</span><span class="token punctuation">(</span><span class="token number">30L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token comment">// 对每个会话窗口的点击进行计数，使用 lambda 表达式定义 reduce 函数</span>
  <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Tuple2</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>f0<span class="token punctuation">,</span> a<span class="token punctuation">.</span>f1 <span class="token operator">+</span> b<span class="token punctuation">.</span>f1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sql-table-api" tabindex="-1"><a class="header-anchor" href="#sql-table-api" aria-hidden="true">#</a> SQL &amp; Table API</h2>`,3),G={href:"https://nightlies.apache.org/flink/flink-docs-stable/dev/table/index.html",target:"_blank",rel:"noopener noreferrer"},V={href:"https://calcite.apache.org/",target:"_blank",rel:"noopener noreferrer"},B={href:"https://flink.apache.org/zh/usecases.html#analytics",target:"_blank",rel:"noopener noreferrer"},K={href:"https://flink.apache.org/zh/usecases.html#pipelines",target:"_blank",rel:"noopener noreferrer"},M=t(`<p>下面的代码示例展示了如何使用 SQL 语句查询捕获会话时间范围内所有的点击流事件，并对每一次会话的点击量进行计数。此示例与上述 DataStream API 中的示例有着相同的逻辑。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> userId<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>
<span class="token keyword">FROM</span> clicks
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token keyword">SESSION</span><span class="token punctuation">(</span>clicktime<span class="token punctuation">,</span> <span class="token keyword">INTERVAL</span> <span class="token string">&#39;30&#39;</span> <span class="token keyword">MINUTE</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userId
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="flink-库" tabindex="-1"><a class="header-anchor" href="#flink-库" aria-hidden="true">#</a> Flink 库</h2><p>Flink 具有数个适用于常见数据处理应用场景的扩展库。这些库通常嵌入在 API 中，且并不完全独立于其它 API。它们也因此可以受益于 API 的所有特性，并与其他库集成。</p>`,4),U={href:"https://nightlies.apache.org/flink/flink-docs-stable/dev/libs/cep.html",target:"_blank",rel:"noopener noreferrer"},J={href:"https://nightlies.apache.org/flink/flink-docs-stable/dev/batch/index.html",target:"_blank",rel:"noopener noreferrer"},W=n("em",null,"map",-1),Y=n("em",null,"reduce",-1),H=n("em",null,"(outer) join",-1),X=n("em",null,"co-group",-1),Z=n("em",null,"iterate",-1),$={href:"https://nightlies.apache.org/flink/flink-docs-stable/dev/libs/gelly/index.html",target:"_blank",rel:"noopener noreferrer"},nn={href:"https://nightlies.apache.org/flink/flink-docs-stable/dev/libs/gelly/library_methods.html",target:"_blank",rel:"noopener noreferrer"},sn={href:"https://nightlies.apache.org/flink/flink-docs-stable/dev/libs/gelly/graph_api.html",target:"_blank",rel:"noopener noreferrer"},an=n("h2",{id:"参考资料",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考资料","aria-hidden":"true"},"#"),s(" 参考资料")],-1),en={href:"https://nightlies.apache.org/flink/flink-docs-release-1.14/zh/",target:"_blank",rel:"noopener noreferrer"};function tn(pn,on){const a=o("ExternalLinkIcon");return l(),c("div",null,[u,n("ul",null,[n("li",null,[n("p",null,[s("Flink API 最底层的抽象为"),r,s("。其抽象实现是 "),n("a",k,[s("Process Function"),e(a)]),s("，并且 "),d,s(" 被 Flink 框架集成到了 "),n("a",m,[s("DataStream API"),e(a)]),s(" 中来为我们使用。它允许用户在应用程序中自由地处理来自单流或多流的事件（数据），并提供具有全局一致性和容错保障的"),v,s("。此外，用户可以在此层抽象中注册事件时间（event time）和处理时间（processing time）回调方法，从而允许程序可以实现复杂计算。")])]),n("li",null,[n("p",null,[s("Flink API 第二层抽象是 "),h,s("。实际上，许多应用程序不需要使用到上述最底层抽象的 API，而是可以使用 "),g,s(" 进行编程：其中包含 "),n("a",b,[s("DataStream API"),e(a)]),s("（应用于有界/无界数据流场景）和 "),n("a",f,[s("DataSet API"),e(a)]),s("（应用于有界数据集场景）两部分。Core APIs 提供的流式 API（Fluent API）为数据处理提供了通用的模块组件，例如各种形式的用户自定义转换（transformations）、联接（joins）、聚合（aggregations）、窗口（windows）和状态（state）操作等。此层 API 中处理的数据类型在每种编程语言中都有其对应的类。")]),_]),n("li",null,[n("p",null,[s("Flink API 第三层抽象是 "),P,s("。"),I,s(" 是以表（Table）为中心的声明式编程（DSL）API，例如在流式数据场景下，它可以表示一张正在动态改变的表。"),n("a",A,[s("Table API"),e(a)]),s(" 遵循（扩展）关系模型：即表拥有 schema（类似于关系型数据库中的 schema），并且 Table API 也提供了类似于关系模型中的操作，比如 select、project、join、group-by 和 aggregate 等。Table API 程序是以声明的方式定义"),S,s("，而不是确切地指定程序"),T,s("。尽管 Table API 使用起来很简洁并且可以由各种类型的用户自定义函数扩展功能，但还是比 Core API 的表达能力差。此外，Table API 程序在执行之前还会使用优化器中的优化规则对用户编写的表达式进行优化。")]),y]),n("li",null,[n("p",null,[s("Flink API 最顶层抽象是 "),w,s("。这层抽象在语义和程序表达式上都类似于 "),x,s("，但是其程序实现都是 SQL 查询表达式。"),n("a",D,[s("SQL"),e(a)]),s(" 抽象与 Table API 抽象之间的关联是非常紧密的，并且 SQL 查询语句可以在 "),F,s(" 中定义的表上执行。")])])]),L,n("p",null,[n("a",C,[s("ProcessFunction"),e(a)]),s(" 是 Flink 所提供的最具表达力的接口。ProcessFunction 可以处理一或两条输入数据流中的单个事件或者归入一个特定窗口内的多个事件。它提供了"),E,s("。开发者可以在其中任意地修改状态，也能够注册定时器用以在未来的某一时刻触发回调函数。因此，你可以利用 ProcessFunction 实现许多"),n("a",N,[s("有状态的事件驱动应用"),e(a)]),s("所需要的基于单个事件的复杂业务逻辑。")]),q,n("p",null,[n("a",j,[s("DataStream API"),e(a)]),s(" 为许多通用的流处理操作提供了处理原语。这些操作包括窗口、逐条记录的转换操作，在处理事件时进行外部数据库查询等。DataStream API 支持 Java 和 Scala 语言，预先定义了例如"),z,s("、"),R,s("、"),O,s(" 等函数。你可以通过扩展实现预定义接口或使用 Java、Scala 的 lambda 表达式实现自定义的函数。")]),Q,n("p",null,[s("Flink 支持两种关系型的 API，"),n("a",G,[s("Table API 和 SQL"),e(a)]),s("。这两个 API 都是批处理和流处理统一的 API，这意味着在无边界的实时数据流和有边界的历史记录数据流上，关系型 API 会以相同的语义执行查询，并产生相同的结果。Table API 和 SQL 借助了 "),n("a",V,[s("Apache Calcite"),e(a)]),s(" 来进行查询的解析，校验以及优化。它们可以与 DataStream 和 DataSet API 无缝集成，并支持用户自定义的标量函数，聚合函数以及表值函数。")]),n("p",null,[s("Flink 的关系型 API 旨在简化"),n("a",B,[s("数据分析"),e(a)]),s("、"),n("a",K,[s("数据流水线和 ETL 应用"),e(a)]),s("的定义。")]),M,n("ul",null,[n("li",null,[n("strong",null,[n("a",U,[s("复杂事件处理(CEP)"),e(a)])]),s("：模式检测是事件流处理中的一个非常常见的用例。Flink 的 CEP 库提供了 API，使用户能够以例如正则表达式或状态机的方式指定事件模式。CEP 库与 Flink 的 DataStream API 集成，以便在 DataStream 上评估模式。CEP 库的应用包括网络入侵检测，业务流程监控和欺诈检测。")]),n("li",null,[n("strong",null,[n("a",J,[s("DataSet API"),e(a)])]),s("：DataSet API 是 Flink 用于批处理应用程序的核心 API。DataSet API 所提供的基础算子包括"),W,s("、"),Y,s("、"),H,s("、"),X,s("、"),Z,s("等。所有算子都有相应的算法和数据结构支持，对内存中的序列化数据进行操作。如果数据大小超过预留内存，则过量数据将存储到磁盘。Flink 的 DataSet API 的数据处理算法借鉴了传统数据库算法的实现，例如混合散列连接（hybrid hash-join）和外部归并排序（external merge-sort）。")]),n("li",null,[n("strong",null,[n("a",$,[s("Gelly"),e(a)])]),s(": Gelly 是一个可扩展的图形处理和分析库。Gelly 是在 DataSet API 之上实现的，并与 DataSet API 集成。因此，它能够受益于其可扩展且健壮的操作符。Gelly 提供了"),n("a",nn,[s("内置算法"),e(a)]),s("，如 label propagation、triangle enumeration 和 page rank 算法，也提供了一个简化自定义图算法实现的 "),n("a",sn,[s("Graph API"),e(a)]),s("。")])]),an,n("ul",null,[n("li",null,[n("a",en,[s("Flink 官方文档"),e(a)])])])])}const un=p(i,[["render",tn],["__file","index.html.vue"]]);export{un as default};
