const e=JSON.parse('{"key":"v-4112ad21","path":"/pages/78e07005/","title":"Java 虚拟机之调优","lang":"zh-CN","frontmatter":{"title":"Java 虚拟机之调优","date":"2019-10-28T22:04:39.000Z","permalink":"/pages/78e07005/","category":["Java","JavaCore","JVM"],"tag":["Java","JavaCore","JVM"],"description":"Java 虚拟机之调优 JVM 调优概述 GC 性能指标 对于 JVM 调优来说，需要先明确调优的目标。 从性能的角度看，通常关注三个指标： 吞吐量（throughput） - 指不考虑 GC 引起的停顿时间或内存消耗，垃圾收集器能支撑应用达到的最高性能指标。 停顿时间（latency） - 其度量标准是缩短由于垃圾啊收集引起的停顿时间或者完全消除因垃圾收集所引起的停顿，避免应用运行时发生抖动。 垃圾回收频率 - 久发生一次指垃圾回收呢？通常垃圾回收的频率越低越好，增大堆内存空间可以有效降低垃圾回收发生的频率，但同时也意味着堆积的回收对象越多，最终也会增加回收时的停顿时间。所以我们只要适当地增大堆内存空间，保证正常的垃圾回收频率即可。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/78e07005/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"Java 虚拟机之调优"}],["meta",{"property":"og:description","content":"Java 虚拟机之调优 JVM 调优概述 GC 性能指标 对于 JVM 调优来说，需要先明确调优的目标。 从性能的角度看，通常关注三个指标： 吞吐量（throughput） - 指不考虑 GC 引起的停顿时间或内存消耗，垃圾收集器能支撑应用达到的最高性能指标。 停顿时间（latency） - 其度量标准是缩短由于垃圾啊收集引起的停顿时间或者完全消除因垃圾收集所引起的停顿，避免应用运行时发生抖动。 垃圾回收频率 - 久发生一次指垃圾回收呢？通常垃圾回收的频率越低越好，增大堆内存空间可以有效降低垃圾回收发生的频率，但同时也意味着堆积的回收对象越多，最终也会增加回收时的停顿时间。所以我们只要适当地增大堆内存空间，保证正常的垃圾回收频率即可。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-13T15:15:47.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"JavaCore"}],["meta",{"property":"article:tag","content":"JVM"}],["meta",{"property":"article:published_time","content":"2019-10-28T22:04:39.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-13T15:15:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 虚拟机之调优\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-10-28T22:04:39.000Z\\",\\"dateModified\\":\\"2025-09-13T15:15:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"JVM 调优概述","slug":"jvm-调优概述","link":"#jvm-调优概述","children":[{"level":3,"title":"GC 性能指标","slug":"gc-性能指标","link":"#gc-性能指标","children":[]},{"level":3,"title":"调优原则","slug":"调优原则","link":"#调优原则","children":[]},{"level":3,"title":"GC 优化的过程","slug":"gc-优化的过程","link":"#gc-优化的过程","children":[]}]},{"level":2,"title":"GC 日志","slug":"gc-日志","link":"#gc-日志","children":[{"level":3,"title":"获取 GC 日志","slug":"获取-gc-日志","link":"#获取-gc-日志","children":[]},{"level":3,"title":"分析 GC 日志","slug":"分析-gc-日志","link":"#分析-gc-日志","children":[]}]},{"level":2,"title":"GC 配置","slug":"gc-配置","link":"#gc-配置","children":[{"level":3,"title":"堆大小设置","slug":"堆大小设置","link":"#堆大小设置","children":[]},{"level":3,"title":"JVM 内存配置","slug":"jvm-内存配置","link":"#jvm-内存配置","children":[]},{"level":3,"title":"GC 类型配置","slug":"gc-类型配置","link":"#gc-类型配置","children":[]},{"level":3,"title":"垃圾回收器通用参数","slug":"垃圾回收器通用参数","link":"#垃圾回收器通用参数","children":[]},{"level":3,"title":"JMX","slug":"jmx","link":"#jmx","children":[]},{"level":3,"title":"远程 DEBUG","slug":"远程-debug","link":"#远程-debug","children":[]},{"level":3,"title":"HeapDump","slug":"heapdump","link":"#heapdump","children":[]},{"level":3,"title":"辅助配置","slug":"辅助配置","link":"#辅助配置","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1743948422000,"updatedTime":1757776547000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":2}]},"readingTime":{"minutes":15.34,"words":4601},"filePathRelative":"01.Java/01.JavaCore/06.JVM/Java_虚拟机_调优.md","localizedDate":"2019年10月28日","excerpt":"<h1> Java 虚拟机之调优</h1>\\n<h2> JVM 调优概述</h2>\\n<h3> GC 性能指标</h3>\\n<p>对于 JVM 调优来说，需要先明确调优的目标。<br>\\n从性能的角度看，通常关注三个指标：</p>\\n<ul>\\n<li><code>吞吐量（throughput）</code> - 指不考虑 GC 引起的停顿时间或内存消耗，垃圾收集器能支撑应用达到的最高性能指标。</li>\\n<li><code>停顿时间（latency）</code> - 其度量标准是缩短由于垃圾啊收集引起的停顿时间或者完全消除因垃圾收集所引起的停顿，避免应用运行时发生抖动。</li>\\n<li><code>垃圾回收频率</code> - 久发生一次指垃圾回收呢？通常垃圾回收的频率越低越好，增大堆内存空间可以有效降低垃圾回收发生的频率，但同时也意味着堆积的回收对象越多，最终也会增加回收时的停顿时间。所以我们只要适当地增大堆内存空间，保证正常的垃圾回收频率即可。</li>\\n</ul>","autoDesc":true}');export{e as data};
