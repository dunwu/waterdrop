const e=JSON.parse('{"key":"v-06adb877","path":"/pages/b1816a12/","title":"设计模式之适配器模式","lang":"zh-CN","frontmatter":{"title":"设计模式之适配器模式","date":"2015-01-14T18:31:00.000Z","order":7,"permalink":"/pages/b1816a12/","category":["设计","设计模式"],"tag":["设计","设计模式"],"description":"设计模式之适配器模式 意图 适配器模式 (Adapter)是一种结构型设计模式， 它能使不兼容的对象能够相互合作。 适配器模式通过封装对象将复杂的转换过程隐藏于幕后。 被封装的对象甚至察觉不到适配器的存在。 适配器不仅可以转换不同格式的数据， 其还有助于采用不同接口的对象之间的合作。 它的运作方式如下： 适配器实现与其中一个现有对象兼容的接口。 现有对象可以使用该接口安全地调用适配器方法。 适配器方法被调用后将以另一个对象兼容的格式和顺序将请求传递给该对象。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/b1816a12/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"设计模式之适配器模式"}],["meta",{"property":"og:description","content":"设计模式之适配器模式 意图 适配器模式 (Adapter)是一种结构型设计模式， 它能使不兼容的对象能够相互合作。 适配器模式通过封装对象将复杂的转换过程隐藏于幕后。 被封装的对象甚至察觉不到适配器的存在。 适配器不仅可以转换不同格式的数据， 其还有助于采用不同接口的对象之间的合作。 它的运作方式如下： 适配器实现与其中一个现有对象兼容的接口。 现有对象可以使用该接口安全地调用适配器方法。 适配器方法被调用后将以另一个对象兼容的格式和顺序将请求传递给该对象。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-18T15:46:22.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"设计"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2015-01-14T18:31:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-18T15:46:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式之适配器模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2015-01-14T18:31:00.000Z\\",\\"dateModified\\":\\"2024-06-18T15:46:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"意图","slug":"意图","link":"#意图","children":[]},{"level":2,"title":"适用场景","slug":"适用场景","link":"#适用场景","children":[]},{"level":2,"title":"结构","slug":"结构","link":"#结构","children":[{"level":3,"title":"结构说明","slug":"结构说明","link":"#结构说明","children":[]},{"level":3,"title":"结构代码范式","slug":"结构代码范式","link":"#结构代码范式","children":[]}]},{"level":2,"title":"伪代码","slug":"伪代码","link":"#伪代码","children":[]},{"level":2,"title":"案例","slug":"案例","link":"#案例","children":[]},{"level":2,"title":"与其他模式的关系","slug":"与其他模式的关系","link":"#与其他模式的关系","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1651071272000,"updatedTime":1718725582000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":5}]},"readingTime":{"minutes":5.59,"words":1677},"filePathRelative":"03.设计/02.设计模式/07.适配器模式.md","localizedDate":"2015年1月14日","excerpt":"<h1> 设计模式之适配器模式</h1>\\n<h2> 意图</h2>\\n<p><strong>适配器模式</strong> (Adapter)是一种结构型设计模式， 它能使不兼容的对象能够相互合作。</p>\\n<p>适配器模式通过封装对象将复杂的转换过程隐藏于幕后。 被封装的对象甚至察觉不到适配器的存在。</p>\\n<p>适配器不仅可以转换不同格式的数据， 其还有助于采用不同接口的对象之间的合作。 它的运作方式如下：</p>\\n<ul>\\n<li>适配器实现与其中一个现有对象兼容的接口。</li>\\n<li>现有对象可以使用该接口安全地调用适配器方法。</li>\\n<li>适配器方法被调用后将以另一个对象兼容的格式和顺序将请求传递给该对象。</li>\\n</ul>","autoDesc":true}');export{e as data};
