const e=JSON.parse('{"key":"v-1f6a265b","path":"/pages/0c224562/","title":"架构","lang":"zh-CN","frontmatter":{"title":"架构","date":"2019-03-08T13:16:53.000Z","permalink":"/pages/0c224562/","hidden":true,"index":false,"category":["设计","架构"],"tag":["架构"],"description":"架构 架构设计的目的是解决软件系统的复杂度带来的问题。架构即(重要)决策，是在一个有约束的盒子里去求解或接近最合适的解。这个有约束的盒子是团队经验、成本、资源、进度、业务所处阶段等所编织、掺杂在一起的综合体(人，财，物，时间，事情等)。架构无优劣，但是存在恰当的架构用在合适的软件系统中，而这些就是决策的结果。 架构设计原则：合适原则、简单原则、演化原则。合适优于先进 =&gt; 演化优于一步到位 =&gt; 简单优于复杂 架构设计有业务需求驱动，需要识别出主要问题，然后根据业务、技术、团队、成本等综合评估排序，优先解决当前面临的最主要的复杂度问题。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/0c224562/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"架构"}],["meta",{"property":"og:description","content":"架构 架构设计的目的是解决软件系统的复杂度带来的问题。架构即(重要)决策，是在一个有约束的盒子里去求解或接近最合适的解。这个有约束的盒子是团队经验、成本、资源、进度、业务所处阶段等所编织、掺杂在一起的综合体(人，财，物，时间，事情等)。架构无优劣，但是存在恰当的架构用在合适的软件系统中，而这些就是决策的结果。 架构设计原则：合适原则、简单原则、演化原则。合适优于先进 =&gt; 演化优于一步到位 =&gt; 简单优于复杂 架构设计有业务需求驱动，需要识别出主要问题，然后根据业务、技术、团队、成本等综合评估排序，优先解决当前面临的最主要的复杂度问题。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-14T13:48:12.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"架构"}],["meta",{"property":"article:published_time","content":"2019-03-08T13:16:53.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-14T13:48:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"架构\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-03-08T13:16:53.000Z\\",\\"dateModified\\":\\"2025-09-14T13:48:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"📖 内容","slug":"📖-内容","link":"#📖-内容","children":[{"level":3,"title":"综合","slug":"综合","link":"#综合","children":[]},{"level":3,"title":"微服务","slug":"微服务","link":"#微服务","children":[]},{"level":3,"title":"安全","slug":"安全","link":"#安全","children":[]}]},{"level":2,"title":"📚 资料","slug":"📚-资料","link":"#📚-资料","children":[]},{"level":2,"title":"🚪 传送","slug":"🚪-传送","link":"#🚪-传送","children":[]}],"git":{"createdTime":1757857692000,"updatedTime":1757857692000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":1}]},"readingTime":{"minutes":3.69,"words":1107},"filePathRelative":"03.设计/架构/README.md","localizedDate":"2019年3月8日","excerpt":"<h1> 架构</h1>\\n<p>架构设计的目的是解决软件系统的复杂度带来的问题。架构即(重要)决策，是在一个有约束的盒子里去求解或接近最合适的解。这个有约束的盒子是团队经验、成本、资源、进度、业务所处阶段等所编织、掺杂在一起的综合体(人，财，物，时间，事情等)。架构无优劣，但是存在恰当的架构用在合适的软件系统中，而这些就是决策的结果。</p>\\n<p>架构设计原则：<strong>合适原则、简单原则、演化原则</strong>。合适优于先进 =&gt; 演化优于一步到位 =&gt; 简单优于复杂</p>\\n<p>架构设计有业务需求驱动，需要识别出主要问题，然后根据业务、技术、团队、成本等综合评估排序，优先解决当前面临的最主要的复杂度问题。</p>","autoDesc":true}');export{e as data};
