import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a as n,b as s,d as t,e as p}from"./app-7f6c254b.js";const i={},u=n("h1",{id:"redis-实战",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#redis-实战","aria-hidden":"true"},"#"),s(" Redis 实战")],-1),r=n("h2",{id:"缓存",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#缓存","aria-hidden":"true"},"#"),s(" 缓存")],-1),k=n("p",null,"缓存是 Redis 最常见的应用场景。",-1),d=n("p",null,"Redis 有多种数据类型，以及丰富的操作命令，并且有着高性能、高可用的特性，非常适合用于分布式缓存。",-1),m={href:"https://dunwu.github.io/design/distributed/%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98.html",target:"_blank",rel:"noopener noreferrer"},v=n("strong",null,"缓存基本原理",-1),g=n("h2",{id:"bitmap-和-bloomfilter",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#bitmap-和-bloomfilter","aria-hidden":"true"},"#"),s(" BitMap 和 BloomFilter")],-1),b=n("p",null,"Redis 除了 5 种基本数据类型外，还支持 BitMap 和 BloomFilter（即布隆过滤器，可以通过 Redis Module 支持）。",-1),h=n("p",null,"BitMap 和 BloomFilter 都可以用于解决缓存穿透问题。要点在于：过滤一些不可能存在的数据。",-1),y={href:"https://dunwu.github.io/design/distributed/%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98.html",target:"_blank",rel:"noopener noreferrer"},f=n("strong",null,"缓存基本原理",-1),w=p('<p>小数据量可以用 BitMap，大数据量可以用布隆过滤器。</p><h2 id="分布式锁" tabindex="-1"><a class="header-anchor" href="#分布式锁" aria-hidden="true">#</a> 分布式锁</h2><p>使用 Redis 作为分布式锁，基本要点如下：</p><ul><li><strong>互斥性</strong> - 使用 <code>setnx</code> 抢占锁。</li><li><strong>避免永远不释放锁</strong> - 使用 <code>expire</code> 加一个过期时间，避免一直不释放锁，导致阻塞。</li><li><strong>原子性</strong> - setnx 和 expire 必须合并为一个原子指令，避免 setnx 后，机器崩溃，没来得及设置 expire，从而导致锁永不释放。</li></ul>',4),S={href:"https://dunwu.github.io/waterdrop/pages/0eb5a899/",target:"_blank",rel:"noopener noreferrer"},_=p(`<p>根据 Redis 的特性，在实际应用中，存在一些应用小技巧。</p><h2 id="keys-和-scan" tabindex="-1"><a class="header-anchor" href="#keys-和-scan" aria-hidden="true">#</a> keys 和 scan</h2><p>使用 <code>keys</code> 指令可以扫出指定模式的 key 列表。</p><p>如果这个 redis 正在给线上的业务提供服务，那使用 <code>keys</code> 指令会有什么问题？</p><p>首先，Redis 是单线程的。<code>keys</code> 指令会导致线程阻塞一段时间，线上服务会停顿，直到指令执行完毕，服务才能恢复。</p><p>这个时候可以使用 <code>scan</code> 指令，<code>scan</code> 指令可以无阻塞的提取出指定模式的 key 列表，但是会有一定的重复概率，在客户端做一次去重就可以了，但是整体所花费的时间会比直接用 <code>keys</code> 指令长。</p><p>不过，增量式迭代命令也不是没有缺点的： 举个例子， 使用 <code>SMEMBERS</code> 命令可以返回集合键当前包含的所有元素， 但是对于 <code>SCAN</code> 这类增量式迭代命令来说， 因为在对键进行增量式迭代的过程中， 键可能会被修改， 所以增量式迭代命令只能对被返回的元素提供有限的保证 。</p><h2 id="大-key-如何处理" tabindex="-1"><a class="header-anchor" href="#大-key-如何处理" aria-hidden="true">#</a> 大 Key 如何处理</h2><blockquote><p>什么是 Redis Big Key？</p></blockquote><p>Big Key 并不是指 key 的值很大，而是 key 对应的 value 很大。</p><p>一般而言，下面这两种情况被称为Big Key：</p><ul><li>String 类型的值大于 10 KB；</li><li>Hash、List、Set、ZSet 类型的元素的个数超过 5000 个，或总大小超过 10MB</li></ul><blockquote><p>Big Key 会造成什么问题？</p></blockquote><p>Big Key 会带来以下四种影响：</p><ul><li><strong>内存分布不均</strong>：集群模型在 slot 分片均匀情况下，会出现数据和查询倾斜情况，部分有Big Key 的 Redis 节点占用内存多，QPS 也会比较大。</li><li><strong>命令阻塞</strong>：Redis 单线程模型，操作大 Key 耗时，阻塞其他命令。</li><li><strong>网络传输压力</strong>：每次获取Big Key 产生的网络流量较大，如果一个 key 的大小是 1 MB，每秒访问量为 1000，那么每秒会产生 1000MB 的流量，这对于普通千兆网卡的服务器来说是灾难性的。</li><li><strong>客户端超时</strong>：由于 Redis 执行命令是单线程处理，然后在操作Big Key 时会比较耗时，那么就会阻塞 Redis，从客户端这一视角看，就是很久很久都没有响应。</li></ul><blockquote><p>如何找到Big Key ？</p></blockquote><p><strong>（1）使用 <code>redis-cli --bigkeys</code></strong></p><p><strong>命令</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-cli <span class="token parameter variable">-h</span> <span class="token number">127.0</span>.0.1 <span class="token parameter variable">-p</span> <span class="token number">6379</span> <span class="token parameter variable">-a</span> <span class="token string">&quot;password&quot;</span> <span class="token parameter variable">--bigkeys</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>注意事项</strong>：</p><ul><li><strong>推荐在从节点执行</strong>（主节点执行可能阻塞业务）</li><li><strong>低峰期执行</strong> 或 <strong>加 <code>-i</code> 参数控制扫描间隔</strong>（如 <code>-i 0.1</code> 表示每 100ms 扫描一次）</li></ul><p><strong>缺点</strong>：</p><ul><li>只能返回<strong>每种数据类型最大的 1 个 Key</strong>（无法获取 Top N）</li><li>对集合类型<strong>只统计元素个数</strong>，而非实际内存占用</li></ul><p><strong>（2）使用 <code>SCAN</code> + 内存分析命令</strong></p><p><strong>遍历所有 Key</strong>（避免 <code>KEYS *</code> 阻塞 Redis）：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-cli <span class="token parameter variable">--scan</span> <span class="token parameter variable">--pattern</span> <span class="token string">&quot;*&quot;</span> <span class="token operator">|</span> <span class="token keyword">while</span> <span class="token builtin class-name">read</span> key<span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token punctuation">..</span>.<span class="token punctuation">;</span> <span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>分析 Key 大小</strong>：</p><ul><li><strong>String</strong>：<code>STRLEN $key</code>（字节数）</li><li><strong>集合类型</strong>（List/Hash/Set/ZSet）： <ul><li><strong>方法 1</strong>：<code>LLEN</code>/<code>HLEN</code>/<code>SCARD</code>/<code>ZCARD</code>（元素个数 × 预估元素大小）</li><li><strong>方法 2</strong>（Redis 4.0+）：<code>MEMORY USAGE $key</code>（精确内存占用）</li></ul></li></ul><p><strong>优点</strong>：</p><ul><li>可自定义筛选条件（如大小 Top 10）</li><li>精确计算内存占用</li></ul><p><strong>（3）使用 <code>RdbTools</code> 分析 RDB 文件</strong></p><p><strong>命令</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rdb dump.rdb <span class="token parameter variable">-c</span> memory <span class="token parameter variable">--bytes</span> <span class="token number">10240</span> <span class="token parameter variable">-f</span> redis.csv  <span class="token comment"># 导出 &gt;10KB 的 Key 到 CSV</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>适用场景</strong>：</p><ul><li>离线分析，不影响线上 Redis</li><li>精准统计<strong>所有 Key 的内存分布</strong></li></ul><p><strong>缺点</strong>：需要 Redis 生成 RDB 快照</p><blockquote><p>如何删除Big Key？</p></blockquote><p>删除操作的本质是要释放键值对占用的内存空间，不要小瞧内存的释放过程。</p><p>释放内存只是第一步，为了更加高效地管理内存空间，在应用程序释放内存时，操作系统需要把释放掉的内存块插入一个空闲内存块的链表，以便后续进行管理和再分配。这个过程本身需要一定时间，而且会阻塞当前释放内存的应用程序。</p><p>所以，如果一下子释放了大量内存，空闲内存块链表操作时间就会增加，相应地就会造成 Redis 主线程的阻塞，如果主线程发生了阻塞，其他所有请求可能都会超时，超时越来越多，会造成 Redis 连接耗尽，产生各种异常。</p><p>因此，删除Big Key 这一个动作，我们要小心。具体要怎么做呢？这里给出两种方法：</p><ul><li>分批次删除</li><li>异步删除（Redis 4.0 版本以上）</li></ul><p><strong><em>1、分批次删除</em></strong></p><p>对于<strong>删除大 Hash</strong>，使用 <code>hscan</code> 命令，每次获取 100 个字段，再用 <code>hdel</code> 命令，每次删除 1 个字段。</p><p>Python 代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">del_large_hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  r <span class="token operator">=</span> redis<span class="token punctuation">.</span>StrictRedis<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">&#39;redis-host1&#39;</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">)</span>
    large_hash_key <span class="token operator">=</span><span class="token string">&quot;xxx&quot;</span> <span class="token comment">#要删除的大hash键名</span>
    cursor <span class="token operator">=</span> <span class="token string">&#39;0&#39;</span>
    <span class="token keyword">while</span> cursor <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token comment"># 使用 hscan 命令，每次获取 100 个字段</span>
        cursor<span class="token punctuation">,</span> data <span class="token operator">=</span> r<span class="token punctuation">.</span>hscan<span class="token punctuation">(</span>large_hash_key<span class="token punctuation">,</span> cursor<span class="token operator">=</span>cursor<span class="token punctuation">,</span> count<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> item <span class="token keyword">in</span> data<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token comment"># 再用 hdel 命令，每次删除1个字段</span>
                r<span class="token punctuation">.</span>hdel<span class="token punctuation">(</span>large_hash_key<span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于<strong>删除大 List</strong>，通过 <code>ltrim</code> 命令，每次删除少量元素。</p><p>Python 代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">del_large_list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  r <span class="token operator">=</span> redis<span class="token punctuation">.</span>StrictRedis<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">&#39;redis-host1&#39;</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">)</span>
  large_list_key <span class="token operator">=</span> <span class="token string">&#39;xxx&#39;</span>  <span class="token comment">#要删除的大list的键名</span>
  <span class="token keyword">while</span> r<span class="token punctuation">.</span>llen<span class="token punctuation">(</span>large_list_key<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">:</span>
      <span class="token comment">#每次只删除最右100个元素</span>
      r<span class="token punctuation">.</span>ltrim<span class="token punctuation">(</span>large_list_key<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">101</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于<strong>删除大 Set</strong>，使用 <code>sscan</code> 命令，每次扫描集合中 100 个元素，再用 <code>srem</code> 命令每次删除一个键。</p><p>Python 代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">del_large_set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  r <span class="token operator">=</span> redis<span class="token punctuation">.</span>StrictRedis<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">&#39;redis-host1&#39;</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">)</span>
  large_set_key <span class="token operator">=</span> <span class="token string">&#39;xxx&#39;</span>   <span class="token comment"># 要删除的大set的键名</span>
  cursor <span class="token operator">=</span> <span class="token string">&#39;0&#39;</span>
  <span class="token keyword">while</span> cursor <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
    <span class="token comment"># 使用 sscan 命令，每次扫描集合中 100 个元素</span>
    cursor<span class="token punctuation">,</span> data <span class="token operator">=</span> r<span class="token punctuation">.</span>sscan<span class="token punctuation">(</span>large_set_key<span class="token punctuation">,</span> cursor<span class="token operator">=</span>cursor<span class="token punctuation">,</span> count<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> item <span class="token keyword">in</span> data<span class="token punctuation">:</span>
      <span class="token comment"># 再用 srem 命令每次删除一个键</span>
      r<span class="token punctuation">.</span>srem<span class="token punctuation">(</span>large_size_key<span class="token punctuation">,</span> item<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于<strong>删除大 ZSet</strong>，使用 <code>zremrangebyrank</code> 命令，每次删除 top 100 个元素。</p><p>Python 代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">del_large_sortedset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  r <span class="token operator">=</span> redis<span class="token punctuation">.</span>StrictRedis<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">&#39;large_sortedset_key&#39;</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">)</span>
  large_sortedset_key<span class="token operator">=</span><span class="token string">&#39;xxx&#39;</span>
  <span class="token keyword">while</span> r<span class="token punctuation">.</span>zcard<span class="token punctuation">(</span>large_sortedset_key<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">:</span>
    <span class="token comment"># 使用 zremrangebyrank 命令，每次删除 top 100个元素</span>
    r<span class="token punctuation">.</span>zremrangebyrank<span class="token punctuation">(</span>large_sortedset_key<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><em>2、异步删除</em></strong></p><p>从 Redis 4.0 版本开始，可以采用<strong>异步删除</strong>法，<strong>用 unlink 命令代替 del 来删除</strong>。</p><p>这样 Redis 会将这个 key 放入到一个异步线程中进行删除，这样不会阻塞主线程。</p><p>除了主动调用 unlink 命令实现异步删除之外，我们还可以通过配置参数，达到某些条件的时候自动进行异步删除。</p><p>主要有 4 种场景，默认都是关闭的：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>lazyfree-lazy-eviction no
lazyfree-lazy-expire no
lazyfree-lazy-server-del
noslave-lazy-flush no
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它们代表的含义如下：</p><ul><li>lazyfree-lazy-eviction：表示当 Redis 运行内存超过 maxmeory 时，是否开启 lazy free 机制删除；</li><li>lazyfree-lazy-expire：表示设置了过期时间的键值，当过期之后是否开启 lazy free 机制删除；</li><li>lazyfree-lazy-server-del：有些指令在处理已存在的键时，会带有一个隐式的 del 键的操作，比如 rename 命令，当目标键已存在，Redis 会先删除目标键，如果这些目标键是一个 big key，就会造成阻塞删除的问题，此配置表示在这种场景中是否开启 lazy free 机制删除；</li><li>slave-lazy-flush：针对 slave (从节点) 进行全量数据同步，slave 在加载 master 的 RDB 文件前，会运行 flushall 来清理自己的数据，它表示此时是否开启 lazy free 机制删除。</li></ul><p>建议开启其中的 lazyfree-lazy-eviction、lazyfree-lazy-expire、lazyfree-lazy-server-del 等配置，这样就可以有效的提高主线程的执行效率。</p><h2 id="最受欢迎文章" tabindex="-1"><a class="header-anchor" href="#最受欢迎文章" aria-hidden="true">#</a> 最受欢迎文章</h2><p>选出最受欢迎文章，需要支持对文章进行评分。</p><h3 id="对文章进行投票" tabindex="-1"><a class="header-anchor" href="#对文章进行投票" aria-hidden="true">#</a> 对文章进行投票</h3><p>（1）使用 HASH 存储文章</p><p>使用 <code>HASH</code> 类型存储文章信息。其中：key 是文章 ID；field 是文章的属性 key；value 是属性对应值。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20200225143038.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>操作：</p><ul><li>存储文章信息 - 使用 <code>HSET</code> 或 <code>HMGET</code> 命令</li><li>查询文章信息 - 使用 <code>HGETALL</code> 命令</li><li>添加投票 - 使用 <code>HINCRBY</code> 命令</li></ul><p>（2）使用 <code>ZSET</code> 针对不同维度集合排序</p><p>使用 <code>ZSET</code> 类型分别存储按照时间排序和按照评分排序的文章 ID 集合。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20200225145742.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>操作：</p><ul><li>添加记录 - 使用 <code>ZADD</code> 命令</li><li>添加分数 - 使用 <code>ZINCRBY</code> 命令</li><li>取出多篇文章 - 使用 <code>ZREVRANGE</code> 命令</li></ul><p>（3）为了防止重复投票，使用 <code>SET</code> 类型记录每篇文章 ID 对应的投票集合。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20200225150105.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>操作：</p><ul><li>添加投票者 - 使用 <code>SADD</code> 命令</li><li>设置有效期 - 使用 <code>EXPIRE</code> 命令</li></ul><p>（4）假设 user:115423 给 article:100408 投票，分别需要高更新评分排序集合以及投票集合。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20200225150138.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>当需要对一篇文章投票时，程序需要用 ZSCORE 命令检查记录文章发布时间的有序集合，判断文章的发布时间是否超过投票有效期（比如：一星期）。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">articleVote</span><span class="token punctuation">(</span><span class="token class-name">Jedis</span> conn<span class="token punctuation">,</span> <span class="token class-name">String</span> user<span class="token punctuation">,</span> <span class="token class-name">String</span> article<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 计算文章的投票截止时间。</span>
        <span class="token keyword">long</span> cutoff <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token constant">ONE_WEEK_IN_SECONDS</span><span class="token punctuation">;</span>

        <span class="token comment">// 检查是否还可以对文章进行投票</span>
        <span class="token comment">// （虽然使用散列也可以获取文章的发布时间，</span>
        <span class="token comment">// 但有序集合返回的文章发布时间为浮点数，</span>
        <span class="token comment">// 可以不进行转换直接使用）。</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>conn<span class="token punctuation">.</span><span class="token function">zscore</span><span class="token punctuation">(</span><span class="token string">&quot;time:&quot;</span><span class="token punctuation">,</span> article<span class="token punctuation">)</span> <span class="token operator">&lt;</span> cutoff<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 从article:id标识符（identifier）里面取出文章的ID。</span>
        <span class="token class-name">String</span> articleId <span class="token operator">=</span> article<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>article<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token char">&#39;:&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 如果用户是第一次为这篇文章投票，那么增加这篇文章的投票数量和评分。</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>conn<span class="token punctuation">.</span><span class="token function">sadd</span><span class="token punctuation">(</span><span class="token string">&quot;voted:&quot;</span> <span class="token operator">+</span> articleId<span class="token punctuation">,</span> user<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            conn<span class="token punctuation">.</span><span class="token function">zincrby</span><span class="token punctuation">(</span><span class="token string">&quot;score:&quot;</span><span class="token punctuation">,</span> <span class="token constant">VOTE_SCORE</span><span class="token punctuation">,</span> article<span class="token punctuation">)</span><span class="token punctuation">;</span>
            conn<span class="token punctuation">.</span><span class="token function">hincrBy</span><span class="token punctuation">(</span>article<span class="token punctuation">,</span> <span class="token string">&quot;votes&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="发布并获取文章" tabindex="-1"><a class="header-anchor" href="#发布并获取文章" aria-hidden="true">#</a> 发布并获取文章</h3><p>发布文章：</p><ul><li>添加文章 - 使用 <code>INCR</code> 命令计算新的文章 ID，填充文章信息，然后用 <code>HSET</code> 命令或 <code>HMSET</code> 命令写入到 <code>HASH</code> 结构中。</li><li>将文章作者 ID 添加到投票名单 - 使用 <code>SADD</code> 命令添加到代表投票名单的 <code>SET</code> 结构中。</li><li>设置投票有效期 - 使用 <code>EXPIRE</code> 命令设置投票有效期。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">postArticle</span><span class="token punctuation">(</span><span class="token class-name">Jedis</span> conn<span class="token punctuation">,</span> <span class="token class-name">String</span> user<span class="token punctuation">,</span> <span class="token class-name">String</span> title<span class="token punctuation">,</span> <span class="token class-name">String</span> link<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 生成一个新的文章ID。</span>
        <span class="token class-name">String</span> articleId <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>conn<span class="token punctuation">.</span><span class="token function">incr</span><span class="token punctuation">(</span><span class="token string">&quot;article:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">String</span> voted <span class="token operator">=</span> <span class="token string">&quot;voted:&quot;</span> <span class="token operator">+</span> articleId<span class="token punctuation">;</span>
        <span class="token comment">// 将发布文章的用户添加到文章的已投票用户名单里面，</span>
        conn<span class="token punctuation">.</span><span class="token function">sadd</span><span class="token punctuation">(</span>voted<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 然后将这个名单的过期时间设置为一周（第3章将对过期时间作更详细的介绍）。</span>
        conn<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>voted<span class="token punctuation">,</span> <span class="token constant">ONE_WEEK_IN_SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">long</span> now <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> article <span class="token operator">=</span> <span class="token string">&quot;article:&quot;</span> <span class="token operator">+</span> articleId<span class="token punctuation">;</span>
        <span class="token comment">// 将文章信息存储到一个散列里面。</span>
        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> articleData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        articleData<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;title&quot;</span><span class="token punctuation">,</span> title<span class="token punctuation">)</span><span class="token punctuation">;</span>
        articleData<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;link&quot;</span><span class="token punctuation">,</span> link<span class="token punctuation">)</span><span class="token punctuation">;</span>
        articleData<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
        articleData<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;now&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        articleData<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;votes&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        conn<span class="token punctuation">.</span><span class="token function">hmset</span><span class="token punctuation">(</span>article<span class="token punctuation">,</span> articleData<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 将文章添加到根据发布时间排序的有序集合和根据评分排序的有序集合里面。</span>
        conn<span class="token punctuation">.</span><span class="token function">zadd</span><span class="token punctuation">(</span><span class="token string">&quot;score:&quot;</span><span class="token punctuation">,</span> now <span class="token operator">+</span> <span class="token constant">VOTE_SCORE</span><span class="token punctuation">,</span> article<span class="token punctuation">)</span><span class="token punctuation">;</span>
        conn<span class="token punctuation">.</span><span class="token function">zadd</span><span class="token punctuation">(</span><span class="token string">&quot;time:&quot;</span><span class="token punctuation">,</span> now<span class="token punctuation">,</span> article<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> articleId<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分页查询最受欢迎文章：</p><p>使用 <code>ZINTERSTORE</code> 命令根据页码、每页记录数、排序号，根据评分值从大到小分页查出文章 ID 列表。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">getArticles</span><span class="token punctuation">(</span><span class="token class-name">Jedis</span> conn<span class="token punctuation">,</span> <span class="token keyword">int</span> page<span class="token punctuation">,</span> <span class="token class-name">String</span> order<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 设置获取文章的起始索引和结束索引。</span>
        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token punctuation">(</span>page <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token constant">ARTICLES_PER_PAGE</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> end <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token constant">ARTICLES_PER_PAGE</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>

        <span class="token comment">// 获取多个文章ID。</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> ids <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">zrevrange</span><span class="token punctuation">(</span>order<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> articles <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 根据文章ID获取文章的详细信息。</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> id <span class="token operator">:</span> ids<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> articleData <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">hgetAll</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
            articleData<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
            articles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>articleData<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> articles<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="对文章进行分组" tabindex="-1"><a class="header-anchor" href="#对文章进行分组" aria-hidden="true">#</a> 对文章进行分组</h3><p>如果文章需要分组，功能需要分为两块：</p><ul><li>记录文章属于哪个群组</li><li>负责取出群组里的文章</li></ul><p>将文章添加、删除群组：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addRemoveGroups</span><span class="token punctuation">(</span><span class="token class-name">Jedis</span> conn<span class="token punctuation">,</span> <span class="token class-name">String</span> articleId<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> toAdd<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> toRemove<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 构建存储文章信息的键名。</span>
        <span class="token class-name">String</span> article <span class="token operator">=</span> <span class="token string">&quot;article:&quot;</span> <span class="token operator">+</span> articleId<span class="token punctuation">;</span>
        <span class="token comment">// 将文章添加到它所属的群组里面。</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> group <span class="token operator">:</span> toAdd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            conn<span class="token punctuation">.</span><span class="token function">sadd</span><span class="token punctuation">(</span><span class="token string">&quot;group:&quot;</span> <span class="token operator">+</span> group<span class="token punctuation">,</span> article<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 从群组里面移除文章。</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> group <span class="token operator">:</span> toRemove<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            conn<span class="token punctuation">.</span><span class="token function">srem</span><span class="token punctuation">(</span><span class="token string">&quot;group:&quot;</span> <span class="token operator">+</span> group<span class="token punctuation">,</span> article<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>取出群组里的文章：</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20200225214210.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>通过对存储群组文章的集合和存储文章评分的有序集合执行 <code>ZINTERSTORE</code> 命令，可以得到按照文章评分排序的群组文章。</li><li>通过对存储群组文章的集合和存储文章发布时间的有序集合执行 <code>ZINTERSTORE</code> 命令，可以得到按照文章发布时间排序的群组文章。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">getGroupArticles</span><span class="token punctuation">(</span><span class="token class-name">Jedis</span> conn<span class="token punctuation">,</span> <span class="token class-name">String</span> group<span class="token punctuation">,</span> <span class="token keyword">int</span> page<span class="token punctuation">,</span> <span class="token class-name">String</span> order<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 为每个群组的每种排列顺序都创建一个键。</span>
        <span class="token class-name">String</span> key <span class="token operator">=</span> order <span class="token operator">+</span> group<span class="token punctuation">;</span>
        <span class="token comment">// 检查是否有已缓存的排序结果，如果没有的话就现在进行排序。</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>conn<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 根据评分或者发布时间，对群组文章进行排序。</span>
            <span class="token class-name">ZParams</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">aggregate</span><span class="token punctuation">(</span><span class="token class-name">ZParams<span class="token punctuation">.</span>Aggregate</span><span class="token punctuation">.</span><span class="token constant">MAX</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            conn<span class="token punctuation">.</span><span class="token function">zinterstore</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> params<span class="token punctuation">,</span> <span class="token string">&quot;group:&quot;</span> <span class="token operator">+</span> group<span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 让Redis在60秒钟之后自动删除这个有序集合。</span>
            conn<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 调用之前定义的getArticles函数来进行分页并获取文章数据。</span>
        <span class="token keyword">return</span> <span class="token function">getArticles</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> page<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="管理令牌" tabindex="-1"><a class="header-anchor" href="#管理令牌" aria-hidden="true">#</a> 管理令牌</h2><p>网站一般会以 Cookie、Session、令牌这类信息存储用户身份信息。</p><p>可以将 Cookie/Session/令牌 和用户的映射关系存储在 <code>HASH</code> 结构。</p><p>下面以令牌来举例。</p><h3 id="查询令牌" tabindex="-1"><a class="header-anchor" href="#查询令牌" aria-hidden="true">#</a> 查询令牌</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">checkToken</span><span class="token punctuation">(</span><span class="token class-name">Jedis</span> conn<span class="token punctuation">,</span> <span class="token class-name">String</span> token<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 尝试获取并返回令牌对应的用户。</span>
        <span class="token keyword">return</span> conn<span class="token punctuation">.</span><span class="token function">hget</span><span class="token punctuation">(</span><span class="token string">&quot;login:&quot;</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="更新令牌" tabindex="-1"><a class="header-anchor" href="#更新令牌" aria-hidden="true">#</a> 更新令牌</h3><ul><li>用户每次访问页面，可以记录下令牌和当前时间戳的映射关系，存入一个 <code>ZSET</code> 结构中，以便分析用户是否活跃，继而可以周期性清理最老的令牌，统计当前在线用户数等行为。</li><li>用户如果正在浏览商品，可以记录到用户最近浏览过的商品有序集合中（集合可以限定数量，超过数量进行裁剪），存入到一个 <code>ZSET</code> 结构中，以便分析用户最近可能感兴趣的商品，以便推荐商品。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateToken</span><span class="token punctuation">(</span><span class="token class-name">Jedis</span> conn<span class="token punctuation">,</span> <span class="token class-name">String</span> token<span class="token punctuation">,</span> <span class="token class-name">String</span> user<span class="token punctuation">,</span> <span class="token class-name">String</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取当前时间戳。</span>
        <span class="token keyword">long</span> timestamp <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">;</span>
        <span class="token comment">// 维持令牌与已登录用户之间的映射。</span>
        conn<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span><span class="token string">&quot;login:&quot;</span><span class="token punctuation">,</span> token<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 记录令牌最后一次出现的时间。</span>
        conn<span class="token punctuation">.</span><span class="token function">zadd</span><span class="token punctuation">(</span><span class="token string">&quot;recent:&quot;</span><span class="token punctuation">,</span> timestamp<span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 记录用户浏览过的商品。</span>
            conn<span class="token punctuation">.</span><span class="token function">zadd</span><span class="token punctuation">(</span><span class="token string">&quot;viewed:&quot;</span> <span class="token operator">+</span> token<span class="token punctuation">,</span> timestamp<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 移除旧的记录，只保留用户最近浏览过的25个商品。</span>
            conn<span class="token punctuation">.</span><span class="token function">zremrangeByRank</span><span class="token punctuation">(</span><span class="token string">&quot;viewed:&quot;</span> <span class="token operator">+</span> token<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            conn<span class="token punctuation">.</span><span class="token function">zincrby</span><span class="token punctuation">(</span><span class="token string">&quot;viewed:&quot;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="清理令牌" tabindex="-1"><a class="header-anchor" href="#清理令牌" aria-hidden="true">#</a> 清理令牌</h3><p>上一节提到，更新令牌时，将令牌和当前时间戳的映射关系，存入一个 <code>ZSET</code> 结构中。所以可以通过排序得知哪些令牌最老。如果没有清理操作，更新令牌占用的内存会不断膨胀，直到导致机器宕机。</p><p>比如：最多允许存储 1000 万条令牌信息，周期性检查，一旦发现记录数超出 1000 万条，将 ZSET 从新到老排序，将超出 1000 万条的记录清除。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CleanSessionsThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Jedis</span> conn<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> limit<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> quit<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">CleanSessionsThread</span><span class="token punctuation">(</span><span class="token keyword">int</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>conn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">&quot;localhost&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>conn<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">=</span> limit<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        quit <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>quit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 找出目前已有令牌的数量。</span>
            <span class="token keyword">long</span> size <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">zcard</span><span class="token punctuation">(</span><span class="token string">&quot;recent:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 令牌数量未超过限制，休眠并在之后重新检查。</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;=</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ie<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 获取需要移除的令牌ID。</span>
            <span class="token keyword">long</span> endIndex <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>size <span class="token operator">-</span> limit<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> tokenSet <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">zrange</span><span class="token punctuation">(</span><span class="token string">&quot;recent:&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> endIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tokens <span class="token operator">=</span> tokenSet<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>tokenSet<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 为那些将要被删除的令牌构建键名。</span>
            <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> sessionKeys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> token <span class="token operator">:</span> tokens<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                sessionKeys<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;viewed:&quot;</span> <span class="token operator">+</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 移除最旧的那些令牌。</span>
            conn<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span>sessionKeys<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>sessionKeys<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            conn<span class="token punctuation">.</span><span class="token function">hdel</span><span class="token punctuation">(</span><span class="token string">&quot;login:&quot;</span><span class="token punctuation">,</span> tokens<span class="token punctuation">)</span><span class="token punctuation">;</span>
            conn<span class="token punctuation">.</span><span class="token function">zrem</span><span class="token punctuation">(</span><span class="token string">&quot;recent:&quot;</span><span class="token punctuation">,</span> tokens<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,115),q={href:"https://item.jd.com/11791607.html",target:"_blank",rel:"noopener noreferrer"},x={href:"https://item.jd.com/11486101.html",target:"_blank",rel:"noopener noreferrer"};function E(R,z){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,r,k,d,n("blockquote",null,[n("p",null,[s("缓存应用的基本原理，请参考 "),n("a",m,[v,t(a)]),s(" 第四 ~ 第六节内容。")])]),g,b,h,n("blockquote",null,[n("p",null,[s("什么是缓存穿透，可以参考："),n("a",y,[f,t(a)])])]),w,n("blockquote",null,[n("p",null,[s("更多分布式锁的实现方式及细节，请参考："),n("a",S,[s("分布式锁基本原理"),t(a)])])]),_,n("ul",null,[n("li",null,[n("a",q,[s("《Redis 实战》"),t(a)])]),n("li",null,[n("a",x,[s("《Redis 设计与实现》"),t(a)])])])])}const D=e(i,[["render",E],["__file","index.html.vue"]]);export{D as default};
