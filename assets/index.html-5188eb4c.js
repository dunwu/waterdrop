const l=JSON.parse('{"key":"v-7528f6dc","path":"/pages/0b7590c5/","title":"《极客时间教程 - 从 0 开始学微服务》笔记","lang":"zh-CN","frontmatter":{"title":"《极客时间教程 - 从 0 开始学微服务》笔记","date":"2021-08-15T15:27:00.000Z","permalink":"/pages/0b7590c5/","category":["笔记","设计"],"tag":["设计","架构","微服务"],"description":"《极客时间教程 - 从 0 开始学微服务》笔记 到底什么是微服务？ 微服务定义 微服务是由单一应用程序构成的小服务，拥有自己的进程与轻量化处理，服务依业务功能设计，以全自动的方式部署，与其他服务使用 HTTP API 通讯。同时，服务会使用最小规模的集中管理 （例如 Docker）技术，服务可以用不同的编程语言与数据库等。 ——Martin Fowler 和 James Lewis 单体应用的问题 部署效率低 团队协作开发成本高 单点故障问题 线上发布变慢","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/0b7590c5/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"《极客时间教程 - 从 0 开始学微服务》笔记"}],["meta",{"property":"og:description","content":"《极客时间教程 - 从 0 开始学微服务》笔记 到底什么是微服务？ 微服务定义 微服务是由单一应用程序构成的小服务，拥有自己的进程与轻量化处理，服务依业务功能设计，以全自动的方式部署，与其他服务使用 HTTP API 通讯。同时，服务会使用最小规模的集中管理 （例如 Docker）技术，服务可以用不同的编程语言与数据库等。 ——Martin Fowler 和 James Lewis 单体应用的问题 部署效率低 团队协作开发成本高 单点故障问题 线上发布变慢"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-13T09:46:18.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"设计"}],["meta",{"property":"article:tag","content":"架构"}],["meta",{"property":"article:tag","content":"微服务"}],["meta",{"property":"article:published_time","content":"2021-08-15T15:27:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-13T09:46:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"《极客时间教程 - 从 0 开始学微服务》笔记\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-08-15T15:27:00.000Z\\",\\"dateModified\\":\\"2025-09-13T09:46:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"到底什么是微服务？","slug":"到底什么是微服务","link":"#到底什么是微服务","children":[]},{"level":2,"title":"从单体应用走向服务化","slug":"从单体应用走向服务化","link":"#从单体应用走向服务化","children":[{"level":3,"title":"什么时候进行服务化拆分？","slug":"什么时候进行服务化拆分","link":"#什么时候进行服务化拆分","children":[]},{"level":3,"title":"服务化拆分的两种姿势","slug":"服务化拆分的两种姿势","link":"#服务化拆分的两种姿势","children":[]},{"level":3,"title":"服务化拆分的前置条件","slug":"服务化拆分的前置条件","link":"#服务化拆分的前置条件","children":[]}]},{"level":2,"title":"初探微服务架构","slug":"初探微服务架构","link":"#初探微服务架构","children":[]},{"level":2,"title":"如何发布和引用服务？","slug":"如何发布和引用服务","link":"#如何发布和引用服务","children":[]},{"level":2,"title":"如何注册和发现服务？","slug":"如何注册和发现服务","link":"#如何注册和发现服务","children":[{"level":3,"title":"注册中心实现方式","slug":"注册中心实现方式","link":"#注册中心实现方式","children":[]},{"level":3,"title":"集群部署","slug":"集群部署","link":"#集群部署","children":[]},{"level":3,"title":"目录存储","slug":"目录存储","link":"#目录存储","children":[]},{"level":3,"title":"服务健康状态检测","slug":"服务健康状态检测","link":"#服务健康状态检测","children":[]},{"level":3,"title":"服务状态变更通知","slug":"服务状态变更通知","link":"#服务状态变更通知","children":[]},{"level":3,"title":"白名单机制","slug":"白名单机制","link":"#白名单机制","children":[]}]},{"level":2,"title":"如何实现 RPC 远程服务调用？","slug":"如何实现-rpc-远程服务调用","link":"#如何实现-rpc-远程服务调用","children":[]},{"level":2,"title":"如何监控微服务调用？","slug":"如何监控微服务调用","link":"#如何监控微服务调用","children":[]},{"level":2,"title":"如何追踪微服务调用？","slug":"如何追踪微服务调用","link":"#如何追踪微服务调用","children":[{"level":3,"title":"服务追踪的作用","slug":"服务追踪的作用","link":"#服务追踪的作用","children":[]},{"level":3,"title":"服务追踪系统原理","slug":"服务追踪系统原理","link":"#服务追踪系统原理","children":[]},{"level":3,"title":"服务追踪系统实现","slug":"服务追踪系统实现","link":"#服务追踪系统实现","children":[]}]},{"level":2,"title":"微服务治理的手段有哪些？","slug":"微服务治理的手段有哪些","link":"#微服务治理的手段有哪些","children":[{"level":3,"title":"节点管理","slug":"节点管理","link":"#节点管理","children":[]},{"level":3,"title":"负载均衡","slug":"负载均衡","link":"#负载均衡","children":[]},{"level":3,"title":"服务路由","slug":"服务路由","link":"#服务路由","children":[]},{"level":3,"title":"服务容错","slug":"服务容错","link":"#服务容错","children":[]}]},{"level":2,"title":"Dubbo 框架里的微服务组件","slug":"dubbo-框架里的微服务组件","link":"#dubbo-框架里的微服务组件","children":[]},{"level":2,"title":"服务发布和引用的实践","slug":"服务发布和引用的实践","link":"#服务发布和引用的实践","children":[]},{"level":2,"title":"如何将注册中心落地？","slug":"如何将注册中心落地","link":"#如何将注册中心落地","children":[{"level":3,"title":"注册中心工作流程","slug":"注册中心工作流程","link":"#注册中心工作流程","children":[]},{"level":3,"title":"如何注册节点","slug":"如何注册节点","link":"#如何注册节点","children":[]},{"level":3,"title":"如何反注册","slug":"如何反注册","link":"#如何反注册","children":[]},{"level":3,"title":"如何查询节点信息","slug":"如何查询节点信息","link":"#如何查询节点信息","children":[]},{"level":3,"title":"如何订阅服务变更","slug":"如何订阅服务变更","link":"#如何订阅服务变更","children":[]},{"level":3,"title":"注册与发现的几个问题","slug":"注册与发现的几个问题","link":"#注册与发现的几个问题","children":[]}]},{"level":2,"title":"开源服务注册中心如何选型？","slug":"开源服务注册中心如何选型","link":"#开源服务注册中心如何选型","children":[]},{"level":2,"title":"开源 RPC 框架如何选型？","slug":"开源-rpc-框架如何选型","link":"#开源-rpc-框架如何选型","children":[]},{"level":2,"title":"如何搭建一个可靠的监控系统？","slug":"如何搭建一个可靠的监控系统","link":"#如何搭建一个可靠的监控系统","children":[]},{"level":2,"title":"如何搭建一套适合你的服务追踪系统？","slug":"如何搭建一套适合你的服务追踪系统","link":"#如何搭建一套适合你的服务追踪系统","children":[]},{"level":2,"title":"如何识别服务节点是否存活？","slug":"如何识别服务节点是否存活","link":"#如何识别服务节点是否存活","children":[{"level":3,"title":"心跳开关保护机制","slug":"心跳开关保护机制","link":"#心跳开关保护机制","children":[]},{"level":3,"title":"服务节点摘除保护机制","slug":"服务节点摘除保护机制","link":"#服务节点摘除保护机制","children":[]}]},{"level":2,"title":"如何使用负载均衡算法？","slug":"如何使用负载均衡算法","link":"#如何使用负载均衡算法","children":[{"level":3,"title":"负载均衡算法","slug":"负载均衡算法","link":"#负载均衡算法","children":[]}]},{"level":2,"title":"如何使用服务路由？","slug":"如何使用服务路由","link":"#如何使用服务路由","children":[]},{"level":2,"title":"服务端出现故障时该如何应对？","slug":"服务端出现故障时该如何应对","link":"#服务端出现故障时该如何应对","children":[]},{"level":2,"title":"服务调用失败时有哪些处理手段？","slug":"服务调用失败时有哪些处理手段","link":"#服务调用失败时有哪些处理手段","children":[]},{"level":2,"title":"如何管理服务配置？","slug":"如何管理服务配置","link":"#如何管理服务配置","children":[]},{"level":2,"title":"如何搭建微服务治理平台？","slug":"如何搭建微服务治理平台","link":"#如何搭建微服务治理平台","children":[]},{"level":2,"title":"微服务架构该如何落地？","slug":"微服务架构该如何落地","link":"#微服务架构该如何落地","children":[]},{"level":2,"title":"微服务为什么要容器化？","slug":"微服务为什么要容器化","link":"#微服务为什么要容器化","children":[]},{"level":2,"title":"微服务容器化运维：镜像仓库和资源调度","slug":"微服务容器化运维-镜像仓库和资源调度","link":"#微服务容器化运维-镜像仓库和资源调度","children":[]},{"level":2,"title":"微服务容器化运维：容器调度和服务编排","slug":"微服务容器化运维-容器调度和服务编排","link":"#微服务容器化运维-容器调度和服务编排","children":[]},{"level":2,"title":"微服务容器化运维：微博容器运维平台 DCP","slug":"微服务容器化运维-微博容器运维平台-dcp","link":"#微服务容器化运维-微博容器运维平台-dcp","children":[]},{"level":2,"title":"微服务如何实现 DevOps？","slug":"微服务如何实现-devops","link":"#微服务如何实现-devops","children":[]},{"level":2,"title":"如何做好微服务容量规划？","slug":"如何做好微服务容量规划","link":"#如何做好微服务容量规划","children":[]},{"level":2,"title":"微服务多机房部署实践","slug":"微服务多机房部署实践","link":"#微服务多机房部署实践","children":[]},{"level":2,"title":"多机房数据同步","slug":"多机房数据同步","link":"#多机房数据同步","children":[]},{"level":2,"title":"微服务混合云部署实践","slug":"微服务混合云部署实践","link":"#微服务混合云部署实践","children":[{"level":3,"title":"跨云服务的负载均衡","slug":"跨云服务的负载均衡","link":"#跨云服务的负载均衡","children":[]},{"level":3,"title":"跨云服务的数据同步","slug":"跨云服务的数据同步","link":"#跨云服务的数据同步","children":[]},{"level":3,"title":"跨云服务的容器运维","slug":"跨云服务的容器运维","link":"#跨云服务的容器运维","children":[]}]},{"level":2,"title":"下一代微服务架构 Service Mesh","slug":"下一代微服务架构-service-mesh","link":"#下一代微服务架构-service-mesh","children":[]},{"level":2,"title":"Service Mesh 的实现原理","slug":"service-mesh-的实现原理","link":"#service-mesh-的实现原理","children":[]},{"level":2,"title":"Istio：Service Mesh 的代表产品","slug":"istio-service-mesh-的代表产品","link":"#istio-service-mesh-的代表产品","children":[{"level":3,"title":"Istio 整体架构","slug":"istio-整体架构","link":"#istio-整体架构","children":[]}]}],"git":{"createdTime":1757756778000,"updatedTime":1757756778000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":1}]},"readingTime":{"minutes":20.09,"words":6028},"filePathRelative":"00.笔记/03.设计/极客时间教程-从0开始学微服务.md","localizedDate":"2021年8月15日","excerpt":"<h1> 《极客时间教程 - 从 0 开始学微服务》笔记</h1>\\n<h2> 到底什么是微服务？</h2>\\n<blockquote>\\n<p>微服务定义</p>\\n<p>微服务是由单一应用程序构成的小服务，拥有自己的进程与轻量化处理，服务依业务功能设计，以全自动的方式部署，与其他服务使用 HTTP API 通讯。同时，服务会使用最小规模的集中管理 （例如 Docker）技术，服务可以用不同的编程语言与数据库等。</p>\\n<p>——Martin Fowler 和 James Lewis</p>\\n</blockquote>\\n<p>单体应用的问题</p>\\n<ul>\\n<li>部署效率低</li>\\n<li>团队协作开发成本高</li>\\n<li>单点故障问题</li>\\n<li>线上发布变慢</li>\\n</ul>","autoDesc":true}');export{l as data};
