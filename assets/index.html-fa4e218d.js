import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o,c as d,a as e,b as r,d as n,e as h}from"./app-55986131.js";const l={},c=h('<h1 id="面向对象设计六大原则" tabindex="-1"><a class="header-anchor" href="#面向对象设计六大原则" aria-hidden="true">#</a> 面向对象设计六大原则</h1><h2 id="单一职责原则" tabindex="-1"><a class="header-anchor" href="#单一职责原则" aria-hidden="true">#</a> 单一职责原则</h2><p>单一职责原则（Single Responsibility Principle），应该有且仅有一个原因引起类的变更。</p><p>简单点说，<strong>一个类，最好只负责一件事。</strong></p><h2 id="开放-封闭原则" tabindex="-1"><a class="header-anchor" href="#开放-封闭原则" aria-hidden="true">#</a> 开放-封闭原则</h2><p>开放-封闭原则（Open Close Principle），软件实体（类、模块、函数）等应该可以扩展，但是不可修改。</p><p>对于扩展是开放的；对于更改是封闭的。</p><h2 id="里氏替换原则" tabindex="-1"><a class="header-anchor" href="#里氏替换原则" aria-hidden="true">#</a> 里氏替换原则</h2><p>里氏替换原则（Liskov Substitution Principle），子类可以替换父类。</p><h2 id="依赖倒置原则" tabindex="-1"><a class="header-anchor" href="#依赖倒置原则" aria-hidden="true">#</a> 依赖倒置原则</h2><p>依赖倒置原则（Dependency Inversion Principle），抽象不应该依赖于细节，细节应当依赖于抽象。换言之，要针对接口编程，而不是针对实现编程。</p><p>关键点：</p><ul><li>高层模块不应该依赖低层模块，两者都应该依赖其抽象</li><li>抽象不应该依赖细节</li><li>细节应该依赖抽象</li></ul><h2 id="接口隔离原则" tabindex="-1"><a class="header-anchor" href="#接口隔离原则" aria-hidden="true">#</a> 接口隔离原则</h2><p>接口隔离原则（Interface Segregation Principle）使用多个专门的接口，而不使用单一的总接口，即客户端不应该依赖那些它不需要的接口。</p><ul><li>客户端不应依赖它不需要的接口</li><li>类间的依赖关系应该建立在最小的接口上</li></ul><h2 id="迪米特原则" tabindex="-1"><a class="header-anchor" href="#迪米特原则" aria-hidden="true">#</a> 迪米特原则</h2><p>迪米特原则（Least Knowledge Principle）又称最少知识原则，一个软件实体应当尽可能少地与其他实体发生相互作用。</p><p>一个类应该对自己需要调用的类知道得最少，类的内部如何实现、如何复杂都与调用者或者依赖者没关系，调用者或者依赖者只需要知道他需要的方法即可，其他的我一概不关心。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>',20),s={href:"https://book.douban.com/subject/2243615/",target:"_blank",rel:"noopener noreferrer"},p={href:"https://book.douban.com/subject/2334288/",target:"_blank",rel:"noopener noreferrer"};function u(_,f){const a=t("ExternalLinkIcon");return o(),d("div",null,[c,e("ul",null,[e("li",null,[e("a",s,[r("《Head First 设计模式》"),n(a)])]),e("li",null,[e("a",p,[r("《大话设计模式》"),n(a)])])])])}const m=i(l,[["render",u],["__file","index.html.vue"]]);export{m as default};
