const e=JSON.parse('{"key":"v-4e26b717","path":"/pages/e64d3e45/","title":"分布式锁","lang":"zh-CN","frontmatter":{"title":"分布式锁","date":"2019-06-04T23:42:00.000Z","permalink":"/pages/e64d3e45/","category":["分布式","分布式协同"],"tag":["分布式","协同","锁"],"description":"分布式锁 什么是分布式锁 在计算机科学中，锁是在并发场景下用于强行限制资源访问的一种同步机制，即用于在并发控制中通过互斥手段来保证数据同步安全。 在 Java 进程中，可以使用 Lock、synchronized 等来支持并发锁。如果是同一台机器的不同进程，想要同时操作一个共享资源（例如修改同一个文件），可以使用操作系统提供的「文件锁」或「信号量」来做互斥。这些发生在同一台机器上的互斥操作，可以称为本地锁。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/e64d3e45/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"分布式锁"}],["meta",{"property":"og:description","content":"分布式锁 什么是分布式锁 在计算机科学中，锁是在并发场景下用于强行限制资源访问的一种同步机制，即用于在并发控制中通过互斥手段来保证数据同步安全。 在 Java 进程中，可以使用 Lock、synchronized 等来支持并发锁。如果是同一台机器的不同进程，想要同时操作一个共享资源（例如修改同一个文件），可以使用操作系统提供的「文件锁」或「信号量」来做互斥。这些发生在同一台机器上的互斥操作，可以称为本地锁。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-13T15:15:47.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"分布式"}],["meta",{"property":"article:tag","content":"协同"}],["meta",{"property":"article:tag","content":"锁"}],["meta",{"property":"article:published_time","content":"2019-06-04T23:42:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-13T15:15:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"分布式锁\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-06-04T23:42:00.000Z\\",\\"dateModified\\":\\"2025-09-13T15:15:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"什么是分布式锁","slug":"什么是分布式锁","link":"#什么是分布式锁","children":[]},{"level":2,"title":"分布式锁的设计目标","slug":"分布式锁的设计目标","link":"#分布式锁的设计目标","children":[{"level":3,"title":"互斥","slug":"互斥","link":"#互斥","children":[]},{"level":3,"title":"避免死锁","slug":"避免死锁","link":"#避免死锁","children":[]},{"level":3,"title":"可重入","slug":"可重入","link":"#可重入","children":[]},{"level":3,"title":"公平性","slug":"公平性","link":"#公平性","children":[]},{"level":3,"title":"重试","slug":"重试","link":"#重试","children":[]},{"level":3,"title":"容错","slug":"容错","link":"#容错","children":[]}]},{"level":2,"title":"数据库分布式锁","slug":"数据库分布式锁","link":"#数据库分布式锁","children":[{"level":3,"title":"数据库分布式锁原理","slug":"数据库分布式锁原理","link":"#数据库分布式锁原理","children":[]},{"level":3,"title":"数据库分布式锁小结","slug":"数据库分布式锁小结","link":"#数据库分布式锁小结","children":[]}]},{"level":2,"title":"ZooKeeper 分布式锁","slug":"zookeeper-分布式锁","link":"#zookeeper-分布式锁","children":[{"level":3,"title":"ZooKeeper 分布式锁原理","slug":"zookeeper-分布式锁原理","link":"#zookeeper-分布式锁原理","children":[]},{"level":3,"title":"ZooKeeper 分布式锁小结","slug":"zookeeper-分布式锁小结","link":"#zookeeper-分布式锁小结","children":[]}]},{"level":2,"title":"Redis 分布式锁","slug":"redis-分布式锁","link":"#redis-分布式锁","children":[{"level":3,"title":"Redis 分布式锁原理","slug":"redis-分布式锁原理","link":"#redis-分布式锁原理","children":[]},{"level":3,"title":"Redis 分布式锁小结","slug":"redis-分布式锁小结","link":"#redis-分布式锁小结","children":[]}]},{"level":2,"title":"RedLock 分布式锁","slug":"redlock-分布式锁","link":"#redlock-分布式锁","children":[{"level":3,"title":"RedLock 分布式锁原理","slug":"redlock-分布式锁原理","link":"#redlock-分布式锁原理","children":[]},{"level":3,"title":"RedLock 分布式锁小结","slug":"redlock-分布式锁小结","link":"#redlock-分布式锁小结","children":[]}]},{"level":2,"title":"Redisson 提供的分布式锁","slug":"redisson-提供的分布式锁","link":"#redisson-提供的分布式锁","children":[]},{"level":2,"title":"分布式锁技术选型","slug":"分布式锁技术选型","link":"#分布式锁技术选型","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1757776547000,"updatedTime":1757776547000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":1}]},"readingTime":{"minutes":21.9,"words":6571},"filePathRelative":"15.分布式/分布式协同/分布式锁.md","localizedDate":"2019年6月4日","excerpt":"<h1> 分布式锁</h1>\\n<h2> 什么是分布式锁</h2>\\n<p>在计算机科学中，<strong>锁是在并发场景下用于强行限制资源访问的一种同步机制</strong>，即用于在并发控制中通过互斥手段来保证数据同步安全。</p>\\n<p>在 Java 进程中，可以使用 Lock、synchronized 等来支持并发锁。如果是同一台机器的不同进程，想要同时操作一个共享资源（例如修改同一个文件），可以使用操作系统提供的「文件锁」或「信号量」来做互斥。这些发生在同一台机器上的互斥操作，可以称为<strong>本地锁</strong>。</p>\\n<figure><img src=\\"https://raw.githubusercontent.com/dunwu/images/master/snap/202412190814629.png\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>","autoDesc":true}');export{e as data};
