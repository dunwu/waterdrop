const e=JSON.parse('{"key":"v-3d4299f7","path":"/pages/c3adffde/","title":"Java 虚拟机之类加载","lang":"zh-CN","frontmatter":{"title":"Java 虚拟机之类加载","date":"2020-06-17T15:06:46.000Z","order":4,"permalink":"/pages/c3adffde/","category":["Java","JavaCore","JVM"],"tag":["Java","JavaCore","JVM"],"description":"Java 虚拟机之类加载 类加载机制 类是在运行期间动态加载的。 类的加载指的是将类的 .class 文件中的二进制数据读入到内存中，将其放在运行时数据区的方法区内，然后在堆区创建一个java.lang.Class对象，用来封装类在方法区内的数据结构。类的加载的最终产品是位于堆区中的Class对象，Class对象封装了类在方法区内的数据结构，并且向 Java 程序员提供了访问方法区内的数据结构的接口。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/c3adffde/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"Java 虚拟机之类加载"}],["meta",{"property":"og:description","content":"Java 虚拟机之类加载 类加载机制 类是在运行期间动态加载的。 类的加载指的是将类的 .class 文件中的二进制数据读入到内存中，将其放在运行时数据区的方法区内，然后在堆区创建一个java.lang.Class对象，用来封装类在方法区内的数据结构。类的加载的最终产品是位于堆区中的Class对象，Class对象封装了类在方法区内的数据结构，并且向 Java 程序员提供了访问方法区内的数据结构的接口。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-13T09:28:24.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"JavaCore"}],["meta",{"property":"article:tag","content":"JVM"}],["meta",{"property":"article:published_time","content":"2020-06-17T15:06:46.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-13T09:28:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 虚拟机之类加载\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-06-17T15:06:46.000Z\\",\\"dateModified\\":\\"2025-09-13T09:28:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"类加载机制","slug":"类加载机制","link":"#类加载机制","children":[]},{"level":2,"title":"类的生命周期","slug":"类的生命周期","link":"#类的生命周期","children":[{"level":3,"title":"（一）加载","slug":"一-加载","link":"#一-加载","children":[]},{"level":3,"title":"（二）验证","slug":"二-验证","link":"#二-验证","children":[]},{"level":3,"title":"（三）准备","slug":"三-准备","link":"#三-准备","children":[]},{"level":3,"title":"（四）解析","slug":"四-解析","link":"#四-解析","children":[]},{"level":3,"title":"（五）初始化","slug":"五-初始化","link":"#五-初始化","children":[]}]},{"level":2,"title":"ClassLoader","slug":"classloader","link":"#classloader","children":[{"level":3,"title":"类与类加载器","slug":"类与类加载器","link":"#类与类加载器","children":[]},{"level":3,"title":"类加载器分类","slug":"类加载器分类","link":"#类加载器分类","children":[]},{"level":3,"title":"双亲委派","slug":"双亲委派","link":"#双亲委派","children":[]},{"level":3,"title":"ClassLoader 参数","slug":"classloader-参数","link":"#classloader-参数","children":[]}]},{"level":2,"title":"类的加载","slug":"类的加载","link":"#类的加载","children":[{"level":3,"title":"类加载方式","slug":"类加载方式","link":"#类加载方式","children":[]},{"level":3,"title":"加载类错误","slug":"加载类错误","link":"#加载类错误","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1743948422000,"updatedTime":1757755704000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":3}]},"readingTime":{"minutes":20.91,"words":6273},"filePathRelative":"01.Java/01.JavaCore/06.JVM/Java_虚拟机_类加载.md","localizedDate":"2020年6月17日","excerpt":"<h1> Java 虚拟机之类加载</h1>\\n<h2> 类加载机制</h2>\\n<blockquote>\\n<p>类是在运行期间动态加载的。</p>\\n</blockquote>\\n<p>类的加载指的是将类的 <code>.class</code> 文件中的二进制数据读入到内存中，将其放在运行时数据区的方法区内，然后在堆区创建一个<code>java.lang.Class</code>对象，用来封装类在方法区内的数据结构。类的加载的最终产品是位于堆区中的<code>Class</code>对象，<code>Class</code>对象封装了类在方法区内的数据结构，并且向 Java 程序员提供了访问方法区内的数据结构的接口。</p>","autoDesc":true}');export{e as data};
