import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o,c as l,a as n,b as a,d as t,e}from"./app-8719940a.js";const i={},u=e(`<h1 id="ehcache-快速入门" tabindex="-1"><a class="header-anchor" href="#ehcache-快速入门" aria-hidden="true">#</a> Ehcache 快速入门</h1><blockquote><p>EhCache 是一个纯 Java 的进程内缓存框架，具有快速、精干等特点，是 Hibernate 中默认的 CacheProvider。</p></blockquote><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/technology/cache/ehcache-architecture.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="一、简介" tabindex="-1"><a class="header-anchor" href="#一、简介" aria-hidden="true">#</a> 一、简介</h2><blockquote><p>Ehcache 虽然也支持分布式模式，但是分布式方案不是很好好，建议只将其作为单机的进程内缓存使用。</p></blockquote><h3 id="ehcache-特性" tabindex="-1"><a class="header-anchor" href="#ehcache-特性" aria-hidden="true">#</a> Ehcache 特性</h3><p>优点</p><ul><li>快速、简单</li><li>支持多种缓存策略：LRU、LFU、FIFO 淘汰算法</li><li>缓存数据有两级：内存和磁盘，因此无需担心容量问题</li><li>缓存数据会在虚拟机重启的过程中写入磁盘</li><li>可以通过 RMI、可插入 API 等方式进行分布式缓存</li><li>具有缓存和缓存管理器的侦听接口</li><li>支持多缓存管理器实例，以及一个实例的多个缓存区域</li><li>提供 Hibernate 的缓存实现</li></ul><p>缺点</p><ul><li><strong>使用磁盘 Cache 的时候非常占用磁盘空间</strong></li><li><strong>不保证数据的安全</strong></li><li>虽然支持分布式缓存，但效率不高（通过组播方式，在不同节点之间同步数据）。</li></ul><h3 id="ehcache-集群" tabindex="-1"><a class="header-anchor" href="#ehcache-集群" aria-hidden="true">#</a> Ehcache 集群</h3><p>Ehcache 目前支持五种集群方式：</p><ul><li>RMI</li><li>JMS</li><li>JGroup</li><li>Terracotta</li><li>Ehcache Server</li></ul><h4 id="rmi" tabindex="-1"><a class="header-anchor" href="#rmi" aria-hidden="true">#</a> RMI</h4><p>使用组播方式通知所有节点同步数据。</p><p>如果网络有问题，或某台服务宕机，则存在数据无法同步的可能，导致数据不一致。</p><figure><img src="https://www.ehcache.org/images/documentation/rmi_replication.png" alt="Ehcache Image" tabindex="0" loading="lazy"><figcaption>Ehcache Image</figcaption></figure><h4 id="jms" tabindex="-1"><a class="header-anchor" href="#jms" aria-hidden="true">#</a> JMS</h4><p>JMS 类似 MQ，所有节点订阅消息，当某节点缓存发生变化，就向 JMS 发消息，其他节点感知变化后，同步数据。</p><figure><img src="https://www.ehcache.org/images/documentation/jms_replication.png" alt="Ehcache Image" tabindex="0" loading="lazy"><figcaption>Ehcache Image</figcaption></figure><h4 id="cache-server" tabindex="-1"><a class="header-anchor" href="#cache-server" aria-hidden="true">#</a> Cache Server</h4><figure><img src="https://www.ehcache.org/images/documentation/loadbalancer_hashing.png" alt="Ehcache Image" tabindex="0" loading="lazy"><figcaption>Ehcache Image</figcaption></figure><h2 id="二、快速入门" tabindex="-1"><a class="header-anchor" href="#二、快速入门" aria-hidden="true">#</a> 二、快速入门</h2><h3 id="引入-ehcache" tabindex="-1"><a class="header-anchor" href="#引入-ehcache" aria-hidden="true">#</a> 引入 Ehcache</h3><p>如果你的项目使用 maven 管理，添加以下依赖到你的 pom.xml 中。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>net.sf.ehcache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>ehcache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.10.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26),r={href:"http://www.ehcache.org/downloads/",target:"_blank",rel:"noopener noreferrer"},k=e(`<p>Spring 提供了对于 Ehcache 接口的封装，可以更简便的使用其功能。接入方式如下：</p><p>如果你的项目使用 maven 管理，添加以下依赖到你的<em>pom.xml</em>中。</p><p><code>spring-context-support</code>这个 jar 包中含有 Spring 对于缓存功能的抽象封装接口。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-context-support<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.1.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="添加配置文件" tabindex="-1"><a class="header-anchor" href="#添加配置文件" aria-hidden="true">#</a> 添加配置文件</h3><p>（1）在 classpath 下添加 <code>ehcache.xml</code><br> 添加一个名为 <em>helloworld</em> 的缓存。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ehcache</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>noNamespaceSchemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://ehcache.org/ehcache.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

  <span class="token comment">&lt;!-- 磁盘缓存位置 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>diskStore</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>java.io.tmpdir/ehcache<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

  <span class="token comment">&lt;!-- 默认缓存 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>defaultCache</span>
          <span class="token attr-name">maxEntriesLocalHeap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>10000<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name">eternal</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name">timeToIdleSeconds</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>120<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name">timeToLiveSeconds</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>120<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name">maxEntriesLocalDisk</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>10000000<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name">diskExpiryThreadIntervalSeconds</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>120<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name">memoryStoreEvictionPolicy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>LRU<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

  <span class="token comment">&lt;!-- helloworld缓存 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>helloworld<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name">maxElementsInMemory</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1000<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name">eternal</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name">timeToIdleSeconds</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>5<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name">timeToLiveSeconds</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>5<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name">overflowToDisk</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name">memoryStoreEvictionPolicy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>LRU<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ehcache</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ehcache-工作示例" tabindex="-1"><a class="header-anchor" href="#ehcache-工作示例" aria-hidden="true">#</a> Ehcache 工作示例</h3><p>Ehcache 会自动加载 <code>classpath</code> 根目录下名为 <code>ehcache.xml</code> 文件。</p><p>EhcacheDemo 的工作步骤如下：</p><ol><li>在 EhcacheDemo 中，我们引用 <code>ehcache.xml</code> 声明的名为 <em>helloworld</em> 的缓存来创建<code>Cache</code>对象；</li><li>然后我们用一个键值对来实例化<code>Element</code>对象；</li><li>将<code>Element</code>对象添加到<code>Cache</code>；</li><li>然后用<code>Cache</code>的 get 方法获取<code>Element</code>对象。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EhcacheDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// Create a cache manager</span>
        <span class="token keyword">final</span> <span class="token class-name">CacheManager</span> cacheManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CacheManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// create the cache called &quot;helloworld&quot;</span>
        <span class="token keyword">final</span> <span class="token class-name">Cache</span> cache <span class="token operator">=</span> cacheManager<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token string">&quot;helloworld&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// create a key to map the data to</span>
        <span class="token keyword">final</span> <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">&quot;greeting&quot;</span><span class="token punctuation">;</span>

        <span class="token comment">// Create a data element</span>
        <span class="token keyword">final</span> <span class="token class-name">Element</span> putGreeting <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Element</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Put the element into the data store</span>
        cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>putGreeting<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Retrieve the data element</span>
        <span class="token keyword">final</span> <span class="token class-name">Element</span> getGreeting <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Print the value</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>getGreeting<span class="token punctuation">.</span><span class="token function">getObjectValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Hello, World!
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="三、ehcache-api" tabindex="-1"><a class="header-anchor" href="#三、ehcache-api" aria-hidden="true">#</a> 三、Ehcache API</h2><p><code>Element</code>、<code>Cache</code>、<code>CacheManager</code>是 Ehcache 最重要的 API。</p><ul><li><code>Element</code> - 缓存的元素，它维护着一个键值对。</li><li><code>Cache</code> - 它是 Ehcache 的核心类，它有多个<code>Element</code>，并被<code>CacheManager</code>管理。它实现了对缓存的逻辑行为。</li><li><code>CacheManager</code> - <code>Cache</code>的容器对象，并管理着<code>Cache</code>的生命周期。CacheManager 支持两种创建模式：单例（Singleton mode）和实例（InstanceMode）。</li></ul><h3 id="创建-cachemanager" tabindex="-1"><a class="header-anchor" href="#创建-cachemanager" aria-hidden="true">#</a> 创建 CacheManager</h3><p>下面的代码列举了创建 <code>CacheManager</code> 的五种方式。</p><p>使用静态方法<code>create()</code>会以默认配置来创建单例的<code>CacheManager</code>实例。</p><p><code>newInstance()</code>方法是一个工厂方法，以默认配置创建一个新的<code>CacheManager</code>实例。</p><p>此外，<code>newInstance()</code>还有几个重载函数，分别可以通过传入<code>String</code>、<code>URL</code>、<code>InputStream</code>参数来加载配置文件，然后创建<code>CacheManager</code>实例。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 使用Ehcache默认配置获取单例的CacheManager实例</span>
<span class="token class-name">CacheManager</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cacheNames <span class="token operator">=</span> <span class="token class-name">CacheManager</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCacheNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使用Ehcache默认配置新建一个CacheManager实例</span>
<span class="token class-name">CacheManager</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cacheNames <span class="token operator">=</span> manager<span class="token punctuation">.</span><span class="token function">getCacheNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使用不同的配置文件分别创建一个CacheManager实例</span>
<span class="token class-name">CacheManager</span> manager1 <span class="token operator">=</span> <span class="token class-name">CacheManager</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">&quot;src/config/ehcache1.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">CacheManager</span> manager2 <span class="token operator">=</span> <span class="token class-name">CacheManager</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">&quot;src/config/ehcache2.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cacheNamesForManager1 <span class="token operator">=</span> manager1<span class="token punctuation">.</span><span class="token function">getCacheNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cacheNamesForManager2 <span class="token operator">=</span> manager2<span class="token punctuation">.</span><span class="token function">getCacheNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 基于classpath下的配置文件创建CacheManager实例</span>
<span class="token class-name">URL</span> url <span class="token operator">=</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">&quot;/anotherconfigurationname.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">CacheManager</span> manager <span class="token operator">=</span> <span class="token class-name">CacheManager</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 基于文件流得到配置文件，并创建CacheManager实例</span>
<span class="token class-name">InputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span>
<span class="token punctuation">(</span><span class="token string">&quot;src/config/ehcache.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
 <span class="token class-name">CacheManager</span> manager <span class="token operator">=</span> <span class="token class-name">CacheManager</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
 fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="添加缓存" tabindex="-1"><a class="header-anchor" href="#添加缓存" aria-hidden="true">#</a> 添加缓存</h3><p><strong>需要强调一点，<code>Cache</code>对象在用<code>addCache</code>方法添加到<code>CacheManager</code>之前，是无效的。</strong></p><p>使用 CacheManager 的 addCache 方法可以根据缓存名将 ehcache.xml 中声明的 cache 添加到容器中；它也可以直接将 Cache 对象添加到缓存容器中。</p><p><code>Cache</code>有多个构造函数，提供了不同方式去加载缓存的配置参数。</p><p>有时候，你可能需要使用 API 来动态的添加缓存，下面的例子就提供了这样的范例。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 除了可以使用xml文件中配置的缓存，你也可以使用API动态增删缓存</span>
<span class="token comment">// 添加缓存</span>
manager<span class="token punctuation">.</span><span class="token function">addCache</span><span class="token punctuation">(</span>cacheName<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使用默认配置添加缓存</span>
<span class="token class-name">CacheManager</span> singletonManager <span class="token operator">=</span> <span class="token class-name">CacheManager</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
singletonManager<span class="token punctuation">.</span><span class="token function">addCache</span><span class="token punctuation">(</span><span class="token string">&quot;testCache&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Cache</span> test <span class="token operator">=</span> singletonManager<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token string">&quot;testCache&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使用自定义配置添加缓存，注意缓存未添加进CacheManager之前并不可用</span>
<span class="token class-name">CacheManager</span> singletonManager <span class="token operator">=</span> <span class="token class-name">CacheManager</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Cache</span> memoryOnlyCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cache</span><span class="token punctuation">(</span><span class="token string">&quot;testCache&quot;</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
singletonManager<span class="token punctuation">.</span><span class="token function">addCache</span><span class="token punctuation">(</span>memoryOnlyCache<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Cache</span> test <span class="token operator">=</span> singletonManager<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token string">&quot;testCache&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使用特定的配置添加缓存</span>
<span class="token class-name">CacheManager</span> manager <span class="token operator">=</span> <span class="token class-name">CacheManager</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Cache</span> testCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cache</span><span class="token punctuation">(</span>
 <span class="token keyword">new</span> <span class="token class-name">CacheConfiguration</span><span class="token punctuation">(</span><span class="token string">&quot;testCache&quot;</span><span class="token punctuation">,</span> maxEntriesLocalHeap<span class="token punctuation">)</span>
 <span class="token punctuation">.</span><span class="token function">memoryStoreEvictionPolicy</span><span class="token punctuation">(</span><span class="token class-name">MemoryStoreEvictionPolicy</span><span class="token punctuation">.</span><span class="token constant">LFU</span><span class="token punctuation">)</span>
 <span class="token punctuation">.</span><span class="token function">eternal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
 <span class="token punctuation">.</span><span class="token function">timeToLiveSeconds</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span>
 <span class="token punctuation">.</span><span class="token function">timeToIdleSeconds</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>
 <span class="token punctuation">.</span><span class="token function">diskExpiryThreadIntervalSeconds</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
 <span class="token punctuation">.</span><span class="token function">persistence</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PersistenceConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">strategy</span><span class="token punctuation">(</span><span class="token class-name">Strategy</span><span class="token punctuation">.</span><span class="token constant">LOCALTEMPSWAP</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 manager<span class="token punctuation">.</span><span class="token function">addCache</span><span class="token punctuation">(</span>testCache<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="删除缓存" tabindex="-1"><a class="header-anchor" href="#删除缓存" aria-hidden="true">#</a> 删除缓存</h3><p>删除缓存比较简单，你只需要将指定的缓存名传入<code>removeCache</code>方法即可。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">CacheManager</span> singletonManager <span class="token operator">=</span> <span class="token class-name">CacheManager</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
singletonManager<span class="token punctuation">.</span><span class="token function">removeCache</span><span class="token punctuation">(</span><span class="token string">&quot;sampleCache1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="基本缓存操作" tabindex="-1"><a class="header-anchor" href="#基本缓存操作" aria-hidden="true">#</a> 基本缓存操作</h3><p>Cache 最重要的两个方法就是 put 和 get，分别用来添加 Element 和获取 Element。</p>`,34),d={href:"http://www.ehcache.org/generated/2.10.2/pdf/Ehcache_API_Developer_Guide.pdf",target:"_blank",rel:"noopener noreferrer"},m=e(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 测试：使用默认配置或使用指定配置来创建CacheManager
 *
 * <span class="token keyword">@author</span> Zhang Peng
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CacheOperationTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">CacheOperationTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 使用Ehcache默认配置(classpath下的ehcache.xml)获取单例的CacheManager实例
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">CacheManager</span> manager <span class="token operator">=</span> <span class="token class-name">CacheManager</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">&quot;src/test/resources/ehcache/ehcache.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 获得Cache的引用</span>
        <span class="token class-name">Cache</span> cache <span class="token operator">=</span> manager<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token string">&quot;userCache&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 将一个Element添加到Cache</span>
        cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Element</span><span class="token punctuation">(</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 获取Element，Element类支持序列化，所以下面两种方法都可以用</span>
        <span class="token class-name">Element</span> element1 <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取非序列化的值</span>
        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;key:{}, value:{}&quot;</span><span class="token punctuation">,</span> element1<span class="token punctuation">.</span><span class="token function">getObjectKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> element1<span class="token punctuation">.</span><span class="token function">getObjectValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取序列化的值</span>
        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;key:{}, value:{}&quot;</span><span class="token punctuation">,</span> element1<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> element1<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 更新Cache中的Element</span>
        cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Element</span><span class="token punctuation">(</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Element</span> element2 <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;key:{}, value:{}&quot;</span><span class="token punctuation">,</span> element2<span class="token punctuation">.</span><span class="token function">getObjectKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> element2<span class="token punctuation">.</span><span class="token function">getObjectValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 获取Cache的元素数</span>
        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;cache size:{}&quot;</span><span class="token punctuation">,</span> cache<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 获取MemoryStore的元素数</span>
        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;MemoryStoreSize:{}&quot;</span><span class="token punctuation">,</span> cache<span class="token punctuation">.</span><span class="token function">getMemoryStoreSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 获取DiskStore的元素数</span>
        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;DiskStoreSize:{}&quot;</span><span class="token punctuation">,</span> cache<span class="token punctuation">.</span><span class="token function">getDiskStoreSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 移除Element</span>
        cache<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;cache size:{}&quot;</span><span class="token punctuation">,</span> cache<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 关闭当前CacheManager对象</span>
        manager<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 关闭CacheManager单例实例</span>
        <span class="token class-name">CacheManager</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、ehcache-配置" tabindex="-1"><a class="header-anchor" href="#四、ehcache-配置" aria-hidden="true">#</a> 四、Ehcache 配置</h2>`,2),h=n("p",null,"Ehcache 支持通过 xml 文件和 API 两种方式进行配置。",-1),v={href:"http://www.ehcache.org/documentation/3.8/xml.html",target:"_blank",rel:"noopener noreferrer"},g=e(`<h3 id="xml-配置方式" tabindex="-1"><a class="header-anchor" href="#xml-配置方式" aria-hidden="true">#</a> xml 配置方式</h3><p>Ehcache 的<code>CacheManager</code>构造函数或工厂方法被调用时，会默认加载 classpath 下名为<em>ehcache.xml</em>的配置文件。如果加载失败，会加载 Ehcache jar 包中的<em>ehcache-failsafe.xml</em>文件，这个文件中含有简单的默认配置。<br><strong>ehcache.xml 配置参数说明：</strong></p><ul><li><strong>name</strong>：缓存名称。</li><li><strong>maxElementsInMemory</strong>：缓存最大个数。</li><li><strong>eternal</strong>：缓存中对象是否为永久的，如果是，超时设置将被忽略，对象从不过期。</li><li><strong>timeToIdleSeconds</strong>：置对象在失效前的允许闲置时间（单位：秒）。仅当 eternal=false 对象不是永久有效时使用，可选属性，默认值是 0，也就是可闲置时间无穷大。</li><li><strong>timeToLiveSeconds</strong>：缓存数据的生存时间（TTL），也就是一个元素从构建到消亡的最大时间间隔值，这只能在元素不是永久驻留时有效，如果该值是 0 就意味着元素可以停顿无穷长的时间。</li><li><strong>maxEntriesLocalDisk</strong>：当内存中对象数量达到 maxElementsInMemory 时，Ehcache 将会对象写到磁盘中。</li><li><strong>overflowToDisk</strong>：内存不足时，是否启用磁盘缓存。</li><li><strong>diskSpoolBufferSizeMB</strong>：这个参数设置 DiskStore（磁盘缓存）的缓存区大小。默认是 30MB。每个 Cache 都应该有自己的一个缓冲区。</li><li><strong>maxElementsOnDisk</strong>：硬盘最大缓存个数。</li><li><strong>diskPersistent</strong>：是否在 VM 重启时存储硬盘的缓存数据。默认值是 false。</li><li><strong>diskExpiryThreadIntervalSeconds</strong>：磁盘失效线程运行时间间隔，默认是 120 秒。</li><li><strong>memoryStoreEvictionPolicy</strong>：当达到 maxElementsInMemory 限制时，Ehcache 将会根据指定的策略去清理内存。默认策略是 LRU（最近最少使用）。你可以设置为 FIFO（先进先出）或是 LFU（较少使用）。</li><li><strong>clearOnFlush</strong>：内存数量最大时是否清除。</li></ul><h3 id="api-配置方式" tabindex="-1"><a class="header-anchor" href="#api-配置方式" aria-hidden="true">#</a> API 配置方式</h3><p>xml 配置的参数也可以直接通过编程方式来动态的进行配置（dynamicConfig 没有设为 false）。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Cache</span> cache <span class="token operator">=</span> manager<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token string">&quot;sampleCache&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">CacheConfiguration</span> config <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">getCacheConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
config<span class="token punctuation">.</span><span class="token function">setTimeToIdleSeconds</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
config<span class="token punctuation">.</span><span class="token function">setTimeToLiveSeconds</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
config<span class="token punctuation">.</span><span class="token function">setmaxEntriesLocalHeap</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
config<span class="token punctuation">.</span><span class="token function">setmaxEntriesLocalDisk</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以通过<code>disableDynamicFeatures()</code>方式关闭动态配置开关。配置以后你将无法再以编程方式配置参数。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Cache</span> cache <span class="token operator">=</span> manager<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token string">&quot;sampleCache&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cache<span class="token punctuation">.</span><span class="token function">disableDynamicFeatures</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五、spring-集成-ehcache" tabindex="-1"><a class="header-anchor" href="#五、spring-集成-ehcache" aria-hidden="true">#</a> 五、Spring 集成 Ehcache</h2><p>Spring3.1 开始添加了对缓存的支持。和事务功能的支持方式类似，缓存抽象允许底层使用不同的缓存解决方案来进行整合。</p><p>Spring4.1 开始支持 JSR-107 注解。</p><blockquote><p><strong>注：我本人使用的 Spring 版本为 4.1.4.RELEASE，目前 Spring 版本仅支持 Ehcache2.5 以上版本，但不支持 Ehcache3。</strong></p></blockquote><h3 id="绑定-ehcache" tabindex="-1"><a class="header-anchor" href="#绑定-ehcache" aria-hidden="true">#</a> 绑定 Ehcache</h3><p><code>org.springframework.cache.ehcache.EhCacheManagerFactoryBean</code>这个类的作用是加载 Ehcache 配置文件。<br><code>org.springframework.cache.ehcache.EhCacheCacheManager</code>这个类的作用是支持 net.sf.ehcache.CacheManager。</p><p><em>spring-ehcache.xml</em>的配置</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>cache</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/cache<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/cache
        http://www.springframework.org/schema/cache/spring-cache-3.2.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">&gt;</span></span>ehcache缓存配置管理文件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ehcache<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.cache.ehcache.EhCacheManagerFactoryBean<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>configLocation<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>classpath:ehcache/ehcache.xml<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cacheManager<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.cache.ehcache.EhCacheCacheManager<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cacheManager<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ehcache<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

  <span class="token comment">&lt;!-- 启用缓存注解开关 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">cache:</span>annotation-driven</span> <span class="token attr-name">cache-manager</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cacheManager<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用-spring-的缓存注解" tabindex="-1"><a class="header-anchor" href="#使用-spring-的缓存注解" aria-hidden="true">#</a> 使用 Spring 的缓存注解</h3><h4 id="开启注解" tabindex="-1"><a class="header-anchor" href="#开启注解" aria-hidden="true">#</a> 开启注解</h4><p>Spring 为缓存功能提供了注解功能，但是你必须启动注解。<br> 你有两个选择：<br> (1) 在 xml 中声明<br> 像上一节 spring-ehcache.xml 中的做法一样，使用<code>&lt;cache:annotation-driven/&gt;</code></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">cache:</span>annotation-driven</span> <span class="token attr-name">cache-manager</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cacheManager<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>(2) 使用标记注解<br> 你也可以通过对一个类进行注解修饰的方式在这个类中使用缓存注解。<br> 范例如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableCaching</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="注解基本使用方法" tabindex="-1"><a class="header-anchor" href="#注解基本使用方法" aria-hidden="true">#</a> 注解基本使用方法</h3><p>Spring 对缓存的支持类似于对事务的支持。<br> 首先使用注解标记方法，相当于定义了切点，然后使用 Aop 技术在这个方法的调用前、调用后获取方法的入参和返回值，进而实现了缓存的逻辑。<br> 下面三个注解都是方法级别：</p><h4 id="cacheable" tabindex="-1"><a class="header-anchor" href="#cacheable" aria-hidden="true">#</a> @Cacheable</h4><p>表明所修饰的方法是可以缓存的：当第一次调用这个方法时，它的结果会被缓存下来，在缓存的有效时间内，以后访问这个方法都直接返回缓存结果，不再执行方法中的代码段。<br> 这个注解可以用<code>condition</code>属性来设置条件，如果不满足条件，就不使用缓存能力，直接执行方法。<br> 可以使用<code>key</code>属性来指定 key 的生成规则。</p><h4 id="cacheput" tabindex="-1"><a class="header-anchor" href="#cacheput" aria-hidden="true">#</a> @CachePut</h4><p>与<code>@Cacheable</code>不同，<code>@CachePut</code>不仅会缓存方法的结果，还会执行方法的代码段。<br> 它支持的属性和用法都与<code>@Cacheable</code>一致。</p><h4 id="cacheevict" tabindex="-1"><a class="header-anchor" href="#cacheevict" aria-hidden="true">#</a> @CacheEvict</h4><p>与<code>@Cacheable</code>功能相反，<code>@CacheEvict</code>表明所修饰的方法是用来删除失效或无用的缓存数据。<br> 下面是<code>@Cacheable</code>、<code>@CacheEvict</code>和<code>@CachePut</code>基本使用方法的一个集中展示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>
    <span class="token comment">// @Cacheable可以设置多个缓存，形式如：@Cacheable({&quot;books&quot;, &quot;isbns&quot;})</span>
    <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token string">&quot;#user.id&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">findUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">findUserInDB</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;users&quot;</span><span class="token punctuation">,</span> condition <span class="token operator">=</span> <span class="token string">&quot;#user.getId() &lt;= 2&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">findUserInLimit</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">findUserInDB</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@CachePut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;users&quot;</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">&quot;#user.getId()&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">updateUserInDB</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">removeUserInDB</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;users&quot;</span><span class="token punctuation">,</span> allEntries <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">removeAllInDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="caching" tabindex="-1"><a class="header-anchor" href="#caching" aria-hidden="true">#</a> @Caching</h4><p>如果需要使用同一个缓存注解（<code>@Cacheable</code>、<code>@CacheEvict</code>或<code>@CachePut</code>）多次修饰一个方法，就需要用到<code>@Caching</code>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Caching</span><span class="token punctuation">(</span>evict <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span><span class="token string">&quot;primary&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span>cacheNames<span class="token operator">=</span><span class="token string">&quot;secondary&quot;</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token string">&quot;#p0&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Book</span> <span class="token function">importBooks</span><span class="token punctuation">(</span><span class="token class-name">String</span> deposit<span class="token punctuation">,</span> <span class="token class-name">Date</span> date<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="cacheconfig" tabindex="-1"><a class="header-anchor" href="#cacheconfig" aria-hidden="true">#</a> @CacheConfig</h4><p>与前面的缓存注解不同，这是一个类级别的注解。<br> 如果类的所有操作都是缓存操作，你可以使用<code>@CacheConfig</code>来指定类，省去一些配置。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@CacheConfig</span><span class="token punctuation">(</span><span class="token string">&quot;books&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookRepositoryImpl</span> <span class="token keyword">implements</span> <span class="token class-name">BookRepository</span> <span class="token punctuation">{</span>
 <span class="token annotation punctuation">@Cacheable</span>
 <span class="token keyword">public</span> <span class="token class-name">Book</span> <span class="token function">findBook</span><span class="token punctuation">(</span><span class="token class-name">ISBN</span> isbn<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,38),b=n("strong",null,"官方",-1),f={href:"http://www.ehcache.org/",target:"_blank",rel:"noopener noreferrer"},q={href:"https://github.com/ehcache/ehcache3",target:"_blank",rel:"noopener noreferrer"},C=n("strong",null,"文章",-1),w={href:"https://yq.aliyun.com/articles/72885?utm_campaign=wenzhang&utm_medium=article&utm_source=QQ-qun&2017331&utm_content=m_15513",target:"_blank",rel:"noopener noreferrer"},x={href:"http://raychase.iteye.com/blog/1545906",target:"_blank",rel:"noopener noreferrer"},y={href:"http://www.ibm.com/developerworks/cn/opensource/os-cn-spring-cache/",target:"_blank",rel:"noopener noreferrer"},E={href:"http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/",target:"_blank",rel:"noopener noreferrer"};function M(S,I){const s=c("ExternalLinkIcon");return o(),l("div",null,[u,n("p",null,[a("如果你的项目不使用 maven 管理，请在 "),n("a",r,[a("Ehcache 官网下载地址"),t(s)]),a(" 下载 jar 包。")]),k,n("p",null,[a("Cache 还提供了一系列的 get、set 方法来设置或获取缓存参数，这里不一一列举，更多 API 操作可参考"),n("a",d,[a("官方 API 开发手册"),t(s)]),a("。")]),m,n("blockquote",null,[h,n("p",null,[a("详情参考："),n("a",v,[a("Ehcache 官方 XML 配置手册"),t(s)])])]),g,n("ul",null,[n("li",null,[b,n("ul",null,[n("li",null,[n("a",f,[a("Ehcache 官网"),t(s)])]),n("li",null,[n("a",q,[a("Ehcache Github"),t(s)])])])]),n("li",null,[C,n("ul",null,[n("li",null,[n("a",w,[a("Ehcache 优缺点以及分布式详解"),t(s)])]),n("li",null,[n("a",x,[a("Ehcache 详细解读"),t(s)])]),n("li",null,[n("a",y,[a("注释驱动的 Spring cache 缓存介绍"),t(s)])]),n("li",null,[n("a",E,[a("Spring 官方文档第 36 章缓存抽象"),t(s)])])])])])])}const L=p(i,[["render",M],["__file","index.html.vue"]]);export{L as default};
