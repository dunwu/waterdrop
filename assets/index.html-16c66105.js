import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as d,o,c as n,a as i,b as e,d as r,f as s,e as a}from"./app-3e0593f4.js";const h={},c=i("h1",{id:"《极客时间教程-mongodb-高手课》笔记二",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#《极客时间教程-mongodb-高手课》笔记二","aria-hidden":"true"},"#"),e(" 《极客时间教程 - MongoDB 高手课》笔记二")],-1),p={href:"https://time.geekbang.org/course/intro/100040001",target:"_blank",rel:"noopener noreferrer"},u=a('<h2 id="第三章-分片集群与高级运维之道" tabindex="-1"><a class="header-anchor" href="#第三章-分片集群与高级运维之道" aria-hidden="true">#</a> 第三章：分片集群与高级运维之道</h2><h3 id="分片集群机制及原理" tabindex="-1"><a class="header-anchor" href="#分片集群机制及原理" aria-hidden="true">#</a> 分片集群机制及原理</h3><h4 id="mongodb-常见部署架构" tabindex="-1"><a class="header-anchor" href="#mongodb-常见部署架构" aria-hidden="true">#</a> MongoDB 常见部署架构</h4><p>TODO: 补图</p><p>为什么要使用分片集群？</p><p>——分而治之</p><p>分片如何解决？</p><p>TODO：补图</p><p>分片组件：</p><ul><li>路由节点（mongos） - 提供集群单一入口转发应用端请求选择合适数据节点进行读写合并多个数据节点的返回。无状态，建议至少 2 个。</li><li>配置节点（config） - 提供集群元数据存储分片数据分布的映射。</li><li>数据节点（shard） - 以复制集为单位水平扩展，最大 1024 分片。分片之间数据不重复所有分片在一起才可完整工作</li></ul><p>分片特点：</p><ul><li>应用全透明，无特殊处理</li><li>数据自动均衡</li><li>动态扩容，无须下线</li><li>提供三种分片方式 <ul><li>基于范围</li><li>优点：范围查询性能好</li><li>缺点：数据分布不均；容易出现热点问题</li><li>基于 Hash</li><li>优点：数据分布均匀</li><li>缺点：范围查询效率低</li><li>基于 zone / tag</li></ul></li></ul><h3 id="分片集群设计" tabindex="-1"><a class="header-anchor" href="#分片集群设计" aria-hidden="true">#</a> 分片集群设计</h3><p>分片的基本标准：</p><ul><li>关于数据：数据量不超过 3TB，尽可能保持在 2TB 一个片；</li><li>关于索引：常用索引必须容纳进内存；</li></ul><p>按照以上标准初步确定分片后，还需要考虑业务压力，随着压力增大，CPU、RAM、磁盘中的任何一项出现瓶颈时，都可以通过添加更多分片来解决。</p><p>合理的架构–需要多少个分片</p><ul><li>A = 所需存储总量 / 单服务器可挂载容量。如：8TB / 2TB = 4</li><li>B = 工作集大小 / 单服务器内存容量。如：400GB / （256G * 0.6）= 3</li><li>C = 并发量总数 / （单服务器并发量 * 0.7)。如：30000 / (9000*0.7) = 6</li><li>分片数量= max(A, B, C) = 6</li></ul><p>关键概念</p><ul><li>片键 shard key：文档中的一个字段</li><li>文档 doc ：包含 shard key 的一行数据</li><li>块 Chunk ：包含 n 个文档</li><li>分片 Shard：包含 n 个 chunk</li><li>集群 Cluster：包含 n 个分片</li></ul><p>选择合适片键</p><ul><li>取值基数（Cardinality） - 取值基数要大，因为备选值有限，不利于水平扩展</li><li>取值分布 - 应尽可能均匀，以避免热点问题</li><li>分散写，集中读</li><li>被尽可能多的业务场景用到</li><li>避免单调递增或递减的片键</li></ul><p>足够的资源</p><p>mongos 与 config 通常消耗很少的资源，可以选择低规格虚拟机；</p><p>资源的重点在于 shard 服务器：</p><ul><li>需要足以容纳热数据索引的内存；</li><li>正确创建索引后 CPU 通常不会成为瓶颈，除非涉及非常多的计算；</li><li>磁盘尽量选用 SSD；</li></ul><h3 id="实验-分片集群搭建及扩容-略" tabindex="-1"><a class="header-anchor" href="#实验-分片集群搭建及扩容-略" aria-hidden="true">#</a> 实验：分片集群搭建及扩容（略）</h3><h3 id="mongodb-监控最佳实践" tabindex="-1"><a class="header-anchor" href="#mongodb-监控最佳实践" aria-hidden="true">#</a> MongoDB 监控最佳实践</h3><p>常用的监控工具及手段</p><ul><li>MongoDB Ops Manager</li><li>Percona</li><li>通用监控平台</li><li>程序脚本</li></ul><p>监控信息的来源：</p><ul><li>db.serverStatus()（主要）</li><li>db.isMaster()（次要）</li><li>mongostats 命令行工具（只有部分信息）</li></ul><p>注意：db.serverStatus() 包含的监控信息是从上次开机到现在为止的累计数据，因此不能简单使用。</p><p>serverStatus() 主要信息</p><ul><li>connections: 关于连接数的信息；</li><li>locks: 关于 MongoDB 使用的锁情况；</li><li>network: 网络使用情况统计；</li><li>opcounters: CRUD 的执行次数统计；</li><li>repl: 复制集配置信息；</li><li>wiredTiger: 包含大量 WirdTiger 执行情况的信息： <ul><li>block-manager: WT 数据块的读写情况；</li><li>session: session 使用数量；</li><li>concurrentTransactions: Ticket 使用情况；</li></ul></li><li>mem: 内存使用情况；</li><li>metrics: 一系列性能指标统计信息；</li></ul><p>监控报警的考量</p><ul><li>具备一定的容错机制以减少误报的发生；</li><li>总结应用各指标峰值；</li><li>适时调整报警阈值；</li><li>留出足够的处理时间；</li></ul><p>建议监控指标</p><table><thead><tr><th>指标</th><th>意义</th><th>获取</th></tr></thead><tbody><tr><td>opcounters（操作计数器）</td><td>查询、更新、插入、删除、getmore 和其他命令的的数量。</td><td><code>db.serverStatus().opcounters</code></td></tr><tr><td>tickets（令牌）</td><td>对 WiredTiger 存储引擎的读/写令牌数量。令牌数量表示了可以进入存储引擎的并发操作数量。</td><td><code>db.serverStatus().wiredTiger.concurrentTransactions</code></td></tr><tr><td>replication lag（复制延迟）</td><td>这个指标代表了写操作到达从结点所需要的最小时间。过高的 replication lag 会减小从结点的价值并且不利于配置了写关</td><td><code>db.adminCommand({&#39;replSetGetStatus&#39;: 1})</code></td></tr><tr><td>oplog window（复制时间窗）</td><td>这个指标代表 oplog 可以容纳多长时间的写操作。它表示了一个从结点可以离线多长时间仍能够追上主节点。通常建议该值应大于 24 小时为佳。</td><td><code>db.oplog.rs.find().sort({$natural: -1}).limit(1).next().ts -db.oplog.rs.find().sort({$natural: 1}).limit(1).next().ts</code></td></tr><tr><td>connections（连接数）</td><td>连接数应作为监控指标的一部分，因为每个连接都将消耗资源。应该计算低峰/正常/高峰时间的连接数，并制定合理的报警阈值范围。</td><td><code>db.serverStatus().connections</code></td></tr><tr><td>Query targeting（查询专注度）</td><td>索引键/文档扫描数量比返回的文档数量，按秒平均。如果该值比较高表示查询系需要进行很多低效的扫描来满足查询。这个情况通常代表了索引不当或缺少索引来支持查询。</td><td><code>var status = db.serverStatus()status.metrics.queryExecutor.scanned / status.metrics.document.returnedstatus.metrics.queryExecutor.scannedObjects / status.metrics.document.returned</code></td></tr><tr><td>Scan and Order（扫描和排序）</td><td>每秒内内存排序操作所占的平均比例。内存排序可能会十分昂贵，因为它们通常要求缓冲大量数据。如果有适当索引的情况下，内存排序是可以避免的。</td><td><code>var status = db.serverStatus()status.metrics.operation.scanAndOrder / status.opcounters.query</code></td></tr><tr><td>节点状态</td><td>每个节点的运行状态。如果节点状态不是 PRIMARY、SECONDARY、ARBITER 中的一个，或无法执行上述命令则报警</td><td><code>db.runCommand(&quot;isMaster&quot;)</code></td></tr><tr><td>dataSize（数据大小）</td><td>整个实例数据总量（压缩前）</td><td>每个 DB 执行 db.stats()；</td></tr><tr><td>StorageSize（磁盘空间大小）</td><td>已使用的磁盘空间占总空间的百分比。</td><td></td></tr></tbody></table><h3 id="mongodb-备份与恢复" tabindex="-1"><a class="header-anchor" href="#mongodb-备份与恢复" aria-hidden="true">#</a> MongoDB 备份与恢复</h3><p>MongoDB 的备份机制分为：</p><ul><li>延迟节点备份</li><li>全量备份 + Oplog 增量</li></ul><p>最常见的全量备份方式包括：</p><ul><li>mongodump；</li><li>复制数据文件；</li><li>文件系统快照；</li></ul><h4 id="方案一-延迟节点备份" tabindex="-1"><a class="header-anchor" href="#方案一-延迟节点备份" aria-hidden="true">#</a> 方案一：延迟节点备份</h4><p>安全范围内的任意时间点状态 = 延迟从节点当前状态 + 定量重放 oplog</p><p>主节点的 oplog 时间窗 t 应满足：t &gt;= 延迟时间 + 48 小时</p><h4 id="方案二-全量备份加-oplog" tabindex="-1"><a class="header-anchor" href="#方案二-全量备份加-oplog" aria-hidden="true">#</a> 方案二：全量备份加 oplog</h4>',48),g={href:"http://oplog.rs",target:"_blank",rel:"noopener noreferrer"},b={href:"http://oplog.rs",target:"_blank",rel:"noopener noreferrer"},m=i("li",null,"只要有覆盖整个时间段的 oplog，就可以结合全量备份得到任意时间点的备份。",-1),f=a('<p>全量备份（mongodump、复制数据文件、文件系统快照） + oplog = 任意时间点备份恢复 (PIT)</p><p>复制文件全量备份注意事项</p><ul><li>必须先关闭节点才能复制，否则复制到的文件无效；</li><li>也可以选择 db.fsyncLock() 锁定节点，但完成后不要忘记 db.fsyncUnlock() 解锁；</li><li>可以且应该在从节点上完成；</li><li>该方法实际上会暂时宕机一个从节点，所以整个过程中应注意投票节点总数。</li></ul><p>全量备份加 oplog 注意事项–文件系统快照</p><ul><li>MongoDB 支持使用文件系统快照直接获取数据文件在某一时刻的镜像；</li><li>快照过程中可以不用停机；</li><li>数据文件和 Journal 必须在同一个卷上；</li><li>快照完成后请尽快复制文件并删除快照；</li></ul><p>Mongodump 全量备份注意事项</p><ul><li>使用 mongodump 备份最灵活，但速度上也是最慢的；</li><li>mongodump 出来的数据不能表示某个个时间点，只是某个时间段</li></ul><h3 id="备份与恢复操作-略" tabindex="-1"><a class="header-anchor" href="#备份与恢复操作-略" aria-hidden="true">#</a> 备份与恢复操作（略）</h3><h3 id="mongodb-安全架构-略" tabindex="-1"><a class="header-anchor" href="#mongodb-安全架构-略" aria-hidden="true">#</a> MongoDB 安全架构（略）</h3><h3 id="mongodb-安全加固实践-略" tabindex="-1"><a class="header-anchor" href="#mongodb-安全加固实践-略" aria-hidden="true">#</a> MongoDB 安全加固实践（略）</h3><h3 id="mongodb-索引机制-一" tabindex="-1"><a class="header-anchor" href="#mongodb-索引机制-一" aria-hidden="true">#</a> MongoDB 索引机制（一）</h3><p>MongoDB 索引数据结构为 B-树。</p><p>B-树：基于 B 树，但是子节点数量可以超过 2 个。</p><p>MongoDB 索引类型</p><ul><li>单键索引</li><li>组合索引</li><li>多值索引</li><li>地理位置索引</li><li>全文索引</li><li>TTL 索引</li><li>部分索引</li><li>哈希索引</li></ul><p>组合索引的最佳方式：ESR 原则</p><ul><li>精确（Equal）匹配的字段放最前面</li><li>排序（Sort）条件放中间</li><li>范围（Range）匹配的字段放最后面</li></ul><h3 id="mongodb-索引机制-二" tabindex="-1"><a class="header-anchor" href="#mongodb-索引机制-二" aria-hidden="true">#</a> MongoDB 索引机制（二）</h3><h3 id="mongodb-读写性能机制" tabindex="-1"><a class="header-anchor" href="#mongodb-读写性能机制" aria-hidden="true">#</a> MongoDB 读写性能机制</h3><p>客户端请求流程图</p><p>TODO：补图</p><h4 id="应用端-选择节点" tabindex="-1"><a class="header-anchor" href="#应用端-选择节点" aria-hidden="true">#</a> 应用端-选择节点</h4><p>对于复制集读操作，选择哪个节点是由 readPreference 决定的：</p><ul><li>primary/primaryPreferred</li><li>secondary/secondaryPreferred</li><li>nearest</li></ul><p>如果不希望一个远距离节点被选择，应做到以下之一</p><ul><li>将它设置为隐藏节点；</li><li>通过标签（Tag）控制可选的节点；</li><li>使用 nearest 方式；</li></ul><h4 id="数据库端-执行请求-读" tabindex="-1"><a class="header-anchor" href="#数据库端-执行请求-读" aria-hidden="true">#</a> 数据库端-执行请求（读）</h4><p>不能命中索引的搜索和内存排序是导致性能问题的最主要原因</p><h4 id="数据库端-执行请求-写" tabindex="-1"><a class="header-anchor" href="#数据库端-执行请求-写" aria-hidden="true">#</a> 数据库端-执行请求（写）</h4><h4 id="数据库端-合并结果" tabindex="-1"><a class="header-anchor" href="#数据库端-合并结果" aria-hidden="true">#</a> 数据库端-合并结果</h4><ul><li>如果顺序不重要则不要排序</li><li>尽可能使用带片键的查询条件以减少参与查询的分片数</li></ul><h3 id="性能诊断工具" tabindex="-1"><a class="header-anchor" href="#性能诊断工具" aria-hidden="true">#</a> 性能诊断工具</h3><p>mongostat: 用于了解 MongoDB 运行状态的工具</p><p>mongotop: 用于了解集合压力状态的工具</p><p>mongod 日志：日志中会记录执行超过 100ms 的查询及其执行计划</p><h3 id="高级集群设计-两地三中心" tabindex="-1"><a class="header-anchor" href="#高级集群设计-两地三中心" aria-hidden="true">#</a> 高级集群设计：两地三中心</h3><h4 id="容灾级别" tabindex="-1"><a class="header-anchor" href="#容灾级别" aria-hidden="true">#</a> 容灾级别</h4><ul><li><strong>无备源中心</strong> - 没有灾难恢复能力，只在本地进行数据备份。</li><li><strong>本地备份+异地保存</strong> - 本地将关键数据备份，然后送到异地保存。灾难发生后，按预定数据恢复程序恢复系统和数据。</li><li><strong>双中心主备模式</strong> - 在异地建立一个热备份点，通过网络进行数据备份。当出现灾难时，备份站点接替主站点的业务，维护业务连续性。</li><li><strong>双中心双活</strong> - 在相隔较远的地方分别建立两个数据中心，进行相互数据备份。当某个数据中心发生灾难时，另一个数据中心接替其工作任务。</li><li><strong>双中心双活 +异地热备 =两地三中心</strong> - 在同城分别建立两个数据中心，进行相互数据备份。当该城市的 2 个中心同时不可用（地震/大面积停电/网络等），快速切换到异地</li></ul><p>网络层解决方案</p><p>TODO：补图</p><p>应用层解决方案</p><ul><li>负载均衡、虚拟 IP</li><li>分布式 Session</li><li>使用同一套数据</li></ul><p>数据跨中心同步</p><ul><li>DBMS 跨机房基于日志同步</li><li>文件系统跨机房基于存储镜像同步</li></ul><p>多数据中心要点：</p><ul><li>正常运行状态 - 集群内一个主节点接受写，其他节点只读。</li><li>主节点故障 - 主数据中心内自动切主切换时间 5-10 秒</li><li>主数据中心对外网络故障或者整个数据中心不可用，主数据中心主节点自动降级。从节点升级为主节点选举时间 5-30 秒。</li><li>双中心双活，分流模式 -需要跨中心写数据，同城双中心需要低延迟专线。</li><li>节点数量建议要 5 个，2+2+1 模式</li><li>主数据中心的两个节点要设置高一点的优先级，减少跨中心换主节点</li><li>同城双中心之间的网络要保证低延迟和频宽，满足 writeConcern: Majority 的双中心写需求</li><li>使用 Retryable Writes and Retryable Reads 来保证零下线时间</li><li>用户需要自行处理好业务层的双中心切换</li></ul><h3 id="实验-搭建两地三中心集群-略" tabindex="-1"><a class="header-anchor" href="#实验-搭建两地三中心集群-略" aria-hidden="true">#</a> 实验：搭建两地三中心集群（略）</h3><h3 id="高级集群设计-全球多写-略" tabindex="-1"><a class="header-anchor" href="#高级集群设计-全球多写-略" aria-hidden="true">#</a> 高级集群设计：全球多写（略）</h3><h3 id="mongodb-上线及升级-略" tabindex="-1"><a class="header-anchor" href="#mongodb-上线及升级-略" aria-hidden="true">#</a> MongoDB 上线及升级（略）</h3><h2 id="第四章-企业架构师进阶之法-略" tabindex="-1"><a class="header-anchor" href="#第四章-企业架构师进阶之法-略" aria-hidden="true">#</a> 第四章：企业架构师进阶之法（略）</h2><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>',51),x={href:"https://time.geekbang.org/course/intro/100040001",target:"_blank",rel:"noopener noreferrer"};function B(_,D){const l=d("ExternalLinkIcon");return o(),n("div",null,[c,i("p",null,[i("a",p,[e("极客时间教程 - MongoDB 高手课"),r(l)]),e(" 学习笔记")]),s(" more "),u,i("ul",null,[i("li",null,[e("最近的 oplog 已经在 "),i("a",g,[e("oplog.rs"),r(l)]),e(" 集合中，因此可以在定期从集合中导出便得到了 oplog；")]),i("li",null,[e("如果主节点上的 "),i("a",b,[e("oplog.rs"),r(l)]),e(" 集合足够大，全量备份足够密集，自然也可以不用备份 oplog；")]),m]),f,i("ul",null,[i("li",null,[i("a",x,[e("极客时间教程 - MongoDB 高手课"),r(l)])])])])}const T=t(h,[["render",B],["__file","index.html.vue"]]);export{T as default};
