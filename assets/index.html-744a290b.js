import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as i,c as o,a as n,b as a,d as e,e as c}from"./app-e7b0ac47.js";const l={},u={href:"https://sourcemaking.com/refactoring/smells/dispensables",target:"_blank",rel:"noopener noreferrer"},r=n("p",null,[n("strong",null,"非必要的(Dispensables)这组坏味道意味着：这样的代码可有可无，它的存在反而影响整体代码的整洁和可读性。")],-1),d=c(`<h2 id="冗余类" tabindex="-1"><a class="header-anchor" href="#冗余类" aria-hidden="true">#</a> 冗余类</h2><blockquote><p>冗余类(Lazy Class)</p><p>理解和维护总是费时费力的。如果一个类不值得你花费精力，它就应该被删除。</p></blockquote><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/lazy-class-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="问题原因" tabindex="-1"><a class="header-anchor" href="#问题原因" aria-hidden="true">#</a> 问题原因</h3><p>也许一个类的初始设计是一个功能完全的类，然而随着代码的变迁，变得没什么用了。<br> 又或者类起初的设计是为了支持未来的功能扩展，然而却一直未派上用场。</p><h3 id="解决方法" tabindex="-1"><a class="header-anchor" href="#解决方法" aria-hidden="true">#</a> 解决方法</h3><ul><li>没什么用的类可以运用 <code>将类内联化(Inline Class)</code> 来干掉。</li></ul><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/lazy-class-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>如果子类用处不大，试试 <code>折叠继承体系(Collapse Hierarchy)</code> 。</li></ul><h3 id="收益" tabindex="-1"><a class="header-anchor" href="#收益" aria-hidden="true">#</a> 收益</h3><ul><li>减少代码量</li><li>易于维护</li></ul><h3 id="何时忽略" tabindex="-1"><a class="header-anchor" href="#何时忽略" aria-hidden="true">#</a> 何时忽略</h3><ul><li>有时，创建冗余类是为了描述未来开发的意图。在这种情况下，尝试在代码中保持清晰和简单之间的平衡。</li></ul><h3 id="重构方法说明" tabindex="-1"><a class="header-anchor" href="#重构方法说明" aria-hidden="true">#</a> 重构方法说明</h3><h4 id="将类内联化-inline-class" tabindex="-1"><a class="header-anchor" href="#将类内联化-inline-class" aria-hidden="true">#</a> 将类内联化(Inline Class)</h4><p><strong>问题</strong></p><p>某个类没有做太多事情。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/inline-class-before.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>解决</strong></p><p>将这个类的所有特性搬移到另一个类中，然后移除原类。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/inline-class-after.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="折叠继承体系-collapse-hierarchy" tabindex="-1"><a class="header-anchor" href="#折叠继承体系-collapse-hierarchy" aria-hidden="true">#</a> 折叠继承体系(Collapse Hierarchy)</h4><p><strong>问题</strong></p><p>超类和子类之间无太大区别。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/collapse-hierarchy-before.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>解决</strong></p><p>将它们合为一体。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/collapse-hierarchy-after.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="夸夸其谈未来性" tabindex="-1"><a class="header-anchor" href="#夸夸其谈未来性" aria-hidden="true">#</a> 夸夸其谈未来性</h2><blockquote><p>夸夸其谈未来性(Speculative Generality)</p><p>存在未被使用的类、函数、字段或参数。</p></blockquote><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/speculative-generality-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="问题原因-1" tabindex="-1"><a class="header-anchor" href="#问题原因-1" aria-hidden="true">#</a> 问题原因</h3><p>有时，代码仅仅为了支持未来的特性而产生，然而却一直未实现。结果，代码变得难以理解和维护。</p><h3 id="解决方法-1" tabindex="-1"><a class="header-anchor" href="#解决方法-1" aria-hidden="true">#</a> 解决方法</h3><ul><li>如果你的某个抽象类其实没有太大作用，请运用 <code>折叠继承体系(Collapse Hierarch)</code> 。</li></ul><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/speculative-generality-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>不必要的委托可运用 <code>将类内联化(Inline Class)</code> 消除。</li><li>无用的函数可运用 <code>内联函数(Inline Method)</code> 消除。</li><li>函数中有无用的参数应该运用 <code>移除参数(Remove Parameter)</code> 消除。</li><li>无用字段可以直接删除。</li></ul><h3 id="收益-1" tabindex="-1"><a class="header-anchor" href="#收益-1" aria-hidden="true">#</a> 收益</h3><ul><li>减少代码量。</li><li>更易维护。</li></ul><h3 id="何时忽略-1" tabindex="-1"><a class="header-anchor" href="#何时忽略-1" aria-hidden="true">#</a> 何时忽略</h3><ul><li>如果你在一个框架上工作，创建框架本身没有使用的功能是非常合理的，只要框架的用户需要这个功能。</li><li>删除元素之前，请确保它们不在单元测试中使用。如果测试需要从类中获取某些内部信息或执行特殊的测试相关操作，就会发生这种情况。</li></ul><h3 id="重构方法说明-1" tabindex="-1"><a class="header-anchor" href="#重构方法说明-1" aria-hidden="true">#</a> 重构方法说明</h3><h4 id="折叠继承体系-collapse-hierarchy-1" tabindex="-1"><a class="header-anchor" href="#折叠继承体系-collapse-hierarchy-1" aria-hidden="true">#</a> 折叠继承体系(Collapse Hierarchy)</h4><p><strong>问题</strong></p><p>超类和子类之间无太大区别。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/collapse-hierarchy-before.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>解决</strong></p><p>将它们合为一体。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/collapse-hierarchy-after.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="将类内联化-inline-class-1" tabindex="-1"><a class="header-anchor" href="#将类内联化-inline-class-1" aria-hidden="true">#</a> 将类内联化(Inline Class)</h4><p><strong>问题</strong></p><p>某个类没有做太多事情。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/inline-class-before.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>解决</strong></p><p>将这个类的所有特性搬移到另一个类中，然后移除原类。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/inline-class-after.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="内联函数-inline-method" tabindex="-1"><a class="header-anchor" href="#内联函数-inline-method" aria-hidden="true">#</a> 内联函数(Inline Method)</h4><p><strong>问题</strong></p><p>一个函数的本体比函数名更清楚易懂。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">PizzaDelivery</span> <span class="token punctuation">{</span>
  <span class="token comment">//...</span>
  <span class="token keyword">int</span> <span class="token function">getRating</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">moreThanFiveLateDeliveries</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">2</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">boolean</span> <span class="token function">moreThanFiveLateDeliveries</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> numberOfLateDeliveries <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解决</strong></p><p>在函数调用点插入函数本体，然后移除该函数。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">PizzaDelivery</span> <span class="token punctuation">{</span>
  <span class="token comment">//...</span>
  <span class="token keyword">int</span> <span class="token function">getRating</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> numberOfLateDeliveries <span class="token operator">&gt;</span> <span class="token number">5</span> <span class="token operator">?</span> <span class="token number">2</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="移除参数-remove-parameter" tabindex="-1"><a class="header-anchor" href="#移除参数-remove-parameter" aria-hidden="true">#</a> 移除参数(Remove Parameter)</h4><p><strong>问题</strong></p><p>函数本体不再需要某个参数。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/remove-parameter-before.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>解决</strong></p><p>将该参数去除。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/remove-parameter-after.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="纯稚的数据类" tabindex="-1"><a class="header-anchor" href="#纯稚的数据类" aria-hidden="true">#</a> 纯稚的数据类</h2><blockquote><p><code>纯稚的数据类(Data Class)</code> 指的是只包含字段和访问它们的 getter 和 setter 函数的类。这些仅仅是供其他类使用的数据容器。这些类不包含任何附加功能，并且不能对自己拥有的数据进行独立操作。</p></blockquote><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/data-class-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="问题原因-2" tabindex="-1"><a class="header-anchor" href="#问题原因-2" aria-hidden="true">#</a> 问题原因</h3><p>当一个新创建的类只包含几个公共字段（甚至可能几个 getters / setters）是很正常的。但是对象的真正力量在于它们可以包含作用于数据的行为类型或操作。</p><h3 id="解决方法-2" tabindex="-1"><a class="header-anchor" href="#解决方法-2" aria-hidden="true">#</a> 解决方法</h3><ul><li>如果一个类有公共字段，你应该运用 <code>封装字段(Encapsulated Field)</code> 来隐藏字段的直接访问方式。</li><li>如果这些类含容器类的字段，你应该检查它们是不是得到了恰当的封装；如果没有，就运用 <code>封装集合(Encapsulated Collection)</code> 把它们封装起来。</li><li>找出这些 getter/setter 函数被其他类运用的地点。尝试以 <code>搬移函数(Move Method)</code> 把那些调用行为搬移到 <code>纯稚的数据类(Data Class)</code> 来。如果无法搬移这个函数，就运用 <code>提炼函数(Extract Method)</code> 产生一个可搬移的函数。</li></ul><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/data-class-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>在类已经充满了深思熟虑的函数之后，你可能想要摆脱旧的数据访问方法，以提供适应面较广的类数据访问接口。为此，可以运用 <code>移除设置函数(Remove Setting Method)</code> 和 <code>隐藏函数(Hide Method)</code> 。</li></ul><h3 id="收益-2" tabindex="-1"><a class="header-anchor" href="#收益-2" aria-hidden="true">#</a> 收益</h3><ul><li>提高代码的可读性和组织性。特定数据的操作现在被集中在一个地方，而不是在分散在代码各处。</li><li>帮助你发现客户端代码的重复处。</li></ul><h3 id="重构方法说明-2" tabindex="-1"><a class="header-anchor" href="#重构方法说明-2" aria-hidden="true">#</a> 重构方法说明</h3><h4 id="封装字段-encapsulated-field" tabindex="-1"><a class="header-anchor" href="#封装字段-encapsulated-field" aria-hidden="true">#</a> 封装字段(Encapsulated Field)</h4><p><strong>问题</strong></p><p>你的类中存在 public 字段。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>class Person {
  public String name;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解决</strong></p><p>将它声明为 private，并提供相应的访问函数。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>class Person {
  private String name;

  public String getName() {
    return name;
  }
  public void setName(String arg) {
    name = arg;
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="封装集合-encapsulated-collection" tabindex="-1"><a class="header-anchor" href="#封装集合-encapsulated-collection" aria-hidden="true">#</a> 封装集合(Encapsulated Collection)</h4><p><strong>问题</strong></p><p>有个函数返回一个集合。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/encapsulate-collection-before.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>解决</strong></p><p>让该函数返回该集合的一个只读副本，并在这个类中提供添加、移除集合元素的函数。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/encapsulate-collection-after.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="搬移函数-move-method" tabindex="-1"><a class="header-anchor" href="#搬移函数-move-method" aria-hidden="true">#</a> 搬移函数(Move Method)</h4><p><strong>问题</strong></p><p>你的程序中，有个函数与其所驻类之外的另一个类进行更多交流：调用后者，或被后者调用。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/move-method-before.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>解决</strong></p><p>在该函数最常引用的类中建立一个有着类似行为的新函数。将旧函数变成一个单纯的委托函数，或是旧函数完全移除。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/move-method-after.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="提炼函数-extract-method" tabindex="-1"><a class="header-anchor" href="#提炼函数-extract-method" aria-hidden="true">#</a> 提炼函数(Extract Method)</h4><p><strong>问题</strong></p><p>你有一段代码可以组织在一起。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">printOwing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">printBanner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">//print details</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;name: &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;amount: &quot;</span> <span class="token operator">+</span> <span class="token function">getOutstanding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解决</strong></p><p>移动这段代码到一个新的函数中，使用函数的调用来替代老代码。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">printOwing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">printBanner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printDetails</span><span class="token punctuation">(</span><span class="token function">getOutstanding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">printDetails</span><span class="token punctuation">(</span><span class="token keyword">double</span> outstanding<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;name: &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;amount: &quot;</span> <span class="token operator">+</span> outstanding<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="移除设置函数-remove-setting-method" tabindex="-1"><a class="header-anchor" href="#移除设置函数-remove-setting-method" aria-hidden="true">#</a> 移除设置函数(Remove Setting Method)</h4><p><strong>问题</strong></p><p>类中的某个字段应该在对象创建时被设值，然后就不再改变。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/remove-setting-method-before.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>解决</strong></p><p>去掉该字段的所有设值函数。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/remove-setting-method-after.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="隐藏函数-hide-method" tabindex="-1"><a class="header-anchor" href="#隐藏函数-hide-method" aria-hidden="true">#</a> 隐藏函数(Hide Method)</h4><p><strong>问题</strong></p><p>有一个函数，从来没有被其他任何类用到。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/hide-method-before.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>解决</strong></p><p>将这个函数修改为 private。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/hide-method-after.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="过多的注释" tabindex="-1"><a class="header-anchor" href="#过多的注释" aria-hidden="true">#</a> 过多的注释</h2><blockquote><p>过多的注释(Comments)</p><p>注释本身并不是坏事。但是常常有这样的情况：一段代码中出现长长的注释，而它之所以存在，是因为代码很糟糕。</p></blockquote><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/comments-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="问题原因-3" tabindex="-1"><a class="header-anchor" href="#问题原因-3" aria-hidden="true">#</a> 问题原因</h3><p>注释的作者意识到自己的代码不直观或不明显，所以想使用注释来说明自己的意图。这种情况下，注释就像是烂代码的除臭剂。</p><blockquote><p>最好的注释是为函数或类起一个恰当的名字。</p></blockquote><p>如果你觉得一个代码片段没有注释就无法理解，请先尝试重构，试着让所有注释都变得多余。</p><h3 id="解决方法-3" tabindex="-1"><a class="header-anchor" href="#解决方法-3" aria-hidden="true">#</a> 解决方法</h3><ul><li>如果一个注释是为了解释一个复杂的表达式，可以运用 <code>提炼变量(Extract Variable)</code> 将表达式切分为易理解的子表达式。</li><li>如果你需要通过注释来解释一段代码做了什么，请试试 <code>提炼函数(Extract Method)</code> 。</li><li>如果函数已经被提炼，但仍需要注释函数做了什么，试试运用 <code>函数改名(Rename Method)</code> 来为函数起一个可以自解释的名字。</li><li>如果需要对系统某状态进行断言，请运用 <code>引入断言(Introduce Assertion)</code> 。</li></ul><h3 id="收益-3" tabindex="-1"><a class="header-anchor" href="#收益-3" aria-hidden="true">#</a> 收益</h3><ul><li>代码变得更直观和明显。</li></ul><h3 id="何时忽略-2" tabindex="-1"><a class="header-anchor" href="#何时忽略-2" aria-hidden="true">#</a> 何时忽略</h3><p>注释有时候很有用：</p><ul><li>当解释为什么某事物要以特殊方式实现时。</li><li>当解释某种复杂算法时。</li><li>当你实在不知可以做些什么时。</li></ul><h3 id="重构方法说明-3" tabindex="-1"><a class="header-anchor" href="#重构方法说明-3" aria-hidden="true">#</a> 重构方法说明</h3><h4 id="提炼变量-extract-variable" tabindex="-1"><a class="header-anchor" href="#提炼变量-extract-variable" aria-hidden="true">#</a> 提炼变量(Extract Variable)</h4><p><strong>问题</strong></p><p>你有个难以理解的表达式。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">renderBanner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>platform<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;MAC&quot;</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
       <span class="token punctuation">(</span>browser<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;IE&quot;</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
        <span class="token function">wasInitialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> resize <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token comment">// do something</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解决</strong></p><p>将表达式的结果或它的子表达式的结果用不言自明的变量来替代。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">renderBanner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">final</span> <span class="token keyword">boolean</span> isMacOs <span class="token operator">=</span> platform<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;MAC&quot;</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">final</span> <span class="token keyword">boolean</span> isIE <span class="token operator">=</span> browser<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;IE&quot;</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">final</span> <span class="token keyword">boolean</span> wasResized <span class="token operator">=</span> resize <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>isMacOs <span class="token operator">&amp;&amp;</span> isIE <span class="token operator">&amp;&amp;</span> <span class="token function">wasInitialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> wasResized<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// do something</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="提炼函数-extract-method-1" tabindex="-1"><a class="header-anchor" href="#提炼函数-extract-method-1" aria-hidden="true">#</a> 提炼函数(Extract Method)</h4><p><strong>问题</strong></p><p>你有一段代码可以组织在一起。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">printOwing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">printBanner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">//print details</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;name: &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;amount: &quot;</span> <span class="token operator">+</span> <span class="token function">getOutstanding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解决</strong></p><p>移动这段代码到一个新的函数中，使用函数的调用来替代老代码。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">printOwing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">printBanner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printDetails</span><span class="token punctuation">(</span><span class="token function">getOutstanding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">printDetails</span><span class="token punctuation">(</span><span class="token keyword">double</span> outstanding<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;name: &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;amount: &quot;</span> <span class="token operator">+</span> outstanding<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="函数改名-rename-method" tabindex="-1"><a class="header-anchor" href="#函数改名-rename-method" aria-hidden="true">#</a> 函数改名(Rename Method)</h4><p><strong>问题</strong></p><p>函数的名称未能恰当的揭示函数的用途。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getsnm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解决</strong></p><p>修改函数名。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSecondName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="引入断言-introduce-assertion" tabindex="-1"><a class="header-anchor" href="#引入断言-introduce-assertion" aria-hidden="true">#</a> 引入断言(Introduce Assertion)</h4><p><strong>问题</strong></p><p>某一段代码需要对程序状态做出某种假设。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">double</span> <span class="token function">getExpenseLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// should have either expense limit or a primary project</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>expenseLimit <span class="token operator">!=</span> <span class="token constant">NULL_EXPENSE</span><span class="token punctuation">)</span> <span class="token operator">?</span>
    expenseLimit<span class="token operator">:</span>
    primaryProject<span class="token punctuation">.</span><span class="token function">getMemberExpenseLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解决</strong></p><p>以断言明确表现这种假设。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">double</span> <span class="token function">getExpenseLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>expenseLimit <span class="token operator">!=</span> <span class="token constant">NULL_EXPENSE</span> <span class="token operator">||</span> primaryProject <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>expenseLimit <span class="token operator">!=</span> <span class="token constant">NULL_EXPENSE</span><span class="token punctuation">)</span> <span class="token operator">?</span>
    expenseLimit<span class="token operator">:</span>
    primaryProject<span class="token punctuation">.</span><span class="token function">getMemberExpenseLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>注：请不要滥用断言。不要使用它来检查”应该为真“的条件，只能使用它来检查“一定必须为真”的条件。实际上，断言更多是用于自我检测代码的一种手段。在产品真正交付时，往往都会消除所有断言。</em></p><h2 id="重复代码" tabindex="-1"><a class="header-anchor" href="#重复代码" aria-hidden="true">#</a> 重复代码</h2><blockquote><p>重复代码(Duplicate Code)</p><p>重复代码堪称为代码坏味道之首。消除重复代码总是有利无害的。</p></blockquote><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/duplicate-code-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="问题原因-4" tabindex="-1"><a class="header-anchor" href="#问题原因-4" aria-hidden="true">#</a> 问题原因</h3><p>重复代码通常发生在多个程序员同时在同一程序的不同部分上工作时。由于他们正在处理不同的任务，他们可能不知道他们的同事已经写了类似的代码。</p><p>还有一种更隐晦的重复，特定部分的代码看上去不同但实际在做同一件事。这种重复代码往往难以找到和消除。</p><p>有时重复是有目的性的。当急于满足 deadline，并且现有代码对于要交付的任务是“几乎正确的”时，新手程序员可能无法抵抗复制和粘贴相关代码的诱惑。在某些情况下，程序员只是太懒惰。</p><h3 id="解决方法-4" tabindex="-1"><a class="header-anchor" href="#解决方法-4" aria-hidden="true">#</a> 解决方法</h3><ul><li>同一个类的两个函数含有相同的表达式，这时可以采用 <code>提炼函数(Extract Method)</code> 提炼出重复的代码，然后让这两个地点都调用被提炼出来的那段代码。</li></ul><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/duplicate-code-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>如果两个互为兄弟的子类含有重复代码： <ul><li>首先对两个类都运用 <code>提炼函数(Extract Method)</code> ，然后对被提炼出来的函数运用 <code>函数上移(Pull Up Method)</code> ，将它推入超类。</li><li>如果重复代码在构造函数中，运用 <code>构造函数本体上移(Pull Up Constructor Body)</code> 。</li><li>如果重复代码只是相似但不是完全相同，运用 <code>塑造模板函数(Form Template Method)</code> 获得一个 <strong>模板方法模式(Template Method)</strong> 。</li><li>如果有些函数以不同的算法做相同的事，你可以选择其中较清晰地一个，并运用 <code>替换算法(Substitute Algorithm)</code> 将其他函数的算法替换掉。</li></ul></li><li>如果两个毫不相关的类中有重复代码： <ul><li>请尝试运用 <code>提炼超类(Extract Superclass)</code> ，以便为维护所有先前功能的这些类创建一个超类。</li><li>如果创建超类十分困难，可以在一个类中运用 <code>提炼类(Extract Class)</code> ，并在另一个类中使用这个新的组件。</li></ul></li><li>如果存在大量的条件表达式，并且它们执行完全相同的代码（仅仅是它们的条件不同），可以运用 <code>合并条件表达式(Consolidate Conditional Expression)</code> 将这些操作合并为单个条件，并运用 <code>提炼函数(Extract Method)</code> 将该条件放入一个名字容易理解的独立函数中。</li><li>如果条件表达式的所有分支都有部分相同的代码片段：可以运用 <code>合并重复的条件片段(Consolidate Duplicate Conditional Fragments)</code> 将它们都存在的代码片段置于条件表达式外部。</li></ul><h3 id="收益-4" tabindex="-1"><a class="header-anchor" href="#收益-4" aria-hidden="true">#</a> 收益</h3><ul><li>合并重复代码会简化代码的结构，并减少代码量。</li><li>代码更简化、更易维护。</li></ul><h3 id="重构方法说明-4" tabindex="-1"><a class="header-anchor" href="#重构方法说明-4" aria-hidden="true">#</a> 重构方法说明</h3><h4 id="提炼函数-extract-method-2" tabindex="-1"><a class="header-anchor" href="#提炼函数-extract-method-2" aria-hidden="true">#</a> 提炼函数(Extract Method)</h4><p><strong>问题</strong></p><p>你有一段代码可以组织在一起。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">printOwing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">printBanner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">//print details</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;name: &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;amount: &quot;</span> <span class="token operator">+</span> <span class="token function">getOutstanding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解决</strong></p><p>移动这段代码到一个新的函数中，使用函数的调用来替代老代码。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">printOwing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">printBanner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printDetails</span><span class="token punctuation">(</span><span class="token function">getOutstanding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">printDetails</span><span class="token punctuation">(</span><span class="token keyword">double</span> outstanding<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;name: &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;amount: &quot;</span> <span class="token operator">+</span> outstanding<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="函数上移-pull-up-method" tabindex="-1"><a class="header-anchor" href="#函数上移-pull-up-method" aria-hidden="true">#</a> 函数上移(Pull Up Method)</h4><p><strong>问题</strong></p><p>有些函数，在各个子类中产生完全相同的结果。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/pull-up-method-before.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>解决</strong></p><p>将该函数移至超类。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/pull-up-method-after.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="构造函数本体上移-pull-up-constructor-body" tabindex="-1"><a class="header-anchor" href="#构造函数本体上移-pull-up-constructor-body" aria-hidden="true">#</a> 构造函数本体上移(Pull Up Constructor Body)</h4><p><strong>问题</strong></p><p>你在各个子类中拥有一些构造函数，它们的本体几乎完全一致。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Manager</span> <span class="token keyword">extends</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token class-name">Manager</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> id<span class="token punctuation">,</span> <span class="token keyword">int</span> grade<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>grade <span class="token operator">=</span> grade<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解决</strong></p><p>在超类中新建一个构造函数，并在子类构造函数中调用它。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Manager</span> <span class="token keyword">extends</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token class-name">Manager</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> id<span class="token punctuation">,</span> <span class="token keyword">int</span> grade<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>grade <span class="token operator">=</span> grade<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="塑造模板函数-form-template-method" tabindex="-1"><a class="header-anchor" href="#塑造模板函数-form-template-method" aria-hidden="true">#</a> 塑造模板函数(Form Template Method)</h4><p><strong>问题</strong></p><p>你有一些子类，其中相应的某些函数以相同的顺序执行类似的操作，但各个操作的细节上有所不同。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/form-template-method-before.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>解决</strong></p><p>将这些操作分别放进独立函数中，并保持它们都有相同的签名，于是原函数也就变得相同了。然后将原函数上移至超类。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/form-template-method-after.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><em>注：这里只提到具体做法，建议了解一下模板方法设计模式。</em></p><h4 id="替换算法-substitute-algorithm" tabindex="-1"><a class="header-anchor" href="#替换算法-substitute-algorithm" aria-hidden="true">#</a> 替换算法(Substitute Algorithm)</h4><p><strong>问题</strong></p><p>你想要把某个算法替换为另一个更清晰的算法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> <span class="token function">foundPerson</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> people<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> people<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>people<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;Don&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token string">&quot;Don&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>people<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>people<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;Kent&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token string">&quot;Kent&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解决</strong></p><p>将函数本体替换为另一个算法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> <span class="token function">foundPerson</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> people<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token class-name">List</span> candidates <span class="token operator">=</span>
    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">&quot;Don&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Kent&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> people<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>candidates<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>people<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> people<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="提炼超类-extract-superclass" tabindex="-1"><a class="header-anchor" href="#提炼超类-extract-superclass" aria-hidden="true">#</a> 提炼超类(Extract Superclass)</h4><p><strong>问题</strong></p><p>两个类有相似特性。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/extract-superclass-before.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>解决</strong></p><p>为这两个类建立一个超类，将相同特性移至超类。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/extract-superclass-after.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="提炼类-extract-class" tabindex="-1"><a class="header-anchor" href="#提炼类-extract-class" aria-hidden="true">#</a> 提炼类(Extract Class)</h4><p><strong>问题</strong></p><p>某个类做了不止一件事。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/extract-class-before.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>解决</strong></p><p>建立一个新类，将相关的字段和函数从旧类搬移到新类。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/extract-class-after.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="合并条件表达式-consolidate-conditional-expression" tabindex="-1"><a class="header-anchor" href="#合并条件表达式-consolidate-conditional-expression" aria-hidden="true">#</a> 合并条件表达式(Consolidate Conditional Expression)</h4><p><strong>问题</strong></p><p>你有一系列条件分支，都得到相同结果。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">double</span> <span class="token function">disabilityAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>seniority <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>monthsDisabled <span class="token operator">&gt;</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isPartTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// compute the disability amount</span>
  <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解决</strong></p><p>将这些条件分支合并为一个条件，并将这个条件提炼为一个独立函数。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">double</span> <span class="token function">disabilityAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNotEligableForDisability</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// compute the disability amount</span>
  <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="合并重复的条件片段-consolidate-duplicate-conditional-fragments" tabindex="-1"><a class="header-anchor" href="#合并重复的条件片段-consolidate-duplicate-conditional-fragments" aria-hidden="true">#</a> 合并重复的条件片段(Consolidate Duplicate Conditional Fragments)</h4><p><strong>问题</strong></p><p>在条件表达式的每个分支上有着相同的一段代码。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSpecialDeal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  total <span class="token operator">=</span> price <span class="token operator">*</span> <span class="token number">0.95</span><span class="token punctuation">;</span>
  <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span> <span class="token punctuation">{</span>
  total <span class="token operator">=</span> price <span class="token operator">*</span> <span class="token number">0.98</span><span class="token punctuation">;</span>
  <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解决</strong></p><p>将这段重复代码搬移到条件表达式之外。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSpecialDeal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  total <span class="token operator">=</span> price <span class="token operator">*</span> <span class="token number">0.95</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span> <span class="token punctuation">{</span>
  total <span class="token operator">=</span> price <span class="token operator">*</span> <span class="token number">0.98</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="扩展阅读" tabindex="-1"><a class="header-anchor" href="#扩展阅读" aria-hidden="true">#</a> 扩展阅读</h2>`,247),k={href:"https://github.com/dunwu/design/blob/master/docs/refactor/",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/dunwu/design/blob/master/docs/refactor/%E4%BB%A3%E7%A0%81%E5%9D%8F%E5%91%B3%E9%81%93%E4%B9%8B%E4%BB%A3%E7%A0%81%E8%87%83%E8%82%BF.md",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/dunwu/design/blob/master/docs/refactor/%E4%BB%A3%E7%A0%81%E5%9D%8F%E5%91%B3%E9%81%93%E4%B9%8B%E6%BB%A5%E7%94%A8%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1.md",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/dunwu/design/blob/master/docs/refactor/%E4%BB%A3%E7%A0%81%E5%9D%8F%E5%91%B3%E9%81%93%E4%B9%8B%E5%8F%98%E9%9D%A9%E7%9A%84%E9%9A%9C%E7%A2%8D.md",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/dunwu/design/blob/master/docs/refactor/%E4%BB%A3%E7%A0%81%E5%9D%8F%E5%91%B3%E9%81%93%E4%B9%8B%E9%9D%9E%E5%BF%85%E8%A6%81%E7%9A%84.md",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/dunwu/design/blob/master/docs/refactor/%E4%BB%A3%E7%A0%81%E5%9D%8F%E5%91%B3%E9%81%93%E4%B9%8B%E8%80%A6%E5%90%88.md",target:"_blank",rel:"noopener noreferrer"},f=n("h2",{id:"参考资料",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考资料","aria-hidden":"true"},"#"),a(" 参考资料")],-1),x={href:"https://book.douban.com/subject/4199741/",target:"_blank",rel:"noopener noreferrer"},w={href:"https://book.douban.com/subject/4262627/",target:"_blank",rel:"noopener noreferrer"},y={href:"https://book.douban.com/subject/1477390/",target:"_blank",rel:"noopener noreferrer"},E={href:"https://sourcemaking.com/refactoring",target:"_blank",rel:"noopener noreferrer"};function j(q,_){const s=p("ExternalLinkIcon");return i(),o("div",null,[n("blockquote",null,[n("p",null,[a("翻译自："),n("a",u,[a("https://sourcemaking.com/refactoring/smells/dispensables"),e(s)])]),r]),d,n("ul",null,[n("li",null,[n("a",k,[a("代码的坏味道和重构"),e(s)])]),n("li",null,[n("a",g,[a("代码坏味道之代码臃肿"),e(s)])]),n("li",null,[n("a",m,[a("代码坏味道之滥用面向对象"),e(s)])]),n("li",null,[n("a",v,[a("代码坏味道之变革的障碍"),e(s)])]),n("li",null,[n("a",h,[a("代码坏味道之非必要的"),e(s)])]),n("li",null,[n("a",b,[a("代码坏味道之耦合"),e(s)])])]),f,n("ul",null,[n("li",null,[n("a",x,[a("《代码整洁之道》"),e(s)])]),n("li",null,[n("a",w,[a("《重构 - 改善既有代码的设计》"),e(s)])]),n("li",null,[n("a",y,[a("《代码大全》"),e(s)])]),n("li",null,[n("a",E,[a("https://sourcemaking.com/refactoring"),e(s)])])])])}const S=t(l,[["render",j],["__file","index.html.vue"]]);export{S as default};
