import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as i,c as r,a as n,b as t,d as a,e}from"./app-b8b4ead8.js";const c={},d=e(`<h1 id="java-虚拟机面试一" tabindex="-1"><a class="header-anchor" href="#java-虚拟机面试一" aria-hidden="true">#</a> Java 虚拟机面试一</h1><h2 id="jvm-简介" tabindex="-1"><a class="header-anchor" href="#jvm-简介" aria-hidden="true">#</a> JVM 简介</h2><h3 id="【中等】jvm-由哪些部分组成" tabindex="-1"><a class="header-anchor" href="#【中等】jvm-由哪些部分组成" aria-hidden="true">#</a> 【中等】JVM 由哪些部分组成？</h3><p><strong>类加载→内存分配→执行引擎运行→GC 回收内存</strong>，通过 JNI 与外部交互。</p><p>JVM（Java 虚拟机）主要由以下核心部分组成：</p><ul><li><strong>类加载子系统</strong>：负责加载、验证、准备、解析和初始化类文件（.class）。</li><li><strong>运行时数据区</strong>： <ul><li><strong>方法区</strong>：存储类元数据、常量池等。</li><li><strong>堆</strong>：存放对象实例（主 GC 区域）。</li><li><strong>虚拟机栈</strong>：存储方法调用的栈帧（局部变量、操作数栈等）。</li><li><strong>本地方法栈</strong>：为 Native 方法服务。</li><li><strong>程序计数器</strong>：记录当前线程执行的字节码位置。</li></ul></li><li><strong>执行引擎</strong>：解释或编译字节码为机器码执行（含 JIT 编译器）。 <ul><li><strong>解释器（Interpreter）</strong>：逐行解释执行字节码（启动快，执行慢）。</li><li><strong>即时编译器（JIT Compiler）</strong>：将热点代码（频繁执行的代码）编译为本地机器码（如 HotSpot 的 C1、C2 编译器）。</li><li><strong>垃圾回收器（GC）</strong>：自动回收堆中无用的对象（如 Serial、Parallel、G1、ZGC 等算法）。</li></ul></li><li><strong>本地方法接口（JNI）</strong>：调用 C/C++实现的 Native 方法。</li><li><strong>本地方法库（Native Libraries）</strong>：由其他语言（如 C/C++）编写的库，供 JNI 调用（如文件操作、网络通信等底层功能）。</li></ul><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/java/javacore/jvm/jvm-hotspot-architecture.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="【中等】java-是如何实现跨平台的" tabindex="-1"><a class="header-anchor" href="#【中等】java-是如何实现跨平台的" aria-hidden="true">#</a> 【中等】Java 是如何实现跨平台的？</h3><p>Java 实现跨平台的本质是：<strong>源码 → 统一字节码 → JVM 按需转换为目标平台机器码</strong>，通过分层抽象实现跨平台。</p><p>Java <strong>【一次编写，到处执行（Write Once, Run Anywhere）】</strong> 的要点：</p><ul><li><strong>JVM（Java 虚拟机）—— 统一运行环境</strong><ul><li>不同操作系统（Windows/Linux/macOS）安装对应的 JVM，<strong>屏蔽底层硬件和系统差异</strong>。</li><li>JVM 负责加载、验证并执行字节码，确保相同字节码在不同平台表现一致。</li></ul></li><li><strong>字节码（Bytecode）—— 平台无关的中间代码</strong><ul><li>Java 代码编译成<strong>平台无关的字节码（.class 文件）</strong>，而非直接生成机器码。</li><li>由 JVM 解释或 JIT 编译为当前平台的机器指令。</li></ul></li><li><strong>标准化的 Java API</strong>：提供统一的 API（如 <code>java.io</code>、<code>java.net</code>），底层通过 JVM 适配不同操作系统的具体实现。</li><li><strong>严格的规范与兼容性</strong>：JVM 规范（如字节码格式、内存管理）和 Java 语言规范由 Oracle 统一制定，确保各厂商实现的 JVM 行为一致。</li></ul><p><strong>例外情况（需注意）</strong></p><ul><li><strong>JNI（本地方法调用）</strong>：依赖系统原生库时，需为不同平台编译对应的动态库（如 <code>.dll</code>、<code>.so</code>）。</li><li><strong>平台相关细节</strong>：如文件路径分隔符、字符编码、GUI 渲染等可能需要适配。</li></ul><h3 id="【中等】说说-java-的执行流程" tabindex="-1"><a class="header-anchor" href="#【中等】说说-java-的执行流程" aria-hidden="true">#</a> 【中等】说说 Java 的执行流程？</h3><p>Java 程序的执行流程经历了从编译到字节码的生成，再到类加载和 JIT 编译的过程，最终在 JVM 中执行。并且在程序运行过程中，JVM 负责内存管理、垃圾回收和线程调度等工作。</p><p>主要流程如下：</p><ol><li><strong>编写 Java 源代码</strong>：编写 <code>.java</code> 文件。</li><li><strong>编译</strong>：Java 编译器（javac） 将 <code>.java</code> 文件编译为 <code>.class</code> 文件（字节码）。</li><li><strong>类加载</strong>：JVM 通过类加载子系统加载 <code>.class</code> 文件到内存。 <ol><li><strong>加载</strong>：采用双亲委派机制，分层级加载字节码。</li><li><strong>链接</strong><ol><li><strong>验证</strong>：检查字节码合法性（如魔数 <code>0xCAFEBABE</code>）。</li><li><strong>准备</strong>：为静态变量分配内存并赋默认值（如 <code>static int a</code> 初始化为 <code>0</code>）。</li><li><strong>解析</strong>：将符号引用（如类名、方法名）转为直接引用（内存地址）。</li></ol></li><li><strong>初始化</strong>：执行静态代码块（<code>static{}</code>）和静态变量赋值（如 <code>static int a = 1;</code>）。</li></ol></li><li><strong>存储运行时数据区</strong>：加载后的类信息存储到内存区域。 <ul><li><strong>方法区</strong>：存储类结构（如 <code>HelloWorld</code> 的类名、方法定义、常量池）。</li><li><strong>堆</strong>：存放对象实例（如 <code>String</code> 对象）。</li><li><strong>虚拟机栈</strong>：线程私有，存储 <code>main()</code> 方法的栈帧（局部变量、操作数栈等）。</li><li><strong>程序计数器</strong>：记录当前线程执行的字节码指令地址。</li></ul></li><li><strong>执行阶段</strong><ul><li><strong>解释执行</strong>：逐行解释字节码指令（如 <code>invokestatic</code> 调用 <code>System.out.println</code>）。启动快，执行效率低。</li><li><strong>本地方法调用（JNI）</strong>：若调用 <code>native</code> 方法（如 <code>Object.clone()</code>），通过 <strong>JNI</strong> 执行本地库（C/C++）代码。</li><li><strong>JIT 编译优化（可选）</strong>：将热点代码（频繁执行的方法）编译为本地机器码。相关优化技术：<strong>方法内联</strong>、<strong>逃逸分析</strong>等。</li></ul></li><li><strong>垃圾回收</strong>：JVM 管理内存，并回收不再使用的对象。</li><li><strong>程序结束</strong>：main 方法结束，退出程序。</li></ol><h3 id="【中等】什么是-jit" tabindex="-1"><a class="header-anchor" href="#【中等】什么是-jit" aria-hidden="true">#</a> 【中等】什么是 JIT?</h3><p><strong>JIT（Just-In-Time Compilation，即时编译）<strong>在运行时将</strong>热点代码</strong>（频繁执行的字节码）动态编译为<strong>本地机器码</strong>，提升执行效率。</p><ul><li><strong>JIT 是 Java 高性能的关键</strong>：通过运行时编译热点代码，平衡解释执行的灵活性和原生代码的速度。</li><li><strong>核心优化</strong>：方法内联、逃逸分析、分层编译。</li><li><strong>调优方向</strong>：根据应用特点调整编译阈值、代码缓存大小。</li></ul><p><strong>与解释器的区别</strong>：</p><ul><li><strong>解释器</strong>：逐行解释执行字节码，启动快但运行慢。</li><li><strong>JIT</strong>：编译后直接执行机器码，运行快但有编译开销。</li></ul><p><strong>JIT 作用</strong></p><ul><li><strong>性能优化</strong>：对重复执行的代码（如循环、高频方法）编译为机器码，避免重复解释。</li><li><strong>自适应优化</strong>：根据运行时数据（如方法调用次数、分支预测）动态优化代码。</li></ul><p><strong>JIT 工作流程</strong></p><ul><li><strong>热点检测</strong>：通过计数器统计方法调用次数或循环执行次数（如 <code>-XX:CompileThreshold</code> 默认阈值 10000）。</li><li><strong>编译优化</strong>：将热点字节码编译为机器码，存入<strong>代码缓存（Code Cache）</strong>。</li><li><strong>替换执行</strong>：后续调用直接执行编译后的机器码。</li></ul><p><strong>JIT 优化技术</strong></p><ul><li><strong>方法内联（Inlining）</strong>：将小方法调用替换为方法体代码（如 <code>-XX:+InlineSmallMethods</code>）。</li><li><strong>逃逸分析（Escape Analysis）</strong>：判断对象作用域，优化为栈分配或标量替换。</li><li><strong>JIT 分层编译（Tiered Compilation）</strong><ul><li><strong>混合模式</strong>：结合解释器、C1（Client Compiler）和 C2（Server Compiler）： <ul><li><strong>C1</strong>：快速编译，优化启动速度（如 <code>-client</code> 模式）。</li><li><strong>C2</strong>：深度优化，提升峰值性能（如 <code>-server</code> 模式）。</li></ul></li><li><strong>JDK 8+ 默认启用</strong>：<code>-XX:+TieredCompilation</code>。</li></ul></li><li><strong>循环展开（Loop Unrolling）</strong>：减少循环控制开销。</li><li><strong>去虚拟化（Devirtualization）</strong>：将虚方法调用转为直接调用。</li></ul><p><strong>JIT 关键参数</strong></p><table><thead><tr><th><strong>参数</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><code>-XX:+UseJIT</code></td><td>启用 JIT（默认开启）</td></tr><tr><td><code>-XX:CompileThreshold=10000</code></td><td>触发 JIT 编译的方法调用阈值</td></tr><tr><td><code>-XX:+PrintCompilation</code></td><td>打印 JIT 编译日志</td></tr><tr><td><code>-XX:ReservedCodeCacheSize</code></td><td>设置代码缓存大小（默认 240MB）</td></tr><tr><td><code>-XX:+TieredCompilation</code></td><td>启用分层编译（JDK 8+ 默认）</td></tr></tbody></table><p><strong>JIT 特点</strong></p><ul><li><strong>优点</strong>： <ul><li>显著提升热点代码性能（接近原生代码速度）。</li><li>自适应优化更灵活。</li></ul></li><li><strong>缺点</strong>： <ul><li>编译开销导致<strong>启动变慢</strong>（如短生命周期应用不适用）。</li><li>代码缓存占用内存。</li></ul></li></ul><p><strong>JIT 适用场景</strong></p><ul><li><strong>长期运行应用</strong>：如 Web 服务、大数据处理（JIT 优势明显）。</li><li><strong>短时任务</strong>：如命令行工具，解释器可能更高效。</li></ul><h3 id="【困难】什么是逃逸分析" tabindex="-1"><a class="header-anchor" href="#【困难】什么是逃逸分析" aria-hidden="true">#</a> 【困难】什么是逃逸分析？</h3><p><strong>逃逸分析</strong> 是 JVM 在 <strong>即时编译（JIT）阶段</strong> 进行的一种优化技术，用于分析对象的动态作用域，判断对象是否会“逃逸”出当前方法或线程，从而决定是否可以进行栈上分配、锁消除或标量替换等优化。</p><p>逃逸分析通过判断对象作用域，实现<strong>栈分配、锁消除、标量替换</strong>等优化，是 JVM 提升性能的关键技术之一，尤其在高频代码中效果显著。</p><ul><li><strong>逃逸对象（Escape）</strong></li><li><strong>方法逃逸</strong>：对象被其他方法引用（如作为参数传递或返回值）。 <ul><li><strong>线程逃逸</strong>：对象被其他线程访问（如赋值给静态变量或共享实例变量）。</li></ul></li><li><strong>非逃逸对象（Non-Escaping）</strong>：对象仅在当前方法内创建和使用，未被外部引用。</li></ul><p><strong>逃逸分析的优化场景</strong></p><ul><li><strong>栈上分配（Stack Allocation）</strong><ul><li>对于<strong>非逃逸对象</strong>，JVM 直接在栈帧中分配内存（而非堆），对象随方法调用结束自动销毁，减少 GC 压力。</li><li><em>示例</em>：方法内部的临时对象。</li></ul></li><li><strong>标量替换（Scalar Replacement）</strong><ul><li>将非逃逸对象的字段拆解为局部变量（标量），避免创建完整对象。</li><li><em>示例</em>：<code>Point</code> 对象的 <code>x</code>、<code>y</code> 字段被替换为两个局部变量。</li></ul></li><li><strong>锁消除（Lock Elision）</strong><ul><li>若对象未线程逃逸且同步块无竞争，JVM 会移除不必要的锁（如 <code>synchronized</code>）。</li><li><em>示例</em>：局部 <code>StringBuffer</code> 的同步操作会被优化掉。</li></ul></li></ul><p><strong>逃逸分析的触发条件</strong></p><ul><li>需 JVM 启用逃逸分析（默认开启）：<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">-XX:+DoEscapeAnalysis</span>  <span class="token comment"># 开启（默认）</span>
<span class="token parameter variable">-XX:-DoEscapeAnalysis</span>  <span class="token comment"># 关闭</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li>配合 JIT 编译器（如 C2）在热点代码中应用。</li></ul><p><strong>性能影响</strong></p><ul><li><strong>优点</strong>：减少堆分配、降低 GC 开销、提升局部性。</li><li><strong>限制</strong>：分析本身有开销，复杂对象可能无法优化。</li></ul><p><strong>示例代码</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 非逃逸对象（可能被栈分配或标量替换）</span>
    <span class="token class-name">Point</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>x <span class="token operator">+</span> p<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
    <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="【困难】什么是-aot" tabindex="-1"><a class="header-anchor" href="#【困难】什么是-aot" aria-hidden="true">#</a> 【困难】什么是 AOT？</h3><div class="hint-container info"><p class="hint-container-title">什么是 AOT？</p></div><p>Java 9 引入 <strong>AOT（Ahead of Time Compilation，提前编译）</strong> 。AOT 模式下，<strong>程序运行前直接编译为机器码</strong>（类似 C/C++/Rust）。</p><div class="hint-container info"><p class="hint-container-title">AOT 和 JIT 有什么区别？</p></div><p><strong>AOT vs. JIT</strong></p><table><thead><tr><th style="text-align:left;"><strong>维度</strong></th><th style="text-align:left;"><strong>AOT</strong></th><th style="text-align:left;"><strong>JIT</strong></th></tr></thead><tbody><tr><td style="text-align:left;"><strong>启动速度</strong></td><td style="text-align:left;">⭐⭐⭐（极快）</td><td style="text-align:left;">⭐（依赖预热）</td></tr><tr><td style="text-align:left;"><strong>内存占用</strong></td><td style="text-align:left;">⭐⭐⭐（低）</td><td style="text-align:left;">⭐⭐（较高）</td></tr><tr><td style="text-align:left;"><strong>峰值性能</strong></td><td style="text-align:left;">⭐⭐（静态优化）</td><td style="text-align:left;">⭐⭐⭐（动态优化）</td></tr><tr><td style="text-align:left;"><strong>动态支持</strong></td><td style="text-align:left;">❌（受限）</td><td style="text-align:left;">✅（完整支持）</td></tr><tr><td style="text-align:left;"><strong>适合场景</strong></td><td style="text-align:left;">云原生/微服务</td><td style="text-align:left;">高吞吐/动态框架</td></tr></tbody></table>`,52),p={href:"https://www.graalvm.org/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://www.graalvm.org/latest/docs/",target:"_blank",rel:"noopener noreferrer"},g={class:"hint-container tip"},h=n("p",{class:"hint-container-title"},"扩展",-1),k={href:"https://mp.weixin.qq.com/s/4haTyXUmh8m-dBQaEzwDJw",target:"_blank",rel:"noopener noreferrer"},v={href:"https://cn.dubbo.apache.org/zh-cn/blog/2023/06/28/%E8%B5%B0%E5%90%91-native-%E5%8C%96",target:"_blank",rel:"noopener noreferrer"},m=e(`<div class="hint-container info"><p class="hint-container-title">既然 AOT 这么多优点，那为什么不全部使用这种编译方式呢？</p></div><p><strong>AOT 的局限性在于不支持动态特性</strong>：</p><ul><li>不支持反射、动态代理、运行时类加载、JNI 等</li><li>影响框架兼容性（如 Spring、CGLIB 依赖 ASM 技术生成动态字节码）</li></ul><p><strong>AOT 的适用场景</strong>：</p><ul><li><strong>适合</strong>：启动敏感的微服务、云原生应用</li><li><strong>不适合</strong>：需动态特性的复杂框架或高频优化的长运行任务</li></ul><h2 id="jvm-内存管理" tabindex="-1"><a class="header-anchor" href="#jvm-内存管理" aria-hidden="true">#</a> JVM 内存管理</h2><h3 id="【困难】jvm-的内存区域是如何划分的" tabindex="-1"><a class="header-anchor" href="#【困难】jvm-的内存区域是如何划分的" aria-hidden="true">#</a> 【困难】JVM 的内存区域是如何划分的？</h3><p>JDK7 和 JDK8 的 JVM 的内存区域划分有所不同，如下图所示：</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202505070632861.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>线程私有区域</strong></p><ul><li><strong>程序计数器</strong><ul><li>记录当前线程执行的字节码指令地址（Native 方法时为<code>undefined</code>）。</li><li><strong>JVM 中唯一无 OOM 的区域</strong>。</li></ul></li><li><strong>虚拟机栈</strong><ul><li>存储方法调用的<strong>栈帧</strong>（局部变量表、操作数栈、动态链接、返回地址）。 <ul><li><strong>局部变量表</strong>：用于存放方法参数和方法内部定义的局部变量。</li><li><strong>操作数栈</strong>：主要作为方法调用的中转站使用，用于存放方法执行过程中产生的中间计算结果。另外，计算过程中产生的临时变量也会放在操作数栈中。</li><li><strong>动态连接</strong> - 用于一个方法调用其他方法的场景。Class 文件的常量池中有大量的符号引用，字节码中的方法调用指令就以常量池中指向方法的符号引用为参数。这些符号引用一部分会在类加载阶段或第一次使用的时候转化为直接引用，这种转化称为<strong>静态解析</strong>；另一部分将在每一次的运行期间转化为直接应用，这部分称为<strong>动态连接</strong>。</li><li><strong>方法返回地址</strong> - 用于返回方法被调用的位置，恢复上层方法的局部变量和操作数栈。Java 方法有两种返回方式，一种是 <code>return</code> 语句正常返回，一种是抛出异常。无论采用何种退出方式，都会导致栈帧被弹出。也就是说，栈帧随着方法调用而创建，随着方法结束而销毁。无论方法正常完成还是异常完成都算作方法结束。</li></ul></li><li>异常：<code>StackOverflowError</code>（栈深度超限）、<code>OOM</code>（扩展失败）。</li><li>可以通过 <code>-Xss</code> 指定占内存大小</li></ul></li><li><strong>本地方法栈</strong>：与虚拟机栈的作用非常相似，二者区别仅在于：<strong>虚拟机栈为 Java 方法服务；本地方法栈为 Native 方法服务</strong>。</li></ul><p><strong>线程共享区域</strong></p><ul><li><strong>堆（Heap）</strong><ul><li>存放<strong>所有对象实例和数组</strong>，是 GC 主战场。</li><li>分区：新生代（Eden+Survivor）、老年代。</li><li>异常：OOM: Java heap space（对象过多或内存泄漏）。</li></ul></li><li><strong>字符串常量池</strong>：用于存储字符串字面量，位于堆内存中的一块特殊区域。通过 String 类的 intern() 方法可以将字符串键入到字符串常量池。</li><li><strong>方法区（JDK 8+：元空间）</strong><ul><li>存储类元信息、运行时常量池、静态变量（JDK 7 后移至堆）。</li><li><strong>JDK 8 用元空间（本地内存）替代永久代</strong>，默认无上限。</li><li>异常：<code>OOM</code>（加载过多类）。</li></ul></li><li><strong>运行时常量池</strong>：Class 文件中存储编译时生成的常量信息，并在类加载时进入 JVM 方法区。</li></ul><p><strong>直接内存（非 JVM 规范）</strong></p><p>直接内存是 JVM 堆外的本地内存。具有读写快、无 GC 开销，需手动管理的特性。</p><ul><li>分配：ByteBuffer.allocateDirect()</li><li>清理：DirectBuffer.cleaner().clean()</li><li>场景：高频 I/O（如 NIO、Netty、MMAP）</li><li>异常：Direct buffer memory</li><li>JVM 参数：可以通过 <code>-XX:MaxDirectMemorySize</code> 设置直接内存大小，如果无设置，默认大小等于 <code>-Xmx</code> 值。</li></ul><h3 id="【困难】jvm-产生-oom-有哪几种情况" tabindex="-1"><a class="header-anchor" href="#【困难】jvm-产生-oom-有哪几种情况" aria-hidden="true">#</a> 【困难】JVM 产生 OOM 有哪几种情况？</h3><p>JVM 发生 <strong>OutOfMemoryError（OOM）</strong> 的原因多种多样，主要与内存区域划分和对象分配机制相关。以下是所有可能的 OOM 类型及其触发条件、典型案例和排查方法：</p><h4 id="java-heap-space" tabindex="-1"><a class="header-anchor" href="#java-heap-space" aria-hidden="true">#</a> Java heap space</h4><ul><li><p><strong>触发条件</strong>：<strong>堆内存不足</strong>，无法分配新对象。</p></li><li><p><strong>常见原因</strong>：</p><ul><li>内存泄漏（如静态容器持续增长、未关闭的资源）。</li><li>堆内存设置过小（<code>-Xmx</code> 值不合理）。</li><li>大对象（如一次性加载超大文件到内存）。</li></ul></li><li><p><strong>案例代码</strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 持续分配 1MB 数组</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>解决方向</strong>：</p><ul><li>检查 <code>-Xmx</code> 和 <code>-Xms</code> 参数是否合理。</li><li>使用 <code>jmap -histo:live &lt;pid&gt;</code> 或 <strong>MAT（Memory Analyzer Tool）</strong> 分析堆转储（<code>-XX:+HeapDumpOnOutOfMemoryError</code>）。</li></ul></li></ul><h4 id="metaspace-jdk-8-及以后" tabindex="-1"><a class="header-anchor" href="#metaspace-jdk-8-及以后" aria-hidden="true">#</a> Metaspace（JDK 8 及以后）</h4><ul><li><p><strong>触发条件</strong>：<strong>元空间（Metaspace）不足</strong>，无法加载新的类信息。</p></li><li><p><strong>常见原因</strong>：</p><ul><li>动态生成大量类（如反射、CGLIB、动态代理）。</li><li>未设置元空间上限（默认依赖本地内存，可能耗尽）。</li></ul></li><li><p><strong>案例代码</strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Enhancer</span> enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// CGLIB 动态生成类</span>
    enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span><span class="token constant">OOM</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>解决方向</strong>：</p><ul><li>调整元空间大小：<code>-XX:MetaspaceSize=256M -XX:MaxMetaspaceSize=256M</code>。</li><li>检查类加载器泄漏（如热部署未清理旧类）。</li></ul></li></ul><h4 id="permgen-space-jdk-7-及以前" tabindex="-1"><a class="header-anchor" href="#permgen-space-jdk-7-及以前" aria-hidden="true">#</a> PermGen space（JDK 7 及以前）</h4><ul><li><strong>类似 Metaspace</strong>，但发生在永久代（PermGen），JDK 8 后被元空间取代。</li><li><strong>常见原因</strong>：大量字符串常量或类加载未卸载。</li></ul><h4 id="direct-buffer-memory" tabindex="-1"><a class="header-anchor" href="#direct-buffer-memory" aria-hidden="true">#</a> Direct buffer memory</h4><ul><li><p><strong>触发条件</strong>：<strong>直接内存（堆外内存）耗尽</strong>。</p></li><li><p><strong>常见原因</strong>：</p><ul><li>NIO 的 <code>ByteBuffer.allocateDirect()</code> 未释放。</li><li>直接内存上限过小（<code>-XX:MaxDirectMemorySize</code>）。</li></ul></li><li><p><strong>案例代码</strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">&gt;</span></span> buffers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    buffers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocateDirect</span><span class="token punctuation">(</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1MB 直接内存</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>解决方向</strong>：</p><ul><li>显式调用 <code>((DirectBuffer) buffer).cleaner().clean()</code> 或复用缓冲区。</li><li>增加 <code>-XX:MaxDirectMemorySize=1G</code>。</li></ul></li></ul><h4 id="unable-to-create-new-native-thread" tabindex="-1"><a class="header-anchor" href="#unable-to-create-new-native-thread" aria-hidden="true">#</a> Unable to create new native thread</h4><ul><li><p><strong>触发条件</strong>：<strong>线程数超过系统限制</strong>（非堆内存问题）。</p></li><li><p><strong>常见原因</strong>：</p><ul><li>线程池配置不合理（如无界线程池）。</li><li>系统级限制（<code>ulimit -u</code> 查看用户最大线程数）。</li></ul></li><li><p><strong>案例代码</strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>解决方向</strong>：</p><ul><li>改用线程池（如 <code>ThreadPoolExecutor</code>）。</li><li>调整系统限制（Linux 下修改 <code>/etc/security/limits.conf</code>）。</li></ul></li></ul><h4 id="gc-overhead-limit-exceeded" tabindex="-1"><a class="header-anchor" href="#gc-overhead-limit-exceeded" aria-hidden="true">#</a> GC overhead limit exceeded</h4><ul><li><strong>触发条件</strong>：GC 耗时超过 98% 且回收内存不足 2%（JVM 自我保护）。</li><li><strong>本质原因</strong>：堆内存几乎耗尽，GC 无效循环。</li><li><strong>解决方向</strong>： <ul><li>同 <code>heap space</code> 排查内存泄漏。</li><li>关闭保护机制（不推荐）：<code>-XX:-UseGCOverheadLimit</code>。</li></ul></li></ul><h4 id="codecache-is-full-jit-编译代码缓存满" tabindex="-1"><a class="header-anchor" href="#codecache-is-full-jit-编译代码缓存满" aria-hidden="true">#</a> CodeCache is full（JIT 编译代码缓存满）</h4><ul><li><strong>触发条件</strong>：JIT 编译的本地代码超出缓存区（<code>-XX:ReservedCodeCacheSize</code>）。</li><li><strong>常见原因</strong>：动态生成大量方法（如频繁调用反射）。</li><li><strong>解决方向</strong>： <ul><li>增加缓存：<code>-XX:ReservedCodeCacheSize=256M</code>。</li><li>关闭分层编译：<code>-XX:-TieredCompilation</code>。</li></ul></li></ul><h4 id="requested-array-size-exceeds-vm-limit" tabindex="-1"><a class="header-anchor" href="#requested-array-size-exceeds-vm-limit" aria-hidden="true">#</a> Requested array size exceeds VM limit</h4><ul><li><p><strong>触发条件</strong>：尝试分配超过 JVM 限制的数组（如 <code>Integer.MAX_VALUE - 2</code>）。</p></li><li><p><strong>案例代码</strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 直接崩溃</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>解决方向</strong>：检查代码中不合理的数组分配逻辑。</p></li></ul><h4 id="oom-类型速查表" tabindex="-1"><a class="header-anchor" href="#oom-类型速查表" aria-hidden="true">#</a> OOM 类型速查表</h4><table><thead><tr><th>OOM 类型</th><th>关联内存区域</th><th>典型原因</th></tr></thead><tbody><tr><td><code>Java heap space</code></td><td>堆</td><td>内存泄漏/堆太小</td></tr><tr><td><code>Metaspace</code> / <code>PermGen space</code></td><td>元空间/永久代</td><td>类加载爆炸</td></tr><tr><td><code>Unable to create native thread</code></td><td>系统线程数</td><td>线程池失控/系统限制</td></tr><tr><td><code>Direct buffer memory</code></td><td>堆外内存</td><td>NIO Buffer 未释放</td></tr><tr><td><code>GC overhead limit exceeded</code></td><td>堆</td><td>GC 无效循环</td></tr><tr><td><code>CodeCache is full</code></td><td>JIT 代码缓存</td><td>动态方法过多</td></tr><tr><td><code>Requested array size exceeds VM</code></td><td>堆</td><td>超大数组分配</td></tr></tbody></table><h2 id="类加载" tabindex="-1"><a class="header-anchor" href="#类加载" aria-hidden="true">#</a> 类加载</h2><h3 id="【中等】java-里的对象在虚拟机里面是怎么存储的" tabindex="-1"><a class="header-anchor" href="#【中等】java-里的对象在虚拟机里面是怎么存储的" aria-hidden="true">#</a> 【中等】Java 里的对象在虚拟机里面是怎么存储的？</h3><p>64 位 JVM 中，一个空<code>Object</code>占 16 字节（12 字节头 + 4 字节填充）。</p><p>每个 Java 对象在堆内存中分为 <strong>3 个部分</strong>：</p><ul><li><strong>对象头（Header）</strong><ul><li><strong>Mark Word</strong>：存储哈希码、GC 年龄、锁状态（如偏向锁信息）。</li><li><strong>Class Pointer</strong>：指向类元数据的指针（压缩后占 4 字节，否则 8 字节）。</li></ul></li><li><strong>实例数据（Fields）</strong>：对象的所有成员变量（包括继承的字段），按类型对齐存储。</li><li><strong>对齐填充（Padding）</strong>：确保对象大小为 8 字节的整数倍（优化 CPU 缓存行访问）。</li></ul><p><strong>对象分配策略</strong></p><ul><li><strong>新生代分配</strong>：大多数对象优先分配在** Eden 区**（若开启 TLAB，线程先分配至私有缓冲区）。触发 Young GC 后，存活对象移至 Survivor 区或晋升老年代。</li><li><strong>老年代分配</strong>：大对象（如<code>-XX:PretenureSizeThreshold=1MB</code>）直接进入老年代。长期存活对象（年龄 &gt; <code>MaxTenuringThreshold</code>）从 Survivor 晋升。</li></ul><p><strong>分配方式</strong>：</p><ul><li><strong>指针碰撞</strong>（堆内存规整时，如 Serial 收集器）。</li><li><strong>空闲列表</strong>（堆内存碎片化时，如 CMS 收集器）。</li></ul><h3 id="【中等】java-类的生命周期是怎样的" tabindex="-1"><a class="header-anchor" href="#【中等】java-类的生命周期是怎样的" aria-hidden="true">#</a> 【中等】Java 类的生命周期是怎样的？</h3><p>Java 类的生命周期可以分为 7 个阶段：加载 → 链接（验证→准备→解析） → 初始化 → 使用 → （可能）卸载。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202505070635024.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><strong>加载（Loading）</strong><ul><li>读取 <code>.class</code> 文件，生成 <code>Class&lt;?&gt;</code> 对象。</li><li>触发条件：<code>new</code>、访问静态成员、反射等。</li></ul></li><li><strong>链接（Linking）</strong><ul><li><strong>验证（Verification）</strong>：检查字节码合法性（如魔数、继承规则）。</li><li><strong>准备（Preparation）</strong>：为 <code>static</code> 变量分配内存，赋默认值（如 <code>int</code> 为 <code>0</code>）。</li><li><strong>解析（Resolution）</strong>：将符号引用（如类名）转为直接引用（内存地址）。</li></ul></li><li><strong>初始化（Initialization）</strong><ul><li>执行 <code>&lt;clinit&gt;()</code>，完成 <code>static</code> 赋值和静态代码块。</li><li>触发条件：首次 <code>new</code>、访问非 <code>final</code> 静态变量、反射初始化等。</li></ul></li><li><strong>使用（Using）</strong><ul><li>正常调用方法、创建实例。</li></ul></li><li><strong>卸载（Unloading）</strong><ul><li>条件：类无实例、<code>ClassLoader</code> 被回收、无 <code>Class&lt;?&gt;</code> 引用。</li><li>典型场景：动态加载的类（如热部署）。</li></ul></li></ul><h3 id="【困难】什么是类加载器吗" tabindex="-1"><a class="header-anchor" href="#【困难】什么是类加载器吗" aria-hidden="true">#</a> 【困难】什么是类加载器吗？</h3><p>Java 类加载器是 <strong>JVM（Java 虚拟机）</strong> 的核心组件之一，负责在运行时动态加载 Java 类（<code>.class</code> 文件）到内存，并生成对应的 <code>Class&lt;?&gt;</code> 对象。</p><h4 id="类加载器层次结构" tabindex="-1"><a class="header-anchor" href="#类加载器层次结构" aria-hidden="true">#</a> 类加载器层次结构</h4><p>类加载器采用 <strong>&quot;双亲委派模型&quot;</strong> 进行层次化管理，确保类的唯一性和安全性。按层级自上而下有 4 种类加载器：</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20200617115936.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><table><thead><tr><th style="text-align:left;">类加载器</th><th style="text-align:left;">加载范围</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>Bootstrap ClassLoader</strong>（启动类加载器）</td><td style="text-align:left;"><code>JRE/lib</code> 或 <code>-Xbootclasspath</code></td><td style="text-align:left;">由 C++ 实现，是 JVM 的一部分，无 Java 父类加载器</td></tr><tr><td style="text-align:left;"><strong>Extension ClassLoader</strong>（扩展类加载器）</td><td style="text-align:left;"><code>JRE/lib/ext</code> 或 <code>-Djava.ext.dirs</code></td><td style="text-align:left;">加载 Java 扩展库（如 <code>javax.*</code>）</td></tr><tr><td style="text-align:left;"><strong>Application ClassLoader</strong>（应用类加载器）</td><td style="text-align:left;"><code>-Djava.class.path</code> 或 <code>-cp</code> 或 <code>-classpath</code></td><td style="text-align:left;">默认加载用户编写的类（<code>main()</code> 方法所在类）</td></tr><tr><td style="text-align:left;"><strong>Custom ClassLoader</strong>（自定义类加载器）</td><td style="text-align:left;">用户自定义路径（如网络、加密类）</td><td style="text-align:left;">可继承 <code>ClassLoader</code> 实现个性化加载逻辑</td></tr></tbody></table><h4 id="双亲委派模型" tabindex="-1"><a class="header-anchor" href="#双亲委派模型" aria-hidden="true">#</a> 双亲委派模型</h4><p>双亲委派模型（Parents Delegation Model）要求除了顶层的 Bootstrap ClassLoader 外，其余的类加载器都应有自己的父类加载器。这里类加载器之间的父子关系一般通过组合（Composition）关系来实现，而不是通过继承（Inheritance）的关系实现。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202505070634474.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>工作原理</strong>：<strong>只有当父类加载器加载失败的情况下，才会用子类加载器去加载类</strong>。</p><p><strong>优势</strong></p><ul><li><strong>避免重复加载</strong>：双亲委派模型使得 Java 类随着它的类加载器一起具有一种带有优先级的层次关系，从而确保类在 JVM 中唯一（如 <code>java.lang.Object</code> 只由 <code>Bootstrap</code> 加载）。</li><li><strong>安全性</strong>：防止用户伪造核心类（如自定义 <code>java.lang.String</code> 会被父类加载器拦截）。</li></ul><p>以下是抽象类 <code>java.lang.ClassLoader</code> 的代码片段，其中的 <code>loadClass()</code> 方法运行过程如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ClassLoader</span> <span class="token punctuation">{</span>
    <span class="token comment">// The parent class loader for delegation</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ClassLoader</span> parent<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">loadClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">boolean</span> resolve<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token function">getClassLoadingLock</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 首先判断该类型是否已经被加载</span>
            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> c <span class="token operator">=</span> <span class="token function">findLoadedClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 如果没有被加载，就委托给父类加载或者委派给启动类加载器加载</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">// 如果存在父类加载器，就委派给父类加载器加载</span>
                        c <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        <span class="token comment">// 如果不存在父类加载器，就检查是否是由启动类加载器加载的类，通过调用本地方法native Class findBootstrapClass(String name)</span>
                        c <span class="token operator">=</span> <span class="token function">findBootstrapClassOrNull</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 如果父类加载器加载失败，会抛出 ClassNotFoundException</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 如果父类加载器和启动类加载器都不能完成加载任务，才调用自身的加载功能</span>
                    c <span class="token operator">=</span> <span class="token function">findClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">resolveClass</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> c<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">findClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【说明】</p><ul><li>先检查类是否已经加载过，如果没有则让父类加载器去加载。</li><li>当父类加载器加载失败时抛出 <code>ClassNotFoundException</code>，此时尝试自己去加载。</li></ul><h2 id="字节码" tabindex="-1"><a class="header-anchor" href="#字节码" aria-hidden="true">#</a> 字节码</h2><h3 id="【中等】java-是编译型语言还是解释型语言" tabindex="-1"><a class="header-anchor" href="#【中等】java-是编译型语言还是解释型语言" aria-hidden="true">#</a> 【中等】Java 是编译型语言还是解释型语言？</h3><p>结论：<strong>Java 既是编译型语言，也是解释型语言</strong>。</p><div class="hint-container info"><p class="hint-container-title">什么是编译型语言？什么是解释型语言？</p></div>`,69),b={href:"https://zh.wikipedia.org/wiki/%E7%B7%A8%E8%AD%AF%E8%AA%9E%E8%A8%80",target:"_blank",rel:"noopener noreferrer"},f=n("strong",null,"编译型语言",-1),y=n("strong",null,"需要一个专门的编译过程，把程序编译成为机器语言的文件",-1),x={href:"https://zh.wikipedia.org/wiki/%E7%9B%B4%E8%AD%AF%E8%AA%9E%E8%A8%80",target:"_blank",rel:"noopener noreferrer"},J=n("strong",null,"解释型语言",-1),C={href:"https://zh.wikipedia.org/wiki/%E7%9B%B4%E8%AD%AF%E5%99%A8",target:"_blank",rel:"noopener noreferrer"},M=e('<div class="hint-container info"><p class="hint-container-title">为什么说 Java 既是编译型语言，也是解释型语言？</p></div><p>Java 语言既具有编译型语言的特征，也具有解释型语言的特征。因此，我们说 Java 是编译和解释并存的。</p><ul><li><strong>编译</strong>：源码 → 字节码（<code>.java</code> → <code>.class</code>）。</li><li><strong>解释/JIT</strong>：字节码 → 机器码（解释执行 + 热点代码编译优化）。</li></ul><p>Java 的源代码，首先，<strong>通过 Javac 编译成为字节码（bytecode）</strong>，即 <code>*.java</code> 文件转为 <code>*.class</code> 文件；然后，在运行时，<strong>通过 Java 虚拟机（JVM）内嵌的解释器将字节码转换成为最终的机器码来执行</strong>。正是由于 JVM 这套机制，使得 Java 可以【<strong>一次编写，到处执行（Write Once, Run Anywhere）</strong>】。</p>',4),X={href:"https://zh.wikipedia.org/wiki/%E5%8D%B3%E6%99%82%E7%B7%A8%E8%AD%AF",target:"_blank",rel:"noopener noreferrer"},w={href:"https://zh.wikipedia.org/wiki/%E5%AD%97%E8%8A%82%E7%A0%81",target:"_blank",rel:"noopener noreferrer"},j={href:"https://zh.wikipedia.org/wiki/Java",target:"_blank",rel:"noopener noreferrer"},G={href:"https://zh.wikipedia.org/wiki/LLVM",target:"_blank",rel:"noopener noreferrer"},O=n("strong",null,"编译执行",-1),V={class:"hint-container tip"},T=n("p",{class:"hint-container-title"},"扩展",-1),_={href:"https://tech.meituan.com/2020/10/22/java-jit-practice-in-meituan.html",target:"_blank",rel:"noopener noreferrer"},A=e('<h3 id="【中等】什么是-java-字节码-它与机器码有什么区别" tabindex="-1"><a class="header-anchor" href="#【中等】什么是-java-字节码-它与机器码有什么区别" aria-hidden="true">#</a> 【中等】什么是 Java 字节码？它与机器码有什么区别？</h3><p>Java 字节码（Java Bytecode）是 Java 源代码编译后生成的中间代码，它是 Java 虚拟机（JVM）执行的指令集。<strong>JVM 通过解释器或即时编译（JIT）将字节码转换为机器码执行</strong>。字节码是 Java 实现【<strong>一次编写，到处执行（Write Once, Run Anywhere）</strong>】的核心技术之一。</p><p>机器码是直接由 CPU 执行的二进制指令。</p><p><strong>Java 字节码要点</strong>：</p><ul><li><strong>基本概念</strong><ul><li>平台无关的中间代码，存储在 <code>.class</code> 文件中。</li><li>包含类结构、字段、方法及对应的字节码指令。</li></ul></li><li><strong>指令集</strong>：包含加载（<code>aload</code>/<code>iload</code>）、存储（<code>astore</code>）、运算（<code>iadd</code>）、控制流（<code>if_icmpgt</code>）等操作。</li><li><strong>执行方式</strong><ul><li><strong>解释执行</strong>：JVM 逐条解释字节码。</li><li><strong>JIT 编译</strong>：热点代码动态编译为机器码优化性能。</li></ul></li><li><strong>动态能力</strong><ul><li><strong>反射</strong>：运行时动态解析/修改字节码（如生成代理类）。</li><li><strong>字节码增强</strong>：框架（Spring AOP 等）通过 ASM、Javassist 等工具修改字节码，实现 AOP 等功能。</li></ul></li></ul>',5),I={class:"hint-container tip"},S=n("p",{class:"hint-container-title"},"扩展",-1),E={href:"https://tech.meituan.com/2019/09/05/java-bytecode-enhancement.html",target:"_blank",rel:"noopener noreferrer"},P=e(`<h3 id="【中等】-class-文件的结构包含哪些主要部分" tabindex="-1"><a class="header-anchor" href="#【中等】-class-文件的结构包含哪些主要部分" aria-hidden="true">#</a> 【中等】.class 文件的结构包含哪些主要部分？</h3><ul><li>魔数 (Magic Number)</li><li>版本信息</li><li>常量池 (Constant Pool)</li><li>访问标志</li><li>类索引、父类索引和接口索引</li><li>字段表</li><li>方法表</li><li>属性表</li></ul><h3 id="【中等】如何查看-java-字节码-常用工具有哪些" tabindex="-1"><a class="header-anchor" href="#【中等】如何查看-java-字节码-常用工具有哪些" aria-hidden="true">#</a> 【中等】如何查看 Java 字节码？常用工具有哪些？</h3><ul><li>javap (JDK 自带）</li><li>ASM</li><li>Bytecode Viewer</li><li>JBE (Java Bytecode Editor)</li></ul><h3 id="【中等】java-字节码有哪些典型应用场景" tabindex="-1"><a class="header-anchor" href="#【中等】java-字节码有哪些典型应用场景" aria-hidden="true">#</a> 【中等】Java 字节码有哪些典型应用场景？</h3><ul><li><strong>性能优化</strong>：JIT 编译、方法内联、热点代码分析</li><li><strong>AOP 与动态代理</strong>：Spring AOP、CGLIB、JDK 动态代理</li><li><strong>ORM 与懒加载</strong>：Hibernate 字节码增强实现延迟加载</li><li><strong>代码分析与安全</strong>：静态分析（FindBugs）、漏洞检测、代码混淆</li><li><strong>热部署与热修复</strong>：JRebel、阿里 Sophix（运行时替换字节码）</li><li><strong>动态语言支持</strong>：Groovy、Kotlin 等 JVM 语言编译成字节码</li><li><strong>Mock 测试</strong>：Mockito 动态生成 Mock 类字节码</li><li><strong>序列化优化</strong>：Jackson、FastJSON 使用字节码加速反射</li><li><strong>调试与监控</strong>：Arthas、JProfiler 插桩分析执行情况</li><li><strong>JVM 研究与学习</strong>：理解 Java 语法底层实现（如<code>try-with-resources</code>、<code>lambda</code>）</li></ul><p><strong>核心作用</strong>：</p><ul><li><strong>运行时增强</strong>（AOP、代理）</li><li><strong>性能优化</strong>（JIT、减少反射开销）</li><li><strong>动态能力</strong>（热修复、Mock 测试）</li><li><strong>跨语言支持</strong>（JVM 生态多语言）</li></ul><h2 id="调优" tabindex="-1"><a class="header-anchor" href="#调优" aria-hidden="true">#</a> 调优</h2><h3 id="【简单】jdk-内置了哪些工具" tabindex="-1"><a class="header-anchor" href="#【简单】jdk-内置了哪些工具" aria-hidden="true">#</a> 【简单】JDK 内置了哪些工具？</h3><p>以下是较常用的 JDK 命令行工具：</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>jps</code></td><td>查看 Java 进程。显示系统内的所有 JVM 进程。</td></tr><tr><td><code>jstat</code></td><td>JVM 统计监控工具。监控虚拟机运行时状态信息，它可以显示出 JVM 进程中的类装载、内存、GC、JIT 编译等运行数据。</td></tr><tr><td><code>jmap</code></td><td>生成内存快照（Heap Dump）。用于打印 JVM 进程对象直方图、类加载统计。并且可以生成堆转储快照（一般称为 heapdump 或 dump 文件）。</td></tr><tr><td><code>jstack</code></td><td>线程堆栈分析（排查死锁、线程阻塞）。用于打印 JVM 进程的线程和锁的情况。并且可以生成线程快照（一般称为 threaddump 或 javacore 文件）。</td></tr><tr><td><code>jhat</code></td><td>用来分析 jmap 生成的 dump 文件。</td></tr><tr><td><code>jinfo</code></td><td>查看/修改 JVM 运行参数。用于实时查看和调整 JVM 进程参数。</td></tr></tbody></table><p>扩展命令行工具：</p><ul><li><strong>Arthas</strong>：<strong>Arthas 是阿里开源的 Java 诊断工具</strong>，无需重启应用，实时<strong>监控方法调用、查看类加载、分析性能瓶颈、热修复代码</strong>，快速定位线上问题（如 CPU 飙高、内存泄漏、方法阻塞等）。</li></ul><p>以下是较常见的 JVM GUI 工具：</p><table><thead><tr><th style="text-align:left;"><strong>工具名称</strong></th><th style="text-align:left;"><strong>主要功能</strong></th><th style="text-align:left;"><strong>适用场景</strong></th><th style="text-align:left;"><strong>优点</strong></th><th style="text-align:left;"><strong>缺点</strong></th></tr></thead><tbody><tr><td style="text-align:left;"><strong>VisualVM</strong></td><td style="text-align:left;">- 监控内存、CPU、线程、GC - 堆转储分析 - 插件扩展（如 MBeans 监控）</td><td style="text-align:left;">开发调试、性能分析</td><td style="text-align:left;">免费、轻量、JDK 自带</td><td style="text-align:left;">功能较基础，对大堆支持有限</td></tr><tr><td style="text-align:left;"><strong>JConsole</strong></td><td style="text-align:left;">- 监控堆、类、线程、MBean - 简单的 GC 分析</td><td style="text-align:left;">快速监控 JVM 状态</td><td style="text-align:left;">JDK 自带，使用简单</td><td style="text-align:left;">功能较少，无法深入分析</td></tr><tr><td style="text-align:left;"><strong>Eclipse MAT</strong> (Memory Analyzer Tool)</td><td style="text-align:left;">- 分析堆转储（<code>heapdump</code>） - 检测内存泄漏、大对象</td><td style="text-align:left;">内存泄漏排查、OOM 分析</td><td style="text-align:left;">强大的内存分析能力，可视化展示对象引用链</td><td style="text-align:left;">需要手动导出堆转储，对超大堆分析较慢</td></tr><tr><td style="text-align:left;"><strong>JProfiler</strong></td><td style="text-align:left;">- CPU 分析、内存分析、线程分析 - 实时监控、方法级调用追踪</td><td style="text-align:left;">企业级性能调优、生产环境监控</td><td style="text-align:left;">功能全面，支持多种分析模式</td><td style="text-align:left;">商业软件（付费），学习成本较高</td></tr><tr><td style="text-align:left;"><strong>Java Mission Control</strong> (JMC)</td><td style="text-align:left;">- 实时监控 JVM - 飞行记录（Flight Recorder） - 低开销性能分析</td><td style="text-align:left;">生产环境监控、性能诊断</td><td style="text-align:left;">JDK 商业版自带，低开销</td><td style="text-align:left;">部分功能需商业授权（Oracle JDK）</td></tr></tbody></table><h3 id="【中等】常用的-jvm-配置参数有哪些" tabindex="-1"><a class="header-anchor" href="#【中等】常用的-jvm-配置参数有哪些" aria-hidden="true">#</a> 【中等】常用的 JVM 配置参数有哪些？</h3><p><strong>内存相关参数</strong></p><table><thead><tr><th style="text-align:left;"><strong>参数</strong></th><th style="text-align:left;"><strong>作用</strong></th><th style="text-align:left;"><strong>适用场景</strong></th></tr></thead><tbody><tr><td style="text-align:left;"><code>-Xss</code></td><td style="text-align:left;">设置每个线程的栈大小</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"><code>-Xms</code></td><td style="text-align:left;">初始堆大小</td><td style="text-align:left;">避免堆动态扩展带来的性能波动</td></tr><tr><td style="text-align:left;"><code>-Xmx</code></td><td style="text-align:left;">最大堆大小</td><td style="text-align:left;">防止 OOM，需留 20% 系统内存余量</td></tr><tr><td style="text-align:left;"><code>-Xmn</code></td><td style="text-align:left;">新生代大小（建议占堆 1/3~1/2）</td><td style="text-align:left;">优化 GC 频率和停顿时间</td></tr><tr><td style="text-align:left;"><code>-XX:PermSize</code></td><td style="text-align:left;">永久代空间的初始值</td><td style="text-align:left;">Java 7 及以前用于设置方法区大小，Java 8 废弃</td></tr><tr><td style="text-align:left;"><code>-XX:MaxPermSize</code></td><td style="text-align:left;">永久代空间的最大值</td><td style="text-align:left;">Java 7 及以前用于设置方法区大小，Java 8 废弃</td></tr><tr><td style="text-align:left;"><code>-XX:MetaspaceSize</code></td><td style="text-align:left;">元空间初始大小（JDK8+）</td><td style="text-align:left;">避免频繁 Full GC 扩容</td></tr><tr><td style="text-align:left;"><code>-XX:MaxMetaspaceSize</code></td><td style="text-align:left;">元空间最大大小（默认无限制）</td><td style="text-align:left;">防止元空间占用过多内存</td></tr><tr><td style="text-align:left;"><code>-XX:+UseCompressedOops</code></td><td style="text-align:left;">启用压缩指针（64位系统默认开启）</td><td style="text-align:left;">减少内存占用（堆 &lt; 32GB 时有效）</td></tr><tr><td style="text-align:left;"><code>-XX:NewRatio</code></td><td style="text-align:left;">新生代与年老代的比例（默认为 2）</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"><code>-XX:SurvivorRatio</code></td><td style="text-align:left;">Eden 区与 Survivor 区比例（默认 8:1:1）</td><td style="text-align:left;">调整新生代对象晋升速度</td></tr></tbody></table><p><strong>GC 相关参数</strong></p><table><thead><tr><th style="text-align:left;"><strong>参数</strong></th><th style="text-align:left;"><strong>作用</strong></th><th style="text-align:left;"><strong>示例/默认值</strong></th><th style="text-align:left;"><strong>适用场景</strong></th></tr></thead><tbody><tr><td style="text-align:left;"><code>-XX:+UseG1GC</code></td><td style="text-align:left;">启用 G1 垃圾收集器（JDK9+ 默认）</td><td style="text-align:left;"><code>-XX:+UseG1GC</code></td><td style="text-align:left;">大堆（&gt;4GB）低延迟场景</td></tr><tr><td style="text-align:left;"><code>-XX:MaxGCPauseMillis</code></td><td style="text-align:left;">G1 最大停顿时间目标（毫秒）</td><td style="text-align:left;"><code>-XX:MaxGCPauseMillis=200</code></td><td style="text-align:left;">控制 GC 延迟</td></tr><tr><td style="text-align:left;"><code>-XX:ParallelGCThreads</code></td><td style="text-align:left;">并行 GC 线程数（默认=CPU 核数）</td><td style="text-align:left;"><code>-XX:ParallelGCThreads=4</code></td><td style="text-align:left;">多核服务器优化 GC 效率</td></tr><tr><td style="text-align:left;"><code>-XX:+UseConcMarkSweepGC</code></td><td style="text-align:left;">启用 CMS 收集器（已废弃，JDK14 移除）</td><td style="text-align:left;">不推荐使用</td><td style="text-align:left;">老年代低延迟（历史项目）</td></tr><tr><td style="text-align:left;"><code>-XX:+PrintGCDetails</code></td><td style="text-align:left;">打印详细 GC 日志</td><td style="text-align:left;">配合 <code>-Xloggc:/path/gc.log</code></td><td style="text-align:left;">调试 GC 问题</td></tr><tr><td style="text-align:left;"><code>-XX:+HeapDumpOnOutOfMemoryError</code></td><td style="text-align:left;">OOM 时自动生成堆转储文件</td><td style="text-align:left;"><code>-XX:HeapDumpPath=/path/dump.hprof</code></td><td style="text-align:left;">内存泄漏分析</td></tr></tbody></table><h3 id="【中等】如何在-java-中进行内存泄漏分析" tabindex="-1"><a class="header-anchor" href="#【中等】如何在-java-中进行内存泄漏分析" aria-hidden="true">#</a> 【中等】如何在 Java 中进行内存泄漏分析？</h3><ul><li>内存泄漏的本质是<strong>对象被意外持有无法回收</strong>，通过引用链分析找到“谁在引用它”。</li><li>生产环境优先配置 <code>-XX:+HeapDumpOnOutOfMemoryError</code> 防患未然。</li></ul><h4 id="确认内存泄漏现象" tabindex="-1"><a class="header-anchor" href="#确认内存泄漏现象" aria-hidden="true">#</a> 确认内存泄漏现象</h4><ul><li>堆内存持续增长（通过 <code>jstat -gcutil &lt;pid&gt;</code> 观察 <code>Old Gen</code> 或 <code>Metaspace</code> 使用率）。</li><li>Full GC 频繁但无法回收内存（<code>jstat</code> 显示 <code>Full GC</code> 次数增加）。</li><li>最终触发 <code>OutOfMemoryError: Java heap space</code>。</li></ul><h4 id="获取内存快照" tabindex="-1"><a class="header-anchor" href="#获取内存快照" aria-hidden="true">#</a> 获取内存快照</h4><p><strong>方法 1：主动触发堆转储（Heap Dump）</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 使用 jmap 导出堆转储文件（需进程权限）</span>
jmap <span class="token parameter variable">-dump:format</span><span class="token operator">=</span>b,file<span class="token operator">=</span>heap.hprof <span class="token operator">&lt;</span>pid<span class="token operator">&gt;</span>

<span class="token comment"># 或配置 JVM 参数自动生成（OOM 时触发）</span>
<span class="token parameter variable">-XX:+HeapDumpOnOutOfMemoryError</span> <span class="token parameter variable">-XX:HeapDumpPath</span><span class="token operator">=</span>/path/heap.hprof
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方法 2：通过工具生成</strong></p><ul><li><strong>VisualVM</strong>：右键进程 → &quot;Heap Dump&quot;。</li><li><strong>JConsole</strong>：&quot;MBeans&quot; → &quot;com.sun.management&quot; → &quot;HotSpotDiagnostic&quot; → &quot;dumpHeap&quot;。</li></ul><h4 id="分析堆转储文件" tabindex="-1"><a class="header-anchor" href="#分析堆转储文件" aria-hidden="true">#</a> 分析堆转储文件</h4><p><strong>工具选择</strong></p><table><thead><tr><th><strong>工具</strong></th><th><strong>特点</strong></th></tr></thead><tbody><tr><td><strong>Eclipse MAT</strong></td><td>功能强大，支持对象引用链分析、泄漏嫌疑报告（推荐首选）。</td></tr><tr><td><strong>VisualVM</strong></td><td>基础分析，适合快速查看大对象分布。</td></tr><tr><td><strong>JProfiler</strong></td><td>商业工具，可视化交互好，支持实时监控。</td></tr></tbody></table><p><strong>MAT 关键操作步骤</strong></p><ol><li><strong>打开堆转储文件</strong>：<code>File</code> → <code>Open Heap Dump</code>。</li><li><strong>查看泄漏报告</strong>： <ul><li>首页会提示 <code>Leak Suspects</code>（泄漏嫌疑对象）。</li><li>示例报告：<code>&quot;java.lang.Thread&quot; instances retained by thread stack</code>（线程未释放）。</li></ul></li><li><strong>分析对象引用链</strong>： <ul><li>右键对象 → <code>Path to GC Roots</code> → <code>exclude weak/soft references</code>（排除弱引用）。</li><li>查找意外被持有的对象（如静态集合、未关闭的资源）。</li></ul></li><li><strong>统计对象占比</strong>：<code>Histogram</code> 视图按类/包名分组，排序 <code>Retained Heap</code>（对象总占用内存）。</li></ol><h4 id="常见内存泄漏场景与修复" tabindex="-1"><a class="header-anchor" href="#常见内存泄漏场景与修复" aria-hidden="true">#</a> 常见内存泄漏场景与修复</h4><table><thead><tr><th><strong>泄漏类型</strong></th><th><strong>典型原因</strong></th><th><strong>修复方案</strong></th></tr></thead><tbody><tr><td><strong>静态集合</strong></td><td>静态 <code>Map</code>/<code>List</code> 持续添加对象未清除。</td><td>使用弱引用（<code>WeakHashMap</code>）或定期清理。</td></tr><tr><td><strong>未关闭资源</strong></td><td>数据库连接、文件流未调用 <code>close()</code>。</td><td>用 <code>try-with-resources</code> 自动关闭。</td></tr><tr><td><strong>线程未终止</strong></td><td>线程池或 <code>Thread</code> 未销毁（如定时任务）。</td><td>调用 <code>shutdown()</code> 或设为守护线程。</td></tr><tr><td><strong>缓存未清理</strong></td><td>本地缓存（如 Guava Cache）无过期策略。</td><td>设置大小限制或过期时间。</td></tr><tr><td><strong>监听器未注销</strong></td><td>事件监听器未移除（如 Spring Bean）。</td><td>在销毁时手动注销监听器。</td></tr></tbody></table><h4 id="实时诊断工具-无需堆转储" tabindex="-1"><a class="header-anchor" href="#实时诊断工具-无需堆转储" aria-hidden="true">#</a> 实时诊断工具（无需堆转储）</h4><p><strong>Arthas（阿里开源）</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 监控对象增长</span>
<span class="token function">watch</span> java.util.HashMap size <span class="token string">&#39;{params,returnObj}&#39;</span> <span class="token parameter variable">-n</span> <span class="token number">5</span>

<span class="token comment"># 查看类实例数量</span>
sc <span class="token parameter variable">-d</span> *MyClass <span class="token operator">|</span> <span class="token function">grep</span> classLoaderHash
jad --source-only com.example.LeakClass <span class="token operator">&gt;</span> LeakClass.java

<span class="token comment"># 生成火焰图分析 CPU/内存</span>
profiler start <span class="token parameter variable">-d</span> <span class="token number">30</span> <span class="token parameter variable">-f</span> /tmp/flamegraph.html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>JVisualVM</strong>：安装 <strong>VisualGC</strong> 插件，实时观察各内存区域变化。</p><h3 id="【中等】如何对-java-的垃圾回收进行调优" tabindex="-1"><a class="header-anchor" href="#【中等】如何对-java-的垃圾回收进行调优" aria-hidden="true">#</a> 【中等】如何对 Java 的垃圾回收进行调优？</h3><h4 id="调优核心目标" tabindex="-1"><a class="header-anchor" href="#调优核心目标" aria-hidden="true">#</a> 调优核心目标</h4><ul><li><strong>降低延迟（Latency）</strong>：减少 GC 停顿时间（STW），提升响应速度。</li><li><strong>提高吞吐量（Throughput）</strong>：最大化应用处理业务的时间占比（GC 时间占比最小化）。</li><li><strong>控制内存占用（Footprint）</strong>：合理分配堆内存，避免浪费或频繁扩容。</li></ul><h4 id="调优原则" tabindex="-1"><a class="header-anchor" href="#调优原则" aria-hidden="true">#</a> 调优原则</h4><ul><li><strong>数据驱动</strong>：基于监控而非猜测调整参数。</li><li><strong>渐进式修改</strong>：每次只改一个参数，观察效果。</li><li><strong>权衡取舍</strong>：低延迟可能牺牲吞吐量，需根据业务需求选择。</li></ul><p>通过以上步骤，可系统性地优化 Java GC 性能，解决停顿时间长、吞吐不足等问题。</p><h4 id="调优步骤" tabindex="-1"><a class="header-anchor" href="#调优步骤" aria-hidden="true">#</a> 调优步骤</h4><p><strong>监控与基线分析</strong></p><ul><li><strong>工具</strong>： <ul><li><code>jstat -gcutil &lt;pid&gt;</code>：实时监控 GC 各区域使用率。</li><li><code>GC 日志</code>：通过 <code>-Xlog:gc*</code> 或 <code>-XX:+PrintGCDetails</code> 记录详细 GC 行为。</li><li><strong>VisualVM</strong>/<strong>Grafana + Prometheus</strong>：可视化内存和 GC 趋势。</li></ul></li><li><strong>关键指标</strong>：Young GC / Full GC 频率、平均停顿时间、吞吐量（<code>1 - GC时间/总时间</code>）。</li></ul><p><strong>选择垃圾收集器</strong></p><table><thead><tr><th><strong>收集器</strong></th><th><strong>适用场景</strong></th><th><strong>关键参数</strong></th></tr></thead><tbody><tr><td><strong>G1 GC</strong></td><td>平衡延迟与吞吐（JDK8+ 默认）</td><td><code>-XX:MaxGCPauseMillis=200</code>（目标停顿时间）</td></tr><tr><td><strong>ZGC</strong></td><td>超低延迟（JDK11+，大堆）</td><td><code>-XX:+UseZGC -Xmx&gt;8G</code></td></tr><tr><td><strong>Parallel GC</strong></td><td>高吞吐量（批处理任务）</td><td><code>-XX:+UseParallelGC -XX:ParallelGCThreads=8</code></td></tr></tbody></table><p><strong>堆内存分配优化</strong></p><ul><li><strong>总堆大小</strong>（<code>-Xms</code>/<code>-Xmx</code>）： <ul><li>建议设为物理内存的 50%~70%（预留空间给 OS 和其他进程）。</li><li>容器化环境需启用 <code>-XX:+UseContainerSupport</code>。</li></ul></li><li><strong>新生代与老年代比例</strong>：G1 无需手动设置（自动调整），Parallel GC 可设 <code>-Xmn</code>（如堆的 1/3）。</li></ul><p><strong>关键参数调优</strong></p><ul><li><p><strong>G1 专用参数</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">-XX:InitiatingHeapOccupancyPercent</span><span class="token operator">=</span><span class="token number">45</span>  <span class="token comment"># 老年代占用阈值触发Mixed GC</span>
<span class="token parameter variable">-XX:G1NewSizePercent</span><span class="token operator">=</span><span class="token number">20</span>               <span class="token comment"># 新生代最小占比</span>
<span class="token parameter variable">-XX:G1MaxNewSizePercent</span><span class="token operator">=</span><span class="token number">50</span>            <span class="token comment"># 新生代最大占比</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>通用参数</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">-XX:MetaspaceSize</span><span class="token operator">=</span>512M                <span class="token comment"># 避免元空间动态扩容</span>
<span class="token parameter variable">-XX:+HeapDumpOnOutOfMemoryError</span>       <span class="token comment"># OOM时自动转储内存</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p><strong>避免常见陷阱</strong></p><ul><li><strong>Full GC 频繁</strong>： <ul><li>检查老年代对象晋升过快（调整 <code>-XX:MaxTenuringThreshold</code>）。</li><li>避免大对象直接进入老年代（如 <code>-XX:G1HeapRegionSize</code> 适配对象大小）。</li></ul></li><li><strong>MetaSpace OOM</strong>： <ul><li>增加 <code>-XX:MaxMetaspaceSize</code>（如 <code>1G</code>），并检查动态类生成（反射/CGLIB）。</li></ul></li></ul><p><strong>验证与迭代</strong></p><ul><li><strong>压测对比</strong>：使用相同负载对比调优前后的 GC 日志。</li><li><strong>持续监控</strong>：生产环境通过 APM（如 SkyWalking）观察长周期效果。</li></ul><p><strong>调优示例</strong></p><p><strong>场景：Web 服务（低延迟优先）</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># G1 GC 配置示例</span>
<span class="token parameter variable">-Xms4G</span> <span class="token parameter variable">-Xmx4G</span>
<span class="token parameter variable">-XX:+UseG1GC</span>
<span class="token parameter variable">-XX:MaxGCPauseMillis</span><span class="token operator">=</span><span class="token number">150</span>
<span class="token parameter variable">-XX:InitiatingHeapOccupancyPercent</span><span class="token operator">=</span><span class="token number">40</span>
<span class="token parameter variable">-XX:G1HeapRegionSize</span><span class="token operator">=</span>4M
-Xlog:gc*,gc+heap<span class="token operator">=</span>debug:file<span class="token operator">=</span>gc.log:time,uptime
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>场景：大数据计算（高吞吐优先）</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Parallel GC 配置示例</span>
<span class="token parameter variable">-Xms8G</span> <span class="token parameter variable">-Xmx8G</span>
<span class="token parameter variable">-XX:+UseParallelGC</span>
<span class="token parameter variable">-XX:ParallelGCThreads</span><span class="token operator">=</span><span class="token number">4</span>
<span class="token parameter variable">-XX:MaxGCPauseMillis</span><span class="token operator">=</span><span class="token number">500</span>
<span class="token parameter variable">-XX:+UseAdaptiveSizePolicy</span>  <span class="token comment"># 自动调整新生代/老年代比例</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="高级工具" tabindex="-1"><a class="header-anchor" href="#高级工具" aria-hidden="true">#</a> 高级工具</h4><ul><li><p><strong>JFR（Java Flight Recorder）</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">-XX:StartFlightRecording</span><span class="token operator">=</span>duration<span class="token operator">=</span>60s,settings<span class="token operator">=</span>profile,jfr<span class="token operator">=</span>memory<span class="token operator">=</span>on
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>Arthas</strong>：实时诊断内存泄漏（如 <code>heapdump</code> 命令）。</p></li></ul>`,67);function D(B,z){const s=l("ExternalLinkIcon");return i(),r("div",null,[d,n("p",null,[t("提到 AOT 就不得不提 "),n("a",p,[t("GraalVM"),a(s)]),t(" 了！GraalVM 是一种高性能的 JDK（完整的 JDK 发行版本），它可以运行 Java 和其他 JVM 语言，以及 JavaScript、Python 等非 JVM 语言。 GraalVM 不仅能提供 AOT 编译，还能提供 JIT 编译。感兴趣的同学，可以去看看 "),n("a",u,[t("GraalVM 的官方文档"),a(s)]),t("。如果觉得官方文档看着比较难理解的话，也可以找一些文章来看看，比如：")]),n("div",g,[h,n("ul",null,[n("li",null,[n("a",k,[t("基于静态编译构建微服务应用"),a(s)])]),n("li",null,[t("[走向 Native 化：Spring&Dubbo AOT 技术示例与原理讲解]("),n("a",v,[t("https://cn.dubbo.apache.org/zh-cn/blog/2023/06/28/走向-native-化"),a(s)]),t(" springdubbo-aot-技术示例与原理讲解/)")])])]),m,n("ul",null,[n("li",null,[n("a",b,[f,a(s)]),t(" - 程序在执行之前"),y,t("，运行时不需要重新翻译，直接使用编译的结果就行了。一般情况下，编译型语言的执行速度比较快，开发效率比较低。常见的编译型语言有 C、C++、Go 等。")]),n("li",null,[n("a",x,[J,a(s)]),t(" - 程序不需要编译，只是在程序运行时通过 "),n("a",C,[t("解释器"),a(s)]),t(" ，将代码一句一句解释为机器代码后再执行。一般情况下，解释型语言的执行速度比较慢，开发效率比较高。常见的解释型语言有 JavaScript、Python、Ruby 等。")])]),M,n("p",null,[t("为了改善解释语言的效率而发展出的 "),n("a",X,[t("即时编译"),a(s)]),t(" 技术，已经缩小了这两种语言间的差距。这种技术混合了编译语言与解释型语言的优点，它像编译语言一样，先把程序源代码编译成 "),n("a",w,[t("字节码"),a(s)]),t(" 。到执行期时，再将字节码直译，之后执行。"),n("a",j,[t("Java"),a(s)]),t(" 与 "),n("a",G,[t("LLVM"),a(s)]),t(" 是这种技术的代表产物。常见的 JVM（如 Hotspot JVM），都提供了 JIT（Just-In-Time）编译器，JIT 能够在运行时将热点代码编译成机器码，这种情况下部分热点代码就属于"),O,t("，而不是解释执行了。")]),n("div",V,[T,n("p",null,[n("a",_,[t("基本功 | Java 即时编译器原理解析及实践"),a(s)])])]),A,n("div",I,[S,n("p",null,[n("a",E,[t("美团 - 字节码增强技术探索"),a(s)])])]),P])}const U=o(c,[["render",D],["__file","index.html.vue"]]);export{U as default};
