const e=JSON.parse('{"key":"v-d4cada74","path":"/pages/cec05f27/","title":"Java 并发之线程","lang":"zh-CN","frontmatter":{"title":"Java 并发之线程","date":"2019-12-24T23:52:25.000Z","permalink":"/pages/cec05f27/","category":["Java","JavaCore","并发"],"tag":["Java","JavaCore","并发","线程","Thread","Runnable","Callable","Future","FutureTask","线程生命周期"],"description":"Java 并发之线程 线程简介 进程（Process） - 进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动。进程是操作系统进行资源分配的基本单位。进程可视为一个正在运行的程序。 线程（Thread） - 线程是操作系统进行调度的基本单位。 管程（Monitor） - 管程是指管理共享变量以及对共享变量的操作过程，让他们支持并发。 Java 通过 synchronized 关键字及 wait()、notify()、notifyAll() 这三个方法来实现管程技术。 管程和信号量是等价的，所谓等价指的是用管程能够实现信号量，也能用信号量实现管程。 协程（Coroutine） - 协程可以理解为一种轻量级的线程。 从操作系统的角度来看，线程是在内核态中调度的，而协程是在用户态调度的，所以相对于线程来说，协程切换的成本更低。 协程虽然也有自己的栈，但是相比线程栈要小得多，典型的线程栈大小差不多有 1M，而协程栈的大小往往只有几 K 或者几十 K。所以，无论是从时间维度还是空间维度来看，协程都比线程轻量得多。 Go、Python、Lua、Kotlin 等语言都支持协程；Java OpenSDK 中的 Loom 项目目标就是支持协程。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/cec05f27/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"Java 并发之线程"}],["meta",{"property":"og:description","content":"Java 并发之线程 线程简介 进程（Process） - 进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动。进程是操作系统进行资源分配的基本单位。进程可视为一个正在运行的程序。 线程（Thread） - 线程是操作系统进行调度的基本单位。 管程（Monitor） - 管程是指管理共享变量以及对共享变量的操作过程，让他们支持并发。 Java 通过 synchronized 关键字及 wait()、notify()、notifyAll() 这三个方法来实现管程技术。 管程和信号量是等价的，所谓等价指的是用管程能够实现信号量，也能用信号量实现管程。 协程（Coroutine） - 协程可以理解为一种轻量级的线程。 从操作系统的角度来看，线程是在内核态中调度的，而协程是在用户态调度的，所以相对于线程来说，协程切换的成本更低。 协程虽然也有自己的栈，但是相比线程栈要小得多，典型的线程栈大小差不多有 1M，而协程栈的大小往往只有几 K 或者几十 K。所以，无论是从时间维度还是空间维度来看，协程都比线程轻量得多。 Go、Python、Lua、Kotlin 等语言都支持协程；Java OpenSDK 中的 Loom 项目目标就是支持协程。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-13T09:28:24.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"JavaCore"}],["meta",{"property":"article:tag","content":"并发"}],["meta",{"property":"article:tag","content":"线程"}],["meta",{"property":"article:tag","content":"Thread"}],["meta",{"property":"article:tag","content":"Runnable"}],["meta",{"property":"article:tag","content":"Callable"}],["meta",{"property":"article:tag","content":"Future"}],["meta",{"property":"article:tag","content":"FutureTask"}],["meta",{"property":"article:tag","content":"线程生命周期"}],["meta",{"property":"article:published_time","content":"2019-12-24T23:52:25.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-13T09:28:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 并发之线程\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-12-24T23:52:25.000Z\\",\\"dateModified\\":\\"2025-09-13T09:28:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"线程简介","slug":"线程简介","link":"#线程简介","children":[]},{"level":2,"title":"线程创建","slug":"线程创建","link":"#线程创建","children":[]},{"level":2,"title":"线程终止","slug":"线程终止","link":"#线程终止","children":[{"level":3,"title":"如何正确停止线程","slug":"如何正确停止线程","link":"#如何正确停止线程","children":[]},{"level":3,"title":"可以使用 Thread.stop，Thread.suspend 和 Thread.resume 停止线程吗？","slug":"可以使用-thread-stop-thread-suspend-和-thread-resume-停止线程吗","link":"#可以使用-thread-stop-thread-suspend-和-thread-resume-停止线程吗","children":[]},{"level":3,"title":"使用 volatile 标记方式停止线程正确吗？","slug":"使用-volatile-标记方式停止线程正确吗","link":"#使用-volatile-标记方式停止线程正确吗","children":[]}]},{"level":2,"title":"线程基本方法","slug":"线程基本方法","link":"#线程基本方法","children":[{"level":3,"title":"线程休眠","slug":"线程休眠","link":"#线程休眠","children":[]},{"level":3,"title":"线程礼让","slug":"线程礼让","link":"#线程礼让","children":[]},{"level":3,"title":"守护线程","slug":"守护线程","link":"#守护线程","children":[]}]},{"level":2,"title":"线程通信","slug":"线程通信","link":"#线程通信","children":[{"level":3,"title":"wait/notify/notifyAll","slug":"wait-notify-notifyall","link":"#wait-notify-notifyall","children":[]},{"level":3,"title":"join","slug":"join","link":"#join","children":[]},{"level":3,"title":"管道","slug":"管道","link":"#管道","children":[]}]},{"level":2,"title":"线程生命周期","slug":"线程生命周期","link":"#线程生命周期","children":[]},{"level":2,"title":"线程常见问题","slug":"线程常见问题","link":"#线程常见问题","children":[{"level":3,"title":"线程启动","slug":"线程启动","link":"#线程启动","children":[]},{"level":3,"title":"线程等待","slug":"线程等待","link":"#线程等待","children":[]},{"level":3,"title":"线程通信","slug":"线程通信-1","link":"#线程通信-1","children":[]},{"level":3,"title":"线程优先级","slug":"线程优先级","link":"#线程优先级","children":[]},{"level":3,"title":"守护线程","slug":"守护线程-1","link":"#守护线程-1","children":[]},{"level":3,"title":"线程数","slug":"线程数","link":"#线程数","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1743948422000,"updatedTime":1757755704000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":2}]},"readingTime":{"minutes":28.49,"words":8547},"filePathRelative":"01.Java/01.JavaCore/05.并发/Java_并发_线程.md","localizedDate":"2019年12月24日","excerpt":"<h1> Java 并发之线程</h1>\\n<h2> 线程简介</h2>\\n<ul>\\n<li><strong>进程（Process）</strong> - 进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动。进程是操作系统进行资源分配的基本单位。<strong>进程可视为一个正在运行的程序</strong>。</li>\\n<li><strong>线程（Thread）</strong> - <strong>线程是操作系统进行调度的基本单位</strong>。</li>\\n<li><strong>管程（Monitor）</strong> - <strong>管程是指管理共享变量以及对共享变量的操作过程，让他们支持并发</strong>。\\n<ul>\\n<li>Java 通过 synchronized 关键字及 wait()、notify()、notifyAll() 这三个方法来实现管程技术。</li>\\n<li><strong>管程和信号量是等价的，所谓等价指的是用管程能够实现信号量，也能用信号量实现管程</strong>。</li>\\n</ul>\\n</li>\\n<li><strong>协程（Coroutine）</strong> - <strong>协程可以理解为一种轻量级的线程</strong>。\\n<ul>\\n<li>从操作系统的角度来看，线程是在内核态中调度的，而协程是在用户态调度的，所以相对于线程来说，协程切换的成本更低。</li>\\n<li>协程虽然也有自己的栈，但是相比线程栈要小得多，典型的线程栈大小差不多有 1M，而协程栈的大小往往只有几 K 或者几十 K。所以，无论是从时间维度还是空间维度来看，协程都比线程轻量得多。</li>\\n<li>Go、Python、Lua、Kotlin 等语言都支持协程；Java OpenSDK 中的 Loom 项目目标就是支持协程。</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{e as data};
