const t=JSON.parse('{"key":"v-d7d43d48","path":"/pages/8d41ad47/","title":"字典树","lang":"zh-CN","frontmatter":{"title":"字典树","date":"2022-03-13T22:37:27.000Z","order":5,"permalink":"/pages/8d41ad47/","category":["数据结构和算法"],"tag":["数据结构","树","字典树"],"description":"字典树 什么是字典树 Trie 树（又叫“前缀树”或“字典树”）是一种用于快速查询“某个字符串/字符前缀”是否存在的数据结构。 根节点（Root）不包含字符，除根节点外的每一个节点都仅包含一个字符； 从根节点到某一节点路径上所经过的字符连接起来，即为该节点对应的字符串； 任意节点的所有子节点所包含的字符都不相同； img","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/8d41ad47/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"字典树"}],["meta",{"property":"og:description","content":"字典树 什么是字典树 Trie 树（又叫“前缀树”或“字典树”）是一种用于快速查询“某个字符串/字符前缀”是否存在的数据结构。 根节点（Root）不包含字符，除根节点外的每一个节点都仅包含一个字符； 从根节点到某一节点路径上所经过的字符连接起来，即为该节点对应的字符串； 任意节点的所有子节点所包含的字符都不相同； img"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-13T09:10:08.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"数据结构"}],["meta",{"property":"article:tag","content":"树"}],["meta",{"property":"article:tag","content":"字典树"}],["meta",{"property":"article:published_time","content":"2022-03-13T22:37:27.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-13T09:10:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"字典树\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-03-13T22:37:27.000Z\\",\\"dateModified\\":\\"2025-09-13T09:10:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"什么是字典树","slug":"什么是字典树","link":"#什么是字典树","children":[{"level":3,"title":"字典树的构造","slug":"字典树的构造","link":"#字典树的构造","children":[]},{"level":3,"title":"字典树的查找","slug":"字典树的查找","link":"#字典树的查找","children":[]}]},{"level":2,"title":"字典树的应用场景","slug":"字典树的应用场景","link":"#字典树的应用场景","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1741616420000,"updatedTime":1757754608000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":2}]},"readingTime":{"minutes":4.35,"words":1305},"filePathRelative":"11.数据结构和算法/字典树.md","localizedDate":"2022年3月13日","excerpt":"<h1> 字典树</h1>\\n<h2> 什么是字典树</h2>\\n<p>Trie 树（又叫“前缀树”或“字典树”）是一种用于快速查询“某个字符串/字符前缀”是否存在的数据结构。</p>\\n<ul>\\n<li>根节点（Root）不包含字符，除根节点外的每一个节点都仅包含一个字符；</li>\\n<li>从根节点到某一节点路径上所经过的字符连接起来，即为该节点对应的字符串；</li>\\n<li>任意节点的所有子节点所包含的字符都不相同；</li>\\n</ul>\\n<figure><img src=\\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220313181057.jpg\\" alt=\\"img\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>img</figcaption></figure>","autoDesc":true}');export{t as data};
