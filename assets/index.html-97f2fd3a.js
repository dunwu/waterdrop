import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o,c as r,a as s,d as e,b as a,e as l}from"./app-70dbecd6.js";const c={},h=l('<h1 id="oh-my-zsh-应用" tabindex="-1"><a class="header-anchor" href="#oh-my-zsh-应用" aria-hidden="true">#</a> oh-my-zsh 应用</h1><h2 id="zsh-简介" tabindex="-1"><a class="header-anchor" href="#zsh-简介" aria-hidden="true">#</a> Zsh 简介</h2><h3 id="zsh-是什么" tabindex="-1"><a class="header-anchor" href="#zsh-是什么" aria-hidden="true">#</a> Zsh 是什么</h3><p>使用 Linux 的人都知道：<strong>*Shell* 是一个用 C 语言编写的程序,它是用户使用 Linux 的桥梁。_Shell* 既是一种命令语言,又是一种程序设计语言</strong>。</p><p>Shell 的类型有很多种，linux 下默认的是 bash，虽然 bash 的功能已经很强大，但对于以懒惰为美德的程序员来说，bash 的提示功能不够强大，界面也不够炫，并非理想工具。</p>',5),p={href:"http://www.zsh.org/",target:"_blank",rel:"noopener noreferrer"},d=s("strong",null,"Zsh",-1),u={href:"https://github.com/robbyrussell/oh-my-zsh",target:"_blank",rel:"noopener noreferrer"},m=s("strong",null,"oh-my-zsh",-1),b=l(`<h2 id="zsh-安装" tabindex="-1"><a class="header-anchor" href="#zsh-安装" aria-hidden="true">#</a> Zsh 安装</h2><h3 id="环境要求" tabindex="-1"><a class="header-anchor" href="#环境要求" aria-hidden="true">#</a> 环境要求</h3><ul><li>CentOS 6.7 64 bit</li><li>root 用户</li></ul><h3 id="安装-zsh" tabindex="-1"><a class="header-anchor" href="#安装-zsh" aria-hidden="true">#</a> 安装 zsh</h3><ul><li>先看下你的 CentOS 支持哪些 shell：<code>cat /etc/shells</code>，正常结果应该是这样的：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>/bin/sh
/bin/bash
/sbin/nologin
/bin/dash
/bin/tcsh
/bin/csh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果已经有 zsh ，那么我们就不必安装了。</p><ul><li>CentOS 安装：<code>sudo yum install -y zsh</code></li><li>Ubuntu 安装：<code>sudo apt-get install -y zsh</code></li><li>检查系统的 shell：<code>cat /etc/shells</code>，你会发现多了一个：<code>/bin/zsh</code></li></ul><h3 id="安装-oh-my-zsh" tabindex="-1"><a class="header-anchor" href="#安装-oh-my-zsh" aria-hidden="true">#</a> 安装 oh-my-zsh</h3>`,9),g={href:"http://www.zsh.org/",target:"_blank",rel:"noopener noreferrer"},v=s("strong",null,"Zsh",-1),k={href:"https://github.com/robbyrussell/oh-my-zsh",target:"_blank",rel:"noopener noreferrer"},_=s("strong",null,"oh-my-zsh",-1),z=l(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 安装 oh-my-zsh</span>
<span class="token function">wget</span> https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh <span class="token parameter variable">-O</span> - <span class="token operator">|</span> <span class="token function">sh</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置-oh-my-zsh" tabindex="-1"><a class="header-anchor" href="#配置-oh-my-zsh" aria-hidden="true">#</a> 配置 oh-my-zsh</h3><h4 id="插件" tabindex="-1"><a class="header-anchor" href="#插件" aria-hidden="true">#</a> 插件</h4>`,3),f={href:"https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins",target:"_blank",rel:"noopener noreferrer"},y=s("li",null,"启用 oh-my-zsh 中自带的插件。",-1),x=s("li",null,[a("查看 oh-my-zsh 插件数："),s("code",null,'ls -l /root/.oh-my-zsh/plugins |grep "^d"|wc -l')],-1),w=s("li",null,[a("编辑配置文件："),s("code",null,"vim /root/.zshrc")],-1),j={href:"https://github.com/zsh-users/zsh-autosuggestions",target:"_blank",rel:"noopener noreferrer"},S=s("code",null,"zsh-autosuggestions",-1),Z=s("ul",null,[s("li",null,"这个插件会对历史命令一些补全，类似 fish 终端"),s("li",null,[a("安装，复制该命令："),s("code",null,"git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-\\~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions"),a(" - 编辑："),s("code",null,"vim \\~/.zshrc"),a("，找到这一行，后括号里面的后面添加："),s("code",null,"plugins=( 前面的一些插件名称，换行，加上：zsh-autosuggestions)"),a(" - 刷新下配置："),s("code",null,"source \\~/.zshrc")])],-1),C=s("li",null,[a("extract "),s("ul",null,[s("li",null,"功能强大的解压插件，所有类型的文件解压一个命令 x 全搞定，再也不需要去记 tar 后面到底是哪几个参数了。")])],-1),q=s("li",null,[a("z "),s("ul",null,[s("li",null,"强大的目录自动跳转命令，会记忆你曾经进入过的目录，用模糊匹配快速进入你想要的目录。")])],-1),O={href:"https://github.com/zsh-users/zsh-syntax-highlighting",target:"_blank",rel:"noopener noreferrer"},V=s("code",null,"zsh-syntax-highlighting",-1),T=s("ul",null,[s("li",null,"这个插件会对终端命令高亮显示,比如正确的拼写会是绿色标识,否则是红色,另外对于一些 shell 输出语句也会有高亮显示,算是不错的辅助插件"),s("li",null,[a("安装，复制该命令："),s("code",null,"git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-\\~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting")]),s("li",null,[a("编辑："),s("code",null,"vim \\~/.zshrc"),a("，找到这一行，后括号里面的后面添加："),s("code",null,"plugins=( 前面的一些插件名称，换行，加上：zsh-syntax-highlighting)"),a(" - 刷新下配置："),s("code",null,"source \\~/.zshrc")])],-1),B={href:"https://github.com/mfaerevaag/wd",target:"_blank",rel:"noopener noreferrer"},L=s("code",null,"wd",-1),N=l("<ul><li>简单地讲就是给指定目录映射一个全局的名字，以后方便直接跳转到这个目录，比如：</li><li>编辑配置文件，添加上 wd 的名字：<code>vim /root/.zshrc</code></li><li>我常去目录：<strong>/opt/setups</strong>，每次进入该目录下都需要这样：<code>cd /opt/setups</code></li><li>现在用 wd 给他映射一个快捷方式：<code>cd /opt/setups ; wd add setups</code></li><li>以后我在任何目录下只要运行：<code>wd setups</code> 就自动跑到 /opt/setups 目录下了</li></ul>",1),E={href:"https://github.com/wting/autojump",target:"_blank",rel:"noopener noreferrer"},U=s("code",null,"autojump",-1),H=l("<ul><li>这个插件会记录你常去的那些目录，然后做一下权重记录，你可以用这个命令看到你的习惯：<code>j --stat</code>，如果这个里面有你的记录，那你就只要敲最后一个文件夹名字即可进入，比如我个人习惯的 program：<code>j program</code>，就可以直接到：<code>/usr/program</code></li><li>插件下载：<code>wget https://github.com/downloads/wting/autojump/autojump_v21.1.2.tar.gz</code></li><li>解压：<code>tar zxvf autojump_v21.1.2.tar.gz</code></li><li>进入解压后目录并安装：<code>cd autojump_v21.1.2/ ; ./install.sh</code></li><li>再执行下这个：<code>source /etc/profile.d/autojump.sh</code></li><li>编辑配置文件，添加上 autojump 的名字：<code>vim /root/.zshrc</code></li></ul>",1),I=s("h4",{id:"主题",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#主题","aria-hidden":"true"},"#"),a(" 主题")],-1),M={href:"https://github.com/robbyrussell/oh-my-zsh/wiki/Themes",target:"_blank",rel:"noopener noreferrer"},$=l(`<ul><li>查看 oh-my-zsh 主题数：<code>ls -l /root/.oh-my-zsh/themes |grep &quot;^-&quot;|wc -l</code></li><li>个人比较推荐的是（排名有先后）： <ul><li><code>ys</code></li><li><code>agnoster</code></li><li><code>avit</code></li><li><code>blinks</code></li></ul></li><li>编辑配置文件：<code>vim /root/.zshrc</code></li><li>配置好新主题需要重新连接 shell 才能看到效果</li></ul><p>zsh 效果如下：</p><figure><img src="https://cloud.githubusercontent.com/assets/2618447/6316862/70f58fb6-ba03-11e4-82c9-c083bf9a6574.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="快捷键" tabindex="-1"><a class="header-anchor" href="#快捷键" aria-hidden="true">#</a> 快捷键</h2><ul><li>呃，这个其实可以不用讲的，你自己用的时候你自己会发现的，各种便捷，特别是用 Tab 多的人一定会有各种惊喜的。</li><li>使用 ctrl-r 来搜索命令历史记录。按完此快捷键后，可以输入关键命令词语，如果历史记录有含有此词语会显示出来。</li><li>命令别名： - 在命令行中输入 alias 可以查看已经有的命令别名 - 自己新增一些别名，编辑文件：<code>vim \\~/.zshrc</code>，在文件加入下面格式的命令，比如以下是网友提供的一些思路：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">alias</span> <span class="token assign-left variable">cls</span><span class="token operator">=</span><span class="token string">&#39;clear&#39;</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">ll</span><span class="token operator">=</span><span class="token string">&#39;ls -l&#39;</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">la</span><span class="token operator">=</span><span class="token string">&#39;ls -a&#39;</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">grep</span><span class="token operator">=</span><span class="token string">&quot;grep --color=auto&quot;</span>
<span class="token builtin class-name">alias</span> <span class="token parameter variable">-s</span> <span class="token assign-left variable">html</span><span class="token operator">=</span><span class="token string">&#39;vim&#39;</span>   <span class="token comment"># 在命令行直接输入后缀为 html 的文件名，会在 Vim 中打开</span>
<span class="token builtin class-name">alias</span> <span class="token parameter variable">-s</span> <span class="token assign-left variable">rb</span><span class="token operator">=</span><span class="token string">&#39;vim&#39;</span>     <span class="token comment"># 在命令行直接输入 ruby 文件，会在 Vim 中打开</span>
<span class="token builtin class-name">alias</span> <span class="token parameter variable">-s</span> <span class="token assign-left variable">py</span><span class="token operator">=</span><span class="token string">&#39;vim&#39;</span>      <span class="token comment"># 在命令行直接输入 python 文件，会用 vim 中打开，以下类似</span>
<span class="token builtin class-name">alias</span> <span class="token parameter variable">-s</span> <span class="token assign-left variable">js</span><span class="token operator">=</span><span class="token string">&#39;vim&#39;</span>
<span class="token builtin class-name">alias</span> <span class="token parameter variable">-s</span> <span class="token assign-left variable">c</span><span class="token operator">=</span><span class="token string">&#39;vim&#39;</span>
<span class="token builtin class-name">alias</span> <span class="token parameter variable">-s</span> <span class="token assign-left variable">java</span><span class="token operator">=</span><span class="token string">&#39;vim&#39;</span>
<span class="token builtin class-name">alias</span> <span class="token parameter variable">-s</span> <span class="token assign-left variable">txt</span><span class="token operator">=</span><span class="token string">&#39;vim&#39;</span>
<span class="token builtin class-name">alias</span> <span class="token parameter variable">-s</span> <span class="token assign-left variable">gz</span><span class="token operator">=</span><span class="token string">&#39;tar -xzvf&#39;</span> <span class="token comment"># 在命令行直接输入后缀为 gz 的文件名，会自动解压打开</span>
<span class="token builtin class-name">alias</span> <span class="token parameter variable">-s</span> <span class="token assign-left variable">tgz</span><span class="token operator">=</span><span class="token string">&#39;tar -xzvf&#39;</span>
<span class="token builtin class-name">alias</span> <span class="token parameter variable">-s</span> <span class="token assign-left variable">zip</span><span class="token operator">=</span><span class="token string">&#39;unzip&#39;</span>
<span class="token builtin class-name">alias</span> <span class="token parameter variable">-s</span> <span class="token assign-left variable">bz2</span><span class="token operator">=</span><span class="token string">&#39;tar -xjvf&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,7),G={href:"https://github.com/robbyrussell/oh-my-zsh",target:"_blank",rel:"noopener noreferrer"};function P(A,D){const n=i("ExternalLinkIcon");return o(),r("div",null,[h,s("p",null,[s("a",p,[d,e(n)]),a(" 也是一种 Shell（据传说 99% 的 Bash 操作 和 Zsh 是相同的），它的功能极其强大，只是配置过于复杂，起初只有极客才在用。后来，出现了一个名叫 "),s("a",u,[m,e(n)]),a(" 的开源项目，使用 zsh 就变得十分简易了。")]),b,s("p",null,[a("使用 "),s("a",g,[v,e(n)]),a("，怎么能离开灵魂伴侣 "),s("a",k,[_,e(n)]),a("？")]),z,s("blockquote",null,[s("p",null,[a("oh-my-zsh 插件太多，不一一列举，请参考："),s("a",f,[a("oh-my-zsh 插件列表"),e(n)])])]),s("ul",null,[y,x,w,s("li",null,[a("插件推荐： "),s("ul",null,[s("li",null,[s("a",j,[S,e(n)]),Z]),C,q,s("li",null,[s("a",O,[V,e(n)]),T]),s("li",null,[s("a",B,[L,e(n)]),N]),s("li",null,[s("a",E,[U,e(n)]),H])])])]),I,s("blockquote",null,[s("p",null,[a("oh-my-zsh 主题太多，不一一列举，请参考："),s("a",M,[a("oh-my-zsh 主题列表"),e(n)])])]),$,s("ul",null,[s("li",null,[s("a",G,[a("oh-my-zsh Github"),e(n)])])])])}const K=t(c,[["render",P],["__file","index.html.vue"]]);export{K as default};
