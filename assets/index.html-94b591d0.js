import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as d,c,a as e,b as s,d as a,e as t}from"./app-83b29132.js";const r={},o=t('<h1 id="redis-运维" tabindex="-1"><a class="header-anchor" href="#redis-运维" aria-hidden="true">#</a> Redis 运维</h1><blockquote><p><strong>Redis</strong> 是一个高性能的 key-value 数据库。</p><p>SET 操作每秒钟 110000 次；GET 操作每秒钟 81000 次。</p></blockquote><h2 id="redis-安装" tabindex="-1"><a class="header-anchor" href="#redis-安装" aria-hidden="true">#</a> Redis 安装</h2><h3 id="window-下安装" tabindex="-1"><a class="header-anchor" href="#window-下安装" aria-hidden="true">#</a> Window 下安装</h3>',4),p=e("strong",null,"下载地址：",-1),u={href:"https://github.com/MSOpenTech/redis/releases",target:"_blank",rel:"noopener noreferrer"},b=t('<p>Redis 支持 32 位和 64 位。这个需要根据你系统平台的实际情况选择，这里我们下载 <strong>Redis-x64-xxx.zip</strong>压缩包到 C 盘，解压后，将文件夹重新命名为 <strong>redis</strong>。</p><p>打开一个 <strong>cmd</strong> 窗口 使用 cd 命令切换目录到 <strong>C:\\redis</strong> 运行 <strong>redis-server.exe redis.windows.conf</strong> 。</p><p>如果想方便的话，可以把 redis 的路径加到系统的环境变量里，这样就省得再输路径了，后面的那个 redis.windows.conf 可以省略，如果省略，会启用默认的。</p><p>这时候另启一个 cmd 窗口，原来的不要关闭，不然就无法访问服务端了。</p><p>切换到 redis 目录下运行 <strong>redis-cli.exe -h 127.0.0.1 -p 6379</strong> 。</p><h3 id="linux-下安装" tabindex="-1"><a class="header-anchor" href="#linux-下安装" aria-hidden="true">#</a> Linux 下安装</h3>',6),v=e("strong",null,"下载地址：",-1),m={href:"http://redis.io/download%EF%BC%8C%E4%B8%8B%E8%BD%BD%E6%9C%80%E6%96%B0%E6%96%87%E6%A1%A3%E7%89%88%E6%9C%AC%E3%80%82",target:"_blank",rel:"noopener noreferrer"},g=t(`<p>下载、解压、编译 Redis</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">wget</span> http://download.redis.io/releases/redis-5.0.4.tar.gz
<span class="token function">tar</span> xzf redis-5.0.4.tar.gz
<span class="token builtin class-name">cd</span> redis-5.0.4
<span class="token function">make</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了编译 Redis 源码，你需要 gcc-c++和 tcl。如果你的系统是 CentOS，可以直接执行命令：<code>yum install -y gcc-c++ tcl</code> 来安装。</p><p>进入到解压后的 <code>src</code> 目录，通过如下命令启动 Redis:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>src/redis-server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>您可以使用内置的客户端与 Redis 进行交互:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ src/redis-cli
redis<span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> foo bar
OK
redis<span class="token operator">&gt;</span> get foo
<span class="token string">&quot;bar&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ubuntu-下安装" tabindex="-1"><a class="header-anchor" href="#ubuntu-下安装" aria-hidden="true">#</a> Ubuntu 下安装</h3><p>在 Ubuntu 系统安装 Redis 可以使用以下命令:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt-get</span> update
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> redis-server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="开机启动" tabindex="-1"><a class="header-anchor" href="#开机启动" aria-hidden="true">#</a> 开机启动</h3><ul><li>开机启动配置：<code>echo &quot;/usr/local/bin/redis-server /etc/redis.conf&quot; &gt;&gt; /etc/rc.local</code></li></ul><h3 id="开放防火墙端口" tabindex="-1"><a class="header-anchor" href="#开放防火墙端口" aria-hidden="true">#</a> 开放防火墙端口</h3><ul><li>添加规则：<code>iptables -I INPUT -p tcp -m tcp --dport 6379 -j ACCEPT</code></li><li>保存规则：<code>service iptables save</code></li><li>重启 iptables：<code>service iptables restart</code></li></ul><h3 id="redis-安装脚本" tabindex="-1"><a class="header-anchor" href="#redis-安装脚本" aria-hidden="true">#</a> Redis 安装脚本</h3>`,15),h={href:"https://github.com/dunwu/linux-tutorial/tree/master/codes/linux/soft",target:"_blank",rel:"noopener noreferrer"},f=t(`<p><strong>安装说明</strong></p><ul><li>采用编译方式安装 Redis, 并将其注册为 systemd 服务</li><li>安装路径为：<code>/usr/local/redis</code></li><li>默认下载安装 <code>5.0.4</code> 版本，端口号为：<code>6379</code>，密码为空</li></ul><p><strong>使用方法</strong></p><ul><li>默认安装 - 执行以下任意命令即可：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> -o- https://gitee.com/turnon/linux-tutorial/raw/master/codes/linux/soft/redis-install.sh <span class="token operator">|</span> <span class="token function">bash</span>
<span class="token function">wget</span> -qO- https://gitee.com/turnon/linux-tutorial/raw/master/codes/linux/soft/redis-install.sh <span class="token operator">|</span> <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>自定义安装 - 下载脚本到本地，并按照以下格式执行：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sh</span> redis-install.sh <span class="token punctuation">[</span>version<span class="token punctuation">]</span> <span class="token punctuation">[</span>port<span class="token punctuation">]</span> <span class="token punctuation">[</span>password<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数说明：</p><ul><li><code>version</code> - redis 版本号</li><li><code>port</code> - redis 服务端口号</li><li><code>password</code> - 访问密码</li></ul><h2 id="redis-单机使用和配置" tabindex="-1"><a class="header-anchor" href="#redis-单机使用和配置" aria-hidden="true">#</a> Redis 单机使用和配置</h2><h3 id="启动-redis" tabindex="-1"><a class="header-anchor" href="#启动-redis" aria-hidden="true">#</a> 启动 Redis</h3><p><strong>启动 redis 服务</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /usr/local/redis/src
./redis-server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>启动 redis 客户端</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /usr/local/redis/src
./redis-cli
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>查看 redis 是否启动</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-cli
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以上命令将打开以下终端：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis <span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>127.0.0.1 是本机 IP ，6379 是 redis 服务端口。现在我们输入 PING 命令。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis <span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token function">ping</span>
PONG
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>以上说明我们已经成功启动了 redis。</p><h3 id="redis-常见配置" tabindex="-1"><a class="header-anchor" href="#redis-常见配置" aria-hidden="true">#</a> Redis 常见配置</h3>`,23),k=e("p",null,[s("Redis 默认的配置文件是根目录下的 "),e("code",null,"redis.conf"),s(" 文件。")],-1),x=e("p",null,[s("如果需要指定特定文件作为配置文件，需要使用命令： "),e("code",null,"./redis-server -c xxx.conf")],-1),_=e("p",null,"每次修改配置后，需要重启才能生效。",-1),y=e("p",null,"Redis 官方默认配置：",-1),R={href:"https://raw.githubusercontent.com/antirez/redis/2.8/redis.conf",target:"_blank",rel:"noopener noreferrer"},w={href:"https://raw.githubusercontent.com/antirez/redis/2.6/redis.conf",target:"_blank",rel:"noopener noreferrer"},E={href:"https://raw.githubusercontent.com/antirez/redis/2.4/redis.conf",target:"_blank",rel:"noopener noreferrer"},q=e("p",null,"自 Redis2.6 起就可以直接通过命令行传递 Redis 配置参数。这种方法可以用于测试。自 Redis2.6 起就可以直接通过命令行传递 Redis 配置参数。这种方法可以用于测试。",-1),T=t('<h3 id="设为守护进程" tabindex="-1"><a class="header-anchor" href="#设为守护进程" aria-hidden="true">#</a> 设为守护进程</h3><p>Redis 默认以非守护进程方式启动，而通常我们会将 Redis 设为守护进程启动方式，配置：<code>daemonize yes</code></p><h4 id="远程访问" tabindex="-1"><a class="header-anchor" href="#远程访问" aria-hidden="true">#</a> 远程访问</h4><p>Redis 默认绑定 127.0.0.1，这样就只能本机才能访问，若要 Redis 允许远程访问，需要配置：<code>bind 0.0.0.0</code></p><h4 id="设置密码" tabindex="-1"><a class="header-anchor" href="#设置密码" aria-hidden="true">#</a> 设置密码</h4><p>Redis 默认访问不需要密码，如果需要设置密码，需要如下配置：</p><ul><li><code>protected-mode yes</code></li><li><code>requirepass &lt;密码&gt;</code></li></ul><h4 id="配置参数表" tabindex="-1"><a class="header-anchor" href="#配置参数表" aria-hidden="true">#</a> 配置参数表</h4><table><thead><tr><th style="text-align:left;">配置项</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>daemonize no</code></td><td style="text-align:left;">Redis 默认不是以守护进程的方式运行，可以通过该配置项修改，使用 yes 启用守护进程（Windows 不支持守护线程的配置为 no ）</td></tr><tr><td style="text-align:left;"><code>pidfile /var/run/redis.pid</code></td><td style="text-align:left;">当 Redis 以守护进程方式运行时，Redis 默认会把 pid 写入 /var/run/redis.pid 文件，可以通过 pidfile 指定</td></tr><tr><td style="text-align:left;"><code>port 6379</code></td><td style="text-align:left;">指定 Redis 监听端口，默认端口为 6379，作者在自己的一篇博文中解释了为什么选用 6379 作为默认端口，因为 6379 在手机按键上 MERZ 对应的号码，而 MERZ 取自意大利歌女 Alessia Merz 的名字</td></tr><tr><td style="text-align:left;"><code>bind 127.0.0.1</code></td><td style="text-align:left;">绑定的主机地址</td></tr><tr><td style="text-align:left;"><code>timeout 300</code></td><td style="text-align:left;">当客户端闲置多长时间后关闭连接，如果指定为 0，表示关闭该功能</td></tr><tr><td style="text-align:left;"><code>loglevel notice</code></td><td style="text-align:left;">指定日志记录级别，Redis 总共支持四个级别：debug、verbose、notice、warning，默认为 notice</td></tr><tr><td style="text-align:left;"><code>logfile stdout</code></td><td style="text-align:left;">日志记录方式，默认为标准输出，如果配置 Redis 为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给 /dev/null</td></tr><tr><td style="text-align:left;"><code>databases 16</code></td><td style="text-align:left;">设置数据库的数量，默认数据库为 0，可以使用 SELECT 命令在连接上指定数据库 id</td></tr><tr><td style="text-align:left;"><code>save &lt;seconds&gt; &lt;changes&gt;</code> Redis 默认配置文件中提供了三个条件：<strong>save 900 1</strong>、<strong>save 300 10</strong>、<strong>save 60 10000</strong> 分别表示 900 秒（15 分钟）内有 1 个更改，300 秒（5 分钟）内有 10 个更改以及 60 秒内有 10000 个更改。</td><td style="text-align:left;">指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合</td></tr><tr><td style="text-align:left;"><code>rdbcompression yes</code></td><td style="text-align:left;">指定存储至本地数据库时是否压缩数据，默认为 yes，Redis 采用 LZF 压缩，如果为了节省 CPU 时间，可以关闭该选项，但会导致数据库文件变的巨大</td></tr><tr><td style="text-align:left;"><code>dbfilename dump.rdb</code></td><td style="text-align:left;">指定本地数据库文件名，默认值为 dump.rdb</td></tr><tr><td style="text-align:left;"><code>dir ./</code></td><td style="text-align:left;">指定本地数据库存放目录</td></tr><tr><td style="text-align:left;"><code>slaveof &lt;masterip&gt; &lt;masterport&gt;</code></td><td style="text-align:left;">设置当本机为 slav 服务时，设置 master 服务的 IP 地址及端口，在 Redis 启动时，它会自动从 master 进行数据同步</td></tr><tr><td style="text-align:left;"><code>masterauth &lt;master-password&gt;</code></td><td style="text-align:left;">当 master 服务设置了密码保护时，slav 服务连接 master 的密码</td></tr><tr><td style="text-align:left;"><code>requirepass foobared</code></td><td style="text-align:left;">设置 Redis 连接密码，如果配置了连接密码，客户端在连接 Redis 时需要通过 <code>AUTH &lt;password&gt;</code> 命令提供密码，默认关闭</td></tr><tr><td style="text-align:left;"><code>maxclients 128</code></td><td style="text-align:left;">设置同一时间最大客户端连接数，默认无限制，Redis 可以同时打开的客户端连接数为 Redis 进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis 会关闭新的连接并向客户端返回 max number of clients reached 错误信息</td></tr><tr><td style="text-align:left;"><code>maxmemory &lt;bytes&gt;</code></td><td style="text-align:left;">指定 Redis 最大内存限制，Redis 在启动时会把数据加载到内存中，达到最大内存后，Redis 会先尝试清除已到期或即将到期的 Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis 新的 vm 机制，会把 Key 存放内存，Value 会存放在 swap 区</td></tr><tr><td style="text-align:left;"><code>appendonly no</code></td><td style="text-align:left;">指定是否在每次更新操作后进行日志记录，Redis 在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis 本身同步数据文件是按上面 save 条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为 no</td></tr><tr><td style="text-align:left;"><code>appendfilename appendonly.aof</code></td><td style="text-align:left;">指定更新日志文件名，默认为 appendonly.aof</td></tr><tr><td style="text-align:left;"><code>appendfsync everysec</code></td><td style="text-align:left;">指定更新日志条件，共有 3 个可选值：<strong>no</strong>：表示等操作系统进行数据缓存同步到磁盘（快）<strong>always</strong>：表示每次更新操作后手动调用 fsync() 将数据写到磁盘（慢，安全）<strong>everysec</strong>：表示每秒同步一次（折中，默认值）</td></tr><tr><td style="text-align:left;"><code>vm-enabled no</code></td><td style="text-align:left;">指定是否启用虚拟内存机制，默认值为 no，简单的介绍一下，VM 机制将数据分页存放，由 Redis 将访问量较少的页即冷数据 swap 到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析 Redis 的 VM 机制）</td></tr><tr><td style="text-align:left;"><code>vm-swap-file /tmp/redis.swap</code></td><td style="text-align:left;">虚拟内存文件路径，默认值为 /tmp/redis.swap，不可多个 Redis 实例共享</td></tr><tr><td style="text-align:left;"><code>vm-max-memory 0</code></td><td style="text-align:left;">将所有大于 vm-max-memory 的数据存入虚拟内存，无论 vm-max-memory 设置多小，所有索引数据都是内存存储的(Redis 的索引数据 就是 keys)，也就是说，当 vm-max-memory 设置为 0 的时候，其实是所有 value 都存在于磁盘。默认值为 0</td></tr><tr><td style="text-align:left;"><code>vm-page-size 32</code></td><td style="text-align:left;">Redis swap 文件分成了很多的 page，一个对象可以保存在多个 page 上面，但一个 page 上不能被多个对象共享，vm-page-size 是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page 大小最好设置为 32 或者 64bytes；如果存储很大大对象，则可以使用更大的 page，如果不确定，就使用默认值</td></tr><tr><td style="text-align:left;"><code>vm-pages 134217728</code></td><td style="text-align:left;">设置 swap 文件中的 page 数量，由于页表（一种表示页面空闲或使用的 bitmap）是在放在内存中的，，在磁盘上每 8 个 pages 将消耗 1byte 的内存。</td></tr><tr><td style="text-align:left;"><code>vm-max-threads 4</code></td><td style="text-align:left;">设置访问 swap 文件的线程数,最好不要超过机器的核数,如果设置为 0,那么所有对 swap 文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为 4</td></tr><tr><td style="text-align:left;"><code>glueoutputbuf yes</code></td><td style="text-align:left;">设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启</td></tr><tr><td style="text-align:left;"><code>hash-max-zipmap-entries 64 hash-max-zipmap-value 512</code></td><td style="text-align:left;">指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法</td></tr><tr><td style="text-align:left;"><code>activerehashing yes</code></td><td style="text-align:left;">指定是否激活重置哈希，默认为开启（后面在介绍 Redis 的哈希算法时具体介绍）</td></tr><tr><td style="text-align:left;"><code>include /path/to/local.conf</code></td><td style="text-align:left;">指定包含其它的配置文件，可以在同一主机上多个 Redis 实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件</td></tr></tbody></table><h3 id="压力测试" tabindex="-1"><a class="header-anchor" href="#压力测试" aria-hidden="true">#</a> 压力测试</h3>',10),S={href:"https://redis.io/topics/benchmarks",target:"_blank",rel:"noopener noreferrer"},P=t(`<p>Redis 自带了一个性能测试工具：<code>redis-benchmark</code></p><p><strong>（1）基本测试</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-benchmark <span class="token parameter variable">-q</span> <span class="token parameter variable">-n</span> <span class="token number">100000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>-q</code> 表示静默（quiet）执行</li><li><code>-n 100000</code> 请求 10 万次</li></ul><p><strong>（2）测试指定读写指令</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ redis-benchmark <span class="token parameter variable">-t</span> set,lpush <span class="token parameter variable">-n</span> <span class="token number">100000</span> <span class="token parameter variable">-q</span>
SET: <span class="token number">74239.05</span> requests per second
LPUSH: <span class="token number">79239.30</span> requests per second
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（3）测试 pipeline 模式下指定读写指令</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-benchmark <span class="token parameter variable">-n</span> <span class="token number">1000000</span> <span class="token parameter variable">-t</span> set,get <span class="token parameter variable">-P</span> <span class="token number">16</span> <span class="token parameter variable">-q</span>
SET: <span class="token number">403063.28</span> requests per second
GET: <span class="token number">508388.41</span> requests per second
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="redis-集群使用和配置" tabindex="-1"><a class="header-anchor" href="#redis-集群使用和配置" aria-hidden="true">#</a> Redis 集群使用和配置</h2><p>Redis 3.0 后支持集群模式。</p><h3 id="集群规划" tabindex="-1"><a class="header-anchor" href="#集群规划" aria-hidden="true">#</a> 集群规划</h3><p><code>Redis</code> 集群一般由 <strong>多个节点</strong> 组成，节点数量至少为 <code>6</code> 个，才能保证组成 <strong>完整高可用</strong> 的集群。</p><p>理想情况当然是所有节点各自在不同的机器上，首先于资源，本人在部署 Redis 集群时，只得到 3 台服务器。所以，我计划每台服务器部署 2 个 Redis 节点。</p><p>【示例】最简高可用 Redis 集群规划</p><p>机器配置：16G 内存 + 8 核 CPU + 1T 磁盘</p><p>Redis 进程分配 10 G 内存。一般线上生产环境，Redis 的内存尽量不要超过 10g，超过 10g 可能会有问题。</p><p>集群拓扑：三主三从；三哨兵，每个哨兵监听所有主节点。</p><p>估算性能：</p><ul><li>容量：三主，占用 30 G 内存，所以最大存储容量为 30 G。假设每条数据记录平均 大小为 10 K，则最大能存储 300 万条数据。</li><li>吞吐量：单机一般 TPS/QPS 为 五万到八万左右。假设为五万，那么三主三从架构理论上能达到 TPS 15 万，QPS 30 万。</li></ul><h3 id="部署集群" tabindex="-1"><a class="header-anchor" href="#部署集群" aria-hidden="true">#</a> 部署集群</h3><blockquote><p>Redis 集群节点的安装与单节点服务相同，差异仅在于部署方式。</p><p>注意：为了演示方便，本示例将所有 Redis 集群节点都部署在一台机器上，实际生产环境中，基本都会将节点部署在不同机器上。要求更高的，可能还要考虑多机房部署。</p></blockquote><p>（1）创建节点目录</p><p>我个人偏好将软件放在 <code>/opt</code> 目录下，在我的机器中，Redis 都安装在 <code>/usr/local/redis</code> 目录下。所以，下面的命令和配置都假设 Redis 安装目录为 <code>/usr/local/redis</code> 。</p><p>确保机器上已经安装了 Redis 后，执行以下命令，创建 Redis 集群节点实例目录：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /usr/local/redis/conf/7001
<span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /usr/local/redis/conf/7002
<span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /usr/local/redis/conf/7003
<span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /usr/local/redis/conf/7004
<span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /usr/local/redis/conf/7005
<span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /usr/local/redis/conf/7006
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）配置集群节点</p><p>每个实例目录下，新建 <code>redis.conf</code> 配置文件。</p><p>实例配置模板以 7001 节点为例（其他节点，完全替换配置中的端口号 7001 即可），如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 端口号</span>
port <span class="token number">7001</span>
<span class="token comment"># 绑定的主机端口（0.0.0.0 表示允许远程访问）</span>
<span class="token builtin class-name">bind</span> <span class="token number">0.0</span>.0.0
<span class="token comment"># 以守护进程方式启动</span>
daemonize <span class="token function">yes</span>

<span class="token comment"># 开启集群模式</span>
cluster-enabled <span class="token function">yes</span>
<span class="token comment"># 集群的配置，配置文件首次启动自动生成</span>
cluster-config-file /usr/local/redis/conf/7001/7001.conf
<span class="token comment"># 请求超时时间，设置 10 秒</span>
cluster-node-timeout <span class="token number">10000</span>

<span class="token comment"># 开启 AOF 持久化</span>
appendonly <span class="token function">yes</span>
<span class="token comment"># 数据存放目录</span>
<span class="token function">dir</span> /usr/local/redis/conf/7001
<span class="token comment"># 进程文件</span>
pidfile /usr/local/redis/conf/7001/7001.pid
<span class="token comment"># 日志文件</span>
logfile /usr/local/redis/conf/7001/7001.log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（3）批量启动 Redis 节点</p><p>Redis 的 utils/create-cluster 目录下自带了一个名为 create-cluster 的脚本工具，可以利用它来新建、启动、停止、重启 Redis 节点。</p><p>脚本中有几个关键参数：</p><ul><li><code>PORT</code>=30000 - 初始端口号</li><li><code>TIMEOUT</code>=2000 - 超时时间</li><li><code>NODES</code>=6 - 节点数</li><li><code>REPLICAS</code>=1 - 备份数</li></ul><p>脚本中的每个命令项会根据初始端口号，以及设置的节点数，遍历的去执行操作。</p><p>由于前面的规划中，节点端口是从 7001 ~ 7006，所以需要将 PORT 变量设为 7000。</p><p>脚本中启动每个 Redis 节点是通过指定命令行参数来配置属性。所以，我们需要改一下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">PORT</span><span class="token operator">=</span><span class="token number">7000</span>
<span class="token assign-left variable">TIMEOUT</span><span class="token operator">=</span><span class="token number">2000</span>
<span class="token assign-left variable">NODES</span><span class="token operator">=</span><span class="token number">6</span>
<span class="token assign-left variable">ENDPORT</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>PORT<span class="token operator">+</span>NODES<span class="token variable">))</span></span>

<span class="token comment"># ...</span>

<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">&quot;<span class="token variable">$1</span>&quot;</span> <span class="token operator">==</span> <span class="token string">&quot;start&quot;</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
    <span class="token keyword">while</span> <span class="token punctuation">[</span> <span class="token variable"><span class="token variable">$((</span>PORT <span class="token operator">&lt;</span> ENDPORT<span class="token variable">))</span></span> <span class="token operator">!=</span> <span class="token string">&quot;0&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">do</span>
        <span class="token assign-left variable">PORT</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>PORT<span class="token operator">+</span><span class="token number">1</span><span class="token variable">))</span></span>
        <span class="token builtin class-name">echo</span> <span class="token string">&quot;Starting <span class="token variable">$PORT</span>&quot;</span>
        /usr/local/redis/src/redis-server /usr/local/redis/conf/<span class="token variable">\${PORT}</span>/redis.conf
    <span class="token keyword">done</span>
    <span class="token builtin class-name">exit</span> <span class="token number">0</span>
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>好了，在每台服务器上，都执行 <code>./create-cluster start</code> 来启动节点。</p><p>然后，通过 ps 命令来确认 Redis 进程是否已经工作：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># root @ dbClusterDev01 in /usr/local/redis/conf [11:07:55]</span>
$ <span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span> <span class="token function">grep</span> redis
root      <span class="token number">4604</span>     <span class="token number">1</span>  <span class="token number">0</span> <span class="token number">11</span>:07 ?        00:00:00 /opt/redis/src/redis-server <span class="token number">0.0</span>.0.0:7001 <span class="token punctuation">[</span>cluster<span class="token punctuation">]</span>
root      <span class="token number">4609</span>     <span class="token number">1</span>  <span class="token number">0</span> <span class="token number">11</span>:07 ?        00:00:00 /opt/redis/src/redis-server <span class="token number">0.0</span>.0.0:7002 <span class="token punctuation">[</span>cluster<span class="token punctuation">]</span>
root      <span class="token number">4614</span>     <span class="token number">1</span>  <span class="token number">0</span> <span class="token number">11</span>:07 ?        00:00:00 /opt/redis/src/redis-server <span class="token number">0.0</span>.0.0:7003 <span class="token punctuation">[</span>cluster<span class="token punctuation">]</span>
root      <span class="token number">4619</span>     <span class="token number">1</span>  <span class="token number">0</span> <span class="token number">11</span>:07 ?        00:00:00 /opt/redis/src/redis-server <span class="token number">0.0</span>.0.0:7004 <span class="token punctuation">[</span>cluster<span class="token punctuation">]</span>
root      <span class="token number">4624</span>     <span class="token number">1</span>  <span class="token number">0</span> <span class="token number">11</span>:07 ?        00:00:00 /opt/redis/src/redis-server <span class="token number">0.0</span>.0.0:7005 <span class="token punctuation">[</span>cluster<span class="token punctuation">]</span>
root      <span class="token number">4629</span>     <span class="token number">1</span>  <span class="token number">0</span> <span class="token number">11</span>:07 ?        00:00:00 /opt/redis/src/redis-server <span class="token number">0.0</span>.0.0:7006 <span class="token punctuation">[</span>cluster<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（4）启动集群</p><p>通过 <code>redis-cli --cluster create</code> 命令可以自动配置集群，如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./redis-cli <span class="token parameter variable">--cluster</span> create <span class="token number">127.0</span>.0.1:7001 <span class="token number">127.0</span>.0.1:7002 <span class="token number">127.0</span>.0.2:7003 <span class="token number">127.0</span>.0.2:7004 <span class="token number">127.0</span>.0.3:7005 <span class="token number">127.0</span>.0.3:7006 --cluster-replicas <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>redis-cluster 会根据设置的节点数和副本数自动分片（分配 Hash 虚拟槽 slot），如果满意，输入 yes ，直接开始分片。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Performing <span class="token builtin class-name">hash</span> slots allocation on <span class="token number">6</span> nodes<span class="token punctuation">..</span>.
Master<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> -<span class="token operator">&gt;</span> Slots <span class="token number">0</span> - <span class="token number">5460</span>
Master<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> -<span class="token operator">&gt;</span> Slots <span class="token number">5461</span> - <span class="token number">10922</span>
Master<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> -<span class="token operator">&gt;</span> Slots <span class="token number">10923</span> - <span class="token number">16383</span>
Adding replica <span class="token number">127.0</span>.0.2:7004 to <span class="token number">127.0</span>.0.1:7001
Adding replica <span class="token number">127.0</span>.0.3:7006 to <span class="token number">127.0</span>.0.2:7003
Adding replica <span class="token number">127.0</span>.0.1:7002 to <span class="token number">127.0</span>.0.3:7005
M: b721235997deb6b9a7a2be690b5b9663db8057c6 <span class="token number">127.0</span>.0.1:7001
   slots:<span class="token punctuation">[</span><span class="token number">0</span>-5460<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">5461</span> slots<span class="token punctuation">)</span> master
S: bda9b7036df0bbefe601bda4ce45d3787a2e9bd9 <span class="token number">127.0</span>.0.1:7002
   replicates 3623fff69b5243ed18c02a2fbb6f53069b0f1505
M: 91523c0391a044da6cc9f53bb965aabe89502187 <span class="token number">127.0</span>.0.2:7003
   slots:<span class="token punctuation">[</span><span class="token number">5461</span>-10922<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">5462</span> slots<span class="token punctuation">)</span> master
S: 9d899cbe49dead7b8c4f769920cdb75714a441ae <span class="token number">127.0</span>.0.2:7004
   replicates b721235997deb6b9a7a2be690b5b9663db8057c6
M: 3623fff69b5243ed18c02a2fbb6f53069b0f1505 <span class="token number">127.0</span>.0.3:7005
   slots:<span class="token punctuation">[</span><span class="token number">10923</span>-16383<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">5461</span> slots<span class="token punctuation">)</span> master
S: a2869dc153ea4977ca790b76483574a5d56cb40e <span class="token number">127.0</span>.0.3:7006
   replicates 91523c0391a044da6cc9f53bb965aabe89502187
Can I <span class="token builtin class-name">set</span> the above configuration? <span class="token punctuation">(</span>type <span class="token string">&#39;yes&#39;</span> to accept<span class="token punctuation">)</span>: <span class="token function">yes</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Nodes configuration updated
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Assign a different config epoch to each <span class="token function">node</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Sending CLUSTER MEET messages to <span class="token function">join</span> the cluster
Waiting <span class="token keyword">for</span> the cluster to <span class="token function">join</span>
<span class="token punctuation">..</span><span class="token punctuation">..</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Performing Cluster Check <span class="token punctuation">(</span>using <span class="token function">node</span> <span class="token number">127.0</span>.0.1:7001<span class="token punctuation">)</span>
M: b721235997deb6b9a7a2be690b5b9663db8057c6 <span class="token number">127.0</span>.0.1:7001
   slots:<span class="token punctuation">[</span><span class="token number">0</span>-5460<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">5461</span> slots<span class="token punctuation">)</span> master
   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
S: a2869dc153ea4977ca790b76483574a5d56cb40e <span class="token number">127.0</span>.0.1:7006
   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave
   replicates 91523c0391a044da6cc9f53bb965aabe89502187
M: 91523c0391a044da6cc9f53bb965aabe89502187 <span class="token number">127.0</span>.0.1:7003
   slots:<span class="token punctuation">[</span><span class="token number">5461</span>-10922<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">5462</span> slots<span class="token punctuation">)</span> master
   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
M: 3623fff69b5243ed18c02a2fbb6f53069b0f1505 <span class="token number">127.0</span>.0.1:7005
   slots:<span class="token punctuation">[</span><span class="token number">10923</span>-16383<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">5461</span> slots<span class="token punctuation">)</span> master
   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
S: 9d899cbe49dead7b8c4f769920cdb75714a441ae <span class="token number">127.0</span>.0.1:7004
   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave
   replicates b721235997deb6b9a7a2be690b5b9663db8057c6
S: bda9b7036df0bbefe601bda4ce45d3787a2e9bd9 <span class="token number">127.0</span>.0.1:7002
   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave
   replicates 3623fff69b5243ed18c02a2fbb6f53069b0f1505
<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All nodes agree about slots configuration.
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Check <span class="token keyword">for</span> <span class="token function">open</span> slots<span class="token punctuation">..</span>.
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Check slots coverage<span class="token punctuation">..</span>.
<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All <span class="token number">16384</span> slots covered.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（5）日常维护操作</p><ul><li>关闭集群 - <code>./create-cluster stop</code></li><li>检查集群是否健康（指定任意节点即可）：<code>./redis-cli --cluster check &lt;ip:port&gt;</code></li><li>尝试修复集群节点：<code>./redis-cli --cluster fix &lt;ip:port&gt;</code></li></ul><h3 id="部署哨兵" tabindex="-1"><a class="header-anchor" href="#部署哨兵" aria-hidden="true">#</a> 部署哨兵</h3><p>redis-cluster 实现了 Redis 的分片、复制。</p><p>但 redis-cluster 没有解决故障转移问题，一旦任意分片的 Master 节点宕机、网络不通，就会导致 redis-cluster 的集群不能工作。为了解决高可用的问题，Redis 提供了 Redis 哨兵来监控 Redis 节点状态，并且会在 Master 宕机时，发起选举，将这个 Master 的一个 Slave 节点选举为 Master。</p><p>（1）创建节点目录</p><p>我个人偏好将软件放在 <code>/opt</code> 目录下，在我的机器中，Redis 都安装在 <code>/usr/local/redis</code> 目录下。所以，下面的命令和配置都假设 Redis 安装目录为 <code>/usr/local/redis</code> 。</p><p>确保机器上已经安装了 Redis 后，执行以下命令，创建 Redis 集群节点实例目录：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /usr/local/redis/conf/27001
<span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /usr/local/redis/conf/27002
<span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /usr/local/redis/conf/27003
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）配置集群节点</p><p>每个实例目录下，新建 <code>redis.conf</code> 配置文件。</p><p>实例配置模板以 7001 节点为例（其他节点，完全替换配置中的端口号 7001 即可），如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>port <span class="token number">27001</span>
daemonize <span class="token function">yes</span>
sentinel monitor redis-master <span class="token number">172.22</span>.6.3 <span class="token number">7001</span> <span class="token number">2</span>
sentinel down-after-milliseconds redis-master <span class="token number">5000</span>
sentinel failover-timeout redis-master <span class="token number">900000</span>
sentinel parallel-syncs redis-master <span class="token number">1</span>
<span class="token comment">#sentinel auth-pass redis-master 123456</span>
logfile /usr/local/redis/conf/27001/27001.log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（3）批量启动哨兵节点</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/opt/redis/src/redis-sentinel /usr/local/redis/conf/27001/sentinel.conf
/opt/redis/src/redis-sentinel /usr/local/redis/conf/27002/sentinel.conf
/opt/redis/src/redis-sentinel /usr/local/redis/conf/27003/sentinel.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="扩容" tabindex="-1"><a class="header-anchor" href="#扩容" aria-hidden="true">#</a> 扩容</h3><p>（1）查看信息</p><p>进入任意节点</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>./redis-cli -h 172.22.6.3 -p 7001
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>cluster info 查看集群节点状态</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>172.22.6.3:7001&gt; cluster nodes
f158bf70bb2767cac271ce4efcfc14ba0b7ca98b 172.22.6.3:7006@17006 slave e7aa182e756b76ec85b471797db9b66e4b2da725 0 1594528179000 6 connected
f348e67648460c7a800120d69b4977bf2e4524cb 172.22.6.3:7001@17001 myself,master - 0 1594528179000 1 connected 0-5460
52601e2d4af0e64b83f4cc6d20e8316d0ac38b99 172.22.6.3:7004@17004 slave 4802fafe897160c46392c6e569d6f5e466cca696 0 1594528178000 4 connected
c6c6a68674ae8aac3c6ec792c8af4dc1228c6c31 172.22.6.3:7005@17005 slave f348e67648460c7a800120d69b4977bf2e4524cb 0 1594528179852 5 connected
e7aa182e756b76ec85b471797db9b66e4b2da725 172.22.6.3:7002@17002 master - 0 1594528178000 2 connected 5461-10922
4802fafe897160c46392c6e569d6f5e466cca696 172.22.6.3:7003@17003 master - 0 1594528178000 3 connected 10923-16383
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>cluster info 查看集群信息</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>172.22.6.3:7001&gt; cluster info
cluster_state:ok
cluster_slots_assigned:16384
cluster_slots_ok:16384
cluster_slots_pfail:0
cluster_slots_fail:0
cluster_known_nodes:6
cluster_size:3
cluster_current_epoch:6
cluster_my_epoch:1
cluster_stats_messages_ping_sent:3406
cluster_stats_messages_pong_sent:3569
cluster_stats_messages_publish_sent:5035
cluster_stats_messages_sent:12010
cluster_stats_messages_ping_received:3564
cluster_stats_messages_pong_received:3406
cluster_stats_messages_meet_received:5
cluster_stats_messages_publish_received:5033
cluster_stats_messages_received:12008
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）添加节点到集群</p><p>将已启动的节点实例添加到集群中</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>redis-cli --cluster add-node 127.0.0.1:7007 127.0.0.1:7008
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>添加主节点</strong></p><p>添加一组主节点</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>./redis-cli --cluster add-node 172.22.6.3:7007 172.22.6.3:7001
./redis-cli --cluster add-node 172.22.6.3:7008 172.22.6.3:7001
./redis-cli --cluster add-node 172.22.6.3:7009 172.22.6.3:7001
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看节点状态</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>172.22.6.3:7001&gt; cluster nodes
f158bf70bb2767cac271ce4efcfc14ba0b7ca98b 172.22.6.3:7006@17006 slave e7aa182e756b76ec85b471797db9b66e4b2da725 0 1594529342575 6 connected
f348e67648460c7a800120d69b4977bf2e4524cb 172.22.6.3:7001@17001 myself,master - 0 1594529340000 1 connected 0-5460
55cacf121662833a4a19dbeb4a5df712cfedf77f 172.22.6.3:7009@17009 master - 0 1594529342000 0 connected
c6c6a68674ae8aac3c6ec792c8af4dc1228c6c31 172.22.6.3:7005@17005 slave f348e67648460c7a800120d69b4977bf2e4524cb 0 1594529341573 5 connected
4802fafe897160c46392c6e569d6f5e466cca696 172.22.6.3:7003@17003 master - 0 1594529343577 3 connected 10923-16383
e7aa182e756b76ec85b471797db9b66e4b2da725 172.22.6.3:7002@17002 master - 0 1594529342000 2 connected 5461-10922
e5ba78fe629115977a74fbbe1478caf8868d6d55 172.22.6.3:7007@17007 master - 0 1594529341000 0 connected
52601e2d4af0e64b83f4cc6d20e8316d0ac38b99 172.22.6.3:7004@17004 slave 4802fafe897160c46392c6e569d6f5e466cca696 0 1594529340000 4 connected
79d4fffc2cec210556c3b4c44e63ab506e87eda3 172.22.6.3:7008@17008 master - 0 1594529340000 7 connected
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现，新加入的三个主节点，还没有分配哈希槽，所以，暂时还无法访问。</p><p><strong>添加从节点</strong></p><p>--slave：设置该参数，则新节点以 slave 的角色加入集群<br> --master-id：这个参数需要设置了--slave 才能生效，--master-id 用来指定新节点的 master 节点。如果不设置该参数，则会随机为节点选择 master 节点。</p><p>语法</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>redis-cli --cluster add-node  新节点IP地址：端口    存在节点IP：端口 --cluster-slave （从节点） --cluster-master-id （master节点的ID）
redis-cli --cluster add-node   10.42.141.119:6379  10.42.166.105:6379  --cluster-slave   --cluster-master-id  dfa238fff8a7a49230cff7eb74f573f5645c8ec5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>示例</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>./redis-cli --cluster add-node 172.22.6.3:7010 172.22.6.3:7007 --cluster-slave
./redis-cli --cluster add-node 172.22.6.3:7011 172.22.6.3:7008 --cluster-slave
./redis-cli --cluster add-node 172.22.6.3:7012 172.22.6.3:7009 --cluster-slave
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看状态</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>172.22.6.3:7001&gt; cluster nodes
ef5c1b9ce4cc795dc12b2c1e8736a572647b4c3e 172.22.6.3:7011@17011 slave 79d4fffc2cec210556c3b4c44e63ab506e87eda3 0 1594529492043 7 connected
f158bf70bb2767cac271ce4efcfc14ba0b7ca98b 172.22.6.3:7006@17006 slave e7aa182e756b76ec85b471797db9b66e4b2da725 0 1594529491943 6 connected
f348e67648460c7a800120d69b4977bf2e4524cb 172.22.6.3:7001@17001 myself,master - 0 1594529488000 1 connected 0-5460
5140d1129ed850df59c51cf818c4eb74545d9959 172.22.6.3:7010@17010 slave e5ba78fe629115977a74fbbe1478caf8868d6d55 0 1594529488000 0 connected
55cacf121662833a4a19dbeb4a5df712cfedf77f 172.22.6.3:7009@17009 master - 0 1594529488000 8 connected
c6c6a68674ae8aac3c6ec792c8af4dc1228c6c31 172.22.6.3:7005@17005 slave f348e67648460c7a800120d69b4977bf2e4524cb 0 1594529490000 5 connected
4802fafe897160c46392c6e569d6f5e466cca696 172.22.6.3:7003@17003 master - 0 1594529489939 3 connected 10923-16383
e7aa182e756b76ec85b471797db9b66e4b2da725 172.22.6.3:7002@17002 master - 0 1594529491000 2 connected 5461-10922
e5ba78fe629115977a74fbbe1478caf8868d6d55 172.22.6.3:7007@17007 master - 0 1594529490942 0 connected
52601e2d4af0e64b83f4cc6d20e8316d0ac38b99 172.22.6.3:7004@17004 slave 4802fafe897160c46392c6e569d6f5e466cca696 0 1594529491000 4 connected
02e9f57b5b45c350dc57acf1c8efa8db136db7b7 172.22.6.3:7012@17012 master - 0 1594529489000 0 connected
79d4fffc2cec210556c3b4c44e63ab506e87eda3 172.22.6.3:7008@17008 master - 0 1594529489000 7 connected
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分配哈希槽</p><p>执行 <code>./redis-cli --cluster rebalance 172.22.6.3:7001 --cluster-threshold 1 --cluster-use-empty-masters</code></p><p>参数说明：</p><p>rebalance：表明让 Redis 自动根据节点数进行均衡哈希槽分配。</p><p>--cluster-use-empty-masters：表明</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20200712125827.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>执行结束后，查看状态：</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20200712130234.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="redis-命令" tabindex="-1"><a class="header-anchor" href="#redis-命令" aria-hidden="true">#</a> Redis 命令</h2><h3 id="通用命令" tabindex="-1"><a class="header-anchor" href="#通用命令" aria-hidden="true">#</a> 通用命令</h3>`,95),O={href:"https://redis.io/commands",target:"_blank",rel:"noopener noreferrer"},M=e("strong",null,"Redis 命令官方文档",-1),C={href:"https://www.cheatography.com/tasjaevan/cheat-sheets/redis/",target:"_blank",rel:"noopener noreferrer"},z=t('<h3 id="集群命令" tabindex="-1"><a class="header-anchor" href="#集群命令" aria-hidden="true">#</a> 集群命令</h3><ul><li><strong>集群</strong><ul><li><code>cluster info</code> - 打印集群的信息</li><li><code>cluster nodes</code> - 列出集群当前已知的所有节点（ node），以及这些节点的相关信息。</li></ul></li><li><strong>节点</strong><ul><li><code>cluster meet &lt;ip&gt; &lt;port&gt;</code> - 将 ip 和 port 所指定的节点添加到集群当中，让它成为集群的一份子。</li><li><code>cluster forget &lt;node_id&gt;</code> - 从集群中移除 node_id 指定的节点。</li><li><code>cluster replicate &lt;node_id&gt;</code> - 将当前节点设置为 node_id 指定的节点的从节点。</li><li><code>cluster saveconfig</code> - 将节点的配置文件保存到硬盘里面。</li></ul></li><li><strong>槽(slot)</strong><ul><li><code>cluster addslots &lt;slot&gt; [slot ...]</code> - 将一个或多个槽（ slot）指派（ assign）给当前节点。</li><li><code>cluster delslots &lt;slot&gt; [slot ...]</code> - 移除一个或多个槽对当前节点的指派。</li><li><code>cluster flushslots</code> - 移除指派给当前节点的所有槽，让当前节点变成一个没有指派任何槽的节点。</li><li><code>cluster setslot &lt;slot&gt; node &lt;node_id&gt;</code> - 将槽 slot 指派给 node_id 指定的节点，如果槽已经指派给另一个节点，那么先让另一个节点删除该槽&gt;，然后再进行指派。</li><li><code>cluster setslot &lt;slot&gt; migrating &lt;node_id&gt;</code> - 将本节点的槽 slot 迁移到 node_id 指定的节点中。</li><li><code>cluster setslot &lt;slot&gt; importing &lt;node_id&gt;</code> - 从 node_id 指定的节点中导入槽 slot 到本节点。</li><li><code>cluster setslot &lt;slot&gt; stable</code> - 取消对槽 slot 的导入（ import）或者迁移（ migrate）。</li></ul></li><li><strong>键</strong><ul><li><code>cluster keyslot &lt;key&gt;</code> - 计算键 key 应该被放置在哪个槽上。</li><li><code>cluster countkeysinslot &lt;slot&gt;</code> - 返回槽 slot 目前包含的键值对数量。</li><li><code>cluster getkeysinslot &lt;slot&gt; &lt;count&gt;</code> - 返回 count 个 slot 槽中的键。</li></ul></li></ul><h3 id="重新分片" tabindex="-1"><a class="header-anchor" href="#重新分片" aria-hidden="true">#</a> 重新分片</h3><p>添加节点：./redis-cli --cluster add-node 192.168.1.136:7007 192.168.1.136:7001 --cluster-slave</p><p>redis-cli --cluster reshard 172.22.6.3 7001</p><h2 id="客户端" tabindex="-1"><a class="header-anchor" href="#客户端" aria-hidden="true">#</a> 客户端</h2>',6),A={href:"https://github.com/uglide/RedisDesktopManager",target:"_blank",rel:"noopener noreferrer"},I=e("strong",null,"RedisDesktopManager",-1),N=e("h2",{id:"参考资料",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#参考资料","aria-hidden":"true"},"#"),s(" 参考资料")],-1),D=e("strong",null,"官网",-1),U={href:"https://redis.io/",target:"_blank",rel:"noopener noreferrer"},j={href:"https://github.com/antirez/redis",target:"_blank",rel:"noopener noreferrer"},B={href:"http://redis.cn/",target:"_blank",rel:"noopener noreferrer"},G=e("strong",null,"书籍",-1),$={href:"https://item.jd.com/11791607.html",target:"_blank",rel:"noopener noreferrer"},L={href:"https://item.jd.com/11486101.html",target:"_blank",rel:"noopener noreferrer"},V=e("strong",null,"教程",-1),K={href:"http://redisdoc.com/",target:"_blank",rel:"noopener noreferrer"},H=e("strong",null,"文章",-1),F={href:"https://juejin.im/post/5b8fc5536fb9a05d2d01fb11",target:"_blank",rel:"noopener noreferrer"};function W(Z,Q){const n=i("ExternalLinkIcon");return d(),c("div",null,[o,e("p",null,[p,e("a",u,[s("https://github.com/MSOpenTech/redis/releases"),a(n)]),s("。")]),b,e("p",null,[v,s(),e("a",m,[s("http://redis.io/download，下载最新文档版本。"),a(n)])]),g,e("blockquote",null,[e("p",null,[s("CentOS7 环境安装脚本："),e("a",h,[s("软件运维配置脚本集合"),a(n)])])]),f,e("blockquote",null,[k,x,_,y,e("ul",null,[e("li",null,[s("自描述文档 "),e("a",R,[s("redis.conf for Redis 2.8"),a(n)])]),e("li",null,[s("自描述文档 "),e("a",w,[s("redis.conf for Redis 2.6"),a(n)]),s(".")]),e("li",null,[s("自描述文档 "),e("a",E,[s("redis.conf for Redis 2.4"),a(n)]),s(".")])]),q]),T,e("blockquote",null,[e("p",null,[s("参考官方文档："),e("a",S,[s("How fast is Redis?"),a(n)])])]),P,e("blockquote",null,[e("p",null,[s("命令详细用法，请参考 "),e("a",O,[M,a(n)])]),e("p",null,[s("搬迁两张 cheat sheet 图，原址："),e("a",C,[s("https://www.cheatography.com/tasjaevan/cheat-sheets/redis/"),a(n)])])]),z,e("p",null,[s("推荐使用 "),e("a",A,[I,a(n)])]),N,e("ul",null,[e("li",null,[D,e("ul",null,[e("li",null,[e("a",U,[s("Redis 官网"),a(n)])]),e("li",null,[e("a",j,[s("Redis Github"),a(n)])]),e("li",null,[e("a",B,[s("Redis 官方文档中文版"),a(n)])])])]),e("li",null,[G,e("ul",null,[e("li",null,[e("a",$,[s("《Redis 实战》"),a(n)])]),e("li",null,[e("a",L,[s("《Redis 设计与实现》"),a(n)])])])]),e("li",null,[V,e("ul",null,[e("li",null,[e("a",K,[s("Redis 命令参考"),a(n)])])])]),e("li",null,[H,e("ul",null,[e("li",null,[e("a",F,[s("深入剖析 Redis 系列(三) - Redis 集群模式搭建与原理详解"),a(n)])])])])])])}const Y=l(r,[["render",W],["__file","index.html.vue"]]);export{Y as default};
