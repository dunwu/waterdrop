const e=JSON.parse('{"key":"v-378fa960","path":"/pages/8b685389/","title":"Java 并发之分工工具","lang":"zh-CN","frontmatter":{"title":"Java 并发之分工工具","date":"2020-07-14T15:27:46.000Z","permalink":"/pages/8b685389/","category":["Java","JavaCore","并发"],"tag":["Java","JavaCore","并发","FutureTask","CompletableFuture","CompletionStage","CompletionService","ForkJoinPool"],"description":"Java 并发之分工工具 对于简单的并行任务，你可以通过“线程池 + Future”的方案来解决；如果任务之间有聚合关系，无论是 AND 聚合还是 OR 聚合，都可以通过 CompletableFuture 来解决；而批量的并行任务，则可以通过 CompletionService 来解决。 FutureTask FutureTask 有两个构造函数： FutureTask(Callable&lt;V&gt; callable); FutureTask(Runnable runnable, V result);","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/8b685389/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"Java 并发之分工工具"}],["meta",{"property":"og:description","content":"Java 并发之分工工具 对于简单的并行任务，你可以通过“线程池 + Future”的方案来解决；如果任务之间有聚合关系，无论是 AND 聚合还是 OR 聚合，都可以通过 CompletableFuture 来解决；而批量的并行任务，则可以通过 CompletionService 来解决。 FutureTask FutureTask 有两个构造函数： FutureTask(Callable&lt;V&gt; callable); FutureTask(Runnable runnable, V result);"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-15T23:50:15.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"JavaCore"}],["meta",{"property":"article:tag","content":"并发"}],["meta",{"property":"article:tag","content":"FutureTask"}],["meta",{"property":"article:tag","content":"CompletableFuture"}],["meta",{"property":"article:tag","content":"CompletionStage"}],["meta",{"property":"article:tag","content":"CompletionService"}],["meta",{"property":"article:tag","content":"ForkJoinPool"}],["meta",{"property":"article:published_time","content":"2020-07-14T15:27:46.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-15T23:50:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 并发之分工工具\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-07-14T15:27:46.000Z\\",\\"dateModified\\":\\"2025-09-15T23:50:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"FutureTask","slug":"futuretask","link":"#futuretask","children":[]},{"level":2,"title":"CompletableFuture","slug":"completablefuture","link":"#completablefuture","children":[]},{"level":2,"title":"CompletionStage","slug":"completionstage","link":"#completionstage","children":[{"level":3,"title":"串行关系","slug":"串行关系","link":"#串行关系","children":[]},{"level":3,"title":"描述 AND 汇聚关系","slug":"描述-and-汇聚关系","link":"#描述-and-汇聚关系","children":[]},{"level":3,"title":"描述 OR 汇聚关系","slug":"描述-or-汇聚关系","link":"#描述-or-汇聚关系","children":[]},{"level":3,"title":"异常处理","slug":"异常处理","link":"#异常处理","children":[]}]},{"level":2,"title":"CompletionService","slug":"completionservice","link":"#completionservice","children":[]},{"level":2,"title":"ForkJoinPool","slug":"forkjoinpool","link":"#forkjoinpool","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1757980215000,"updatedTime":1757980215000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":1}]},"readingTime":{"minutes":12.33,"words":3700},"filePathRelative":"01.Java/JavaCore/并发/Java_并发_分工工具.md","localizedDate":"2020年7月14日","excerpt":"<h1> Java 并发之分工工具</h1>\\n<p><strong>对于简单的并行任务，你可以通过“线程池 + Future”的方案来解决；如果任务之间有聚合关系，无论是 AND 聚合还是 OR 聚合，都可以通过 CompletableFuture 来解决；而批量的并行任务，则可以通过 CompletionService 来解决。</strong></p>\\n<h2> FutureTask</h2>\\n<p>FutureTask 有两个构造函数：</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token class-name\\">FutureTask</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Callable</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">V</span><span class=\\"token punctuation\\">&gt;</span></span> callable<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token class-name\\">FutureTask</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Runnable</span> runnable<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">V</span> result<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as data};
