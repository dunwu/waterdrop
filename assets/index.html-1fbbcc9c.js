const e=JSON.parse('{"key":"v-54b0d4fb","path":"/pages/d3e5ba3e/","title":"Java 并发之同步工具","lang":"zh-CN","frontmatter":{"title":"Java 并发之同步工具","date":"2019-12-24T23:52:25.000Z","permalink":"/pages/d3e5ba3e/","category":["Java","JavaCore","并发"],"tag":["Java","JavaCore","并发","CountDownLatch","CyclicBarrier","Semaphore"],"description":"Java 并发之同步工具 Semaphore Semaphore 译为信号量，是一种同步机制，用于控制多线程对共享资源的访问。信号量是由计算机科学家 Edsger Dijkstra 于 1965 年提出的，用于解决所谓的“临界区”问题，即多个进程或线程试图同时访问共享资源（如打印机、内存缓冲区等）时可能出现的问题。 信号量模型 信号量模型还是很简单的，可以简单概括为：一个计数器，一个等待队列，三个方法。在信号量模型里，计数器和等待队列对外是透明的，所以只能通过信号量模型提供的三个方法来访问它们，这三个方法分别是：init()、down() 和 up()。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/d3e5ba3e/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"Java 并发之同步工具"}],["meta",{"property":"og:description","content":"Java 并发之同步工具 Semaphore Semaphore 译为信号量，是一种同步机制，用于控制多线程对共享资源的访问。信号量是由计算机科学家 Edsger Dijkstra 于 1965 年提出的，用于解决所谓的“临界区”问题，即多个进程或线程试图同时访问共享资源（如打印机、内存缓冲区等）时可能出现的问题。 信号量模型 信号量模型还是很简单的，可以简单概括为：一个计数器，一个等待队列，三个方法。在信号量模型里，计数器和等待队列对外是透明的，所以只能通过信号量模型提供的三个方法来访问它们，这三个方法分别是：init()、down() 和 up()。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-15T00:29:21.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"JavaCore"}],["meta",{"property":"article:tag","content":"并发"}],["meta",{"property":"article:tag","content":"CountDownLatch"}],["meta",{"property":"article:tag","content":"CyclicBarrier"}],["meta",{"property":"article:tag","content":"Semaphore"}],["meta",{"property":"article:published_time","content":"2019-12-24T23:52:25.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-15T00:29:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 并发之同步工具\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-12-24T23:52:25.000Z\\",\\"dateModified\\":\\"2025-09-15T00:29:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"Semaphore","slug":"semaphore","link":"#semaphore","children":[{"level":3,"title":"信号量模型","slug":"信号量模型","link":"#信号量模型","children":[]},{"level":3,"title":"Semaphore 使用","slug":"semaphore-使用","link":"#semaphore-使用","children":[]},{"level":3,"title":"Semaphore 原理","slug":"semaphore-原理","link":"#semaphore-原理","children":[]},{"level":3,"title":"实现一个限流器","slug":"实现一个限流器","link":"#实现一个限流器","children":[]}]},{"level":2,"title":"CountDownLatch","slug":"countdownlatch","link":"#countdownlatch","children":[]},{"level":2,"title":"CyclicBarrier","slug":"cyclicbarrier","link":"#cyclicbarrier","children":[]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1757896161000,"updatedTime":1757896161000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":1}]},"readingTime":{"minutes":9.88,"words":2963},"filePathRelative":"01.Java/01.JavaCore/并发/Java_并发_同步工具.md","localizedDate":"2019年12月24日","excerpt":"<h1> Java 并发之同步工具</h1>\\n<h2> Semaphore</h2>\\n<p><strong><code>Semaphore</code> 译为信号量，是一种同步机制，用于控制多线程对共享资源的访问</strong>。信号量是由计算机科学家 Edsger Dijkstra 于 1965 年提出的，用于解决所谓的“临界区”问题，即多个进程或线程试图同时访问共享资源（如打印机、内存缓冲区等）时可能出现的问题。</p>\\n<h3> 信号量模型</h3>\\n<p>信号量模型还是很简单的，可以简单概括为：<strong>一个计数器，一个等待队列，三个方法</strong>。在信号量模型里，计数器和等待队列对外是透明的，所以只能通过信号量模型提供的三个方法来访问它们，这三个方法分别是：init()、down() 和 up()。</p>","autoDesc":true}');export{e as data};
