import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as r,e as l}from"./app-c4d395b2.js";const s={},g=l('<h1 id="计算机网络面试" tabindex="-1"><a class="header-anchor" href="#计算机网络面试" aria-hidden="true">#</a> 计算机网络面试</h1><blockquote><p>如果你不是从事于通信领域，面试时问及计算机网络的知识，一般也就限定在：HTTP（含 HTTPS、Cookie、Session）、TCP、UDP、Socket 这些</p></blockquote><h2 id="综合" tabindex="-1"><a class="header-anchor" href="#综合" aria-hidden="true">#</a> 综合</h2><h3 id="【中等】计算机网络如何分层-🌟🌟🌟" tabindex="-1"><a class="header-anchor" href="#【中等】计算机网络如何分层-🌟🌟🌟" aria-hidden="true">#</a> 【中等】计算机网络如何分层？🌟🌟🌟</h3><blockquote><p>❓ 问题：计算机网络如何分层？各层的作用是什么？各层的主要协议、设备分别是什么？</p><p>这是学习计算机网络知识宏观层面必须要了解的核心点。知道了这些，对于网络的体系结构就基本上了解了。</p></blockquote><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/network/overview/network-layers.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>计算机网络分层一般有三种划分体系：<strong>OSI 分层</strong>；<strong>五层协议分层</strong>；<strong>TCP/IP 协议分层</strong>。</p><ul><li>OSI 的七层体系结构概念清楚，理论完整，但是比较复杂且不实用，所以并不流行。</li><li>五层协议分层是一种折中方案，在现实中更为流行。</li></ul><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/network/overview/网络分层架构图。png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="物理层" tabindex="-1"><a class="header-anchor" href="#物理层" aria-hidden="true">#</a> 物理层</h4><p><strong>物理层（Physical Layer）负责在物理介质上传输原始比特流</strong>（0 和 1）。它定义了设备的电气、机械、功能和规程特性，如电压、线速、线缆、接口、光缆等。</p><ul><li><strong>要点</strong>：<strong>调制</strong>、<strong>解调</strong>、<strong>数字信号</strong>、<strong>模拟信号</strong>、<strong>通信媒介</strong>、<strong>信道复用</strong></li><li><strong>数据单元</strong>：<strong>比特流</strong></li><li><strong>关键协议/标准</strong>： <ul><li><strong>RS-232</strong>、<strong>V.35</strong>：古老的串行通信标准。</li><li><strong>IEEE 802.3</strong>：以太网的相关物理层标准（如 100BASE-TX）。</li><li><strong>T1/E1</strong>、<strong>SONET/SDH</strong>：电信级传输标准。</li></ul></li><li><strong>主要设备</strong>：光纤、同轴电缆、双绞线、中继器和集线器。 <ul><li><strong>集线器 (Hub)</strong>：傻瓜式设备，单纯地放大和转发电信号到所有端口。</li><li><strong>中继器 (Repeater)</strong>：用于放大信号，延长网络传输距离。</li><li><strong>调制解调器 (Modem)</strong>：在数字信号和模拟信号之间进行转换。</li><li><strong>光纤、同轴电缆</strong></li></ul></li></ul><h4 id="数据链路层" tabindex="-1"><a class="header-anchor" href="#数据链路层" aria-hidden="true">#</a> 数据链路层</h4><p><strong>数据链路层（Data Link Layer）负责在同一局域网内的节点之间可靠地传输数据帧</strong>。</p><ul><li><strong>要点</strong>：<strong>点对点信道</strong>、<strong>广播信道</strong>、<strong>局域网</strong>、<strong>以太网</strong>、<strong>MAC</strong>、<strong>适配器</strong><ul><li><strong>帧同步</strong>：将比特流组装成<strong>帧</strong>，标明帧的开始和结束。</li><li><strong>差错控制</strong>：通过 CRC（循环冗余校验）检测物理层产生的比特错误。</li><li><strong>寻址</strong>：使用** MAC 地址**（物理地址）来唯一标识网络设备。</li><li><strong>流量控制</strong>：控制发送速率，防止高速发送方淹没低速接收方。</li></ul></li><li><strong>数据单元</strong>：<strong>帧（frame）</strong></li><li><strong>关键协议</strong><ul><li><strong>以太网 (Ethernet)</strong>：目前最主流的局域网技术。</li><li><strong>PPP</strong>：点对点协议，常用于拨号上网。</li><li><strong>VLAN （虚拟局域网）</strong>：在二层交换机上划分逻辑网络。</li><li>CSMA/CD</li></ul></li><li><strong>主要设备</strong><ul><li><strong>交换机 (Switch)</strong>：智能设备，根据目标 MAC 地址将帧转发到特定的端口。</li><li><strong>网桥 (Bridge)</strong>：连接两个相似的局域网，现已基本被交换机取代。</li></ul></li></ul><h4 id="网络层" tabindex="-1"><a class="header-anchor" href="#网络层" aria-hidden="true">#</a> 网络层</h4><p><strong>网络层（network layer）负责在不同网络之间（网际互连）进行逻辑寻址和分组路由</strong>。</p><ul><li><strong>要点</strong><ul><li><strong>逻辑寻址</strong>：使用** IP 地址**来标识设备和网络。</li><li><strong>路由选择</strong>：根据网络状况，为数据包选择最佳路径。</li><li><strong>分组与重组</strong>：将传输层的数据段封装成<strong>数据包</strong>。</li></ul></li><li><strong>数据单元</strong>：<strong>IP 数据报（packet）</strong></li><li><strong>关键协议</strong>： <ul><li><strong>IP (Internet Protocol)</strong>：核心协议，负责寻址和路由。</li><li><strong>ICMP</strong>：用于网络连通性测试和错误报告，如 <code>ping</code>、<code>tracert</code>。</li><li><strong>ARP</strong>：将 IP 地址解析为 MAC 地址。</li><li><strong>RIP, OSPF, BGP</strong>：动态路由协议。</li></ul></li><li><strong>主要设备</strong><ul><li><strong>路由器 (Router)</strong>：连接不同网络，根据 IP 地址为数据包选择路由。</li></ul></li></ul><h4 id="传输层" tabindex="-1"><a class="header-anchor" href="#传输层" aria-hidden="true">#</a> 传输层</h4><p><strong>传输层（transport layer）负责端到端的通信，为运行在不同主机上的应用进程提供逻辑通信</strong>。</p><ul><li><strong>要点</strong>：滑动窗口、拥塞控制、三次握手 <ul><li><strong>服务</strong>：提供<strong>可靠的</strong>（TCP）或<strong>不可靠的</strong>（UDP）数据传输服务。</li><li><strong>复用与分用</strong>：多个应用进程可以同时使用同一传输层服务。</li><li><strong>差错控制与流量控制</strong>：确保数据完整、有序、不丢失地到达。</li></ul></li><li><strong>数据单元</strong>：<strong>报文段（segment）<strong>或</strong>用户数据报</strong></li><li><strong>关键协议</strong><ul><li><strong>TCP （传输控制协议）</strong>：面向连接的、可靠的、基于字节流的协议。</li><li><strong>UDP （用户数据报协议）</strong>：无连接的、尽最大努力交付的协议，效率高。</li></ul></li><li><strong>主要设备</strong>： <ul><li><strong>防火墙 (Firewall)</strong>：工作在三、四层（甚至更高），可以根据 IP 和端口进行访问控制。</li><li><strong>多层交换机</strong>：除了二层交换功能，还具备基于 IP 地址的三层路由功能。</li></ul></li></ul><h4 id="会话层" tabindex="-1"><a class="header-anchor" href="#会话层" aria-hidden="true">#</a> 会话层</h4><p>会话层（Session Layer）不参与具体的传输，它提供包括访问验证和会话管理在内的建立和维护应用之间通信的机制。</p><h4 id="表示层" tabindex="-1"><a class="header-anchor" href="#表示层" aria-hidden="true">#</a> 表示层</h4><p>表示层（Presentation Layer）是为在应用过程之间传送的信息提供表示方法的服务，它关心的只是发出信息的语法与语义。表示层要完成某些特定的功能，主要有不同数据编码格式的转换，提供数据压缩、解压缩服务，对数据进行加密、解密。</p><h4 id="应用层" tabindex="-1"><a class="header-anchor" href="#应用层" aria-hidden="true">#</a> 应用层</h4><p>应用层（application layer）为<strong>应用程序</strong>提供网络服务接口，是用户与网络的交互界面。</p><ul><li>数据单元：报文（message）</li><li><strong>关键协议</strong><ul><li><strong>HTTP/HTTPS</strong>：万维网数据传送协议。</li><li><strong>FTP</strong>：文件传输协议。</li><li><strong>SMTP/POP3/IMAP</strong>：电子邮件相关协议。</li><li><strong>DNS</strong>：域名系统，将域名解析为 IP 地址。</li><li><strong>DHCP</strong>：动态主机配置协议，自动分配 IP 地址。</li><li><strong>WebSocket</strong>：全双工通信协议。</li></ul></li><li><strong>主要设备</strong>： <ul><li><strong>应用网关/代理服务器</strong>：工作在应用层，可以对特定应用协议的数据进行解析和控制。</li></ul></li></ul><h3 id="【困难】从输入网址到网页显示-期间发生了什么-🌟🌟" tabindex="-1"><a class="header-anchor" href="#【困难】从输入网址到网页显示-期间发生了什么-🌟🌟" aria-hidden="true">#</a> 【困难】从输入网址到网页显示，期间发生了什么？🌟🌟</h3><p><strong>先通过 DNS 找到 IP，再通过 TCP 建立连接，接着通过 TLS 保证安全，最后通过 HTTP 传输页面数据，浏览器最终解析渲染呈现给用户。</strong> 整个过程完美体现了网络分层模型的协同工作。</p><p><strong>核心流程</strong></p><ol><li><strong>DNS 解析</strong>：浏览器查询域名对应的 <strong>IP 地址</strong>（问路）。</li><li><strong>TCP 握手</strong>：与目标 IP 的服务器进行 <strong>三次握手</strong>，建立可靠连接（拨号接通）。</li><li><strong>TLS 握手</strong>（如为 HTTPS）：协商加密密钥，建立安全通道（切换加密线路）。</li><li><strong>发送 HTTP 请求</strong>：发出 <code>GET /index.html</code> 等请求报文（说出需求）。</li><li><strong>接收 HTTP 响应</strong>：服务器返回 <code>200 OK</code> 和网页数据（收到包裹）。</li><li><strong>解析渲染</strong>：浏览器解析 HTML/CSS/JS，渲染显示页面（拆包组装货物）。</li><li><strong>加载资源</strong>：对页面中的图片、样式等资源<strong>重复步骤 2-5</strong>（获取所有零件）。</li><li><strong>TCP 挥手</strong>：页面加载完成后，<strong>四次挥手</strong>释放连接（挂断电话）。</li></ol><p><strong>涉及的核心协议与角色</strong></p><table><thead><tr><th style="text-align:left;">步骤</th><th style="text-align:left;">核心协议</th><th style="text-align:left;">核心角色</th></tr></thead><tbody><tr><td style="text-align:left;">问地址</td><td style="text-align:left;"><strong>DNS</strong> ( over UDP )</td><td style="text-align:left;">DNS 服务器</td></tr><tr><td style="text-align:left;">建连接</td><td style="text-align:left;"><strong>TCP</strong></td><td style="text-align:left;">浏览器、服务器</td></tr><tr><td style="text-align:left;">保安全</td><td style="text-align:left;"><strong>TLS</strong> ( over TCP )</td><td style="text-align:left;">证书颁发机构 (CA)</td></tr><tr><td style="text-align:left;">传内容</td><td style="text-align:left;"><strong>HTTP/HTTPS</strong> ( over TCP )</td><td style="text-align:left;">Web 服务器 (Nginx/Apache)</td></tr></tbody></table><h2 id="http" tabindex="-1"><a class="header-anchor" href="#http" aria-hidden="true">#</a> HTTP</h2><h3 id="【中等】http-1-0-和-2-0-有什么区别-🌟" tabindex="-1"><a class="header-anchor" href="#【中等】http-1-0-和-2-0-有什么区别-🌟" aria-hidden="true">#</a> 【中等】HTTP 1.0 和 2.0 有什么区别？🌟</h3><p>HTTP/2 通过<strong>二进制帧、多路复用和头部压缩</strong>三大技术，从根本上解决了 HTTP/1.x 的性能瓶颈，<strong>大幅降低了延迟并节省了带宽</strong>，是 Web 性能的一次重大飞跃。</p><p><strong>核心改进</strong></p><table><thead><tr><th style="text-align:left;">对比维度</th><th style="text-align:left;">HTTP/1.0</th><th style="text-align:left;">HTTP/2.0</th><th style="text-align:left;">带来的好处</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>协议格式</strong></td><td style="text-align:left;"><strong>纯文本</strong></td><td style="text-align:left;"><strong>二进制帧</strong></td><td style="text-align:left;"><strong>解析高效、错误少、紧凑</strong></td></tr><tr><td style="text-align:left;"><strong>连接方式</strong></td><td style="text-align:left;"><strong>短连接</strong><br>（每次请求新建 TCP 连接）</td><td style="text-align:left;"><strong>多路复用</strong><br>（单连接并行处理无数请求）</td><td style="text-align:left;"><strong>极大降低延迟</strong>，减少连接开销，解决应用层队头阻塞</td></tr><tr><td style="text-align:left;"><strong>头部传输</strong></td><td style="text-align:left;"><strong>无压缩</strong><br>（每次发送冗余头部）</td><td style="text-align:left;"><strong>HPACK 压缩</strong><br>（静态表+动态表+哈夫曼编码）</td><td style="text-align:left;"><strong>节省大量带宽</strong> （减少 50%-90%头部大小）</td></tr><tr><td style="text-align:left;"><strong>资源推送</strong></td><td style="text-align:left;"><strong>被动响应</strong><br>（需客户端先请求）</td><td style="text-align:left;"><strong>服务器主动推送</strong><br>（预测并推送相关资源）</td><td style="text-align:left;"><strong>减少往返次数</strong>，提升页面加载速度</td></tr><tr><td style="text-align:left;"><strong>资源调度</strong></td><td style="text-align:left;">优先级支持弱</td><td style="text-align:left;"><strong>原生流优先级</strong><br>（设置权重和依赖）</td><td style="text-align:left;"><strong>优化加载顺序</strong>，提升用户体验</td></tr></tbody></table><p><strong>对开发者的影响</strong></p><ul><li><strong>语法不变</strong>：所有 HTTP 方法 (GET/POST)、状态码 (200/404)、URL 等概念完全保留。</li><li><strong>无需改代码</strong>：性能提升在底层协议栈自动完成，应用层无感知。</li><li><strong>必须 HTTPS</strong>：主流浏览器只支持在加密连接上使用 HTTP/2，推动了全网安全化。</li></ul><h3 id="【中等】http-2-0-和-3-0-有什么区别-🌟" tabindex="-1"><a class="header-anchor" href="#【中等】http-2-0-和-3-0-有什么区别-🌟" aria-hidden="true">#</a> 【中等】HTTP 2.0 和 3.0 有什么区别？🌟</h3><p>HTTP/3 通过将底层协议从 <strong>TCP 替换为 QUIC</strong>，彻底解决了延迟和连接稳定性的瓶颈，尤其在高丢包和移动网络环境下，性能提升显著。对于开发者而言，<strong>HTTP 的语法和 API 保持不变</strong>，所有优化都在底层自动完成。</p><p><strong>核心改进</strong></p><table><thead><tr><th style="text-align:left;">对比维度</th><th style="text-align:left;">HTTP/2</th><th style="text-align:left;">HTTP/3</th><th style="text-align:left;">带来的好处</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>协议</strong></td><td style="text-align:left;"><strong>TCP + TLS</strong> (TCP 层丢失包会阻塞所有流）</td><td style="text-align:left;"><strong>QUIC</strong> （运行在 <strong>UDP</strong> 之上，丢包只影响单个流）</td><td style="text-align:left;">高丢包网络下更稳定、更快速</td></tr><tr><td style="text-align:left;"><strong>连接速度</strong></td><td style="text-align:left;">1-3 次往返 （首次握手）</td><td style="text-align:left;"><strong>1 次往返</strong> （首次），支持 <strong>0-RTT</strong> （重连）</td><td style="text-align:left;">连接建立更快，重复访问速度极快</td></tr><tr><td style="text-align:left;"><strong>网络切换</strong></td><td style="text-align:left;">连接会中断 (IP 变化导致 TCP 连接断裂）</td><td style="text-align:left;"><strong>无缝连接</strong> （通过连接 ID 标识，与 IP 无关）</td><td style="text-align:left;">Wi-Fi/5G 切换无感知，体验更流畅</td></tr><tr><td style="text-align:left;"><strong>安全与纠错</strong></td><td style="text-align:left;">需 TLS 加密</td><td style="text-align:left;"><strong>默认加密</strong>，支持<strong>前向纠错</strong></td><td style="text-align:left;">安全性更高，抗丢包能力更强</td></tr></tbody></table><h3 id="【中等】http-和-https-有什么区别-🌟" tabindex="-1"><a class="header-anchor" href="#【中等】http-和-https-有什么区别-🌟" aria-hidden="true">#</a> 【中等】HTTP 和 HTTPS 有什么区别？🌟</h3><p><strong>HTTPS = HTTP + 加密 + 身份认证 + 数据完整性保护</strong>，是 HTTP 的安全升级版，已成为现代网站的必备标准。</p><p><strong>核心差异</strong></p><table><thead><tr><th style="text-align:left;">特性对比</th><th style="text-align:left;">HTTP</th><th style="text-align:left;">HTTPS</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>数据传输</strong></td><td style="text-align:left;">明文，<strong>不安全</strong></td><td style="text-align:left;"><strong>加密</strong>，防窃听、防篡改</td></tr><tr><td style="text-align:left;"><strong>身份认证</strong></td><td style="text-align:left;">无，<strong>可能遇到假网站</strong></td><td style="text-align:left;"><strong>有</strong>，通过 SSL 证书验证真身</td></tr><tr><td style="text-align:left;"><strong>默认端口</strong></td><td style="text-align:left;"><strong>80</strong></td><td style="text-align:left;"><strong>443</strong></td></tr><tr><td style="text-align:left;"><strong>浏览器显示</strong></td><td style="text-align:left;">网址前显示 <strong>“不安全”</strong></td><td style="text-align:left;">网址前显示 <strong>“锁”图标🔒</strong></td></tr></tbody></table><h3 id="【中等】https-的加密过程是怎样的" tabindex="-1"><a class="header-anchor" href="#【中等】https-的加密过程是怎样的" aria-hidden="true">#</a> 【中等】HTTPS 的加密过程是怎样的？</h3><p>HTTPS 先通过<strong>非对称加密</strong>“安全地约定”一个密码本（会话密钥），之后双方就一直用这个密码本进行<strong>对称加密</strong>的“秘密通话”。</p><p><strong>核心思想：混合加密</strong></p><ul><li><strong>非对称加密（RSA/ECC）</strong>：用于<strong>安全握手</strong>，交换密钥。<strong>安全但慢</strong>。</li><li><strong>对称加密（AES/ChaCha20）</strong>：用于<strong>传输数据</strong>。<strong>快但需解决密钥分发问题</strong>。</li><li><strong>HTTPS 的智慧</strong>：<strong>用非对称加密的安全性来解决对称加密的密钥分发问题</strong>。</li></ul><p><strong>加密四步曲</strong></p><ol><li><p><strong>打招呼与挑战</strong>：</p><ul><li>客户端和服务器互相交换支持的技术参数和<strong>随机数</strong>，为生成密钥准备材料。</li></ul></li><li><p><strong>证书验证</strong>：</p><ul><li>服务器出示由权威机构（CA）颁发的<strong>数字证书</strong>。</li><li>客户端验证证书真伪和有效性，并从中<strong>提取服务器公钥</strong>。</li></ul></li><li><p><strong>密钥协商</strong></p><ul><li>客户端生成一个<strong>预备主密钥</strong>，并用<strong>服务器公钥</strong>加密后发送。</li><li>服务器用自己唯一的<strong>私钥</strong>解密，得到该密钥。</li><li><strong>此时，双方拥有了相同的三个随机数（Client Random, Server Random, Premaster Secret）</strong>，据此独立计算出相同的<strong>会话主密钥</strong>。</li></ul></li><li><p><strong>加密通信</strong>：握手完成，后续所有数据传输都使用刚生成的<strong>会话密钥</strong>进行高效的<strong>对称加密/解密</strong>。</p></li></ol><p><strong>为什么这么做？</strong></p><ul><li><strong>安全</strong>：非对称加密保证了密钥交换过程无法被窃听。</li><li><strong>高效</strong>：对称加密保证了海量数据传输的速度。</li><li><strong>身份认证</strong>：数字证书确保了你在和真正的目标服务器通信，而非中间人。</li></ul><h3 id="【中等】http-与-rpc-之间的区别-🌟" tabindex="-1"><a class="header-anchor" href="#【中等】http-与-rpc-之间的区别-🌟" aria-hidden="true">#</a> 【中等】HTTP 与 RPC 之间的区别？🌟</h3><ul><li><strong>HTTP</strong>：一种具体的<strong>通信协议</strong>（如邮寄的“标准信封格式”）。</li><li><strong>RPC</strong>：一种<strong>通信概念/范式</strong>（“像调用本地函数一样调用远程服务”的理念），<strong>可以用 HTTP 或其他协议来实现</strong>。</li></ul><p><strong>核心对比</strong></p><table><thead><tr><th style="text-align:left;">特性维度</th><th style="text-align:left;">HTTP （常指 RESTful API)</th><th style="text-align:left;">RPC （如 gRPC, Dubbo)</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>设计目标</strong></td><td style="text-align:left;">通用<strong>资源</strong>操作（GET/POST/PUT/DELETE）</td><td style="text-align:left;">远程<strong>方法</strong>调用</td></tr><tr><td style="text-align:left;"><strong>性能</strong></td><td style="text-align:left;">文本传输（JSON/XML），性能相对较低</td><td style="text-align:left;"><strong>二进制编码</strong>（Protobuf 等），性能<strong>高</strong></td></tr><tr><td style="text-align:left;"><strong>协议</strong></td><td style="text-align:left;">标准 HTTP 协议</td><td style="text-align:left;"><strong>可基于 TCP 自定义协议</strong>，也可基于 HTTP/2</td></tr><tr><td style="text-align:left;"><strong>适用场景</strong></td><td style="text-align:left;"><strong>对外开放 API</strong>，跨语言跨平台</td><td style="text-align:left;"><strong>内部微服务</strong>调用，追求高性能治理</td></tr><tr><td style="text-align:left;"><strong>服务治理</strong></td><td style="text-align:left;">需依赖网关、Mesh 等外部组件</td><td style="text-align:left;"><strong>内置</strong>服务发现、熔断等治理能力</td></tr></tbody></table><p><strong>一句话总结</strong></p><ul><li><strong>对外（开放 API）用 HTTP</strong>：通用、标准、兼容性无敌。</li><li><strong>对内（微服务）用 RPC</strong>：高效、治理能力强、性能极致。</li></ul><p><strong>现代趋势</strong>：两者边界模糊，gRPC 等现代 RPC 框架直接基于** HTTP/2 **传输，兼顾了性能与通用性。</p><h2 id="tcp" tabindex="-1"><a class="header-anchor" href="#tcp" aria-hidden="true">#</a> TCP</h2><h3 id="【中等】什么是-tcp-协议" tabindex="-1"><a class="header-anchor" href="#【中等】什么是-tcp-协议" aria-hidden="true">#</a> 【中等】什么是 TCP 协议？</h3><p><strong>TCP</strong>（Transmission Control Protocol），即<strong>传输控制协议</strong>，它是一种<strong>面向连接的</strong>、<strong>可靠的</strong>、<strong>基于字节流</strong>的<strong>传输层通信协议</strong>。</p><p><strong>核心机制</strong></p><table><thead><tr><th style="text-align:left;">机制</th><th style="text-align:left;">作用</th><th style="text-align:left;">简单比喻</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>连接管理</strong></td><td style="text-align:left;">通过<strong>三次握手</strong>建立连接，<strong>四次挥手</strong>断开连接。</td><td style="text-align:left;">打电话前先拨通，说完再见再挂断。</td></tr><tr><td style="text-align:left;"><strong>确认重传</strong></td><td style="text-align:left;">接收方收到包必须回复<strong>确认</strong>，发送方没收到确认就<strong>重发</strong>。</td><td style="text-align:left;">寄挂号信，必须签收回执，没回执就再寄。</td></tr><tr><td style="text-align:left;"><strong>排序机制</strong></td><td style="text-align:left;">给每个数据包标<strong>序号</strong>，接收方按序号<strong>重组</strong>，保证数据有序。</td><td style="text-align:left;">拼图游戏，每块都有编号，按顺序拼好。</td></tr><tr><td style="text-align:left;"><strong>流量控制</strong></td><td style="text-align:left;">接收方告知自身处理能力，防止发送方<strong>发得太快</strong>导致数据溢出。</td><td style="text-align:left;">根据食堂阿姨打饭快慢，调整递盘子的速度。</td></tr></tbody></table><h3 id="【困难】tcp-三次握手的过程是怎样的" tabindex="-1"><a class="header-anchor" href="#【困难】tcp-三次握手的过程是怎样的" aria-hidden="true">#</a> 【困难】TCP 三次握手的过程是怎样的？</h3><blockquote><p>❓ 问题：三次握手有什么用？什么是三次握手？为什么需要三次握手？</p></blockquote><p>（1）三次握手有什么用？</p><ul><li>三次握手负责建立 TCP 双向连接。</li></ul><p>（2）什么是三次握手？</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/network/transport/三次握手。gif" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>如上图所示，三次握手流程如下：</p><ol><li>第一次握手 - 客户端向服务端发送带有 SYN 标志的数据包。</li><li>第二次握手 - 服务端向客户端发送带有 SYN/ACK 标志的数据包。</li><li>第三次握手 - 客户端向服务端发送带有带有 ACK 标志的数据包。</li></ol><p>至此，TCP 三次握手完成，客户端与服务端已建立双向连接。</p><blockquote><p>💡 说明：SYN 为 synchronize 的缩写，ACK 为 acknowledgment 的缩写。</p></blockquote><p>（3）为什么需要三次握手？</p><p>为了便于说明，假设客户端为 A, 服务端为 B。</p><ol><li>第一次握手，A 向 B 发同步消息。B 收到消息后，B 认为：A 发消息没问题；B 收消息没问题。</li><li>第二次握手，B 向 A 发同步消息和确认消息。A 收到消息后，A 认为：A 发消息、收消息都没问题；B 发消息、收消息都没问题。<strong>但是，此时 B 不确定自己发消息是否没问题</strong>，所以就需要第三次握手。</li><li>第三次握手，A 向 B 发确认消息。B 收到消息后。B 认为：B 发消息没问题。</li></ol><h3 id="【困难】tcp-四次挥手的过程是怎样的" tabindex="-1"><a class="header-anchor" href="#【困难】tcp-四次挥手的过程是怎样的" aria-hidden="true">#</a> 【困难】TCP 四次挥手的过程是怎样的？</h3><blockquote><p>❓ 问题：四次挥手有什么用？什么是四次挥手？为什么建立连接是三次握手，关闭连接确是四次挥手呢？</p></blockquote><p>（1）四次挥手有什么用？</p><ul><li>四次挥手负责断开 TCP 连接。</li></ul><p>（2）什么是四次挥手？</p><p>如上图所示，四次挥手流程如下：</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/network/transport/四次挥手。gif" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ol><li>第一次挥手 - 客户端向服务端发送一个 FIN 包，用来关闭客户端到服务端的数据传送。</li><li>第二次挥手 - 服务端收到这个 FIN 包，向客户端发送一个 ACK 包，确认序号为收到的序号加 1。和 SYN 一样，一个 FIN 将占用一个序号。</li><li>第三次挥手 - 服务端关闭与客户端的连接，向客户端发送一个 FIN 包。</li><li>第四次挥手 - 客户端向服务端发送 ACK 包，并将确认序号设置为收到序号加 1。</li></ol><p>（3）为什么建立连接是三次握手，关闭连接确是四次挥手呢？</p><ul><li>建立连接的时候， 服务器在 LISTEN 状态下，收到建立连接请求的 SYN 报文后，把 ACK 和 SYN 放在一个报文里发送给客户端。</li><li>而关闭连接时，服务器收到对方的 FIN 报文时，仅仅表示对方不再发送数据了但是还能接收数据，而自己也未必全部数据都发送给对方了，所以己方可以立即关闭，也可以发送一些数据给对方后，再发送 FIN 报文给对方来表示同意现在关闭连接，因此，己方 ACK 和 FIN 一般都会分开发送，从而导致多了一次。</li></ul><h3 id="【困难】tcp-滑动窗口原理是什么" tabindex="-1"><a class="header-anchor" href="#【困难】tcp-滑动窗口原理是什么" aria-hidden="true">#</a> 【困难】TCP 滑动窗口原理是什么？</h3><blockquote><p>❓ 问题：什么是滑动窗口？滑动窗口原理是什么？</p></blockquote><p>什么是滑动窗口？</p><p><strong>滑动窗口是 TCP 的一种控制网络流量的技术。</strong></p><p><strong>TCP 必需要解决的可靠传输以及包乱序（reordering）的问题</strong>，所以，TCP 必需要知道网络实际的数据处理带宽或是数据处理速度，这样才不会引起网络拥塞，导致丢包。</p><p>TCP 头里有一个字段叫 Window，又叫 Advertised-Window，这个字段是接收端告诉发送端自己还有多少缓冲区可以接收数据。<strong>于是发送端就可以根据这个接收端的处理能力来发送数据，而不会导致接收端处理不过来</strong>。</p><p>滑动窗口原理是什么？</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/1559265819762.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ol><li>已发送已确认 - 数据流中最早的字节已经发送并得到确认。这些数据是站在发送端的角度来看的。上图中的 31 个字节已经发送并确认。</li><li>已发送但尚未确认 - 已发送但尚未得到确认的字节。发送方在确认之前，不认为这些数据已经被处理。上图中的 32 ~ 45 字节为第 2 类。</li><li>未发送而接收方已 Ready - 设备尚未将数据发出 ，但接收方根据最近一次关于发送方一次要发送多少字节确认自己有足够空间。发送方会立即尝试发送。上图中的 46 ~ 51 字节为第 3 类。</li><li>未发送而接收方 Not Ready - 由于接收方 not ready，还不允许将这部分数据发出。上图中的 52 以后的字节为第 4 类。</li></ol><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/1559265927658.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这张图片相对于上一张图片，滑动窗口偏移了 5 个字节，意味着有 5 个已发送的字节得到了确认。</p><h3 id="【困难】tcp-重传机制是什么" tabindex="-1"><a class="header-anchor" href="#【困难】tcp-重传机制是什么" aria-hidden="true">#</a> 【困难】TCP 重传机制是什么？</h3><blockquote><p>❓ 问题：为什么需要重传机制？TCP 有哪些重传机制，原理是什么？</p></blockquote><p>TCP 重传机制确保数据可靠传输，<strong>应对网络丢包</strong>。</p><p><strong>四大触发原因</strong></p><ul><li><strong>数据包丢失</strong>（真丢了）</li><li><strong>确认 ACK 丢失</strong>（对方回了，回执丢了）</li><li><strong>确认 ACK 延迟</strong>（回执来太慢，等不及了）</li><li><strong>接收方处理慢</strong>（对方收到了但没来得及回）</li></ul><p><strong>两大核心机制</strong></p><table><thead><tr><th style="text-align:left;">机制</th><th style="text-align:left;">工作原理</th><th style="text-align:left;">特点</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>超时重传</strong></td><td style="text-align:left;">为一个包启动<strong>定时器</strong>，时间到了（**RTO **超时）就重传。</td><td style="text-align:left;"><strong>最后保险</strong>，效率低，性能差。</td></tr><tr><td style="text-align:left;"><strong>快速重传</strong></td><td style="text-align:left;">收到** 3 个重复 ACK**（意味着后序包到了但前面缺包），<strong>不等超时</strong>立刻重传缺包。</td><td style="text-align:left;"><strong>效率高</strong>，大幅减少等待时间。</td></tr></tbody></table><p><strong>优化补丁：SACK</strong></p><ul><li><strong>作用</strong>：在快速重传基础上，接收方告诉发送方<strong>具体丢了哪些包</strong>。</li><li><strong>好处</strong>：实现<strong>精确重传</strong>，只重传真正丢失的包，避免浪费带宽。</li></ul><h3 id="【困难】tcp-的粘包和拆包能说说吗" tabindex="-1"><a class="header-anchor" href="#【困难】tcp-的粘包和拆包能说说吗" aria-hidden="true">#</a> 【困难】TCP 的粘包和拆包能说说吗？</h3><p>TCP 是<strong>字节流协议</strong>，它只保证数据顺序，<strong>不维护应用层消息的边界</strong>。像用消防水管喝水，发送方是一杯杯倒（消息），接收方是一桶桶接（字节流），一桶里可能有多杯或半杯。</p><p>TCP 粘包拆包是因其<strong>字节流</strong>特性导致的必然现象，<strong>必须在应用层自行定义消息边界</strong>，而<strong>在消息头中携带长度字段</strong>是最通用、最有效的解决方案。</p><table><thead><tr><th style="text-align:left;">现象</th><th style="text-align:left;">描述</th><th style="text-align:left;">简单比喻</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>粘包</strong></td><td style="text-align:left;">接收方一次收到<strong>多个</strong>应用消息包。</td><td style="text-align:left;">收到<code>[AB]</code>而不是<code>[A][B]</code></td></tr><tr><td style="text-align:left;"><strong>拆包/半包</strong></td><td style="text-align:left;">接收方一次只收到<strong>一个</strong>应用消息包的<strong>部分</strong>。</td><td style="text-align:left;">收到<code>[A-]</code>和<code>[-B]</code>而不是完整的<code>[A]</code></td></tr></tbody></table><p><strong>最主流解决方案：长度字段法</strong></p><p>在应用层协议中，<strong>给每个消息添加一个固定长度的消息头</strong>，头里写明后面消息体的长度。</p><ol><li><strong>发送端</strong>：先发 4 字节头（长度），再发<strong>实际数据</strong>。</li><li><strong>接收端</strong>：先读取 <code>4</code>字节头，解析出长度 N；再读取 N 字节，即为一个完整应用消息。</li></ol><p><strong>这是绝大多数 RPC 框架（如 gRPC、Dubbo）和自定义二进制协议的首选方案。</strong></p><p><strong>其他解决方案</strong></p><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">做法</th><th style="text-align:left;">优点</th><th style="text-align:left;">缺点</th><th style="text-align:left;">应用场景</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>定长法</strong></td><td style="text-align:left;">每个消息固定长度</td><td style="text-align:left;">简单</td><td style="text-align:left;">浪费带宽</td><td style="text-align:left;">极少使用</td></tr><tr><td style="text-align:left;"><strong>分隔符法</strong></td><td style="text-align:left;">用特殊字符（如<code>\\n</code>）标记消息结束</td><td style="text-align:left;">灵活</td><td style="text-align:left;">需处理内容转义</td><td style="text-align:left;">文本协议（如 Redis）</td></tr><tr><td style="text-align:left;"><strong>用现成协议</strong></td><td style="text-align:left;">使用 HTTP 等高级协议</td><td style="text-align:left;">省心</td><td style="text-align:left;">开销可能较大</td><td style="text-align:left;">Web 应用</td></tr></tbody></table><h3 id="【中等】tcp-和-udp-有什么区别" tabindex="-1"><a class="header-anchor" href="#【中等】tcp-和-udp-有什么区别" aria-hidden="true">#</a> 【中等】TCP 和 UDP 有什么区别？</h3><p><strong>最根本区别</strong></p><ul><li><strong>TCP</strong>：<strong>可靠</strong>优先，像<strong>打电话</strong>，需要连接和确认。</li><li><strong>UDP</strong>：<strong>速度</strong>优先，像<strong>发短信/喊话</strong>，无连接直接发。</li></ul><p><strong>核心对比</strong></p><table><thead><tr><th style="text-align:left;">特性</th><th style="text-align:left;">TCP （传输控制协议）</th><th style="text-align:left;">UDP （用户数据报协议）</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>连接</strong></td><td style="text-align:left;"><strong>面向连接</strong> （需三次握手）</td><td style="text-align:left;"><strong>无连接</strong> （直接发送）</td></tr><tr><td style="text-align:left;"><strong>可靠性</strong></td><td style="text-align:left;"><strong>可靠</strong>，不丢包，不乱序</td><td style="text-align:left;"><strong>不可靠</strong>，尽最大努力交付</td></tr><tr><td style="text-align:left;"><strong>传输模式</strong></td><td style="text-align:left;"><strong>字节流</strong> （需处理粘包）</td><td style="text-align:left;"><strong>数据报文</strong> （有消息边界）</td></tr><tr><td style="text-align:left;"><strong>速度</strong></td><td style="text-align:left;"><strong>慢</strong></td><td style="text-align:left;"><strong>快</strong></td></tr><tr><td style="text-align:left;"><strong>控制机制</strong></td><td style="text-align:left;">有流量控制、<strong>拥塞控制</strong></td><td style="text-align:left;"><strong>无任何控制</strong></td></tr></tbody></table><p><strong>如何选择</strong></p><ul><li><strong>要准确</strong>：选 <strong>TCP</strong>。用于网页、邮件、文件传输。</li><li><strong>要速度</strong>：选 <strong>UDP</strong>。用于视频、语音、直播、游戏。</li></ul><p><strong>本质是权衡</strong>：用 TCP 的<strong>延迟</strong>换取<strong>可靠</strong>，或用 UDP 的<strong>不可靠</strong>换取<strong>低延迟</strong>。</p>',130),e=[g];function o(i,a){return n(),r("div",null,e)}const f=t(s,[["render",o],["__file","index.html.vue"]]);export{f as default};
