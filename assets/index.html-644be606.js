const e=JSON.parse('{"key":"v-0e3d6037","path":"/pages/737aa461/","title":"设计模式之享元模式","lang":"zh-CN","frontmatter":{"title":"设计模式之享元模式","date":"2015-01-19T09:48:00.000Z","order":12,"permalink":"/pages/737aa461/","category":["设计","设计模式"],"tag":["设计","设计模式"],"description":"设计模式之享元模式 意图 享元模式 (Flyweight) 是一种结构型设计模式，它摒弃了在每个对象中保存所有数据的方式， 通过共享多个对象所共有的相同状态， 让你能在有限的内存容量中载入更多对象。 适用场景 仅在程序必须支持大量对象且没有足够的内存容量时使用享元模式。 结构 img","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/737aa461/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"设计模式之享元模式"}],["meta",{"property":"og:description","content":"设计模式之享元模式 意图 享元模式 (Flyweight) 是一种结构型设计模式，它摒弃了在每个对象中保存所有数据的方式， 通过共享多个对象所共有的相同状态， 让你能在有限的内存容量中载入更多对象。 适用场景 仅在程序必须支持大量对象且没有足够的内存容量时使用享元模式。 结构 img"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-15T00:29:21.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"设计"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2015-01-19T09:48:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-15T00:29:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式之享元模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2015-01-19T09:48:00.000Z\\",\\"dateModified\\":\\"2025-09-15T00:29:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"意图","slug":"意图","link":"#意图","children":[]},{"level":2,"title":"适用场景","slug":"适用场景","link":"#适用场景","children":[]},{"level":2,"title":"结构","slug":"结构","link":"#结构","children":[{"level":3,"title":"结构说明","slug":"结构说明","link":"#结构说明","children":[]},{"level":3,"title":"结构代码范式","slug":"结构代码范式","link":"#结构代码范式","children":[]}]},{"level":2,"title":"伪代码","slug":"伪代码","link":"#伪代码","children":[]},{"level":2,"title":"案例","slug":"案例","link":"#案例","children":[]},{"level":2,"title":"与其他模式的关系","slug":"与其他模式的关系","link":"#与其他模式的关系","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1757896161000,"updatedTime":1757896161000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":1}]},"readingTime":{"minutes":6.25,"words":1875},"filePathRelative":"03.设计/设计模式/享元模式.md","localizedDate":"2015年1月19日","excerpt":"<h1> 设计模式之享元模式</h1>\\n<h2> 意图</h2>\\n<p><strong>享元模式</strong> (Flyweight) 是一种结构型设计模式，它摒弃了在每个对象中保存所有数据的方式， 通过共享多个对象所共有的相同状态， 让你能在有限的内存容量中载入更多对象。</p>\\n<h2> 适用场景</h2>\\n<ul>\\n<li>仅在程序必须支持大量对象且没有足够的内存容量时使用享元模式。</li>\\n</ul>\\n<h2> 结构</h2>\\n<figure><img src=\\"https://raw.githubusercontent.com/dunwu/images/master/snap/20210430182947.png\\" alt=\\"img\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>img</figcaption></figure>","autoDesc":true}');export{e as data};
