const e=JSON.parse('{"key":"v-caf6b760","path":"/pages/40eb68ff/","title":"《数据密集型应用系统设计》笔记一——数据系统基础","lang":"zh-CN","frontmatter":{"title":"《数据密集型应用系统设计》笔记一——数据系统基础","date":"2021-08-26T23:32:00.000Z","order":2,"permalink":"/pages/40eb68ff/","category":["笔记","分布式","分布式理论"],"tag":["分布式","数据库","原理"],"description":"《数据密集型应用系统设计》笔记一——数据系统基础 第一章：可靠、可扩展与可维护的应用系统 认识数据系统 单一工具难以满足复杂应用系统的需求，因此整体工作被拆解为一系列能被单个工具高效完成的任务，并通过应用代码将它们缝合起来。比如一个缓存、索引、数据库协作的例子： 一个应用被称为数据密集型的，如果数据是其主要挑战（数据量，数据复杂度、数据变化速度）——与之相对的是计算密集型，即处理器速度是其瓶颈。 软件系统中很重要的三个问题：","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/40eb68ff/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"《数据密集型应用系统设计》笔记一——数据系统基础"}],["meta",{"property":"og:description","content":"《数据密集型应用系统设计》笔记一——数据系统基础 第一章：可靠、可扩展与可维护的应用系统 认识数据系统 单一工具难以满足复杂应用系统的需求，因此整体工作被拆解为一系列能被单个工具高效完成的任务，并通过应用代码将它们缝合起来。比如一个缓存、索引、数据库协作的例子： 一个应用被称为数据密集型的，如果数据是其主要挑战（数据量，数据复杂度、数据变化速度）——与之相对的是计算密集型，即处理器速度是其瓶颈。 软件系统中很重要的三个问题："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-14T13:48:12.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"分布式"}],["meta",{"property":"article:tag","content":"数据库"}],["meta",{"property":"article:tag","content":"原理"}],["meta",{"property":"article:published_time","content":"2021-08-26T23:32:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-14T13:48:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"《数据密集型应用系统设计》笔记一——数据系统基础\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-08-26T23:32:00.000Z\\",\\"dateModified\\":\\"2025-09-14T13:48:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"第一章：可靠、可扩展与可维护的应用系统","slug":"第一章-可靠、可扩展与可维护的应用系统","link":"#第一章-可靠、可扩展与可维护的应用系统","children":[{"level":3,"title":"认识数据系统","slug":"认识数据系统","link":"#认识数据系统","children":[]},{"level":3,"title":"可靠性","slug":"可靠性","link":"#可靠性","children":[]},{"level":3,"title":"可扩展性","slug":"可扩展性","link":"#可扩展性","children":[]},{"level":3,"title":"可维护性","slug":"可维护性","link":"#可维护性","children":[]}]},{"level":2,"title":"第二章：数据模型与查询语言","slug":"第二章-数据模型与查询语言","link":"#第二章-数据模型与查询语言","children":[{"level":3,"title":"关系模型与文档模型","slug":"关系模型与文档模型","link":"#关系模型与文档模型","children":[]},{"level":3,"title":"数据查询语言","slug":"数据查询语言","link":"#数据查询语言","children":[]},{"level":3,"title":"图数据模型（略）","slug":"图数据模型-略","link":"#图数据模型-略","children":[]},{"level":3,"title":"本章小结","slug":"本章小结","link":"#本章小结","children":[]}]},{"level":2,"title":"第三章：存储与检索","slug":"第三章-存储与检索","link":"#第三章-存储与检索","children":[{"level":3,"title":"数据库核心：数据结构","slug":"数据库核心-数据结构","link":"#数据库核心-数据结构","children":[]},{"level":3,"title":"事务处理与分析处理","slug":"事务处理与分析处理","link":"#事务处理与分析处理","children":[]},{"level":3,"title":"列式存储","slug":"列式存储","link":"#列式存储","children":[]}]},{"level":2,"title":"第四章：数据编码与演化","slug":"第四章-数据编码与演化","link":"#第四章-数据编码与演化","children":[{"level":3,"title":"数据编码格式","slug":"数据编码格式","link":"#数据编码格式","children":[]},{"level":3,"title":"数据流模式","slug":"数据流模式","link":"#数据流模式","children":[]},{"level":3,"title":"小结","slug":"小结","link":"#小结","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1757857692000,"updatedTime":1757857692000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":1}]},"readingTime":{"minutes":19.68,"words":5903},"filePathRelative":"00.笔记/15.分布式/分布式理论/数据密集型应用系统设计笔记一.md","localizedDate":"2021年8月26日","excerpt":"<h1> 《数据密集型应用系统设计》笔记一——数据系统基础</h1>\\n<h2> 第一章：可靠、可扩展与可维护的应用系统</h2>\\n<h3> 认识数据系统</h3>\\n<p>单一工具难以满足复杂应用系统的需求，因此整体工作被拆解为一系列能被单个工具高效完成的任务，并通过<strong>应用代码</strong>将它们缝合起来。比如一个缓存、索引、数据库协作的例子： <img src=\\"https://picture-bed-1251805293.file.myqcloud.com/1630635449781-eccd8717-84aa-4d52-b8d7-98790e2c92c7.png\\" alt=\\"image.png\\" loading=\\"lazy\\"> 一个应用被称为数据密集型的，如果数据是其主要挑战（数据量，数据复杂度、数据变化速度）——与之相对的是计算密集型，即处理器速度是其瓶颈。 软件系统中很重要的三个问题：</p>","autoDesc":true}');export{e as data};
