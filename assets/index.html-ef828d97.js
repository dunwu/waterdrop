const e=JSON.parse('{"key":"v-1b8c8f7a","path":"/pages/39c1c700/","title":"设计模式之代理模式","lang":"zh-CN","frontmatter":{"title":"设计模式之代理模式","date":"2015-01-19T11:38:00.000Z","order":13,"permalink":"/pages/39c1c700/","category":["设计","设计模式"],"tag":["设计","设计模式"],"description":"设计模式之代理模式 意图 代理模式 (Proxy) 是一种结构型设计模式， 为其他对象提供一种代理以控制对这个对象的访问。 代理模式介绍了一种访问对象的间接等级。 一个远程代理可以隐藏一个对象在不同地址空间的细节。 一个虚拟代理可以根据需要最优化创建对象的开销。 而安全代理和智能指引都允许访问对象的同时处理其他事务。 适用场景","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/39c1c700/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"设计模式之代理模式"}],["meta",{"property":"og:description","content":"设计模式之代理模式 意图 代理模式 (Proxy) 是一种结构型设计模式， 为其他对象提供一种代理以控制对这个对象的访问。 代理模式介绍了一种访问对象的间接等级。 一个远程代理可以隐藏一个对象在不同地址空间的细节。 一个虚拟代理可以根据需要最优化创建对象的开销。 而安全代理和智能指引都允许访问对象的同时处理其他事务。 适用场景"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-15T00:29:21.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"设计"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2015-01-19T11:38:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-15T00:29:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式之代理模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2015-01-19T11:38:00.000Z\\",\\"dateModified\\":\\"2025-09-15T00:29:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"意图","slug":"意图","link":"#意图","children":[]},{"level":2,"title":"适用场景","slug":"适用场景","link":"#适用场景","children":[]},{"level":2,"title":"结构","slug":"结构","link":"#结构","children":[{"level":3,"title":"结构说明","slug":"结构说明","link":"#结构说明","children":[]},{"level":3,"title":"结构代码范式","slug":"结构代码范式","link":"#结构代码范式","children":[]}]},{"level":2,"title":"伪代码","slug":"伪代码","link":"#伪代码","children":[]},{"level":2,"title":"案例","slug":"案例","link":"#案例","children":[{"level":3,"title":"注解+反射+代理消除重复代码","slug":"注解-反射-代理消除重复代码","link":"#注解-反射-代理消除重复代码","children":[]}]},{"level":2,"title":"与其他模式的关系","slug":"与其他模式的关系","link":"#与其他模式的关系","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1757896161000,"updatedTime":1757896161000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":1}]},"readingTime":{"minutes":10.13,"words":3038},"filePathRelative":"03.设计/设计模式/代理模式.md","localizedDate":"2015年1月19日","excerpt":"<h1> 设计模式之代理模式</h1>\\n<h2> 意图</h2>\\n<p><strong>代理模式</strong> (Proxy) 是一种结构型设计模式， 为其他对象提供一种<strong>代理</strong>以控制对这个对象的<strong>访问</strong>。</p>\\n<ul>\\n<li>代理模式介绍了一种访问对象的间接等级。</li>\\n<li>一个远程代理可以隐藏一个对象在不同地址空间的细节。</li>\\n<li>一个虚拟代理可以根据需要最优化创建对象的开销。</li>\\n<li>而安全代理和智能指引都允许访问对象的同时处理其他事务。</li>\\n</ul>\\n<h2> 适用场景</h2>\\n","autoDesc":true}');export{e as data};
