const e=JSON.parse('{"key":"v-e9ad167a","path":"/pages/85483ea6/","title":"HBase 快速入门","lang":"zh-CN","frontmatter":{"icon":"logos:hbase","title":"HBase 快速入门","date":"2020-02-10T14:27:39.000Z","permalink":"/pages/85483ea6/","category":["数据库","列式数据库","hbase"],"tag":["数据库","列式数据库","大数据","hbase"],"description":"HBase 快速入门 HBase 简介 为什么需要 HBase 在介绍 HBase 之前，我们不妨先了解一下为什么需要 HBase，或者说 HBase 是为了达到什么目的而产生。 在 HBase 诞生之前，Hadoop 可以通过 HDFS 来存储结构化、半结构甚至非结构化的数据，它是传统数据库的补充，是海量数据存储的最佳方法，它针对大文件的存储，批量访问和流式访问都做了优化，同时也通过多副本解决了容灾问题。 Hadoop 的缺陷在于：它只能执行批处理，并且只能以顺序方式访问数据。这意味着即使是最简单的工作，也必须搜索整个数据集，即：Hadoop 无法实现对数据的随机访问。实现数据的随机访问是传统的关系型数据库所擅长的，但它们却不能用于海量数据的存储。在这种情况下，必须有一种新的方案来同时解决海量数据存储和随机访问的问题，HBase 就是其中之一 (HBase，Cassandra，CouchDB，Dynamo 和 MongoDB 都能存储海量数据并支持随机访问)。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/85483ea6/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"HBase 快速入门"}],["meta",{"property":"og:description","content":"HBase 快速入门 HBase 简介 为什么需要 HBase 在介绍 HBase 之前，我们不妨先了解一下为什么需要 HBase，或者说 HBase 是为了达到什么目的而产生。 在 HBase 诞生之前，Hadoop 可以通过 HDFS 来存储结构化、半结构甚至非结构化的数据，它是传统数据库的补充，是海量数据存储的最佳方法，它针对大文件的存储，批量访问和流式访问都做了优化，同时也通过多副本解决了容灾问题。 Hadoop 的缺陷在于：它只能执行批处理，并且只能以顺序方式访问数据。这意味着即使是最简单的工作，也必须搜索整个数据集，即：Hadoop 无法实现对数据的随机访问。实现数据的随机访问是传统的关系型数据库所擅长的，但它们却不能用于海量数据的存储。在这种情况下，必须有一种新的方案来同时解决海量数据存储和随机访问的问题，HBase 就是其中之一 (HBase，Cassandra，CouchDB，Dynamo 和 MongoDB 都能存储海量数据并支持随机访问)。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-13T09:46:18.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"数据库"}],["meta",{"property":"article:tag","content":"列式数据库"}],["meta",{"property":"article:tag","content":"大数据"}],["meta",{"property":"article:tag","content":"hbase"}],["meta",{"property":"article:published_time","content":"2020-02-10T14:27:39.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-13T09:46:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"HBase 快速入门\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-02-10T14:27:39.000Z\\",\\"dateModified\\":\\"2025-09-13T09:46:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"HBase 简介","slug":"hbase-简介","link":"#hbase-简介","children":[{"level":3,"title":"为什么需要 HBase","slug":"为什么需要-hbase","link":"#为什么需要-hbase","children":[]},{"level":3,"title":"什么是 HBase","slug":"什么是-hbase","link":"#什么是-hbase","children":[]},{"level":3,"title":"什么时候使用 HBase","slug":"什么时候使用-hbase","link":"#什么时候使用-hbase","children":[]},{"level":3,"title":"HBase 数据模型简介","slug":"hbase-数据模型简介","link":"#hbase-数据模型简介","children":[]},{"level":3,"title":"特性比较","slug":"特性比较","link":"#特性比较","children":[]}]},{"level":2,"title":"HBase 安装","slug":"hbase-安装","link":"#hbase-安装","children":[]},{"level":2,"title":"HBase Hello World 示例","slug":"hbase-hello-world-示例","link":"#hbase-hello-world-示例","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1741093684000,"updatedTime":1757756778000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":2}]},"readingTime":{"minutes":9.35,"words":2805},"filePathRelative":"12.数据库/06.列式数据库/hbase/HBase_快速入门.md","localizedDate":"2020年2月10日","excerpt":"<h1> HBase 快速入门</h1>\\n<h2> HBase 简介</h2>\\n<h3> 为什么需要 HBase</h3>\\n<p>在介绍 HBase 之前，我们不妨先了解一下为什么需要 HBase，或者说 HBase 是为了达到什么目的而产生。</p>\\n<p>在 HBase 诞生之前，Hadoop 可以通过 HDFS 来存储结构化、半结构甚至非结构化的数据，它是传统数据库的补充，是海量数据存储的最佳方法，它针对大文件的存储，批量访问和流式访问都做了优化，同时也通过多副本解决了容灾问题。</p>\\n<p>Hadoop 的缺陷在于：它只能执行批处理，并且只能以顺序方式访问数据。这意味着即使是最简单的工作，也必须搜索整个数据集，即：<strong>Hadoop 无法实现对数据的随机访问</strong>。实现数据的随机访问是传统的关系型数据库所擅长的，但它们却不能用于海量数据的存储。在这种情况下，必须有一种新的方案来<strong>同时解决海量数据存储和随机访问的问题</strong>，HBase 就是其中之一 (HBase，Cassandra，CouchDB，Dynamo 和 MongoDB 都能存储海量数据并支持随机访问)。</p>","autoDesc":true}');export{e as data};
