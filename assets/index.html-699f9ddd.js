import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,a as n,b as s,d as t,e as p}from"./app-716bab04.js";const l={},u=p('<h1 id="流量控制" tabindex="-1"><a class="header-anchor" href="#流量控制" aria-hidden="true">#</a> 流量控制</h1><blockquote><p>在高并发场景下，为了应对瞬时海量请求的压力，保障系统的平稳运行，必须预估系统的流量阈值，通过限流规则阻断处理不过来的请求。</p></blockquote><h2 id="流量控制简介" tabindex="-1"><a class="header-anchor" href="#流量控制简介" aria-hidden="true">#</a> 流量控制简介</h2><h3 id="什么是流量控制" tabindex="-1"><a class="header-anchor" href="#什么是流量控制" aria-hidden="true">#</a> 什么是流量控制</h3><p>流量控制（Flow Control），根据流量、并发线程数、响应时间等指标，把随机到来的流量调整成合适的形状，即流量塑形。避免应用被瞬时的流量高峰冲垮，从而保障应用的高可用性。</p><h3 id="为什么需要流量控制" tabindex="-1"><a class="header-anchor" href="#为什么需要流量控制" aria-hidden="true">#</a> 为什么需要流量控制</h3><p>复杂的分布式系统架构中的应用程序往往具有数十个依赖项，每个依赖项都会不可避免地在某个时刻失败。 如果主机应用程序未与这些外部故障隔离开来，则可能会被波及。</p><p>例如，对于依赖于 30 个服务的应用程序，假设每个服务的正常运行时间为 99.99％，则可以期望：</p><blockquote><p>99.99<sup>30</sup> = 99.7％ 的正常运行时间</p><p>10 亿个请求中的 0.3％= 3,000,000 个失败</p><p>即使所有依赖项都具有出色的正常运行时间，每月也会有 2 个小时以上的停机时间。</p><p>然而，现实情况一般比这种估量情况更糟糕。</p></blockquote><hr><p>当一切正常时，整体系统如下所示：</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202401280931974.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>',12),k={href:"https://github.com/Netflix/Hystrix/wiki",target:"_blank",rel:"noopener noreferrer"},r=n("p",null,"在分布式系统架构下，这些强依赖的子服务稳定与否对系统的影响非常大。但是，依赖的子服务可能有很多不可控问题：如网络连接、资源繁忙、服务宕机等。例如：下图中有一个 QPS 为 50 的依赖服务 I 出现不可用，但是其他依赖服务是可用的。",-1),d=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dunwu/images/master/snap/202401280931939.png",alt:"img",tabindex:"0",loading:"lazy"}),n("figcaption",null,"img")],-1),m={href:"https://github.com/Netflix/Hystrix/wiki",target:"_blank",rel:"noopener noreferrer"},v=n("p",null,"当流量很大的情况下，某个依赖的阻塞，会导致上游服务请求被阻塞。当这种级联故障愈演愈烈，就可能造成整个线上服务不可用的雪崩效应，如下图。这种情况若持续恶化，如果上游服务本身还被其他服务所依赖，就可能出现多米洛骨牌效应，导致多个服务都无法正常工作。",-1),b=n("figure",null,[n("img",{src:"https://github.com/Netflix/Hystrix/wiki/images/soa-3-640.png",alt:"img",tabindex:"0",loading:"lazy"}),n("figcaption",null,"img")],-1),y={href:"https://github.com/Netflix/Hystrix/wiki",target:"_blank",rel:"noopener noreferrer"},g=p(`<h3 id="流量控制有哪些保护机制" tabindex="-1"><a class="header-anchor" href="#流量控制有哪些保护机制" aria-hidden="true">#</a> 流量控制有哪些保护机制</h3><p>流量控制常见的手段就是限流、熔断、降级。</p><h4 id="什么是降级" tabindex="-1"><a class="header-anchor" href="#什么是降级" aria-hidden="true">#</a> 什么是降级？</h4><p><strong>降级</strong>是保障服务能够稳定运行的一种保护方式：面对突增的流量，牺牲一些吞吐量以换取系统的稳定。常见的降级实现方式有：开关降级、限流降级、熔断降级。</p><h4 id="什么是限流" tabindex="-1"><a class="header-anchor" href="#什么是限流" aria-hidden="true">#</a> 什么是限流？</h4><p>限流一般针对下游服务，当上游流量较大时，避免被上游服务的请求撑爆。</p><p><strong>限流</strong>就是限制系统的输入和输出流量，以达到保护系统的目的。一般来说系统的吞吐量是可以被测算的，为了保证系统的稳定运行，一旦达到的需要限制的阈值，就需要限制流量并采取一些措施以完成限制流量的目的。比如：延迟处理，拒绝处理，或者部分拒绝处理等等。</p><p>限流规则包含三个部分：时间粒度，接口粒度，最大限流值。限流规则设置是否合理直接影响到限流是否合理有效。</p><h4 id="什么是熔断" tabindex="-1"><a class="header-anchor" href="#什么是熔断" aria-hidden="true">#</a> 什么是熔断？</h4><p>熔断一般针对上游服务，当下游服务超时/异常较多时，避免被下游服务拖垮。</p><p>当调用链路中某个资源出现不稳定，例如，超时异常比例升高的时候，则对这个资源的调用进行限制，并让请求快速失败，避免影响到其它的资源，最终产生雪崩的效果。</p><p>熔断尽最大的可能去完成所有的请求，容忍一些失败，熔断也能自动恢复。熔断的常见策略有：</p><ul><li>在每秒请求异常数超过多少时触发熔断降级</li><li>在每秒请求异常错误率超过多少时触发熔断降级</li><li>在每秒请求平均耗时超过多少时触发熔断降级</li></ul><h3 id="流量控制有哪些衡量指标" tabindex="-1"><a class="header-anchor" href="#流量控制有哪些衡量指标" aria-hidden="true">#</a> 流量控制有哪些衡量指标</h3><p>流量控制有以下几个角度：</p><ul><li>流量指标，例如 QPS、并发线程数等。</li><li>资源的调用关系，例如资源的调用链路，资源和资源之间的关系，调用来源等。</li><li>控制效果，例如排队等待、直接拒绝、Warm Up（预热）等。</li></ul><h2 id="限流算法" tabindex="-1"><a class="header-anchor" href="#限流算法" aria-hidden="true">#</a> 限流算法</h2><p>限流的本质是：在一定的时间范围内，限制某一个资源被访问的频率。如何去限制流量，就需要采用一定的策略，即限流算法。常见的限流算法有：固定窗口限流算法、滑动窗口限流算法、漏桶限流算法、令牌桶限流算法。</p><p>下面，将对这几种算法进行一一介绍。</p><h3 id="固定窗口限流算法" tabindex="-1"><a class="header-anchor" href="#固定窗口限流算法" aria-hidden="true">#</a> 固定窗口限流算法</h3><h4 id="固定窗口限流算法的原理" tabindex="-1"><a class="header-anchor" href="#固定窗口限流算法的原理" aria-hidden="true">#</a> 固定窗口限流算法的原理</h4><p>固定窗口限流算法的<strong>基本策略</strong>是：</p><ol><li>设置一个固定时间窗口，以及这个固定时间窗口内的最大请求数；</li><li>为每个固定时间窗口设置一个计数器，用于统计请求数；</li><li>一旦请求数超过最大请求数，则请求会被拦截。</li></ol><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202401230748006.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="固定窗口限流算法的利弊" tabindex="-1"><a class="header-anchor" href="#固定窗口限流算法的利弊" aria-hidden="true">#</a> 固定窗口限流算法的利弊</h4><p>固定窗口限流算法的<strong>优点</strong>是：实现简单。</p><p>固定窗口限流算法的<strong>缺点</strong>是：存在<strong>临界问题</strong>。所谓临界问题，是指：流量分别集中在一个固定时间窗口的尾部和一个固定时间窗口的头部。举例来说，假设限流规则为每分钟不超过 100 次请求。在第一个时间窗口中，起初没有任何请求，在最后 1 s，收到 100 次请求，由于没有达到阈值，所有请求都通过；在第二个时间窗口中，第 1 秒就收到 100 次请求，而后续没有任何请求。虽然，这两个时间窗口内的流量都符合限流要求，但是在两个时间窗口临界的这 2s 内，实际上有 200 次请求，显然是超过预期吞吐量的，存在压垮系统的可能。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202401230748769.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="固定窗口限流算法的实现" tabindex="-1"><a class="header-anchor" href="#固定窗口限流算法的实现" aria-hidden="true">#</a> 固定窗口限流算法的实现</h4><details class="hint-container details"><summary>Java 版本的固定窗口限流算法</summary><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicLong</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SlidingWindowRateLimiter</span> <span class="token keyword">implements</span> <span class="token class-name">RateLimiter</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 允许的最大请求数
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> maxPermits<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 窗口期时长
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> periodMillis<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 分片窗口期时长
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> shardPeriodMillis<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 窗口期截止时间
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> lastPeriodMillis<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 分片窗口数
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> shardNum<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 请求总计数
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicLong</span> totalCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 分片窗口计数列表
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AtomicLong</span><span class="token punctuation">&gt;</span></span> countList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">SlidingWindowRateLimiter</span><span class="token punctuation">(</span><span class="token keyword">long</span> qps<span class="token punctuation">,</span> <span class="token keyword">int</span> shardNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span>qps<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">,</span> shardNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">SlidingWindowRateLimiter</span><span class="token punctuation">(</span><span class="token keyword">long</span> maxPermits<span class="token punctuation">,</span> <span class="token keyword">long</span> period<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> timeUnit<span class="token punctuation">,</span> <span class="token keyword">int</span> shardNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>maxPermits <span class="token operator">=</span> maxPermits<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>periodMillis <span class="token operator">=</span> timeUnit<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span>period<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>lastPeriodMillis <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>shardPeriodMillis <span class="token operator">=</span> timeUnit<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span>period<span class="token punctuation">)</span> <span class="token operator">/</span> shardNum<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>shardNum <span class="token operator">=</span> shardNum<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> shardNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            countList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token keyword">permits</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> now <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">&gt;</span> lastPeriodMillis<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> shardId <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> shardId <span class="token operator">&lt;</span> shardNum<span class="token punctuation">;</span> shardId<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">long</span> shardCount <span class="token operator">=</span> countList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>shardId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                totalCount<span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span><span class="token operator">-</span>shardCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
                countList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>shardId<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                lastPeriodMillis <span class="token operator">+=</span> shardPeriodMillis<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> shardId <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>now <span class="token operator">%</span> periodMillis <span class="token operator">/</span> shardPeriodMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>totalCount<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">permits</span> <span class="token operator">&lt;=</span> maxPermits<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            countList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>shardId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span><span class="token keyword">permits</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            totalCount<span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span><span class="token keyword">permits</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="滑动窗口限流算法" tabindex="-1"><a class="header-anchor" href="#滑动窗口限流算法" aria-hidden="true">#</a> 滑动窗口限流算法</h3><h4 id="滑动窗口限流算法的原理" tabindex="-1"><a class="header-anchor" href="#滑动窗口限流算法的原理" aria-hidden="true">#</a> 滑动窗口限流算法的原理</h4><p>滑动窗口限流算法是对固定窗口限流算法的改进，解决了临界问题。</p><p>滑动窗口限流算法的<strong>基本策略</strong>是：</p><ul><li>将固定时间窗口分片为多个子窗口，每个子窗口的访问次数独立统计；</li><li>当请求时间大于当前子窗口的最大时间时，则将当前子窗口废弃，并将计时窗口向前滑动，并将下一个子窗口置为当前窗口。</li><li>要保证所有子窗口的统计数之和不能超过阈值。</li></ul><p>滑动窗口限流算法就是针对固定窗口限流算法的更细粒度的控制，分片越多，则限流越精准。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202401230748277.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="滑动窗口限流算法的利弊" tabindex="-1"><a class="header-anchor" href="#滑动窗口限流算法的利弊" aria-hidden="true">#</a> 滑动窗口限流算法的利弊</h4><p>滑动窗口限流算法的<strong>优点</strong>是：在滑动窗口限流算法中，临界位置的突发请求都会被算到时间窗口内，因此可以解决计数器算法的临界问题。</p><p>滑动窗口限流算法的<strong>缺点</strong>是：</p><ul><li><strong>额外的内存开销</strong> - 滑动时间窗口限流算法的时间窗口是持续滑动的，并且除了需要一个计数器来记录时间窗口内接口请求次数之外，还需要记录在时间窗口内每个接口请求到达的时间点，所以存在额外的内存开销。</li><li><strong>限流的控制粒度受限于窗口分片粒度</strong> - 滑动窗口限流算法，<strong>只能在选定的时间粒度上限流，对选定时间粒度内的更加细粒度的访问频率不做限制</strong>。但是，由于每个分片窗口都有额外的内存开销，所以也并不是分片数越多越好的。</li></ul><h4 id="滑动窗口限流算法的实现" tabindex="-1"><a class="header-anchor" href="#滑动窗口限流算法的实现" aria-hidden="true">#</a> 滑动窗口限流算法的实现</h4><details class="hint-container details"><summary>Java 版本的滑动窗口限流算法</summary><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedList</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicLong</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SlidingWindowRateLimiter</span> <span class="token keyword">implements</span> <span class="token class-name">RateLimiter</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 允许的最大请求数
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> maxPermits<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 窗口期时长
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> periodMillis<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 分片窗口期时长
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> shardPeriodMillis<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 窗口期截止时间
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> lastPeriodMillis<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 分片窗口数
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> shardNum<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 请求总计数
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicLong</span> totalCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 分片窗口计数列表
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AtomicLong</span><span class="token punctuation">&gt;</span></span> countList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">SlidingWindowRateLimiter</span><span class="token punctuation">(</span><span class="token keyword">long</span> qps<span class="token punctuation">,</span> <span class="token keyword">int</span> shardNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span>qps<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">,</span> shardNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">SlidingWindowRateLimiter</span><span class="token punctuation">(</span><span class="token keyword">long</span> maxPermits<span class="token punctuation">,</span> <span class="token keyword">long</span> period<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> timeUnit<span class="token punctuation">,</span> <span class="token keyword">int</span> shardNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>maxPermits <span class="token operator">=</span> maxPermits<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>periodMillis <span class="token operator">=</span> timeUnit<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span>period<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>lastPeriodMillis <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>shardPeriodMillis <span class="token operator">=</span> timeUnit<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span>period<span class="token punctuation">)</span> <span class="token operator">/</span> shardNum<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>shardNum <span class="token operator">=</span> shardNum<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> shardNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            countList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token keyword">permits</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> now <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">&gt;</span> lastPeriodMillis<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> shardId <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> shardId <span class="token operator">&lt;</span> shardNum<span class="token punctuation">;</span> shardId<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">long</span> shardCount <span class="token operator">=</span> countList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>shardId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                totalCount<span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span><span class="token operator">-</span>shardCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
                countList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>shardId<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                lastPeriodMillis <span class="token operator">+=</span> shardPeriodMillis<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> shardId <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>now <span class="token operator">%</span> periodMillis <span class="token operator">/</span> shardPeriodMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>totalCount<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">permits</span> <span class="token operator">&lt;=</span> maxPermits<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            countList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>shardId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span><span class="token keyword">permits</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            totalCount<span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span><span class="token keyword">permits</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="漏桶限流算法" tabindex="-1"><a class="header-anchor" href="#漏桶限流算法" aria-hidden="true">#</a> 漏桶限流算法</h3><h4 id="漏桶限流算法的原理" tabindex="-1"><a class="header-anchor" href="#漏桶限流算法的原理" aria-hidden="true">#</a> 漏桶限流算法的原理</h4><p>漏桶限流算法的<strong>基本策略</strong>是：</p><ul><li>水（请求）以任意速率由入口进入到漏桶中；</li><li>水以固定的速率由出口出水（请求通过）；</li><li>漏桶的容量是固定的，如果水的流入速率大于流出速率，最终会导致漏桶中的水溢出（这意味着请求拒绝）。</li></ul><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202401230749486.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="漏桶限流算法的利弊" tabindex="-1"><a class="header-anchor" href="#漏桶限流算法的利弊" aria-hidden="true">#</a> 漏桶限流算法的利弊</h4><p>漏桶限流算法的<strong>优点</strong>是：<strong>流量速率固定</strong>——即无论流量多大，即便是突发的大流量，处理请求的速度始终是固定的。</p><p>漏桶限流算法的<strong>缺点</strong>是：不能灵活的调整流量。例如：一个集群通过增减节点的方式，弹性伸缩了其吞吐能力，漏桶限流算法无法随之调整。</p><p><strong>漏桶策略适用于间隔性突发流量且流量不用即时处理的场景</strong>。</p><h4 id="漏桶限流算法的实现" tabindex="-1"><a class="header-anchor" href="#漏桶限流算法的实现" aria-hidden="true">#</a> 漏桶限流算法的实现</h4><details class="hint-container details"><summary>Java 版本的漏桶限流算法</summary><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicLong</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LeakyBucketRateLimiter</span> <span class="token keyword">implements</span> <span class="token class-name">RateLimiter</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * QPS
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> qps<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 桶的容量
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> capacity<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 计算的起始时间
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> beginTimeMillis<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 桶中当前的水量
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicLong</span> waterNum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">LeakyBucketRateLimiter</span><span class="token punctuation">(</span><span class="token keyword">int</span> qps<span class="token punctuation">,</span> <span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>qps <span class="token operator">=</span> qps<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token keyword">permits</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// 如果桶中没有水，直接通过</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>waterNum<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            beginTimeMillis <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            waterNum<span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span><span class="token keyword">permits</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 计算水量</span>
        <span class="token keyword">long</span> leakedWaterNum <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> beginTimeMillis<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">*</span> qps<span class="token punctuation">;</span>
        <span class="token keyword">long</span> currentWaterNum <span class="token operator">=</span> waterNum<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> leakedWaterNum<span class="token punctuation">;</span>
        waterNum<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> currentWaterNum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 重置时间</span>
        beginTimeMillis <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>waterNum<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">permits</span> <span class="token operator">&lt;</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            waterNum<span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span><span class="token keyword">permits</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="令牌桶限流算法" tabindex="-1"><a class="header-anchor" href="#令牌桶限流算法" aria-hidden="true">#</a> 令牌桶限流算法</h3><h4 id="令牌桶限流算法的原理" tabindex="-1"><a class="header-anchor" href="#令牌桶限流算法的原理" aria-hidden="true">#</a> 令牌桶限流算法的原理</h4><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202401230750231.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>令牌桶算法的<strong>原理</strong>：</p><ol><li>接口限制 T 秒内最大访问次数为 N，则每隔 T/N 秒会放一个 token 到桶中</li><li>桶内最多存放 M 个 token，如果 token 到达时令牌桶已经满了，那么这个 token 就会被丢弃</li><li>接口请求会先从令牌桶中取 token，拿到 token 则处理接口请求，拿不到 token 则进行限流处理</li></ol><h4 id="令牌桶限流算法的利弊" tabindex="-1"><a class="header-anchor" href="#令牌桶限流算法的利弊" aria-hidden="true">#</a> 令牌桶限流算法的利弊</h4><p>因为令牌桶存放了很多令牌，那么大量的突发请求会被执行，但是它不会出现临界问题，在令牌用完之后，令牌是以一个恒定的速率添加到令牌桶中的，因此不能再次发送大量突发请求。</p><p>规定固定容量的桶，token 以固定速度往桶内填充，当桶满时 token 不会被继续放入，每过来一个请求把 token 从桶中移除，如果桶中没有 token 不能请求。</p><p><strong>令牌桶算法适用于有突发特性的流量，且流量需要即时处理的场景</strong>。</p><h4 id="令牌桶限流算法的实现" tabindex="-1"><a class="header-anchor" href="#令牌桶限流算法的实现" aria-hidden="true">#</a> 令牌桶限流算法的实现</h4><details class="hint-container details"><summary>Java 实现令牌桶算法</summary><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicLong</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 令牌桶限流算法
 *
 * <span class="token keyword">@author</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mailto:forbreak@163.com<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Zhang Peng<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
 * <span class="token keyword">@date</span> 2024-01-18
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TokenBucketRateLimiter</span> <span class="token keyword">implements</span> <span class="token class-name">RateLimiter</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * QPS
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> qps<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 桶的容量
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> capacity<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 上一次令牌发放时间
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> endTimeMillis<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 桶中当前的令牌数量
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicLong</span> tokenNum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">TokenBucketRateLimiter</span><span class="token punctuation">(</span><span class="token keyword">long</span> qps<span class="token punctuation">,</span> <span class="token keyword">long</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>qps <span class="token operator">=</span> qps<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>endTimeMillis <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token keyword">permits</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">long</span> now <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> gap <span class="token operator">=</span> now <span class="token operator">-</span> endTimeMillis<span class="token punctuation">;</span>

        <span class="token comment">// 计算令牌数</span>
        <span class="token keyword">long</span> newTokenNum <span class="token operator">=</span> <span class="token punctuation">(</span>gap <span class="token operator">*</span> qps <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> currentTokenNum <span class="token operator">=</span> tokenNum<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> newTokenNum<span class="token punctuation">;</span>
        tokenNum<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> currentTokenNum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>tokenNum<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token keyword">permits</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            tokenNum<span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token keyword">permits</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            endTimeMillis <span class="token operator">=</span> now<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,65),w=n("p",null,[n("strong",null,"扩展")],-1),h={href:"https://blog.csdn.net/forezp/article/details/100060686",target:"_blank",rel:"noopener noreferrer"},f=p(`<h3 id="限流算法测试" tabindex="-1"><a class="header-anchor" href="#限流算法测试" aria-hidden="true">#</a> 限流算法测试</h3><details class="hint-container details"><summary>限流算法测试</summary><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>thread<span class="token punctuation">.</span></span><span class="token class-name">ThreadUtil</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">RandomUtil</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CountDownLatch</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicInteger</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RateLimiterDemo</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// ============================================================================</span>

        <span class="token keyword">int</span> qps <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;======================= 固定时间窗口限流算法 =======================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">FixedWindowRateLimiter</span> fixedWindowRateLimiter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FixedWindowRateLimiter</span><span class="token punctuation">(</span>qps<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">testRateLimit</span><span class="token punctuation">(</span>fixedWindowRateLimiter<span class="token punctuation">,</span> qps<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;======================= 滑动时间窗口限流算法 =======================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SlidingWindowRateLimiter</span> slidingWindowRateLimiter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SlidingWindowRateLimiter</span><span class="token punctuation">(</span>qps<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">testRateLimit</span><span class="token punctuation">(</span>slidingWindowRateLimiter<span class="token punctuation">,</span> qps<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;======================= 漏桶限流算法 =======================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">LeakyBucketRateLimiter</span> leakyBucketRateLimiter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LeakyBucketRateLimiter</span><span class="token punctuation">(</span>qps<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">testRateLimit</span><span class="token punctuation">(</span>leakyBucketRateLimiter<span class="token punctuation">,</span> qps<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;======================= 令牌桶限流算法 =======================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TokenBucketRateLimiter</span> tokenBucketRateLimiter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TokenBucketRateLimiter</span><span class="token punctuation">(</span>qps<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">testRateLimit</span><span class="token punctuation">(</span>tokenBucketRateLimiter<span class="token punctuation">,</span> qps<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testRateLimit</span><span class="token punctuation">(</span><span class="token class-name">RateLimiter</span> rateLimiter<span class="token punctuation">,</span> <span class="token keyword">int</span> qps<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">AtomicInteger</span> okNum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">AtomicInteger</span> limitNum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">ThreadUtil</span><span class="token punctuation">.</span><span class="token function">newFixedExecutor</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&quot;限流测试&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> beginTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">int</span> threadNum <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">CountDownLatch</span> latch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span>threadNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> threadNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token function">batchRequest</span><span class="token punctuation">(</span>rateLimiter<span class="token punctuation">,</span> okNum<span class="token punctuation">,</span> limitNum<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;发生异常！&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                    latch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            latch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">long</span> endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">long</span> gap <span class="token operator">=</span> endTime <span class="token operator">-</span> beginTime<span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;限流 QPS: {} -&gt; 实际结果：耗时 {} ms，{} 次请求成功，{} 次请求被限流，实际 QPS: {}&quot;</span><span class="token punctuation">,</span>
                qps<span class="token punctuation">,</span> gap<span class="token punctuation">,</span> okNum<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> limitNum<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> okNum<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span> <span class="token operator">/</span> gap<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>okNum<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> qps<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;限流符合预期&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;发生异常！&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">batchRequest</span><span class="token punctuation">(</span><span class="token class-name">RateLimiter</span> rateLimiter<span class="token punctuation">,</span> <span class="token class-name">AtomicInteger</span> okNum<span class="token punctuation">,</span> <span class="token class-name">AtomicInteger</span> limitNum<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>rateLimiter<span class="token punctuation">.</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;请求成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                okNum<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;请求限流&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                limitNum<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">RandomUtil</span><span class="token punctuation">.</span><span class="token function">randomInt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="限流框架-hystrix" tabindex="-1"><a class="header-anchor" href="#限流框架-hystrix" aria-hidden="true">#</a> 限流框架 - Hystrix</h2><p>Hystrix 是由 Netflix 开源，用于处理分布式系统的延迟和容错的一个开源组件。在分布式系统里，许多依赖不可避免的会调用失败，比如超时、异常等。Hystrix 采用<strong>断路器模式</strong>来实现服务间的彼此隔离，从而避免级联故障，以提高分布式系统整体的弹性。</p><p>“断路器”本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控（类似熔断保险丝），<strong>向调用方返回一个符合预期的、可处理的备选响应（FallBack），而不是长时间的等待或者抛出调用方无法处理的异常</strong>，这样就保证了服务调用方的线程不会被长时间、不必要地占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩。</p><p>Hystrix 官方已宣布<strong>不再发布新版本</strong>。但是，Hystrix 的断路器设计理念，有非常高的学习价值。</p><p>如果使用 Hystrix 对每个基础依赖服务进行过载保护，则整个系统架构将会类似下图所示，每个依赖项彼此隔离，受到延迟时发生饱和的资源的被限制访问，并包含 fallback 逻辑（用于降级处理），该逻辑决定了在依赖项中发生任何类型的故障时做出对应的处理。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20200717142842.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="hystrix-原理" tabindex="-1"><a class="header-anchor" href="#hystrix-原理" aria-hidden="true">#</a> Hystrix 原理</h3><p>如下图所示，Hystrix 的工作流程大致可以分为 9 个步骤。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20200717143247.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>（一）构建一个 HystrixCommand 或 HystrixObservableCommand 对象</strong></p><p>Hystrix 进行资源隔离，其实是提供了一个抽象，叫做<strong>命令模式</strong>。这也是 Hystrix 最基本的<strong>资源隔离技术</strong>。</p><p>在使用 Hystrix 的过程中，会对依赖服务的调用请求封装成命令对象，Hystrix 对 命令对象抽象了两个抽象类：<code>HystrixCommand</code> 和 <code>HystrixObservableCommand</code> 。</p><ul><li><code>HystrixCommand</code> 表示的命令对象会返回一个唯一返回值。</li><li><code>HystrixObservableCommand</code> 表示的命令对象会返回多个返回值。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">HystrixCommand</span> command <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HystrixCommand</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">HystrixObservableCommand</span> command <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HystrixObservableCommand</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（二）执行命令</strong></p><p>Hystrix 中共有 4 种方式执行命令，如下所示：</p>`,18),x=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"执行方式"),n("th",{style:{"text-align":"left"}},"说明"),n("th",{style:{"text-align":"left"}},"可用对象")])],-1),S={style:{"text-align":"left"}},L={href:"http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommand.html#execute()",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"execute()",-1),_=n("td",{style:{"text-align":"left"}},"阻塞式同步执行，返回依赖服务的单一返回结果（或者抛出异常）",-1),T=n("td",{style:{"text-align":"left"}},[n("code",null,"HystrixCommand")],-1),R={style:{"text-align":"left"}},N={href:"http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommand.html#queue()",target:"_blank",rel:"noopener noreferrer"},C=n("code",null,"queue()",-1),j=n("td",{style:{"text-align":"left"}},[s("异步执行，通过 "),n("code",null,"Future"),s(" 返回依赖服务的单一返回结果（或者抛出异常）")],-1),O=n("td",{style:{"text-align":"left"}},[n("code",null,"HystrixCommand")],-1),M={style:{"text-align":"left"}},H={href:"http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixObservableCommand.html#observe()",target:"_blank",rel:"noopener noreferrer"},E=n("code",null,"observe()",-1),I=n("td",{style:{"text-align":"left"}},"基于 Rxjava 的 Observable 方式，返回通过 Observable 表示的依赖服务返回结果。代调用代码先执行 (Hot Obserable)",-1),P=n("td",{style:{"text-align":"left"}},[n("code",null,"HystrixObservableCommand")],-1),A={style:{"text-align":"left"}},U={href:"http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixObservableCommand.html#toObservable()",target:"_blank",rel:"noopener noreferrer"},D=n("code",null,"toObservable()",-1),F=n("td",{style:{"text-align":"left"}},"基于 Rxjava 的 Observable 方式，返回通过 Observable 表示的依赖服务返回结果。执行代码等到真正订阅的时候才会执行 (cold observable)",-1),W=n("td",{style:{"text-align":"left"}},[n("code",null,"HystrixObservableCommand")],-1),B=p(`<p>这四种命令中，<code>exeucte()</code>、<code>queue()</code>、<code>observe()</code> 的表示其实是通过 <code>toObservable()</code> 实现的，其转换关系如下图所示：</p><figure><img src="https:////upload-images.jianshu.io/upload_images/14126519-60964d9fa41614c1.png?imageMogr2/auto-orient/strip|imageView2/2/w/563/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><code>HystrixCommand</code> 执行方式</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">K</span> value   <span class="token operator">=</span> command<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 等价语句：</span>
<span class="token class-name">K</span> value <span class="token operator">=</span> command<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">&gt;</span></span> fValue  <span class="token operator">=</span> command<span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//等价语句：</span>
<span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">&gt;</span></span> fValue <span class="token operator">=</span> command<span class="token punctuation">.</span><span class="token function">toObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBlocking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">&gt;</span></span> ohValue <span class="token operator">=</span> command<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//hot observable，立刻订阅，命令立刻执行</span>
<span class="token comment">//等价语句：</span>
<span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">&gt;</span></span> ohValue <span class="token operator">=</span> command<span class="token punctuation">.</span><span class="token function">toObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 上述执行最终实现还是基于 toObservable()</span>
<span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">&gt;</span></span> ocValue <span class="token operator">=</span> command<span class="token punctuation">.</span><span class="token function">toObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//cold observable，延后订阅，订阅发生后，执行才真正执行</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（三）是否缓存</strong></p><p>如果当前命令对象启用了请求缓存，并且请求的响应存在于缓存中，则缓存的响应会立刻以 <code>Observable</code> 的形式返回。</p><p><strong>（四）是否开启断路器</strong></p><p>如果第三步没有缓存没有命中，则判断一下当前断路器的断路状态是否打开。如果断路器状态为打开状态，则 Hystrix 将不会执行此 Command 命令，直接执行步骤 8 调用 Fallback；</p><p>如果断路器状态是关闭，则执行步骤 5 检查是否有足够的资源运行 Command 命令</p><p><strong>（五）信号量、线程池是否拒绝</strong></p><p>当您执行该命令时，Hystrix 会检查断路器以查看电路是否打开。</p><p>如果电路开路（或“跳闸”），则 Hystrix 将不会执行该命令，而是将流程路由到 (8) 获取回退。</p><p>如果电路闭合，则流程前进至 (5) 以检查是否有可用容量来运行命令。</p><p>如果当前要执行的 Command 命令 先关连的线程池 和队列（或者信号量）资源已经满了，Hystrix 将不会运行 Command 命令，直接执行 <strong>步骤 8 <strong>的 Fallback 降级处理；如果未满，表示有剩余的资源执行 Command 命令，则执行</strong>步骤 6</strong></p><p><strong>（六）<code>construct()</code> 或 <code>run()</code></strong></p><p>当经过<strong>步骤 5</strong> 判断，有足够的资源执行 Command 命令时，本步骤将调用 Command 命令运行方法，基于不同类型的 Command，有如下两种两种运行方式：</p><table><thead><tr><th style="text-align:left;">运行方式</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>HystrixCommand.run()</code></td><td style="text-align:left;">返回一个处理结果或者抛出一个异常</td></tr><tr><td style="text-align:left;"><code>HystrixObservableCommand.construct()</code></td><td style="text-align:left;">返回一个 Observable 表示的结果（可能多个），或者 基于<code>onError</code>的错误通知</td></tr></tbody></table><p>如果<code>run()</code> 或者<code>construct()</code>方法 的<code>真实执行时间</code>超过了 Command 设置的<code>超时时间阈值</code>, 则<strong>当前则执行线程</strong>（或者是独立的定时器线程）将会抛出<code>TimeoutException</code>。抛出超时异常 TimeoutException，后，将执行**步骤 8 **的 Fallback 降级处理。即使<code>run()</code>或者<code>construct()</code>执行没有被取消或中断，最终能够处理返回结果，但在降级处理逻辑中，将会抛弃<code>run()</code>或<code>construct()</code>方法的返回结果，而返回 Fallback 降级处理结果。</p><blockquote><p><strong>注意事项</strong><br> 需要注意的是，Hystrix 无法强制 将正在运行的线程停止掉--Hystrix 能够做的最好的方式就是在 JVM 中抛出一个<code>InterruptedException</code>。如果 Hystrix 包装的工作不抛出中断异常<code>InterruptedException</code>, 则在 Hystrix 线程池中的线程将会继续执行，尽管<code>调用的客户端</code>已经接收到了<code>TimeoutException</code>。这种方式会使 Hystrix 的线程池处于饱和状态。大部分的 Java Http Client 开源库并不会解析 <code>InterruptedException</code>。所以确认 HTTP client 相关的连接和读/写相关的超时时间设置。<br> 如果 Command 命令没有抛出任何异常，并且有返回结果，则 Hystrix 将会在做完日志记录和统计之后会将结果返回。 如果是通过<code>run()</code>方式运行，则返回一个<code>Obserable</code>对象，包含一个唯一值，并且发送一个<code>onCompleted</code>通知；如果是通过<code>consturct()</code>方式运行 ，则返回一个<code>Observable 对象</code>。</p></blockquote><p><strong>（七）健康检查</strong></p><p>Hystrix 会统计 Command 命令执行执行过程中的<strong>成功数</strong>、<strong>失败数</strong>、<strong>拒绝数</strong>和<strong>超时数</strong>, 将这些信息记录到<strong>断路器 (Circuit Breaker) <strong>中。断路器将上述统计按照</strong>时间窗</strong>的形式记录到一个定长数组中。断路器根据时间窗内的统计数据去判定请求什么时候可以被熔断，熔断后，在接下来一段恢复周期内，相同的请求过来后会直接被熔断。当再次校验，如果健康监测通过后，熔断开关将会被关闭。</p><p><strong>（八）获取 Fallback</strong></p><p>当以下场景出现后，Hystrix 将会尝试触发 <code>Fallback</code>:</p><blockquote><ul><li>步骤 6 Command 执行时抛出了任何异常；</li><li>步骤 4 断路器已经被打开</li><li>步骤 5 执行命令的线程池、队列或者信号量资源已满</li><li>命令执行的时间超过阈值</li></ul></blockquote><p><strong>（九）返回结果</strong></p><p>如果 Hystrix 命令对象执行成功，将会返回结果，或者以<code>Observable</code>形式包装的结果。根据**步骤 2 **的 command 调用方式，返回的<code>Observable</code> 会按照如下图说是的转换关系进行返回：</p><figure><img src="https:////upload-images.jianshu.io/upload_images/14126519-8790f97df332d9a2.png?imageMogr2/auto-orient/strip|imageView2/2/w/640/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li><code>execute()</code> — 用和 <code>.queue()</code> 相同的方式获取 <code>Future</code>，然后调用 <code>Future</code> 的 <code>get()</code> 以获取 <code>Observable</code> 的单个值。</li><li><code>queue()</code> —将 <code>Observable</code> 转换为 <code>BlockingObservable</code>，以便可以将其转换为 <code>Future</code> 并返回。</li><li><code>watch()</code> —订阅 <code>Observable</code> 并开始执行命令的流程； 返回一个 <code>Observable</code>，当订阅该 <code>Observable</code> 时，它会重新通知。</li><li><code>toObservable()</code> —返回不变的 <code>Observable</code>； 必须订阅它才能真正开始执行命令的流程。</li></ul><h3 id="断路器工作原理" tabindex="-1"><a class="header-anchor" href="#断路器工作原理" aria-hidden="true">#</a> 断路器工作原理</h3><figure><img src="https:////upload-images.jianshu.io/upload_images/14126519-dce007513bf90794.png?imageMogr2/auto-orient/strip|imageView2/2/w/640/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ol><li>断路器时间窗内的请求数是否超过了<strong>请求数断路器生效阈值</strong><code>circuitBreaker.requestVolumeThreshold</code>，如果超过了阈值，则将会触发断路，断路状态为<strong>开启</strong><br> 例如，如果当前阈值设置的是<code>20</code>，则当时间窗内统计的请求数共计 19 个，即使 19 个全部失败了，都不会触发断路器。</li><li>并且请求错误率超过了<strong>请求错误率阈值</strong><code>errorThresholdPercentage</code></li><li>如果两个都满足，则将断路器由<strong>关闭</strong>迁移到<strong>开启</strong></li><li>如果断路器开启，则后续的所有相同请求将会被断路掉；</li><li>直到过了<strong>沉睡时间窗</strong><code>sleepWindowInMilliseconds</code>后，再发起请求时，允许其通过（此时的状态为<strong>半开起状态</strong>）。如果请求失败了，则保持断路器状态为<strong>开启</strong>状态，并更新<strong>沉睡时间窗</strong>。如果请求成功了，则将断路器状态改为<strong>关闭</strong>状态；</li></ol><p>核心的逻辑如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token class-name">HealthCounts</span> hc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// check if we are past the statisticalWindowVolumeThreshold</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>hc<span class="token punctuation">.</span><span class="token function">getTotalRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> properties<span class="token punctuation">.</span><span class="token function">circuitBreakerRequestVolumeThreshold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// we are not past the minimum volume threshold for the stat window,</span>
        <span class="token comment">// so no change to circuit status.</span>
        <span class="token comment">// if it was CLOSED, it stays CLOSED</span>
        <span class="token comment">// if it was half-open, we need to wait for a successful command execution</span>
        <span class="token comment">// if it was open, we need to wait for sleep window to elapse</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>hc<span class="token punctuation">.</span><span class="token function">getErrorPercentage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> properties<span class="token punctuation">.</span><span class="token function">circuitBreakerErrorThresholdPercentage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//we are not past the minimum error threshold for the stat window,</span>
            <span class="token comment">// so no change to circuit status.</span>
            <span class="token comment">// if it was CLOSED, it stays CLOSED</span>
            <span class="token comment">// if it was half-open, we need to wait for a successful command execution</span>
            <span class="token comment">// if it was open, we need to wait for sleep window to elapse</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// our failure rate is too high, we need to set the state to OPEN</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token class-name">Status</span><span class="token punctuation">.</span><span class="token constant">CLOSED</span><span class="token punctuation">,</span> <span class="token class-name">Status</span><span class="token punctuation">.</span><span class="token constant">OPEN</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                circuitOpened<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="限流框架-sentinel" tabindex="-1"><a class="header-anchor" href="#限流框架-sentinel" aria-hidden="true">#</a> 限流框架 - Sentinel</h2><h2 id="其他限流解决方案" tabindex="-1"><a class="header-anchor" href="#其他限流解决方案" aria-hidden="true">#</a> 其他限流解决方案</h2><h3 id="guava-ratelimiter" tabindex="-1"><a class="header-anchor" href="#guava-ratelimiter" aria-hidden="true">#</a> Guava RateLimiter</h3><p>Guava 是 Google 开源的 Java 类库，提供了一个工具类 <code>RateLimiter</code>，它基于令牌桶算法实现了本地限流器。</p><details class="hint-container details"><summary>RateLimiter 限流示例</summary><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 限流器流速：2 个请求/秒</span>
<span class="token class-name">RateLimiter</span> limiter <span class="token operator">=</span> <span class="token class-name">RateLimiter</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 执行任务的线程池</span>
<span class="token class-name">ExecutorService</span> es <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 记录上一次执行时间</span>
prev <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 测试执行 20 次</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 限流器限流</span>
    limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 提交任务异步执行</span>
    es<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> cur <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 打印时间间隔：毫秒</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>cur <span class="token operator">-</span> prev<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        prev <span class="token operator">=</span> cur<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 输出结果：</span>
<span class="token comment">// ...</span>
<span class="token comment">// 500</span>
<span class="token comment">// 499</span>
<span class="token comment">// 500</span>
<span class="token comment">// 499</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="redis-lua" tabindex="-1"><a class="header-anchor" href="#redis-lua" aria-hidden="true">#</a> Redis + Lua</h3><p>如果想要针对分布式系统资源进行限流，则必须具备两个要素：</p><ol><li>对于资源的访问统计，必须是所有分布式节点都可以共享访问的数据存储；并且，由于在高并发场景下，读写访问统计数据会很频繁，该数据存储必须有很高的读写性能。</li><li>访问统计、限流计算都以原子操作方式进行。</li></ol><p>满足以上要素的一种简单解决方案是，采用 Redis + Lua 来实现，原因在于：</p><ul><li>Redis 数据库的读写性能极高；</li><li>Redis 支持以原子操作的方式执行 Lua 脚本。</li></ul><h4 id="redis-lua-实现的固定窗口限流算法" tabindex="-1"><a class="header-anchor" href="#redis-lua-实现的固定窗口限流算法" aria-hidden="true">#</a> Redis + Lua 实现的固定窗口限流算法</h4><p>Redis + Lua 实现的固定窗口限流算法实现思路：</p><ul><li>根据实际需要，将当前时间格式化为天（<code>yyyyMMdd</code>）、时（<code>yyyyMMddHH</code>）、分（<code>yyyyMMddHHmm</code>）、秒（<code>yyyyMMddHHmmss</code>），并作为 Redis 的 String 类型 Key。该 Key 可以视为一个固定时间窗口，其中的 value 用于统计访问量；</li><li>用于代表不同粒度的时间窗口按需设置过期时间；</li><li>一旦达到窗口的限流阈值时，请求被限流；否则请求通过。</li></ul><details class="hint-container details"><summary>Redis + Lua 实现的固定窗口限流算法</summary><p>下面的代码片段模拟通过一个大小为 1 分钟的固定时间窗口进行限流，阈值为 100，过期时间 60s。</p><p>限流脚本 <code>fixed_window_rate_limit.lua</code> 代码：</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- 缓存 Key</span>
<span class="token keyword">local</span> key <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token comment">-- 访问请求数</span>
<span class="token keyword">local</span> permits <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">-- 过期时间</span>
<span class="token keyword">local</span> seconds <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">-- 限流阈值</span>
<span class="token keyword">local</span> limit <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment">-- 获取统计值</span>
<span class="token keyword">local</span> count <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> count <span class="token operator">+</span> permits <span class="token operator">&gt;</span> limit <span class="token keyword">then</span>
    <span class="token comment">-- 触发限流</span>
    <span class="token keyword">return</span> <span class="token number">0</span>
<span class="token keyword">else</span>
    redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;INCRBY&#39;</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> permits<span class="token punctuation">)</span>
    redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;EXPIRE&#39;</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> seconds<span class="token punctuation">)</span>
    <span class="token keyword">return</span> count <span class="token operator">+</span> permits
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用 lua 的实际限流代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>collection<span class="token punctuation">.</span></span><span class="token class-name">CollectionUtil</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileUtil</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span>resource<span class="token punctuation">.</span></span><span class="token class-name">ResourceUtil</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">RandomUtil</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">StrUtil</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">Jedis</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span></span><span class="token class-name">JedisConnectionException</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">StandardCharsets</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collections</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisFixedWindowRateLimiter</span> <span class="token keyword">implements</span> <span class="token class-name">RateLimiter</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">REDIS_HOST</span> <span class="token operator">=</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">REDIS_PORT</span> <span class="token operator">=</span> <span class="token number">6379</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Jedis</span> <span class="token constant">JEDIS</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SCRIPT</span><span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token comment">// Jedis 有多种构造方法，这里选用最简单的一种情况</span>
        <span class="token constant">JEDIS</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token constant">REDIS_HOST</span><span class="token punctuation">,</span> <span class="token constant">REDIS_PORT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 触发 ping 命令</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token constant">JEDIS</span><span class="token punctuation">.</span><span class="token function">ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;jedis 连接成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JedisConnectionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token constant">SCRIPT</span> <span class="token operator">=</span> <span class="token class-name">FileUtil</span><span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token class-name">ResourceUtil</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">&quot;scripts/fixed_window_rate_limit.lua&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> maxPermits<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> periodSeconds<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> key<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">RedisFixedWindowRateLimiter</span><span class="token punctuation">(</span><span class="token keyword">long</span> qps<span class="token punctuation">,</span> <span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span>qps <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">RedisFixedWindowRateLimiter</span><span class="token punctuation">(</span><span class="token keyword">long</span> maxPermits<span class="token punctuation">,</span> <span class="token keyword">long</span> period<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> timeUnit<span class="token punctuation">,</span> <span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>maxPermits <span class="token operator">=</span> maxPermits<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>periodSeconds <span class="token operator">=</span> timeUnit<span class="token punctuation">.</span><span class="token function">toSeconds</span><span class="token punctuation">(</span>period<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token keyword">permits</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> keys <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> args <span class="token operator">=</span> <span class="token class-name">CollectionUtil</span><span class="token punctuation">.</span><span class="token function">newLinkedList</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">permits</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>periodSeconds<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>maxPermits<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> eval <span class="token operator">=</span> <span class="token constant">JEDIS</span><span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token constant">SCRIPT</span><span class="token punctuation">,</span> keys<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> value <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> eval<span class="token punctuation">;</span>
        <span class="token keyword">return</span> value <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>

        <span class="token keyword">int</span> qps <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
        <span class="token class-name">RateLimiter</span> jedisFixedWindowRateLimiter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisFixedWindowRateLimiter</span><span class="token punctuation">(</span>qps<span class="token punctuation">,</span> <span class="token string">&quot;rate:limit:20240122210000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 模拟在一分钟内，不断收到请求，限流是否有效</span>
        <span class="token keyword">int</span> seconds <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> okNum <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> total <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> beginTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token class-name">RandomUtil</span><span class="token punctuation">.</span><span class="token function">randomInt</span><span class="token punctuation">(</span>qps<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> second <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> second <span class="token operator">&lt;</span> seconds<span class="token punctuation">;</span> second<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                total<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>jedisFixedWindowRateLimiter<span class="token punctuation">.</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    okNum<span class="token operator">++</span><span class="token punctuation">;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;请求成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;请求限流&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">long</span> endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> time <span class="token operator">=</span> <span class="token punctuation">(</span>endTime <span class="token operator">-</span> beginTime<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;请求通过数：{}，总请求数：{}，实际 QPS：{}&quot;</span><span class="token punctuation">,</span> okNum<span class="token punctuation">,</span> total<span class="token punctuation">,</span> okNum <span class="token operator">/</span> time<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h4 id="redis-lua-实现的令牌桶限流算法" tabindex="-1"><a class="header-anchor" href="#redis-lua-实现的令牌桶限流算法" aria-hidden="true">#</a> Redis + Lua 实现的令牌桶限流算法</h4><details class="hint-container details"><summary>Redis + Lua 实现的令牌桶限流算法</summary><p>限流脚本 <code>token_bucket_rate_limit.lua</code> 代码：</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> tokenKey <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token keyword">local</span> timeKey <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>

<span class="token comment">-- 申请令牌数</span>
<span class="token keyword">local</span> permits <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">-- QPS</span>
<span class="token keyword">local</span> qps <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">-- 桶的容量</span>
<span class="token keyword">local</span> capacity <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">-- 当前时间（单位：毫秒）</span>
<span class="token keyword">local</span> nowMillis <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">-- 填满令牌桶所需要的时间</span>
<span class="token keyword">local</span> fillTime <span class="token operator">=</span> capacity <span class="token operator">/</span> qps
<span class="token keyword">local</span> ttl <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>fillTime <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">local</span> currentTokenNum <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span> tokenKey<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> currentTokenNum <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">then</span>
    currentTokenNum <span class="token operator">=</span> capacity
<span class="token keyword">end</span>

<span class="token keyword">local</span> endTimeMillis <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span> timeKey<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> endTimeMillis <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">then</span>
    endTimeMillis <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">end</span>

<span class="token keyword">local</span> gap <span class="token operator">=</span> nowMillis <span class="token operator">-</span> endTimeMillis
<span class="token keyword">local</span> newTokenNum <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> gap <span class="token operator">*</span> qps <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token keyword">local</span> currentTokenNum <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> currentTokenNum <span class="token operator">+</span> newTokenNum<span class="token punctuation">)</span>

<span class="token keyword">if</span> currentTokenNum <span class="token operator">&lt;</span> permits <span class="token keyword">then</span>
    <span class="token comment">-- 请求拒绝</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
<span class="token keyword">else</span>
    <span class="token comment">-- 请求通过</span>
    <span class="token keyword">local</span> finalTokenNum <span class="token operator">=</span> currentTokenNum <span class="token operator">-</span> permits
    redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&quot;SETEX&quot;</span><span class="token punctuation">,</span> tokenKey<span class="token punctuation">,</span> ttl<span class="token punctuation">,</span> finalTokenNum<span class="token punctuation">)</span>
    redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&quot;SETEX&quot;</span><span class="token punctuation">,</span> timeKey<span class="token punctuation">,</span> ttl<span class="token punctuation">,</span> nowMillis<span class="token punctuation">)</span>
    <span class="token keyword">return</span> finalTokenNum
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用 lua 的实际限流代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">io<span class="token punctuation">.</span>github<span class="token punctuation">.</span>dunwu<span class="token punctuation">.</span>distributed<span class="token punctuation">.</span>ratelimit</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>collection<span class="token punctuation">.</span></span><span class="token class-name">CollectionUtil</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileUtil</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span>resource<span class="token punctuation">.</span></span><span class="token class-name">ResourceUtil</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">RandomUtil</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">StrUtil</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">Jedis</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span></span><span class="token class-name">JedisConnectionException</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">StandardCharsets</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 基于 Redis + Lua 实现的令牌桶限流算法
 *
 * <span class="token keyword">@author</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mailto:forbreak@163.com<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Zhang Peng<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
 * <span class="token keyword">@date</span> 2024-01-23
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisTokenBucketRateLimiter</span> <span class="token keyword">implements</span> <span class="token class-name">RateLimiter</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">REDIS_HOST</span> <span class="token operator">=</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">REDIS_PORT</span> <span class="token operator">=</span> <span class="token number">6379</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Jedis</span> <span class="token constant">JEDIS</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SCRIPT</span><span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token comment">// Jedis 有多种构造方法，这里选用最简单的一种情况</span>
        <span class="token constant">JEDIS</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token constant">REDIS_HOST</span><span class="token punctuation">,</span> <span class="token constant">REDIS_PORT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 触发 ping 命令</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token constant">JEDIS</span><span class="token punctuation">.</span><span class="token function">ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;jedis 连接成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JedisConnectionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token constant">SCRIPT</span> <span class="token operator">=</span> <span class="token class-name">FileUtil</span><span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token class-name">ResourceUtil</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">&quot;scripts/token_bucket_rate_limit.lua&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> qps<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> capacity<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> tokenKey<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> timeKey<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">RedisTokenBucketRateLimiter</span><span class="token punctuation">(</span><span class="token keyword">long</span> qps<span class="token punctuation">,</span> <span class="token keyword">long</span> capacity<span class="token punctuation">,</span> <span class="token class-name">String</span> tokenKey<span class="token punctuation">,</span> <span class="token class-name">String</span> timeKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>qps <span class="token operator">=</span> qps<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>tokenKey <span class="token operator">=</span> tokenKey<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>timeKey <span class="token operator">=</span> timeKey<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token keyword">permits</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> now <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> keys <span class="token operator">=</span> <span class="token class-name">CollectionUtil</span><span class="token punctuation">.</span><span class="token function">newLinkedList</span><span class="token punctuation">(</span>tokenKey<span class="token punctuation">,</span> timeKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> args <span class="token operator">=</span> <span class="token class-name">CollectionUtil</span><span class="token punctuation">.</span><span class="token function">newLinkedList</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">permits</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>qps<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>capacity<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> eval <span class="token operator">=</span> <span class="token constant">JEDIS</span><span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token constant">SCRIPT</span><span class="token punctuation">,</span> keys<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> value <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> eval<span class="token punctuation">;</span>
        <span class="token keyword">return</span> value <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>

        <span class="token keyword">int</span> qps <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> bucket <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
        <span class="token class-name">RedisTokenBucketRateLimiter</span> redisTokenBucketRateLimiter <span class="token operator">=</span>
            <span class="token keyword">new</span> <span class="token class-name">RedisTokenBucketRateLimiter</span><span class="token punctuation">(</span>qps<span class="token punctuation">,</span> bucket<span class="token punctuation">,</span> <span class="token string">&quot;token:rate:limit&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;token:rate:limit:time&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 先将令牌桶预热令牌申请完，后续才能真实反映限流 QPS</span>
        redisTokenBucketRateLimiter<span class="token punctuation">.</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>bucket<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 模拟在一分钟内，不断收到请求，限流是否有效</span>
        <span class="token keyword">int</span> seconds <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> okNum <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> total <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> beginTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> second <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> second <span class="token operator">&lt;</span> seconds<span class="token punctuation">;</span> second<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token class-name">RandomUtil</span><span class="token punctuation">.</span><span class="token function">randomInt</span><span class="token punctuation">(</span>qps<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                total<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>redisTokenBucketRateLimiter<span class="token punctuation">.</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    okNum<span class="token operator">++</span><span class="token punctuation">;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;请求成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;请求限流&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">long</span> endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> time <span class="token operator">=</span> <span class="token punctuation">(</span>endTime <span class="token operator">-</span> beginTime<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;请求通过数：{}，总请求数：{}，实际 QPS：{}&quot;</span><span class="token punctuation">,</span> okNum<span class="token punctuation">,</span> total<span class="token punctuation">,</span> okNum <span class="token operator">/</span> time<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,50),K={href:"https://github.com/Netflix/Hystrix/wiki",target:"_blank",rel:"noopener noreferrer"},J={href:"https://item.jd.com/11322972.html",target:"_blank",rel:"noopener noreferrer"},G={href:"https://www.jianshu.com/p/76cc8ba5ca91",target:"_blank",rel:"noopener noreferrer"},V={href:"https://github.com/doocs/advanced-java/blob/master/docs/high-concurrency/huifer-how-to-limit-current.md",target:"_blank",rel:"noopener noreferrer"},z={href:"https://gongfukangee.github.io/2019/04/04/Limit/",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://blog.csdn.net/forezp/article/details/100060686",target:"_blank",rel:"noopener noreferrer"};function Y(X,Z){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("p",null,[s("图片来自 "),n("a",k,[s("Hystrix Wiki"),t(a)])]),r,d,n("p",null,[s("图片来自 "),n("a",m,[s("Hystrix Wiki"),t(a)])]),v,b,n("p",null,[s("图片来自 "),n("a",y,[s("Hystrix Wiki"),t(a)])]),g,n("blockquote",null,[w,n("p",null,[s("Guava 的 RateLimiter 工具类就是基于令牌桶算法实现，其源码分析可以参考："),n("a",h,[s("RateLimiter 基于漏桶算法，但它参考了令牌桶算法"),t(a)])])]),f,n("table",null,[x,n("tbody",null,[n("tr",null,[n("td",S,[n("a",L,[q,t(a)])]),_,T]),n("tr",null,[n("td",R,[n("a",N,[C,t(a)])]),j,O]),n("tr",null,[n("td",M,[n("a",H,[E,t(a)])]),I,P]),n("tr",null,[n("td",A,[n("a",U,[D,t(a)])]),F,W])])]),B,n("ul",null,[n("li",null,[n("a",K,[s("Hystrix Wiki"),t(a)])]),n("li",null,[n("a",J,[s("《大型网站技术架构：核心原理与案例分析》"),t(a)])]),n("li",null,[n("a",G,[s("谈谈限流算法的几种实现"),t(a)])]),n("li",null,[n("a",V,[s("如何限流？在工作中是怎么做的？说一下具体的实现？"),t(a)])]),n("li",null,[n("a",z,[s("浅析限流算法"),t(a)])]),n("li",null,[n("a",Q,[s("RateLimiter 基于漏桶算法，但它参考了令牌桶算法"),t(a)])])])])}const sn=e(l,[["render",Y],["__file","index.html.vue"]]);export{sn as default};
