const a=JSON.parse('{"key":"v-7d14bffe","path":"/pages/f23795fd/","title":"深入理解 Java String 类型","lang":"zh-CN","frontmatter":{"title":"深入理解 Java String 类型","date":"2020-12-25T18:43:11.000Z","order":42,"permalink":"/pages/f23795fd/","category":["Java","JavaCore","基础特性"],"tag":["Java","JavaCore","工具类","字符串"],"description":"深入理解 Java String 类型 String 类型可能是 Java 中应用最频繁的引用类型，但它的性能问题却常常被忽略。高效的使用字符串，可以提升系统的整体性能。当然，要做到高效使用字符串，需要深入了解其特性。 String 的不可变性 我们先来看下 String 的定义： public final class String implements java.io.Serializable, Comparable&lt;String&gt;, CharSequence { /** The value is used for character storage. */ private final char value[];","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/f23795fd/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"深入理解 Java String 类型"}],["meta",{"property":"og:description","content":"深入理解 Java String 类型 String 类型可能是 Java 中应用最频繁的引用类型，但它的性能问题却常常被忽略。高效的使用字符串，可以提升系统的整体性能。当然，要做到高效使用字符串，需要深入了解其特性。 String 的不可变性 我们先来看下 String 的定义： public final class String implements java.io.Serializable, Comparable&lt;String&gt;, CharSequence { /** The value is used for character storage. */ private final char value[];"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-13T15:15:47.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"JavaCore"}],["meta",{"property":"article:tag","content":"工具类"}],["meta",{"property":"article:tag","content":"字符串"}],["meta",{"property":"article:published_time","content":"2020-12-25T18:43:11.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-13T15:15:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"深入理解 Java String 类型\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-12-25T18:43:11.000Z\\",\\"dateModified\\":\\"2025-09-13T15:15:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"String 的不可变性","slug":"string-的不可变性","link":"#string-的不可变性","children":[]},{"level":2,"title":"String 的性能考量","slug":"string-的性能考量","link":"#string-的性能考量","children":[{"level":3,"title":"字符串拼接","slug":"字符串拼接","link":"#字符串拼接","children":[]},{"level":3,"title":"字符串分割","slug":"字符串分割","link":"#字符串分割","children":[]},{"level":3,"title":"String.intern","slug":"string-intern","link":"#string-intern","children":[]}]},{"level":2,"title":"String、StringBuffer、StringBuilder 有什么区别","slug":"string、stringbuffer、stringbuilder-有什么区别","link":"#string、stringbuffer、stringbuilder-有什么区别","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1743948422000,"updatedTime":1757776547000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":2}]},"readingTime":{"minutes":6.03,"words":1809},"filePathRelative":"01.Java/01.JavaCore/01.基础特性/Java_String.md","localizedDate":"2020年12月25日","excerpt":"<h1> 深入理解 Java String 类型</h1>\\n<blockquote>\\n<p>String 类型可能是 Java 中应用最频繁的引用类型，但它的性能问题却常常被忽略。高效的使用字符串，可以提升系统的整体性能。当然，要做到高效使用字符串，需要深入了解其特性。</p>\\n</blockquote>\\n<h2> String 的不可变性</h2>\\n<p>我们先来看下 <code>String</code> 的定义：</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">final</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">String</span>\\n    <span class=\\"token keyword\\">implements</span> <span class=\\"token class-name\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>io<span class=\\"token punctuation\\">.</span></span>Serializable</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Comparable</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">CharSequence</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token doc-comment comment\\">/** The value is used for character storage. */</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">final</span> <span class=\\"token keyword\\">char</span> value<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{a as data};
