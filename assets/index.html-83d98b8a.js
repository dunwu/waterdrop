const e=JSON.parse('{"key":"v-b542cbc4","path":"/pages/7ccde2a4/","title":"设计模式之组合模式","lang":"zh-CN","frontmatter":{"title":"设计模式之组合模式","date":"2015-01-14T15:33:00.000Z","order":"09","permalink":"/pages/7ccde2a4/","category":["设计","设计模式"],"tag":["设计","设计模式"],"description":"设计模式之组合模式 意图 组合模式 (Component) 是一种结构型设计模式，将对象组合成树形结构以表示“部分-整体”的层次结构。 组合模式使得用户对单个对象和组合对象的使用具有唯一性。 适用场景 组合模式的适用场景： 想要表示对象的部分-整体层次结构。 想要客户端忽略组合对象与单个对象的差异，客户端将统一地使用组合结构中的所有对象。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/7ccde2a4/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"设计模式之组合模式"}],["meta",{"property":"og:description","content":"设计模式之组合模式 意图 组合模式 (Component) 是一种结构型设计模式，将对象组合成树形结构以表示“部分-整体”的层次结构。 组合模式使得用户对单个对象和组合对象的使用具有唯一性。 适用场景 组合模式的适用场景： 想要表示对象的部分-整体层次结构。 想要客户端忽略组合对象与单个对象的差异，客户端将统一地使用组合结构中的所有对象。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-18T15:46:22.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"设计"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2015-01-14T15:33:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-18T15:46:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式之组合模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2015-01-14T15:33:00.000Z\\",\\"dateModified\\":\\"2024-06-18T15:46:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"意图","slug":"意图","link":"#意图","children":[]},{"level":2,"title":"适用场景","slug":"适用场景","link":"#适用场景","children":[]},{"level":2,"title":"结构","slug":"结构","link":"#结构","children":[{"level":3,"title":"结构说明","slug":"结构说明","link":"#结构说明","children":[]},{"level":3,"title":"结构代码范式","slug":"结构代码范式","link":"#结构代码范式","children":[]}]},{"level":2,"title":"伪代码","slug":"伪代码","link":"#伪代码","children":[]},{"level":2,"title":"案例","slug":"案例","link":"#案例","children":[]},{"level":2,"title":"与其他模式的关系","slug":"与其他模式的关系","link":"#与其他模式的关系","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1651071272000,"updatedTime":1718725582000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":5}]},"readingTime":{"minutes":7.77,"words":2330},"filePathRelative":"03.设计/02.设计模式/09.组合模式.md","localizedDate":"2015年1月14日","excerpt":"<h1> 设计模式之组合模式</h1>\\n<h2> 意图</h2>\\n<p><strong>组合模式</strong> (Component) 是一种结构型设计模式，将对象组合成<strong>树形结构</strong>以表示“部分-整体”的层次结构。</p>\\n<p>组合模式使得用户对单个对象和组合对象的使用具有<strong>唯一性</strong>。</p>\\n<h2> 适用场景</h2>\\n<p>组合模式的适用场景：</p>\\n<ul>\\n<li>想要表示对象的部分-整体层次结构。</li>\\n<li>想要客户端忽略组合对象与单个对象的差异，客户端将统一地使用组合结构中的所有对象。</li>\\n</ul>","autoDesc":true}');export{e as data};
