const e=JSON.parse('{"key":"v-7882295f","path":"/pages/8f98ee65/","title":"Tomcat容器","lang":"zh-CN","frontmatter":{"icon":"logos:tomcat","title":"Tomcat容器","date":"2022-02-17T22:34:30.000Z","order":3,"permalink":"/pages/8f98ee65/","category":["Java","服务器","Tomcat"],"tag":["Java","服务器","Tomcat"],"description":"Tomcat 容器 Tomcat 实现热部署和热加载 热加载的实现方式是 Web 容器启动一个后台线程，定期检测类文件的变化，如果有变化，就重新加载类，在这个过程中不会清空 Session ，一般用在开发环境。 热部署原理类似，也是由后台线程定时检测 Web 应用的变化，但它会重新加载整个 Web 应用。这种方式会清空 Session，比热加载更加干净、彻底，一般用在生产环境。 Tomcat 通过开启后台线程，使得各个层次的容器组件都有机会完成一些周期性任务。Tomcat 是基于 ScheduledThreadPoolExecutor 实现周期性任务的：","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/8f98ee65/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"Tomcat容器"}],["meta",{"property":"og:description","content":"Tomcat 容器 Tomcat 实现热部署和热加载 热加载的实现方式是 Web 容器启动一个后台线程，定期检测类文件的变化，如果有变化，就重新加载类，在这个过程中不会清空 Session ，一般用在开发环境。 热部署原理类似，也是由后台线程定时检测 Web 应用的变化，但它会重新加载整个 Web 应用。这种方式会清空 Session，比热加载更加干净、彻底，一般用在生产环境。 Tomcat 通过开启后台线程，使得各个层次的容器组件都有机会完成一些周期性任务。Tomcat 是基于 ScheduledThreadPoolExecutor 实现周期性任务的："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-23T15:53:48.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"服务器"}],["meta",{"property":"article:tag","content":"Tomcat"}],["meta",{"property":"article:published_time","content":"2022-02-17T22:34:30.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-23T15:53:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Tomcat容器\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-02-17T22:34:30.000Z\\",\\"dateModified\\":\\"2025-09-23T15:53:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"Tomcat 实现热部署和热加载","slug":"tomcat-实现热部署和热加载","link":"#tomcat-实现热部署和热加载","children":[{"level":3,"title":"ContainerBackgroundProcessor 实现","slug":"containerbackgroundprocessor-实现","link":"#containerbackgroundprocessor-实现","children":[]},{"level":3,"title":"backgroundProcess 方法","slug":"backgroundprocess-方法","link":"#backgroundprocess-方法","children":[]},{"level":3,"title":"Tomcat 热加载","slug":"tomcat-热加载","link":"#tomcat-热加载","children":[]},{"level":3,"title":"Tomcat 热部署","slug":"tomcat-热部署","link":"#tomcat-热部署","children":[]}]},{"level":2,"title":"Tomcat 的类加载机制","slug":"tomcat-的类加载机制","link":"#tomcat-的类加载机制","children":[{"level":3,"title":"findClass 方法","slug":"findclass-方法","link":"#findclass-方法","children":[]},{"level":3,"title":"loadClass 方法","slug":"loadclass-方法","link":"#loadclass-方法","children":[]},{"level":3,"title":"Tomcat 实现应用隔离","slug":"tomcat-实现应用隔离","link":"#tomcat-实现应用隔离","children":[]}]},{"level":2,"title":"Tomcat 实现 Servlet 规范","slug":"tomcat-实现-servlet-规范","link":"#tomcat-实现-servlet-规范","children":[{"level":3,"title":"Servlet 管理","slug":"servlet-管理","link":"#servlet-管理","children":[]},{"level":3,"title":"Filter 管理","slug":"filter-管理","link":"#filter-管理","children":[]},{"level":3,"title":"Listener 管理","slug":"listener-管理","link":"#listener-管理","children":[]}]},{"level":2,"title":"Tomcat 支持异步 Servlet","slug":"tomcat-支持异步-servlet","link":"#tomcat-支持异步-servlet","children":[{"level":3,"title":"异步示例","slug":"异步示例","link":"#异步示例","children":[]},{"level":3,"title":"异步 Servlet 原理","slug":"异步-servlet-原理","link":"#异步-servlet-原理","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1758642828000,"updatedTime":1758642828000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":1}]},"readingTime":{"minutes":27.07,"words":8121},"filePathRelative":"01.Java/服务器/Tomcat/Tomcat_容器.md","localizedDate":"2022年2月17日","excerpt":"<h1> Tomcat 容器</h1>\\n<h2> Tomcat 实现热部署和热加载</h2>\\n<ul>\\n<li>热加载的实现方式是 Web 容器启动一个后台线程，定期检测类文件的变化，如果有变化，就重新加载类，在这个过程中不会清空 Session ，一般用在开发环境。</li>\\n<li>热部署原理类似，也是由后台线程定时检测 Web 应用的变化，但它会重新加载整个 Web 应用。这种方式会清空 Session，比热加载更加干净、彻底，一般用在生产环境。</li>\\n</ul>\\n<p>Tomcat 通过开启后台线程，使得各个层次的容器组件都有机会完成一些周期性任务。Tomcat 是基于 ScheduledThreadPoolExecutor 实现周期性任务的：</p>","autoDesc":true}');export{e as data};
