import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as i,c as l,a as n,b as s,d as e,e as o}from"./app-c623f975.js";const p={},d=o('<h1 id="java-并发面试一" tabindex="-1"><a class="header-anchor" href="#java-并发面试一" aria-hidden="true">#</a> Java 并发面试一</h1><h2 id="并发简介" tabindex="-1"><a class="header-anchor" href="#并发简介" aria-hidden="true">#</a> 并发简介</h2><h3 id="【简单】并发和并行有什么区别" tabindex="-1"><a class="header-anchor" href="#【简单】并发和并行有什么区别" aria-hidden="true">#</a> 【简单】并发和并行有什么区别？</h3><blockquote><ul><li>什么是并发？</li><li>什么是并行？</li><li>并发和并行有什么区别？</li></ul></blockquote><p>并发和并行是最容易让新手费解的概念，那么如何理解二者呢？其最关键的差异在于：是否是<strong>同时</strong>发生：</p><ul><li><strong>并发</strong>：是指具备处理多个任务的能力，但不一定要同时。</li><li><strong>并行</strong>：是指具备同时处理多个任务的能力。</li></ul>',6),r={href:"https://www.zhihu.com/question/33515481/answer/58849148",target:"_blank",rel:"noopener noreferrer"},u=o(`<ul><li>你吃饭吃到一半，电话来了，你一直到吃完了以后才去接，这就说明你不支持并发也不支持并行。</li><li>你吃饭吃到一半，电话来了，你停了下来接了电话，接完后继续吃饭，这说明你支持并发。</li><li>你吃饭吃到一半，电话来了，你一边打电话一边吃饭，这说明你支持并行。</li></ul><h3 id="【简单】同步和异步有什么区别" tabindex="-1"><a class="header-anchor" href="#【简单】同步和异步有什么区别" aria-hidden="true">#</a> 【简单】同步和异步有什么区别？</h3><blockquote><ul><li>什么是同步？</li><li>什么是异步？</li><li>同步和异步有什么区别？</li></ul></blockquote><ul><li><strong>同步</strong>：是指在发出一个调用时，在没有得到结果之前，该调用就不返回。但是一旦调用返回，就得到返回值了。</li><li><strong>异步</strong>：则是相反，调用在发出之后，这个调用就直接返回了，所以没有返回结果。换句话说，当一个异步过程调用发出后，调用者不会立刻得到结果。而是在调用发出后，被调用者通过状态、通知来通知调用者，或通过回调函数处理这个调用。</li></ul><p>举例来说明：</p><ul><li>同步就像是打电话：不挂电话，通话不会结束。</li><li>异步就像是发短信：发完短信后，就可以做其他事；当收到回复短信时，手机会通过铃声或振动来提醒。</li></ul><h3 id="【简单】阻塞和非阻塞有什么区别" tabindex="-1"><a class="header-anchor" href="#【简单】阻塞和非阻塞有什么区别" aria-hidden="true">#</a> 【简单】阻塞和非阻塞有什么区别？</h3><blockquote><ul><li>什么是阻塞？</li><li>阻塞和非阻塞有什么区别？</li></ul></blockquote><p>阻塞和非阻塞关注的是程序在等待调用结果（消息，返回值）时的状态：</p><ul><li><strong>阻塞</strong>：是指调用结果返回之前，当前线程会被挂起。调用线程只有在得到结果之后才会返回。</li><li><strong>非阻塞</strong>：是指在不能立刻得到结果之前，该调用不会阻塞当前线程。</li></ul><p>举例来说明：</p><ul><li>阻塞调用就像是打电话，通话不结束，不能放下。</li><li>非阻塞调用就像是发短信，发完短信后，就可以做其他事，短信来了，手机会提醒。</li></ul><h3 id="【中等】进程、线程、协程、管程有什么区别" tabindex="-1"><a class="header-anchor" href="#【中等】进程、线程、协程、管程有什么区别" aria-hidden="true">#</a> 【中等】进程、线程、协程、管程有什么区别？</h3><blockquote><ul><li>什么是进程？</li><li>什么是线程？</li><li>什么是协程？</li><li>什么是管程？</li><li>进程、线程、协程、管程有什么区别？</li></ul></blockquote><ul><li><strong>进程（Process）</strong> - 进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动。进程是操作系统进行资源分配的基本单位。<strong>进程可视为一个正在运行的程序</strong>。</li><li><strong>线程（Thread）</strong> - <strong>线程是操作系统进行调度的基本单位</strong>。</li><li><strong>管程（Monitor）</strong> - <strong>管程是指管理共享变量以及对共享变量的操作过程，让他们支持并发</strong>。 <ul><li>Java 通过 <code>synchronized</code> 关键字及 <code>wait()</code>、<code>notify()</code>、<code>notifyAll()</code> 这三个方法来实现管程技术。</li><li><strong>管程和信号量是等价的，所谓等价指的是用管程能够实现信号量，也能用信号量实现管程</strong>。</li></ul></li><li><strong>协程（Coroutine）</strong> - <strong>协程可以理解为一种轻量级的线程</strong>。 <ul><li>从操作系统的角度来看，线程是在内核态中调度的，而协程是在用户态调度的，所以相对于线程来说，协程切换的成本更低。</li><li>协程虽然也有自己的栈，但是相比线程栈要小得多，典型的线程栈大小差不多有 1M，而协程栈的大小往往只有几 K 或者几十 K。所以，无论是从时间维度还是空间维度来看，协程都比线程轻量得多。</li><li>Go、Python、Lua、Kotlin 等语言都支持协程；Java OpenSDK 中的 Loom 项目目标就是支持协程。</li></ul></li></ul><p>进程和线程的差异：</p><ul><li>一个程序至少有一个进程，一个进程至少有一个线程。</li><li>线程比进程划分更细，所以执行开销更小，并发性更高</li><li>进程是一个实体，拥有独立的资源；而同一个进程中的多个线程共享进程的资源。</li></ul><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/java/javacore/concurrent/processes-vs-threads.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>JVM 在单个进程中运行，JVM 中的线程共享属于该进程的堆。这就是为什么几个线程可以访问同一个对象。线程共享堆并拥有自己的堆栈空间。这是一个线程如何调用一个方法以及它的局部变量是如何保持线程安全的。但是堆不是线程安全的并且为了线程安全必须进行同步。</p><h3 id="【中等】java-线程和操作系统的线程有什么区别" tabindex="-1"><a class="header-anchor" href="#【中等】java-线程和操作系统的线程有什么区别" aria-hidden="true">#</a> 【中等】Java 线程和操作系统的线程有什么区别？</h3><p>以下是 Java 线程与操作系统线程的区别对比表：</p><table><thead><tr><th><strong>对比维度</strong></th><th><strong>Java 线程</strong></th><th><strong>操作系统线程</strong></th></tr></thead><tbody><tr><td><strong>抽象层级</strong></td><td>JVM 层面的用户态抽象（现代 JVM 1:1 映射到 OS 线程）</td><td>内核直接管理的原生线程（内核态）</td></tr><tr><td><strong>调度机制</strong></td><td>依赖 OS 调度，但可通过协程（如虚拟线程）优化</td><td>完全由内核抢占式调度</td></tr><tr><td><strong>创建/切换开销</strong></td><td>高（需系统调用），但线程池可优化</td><td>高（上下文切换涉及用户态-内核态切换）</td></tr><tr><td><strong>并发模型</strong></td><td>支持 1:1（默认）和 M:N（虚拟线程）</td><td>仅 1:1，并发数受内核限制</td></tr><tr><td><strong>平台依赖性</strong></td><td>跨平台（JVM 统一行为，底层实现因 OS 而异）</td><td>直接依赖 OS 和硬件特性（如线程优先级实现不同）</td></tr><tr><td><strong>同步机制</strong></td><td>高级抽象（如<code>synchronized</code>，映射为 OS 原语）</td><td>底层原语（如<code>pthread_mutex</code>）</td></tr><tr><td><strong>栈内存占用</strong></td><td>默认 1MB（可调），虚拟线程仅 KB 级</td><td>Linux 默认 8MB（不可跨线程共享）</td></tr><tr><td><strong>典型应用场景</strong></td><td>通用并发编程，高并发推荐虚拟线程</td><td>直接系统编程，需精细控制线程行为的场景</td></tr></tbody></table><p><strong>补充说明</strong>：</p><ol><li><strong>现代 JVM</strong>：HotSpot 等主流 JVM 默认将 Java 线程与 OS 线程** 1:1 绑定**，但虚拟线程（Project Loom）实现** M:N 映射**，显著提升并发能力。</li><li><strong>性能关键点</strong>： <ul><li>Java 线程的阻塞操作（如 I/O）会阻塞 OS 线程，而虚拟线程通过挂起避免资源浪费。</li><li>OS 线程数量过多会导致内存和调度开销激增，Java 线程池或虚拟线程可缓解。</li></ul></li></ol><h3 id="【中等】单核-cpu-支持-java-多线程吗" tabindex="-1"><a class="header-anchor" href="#【中等】单核-cpu-支持-java-多线程吗" aria-hidden="true">#</a> 【中等】单核 CPU 支持 Java 多线程吗？</h3><p><strong>单核 CPU 可以支持 Java 多线程</strong>，但多个线程<strong>无法真正并行执行</strong>，而是通过<strong>时间片轮转（分时调度）<strong>在单个 CPU 核心上交替运行，实现</strong>并发（Concurrency）<strong>而非</strong>并行（Parallelism）</strong>。</p><p>这里顺带提一下 Java 使用的线程调度方式。</p><p>操作系统主要通过两种线程调度方式来管理多线程的执行：</p><ul><li><strong>抢占式调度（Preemptive Scheduling）</strong>：操作系统决定何时暂停当前正在运行的线程，并切换到另一个线程执行。这种切换通常是由系统时钟中断（时间片轮转）或其他高优先级事件（如 I/O 操作完成）触发的。这种方式存在上下文切换开销，但公平性和 CPU 资源利用率较好，不易阻塞。</li><li><strong>协同式调度（Cooperative Scheduling）</strong>：线程执行完毕后，主动通知系统切换到另一个线程。这种方式可以减少上下文切换带来的性能开销，但公平性较差，容易阻塞。</li></ul><p>Java 使用的线程调度是抢占式的。也就是说，JVM 本身不负责线程的调度，而是将线程的调度委托给操作系统。操作系统通常会基于线程优先级和时间片来调度线程的执行，高优先级的线程通常获得 CPU 时间片的机会更多。</p><h3 id="【简单】并发一定比串行更快吗" tabindex="-1"><a class="header-anchor" href="#【简单】并发一定比串行更快吗" aria-hidden="true">#</a> 【简单】并发一定比串行更快吗？</h3><p><strong>并发不一定比串行更快</strong>！关键看场景：</p><p><strong>并发更快的情况</strong></p><ul><li>📶 <strong>I/O 密集型</strong>：网络/磁盘操作时，CPU 可切换做其他事</li><li>⚡ <strong>多核 CPU</strong>：真正并行执行计算任务</li></ul><p><strong>串行更快的情况</strong></p><ul><li>🔢 <strong>单核 CPU 计算</strong>：线程切换反而增加开销</li><li>🔒 <strong>高竞争场景</strong>：锁争用导致线程空等</li><li>🎯 <strong>简单任务</strong>：并发管理开销超过收益</li></ul><p><strong>黄金法则</strong></p><ul><li>I/O 多用并发，计算多用多核</li><li>避免无脑加线程，合理控制并发度</li></ul><h3 id="【简单】什么是并发安全-有哪些线程不安全的情况" tabindex="-1"><a class="header-anchor" href="#【简单】什么是并发安全-有哪些线程不安全的情况" aria-hidden="true">#</a> 【简单】什么是并发安全？有哪些线程不安全的情况？</h3><div class="hint-container info"><p class="hint-container-title">什么是并发安全？</p></div><p>并发最重要的问题是并发安全问题。所谓<strong>并发安全</strong>，是指保证程序的正确性，使得并发处理结果符合预期。</p><p>并发安全需要保证几个基本特性：</p><ul><li><strong>可见性</strong> - 是一个线程修改了某个共享变量，其状态能够立即被其他线程知晓，通常被解释为将线程本地状态反映到主内存上，<code>volatile</code> 就是负责保证可见性的。</li><li><strong>原子性</strong> - 简单说就是相关操作不会中途被其他线程干扰，一般通过同步机制（加锁：<code>sychronized</code>、<code>Lock</code>）实现。</li><li><strong>有序性</strong> - 是保证线程内串行语义，避免指令重排等。</li></ul><div class="hint-container info"><p class="hint-container-title">有哪些线程不安全的情况？</p></div><ul><li><strong>竞态条件</strong>：多线程同时修改共享变量（如 <code>count++</code>）</li><li><strong>非原子操作</strong>：多步骤操作被中断（如 <code>if(x==null) x=new Object()</code>）</li><li><strong>可见性问题</strong>：线程 A 的修改对线程 B 不可见</li><li><strong>死锁</strong>：多个线程互相持有对方需要的锁</li><li><strong>资源泄漏</strong>：线程未释放资源（如连接、文件）</li></ul><div class="hint-container info"><p class="hint-container-title">线程不安全有哪些解决办法？</p></div><ul><li>同步：<code>synchronized</code>、<code>Lock</code></li><li>原子类：<code>AtomicInteger</code></li><li>不可变对象：<code>final</code></li><li>并发容器：<code>ConcurrentHashMap</code></li></ul><blockquote><p>核心：减少共享数据，合理加锁</p></blockquote><h3 id="【中等】为什么会有并发安全问题" tabindex="-1"><a class="header-anchor" href="#【中等】为什么会有并发安全问题" aria-hidden="true">#</a> 【中等】为什么会有并发安全问题？</h3><p><strong>（1）缓存导致的可见性问题</strong></p><p>一个线程对共享变量的修改，另外一个线程能够立刻看到，称为 <strong>可见性</strong>。</p><p>在单核时代，所有的线程都是在一颗 CPU 上执行，CPU 缓存与内存的数据一致性容易解决。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202409042331169.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>多核时代，每颗 CPU 都有自己的缓存，这时 CPU 缓存与内存的数据一致性就没那么容易解决了，当多个线程在不同的 CPU 上执行时，这些线程操作的是不同的 CPU 缓存。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202409042332517.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>（2）线程切换带来的原子性问题</strong></p><p>Java 的并发也是基于任务切换。Java 中，即使是一条语句，也可能需要执行多条 CPU 指令。<strong>一个或者多个操作在 CPU 执行的过程中不被中断的特性称为原子性</strong>。</p><p>CPU 能保证的原子操作是 CPU 指令级别的，而不是高级语言的操作符。违背直觉的是，高级语言里一条语句往往需要多条 CPU 指令完成，例如上面代码中的<code>count += 1</code>，至少需要三条 CPU 指令。</p><ul><li>指令 1：首先，需要把变量 count 从内存加载到 CPU 的寄存器；</li><li>指令 2：之后，在寄存器中执行+1 操作；</li><li>指令 3：最后，将结果写入内存（缓存机制导致可能写入的是 CPU 缓存而不是内存）。</li></ul><p>因此，执行 <code>count += 1</code> 不是原子操作。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202409042334004.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>（3）编译优化带来的有序性问题</strong></p><p>有序性指的是程序按照代码的先后顺序执行。编译器为了优化性能，有时候会改变程序中语句的先后顺序，例如程序中：<code>a=6; b=7;</code> 编译器优化后可能变成 <code>b=7; a=6;</code>，在这个例子中，编译器调整了语句的顺序，但是不影响程序的最终结果。不过有时候编译器及解释器的优化可能导致意想不到的 Bug。</p><h3 id="【中等】哪些场景需要额外注意线程安全问题" tabindex="-1"><a class="header-anchor" href="#【中等】哪些场景需要额外注意线程安全问题" aria-hidden="true">#</a> 【中等】哪些场景需要额外注意线程安全问题？</h3><ul><li><strong>访问共享变量或资源</strong> - 典型的场景有访问共享对象的属性，访问 static 静态变量，访问共享的缓存，等等。因为这些信息不仅会被一个线程访问到，还有可能被多个线程同时访问，那么就有可能在并发读写的情况下发生线程安全问题。</li><li><strong>依赖时序的操作</strong> - 如果我们操作的正确性是依赖时序的，而在多线程的情况下又不能保障执行的顺序和我们预想的一致，这个时候就会发生线程安全问题。</li><li><strong>不同数据之间存在绑定关系</strong> - 有时候，不同数据之间是成组出现的，存在着相互对应或绑定的关系，最典型的就是 IP 和端口号。有时候我们更换了 IP，往往需要同时更换端口号，如果没有把这两个操作绑定在一起，就有可能出现单独更换了 IP 或端口号的情况，而此时信息如果已经对外发布，信息获取方就有可能获取一个错误的 IP 与端口绑定情况，这时就发生了线程安全问题。</li><li><strong>对方没有声明自己是线程安全的</strong> - 在我们使用其他类时，如果对方没有声明自己是线程安全的，那么这种情况下对其他类进行多线程的并发操作，就有可能会发生线程安全问题。举个例子，比如说我们定义了 ArrayList，它本身并不是线程安全的，如果此时多个线程同时对 ArrayList 进行并发读/写，那么就有可能会产生线程安全问题，造成数据出错，而这个责任并不在 ArrayList，因为它本身并不是并发安全的。</li></ul><h3 id="【困难】什么是死锁-如何发现死锁-如何避免死锁" tabindex="-1"><a class="header-anchor" href="#【困难】什么是死锁-如何发现死锁-如何避免死锁" aria-hidden="true">#</a> 【困难】什么是死锁？如何发现死锁？如何避免死锁？</h3><div class="hint-container info"><p class="hint-container-title">什么是死锁？</p></div><p><strong>死锁</strong>：<strong>一组互相竞争资源的线程因互相等待，导致“永久”阻塞的现象</strong>。</p><p>产生死锁的四个必要条件：</p><ul><li><strong>互斥</strong>：该资源任意一个时刻只由一个线程占用。</li><li><strong>占有并等待</strong>：一个线程因请求资源而阻塞时，对已获得的资源保持不放。</li><li><strong>不可抢占</strong>：线程已获得的资源在未使用完之前不能被其他线程强行剥夺，只有自己使用完毕后才释放资源。</li><li><strong>循环等待</strong>：若干线程之间形成一种头尾相接的循环等待资源关系。</li></ul><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202409050712813.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="hint-container info"><p class="hint-container-title">如何发现死锁？</p></div><p>（1）使用 <code>jstack</code> 工具</p><ul><li><p>运行程序后，执行命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>jstack <span class="token operator">&lt;</span>PID<span class="token operator">&gt;</span>  <span class="token comment"># PID 是 Java 进程 ID</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>如果存在死锁，输出会显示 <code>Found one Java-level deadlock</code>，并列出死锁的线程和资源。</p></li></ul><p>（2）使用 <code>ThreadMXBean</code> 检测（代码方式）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>management<span class="token punctuation">.</span></span><span class="token class-name">ManagementFactory</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>management<span class="token punctuation">.</span></span><span class="token class-name">ThreadMXBean</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeadlockDetector</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ThreadMXBean</span> threadMXBean <span class="token operator">=</span> <span class="token class-name">ManagementFactory</span><span class="token punctuation">.</span><span class="token function">getThreadMXBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> deadlockedThreads <span class="token operator">=</span> threadMXBean<span class="token punctuation">.</span><span class="token function">findDeadlockedThreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 检测死锁线程</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>deadlockedThreads <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;发现死锁！涉及线程：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> threadId <span class="token operator">:</span> deadlockedThreads<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;无死锁。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出示例：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>发现死锁！涉及线程：
12345
67890
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（3）使用 VisualVM 或 JConsole（可视化工具）</p><p>连接 Java 进程后，查看<strong>线程</strong>选项卡，死锁会被明确标记。</p><div class="hint-container info"><p class="hint-container-title">如何避免死锁？</p></div><p><strong>如何预防死锁？</strong> 破坏死锁的产生的必要条件即可：</p><ul><li><strong>互斥</strong>：难以避免</li><li><strong>占有并等待</strong>：一次性申请所有资源</li><li><strong>不可抢占</strong>：超时释放锁</li><li><strong>循环等待</strong>：按序申请资源</li></ul><p><strong>如何避免死锁？</strong></p><p>避免死锁就是在资源分配时，借助于算法（比如银行家算法）对资源分配进行计算评估，使其进入安全状态。</p><p><strong>安全状态</strong> 指的是系统能够按照某种线程推进顺序（P1、P2、P3……Pn）来为每个线程分配所需资源，直到满足每个线程对资源的最大需求，使每个线程都可顺利完成。称 <code>&lt;P1、P2、P3.....Pn&gt;</code> 序列为安全序列。</p><h3 id="【中等】什么是活锁-如何避免活锁" tabindex="-1"><a class="header-anchor" href="#【中等】什么是活锁-如何避免活锁" aria-hidden="true">#</a> 【中等】什么是活锁？如何避免活锁？</h3><div class="hint-container info"><p class="hint-container-title">什么是活锁？</p></div><p>活锁是一个递归的情况，两个或更多的线程会不断重复一个特定的代码逻辑。预期的逻辑通常为其他线程提供机会继续支持&#39;this&#39;线程。</p><p>想象这样一个例子：两个人在狭窄的走廊里相遇，二者都很礼貌，试图移到旁边让对方先通过。但是他们最终在没有取得任何进展的情况下左右摇摆，因为他们都在同一时间向相同的方向移动。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202409050740102.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如图所示：两个线程想要通过一个 Worker 对象访问共享公共资源的情况，但是当他们看到另一个 Worker（在另一个线程上调用）也是“活动的”时，它们会尝试将该资源交给其他工作者并等待为它完成。如果最初我们让两名工作人员都活跃起来，他们将会面临活锁问题。</p><div class="hint-container info"><p class="hint-container-title">如何避免活锁？</p></div><p>解决“<strong>活锁</strong>”的方案很简单，谦让时，尝试等待一个随机的时间就可以了。由于等待的时间是随机的，所以同时相撞后再次相撞的概率就很低了。“等待一个随机时间”的方案虽然很简单，却非常有效，Raft 这样知名的分布式一致性算法中也用到了它。</p><h3 id="【中等】什么是饥饿问题-如何避免饥饿" tabindex="-1"><a class="header-anchor" href="#【中等】什么是饥饿问题-如何避免饥饿" aria-hidden="true">#</a> 【中等】什么是饥饿问题？如何避免饥饿？</h3><div class="hint-container info"><p class="hint-container-title">什么是饥饿问题？</p></div><p><strong>定义</strong>：某些线程由于<strong>长期无法获取所需资源</strong>（如 CPU 时间、锁、I/O 等），导致<strong>任务无法执行或执行缓慢</strong>。</p><p><strong>与死锁/活锁的区别</strong>：</p><ul><li><strong>死锁</strong>：所有相关线程都被阻塞，无法继续。</li><li><strong>活锁</strong>：线程在运行，但无法取得进展。</li><li><strong>饥饿</strong>：部分线程能正常运行，但某些线程长期得不到资源。</li></ul><p><strong>饥饿的常见原因</strong></p><table><thead><tr><th><strong>原因</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td><strong>线程优先级不合理</strong></td><td>高优先级线程总是抢占 CPU，低优先级线程长期得不到执行。</td></tr><tr><td><strong>锁竞争不公平</strong></td><td>某些线程总是抢不到锁（如<code>synchronized</code>是非公平锁）。</td></tr><tr><td><strong>资源分配不均</strong></td><td>线程池任务调度不合理，某些任务被长时间搁置。</td></tr><tr><td><strong>I/O 或网络阻塞</strong></td><td>某些线程因 I/O 操作被阻塞，而其他线程持续占用 CPU。</td></tr></tbody></table><div class="hint-container info"><p class="hint-container-title">如何避免饥饿？</p></div><p><strong>（1）使用公平锁（Fair Lock）</strong></p><ul><li><p><strong><code>ReentrantLock</code> 支持公平策略</strong>，避免某些线程长期抢不到锁。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ReentrantLock</span> fairLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true 表示公平锁</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong><code>synchronized</code> 是非公平的</strong>，无法直接设置公平性。</p></li></ul><p><strong>（2）合理设置线程优先级</strong></p><ul><li>避免滥用高优先级，尽量让所有线程有机会执行。</li><li>Java 线程优先级（1~10，默认 5）：<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>thread<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token constant">NORM_PRIORITY</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p><strong>（3）避免长时间占用资源</strong></p><ul><li>减少锁的持有时间，尽量只在必要时加锁。</li><li>使用 <code>tryLock()</code> 设置超时，防止无限等待：<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span> <span class="token comment">/* 临界区 */</span> <span class="token punctuation">}</span>
    <span class="token keyword">finally</span> <span class="token punctuation">{</span> lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p><strong>（4）优化线程池任务调度</strong></p><ul><li>使用 <code>newFixedThreadPool</code> 或 <code>newCachedThreadPool</code> 时，结合 <code>BlockingQueue</code> 避免任务堆积。</li><li>可改用 <code>ForkJoinPool</code> 进行任务拆分，提高公平性。</li></ul><p><strong>（5）监控与调整</strong></p><ul><li>使用 <strong>VisualVM、JConsole</strong> 等工具观察线程状态，发现长期阻塞的线程。</li><li>结合日志分析，优化资源分配策略。</li></ul><h3 id="【简单】简单介绍一下-java-并发编程" tabindex="-1"><a class="header-anchor" href="#【简单】简单介绍一下-java-并发编程" aria-hidden="true">#</a> 【简单】简单介绍一下 Java 并发编程？</h3><p>并发编程可以抽象成三个核心问题：分工、同步、互斥。</p><ul><li><strong>分工</strong> - 是指如何高效地拆解任务并分配给线程。</li><li><strong>同步</strong> - 是指线程之间如何协作。</li><li><strong>互斥</strong> - 是指保证同一时刻只允许一个线程访问共享资源。</li></ul><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202409042338029.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Java 的 <code>java.util.concurrent</code> 包（简称 J.U.C）中提供了大量并发工具类，是 Java 并发能力的主要体现（注意，不是全部，有部分并发能力的支持在其他包中）。从功能上，大致可以分为：</p><ul><li><strong>原子类</strong> - 如：<code>AtomicInteger</code>、<code>AtomicIntegerArray</code>、<code>AtomicReference</code>、<code>AtomicStampedReference</code> 等。</li><li><strong>锁</strong> - 如：<code>ReentrantLock</code>、<code>ReentrantReadWriteLock</code> 等。</li><li><strong>并发容器</strong> - 如：<code>ConcurrentHashMap</code>、<code>CopyOnWriteArrayList</code>、<code>CopyOnWriteArraySet</code> 等。</li><li><strong>阻塞队列</strong> - 如：<code>ArrayBlockingQueue</code>、<code>LinkedBlockingQueue</code> 等。</li><li><strong>非阻塞队列</strong> - 如： <code>ConcurrentLinkedQueue</code> 、<code>LinkedTransferQueue</code> 等。</li><li><strong>线程池</strong> - 如：<code>ThreadPoolExecutor</code>、<code>Executors</code> 等。</li></ul><p>J.U.C 包中的工具类是基于 <code>synchronized</code>、<code>volatile</code>、<code>CAS</code>、<code>ThreadLocal</code> 这样的并发核心机制打造的。所以，要想深入理解 J.U.C 工具类的特性、为什么具有这样那样的特性，就必须先理解这些核心机制。</p><h2 id="java-线程基础" tabindex="-1"><a class="header-anchor" href="#java-线程基础" aria-hidden="true">#</a> Java 线程基础</h2><h3 id="【中等】java-线程生命周期有哪些状态-状态之间如何切换" tabindex="-1"><a class="header-anchor" href="#【中等】java-线程生命周期有哪些状态-状态之间如何切换" aria-hidden="true">#</a> 【中等】Java 线程生命周期有哪些状态？状态之间如何切换？</h3><p><code>java.lang.Thread.State</code> 中定义了 <strong>6</strong> 种不同的线程状态，在给定的一个时刻，线程只能处于其中的一个状态。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202408290809602.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>以下是各状态的说明，以及状态间的联系：</p><ul><li><strong>开始（NEW）</strong> - 尚未调用 <code>start</code> 方法的线程处于此状态。此状态意味着：<strong>创建的线程尚未启动</strong>。</li><li><strong>可运行（RUNNABLE）</strong> - 已经调用了 <code>start</code> 方法的线程处于此状态。此状态意味着，<strong>线程已经准备好了</strong>，一旦被线程调度器分配了 CPU 时间片，就可以运行线程。 <ul><li>在操作系统层面，线程有 READY 和 RUNNING 状态；而在 JVM 层面，只能看到 RUNNABLE 状态，所以 Java 系统一般将这两个状态统称为 RUNNABLE（运行中） 状态 。</li></ul></li><li><strong>阻塞（BLOCKED）</strong> - 此状态意味着：<strong>线程处于被阻塞状态</strong>。表示线程在等待 <code>synchronized</code> 的隐式锁（Monitor lock）。<code>synchronized</code> 修饰的方法、代码块同一时刻只允许一个线程执行，其他线程只能等待，即处于阻塞状态。当占用 <code>synchronized</code> 隐式锁的线程释放锁，并且等待的线程获得 <code>synchronized</code> 隐式锁时，就又会从 <code>BLOCKED</code> 转换到 <code>RUNNABLE</code> 状态。</li><li><strong>等待（WAITING）</strong> - 此状态意味着：<strong>线程无限期等待，直到被其他线程显式地唤醒</strong>。 阻塞和等待的区别在于，阻塞是被动的，它是在等待获取 <code>synchronized</code> 的隐式锁。而等待是主动的，通过调用 <code>Object.wait</code> 等方法进入。 <ul><li>进入：<code>Object.wait()</code>；退出：<code>Object.notify</code> / <code>Object.notifyAll</code></li><li>进入：<code>Thread.join()</code>；退出：被调用的线程执行完毕</li><li>进入：<code>LockSupport.park()</code>；退出：<code>LockSupport.unpark</code></li></ul></li><li><strong>定时等待（TIMED_WAITING）</strong> - 等待指定时间的状态。一个线程处于定时等待状态，是由于执行了以下方法中的任意方法： <ul><li>进入：<code>Thread.sleep(long)</code>；退出：时间结束</li><li>进入：<code>Object.wait(long)</code>；退出：时间结束 / <code>Object.notify</code> / <code>Object.notifyAll</code></li><li>进入：<code>Thread.join(long)</code>；退出：时间结束 / 被调用的线程执行完毕</li><li>进入：<code>LockSupport.parkNanos(long)</code>；退出：<code>LockSupport.unpark</code></li><li>进入：<code>LockSupport.parkUntil(long)</code>；退出：<code>LockSupport.unpark</code></li></ul></li><li><strong>终止 (TERMINATED)</strong> - 线程 <code>run()</code> 方法执行结束，或者因异常退出了 <code>run()</code> 方法，则该线程结束生命周期。死亡的线程不可再次复生。</li></ul>`,125),k=n("p",null,"👉 扩展阅读：",-1),h={href:"https://www.w3resource.com/java-tutorial/java-threadclass-methods-and-threadstates.php",target:"_blank",rel:"noopener noreferrer"},g={href:"https://blog.csdn.net/pange1991/article/details/53860651",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.zhihu.com/question/56494969/answer/154053599",target:"_blank",rel:"noopener noreferrer"},m=o('<h3 id="【中级】java-中-创建线程有几种方式" tabindex="-1"><a class="header-anchor" href="#【中级】java-中-创建线程有几种方式" aria-hidden="true">#</a> 【中级】Java 中，创建线程有几种方式？</h3><p>一般来说，创建线程有很多种方式，例如：</p><ul><li>实现 <code>Runnable</code> 接口（推荐）</li><li>继承 <code>Thread</code> 类（不推荐，因为不灵活，Java 不支持多继承）</li><li>实现 <code>Callable</code> 接口 + <code>FutureTask</code>，支持返回值</li><li>通过线程池（生产环境推荐）</li><li>使用 <code>CompletableFuture</code></li><li>...</li></ul><p>虽然，看似有多种多样的创建线程方式。但是，<strong>从本质上来说，Java 就只有一种方式可以创建线程，那就是通过 <code>new Thread().start() </code> 创建。不管是哪种方式，最终还是依赖于 <code>new Thread().start()</code></strong>。</p>',4),b={href:"https://mp.weixin.qq.com/s/NspUsyhEmKnJ-4OprRFp9g",target:"_blank",rel:"noopener noreferrer"},y=o('<h3 id="【简单】可以直接调用-thread-run-方法么" tabindex="-1"><a class="header-anchor" href="#【简单】可以直接调用-thread-run-方法么" aria-hidden="true">#</a> 【简单】可以直接调用 <code>Thread.run()</code> 方法么？</h3><p>可以直接调用 <code>Thread.run()</code> 方法，但是它的行为和普通方法一样，不会启动新线程去执行。<strong>调用 <code>start()</code> 方法方可启动线程并使线程进入就绪状态，直接执行 <code>run()</code> 方法的话不会以多线程的方式执行。</strong></p><ul><li><strong><code>run()</code> 方法是线程的执行体</strong>。</li><li><strong><code>start()</code> 方法负责启动线程，然后 JVM 会让这个线程去执行 <code>run()</code> 方法</strong>。</li></ul><h3 id="【简单】一个线程两次调用-thread-start-方法会怎样" tabindex="-1"><a class="header-anchor" href="#【简单】一个线程两次调用-thread-start-方法会怎样" aria-hidden="true">#</a> 【简单】一个线程两次调用 <code>Thread.start()</code> 方法会怎样？</h3><p>Java 的线程是不允许启动两次的，<strong>第二次调用 <code>Thread.start()</code> 会抛出 <code>IllegalThreadStateException</code></strong>。</p><h3 id="【简单】thread-sleep-、thread-yield-、thread-join-、object-wait-有什么区别" tabindex="-1"><a class="header-anchor" href="#【简单】thread-sleep-、thread-yield-、thread-join-、object-wait-有什么区别" aria-hidden="true">#</a> 【简单】<code>Thread.sleep()</code>、<code>Thread.yield()</code>、<code>Thread.join()</code>、<code>Object.wait()</code> 有什么区别？</h3><table><thead><tr><th>方法</th><th>所属类</th><th>作用</th><th>是否释放锁</th><th>使用场景</th></tr></thead><tbody><tr><td><strong><code>Thread.sleep(long ms)</code></strong></td><td><code>Thread</code></td><td><strong>让当前线程暂停执行指定时间</strong>（不释放 CPU 资源）</td><td>❌ 不释放锁</td><td>模拟耗时操作、定时任务</td></tr><tr><td><strong><code>Thread.yield()</code></strong></td><td><code>Thread</code></td><td><strong>提示调度器让出 CPU，但可能立即重新竞争</strong>（不保证让出）</td><td>❌ 不释放锁</td><td>优化线程调度，减少竞争（极少使用）</td></tr><tr><td><strong><code>Thread.join()</code></strong></td><td><code>Thread</code></td><td><strong>等待目标线程执行完毕</strong>（阻塞当前线程）</td><td>❌ 不释放锁</td><td>线程顺序执行，如主线程等待子线程结束</td></tr><tr><td><strong><code>Object.wait()</code></strong></td><td><code>Object</code></td><td><strong>释放锁并进入等待，直到 <code>notify()</code>/<code>notifyAll()</code> 唤醒</strong></td><td>✅ 释放锁</td><td>线程间通信（需在 <code>synchronized</code> 块中使用）</td></tr></tbody></table><p><strong>锁的释放</strong></p><ul><li><code>wait()</code> 会释放锁，其他方法不会。</li><li><code>sleep()</code> 和 <code>yield()</code> 仅影响线程调度，不涉及锁。</li></ul><p><strong>唤醒机制</strong></p><ul><li><code>wait()</code> 需依赖 <code>notify()</code>/<code>notifyAll()</code> 或超时唤醒。</li><li><code>sleep()</code> 和 <code>join()</code> 超时后自动恢复。</li><li><code>yield()</code> 立刻重新参与竞争。</li></ul><p><strong>用途</strong></p><ul><li><code>sleep()</code>：固定时间暂停（如定时任务）。</li><li><code>yield()</code>：礼貌让出 CPU（实际开发很少用）。</li><li><code>join()</code>：线程依赖（如主线程等待子线程）。</li><li><code>wait()</code>：线程间协作（生产者-消费者模型）。</li></ul>',13),f={href:"http://www.cnblogs.com/dolphin0520/p/3920385.html",target:"_blank",rel:"noopener noreferrer"},w=o('<h3 id="【中等】为什么-thread-sleep-、thread-yield-设计为静态方法" tabindex="-1"><a class="header-anchor" href="#【中等】为什么-thread-sleep-、thread-yield-设计为静态方法" aria-hidden="true">#</a> 【中等】为什么 <code>Thread.sleep()</code>、<code>Thread.yield()</code> 设计为静态方法？</h3><p><code>Thread.sleep()</code>、<code>Thread.yield()</code> 针对的是 <strong>Running</strong> 状态的线程，也就是说在非 <strong>Running</strong> 状态的线程上执行这两个方法没有意义。这就是为什么这两个方法被设计为静态的。它们只针对正在 <strong>Running</strong> 状态的线程工作，避免程序员错误的认为可以在其他非 <strong>Running</strong> 状态线程上调用。</p>',2),z={href:"http://www.importnew.com/14958.html",target:"_blank",rel:"noopener noreferrer"},j=n("br",null,null,-1),x={href:"https://blog.csdn.net/xiangwanpeng/article/details/54972952",target:"_blank",rel:"noopener noreferrer"},_=o(`<h3 id="【中等】为什么-object-wait-、object-notify-和-object-notifyall-被定义在-object-类里" tabindex="-1"><a class="header-anchor" href="#【中等】为什么-object-wait-、object-notify-和-object-notifyall-被定义在-object-类里" aria-hidden="true">#</a> 【中等】为什么 <code>Object.wait()</code>、<code>Object.notify()</code> 和 <code>Object.notifyAll()</code> 被定义在 <code>Object</code> 类里？</h3><p><strong>因为锁是对象的，<code>wait()</code>/<code>notify()</code> 是锁的行为，所以必须定义在 <code>Object</code> 中</strong>。</p><ul><li><p><strong>锁基于对象</strong>：Java 的锁（<code>synchronized</code>）是 <strong>对象级别</strong> 的，每个对象关联一个监视器（Monitor），<code>wait()</code>/<code>notify()</code> 是监视器的核心操作，必须属于 <code>Object</code>。</p></li><li><p><strong>任何对象都可作为锁</strong>：不仅 <code>Thread</code> 能作为锁，<strong>所有对象</strong> 都能作为锁，因此这些方法需定义在 <code>Object</code> 以保证通用性。</p></li><li><p><strong>等待队列绑定对象</strong>：调用 <code>wait()</code> 的线程会进入 <strong>该对象的等待队列</strong>，<code>notify()</code> 唤醒的也是同一对象队列中的线程，与对象强绑定。</p></li><li><p><strong>与 <code>Thread</code> 类职责分离</strong>：<code>Thread</code> 类管理线程生命周期（如 <code>sleep()</code>、<code>join()</code>），而 <code>wait()</code>/<code>notify()</code> 是 <strong>线程间协作机制</strong>，属于锁（对象）的行为。</p></li><li><p><strong>设计一致性与历史原因</strong>：遵循 <strong>Monitor 模式</strong>（操作系统同步原语），保持 <code>Thread</code> 简洁，避免功能混淆（如 <code>wait()</code> 和 <code>sleep()</code> 的误用）。</p></li></ul><h3 id="【中等】为什么-object-wait-、object-notify-和-object-notifyall-必须在-synchronized-方法-块中被调用" tabindex="-1"><a class="header-anchor" href="#【中等】为什么-object-wait-、object-notify-和-object-notifyall-必须在-synchronized-方法-块中被调用" aria-hidden="true">#</a> 【中等】为什么 <code>Object.wait()</code>、<code>Object.notify()</code> 和 <code>Object.notifyAll()</code> 必须在 <code>synchronized</code> 方法/块中被调用？</h3><p>当一个线程需要调用对象的 <code>wait()</code> 方法的时候，这个线程必须拥有该对象的锁，接着它就会释放这个对象锁并进入等待状态直到其他线程调用这个对象上的 <code>notify()</code> 方法。同样的，当一个线程需要调用对象的 <code>notify()</code> 方法时，它会释放这个对象的锁，以便其他在等待的线程就可以得到这个对象锁。</p><p>由于所有的这些方法都需要线程持有对象的锁，这样就只能通过 <code>synchronized</code> 来实现，所以他们只能在 <code>synchronized</code> 方法/块中被调用。</p><h3 id="【中等】如何正确停止-java-线程" tabindex="-1"><a class="header-anchor" href="#【中等】如何正确停止-java-线程" aria-hidden="true">#</a> 【中等】如何正确停止 Java 线程？</h3><p><strong>对于 Java 而言，最正确的停止线程的方式是：通过 <code>Thread.interrupt</code> 和 <code>Thread.isInterrupted</code> 配合来控制线程终止</strong>。</p><ul><li><code>Thread.interrupt()</code>：设置线程的中断标志位（不会直接停止线程）。</li><li><code>Thread.isInterrupted()</code>：检查中断状态。</li></ul><p>【示例】正确停止线程的方式——<code>Thread.interrupt</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadStopDemo</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;MyTask&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        thread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyTask</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>

        <span class="token keyword">private</span> <span class="token keyword">long</span> count <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; 线程启动&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 通过 Thread.interrupted 和 interrupt 配合来控制线程终止</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> count <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;count = &quot;</span> <span class="token operator">+</span> count<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; 线程终止&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span class="token comment">// 输出（count 未到 10000，线程就主动结束）：</span>
<span class="token comment">// MyTask 线程启动</span>
<span class="token comment">// count = 0</span>
<span class="token comment">// count = 1</span>
<span class="token comment">// ...</span>
<span class="token comment">// count = 840</span>
<span class="token comment">// count = 841</span>
<span class="token comment">// count = 842</span>
<span class="token comment">// MyTask 线程终止</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="【中等】可以使用-thread-stop-thread-suspend-和-thread-resume-停止线程吗-为什么" tabindex="-1"><a class="header-anchor" href="#【中等】可以使用-thread-stop-thread-suspend-和-thread-resume-停止线程吗-为什么" aria-hidden="true">#</a> 【中等】可以使用 <code>Thread.stop</code>，<code>Thread.suspend</code> 和 <code>Thread.resume</code> 停止线程吗？为什么？</h3><p><code>Thread.stop</code>，<code>Thread.suspend</code> 和 <code>Thread.resume</code> 方法已经被 Java 标记为 <code>@Deprecated</code>。为什么废弃呢？</p><ul><li><strong><code>Thread.stop</code> 会直接把线程停止，这样就没有给线程足够的时间来处理想要在停止前保存数据的逻辑，任务戛然而止，会导致出现数据完整性等问题</strong>。</li><li>而对于<code>Thread.suspend</code> 和 <code>Thread.resume</code> 而言，它们的问题在于：<strong>如果线程调用 <code>Thread.suspend</code>，它并不会释放锁，就开始进入休眠，但此时有可能仍持有锁，这样就容易导致死锁问题</strong>。因为这把锁在线程被 <code>Thread.resume</code> 之前，是不会被释放的。假设线程 A 调用了 <code>Thread.suspend</code> 方法让线程 B 挂起，线程 B 进入休眠，而线程 B 又刚好持有一把锁，此时假设线程 A 想访问线程 B 持有的锁，但由于线程 B 并没有释放锁就进入休眠了，所以对于线程 A 而言，此时拿不到锁，也会陷入阻塞，那么线程 A 和线程 B 就都无法继续向下执行。</li></ul><p>【示例】<code>Thread.stop</code> 终止线程，导致线程任务戛然而止</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadStopErrorDemo</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">MyTask</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 终止线程</span>
        thread<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 确保线程终止后，才执行下面的代码</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
        <span class="token comment">// 输出两个计数器的最终状态</span>
        thread<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 持有两个计数器，run 方法中每次执行都会使计数器自增
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyTask</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>

        <span class="token keyword">private</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        <span class="token keyword">private</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token operator">++</span>i<span class="token punctuation">;</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 模拟耗时操作</span>
                    <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token operator">++</span>j<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;i=&quot;</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">&quot; j=&quot;</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="【中等】使用-volatile-标记方式停止线程正确吗" tabindex="-1"><a class="header-anchor" href="#【中等】使用-volatile-标记方式停止线程正确吗" aria-hidden="true">#</a> 【中等】使用 <code>volatile</code> 标记方式停止线程正确吗？</h3><p>使用 <code>volatile</code> 标记方式仅适用于简单场景（无阻塞、无锁竞争）。<strong>推荐 <code>Thread.interrupt</code> 和 <code>Thread.isInterrupted</code> 方式停止线程</strong>：更通用，可处理阻塞操作，是 Java 线程停止的标准方式。</p><p><strong><code>volatile</code> 标记停止线程适用场景（正确使用）</strong></p><ul><li>✅ <strong>非阻塞循环</strong><ul><li>线程在 <code>while (!stopped)</code> 循环中运行，且 <strong>无阻塞操作</strong>（如 <code>sleep()</code>、<code>wait()</code>、I/O）。</li><li><code>volatile</code> 保证标志位 (<code>stopped</code>) 的修改对所有线程 <strong>立即可见</strong>。</li></ul></li><li>✅ <strong>短周期任务</strong>：适用于 <strong>纯计算型任务</strong> 或 <strong>高频检查标志位</strong> 的场景。</li></ul><p><strong><code>volatile</code> 标记停止线程不适用场景（可能失效）</strong></p><ul><li>❌ <strong>线程被阻塞</strong>（如 <code>sleep()</code>、<code>wait()</code>、I/O）：阻塞期间无法检测 <code>volatile</code> 标志位，必须等阻塞结束才能退出。</li><li>❌ <strong>依赖外部资源</strong>（如锁竞争、网络请求）：即使 <code>stopped=true</code>，线程可能因锁或 I/O 阻塞无法立即退出。</li></ul><p>当我们使用 <code>volatile</code> 变量来控制线程的停止，通常是通过设置一个 <code>volatile</code> 标志位来告诉线程停止执行。例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTask</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> canceled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>canceled<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 执行任务</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stopTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        canceled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述例子中，<code>canceled</code> 是一个 <code>volatile</code> 变量，用来控制线程的停止。虽然这种方式在某些情况下可以工作，但它并不是一个可靠的停止线程的方式，因为<strong>在多线程环境中，其他线程修改 <code>canceled</code> 的值时，可能会出现竞态条件，导致线程无法正确停止</strong>。</p><h3 id="【中等】java-线程之间如何进行通信" tabindex="-1"><a class="header-anchor" href="#【中等】java-线程之间如何进行通信" aria-hidden="true">#</a> 【中等】Java 线程之间如何进行通信？</h3><p>在 Java 中，线程间通信（Inter-Thread Communication, ITC）是指多个线程之间协调工作、共享数据或传递消息的机制。常见的线程通信方式包括以下几种：</p><table><thead><tr><th>通信方式</th><th>核心机制</th><th>适用场景</th><th>特点</th></tr></thead><tbody><tr><td><strong>共享变量</strong></td><td><code>volatile</code>/<code>synchronized</code></td><td>简单状态标记</td><td>需处理竞态条件</td></tr><tr><td><strong><code>wait()</code>/<code>notify()</code></strong></td><td>对象监视器</td><td>生产者-消费者</td><td>需手动同步</td></tr><tr><td><strong><code>BlockingQueue</code></strong></td><td>内置锁和条件队列</td><td>生产者-消费者</td><td>无需手动同步</td></tr><tr><td><strong><code>CountDownLatch</code></strong></td><td>计数器</td><td>主线程等待子线程</td><td>一次性</td></tr><tr><td><strong><code>CyclicBarrier</code></strong></td><td>屏障</td><td>多线程同步</td><td>可重复使用</td></tr><tr><td><strong><code>Semaphore</code></strong></td><td>许可证</td><td>限流/资源池</td><td>控制并发数</td></tr><tr><td><strong>管道流</strong></td><td>字节流</td><td>线程间数据传输</td><td>效率较低</td></tr></tbody></table><p><strong>推荐选择</strong>：</p><ul><li>需要高效数据交换 → <strong><code>BlockingQueue</code></strong></li><li>线程协作 → <strong><code>wait()</code>/<code>notify()</code> 或 <code>CountDownLatch</code></strong></li><li>资源控制 → <strong><code>Semaphore</code></strong></li><li>避免重复造轮子，优先使用 JUC（<code>java.util.concurrent</code>）工具类！</li></ul><h3 id="【简单】高优先级的-java-线程一定先执行吗" tabindex="-1"><a class="header-anchor" href="#【简单】高优先级的-java-线程一定先执行吗" aria-hidden="true">#</a> 【简单】高优先级的 Java 线程一定先执行吗？</h3><p>Java 中的线程优先级的范围是 <code>[1,10]</code>，一般来说，高优先级的线程在运行时会具有优先权。可以通过 <code>thread.setPriority(Thread.MAX_PRIORITY)</code> 的方式设置，默认优先级为 <code>5</code>。</p><p>即使设置了线程的优先级，也<strong>无法保证高优先级的线程一定先执行</strong>。这是因为 <strong>Java 线程优先级依赖于操作系统的支持</strong>，然而，不同的操作系统支持的线程优先级并不相同，不能很好的和 Java 中线程优先级一一对应。因此，Java 线程优先级控制并不可靠。</p><h2 id="volatile" tabindex="-1"><a class="header-anchor" href="#volatile" aria-hidden="true">#</a> volatile</h2><p>被 <code>volatile</code> 关键字修饰的变量有两层含义：</p><ul><li><strong>保证变量的可见性</strong></li><li><strong>防止 JVM 的指令重排序</strong></li></ul><h3 id="volatile-保证线程可见性" tabindex="-1"><a class="header-anchor" href="#volatile-保证线程可见性" aria-hidden="true">#</a> volatile 保证线程可见性</h3><p><strong>典型问题</strong></p><ul><li><code>volatile</code> 有什么作用？</li><li>Java 中，如何保证变量的可见性？</li></ul><p><strong>知识点</strong></p><p><strong>在 Java 并发场景中，<code>volatile</code> 可以保证线程可见性</strong>。保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个共享变量，另外一个线程能读到这个修改的值。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20210102230327.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><code>volatile</code> 关键字其实并非是 Java 语言特有的，在 C 语言里也有，它最原始的意义就是禁用 CPU 缓存。如果我们将一个变量使用 <code>volatile</code> 修饰，这就指示 编译器，这个变量是共享且不稳定的，每次使用它都到主存中进行读取。</p><p><code>volatile</code> 关键字能保证数据的可见性，但不能保证数据的原子性。<code>synchronized</code> 关键字两者都能保证。</p><h3 id="volatile-防止-jvm-的指令重排序" tabindex="-1"><a class="header-anchor" href="#volatile-防止-jvm-的指令重排序" aria-hidden="true">#</a> volatile 防止 JVM 的指令重排序</h3><p><strong>典型问题</strong></p><ul><li><code>volatile</code> 有什么作用？</li><li>Java 中，如何防止 JVM 的指令重排序？</li></ul><p><strong>知识点</strong></p><p>观察加入 <code>volatile</code> 关键字和没有加入 <code>volatile</code> 关键字时所生成的汇编代码发现，<strong>加入 <code>volatile</code> 关键字时，会多出一个 <code>lock</code> 前缀指令</strong>。</p><p><strong><code>lock</code> 前缀指令实际上相当于一个内存屏障</strong>（也成内存栅栏），内存屏障会提供 3 个功能：</p><ul><li>它确保指令重排序时不会把其后面的指令排到内存屏障之前的位置，也不会把前面的指令排到内存屏障的后面；即在执行到内存屏障这句指令时，在它前面的操作已经全部完成；</li><li>它会强制将对缓存的修改操作立即写入主存；</li><li>如果是写操作，它会导致其他 CPU 中对应的缓存行无效。</li></ul><p>在 Java 中，<code>Unsafe</code> 类提供了三个开箱即用的内存屏障相关的方法，屏蔽了操作系统底层的差异：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">loadFence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">storeFence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">fullFence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>理论上来说，你通过这个三个方法也可以实现和 <code>volatile</code> 禁止重排序一样的效果，只是会麻烦一些。</p><p>下面我以一个常见的面试题为例讲解一下 <code>volatile</code> 关键字禁止指令重排序的效果。</p><p>面试中面试官经常会说：“单例模式了解吗？来给我手写一下！给我解释一下双重检验锁方式实现单例模式的原理呗！”</p><p><strong>双重校验锁实现对象单例（线程安全）</strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> uniqueInstance<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span>  <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getUniqueInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token comment">// 先判断对象是否已经实例过，没有实例化过才进入加锁代码</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>uniqueInstance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 类对象加锁</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>uniqueInstance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    uniqueInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> uniqueInstance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>uniqueInstance</code> 采用 <code>volatile</code> 关键字修饰也是很有必要的， <code>uniqueInstance = new Singleton();</code> 这段代码其实是分为三步执行：</p><ol><li>为 <code>uniqueInstance</code> 分配内存空间</li><li>初始化 <code>uniqueInstance</code></li><li>将 <code>uniqueInstance</code> 指向分配的内存地址</li></ol><p>但是由于 JVM 具有指令重排的特性，执行顺序有可能变成 1-&gt;3-&gt;2。指令重排在单线程环境下不会出现问题，但是在多线程环境下会导致一个线程获得还没有初始化的实例。例如，线程 T1 执行了 1 和 3，此时 T2 调用 <code>getUniqueInstance</code>() 后发现 <code>uniqueInstance</code> 不为空，因此返回 <code>uniqueInstance</code>，但此时 <code>uniqueInstance</code> 还未被初始化。</p><h3 id="volatile-不保证原子性" tabindex="-1"><a class="header-anchor" href="#volatile-不保证原子性" aria-hidden="true">#</a> volatile 不保证原子性</h3><p><strong>问题点</strong></p><ul><li>volatile 能保证原子性吗？</li><li>volatile 能完全保证并发安全吗？</li></ul><p><strong>知识点</strong></p><p>线程安全需要具备：可见性、原子性、顺序性。<strong><code>volatile</code> 不保证原子性，所以决定了它不能彻底地保证线程安全</strong>。</p><p>我们通过下面的代码即可证明：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VolatileAtomicityDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token keyword">int</span> inc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        inc<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">ExecutorService</span> threadPool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">VolatileAtomicityDemo</span> volatileAtomicityDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VolatileAtomicityDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">500</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    volatileAtomicityDemo<span class="token punctuation">.</span><span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 等待 1.5 秒，保证上面程序执行完成</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>inc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        threadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正常情况下，运行上面的代码理应输出 <code>2500</code>。但你真正运行了上面的代码之后，你会发现每次输出结果都小于 <code>2500</code>。</p><p>为什么会出现这种情况呢？不是说好了，<code>volatile</code> 可以保证变量的可见性嘛！</p><p>也就是说，如果 <code>volatile</code> 能保证 <code>inc++</code> 操作的原子性的话。每个线程中对 <code>inc</code> 变量自增完之后，其他线程可以立即看到修改后的值。5 个线程分别进行了 500 次操作，那么最终 inc 的值应该是 5*500=2500。</p><p>很多人会误认为自增操作 <code>inc++</code> 是原子性的，实际上，<code>inc++</code> 其实是一个复合操作，包括三步：</p><ol><li>读取 inc 的值。</li><li>对 inc 加 1。</li><li>将 inc 的值写回内存。</li></ol><p><code>volatile</code> 是无法保证这三个操作是具有原子性的，有可能导致下面这种情况出现：</p><ol><li>线程 1 对 <code>inc</code> 进行读取操作之后，还未对其进行修改。线程 2 又读取了 <code>inc</code> 的值并对其进行修改（+1），再将 <code>inc</code> 的值写回内存。</li><li>线程 2 操作完毕后，线程 1 对 <code>inc</code> 的值进行修改（+1），再将 <code>inc</code> 的值写回内存。</li></ol><p>这也就导致两个线程分别对 <code>inc</code> 进行了一次自增操作后，<code>inc</code> 实际上只增加了 1。</p><p>其实，如果想要保证上面的代码运行正确也非常简单，利用 <code>synchronized</code>、<code>Lock</code> 或者 <code>AtomicInteger</code> 都可以。</p><p>使用 <code>synchronized</code> 改进：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    inc<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>AtomicInteger</code> 改进：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">AtomicInteger</span> inc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    inc<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>ReentrantLock</code> 改进：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        inc<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="volatile-和-synchronized" tabindex="-1"><a class="header-anchor" href="#volatile-和-synchronized" aria-hidden="true">#</a> volatile 和 synchronized</h3><p><strong>典型问题</strong></p><p><code>volatile</code> 和 <code>synchronized</code> 有什么区别？<code>volatile</code> 能替代 <code>synchronized</code> ？</p><p><strong>知识点</strong></p><p><strong><code>volatile</code> 无法替代 <code>synchronized</code> ，因为 <code>volatile</code> 无法保证操作的原子性</strong>。</p><ul><li><code>volatile</code> 本质是在告诉 jvm 当前变量在寄存器（工作内存）中的值是不确定的，需要从主存中读取；<code>synchronized</code> 则是锁定当前变量，只有当前线程可以访问该变量，其他线程被阻塞住。</li><li><code>volatile</code> 仅能修饰变量；<code>synchronized</code> 可以修饰方法和代码块。</li><li><code>volatile</code> 仅能实现变量的修改可见性，不能保证原子性；而 <code>synchronized</code> 则可以保证变量的修改可见性和原子性</li><li><code>volatile</code> 不会造成线程的阻塞；<code>synchronized</code> 可能会造成线程的阻塞。</li><li><code>volatile</code> 标记的变量不会被编译器优化；<code>synchronized</code> 标记的变量可以被编译器优化。</li></ul><h2 id="synchronized" tabindex="-1"><a class="header-anchor" href="#synchronized" aria-hidden="true">#</a> synchronized</h2><p><code>synchronized</code> 有 3 种应用方式：</p><ul><li><strong>同步实例方法</strong> - 对于普通同步方法，锁是当前实例对象</li><li><strong>同步静态方法</strong> - 对于静态同步方法，锁是当前类的 <code>Class</code> 对象</li><li><strong>同步代码块</strong> - 对于同步方法块，锁是 <code>synchonized</code> 括号里配置的对象</li></ul><p><strong>原理</strong></p><p><code>synchronized</code> 经过编译后，会在同步块的前后分别形成 <code>monitorenter</code> 和 <code>monitorexit</code> 这两个字节码指令，这两个字节码指令都需要一个引用类型的参数来指明要锁定和解锁的对象。如果 <code>synchronized</code> 明确制定了对象参数，那就是这个对象的引用；如果没有明确指定，那就根据 <code>synchronized</code> 修饰的是实例方法还是静态方法，去对对应的对象实例或 <code>Class</code> 对象来作为锁对象。</p><p><code>synchronized</code> 同步块对同一线程来说是可重入的，不会出现锁死问题。</p><p><code>synchronized</code> 同步块是互斥的，即已进入的线程执行完成前，会阻塞其他试图进入的线程。</p><p><strong>优化</strong></p><p>Java 1.6 以后，<code>synchronized</code> 做了大量的优化，其性能已经与 <code>Lock</code> 、<code>ReadWriteLock</code> 基本上持平。</p><p><code>synchronized</code> 的优化是将锁粒度分为不同级别，<code>synchronized</code> 会根据运行状态动态的由低到高调整锁级别（<strong>偏向锁</strong> -&gt; <strong>轻量级锁</strong> -&gt; <strong>重量级锁</strong>），以减少阻塞。</p><p><strong>同步方法 or 同步块？</strong></p><ul><li>同步块是更好的选择。</li><li>因为它不会锁住整个对象（当然你也可以让它锁住整个对象）。同步方法会锁住整个对象，哪怕这个类中有多个不相关联的同步块，这通常会导致他们停止执行并需要等待获得这个对象上的锁。</li></ul><h3 id="synchronized-作用" tabindex="-1"><a class="header-anchor" href="#synchronized-作用" aria-hidden="true">#</a> synchronized 作用</h3><p><strong>典型问题</strong></p><p><code>synchronized</code> 有什么作用？</p><p><strong>知识点</strong></p><p><strong><code>synchronized</code> 可以保证在同一个时刻，只有一个线程可以执行某个方法或者某个代码块</strong>。</p><p><code>synchronized</code> 同步块对同一线程来说是可重入的，不会出现锁死问题。</p><p><code>synchronized</code> 同步块是互斥的，即已进入的线程执行完成前，会阻塞其他试图进入的线程。</p><p>在 Java 早期版本中，<code>synchronized</code> 属于 <strong>重量级锁</strong>，效率低下。这是因为监视器锁（monitor）是依赖于底层的操作系统的 <code>Mutex Lock</code> 来实现的，Java 的线程是映射到操作系统的原生线程之上的。如果要挂起或者唤醒一个线程，都需要操作系统帮忙完成，而操作系统实现线程之间的切换时需要从用户态转换到内核态，这个状态之间的转换需要相对比较长的时间，时间成本相对较高。</p><p>不过，在 Java 6 之后， <code>synchronized</code> 引入了大量的优化如自旋锁、适应性自旋锁、锁消除、锁粗化、偏向锁、轻量级锁等技术来减少锁操作的开销，这些优化让 <code>synchronized</code> 锁的效率提升了很多。因此， <code>synchronized</code> 还是可以在实际项目中使用的，像 JDK 源码、很多开源框架都大量使用了 <code>synchronized</code> 。</p><p>关于偏向锁多补充一点：由于偏向锁增加了 JVM 的复杂性，同时也并没有为所有应用都带来性能提升。因此，在 JDK15 中，偏向锁被默认关闭（仍然可以使用 <code>-XX:+UseBiasedLocking</code> 启用偏向锁），在 JDK18 中，偏向锁已经被彻底废弃（无法通过命令行打开）。</p><h3 id="synchronized-用法" tabindex="-1"><a class="header-anchor" href="#synchronized-用法" aria-hidden="true">#</a> synchronized 用法</h3><p><strong>典型问题</strong></p><ul><li>synchronized 可以用在哪些场景？</li><li>synchronized 如何使用？</li></ul><p><strong>知识点</strong></p><p><code>synchronized</code> 关键字的使用方式主要有下面 3 种：</p><ol><li>修饰实例方法</li><li>修饰静态方法</li><li>修饰代码块</li></ol><p><strong>1、修饰实例方法</strong> （锁当前对象实例）</p><p>给当前对象实例加锁，进入同步代码前要获得 <strong>当前对象实例的锁</strong> 。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>synchronized void method() {
    // 业务代码
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2、修饰静态方法</strong> （锁当前类）</p><p>给当前类加锁，会作用于类的所有对象实例 ，进入同步代码前要获得 <strong>当前 class 的锁</strong>。</p><p>这是因为静态成员不属于任何一个实例对象，归整个类所有，不依赖于类的特定实例，被类的所有实例共享。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>synchronized static void method() {
    // 业务代码
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>静态 <code>synchronized</code> 方法和非静态 <code>synchronized</code> 方法之间的调用互斥么？不互斥！如果一个线程 A 调用一个实例对象的非静态 <code>synchronized</code> 方法，而线程 B 需要调用这个实例对象所属类的静态 <code>synchronized</code> 方法，是允许的，不会发生互斥现象，因为访问静态 <code>synchronized</code> 方法占用的锁是当前类的锁，而访问非静态 <code>synchronized</code> 方法占用的锁是当前实例对象锁。</p><p><strong>3、修饰代码块</strong> （锁指定对象 / 类）</p><p>对括号里指定的对象 / 类加锁：</p><ul><li><code>synchronized(object)</code> 表示进入同步代码库前要获得 <strong>给定对象的锁</strong>。</li><li><code>synchronized（类。class)</code> 表示进入同步代码前要获得 <strong>给定 Class 的锁</strong></li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>synchronized(this) {
    // 业务代码
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>总结：</strong></p><ul><li><code>synchronized</code> 关键字加到 <code>static</code> 静态方法和 <code>synchronized(class)</code> 代码块上都是是给 Class 类上锁；</li><li><code>synchronized</code> 关键字加到实例方法上是给对象实例上锁；</li><li>尽量不要使用 <code>synchronized(String a)</code> 因为 JVM 中，字符串常量池具有缓存功能。</li></ul><h3 id="构造方法可以用-synchronized-修饰么" tabindex="-1"><a class="header-anchor" href="#构造方法可以用-synchronized-修饰么" aria-hidden="true">#</a> 构造方法可以用 synchronized 修饰么？</h3><p>构造方法不能使用 synchronized 关键字修饰。不过，可以在构造方法内部使用 synchronized 代码块。</p><p>另外，构造方法本身是线程安全的，但如果在构造方法中涉及到共享资源的操作，就需要采取适当的同步措施来保证整个构造过程的线程安全。</p><h3 id="synchronized-底层原理了解吗" tabindex="-1"><a class="header-anchor" href="#synchronized-底层原理了解吗" aria-hidden="true">#</a> synchronized 底层原理了解吗？</h3><p><code>synchronized</code> 经过编译后，会在同步块的前后分别形成 <code>monitorenter</code> 和 <code>monitorexit</code> 这两个字节码指令，这两个字节码指令都需要一个引用类型的参数来指明要锁定和解锁的对象。如果 <code>synchronized</code> 明确制定了对象参数，那就是这个对象的引用；如果没有明确指定，那就根据 <code>synchronized</code> 修饰的是实例方法还是静态方法，去对对应的对象实例或 <code>Class</code> 对象来作为锁对象。</p><p>synchronized 关键字底层原理属于 JVM 层面的东西。</p><h4 id="synchronized-同步语句块的情况" tabindex="-1"><a class="header-anchor" href="#synchronized-同步语句块的情况" aria-hidden="true">#</a> synchronized 同步语句块的情况</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>public class SynchronizedDemo {
    public void method() {
        synchronized (this) {
            System.out.println(&quot;synchronized 代码块&quot;);
        }
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 JDK 自带的 <code>javap</code> 命令查看 <code>SynchronizedDemo</code> 类的相关字节码信息：首先切换到类的对应目录执行 <code>javac SynchronizedDemo.java</code> 命令生成编译后的 .class 文件，然后执行 <code>javap -c -s -v -l SynchronizedDemo.class</code>。</p>`,140),T={href:"https://camo.githubusercontent.com/669b67b48f1e58c37ac12eb80239cc5df7df55d7d75f9187e1622ee401a0c230/68747470733a2f2f6f73732e6a61766167756964652e636e2f6769746875622f6a61766167756964652f6a6176612f636f6e63757272656e742f73796e6368726f6e697a65642d7072696e6369706c652e706e67",target:"_blank",rel:"noopener noreferrer"},J=n("img",{src:"https://camo.githubusercontent.com/669b67b48f1e58c37ac12eb80239cc5df7df55d7d75f9187e1622ee401a0c230/68747470733a2f2f6f73732e6a61766167756964652e636e2f6769746875622f6a61766167756964652f6a6176612f636f6e63757272656e742f73796e6368726f6e697a65642d7072696e6369706c652e706e67",alt:"synchronized 关键字原理",tabindex:"0",loading:"lazy"},null,-1),C=n("figcaption",null,"synchronized 关键字原理",-1),S=o("<p>从上面我们可以看出：<strong><code>synchronized</code> 同步语句块的实现使用的是 <code>monitorenter</code> 和 <code>monitorexit</code> 指令，其中 <code>monitorenter</code> 指令指向同步代码块的开始位置，<code>monitorexit</code> 指令则指明同步代码块的结束位置。</strong></p><p>上面的字节码中包含一个 <code>monitorenter</code> 指令以及两个 <code>monitorexit</code> 指令，这是为了保证锁在同步代码块代码正常执行以及出现异常的这两种情况下都能被正确释放。</p><p>当执行 <code>monitorenter</code> 指令时，线程试图获取锁也就是获取 <strong>对象监视器 <code>monitor</code></strong> 的持有权。</p>",3),A={href:"https://github.com/openjdk-mirror/jdk7u-hotspot/blob/50bdefc3afe944ca74c3093e7448d6b889cd20d1/src/share/vm/runtime/objectMonitor.cpp",target:"_blank",rel:"noopener noreferrer"},M=n("code",null,"ObjectMonitor",-1),I=n("p",null,[s("另外，"),n("code",null,"wait/notify"),s(" 等方法也依赖于 "),n("code",null,"monitor"),s(" 对象，这就是为什么只有在同步的块或者方法中才能调用 "),n("code",null,"wait/notify"),s(" 等方法，否则会抛出 "),n("code",null,"java.lang.IllegalMonitorStateException"),s(" 的异常的原因。")],-1),P=n("p",null,[s("在执行 "),n("code",null,"monitorenter"),s(" 时，会尝试获取对象的锁，如果锁的计数器为 0 则表示锁可以被获取，获取后将锁计数器设为 1 也就是加 1。")],-1),L={href:"https://camo.githubusercontent.com/9b5986778b36cc58ea99abe6df0a892dc46acae65bbb73fba6b6dcfc4834da6b/68747470733a2f2f6f73732e6a61766167756964652e636e2f6769746875622f6a61766167756964652f6a6176612f636f6e63757272656e742f73796e6368726f6e697a65642d6765742d6c6f636b2d636f64652d626c6f636b2e706e67",target:"_blank",rel:"noopener noreferrer"},U=n("img",{src:"https://camo.githubusercontent.com/9b5986778b36cc58ea99abe6df0a892dc46acae65bbb73fba6b6dcfc4834da6b/68747470733a2f2f6f73732e6a61766167756964652e636e2f6769746875622f6a61766167756964652f6a6176612f636f6e63757272656e742f73796e6368726f6e697a65642d6765742d6c6f636b2d636f64652d626c6f636b2e706e67",alt:" 执行 monitorenter 获取锁",tabindex:"0",loading:"lazy"},null,-1),q=n("figcaption",null," 执行 monitorenter 获取锁",-1),O=n("p",null,[s("对象锁的的拥有者线程才可以执行 "),n("code",null,"monitorexit"),s(" 指令来释放锁。在执行 "),n("code",null,"monitorexit"),s(" 指令后，将锁计数器设为 0，表明锁被释放，其他线程可以尝试获取锁。")],-1),D={href:"https://camo.githubusercontent.com/ff0fb002626c445b1adc69507f430bc0ffd1202c9e0decfc58749f71c8183587/68747470733a2f2f6f73732e6a61766167756964652e636e2f6769746875622f6a61766167756964652f6a6176612f636f6e63757272656e742f73796e6368726f6e697a65642d72656c656173652d6c6f636b2d626c6f636b2e706e67",target:"_blank",rel:"noopener noreferrer"},E=n("img",{src:"https://camo.githubusercontent.com/ff0fb002626c445b1adc69507f430bc0ffd1202c9e0decfc58749f71c8183587/68747470733a2f2f6f73732e6a61766167756964652e636e2f6769746875622f6a61766167756964652f6a6176612f636f6e63757272656e742f73796e6368726f6e697a65642d72656c656173652d6c6f636b2d626c6f636b2e706e67",alt:" 执行 monitorexit 释放锁",tabindex:"0",loading:"lazy"},null,-1),B=n("figcaption",null," 执行 monitorexit 释放锁",-1),V=o(`<p>如果获取对象锁失败，那当前线程就要阻塞等待，直到锁被另外一个线程释放为止。</p><h4 id="synchronized-修饰方法的的情况" tabindex="-1"><a class="header-anchor" href="#synchronized-修饰方法的的情况" aria-hidden="true">#</a> synchronized 修饰方法的的情况</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>public class SynchronizedDemo2 {
    public synchronized void method() {
        System.out.println(&quot;synchronized 方法&quot;);
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),R={href:"https://camo.githubusercontent.com/0ac6ee1ed5d3ca201bd9243767f5a3d239419b6381c9053c7ccfba00890bd4b7/68747470733a2f2f6f73732e6a61766167756964652e636e2f6769746875622f6a61766167756964652f73796e6368726f6e697a6564254535253835254233254539253934254145254535254144253937254535253845253946254537253930253836322e706e67",target:"_blank",rel:"noopener noreferrer"},N=n("img",{src:"https://camo.githubusercontent.com/0ac6ee1ed5d3ca201bd9243767f5a3d239419b6381c9053c7ccfba00890bd4b7/68747470733a2f2f6f73732e6a61766167756964652e636e2f6769746875622f6a61766167756964652f73796e6368726f6e697a6564254535253835254233254539253934254145254535254144253937254535253845253946254537253930253836322e706e67",alt:"synchronized 关键字原理",tabindex:"0",loading:"lazy"},null,-1),K=n("figcaption",null,"synchronized 关键字原理",-1),H=o('<p><code>synchronized</code> 修饰的方法并没有 <code>monitorenter</code> 指令和 <code>monitorexit</code> 指令，取得代之的确实是 <code>ACC_SYNCHRONIZED</code> 标识，该标识指明了该方法是一个同步方法。JVM 通过该 <code>ACC_SYNCHRONIZED</code> 访问标志来辨别一个方法是否声明为同步方法，从而执行相应的同步调用。</p><p>如果是实例方法，JVM 会尝试获取实例对象的锁。如果是静态方法，JVM 会尝试获取当前 class 的锁。</p><h4 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h4><p><code>synchronized</code> 同步语句块的实现使用的是 <code>monitorenter</code> 和 <code>monitorexit</code> 指令，其中 <code>monitorenter</code> 指令指向同步代码块的开始位置，<code>monitorexit</code> 指令则指明同步代码块的结束位置。</p><p><code>synchronized</code> 修饰的方法并没有 <code>monitorenter</code> 指令和 <code>monitorexit</code> 指令，取得代之的确实是 <code>ACC_SYNCHRONIZED</code> 标识，该标识指明了该方法是一个同步方法。</p><p><strong>不过两者的本质都是对对象监视器 monitor 的获取。</strong></p>',6),F={href:"https://tech.youzan.com/javasuo-yu-xian-cheng-de-na-xie-shi/",target:"_blank",rel:"noopener noreferrer"},W=n("p",null,[s("🧗🏻 进阶一下：学有余力的小伙伴可以抽时间详细研究一下对象监视器 "),n("code",null,"monitor"),s("。")],-1),X=n("h3",{id:"jdk1-6-之后的-synchronized-底层做了哪些优化-锁升级原理了解吗",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#jdk1-6-之后的-synchronized-底层做了哪些优化-锁升级原理了解吗","aria-hidden":"true"},"#"),s(" JDK1.6 之后的 synchronized 底层做了哪些优化？锁升级原理了解吗？")],-1),Q=n("p",null,[s("在 Java 6 之后， "),n("code",null,"synchronized"),s(" 引入了大量的优化如自旋锁、适应性自旋锁、锁消除、锁粗化、偏向锁、轻量级锁等技术来减少锁操作的开销，这些优化让 "),n("code",null,"synchronized"),s(" 锁的效率提升了很多（JDK18 中，偏向锁已经被彻底废弃，前面已经提到过了）。")],-1),Y=n("p",null,"锁主要存在四种状态，依次是：无锁状态、偏向锁状态、轻量级锁状态、重量级锁状态，他们会随着竞争的激烈而逐渐升级。注意锁可以升级不可降级，这种策略是为了提高获得锁和释放锁的效率。",-1),G=n("code",null,"synchronized",-1),Z={href:"https://www.cnblogs.com/star95/p/17542850.html",target:"_blank",rel:"noopener noreferrer"},$=o('<h3 id="synchronized-和-volatile-有什么区别" tabindex="-1"><a class="header-anchor" href="#synchronized-和-volatile-有什么区别" aria-hidden="true">#</a> synchronized 和 volatile 有什么区别？</h3><p><code>synchronized</code> 关键字和 <code>volatile</code> 关键字是两个互补的存在，而不是对立的存在！</p><ul><li><code>volatile</code> 关键字是线程同步的轻量级实现，所以 <code>volatile</code> 性能肯定比 <code>synchronized</code> 关键字要好 。但是 <code>volatile</code> 关键字只能用于变量而 <code>synchronized</code> 关键字可以修饰方法以及代码块 。</li><li><code>volatile</code> 关键字能保证数据的可见性，但不能保证数据的原子性。<code>synchronized</code> 关键字两者都能保证。</li><li><code>volatile</code> 关键字主要用于解决变量在多个线程之间的可见性，而 <code>synchronized</code> 关键字解决的是多个线程之间访问资源的同步性。</li></ul><h2 id="cas" tabindex="-1"><a class="header-anchor" href="#cas" aria-hidden="true">#</a> CAS</h2><blockquote><p>什么是 CAS？</p><p>CAS 有什么作用？</p><p>CAS 的原理是什么？</p><p>CAS 的三大问题？</p></blockquote><p><strong>作用</strong></p><p><strong>CAS（Compare and Swap）</strong>，字面意思为<strong>比较并交换</strong>。CAS 有 3 个操作数，分别是：内存值 V，旧的预期值 A，要修改的新值 B。当且仅当预期值 A 和内存值 V 相同时，将内存值 V 修改为 B，否则什么都不做。</p><p><strong>原理</strong></p><p>Java 主要利用 <code>Unsafe</code> 这个类提供的 CAS 操作。<code>Unsafe</code> 的 CAS 依赖的是 JV M 针对不同的操作系统实现的 <code>Atomic::cmpxchg</code> 指令。</p><p><strong>三大问题</strong></p><ol><li><strong>ABA 问题</strong>：因为 CAS 需要在操作值的时候检查下值有没有发生变化，如果没有发生变化则更新，但是如果一个值原来是 A，变成了 B，又变成了 A，那么使用 CAS 进行检查时会发现它的值没有发生变化，但是实际上却变化了。ABA 问题的解决思路就是使用版本号。在变量前面追加上版本号，每次变量更新的时候把版本号加一，那么 A－B－A 就会变成 1A-2B－3A。</li><li><strong>循环时间长开销大</strong>。自旋 CAS 如果长时间不成功，会给 CPU 带来非常大的执行开销。如果 JVM 能支持处理器提供的 pause 指令那么效率会有一定的提升，pause 指令有两个作用，第一它可以延迟流水线执行指令（de-pipeline）, 使 CPU 不会消耗过多的执行资源，延迟的时间取决于具体实现的版本，在一些处理器上延迟时间是零。第二它可以避免在退出循环的时候因内存顺序冲突（memory order violation）而引起 CPU 流水线被清空（CPU pipeline flush），从而提高 CPU 的执行效率。</li><li><strong>只能保证一个共享变量的原子操作</strong>。当对一个共享变量执行操作时，我们可以使用循环 CAS 的方式来保证原子操作，但是对多个共享变量操作时，循环 CAS 就无法保证操作的原子性，这个时候就可以用锁，或者有一个取巧的办法，就是把多个共享变量合并成一个共享变量来操作。比如有两个共享变量 i ＝ 2,j=a，合并一下 ij=2a，然后用 CAS 来操作 ij。从 Java1.5 开始 JDK 提供了 AtomicReference 类来保证引用对象之间的原子性，你可以把多个变量放在一个对象里来进行 CAS 操作。</li></ol><h2 id="threadlocal" tabindex="-1"><a class="header-anchor" href="#threadlocal" aria-hidden="true">#</a> ThreadLocal</h2><blockquote><p><code>ThreadLocal</code> 有什么作用？</p><p><code>ThreadLocal</code> 的原理是什么？</p><p>如何解决 <code>ThreadLocal</code> 内存泄漏问题？</p></blockquote><p><strong>作用</strong></p><p><strong><code>ThreadLocal</code> 是一个存储线程本地副本的工具类</strong>。</p><p><strong>原理</strong></p><p><code>Thread</code> 类中维护着一个 <code>ThreadLocal.ThreadLocalMap</code> 类型的成员 <code>threadLocals</code>。这个成员就是用来存储当前线程独占的变量副本。</p><p><code>ThreadLocalMap</code> 是 <code>ThreadLocal</code> 的内部类，它维护着一个 <code>Entry</code> 数组， <code>Entry</code> 用于保存键值对，其 key 是 <code>ThreadLocal</code> 对象，value 是传递进来的对象（变量副本）。 <code>Entry</code> 继承了 <code>WeakReference</code> ，所以是弱引用。</p><p><strong>内存泄漏问题</strong></p><p>ThreadLocalMap 的 <code>Entry</code> 继承了 <code>WeakReference</code>，所以它的 key （<code>ThreadLocal</code> 对象）是弱引用，而 value （变量副本）是强引用。</p><ul><li>如果 <code>ThreadLocal</code> 对象没有外部强引用来引用它，那么 <code>ThreadLocal</code> 对象会在下次 GC 时被回收。</li><li>此时，<code>Entry</code> 中的 key 已经被回收，但是 value 由于是强引用不会被垃圾收集器回收。如果创建 <code>ThreadLocal</code> 的线程一直持续运行，那么 value 就会一直得不到回收，产生内存泄露。</li></ul><p>那么如何避免内存泄漏呢？方法就是：<strong>使用 <code>ThreadLocal</code> 的 <code>set</code> 方法后，显示的调用 <code>remove</code> 方法</strong> 。</p><h2 id="java-内存模型" tabindex="-1"><a class="header-anchor" href="#java-内存模型" aria-hidden="true">#</a> Java 内存模型</h2><h3 id="【中等】什么是-java-内存模型" tabindex="-1"><a class="header-anchor" href="#【中等】什么是-java-内存模型" aria-hidden="true">#</a> 【中等】什么是 Java 内存模型？</h3><p>Java 内存模型（Java Memory Model），简称 <strong>JMM</strong>。Java 内存模型的目标是为了解决由可见性和有序性导致的并发安全问题。Java 内存模型通过 <strong>屏蔽各种硬件和操作系统的内存访问差异，以实现让 Java 程序在各种平台下都能达到一致的内存访问效果</strong>。</p><div class="hint-container info"><p class="hint-container-title">物理内存模型存在的问题</p></div><p><strong>CPU、内存、I/O 设备存在很大的速度差异</strong> - CPU 远快于内存，内存远快于 I/O 设备。</p><p>为了合理利用 CPU 的高性能，平衡这三者的速度差异，计算机体系机构、操作系统、编译程序都做出了贡献，主要体现为：</p><ul><li><strong>CPU 增加了缓存</strong>，以均衡与 CPU 内存的速度差异；</li><li><strong>编译程序优化指令执行次序</strong>，使得缓存能够得到更加合理地利用。</li><li><strong>操作系统增加了进程、线程</strong>，以分时复用 CPU，进而均衡 CPU 与 I/O 的速度差异；</li></ul><p><strong>缓存</strong>导致的可见性问题，<strong>编译优化</strong>带来的有序性问题，<strong>线程切换</strong>带来的原子性问题。</p><p>为了解决缓存一致性问题，<strong>需要各个处理器访问缓存时都遵循一些协议，在读写时要根据协议来进行操作</strong>。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202408290755550.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',32),nn={href:"https://blog.csdn.net/suifeng3051/article/details/52611310",target:"_blank",rel:"noopener noreferrer"},sn=n("h2",{id:"同步容器和并发容器",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#同步容器和并发容器","aria-hidden":"true"},"#"),s(" 同步容器和并发容器")],-1),an={href:"https://dunwu.github.io/waterdrop/pages/6fd8d836/",target:"_blank",rel:"noopener noreferrer"},en=o('<h3 id="⭐-同步容器" tabindex="-1"><a class="header-anchor" href="#⭐-同步容器" aria-hidden="true">#</a> ⭐ 同步容器</h3><blockquote><p>什么是同步容器？</p><p>有哪些常见同步容器？</p><p>它们是如何实现线程安全的？</p><p>同步容器真的线程安全吗？</p></blockquote><p><strong>类型</strong></p><p><code>Vector</code>、<code>Stack</code>、<code>Hashtable</code></p><p><strong>作用/原理</strong></p><p>同步容器的同步原理就是在方法上用 <code>synchronized</code> 修饰。 <strong><code>synchronized</code> 可以保证在同一个时刻，只有一个线程可以执行某个方法或者某个代码块</strong>。</p><p><code>synchronized</code> 的互斥同步会产生阻塞和唤醒线程的开销。显然，这种方式比没有使用 <code>synchronized</code> 的容器性能要差。</p><p><strong>线程安全</strong></p><p>同步容器真的绝对安全吗？</p><p>其实也未必。在做复合操作（非原子操作）时，仍然需要加锁来保护。常见复合操作如下：</p><ul><li><strong>迭代</strong>：反复访问元素，直到遍历完全部元素；</li><li><strong>跳转</strong>：根据指定顺序寻找当前元素的下一个（下 n 个）元素；</li><li><strong>条件运算</strong>：例如若没有则添加等；</li></ul><h3 id="⭐⭐⭐-concurrenthashmap" tabindex="-1"><a class="header-anchor" href="#⭐⭐⭐-concurrenthashmap" aria-hidden="true">#</a> ⭐⭐⭐ ConcurrentHashMap</h3><blockquote><p>请描述 ConcurrentHashMap 的实现原理？</p><p>ConcurrentHashMap 为什么放弃了分段锁？</p></blockquote><p>基础数据结构原理和 <code>HashMap</code> 一样，JDK 1.7 采用 数组＋单链表；JDK 1.8 采用数组＋单链表＋红黑树。</p><p>并发安全特性的实现：</p><p>JDK 1.7：</p><ul><li>使用分段锁，设计思路是缩小锁粒度，提高并发吞吐。也就是将内部进行分段（Segment），里面则是 HashEntry 的数组，和 HashMap 类似，哈希相同的条目也是以链表形式存放。</li><li>写数据时，会使用可重入锁去锁住分段（segment）：HashEntry 内部使用 volatile 的 value 字段来保证可见性，也利用了不可变对象的机制以改进利用 Unsafe 提供的底层能力，比如 volatile access，去直接完成部分操作，以最优化性能，毕竟 Unsafe 中的很多操作都是 JVM intrinsic 优化过的。</li></ul><p>JDK 1.8：</p><ul><li>取消分段锁，直接采用 <code>transient volatile HashEntry&lt;K,V&gt;[] table</code> 保存数据，采用 table 数组元素作为锁，从而实现了对每一行数据进行加锁，进一步减少并发冲突的概率。</li><li>写数据时，使用是 CAS + <code>synchronized</code>。 <ul><li>根据 key 计算出 hashcode 。</li><li>判断是否需要进行初始化。</li><li><code>f</code> 即为当前 key 定位出的 Node，如果为空表示当前位置可以写入数据，利用 CAS 尝试写入，失败则自旋保证成功。</li><li>如果当前位置的 <code>hashcode == MOVED == -1</code>, 则需要进行扩容。</li><li>如果都不满足，则利用 synchronized 锁写入数据。</li><li>如果数量大于 <code>TREEIFY_THRESHOLD</code> 则要转换为红黑树。</li></ul></li></ul>',19);function on(tn,cn){const a=c("ExternalLinkIcon");return i(),l("div",null,[d,n("p",null,[s("下面是我见过最生动的说明，摘自 "),n("a",r,[s("并发与并行的区别是什么？——知乎的高票答案"),e(a)])]),u,n("blockquote",null,[k,n("ul",null,[n("li",null,[n("a",h,[s("Java Thread Methods and Thread States"),e(a)])]),n("li",null,[n("a",g,[s("Java 线程的 5 种状态及切换（透彻讲解）"),e(a)])]),n("li",null,[n("a",v,[s("Java 线程运行怎么有第六种状态？ - Dawell 的回答"),e(a)])])])]),m,n("blockquote",null,[n("p",null,[s("👉 扩展阅读："),n("a",b,[s("大家都说 Java 有三种创建线程的方式！并发编程中的惊天骗局！"),e(a)]),s("。")])]),y,n("blockquote",null,[n("p",null,[s("👉 扩展阅读："),n("a",f,[s("Java 并发编程：线程间协作的两种方式：wait、notify、notifyAll 和 Condition"),e(a)])])]),w,n("blockquote",null,[n("p",null,[s("👉 扩展阅读："),n("a",z,[s("Java 线程中 yield 与 join 方法的区别"),e(a)]),j,s(" 👉 扩展阅读："),n("a",x,[s("sleep()，wait()，yield() 和 join() 方法的区别"),e(a)])])]),_,n("figure",null,[n("a",T,[J,e(a)]),C]),S,n("blockquote",null,[n("p",null,[s("在 Java 虚拟机 (HotSpot) 中，Monitor 是基于 C++ 实现的，由 "),n("a",A,[s("ObjectMonitor"),e(a)]),s(" 实现的。每个对象中都内置了一个 "),M,s(" 对象。")]),I]),P,n("figure",null,[n("a",L,[U,e(a)]),q]),O,n("figure",null,[n("a",D,[E,e(a)]),B]),V,n("figure",null,[n("a",R,[N,e(a)]),K]),H,n("p",null,[s("相关推荐："),n("a",F,[s("Java 锁与线程的那些事 - 有赞技术团队"),e(a)]),s(" 。")]),W,X,Q,Y,n("p",null,[G,s(" 锁升级是一个比较复杂的过程，面试也很少问到，如果你想要详细了解的话，可以看看这篇文章："),n("a",Z,[s("浅析 synchronized 锁升级的原理与实现"),e(a)]),s("。")]),$,n("blockquote",null,[n("p",null,[s("👉 扩展阅读："),n("a",nn,[s("全面理解 Java 内存模型"),e(a)])])]),sn,n("blockquote",null,[n("p",null,[s("👉 扩展阅读："),n("a",an,[s("Java 并发容器"),e(a)])])]),en])}const dn=t(p,[["render",on],["__file","index.html.vue"]]);export{dn as default};
