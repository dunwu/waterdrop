const e=JSON.parse('{"key":"v-02d1782a","path":"/pages/db6ef802/","title":"Spring Environment 抽象","lang":"zh-CN","frontmatter":{"title":"Spring Environment 抽象","date":"2022-12-23T09:27:44.000Z","order":29,"permalink":"/pages/db6ef802/","category":["Java","框架","Spring","Spring核心"],"tag":["Java","框架","Spring"],"description":"Spring Environment 抽象 理解 Spring Environment 抽象 统一的 Spring 配置属性管理 Spring Framework 3.1 开始引入 Environment 抽象，它统一 Spring 配置属性的存储，包括占位符处理和类型转换，不仅完整地替换 PropertyPlaceholderConfigurer，而且还支持更丰富的配置属性源（PropertySource） 条件化 Spring Bean 装配管理 通过 Environment Profiles 信息，帮助 Spring 容器提供条件化地装配 Bean","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/db6ef802/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"Spring Environment 抽象"}],["meta",{"property":"og:description","content":"Spring Environment 抽象 理解 Spring Environment 抽象 统一的 Spring 配置属性管理 Spring Framework 3.1 开始引入 Environment 抽象，它统一 Spring 配置属性的存储，包括占位符处理和类型转换，不仅完整地替换 PropertyPlaceholderConfigurer，而且还支持更丰富的配置属性源（PropertySource） 条件化 Spring Bean 装配管理 通过 Environment Profiles 信息，帮助 Spring 容器提供条件化地装配 Bean"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-14T13:48:12.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"框架"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:published_time","content":"2022-12-23T09:27:44.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-14T13:48:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring Environment 抽象\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-12-23T09:27:44.000Z\\",\\"dateModified\\":\\"2025-09-14T13:48:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"理解 Spring Environment 抽象","slug":"理解-spring-environment-抽象","link":"#理解-spring-environment-抽象","children":[]},{"level":2,"title":"Spring Environment 接口使用场景","slug":"spring-environment-接口使用场景","link":"#spring-environment-接口使用场景","children":[]},{"level":2,"title":"Environment 占位符处理","slug":"environment-占位符处理","link":"#environment-占位符处理","children":[]},{"level":2,"title":"理解条件配置 Spring Profiles","slug":"理解条件配置-spring-profiles","link":"#理解条件配置-spring-profiles","children":[]},{"level":2,"title":"Spring 4 重构 @Profile","slug":"spring-4-重构-profile","link":"#spring-4-重构-profile","children":[]},{"level":2,"title":"依赖注入 Environment","slug":"依赖注入-environment","link":"#依赖注入-environment","children":[]},{"level":2,"title":"依赖查找 Environment","slug":"依赖查找-environment","link":"#依赖查找-environment","children":[]},{"level":2,"title":"依赖注入 @Value","slug":"依赖注入-value","link":"#依赖注入-value","children":[]},{"level":2,"title":"Spring 类型转换在 Environment 中的运用","slug":"spring-类型转换在-environment-中的运用","link":"#spring-类型转换在-environment-中的运用","children":[]},{"level":2,"title":"Spring 类型转换在 @Value 中的运用","slug":"spring-类型转换在-value-中的运用","link":"#spring-类型转换在-value-中的运用","children":[]},{"level":2,"title":"Spring 配置属性源 PropertySource","slug":"spring-配置属性源-propertysource","link":"#spring-配置属性源-propertysource","children":[]},{"level":2,"title":"Spring 內建的配置属性源","slug":"spring-內建的配置属性源","link":"#spring-內建的配置属性源","children":[]},{"level":2,"title":"基于注解扩展 Spring 配置属性源","slug":"基于注解扩展-spring-配置属性源","link":"#基于注解扩展-spring-配置属性源","children":[]},{"level":2,"title":"基于 API 扩展 Spring 配置属性源","slug":"基于-api-扩展-spring-配置属性源","link":"#基于-api-扩展-spring-配置属性源","children":[]},{"level":2,"title":"问题","slug":"问题","link":"#问题","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1757857692000,"updatedTime":1757857692000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":1}]},"readingTime":{"minutes":2.28,"words":684},"filePathRelative":"01.Java/13.框架/Spring/Spring核心/SpringEnvironment抽象.md","localizedDate":"2022年12月23日","excerpt":"<h1> Spring Environment 抽象</h1>\\n<h2> 理解 Spring Environment 抽象</h2>\\n<p>统一的 Spring 配置属性管理</p>\\n<p>Spring Framework 3.1 开始引入 Environment 抽象，它统一 Spring 配置属性的存储，包括占位符处理和类型转换，不仅完整地替换 PropertyPlaceholderConfigurer，而且还支持更丰富的配置属性源（PropertySource）</p>\\n<p>条件化 Spring Bean 装配管理</p>\\n<p>通过 Environment Profiles 信息，帮助 Spring 容器提供条件化地装配 Bean</p>","autoDesc":true}');export{e as data};
