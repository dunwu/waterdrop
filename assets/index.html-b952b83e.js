const e=JSON.parse('{"key":"v-896969f2","path":"/pages/8fa92451/","title":"设计模式之职责链模式","lang":"zh-CN","frontmatter":{"title":"设计模式之职责链模式","date":"2015-01-22T14:34:00.000Z","order":20,"permalink":"/pages/8fa92451/","category":["设计","设计模式"],"tag":["设计","设计模式"],"description":"设计模式之职责链模式 意图 职责链模式（Chain Of Responsibility） 是一种行为设计模式， 允许你将请求沿着处理者链进行发送。 收到请求后， 每个处理者均可对请求进行处理， 或将其传递给链上的下个处理者。 使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。 将这个对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。 适用场景 当程序需要使用不同方式处理不同种类请求， 而且请求类型和顺序预先未知时， 可以使用责任链模式。 当必须按顺序执行多个处理者时， 可以使用该模式。 如果所需处理者及其顺序必须在运行时进行改变， 可以使用责任链模式。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/8fa92451/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"设计模式之职责链模式"}],["meta",{"property":"og:description","content":"设计模式之职责链模式 意图 职责链模式（Chain Of Responsibility） 是一种行为设计模式， 允许你将请求沿着处理者链进行发送。 收到请求后， 每个处理者均可对请求进行处理， 或将其传递给链上的下个处理者。 使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。 将这个对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。 适用场景 当程序需要使用不同方式处理不同种类请求， 而且请求类型和顺序预先未知时， 可以使用责任链模式。 当必须按顺序执行多个处理者时， 可以使用该模式。 如果所需处理者及其顺序必须在运行时进行改变， 可以使用责任链模式。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-18T15:46:22.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"设计"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2015-01-22T14:34:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-18T15:46:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式之职责链模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2015-01-22T14:34:00.000Z\\",\\"dateModified\\":\\"2024-06-18T15:46:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"意图","slug":"意图","link":"#意图","children":[]},{"level":2,"title":"适用场景","slug":"适用场景","link":"#适用场景","children":[]},{"level":2,"title":"结构","slug":"结构","link":"#结构","children":[{"level":3,"title":"结构说明","slug":"结构说明","link":"#结构说明","children":[]},{"level":3,"title":"结构代码范式","slug":"结构代码范式","link":"#结构代码范式","children":[]}]},{"level":2,"title":"伪代码","slug":"伪代码","link":"#伪代码","children":[]},{"level":2,"title":"与其他模式的关系","slug":"与其他模式的关系","link":"#与其他模式的关系","children":[]},{"level":2,"title":"案例","slug":"案例","link":"#案例","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1651071272000,"updatedTime":1718725582000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":5}]},"readingTime":{"minutes":7.58,"words":2274},"filePathRelative":"03.设计/02.设计模式/20.职责链模式.md","localizedDate":"2015年1月22日","excerpt":"<h1> 设计模式之职责链模式</h1>\\n<h2> 意图</h2>\\n<p><strong>职责链模式</strong>（Chain Of Responsibility） 是一种行为设计模式， 允许你将请求沿着处理者链进行发送。 收到请求后， 每个处理者均可对请求进行处理， 或将其传递给链上的下个处理者。</p>\\n<p>使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。<br>\\n将这个对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。</p>\\n<h2> 适用场景</h2>\\n<ul>\\n<li>当程序需要使用不同方式处理不同种类请求， 而且请求类型和顺序预先未知时， 可以使用责任链模式。</li>\\n<li>当必须按顺序执行多个处理者时， 可以使用该模式。</li>\\n<li>如果所需处理者及其顺序必须在运行时进行改变， 可以使用责任链模式。</li>\\n</ul>","autoDesc":true}');export{e as data};
