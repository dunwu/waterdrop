import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as l,c as i,a as n,b as s,d as a,e}from"./app-afb37932.js";const r={},u=e('<h1 id="dubbo-面试之架构" tabindex="-1"><a class="header-anchor" href="#dubbo-面试之架构" aria-hidden="true">#</a> Dubbo 面试之架构</h1><h2 id="调用流程" tabindex="-1"><a class="header-anchor" href="#调用流程" aria-hidden="true">#</a> 调用流程</h2><h3 id="【简单】dubbo-支持哪些序列化方式" tabindex="-1"><a class="header-anchor" href="#【简单】dubbo-支持哪些序列化方式" aria-hidden="true">#</a> 【简单】Dubbo 支持哪些序列化方式？</h3><ul><li><strong>Hessian（默认）</strong><ul><li><strong>特点</strong>：二进制格式，速度较快，体积较小</li><li><strong>适用场景</strong>：通用 RPC 调用（Dubbo 默认方案）</li><li><strong>缺点</strong>：对复杂对象支持有限</li></ul></li><li><strong>JSON</strong><ul><li><strong>特点</strong>：文本格式，可读性强，跨语言支持好</li><li><strong>适用场景</strong>：前后端交互、多语言系统</li><li><strong>缺点</strong>：性能较差，数据体积大</li></ul></li><li><strong>Java 原生序列化</strong><ul><li><strong>特点</strong>：JDK 内置，使用简单</li><li><strong>适用场景</strong>：Java 单体应用调试</li><li><strong>缺点</strong>：性能差，体积大，仅限 Java</li></ul></li><li><strong>Kryo</strong><ul><li><strong>特点</strong>：高性能二进制，速度极快，体积小</li><li><strong>适用场景</strong>：高并发、低延迟场景</li><li><strong>缺点</strong>：API 复杂，需注册类</li></ul></li><li><strong>Protobuf（推荐）</strong><ul><li><strong>特点</strong>：Google 出品，高效跨语言，可扩展</li><li><strong>适用场景</strong>：微服务跨语言通信</li><li><strong>缺点</strong>：需预定义。proto 文件</li></ul></li><li><strong>FST</strong><ul><li><strong>特点</strong>：类似 Kryo，高性能二进制</li><li><strong>适用场景</strong>：替代 Hessian 的高性能需求</li><li><strong>缺点</strong>：兼容性较弱</li></ul></li></ul><p><strong>选型建议</strong></p><table><thead><tr><th>序列化方式</th><th>性能</th><th>体积</th><th>跨语言</th><th>易用性</th><th>适用场景</th></tr></thead><tbody><tr><td><strong>Hessian</strong></td><td>中</td><td>小</td><td>部分</td><td>高</td><td>默认 RPC 调用</td></tr><tr><td><strong>JSON</strong></td><td>低</td><td>大</td><td>是</td><td>高</td><td>前后端交互</td></tr><tr><td><strong>Java</strong></td><td>低</td><td>大</td><td>否</td><td>高</td><td>调试/兼容旧系统</td></tr><tr><td><strong>Kryo</strong></td><td>高</td><td>小</td><td>否</td><td>中</td><td>纯 Java 高性能场景</td></tr><tr><td><strong>Protobuf</strong></td><td>高</td><td>小</td><td>是</td><td>中</td><td>跨语言微服务（推荐）</td></tr><tr><td><strong>FST</strong></td><td>高</td><td>小</td><td>否</td><td>中</td><td>替代 Hessian 优化性能</td></tr></tbody></table><p><strong>推荐选择</strong></p><ul><li><strong>默认场景</strong> → Hessian</li><li><strong>跨语言微服务</strong> → Protobuf</li><li><strong>纯 Java 高性能</strong> → Kryo/FST</li><li><strong>调试/兼容</strong> → Java 原生</li><li><strong>前后端交互</strong> → JSON</li></ul><h3 id="【简单】dubbo-支持哪些通信协议" tabindex="-1"><a class="header-anchor" href="#【简单】dubbo-支持哪些通信协议" aria-hidden="true">#</a> 【简单】Dubbo 支持哪些通信协议？</h3><p>Dubbo 框架提供了自定义的高性能 RPC 通信协议：基于 HTTP/2 的 Triple 协议 和 基于 TCP 的 Dubbo2 协议。除此之外，Dubbo 框架支持任意第三方通信协议，如官方支持的 gRPC、Thrift、REST、JsonRPC、Hessian2 等，更多协议可以通过自定义扩展实现。这对于微服务实践中经常要处理的多协议通信场景非常有用。</p><p><strong>Dubbo 框架不绑定任何通信协议，在实现上 Dubbo 对多协议的支持也非常灵活，它可以让你在一个应用内发布多个使用不同协议的服务，并且支持用同一个 port 端口对外发布所有协议。</strong></p><figure><img src="https://cn.dubbo.apache.org/imgs/v3/feature/protocols/protocol1.png" alt="protocols" tabindex="0" loading="lazy"><figcaption>protocols</figcaption></figure><p>Dubbo 官方支持的协议如下：</p>',13),d=n("strong",null,"HTTP/2 (Triple)",-1),k={href:"https://cn.dubbo.apache.org/zh-cn/overview/what/tasks/protocols/triple/",target:"_blank",rel:"noopener noreferrer"},g={href:"https://cn.dubbo.apache.org/zh-cn/overview/reference/protocols/triple/",target:"_blank",rel:"noopener noreferrer"},b=n("strong",null,"Dubbo2",-1),v={href:"https://cn.dubbo.apache.org/zh-cn/overview/what/tasks/protocols/dubbo/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://cn.dubbo.apache.org/zh-cn/overview/reference/protocols/tcp/",target:"_blank",rel:"noopener noreferrer"},h=n("strong",null,"gRPC",-1),f={href:"https://cn.dubbo.apache.org/zh-cn/overview/what/tasks/protocols/grpc/",target:"_blank",rel:"noopener noreferrer"},y=n("strong",null,"REST",-1),x={href:"https://cn.dubbo.apache.org/zh-cn/overview/what/tasks/protocols/web/",target:"_blank",rel:"noopener noreferrer"},D={href:"https://cn.dubbo.apache.org/zh-cn/overview/what/tasks/protocols/springcloud/",target:"_blank",rel:"noopener noreferrer"},S=n("strong",null,"Hessian",-1),P={href:"http://dubbo.apache.org/zh-cn/docs/user/references/protocol/hessian.html",target:"_blank",rel:"noopener noreferrer"},C=n("ul",null,[n("li",null,"提供者用 Dubbo 的 Hessian 协议暴露服务，消费者直接用标准 Hessian 接口调用"),n("li",null,"或者提供方用标准 Hessian 暴露服务，消费方用 Dubbo 的 Hessian 协议调用。")],-1),I=n("strong",null,"Thrift",-1),q={href:"http://dubbo.apache.org/zh-cn/docs/user/references/protocol/thrift.html",target:"_blank",rel:"noopener noreferrer"},w={href:"https://cn.dubbo.apache.org/zh-cn/overview/what/core-features/protocols/",target:"_blank",rel:"noopener noreferrer"},T=e(`<h3 id="【困难】动态代理在-dubbo-中有哪些应用" tabindex="-1"><a class="header-anchor" href="#【困难】动态代理在-dubbo-中有哪些应用" aria-hidden="true">#</a> 【困难】动态代理在 Dubbo 中有哪些应用？</h3><p>Dubbo 广泛使用 <strong>动态代理</strong> 技术来实现 <strong>远程调用（RPC）</strong>、<strong>延迟加载（Lazy Loading）</strong> 和 <strong>AOP 增强（如负载均衡、容错等）</strong>，主要涉及 <strong>JDK 动态代理</strong> 和 <strong>CGLIB</strong> 两种方式。</p><p><strong>核心应用场景</strong></p><p><strong>（1）远程调用（RPC）</strong></p><p>Dubbo 的 <strong>核心 RPC 调用</strong> 依赖动态代理。<strong>消费者（Consumer）</strong> 调用服务时，Dubbo 生成一个 <strong>代理对象</strong>（<code>Proxy</code>），代理负责：</p><ul><li><strong>封装网络通信</strong>（序列化/反序列化、TCP 传输）。</li><li><strong>负载均衡</strong>（从多个 Provider 中选择一个）。</li><li><strong>容错机制</strong>（失败重试、熔断降级）。</li></ul><p><strong>示例代码</strong>（消费者调用远程服务）：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Reference</span>  <span class="token comment">// Dubbo 自动生成代理</span>
<span class="token keyword">private</span> <span class="token class-name">OrderService</span> orderService<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    orderService<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 实际调用的是代理对象，代理处理远程通信</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>底层实现</strong>：</p><ul><li>如果服务是 <strong>接口</strong> → 使用 <strong>JDK 动态代理</strong>（基于 <code>InvocationHandler</code>）。</li><li>如果服务是 <strong>类</strong>（无接口）→ 使用 <strong>CGLIB</strong> 生成子类代理。</li></ul><p><strong>（2）延迟加载（Lazy Loading）</strong></p><p>Dubbo 支持 <strong>懒初始化</strong>，即服务 <strong>首次调用时才实例化</strong>，减少启动时间。</p><ul><li><strong>代理拦截</strong>：Dubbo 返回代理对象，<strong>真正调用时才初始化真实服务</strong>。</li><li><strong>适用场景</strong>：初始化成本高的服务（如数据库连接、大数据计算）。</li></ul><p><strong>配置方式</strong>（XML/注解）：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>service</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.example.UserService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">lazy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@org.apache.dubbo.config.annotation.Service</span><span class="token punctuation">(</span>lazy <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（3）AOP 增强（Filter 机制）</strong></p><p>Dubbo 的 <strong>Filter 链</strong>（如监控、日志、权限校验）基于动态代理实现：</p><ul><li><strong>代理包装真实服务</strong>，在调用前后插入逻辑（类似 Spring AOP）。</li><li><strong>示例</strong>： <ul><li><code>MonitorFilter</code>：统计调用耗时。</li><li><code>TokenFilter</code>：权限校验。</li></ul></li></ul><p><strong>实现方式</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Invoker</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> invoker<span class="token punctuation">,</span> <span class="token class-name">Invocation</span> invocation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Before RPC call&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Result</span> result <span class="token operator">=</span> invoker<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>invocation<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 真实调用</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;After RPC call&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Dubbo 会通过 <strong>代理机制</strong> 自动应用这些 Filter。</p><ol start="2"><li>JDK 动态代理 vs. CGLIB</li></ol><table><thead><tr><th><strong>对比项</strong></th><th><strong>JDK 动态代理</strong></th><th><strong>CGLIB</strong></th></tr></thead><tbody><tr><td><strong>适用场景</strong></td><td>代理接口（如 Dubbo 的 <code>@Reference</code>）</td><td>代理类（无接口）</td></tr><tr><td><strong>性能</strong></td><td>较快（基于反射）</td><td>略慢（生成子类）</td></tr><tr><td><strong>依赖</strong></td><td>无需额外库</td><td>需引入 <code>cglib</code> 依赖</td></tr><tr><td><strong>示例</strong></td><td><code>Proxy.newProxyInstance()</code></td><td><code>Enhancer.create()</code></td></tr></tbody></table><p>Dubbo <strong>默认优先使用 JDK 动态代理</strong>，如果目标类没有接口，则降级为 CGLIB。</p><p><strong>动态代理的底层实现</strong></p><p><strong>（1）JDK 动态代理（接口代理）</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdkProxyDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">OrderService</span> proxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">OrderService</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>
            <span class="token class-name">OrderService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">OrderService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">(</span>proxyObj<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args1<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Before method call&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 模拟远程调用</span>
                <span class="token class-name">Object</span> result <span class="token operator">=</span> <span class="token string">&quot;Mock Result&quot;</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;After method call&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> result<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        proxy<span class="token punctuation">.</span><span class="token function">createOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 调用代理方法</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（2）CGLIB（类代理）</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CglibProxyDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Enhancer</span> enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span><span class="token class-name">UserServiceImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">MethodInterceptor</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>obj<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args1<span class="token punctuation">,</span> proxy<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Before method call&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Object</span> result <span class="token operator">=</span> proxy<span class="token punctuation">.</span><span class="token function">invokeSuper</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args1<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;After method call&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> result<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">UserService</span> proxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">)</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        proxy<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 调用代理方法</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>总结</strong></p><table><thead><tr><th><strong>应用场景</strong></th><th><strong>动态代理的作用</strong></th><th><strong>实现方式</strong></th></tr></thead><tbody><tr><td><strong>远程调用（RPC）</strong></td><td>封装网络通信、负载均衡、容错</td><td>JDK/CGLIB</td></tr><tr><td><strong>延迟加载</strong></td><td>首次调用时才初始化服务</td><td>JDK/CGLIB</td></tr><tr><td><strong>AOP（Filter）</strong></td><td>实现日志、监控、权限等增强逻辑</td><td>JDK/CGLIB</td></tr></tbody></table><h2 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理" aria-hidden="true">#</a> 工作原理</h2><h3 id="【中等】dubbo-的工作原理是什么" tabindex="-1"><a class="header-anchor" href="#【中等】dubbo-的工作原理是什么" aria-hidden="true">#</a> 【中等】Dubbo 的工作原理是什么？</h3><p>Dubbo 通过 <strong>注册中心解耦</strong> + <strong>动态代理透明化调用</strong> + <strong>集群容错保障可用性</strong>，实现高效 RPC 通信。</p><p><strong>核心架构</strong></p><ul><li><strong>Provider</strong>：暴露服务接口，注册到注册中心</li><li><strong>Consumer</strong>：从注册中心订阅服务，发起远程调用</li><li><strong>Registry</strong>：服务发现与元数据管理（如 Zookeeper/Nacos）</li><li><strong>Monitor</strong> ：统计调用次数和耗时</li></ul><p><strong>调用流程</strong></p><ol><li><strong>服务注册</strong>：Provider 启动 → 注册服务到 Registry</li><li><strong>服务发现</strong>：Consumer 启动 → 从 Registry 订阅 Provider 列表</li><li><strong>远程调用</strong>：Consumer 通过 <strong>动态代理</strong> 发起调用 → 经负载均衡选择 Provider → 网络传输（Netty/HTTP）</li><li><strong>结果返回</strong>：Provider 处理请求 → 返回结果给 Consumer</li></ol><p><strong>关键机制</strong></p><ul><li><strong>动态代理</strong>：生成接口代理类，屏蔽远程调用细节</li><li><strong>负载均衡</strong>：内置随机/轮询/最少活跃调用等算法</li><li><strong>集群容错</strong>：失败自动切换（Failover）/快速失败（Failfast）等策略</li><li><strong>异步通信</strong>：基于 Netty 的 NIO 长连接，支持异步调用</li><li><strong>SPI 机制</strong>：可插拔式扩展（如替换注册中心/协议）</li><li><strong>Filter 链</strong>：支持 AOP 式拦截（日志/限流/鉴权）</li></ul><p><strong>性能优化设计</strong></p><ul><li><strong>元数据缓存</strong>：Consumer 本地缓存 Provider 列表</li><li><strong>长连接复用</strong>：减少 TCP 握手开销</li><li><strong>线程池隔离</strong>：业务逻辑与 IO 线程分离</li></ul><h3 id="【简单】dubbo-有哪些核心组件" tabindex="-1"><a class="header-anchor" href="#【简单】dubbo-有哪些核心组件" aria-hidden="true">#</a> 【简单】Dubbo 有哪些核心组件？</h3><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/distributed/rpc/dubbo/dubbo基本架构.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Dubbo 是一个高性能分布式服务框架，它有<strong>三个核心组件</strong>：</p><ul><li><strong>Provider</strong>：服务提供者。 <ul><li>启动时，向注册中心注册自己提供的服务。</li><li>接收 Consumer 的远程调用请求并返回结果。</li></ul></li><li><strong>Consumer</strong>：服务消费者。 <ul><li>启动时，向注册中心订阅自己所需的服务，获取 Provider 地址列表。</li><li>通过负载均衡策略选择 Provider 发起远程调用。</li></ul></li><li><strong>Registry</strong>：注册中心。 <ul><li>负责服务的注册与发现（如 Zookeeper、Nacos）。</li><li>动态维护 Provider 和 Consumer 的映射关系。</li></ul></li></ul><p><strong>扩展组件</strong></p><ul><li><strong>Monitor</strong>：监控中心。统计服务调用次数、耗时、成功率等指标，便于运维和优化。</li><li><strong>Container</strong>：服务容器。管理服务生命周期（如 Spring 容器），提供依赖注入和环境支持。</li><li><strong>Protocol</strong>：通信协议。定义数据传输方式（如 Dubbo 协议、HTTP、REST），影响性能和兼容性。</li><li><strong>Cluster</strong>：集群容错。提供故障转移（Failover）、快速失败（Failfast）等机制，保障高可用。</li></ul><p><strong>重要知识点总结</strong></p><ul><li>注册中心负责服务地址的注册与查找，相当于元数据管理服务，服务提供者和消费者只在启动时与注册中心交互，注册中心不转发请求，压力较小。</li><li>监控中心负责统计各服务调用次数，调用时间等，统计先在内存汇总后每分钟一次发送到监控中心服务器，并以报表展示。</li><li>注册中心，服务提供者，服务消费者三者之间均为长连接，监控中心除外。</li><li>注册中心通过长连接感知服务提供者的存在，服务提供者宕机，注册中心将立即推送事件通知消费者。</li><li>注册中心和监控中心全部宕机，不影响已运行的提供者和消费者，消费者在本地缓存了提供者列表。</li><li>注册中心和监控中心都是可选的，服务消费者可以直连服务提供者。</li><li>服务提供者无状态，任意一台宕掉后，不影响使用。</li><li>服务提供者全部宕掉后，服务消费者应用将无法使用，并无限次重连等待服务提供者恢复。</li></ul><h3 id="【困难】dubbo-框架整体如何设计的" tabindex="-1"><a class="header-anchor" href="#【困难】dubbo-框架整体如何设计的" aria-hidden="true">#</a> 【困难】Dubbo 框架整体如何设计的？</h3><p>Dubbo 的整体设计原则如下：</p><ul><li>采用 Microkernel + Plugin 模式，Microkernel 只负责组装 Plugin，Dubbo 自身的功能也是通过扩展点实现的，也就是 Dubbo 的所有功能点都可被用户自定义扩展所替换。</li><li>采用 URL 作为配置信息的统一格式，所有扩展点都通过传递 URL 携带配置信息。</li></ul><div class="hint-container info"><p class="hint-container-title">整体设计</p></div><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/distributed/rpc/dubbo/dubbo整体设计.jpg" alt="总设计图" tabindex="0" loading="lazy"><figcaption>总设计图</figcaption></figure><ul><li>图中左边淡蓝背景的为服务消费方使用的接口，右边淡绿色背景的为服务提供方使用的接口，位于中轴线上的为双方都用到的接口。</li><li>图中从下至上分为十层，各层均为单向依赖，右边的黑色箭头代表层之间的依赖关系，每一层都可以剥离上层被复用，其中，Service 和 Config 层为 API，其它各层均为 SPI。</li><li>图中绿色小块的为扩展接口，蓝色小块为实现类，图中只显示用于关联各层的实现类。</li><li>图中蓝色虚线为初始化过程，即启动时组装链，红色实线为方法调用过程，即运行时调时链，紫色三角箭头为继承，可以把子类看作父类的同一个节点，线上的文字为调用的方法。</li></ul><div class="hint-container info"><p class="hint-container-title">分层架构</p></div><ul><li><strong>config 配置层</strong>：对外配置接口，以 <code>ServiceConfig</code>、<code>ReferenceConfig</code> 为中心，可以直接初始化配置类，也可以通过 Spring 解析配置生成配置类</li><li><strong>proxy 服务代理层</strong>：服务接口透明代理，生成服务的客户端 Stub 和服务器端 Skeleton，以 <code>ServiceProxy</code> 为中心，扩展接口为 <code>ProxyFactory</code>。</li><li><strong>registry 注册中心层</strong>：封装服务地址的注册与发现，以服务 URL 为中心，扩展接口为 <code>RegistryFactory</code>、<code>Registry</code>、<code>RegistryService</code>。</li><li><strong>cluster 路由层</strong>：封装多个提供者的路由及负载均衡，并桥接注册中心，以 <code>Invoker</code> 为中心，扩展接口为 <code>Cluster</code>、<code>Directory</code>、<code>Router</code>、<code>LoadBalance</code>。</li><li><strong>monitor 监控层</strong>：RPC 调用次数和调用时间监控，以 <code>Statistics</code> 为中心，扩展接口为 <code>MonitorFactory</code>、<code>Monitor</code>、<code>MonitorService</code>。</li><li><strong>protocol 远程调用层</strong>：封装 RPC 调用，以 <code>Invocation</code>、<code>Result</code> 为中心，扩展接口为 <code>Protocol</code>、<code>Invoker</code>、<code>Exporter</code>。</li><li><strong>exchange 信息交换层</strong>：封装请求响应模式，同步转异步，以 <code>Request</code>、<code>Response</code> 为中心，扩展接口为 <code>Exchanger</code>、<code>ExchangeChannel</code>、<code>ExchangeClient</code>、<code>ExchangeServer</code>。</li><li><strong>transport 网络传输层</strong>：抽象 mina 和 netty 为统一接口，以 <code>Message</code> 为中心，扩展接口为 <code>Channel</code>、<code>Transporter</code>、<code>Client</code>、<code>Server</code>、<code>Codec</code>。</li><li><strong>serialize 数据序列化层</strong>：可复用的一些工具，扩展接口为 <code>Serialization</code>、<code>ObjectInput</code>、<code>ObjectOutput</code>、<code>ThreadPool</code>。</li></ul><div class="hint-container info"><p class="hint-container-title">组件间的关系</p></div><ul><li>在 RPC 中，<strong><code>Protocol</code> 是核心层，也就是只要有 <code>Protocol</code> + <code>Invoker</code> + <code>Exporter</code> 就可以完成非透明的 RPC 调用</strong>，然后在 <code>Invoker</code> 的主过程上设置拦截点（Filter）。</li><li>图中的 <code>Consumer</code> 和 <code>Provider</code> 是抽象概念，只是想让看图者更直观的了解哪些类分属于客户端与服务器端，不用 Client 和 Server 的原因是 Dubbo 在很多场景下都使用 <code>Provider</code>、<code>Consumer</code>、Registry、<code>Monitor</code> 划分逻辑拓普节点，保持统一概念。</li><li>而 Cluster 是外围概念，所以 <strong>Cluster 的目的是将多个 Invoker 伪装成一个 Invoker</strong>，这样其它人只要关注 Protocol 层 Invoker 即可，加上 Cluster 或者去掉 Cluster 对其它层都不会造成影响，因为只有一个提供者时，是不需要 Cluster 的。</li><li><strong>Proxy 层封装了所有接口的透明化代理</strong>。在其它层都以 <code>Invoker</code> 为中心，只有到了暴露给用户使用时，才用 <code>Proxy</code> 将 <code>Invoker</code> 转成接口，或将接口实现转成 <code>Invoker</code>，也就是去掉 Proxy 层 RPC 是可以 Run 的，只是不那么透明，不那么看起来像调本地服务一样调远程服务。</li><li>而 Remoting 实现是 Dubbo 协议的实现，如果你选择 RMI 协议，整个 Remoting 都不会用上，Remoting 内部再划为 Transport 传输层和 Exchange 信息交换层，<strong>Transport 层只负责单向消息传输</strong>，是对 Mina, Netty, Grizzly 的抽象，它也可以扩展 UDP 传输，而 <strong>Exchange 层是在传输层之上封装了 Request-Response 语义</strong>。</li><li>Registry 和 Monitor 实际上不算一层，而是一个独立的节点，只是为了全局概览，用层的方式画在一起。</li></ul><div class="hint-container info"><p class="hint-container-title">核心组件交互</p></div><figure><img src="https://cn.dubbo.apache.org/imgs/dev/dubbo-relation.jpg" alt="依赖关系" tabindex="0" loading="lazy"><figcaption>依赖关系</figcaption></figure><ul><li>图中小方块 Protocol, Cluster, Proxy, Service, Container, Registry, Monitor 代表层或模块，蓝色的表示与业务有交互，绿色的表示只对 Dubbo 内部交互。</li><li>图中背景方块 Consumer, Provider, Registry, Monitor 代表部署逻辑拓扑节点。</li><li>图中蓝色虚线为初始化时调用，红色虚线为运行时异步调用，红色实线为运行时同步调用。</li><li>图中只包含 RPC 的层，不包含 Remoting 的层，Remoting 整体都隐含在 Protocol 中。</li></ul><div class="hint-container info"><p class="hint-container-title">调用链路</p></div><p>展开总设计图的红色调用链，如下：</p><figure><img src="https://cn.dubbo.apache.org/imgs/dev/dubbo-extension.jpg" alt="总设计图的红色调用链" tabindex="0" loading="lazy"><figcaption>总设计图的红色调用链</figcaption></figure>`,68),_={href:"https://cn.dubbo.apache.org/zh-cn/docsv2.7/dev/design/",target:"_blank",rel:"noopener noreferrer"},R=e(`<h3 id="【中等】dubbo-中用到哪些设计模式" tabindex="-1"><a class="header-anchor" href="#【中等】dubbo-中用到哪些设计模式" aria-hidden="true">#</a> 【中等】Dubbo 中用到哪些设计模式？</h3><p><strong>单例模式</strong></p><p>Dubbo 中大量使用单例模式来确保一些特定类在整个应用中只有一个实例。举例来说，<code>ExtensionLoader</code> 是 Dubbo SPI 加载器，负责管理 Dubbo 中的扩展点。<code>ExtensionLoader</code> 使用了单例模式来确保 <code>ExtensionLoader</code> 在整个应用中只有一个实例。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExtensionLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ConcurrentMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">ExtensionLoader</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token constant">EXTENSION_LOADERS</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">ExtensionLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">getExtensionLoader</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ExtensionLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> loader <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ExtensionLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> <span class="token constant">EXTENSION_LOADERS</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>loader <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token constant">EXTENSION_LOADERS</span><span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ExtensionLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            loader <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ExtensionLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> <span class="token constant">EXTENSION_LOADERS</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> loader<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>责任链模式</strong></p><p>Dubbo 的调用链是基于责任链模式组织起来的。责任链中的每个节点实现 <code>Filter</code> 接口，然后由 <code>ProtocolFilterWrapper</code> 将所有 <code>Filter</code> 串连起来。Dubbo 的许多功能都是通过 <code>Filter</code> 扩展实现的，比如监控、日志、缓存、安全等。</p><p><strong>装饰器模式</strong></p><p>Dubbo 中大量用到了修饰器模式。比如 <code>ProtocolFilterWrapper</code> 类是对 <code>Protocol</code> 类的修饰。在 <code>export</code> 和 <code>refer</code> 方法中，配合责任链模式，把 <code>Filter</code> 组装成责任链，实现对 <code>Protocol</code> 功能的修饰。其他还有 <code>ProtocolListenerWrapper</code>、 <code>ListenerInvokerWrapper</code>、<code>InvokerWrapper</code> 等。</p><p><strong>策略模式</strong></p><p>Dubbo 中的负载均衡器采用了策略模式，以便灵活的替换算法。在 Dubbo 中，<code>LoadBalance</code> 接口定义了负载均衡的策略接口，它有以下具体实现：<code>AdaptiveLoadBalance</code>、<code>ConsistentHashLoadBalance</code>、<code>LeastActiveLoadBalance</code>、<code>RandomLoadBalance</code>、<code>RoundRobinLoadBalance</code>、<code>ServerCpuLoadBalance2</code>、<code>ShortestResponseLoadBalance</code>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LoadBalance</span> <span class="token punctuation">{</span>
    <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Invoker</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Invoker</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> invokers<span class="token punctuation">,</span> <span class="token class-name">URL</span> url<span class="token punctuation">,</span> <span class="token class-name">Invocation</span> invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RpcException</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>抽象工厂模式</strong></p><p>Dubbo 中的 <code>ProxyFactory</code> 采用了<strong>抽象工厂模式</strong>。<code>AbstractProxyFactory</code> 实现了 <code>ProxyFactory</code> 接口，并且有 <code>JdkProxyFactory</code> 和 <code>JavassistProxyFactory</code> 两个子类，可以分别生产不同序列化方式的 <code>Proxy</code> 和 <code>Invoke</code>。</p><p><strong>代理模式</strong></p><p>Dubbo 使用代理模式隐藏远程调用的细节。<code>ProxyFactory</code> 接口及其实现类负责为服务创建代理对象，使得调用者无需关心实际的服务调用过程。</p><p><strong>适配器模式</strong></p><p>Dubbo 中 <code>RegistryProtocol</code> 类负责将不同的注册中心协议适配到统一的接口 <code>Protocol</code> 中，以便在不同的注册中心下工作。<code>RegistryProtocol</code> 通过适配不同的注册中心实现，使得 Dubbo 能够在多种注册中心协议下工作，而不必修改客户端代码。</p>`,17),F={href:"https://juejin.cn/post/7126675470107541534#heading-24",target:"_blank",rel:"noopener noreferrer"},j=e(`<h2 id="可用性设计" tabindex="-1"><a class="header-anchor" href="#可用性设计" aria-hidden="true">#</a> 可用性设计</h2><h3 id="【困难】dubbo-如何保证服务的高可用性" tabindex="-1"><a class="header-anchor" href="#【困难】dubbo-如何保证服务的高可用性" aria-hidden="true">#</a> 【困难】Dubbo 如何保证服务的高可用性？</h3><p>Dubbo 高可用设计核心思想：</p><ul><li><strong>冗余</strong>：多注册中心、多服务节点</li><li><strong>故障检测</strong>：心跳检测 + 主动剔除</li><li><strong>容错处理</strong>：超时 + 重试 + 容错处理策略</li><li><strong>流量控制</strong>：限流 + 熔断 + 降级</li><li><strong>隔离</strong>：线程/协议/分组隔离避免连锁故障</li></ul><p>实际生产中需结合 <strong>压测</strong> 和 <strong>监控</strong> 持续调优参数（如超时时间、重试次数）。</p><p>Dubbo 通过 <strong>多级容错设计</strong> 确保服务高可用，主要依赖以下机制：</p><p><strong>注册中心容错</strong></p><table><thead><tr><th><strong>机制</strong></th><th><strong>说明</strong></th><th><strong>配置示例</strong></th></tr></thead><tbody><tr><td><strong>多注册中心</strong></td><td>同时接入多个注册中心（如 Zookeeper + Nacos），避免单点故障。</td><td><code>&lt;dubbo:registry address=&quot;zookeeper://ip1:2181,nacos://ip2:8848&quot; /&gt;</code></td></tr><tr><td><strong>心跳检测</strong></td><td>注册中心定时检测服务存活状态，自动剔除失效节点（默认 30 秒）。</td><td><code>&lt;dubbo:provider heartbeat=&quot;60000&quot; /&gt;</code></td></tr><tr><td><strong>本地缓存</strong></td><td>消费者缓存服务列表，即使注册中心宕机仍能调用服务。</td><td>默认启用，无需配置</td></tr></tbody></table><p><strong>服务调用容错</strong></p><table><thead><tr><th><strong>策略</strong></th><th><strong>说明</strong></th><th><strong>适用场景</strong></th></tr></thead><tbody><tr><td><strong>集群容错</strong></td><td>- <code>failover</code>（默认）：失败自动切换其他节点<br>- <code>failfast</code>：快速失败<br>- <code>failsafe</code>：忽略异常</td><td><code>&lt;dubbo:reference cluster=&quot;failover&quot; retries=&quot;2&quot; /&gt;</code></td></tr><tr><td><strong>负载均衡</strong></td><td>- <code>random</code>（默认随机）<br>- <code>roundrobin</code>（轮询）<br>- <code>leastactive</code>（最少活跃调用）</td><td><code>&lt;dubbo:reference loadbalance=&quot;leastactive&quot; /&gt;</code></td></tr><tr><td><strong>限流、熔断、降级</strong></td><td>集成 Sentinel/Hystrix，在服务异常时触发熔断或返回降级结果。</td><td>需额外引入依赖并配置规则</td></tr></tbody></table><p><strong>通信容错</strong></p><table><thead><tr><th><strong>机制</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>长连接复用</strong></td><td>默认复用 TCP 长连接，减少握手开销，通过心跳保活（<code>heartbeat</code> 参数控制）。</td></tr><tr><td><strong>多协议支持</strong></td><td>支持 Dubbo/HTTP/gRPC 等协议，根据网络环境选择最优协议。</td></tr><tr><td><strong>IO 线程隔离</strong></td><td>业务逻辑与网络 IO 线程分离，避免阻塞导致雪崩。</td></tr></tbody></table><p><strong>运维级保障</strong></p><table><thead><tr><th><strong>措施</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>灰度发布</strong></td><td>通过路由规则（如 <code>tag</code>）逐步切流，避免全量发布风险。</td></tr><tr><td><strong>压力测试</strong></td><td>使用 JMeter 模拟高并发，提前暴露性能瓶颈。</td></tr><tr><td><strong>日志监控</strong></td><td>对接 Prometheus + Grafana 监控 QPS/RT/错误率，实时告警。</td></tr></tbody></table><p><strong>典型配置示例</strong></p><p>服务提供者（超时与重试）：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>service</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.example.UserService<span class="token punctuation">&quot;</span></span>
               <span class="token attr-name">timeout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>3000<span class="token punctuation">&quot;</span></span>
               <span class="token attr-name">retries</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>2<span class="token punctuation">&quot;</span></span>
               <span class="token attr-name">cluster</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>failover<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务消费者（熔断降级）：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Reference</span><span class="token punctuation">(</span>version <span class="token operator">=</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span>
           timeout <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">,</span>
           cluster <span class="token operator">=</span> <span class="token string">&quot;failfast&quot;</span><span class="token punctuation">,</span>
           mock <span class="token operator">=</span> <span class="token string">&quot;com.example.UserServiceMock&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 降级实现类</span>
<span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="性能优化设计" tabindex="-1"><a class="header-anchor" href="#性能优化设计" aria-hidden="true">#</a> 性能优化设计</h2><h3 id="【困难】dubbo-有哪些性能优化设计" tabindex="-1"><a class="header-anchor" href="#【困难】dubbo-有哪些性能优化设计" aria-hidden="true">#</a> 【困难】Dubbo 有哪些性能优化设计？</h3><p>Dubbo 作为一款高性能的 Java RPC 框架，在性能优化方面做了许多设计，主要包括以下几个方面：</p><p><strong>通信</strong></p><ul><li><strong>Netty NIO 异步通信</strong>：默认使用 Netty 作为通信框架，基于 NIO 实现异步非阻塞通信。</li><li><strong>长连接复用</strong>：避免频繁建立和断开连接的开销。</li><li><strong>支持多种协议</strong>：（Dubbo2、Http2、Thrift等）</li><li><strong>序列化优化</strong>： <ul><li>支持多种高性能序列化协议（Hessian2、Kryo、FST、Protobuf等）</li><li>提供序列化缓存机制</li></ul></li></ul><p><strong>线程模型</strong></p><ul><li><strong>Dispatcher 线程派发策略</strong>：提供多种线程派发策略(all, direct, message, execution, connection)。</li><li><strong>线程池配置</strong>：可配置不同业务使用不同线程池，避免相互影响。</li><li><strong>IO线程与业务线程分离</strong>：Netty的IO线程只负责编解码，业务逻辑交给业务线程池。</li><li><strong>异步调用</strong>：使用<code>CompletableFuture</code>或回调避免线程阻塞，提升吞吐量。</li></ul><p><strong>路由与负载均衡</strong></p><ul><li><strong>支持多种负载均衡算法</strong>：随机(Random)、轮询(RoundRobin)、最少活跃(LeastActive)、一致性哈希(ConsistentHash)等，可以根据业务场景灵活选择。</li><li><strong>服务路由、分组</strong>：可以根据业务模块进行隔离</li><li><strong>服务预热</strong>：新上线的服务提供者逐步增加流量权重</li></ul><p><strong>其他优化</strong></p><ul><li><strong>流量控制</strong>：可以集成 Hystrix/Sentinel，实现限流、熔断、降级。</li><li><strong>参数回调</strong>：支持参数级别的回调，减少不必要的数据传输</li><li><strong>本地存根</strong>：客户端生成服务存根，部分逻辑可在本地执行</li><li><strong>本地伪装</strong>：服务降级时返回本地Mock数据</li><li><strong>动态代理</strong>：支持 JDK 动态代理和 CGLIB 动态代理</li><li><strong>服务引用缓存</strong>：避免重复创建代理对象</li><li><strong>结果缓存</strong>：支持方法级结果缓存，减少重复调用</li></ul><h3 id="【中等】dubbo-如何支持异步调用" tabindex="-1"><a class="header-anchor" href="#【中等】dubbo-如何支持异步调用" aria-hidden="true">#</a> 【中等】Dubbo 如何支持异步调用？</h3><p>建议对耗时超过 100ms 的接口采用异步调用，同时做好超时控制和异常处理。</p><p><strong>不关心返回值异步调用</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 服务接口声明</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>
    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">getUserAsync</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 消费者调用（自动识别Future返回类型）</span>
<span class="token class-name">UserService</span> userService <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
<span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getUserAsync</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 不阻塞主线程，继续其他操作</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>关心返回值异步调用</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 开启异步模式（需配置）</span>
<span class="token class-name">RpcContext</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttachment</span><span class="token punctuation">(</span><span class="token string">&quot;async&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 发起调用（立即返回null）</span>
<span class="token class-name">UserService</span> userService <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
userService<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取Future对象</span>
<span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> <span class="token class-name">RpcContext</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 异步回调</span>
future<span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> exception<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 异常处理</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 使用结果</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注解配置方式</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 服务提供方接口定义</span>
<span class="token annotation punctuation">@DubboService</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderService</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@AsyncFor</span><span class="token punctuation">(</span>interfaceClass <span class="token operator">=</span> <span class="token class-name">OrderService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Order</span><span class="token punctuation">&gt;</span></span> <span class="token function">createOrderAsync</span><span class="token punctuation">(</span><span class="token class-name">OrderReq</span> req<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>配置注意事项</strong></p><p>服务端配置：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>protocol</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dubbo<span class="token punctuation">&quot;</span></span> <span class="token attr-name">threadpool</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cached<span class="token punctuation">&quot;</span></span> <span class="token attr-name">threads</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>200<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>消费者配置：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.example.UserService<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>getUser<span class="token punctuation">&quot;</span></span> <span class="token attr-name">async</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">dubbo:</span>reference</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>性能调优参数：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># 异步线程池配置</span>
<span class="token key attr-name">dubbo.consumer.threadpool</span><span class="token punctuation">=</span><span class="token value attr-value">fixed</span>
<span class="token key attr-name">dubbo.consumer.threads</span><span class="token punctuation">=</span><span class="token value attr-value">50</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>关键特性对比</strong></p><table><thead><tr><th>特性</th><th>同步调用</th><th>异步调用</th></tr></thead><tbody><tr><td><strong>调用方式</strong></td><td>阻塞等待返回结果</td><td>立即返回 Future 对象</td></tr><tr><td><strong>性能</strong></td><td>吞吐量较低</td><td>高吞吐量</td></tr><tr><td><strong>适用场景</strong></td><td>短耗时接口</td><td>长耗时/高并发接口</td></tr></tbody></table><p><strong>实现原理</strong></p><ul><li>基于 Netty 的 NIO 非阻塞通信</li><li>消费方发起请求后立即返回 Future</li><li>服务方处理完成后通过回调通知结果</li></ul><p><strong>适用场景</strong></p><ul><li>高并发且响应时间较长的服务</li><li>需要并行调用多个服务的场景</li><li>不要求严格顺序执行的业务逻辑</li></ul><p><strong>注意事项</strong></p><ul><li>异步方法需返回<code>CompletableFuture</code>类型</li><li>避免在回调中执行阻塞操作</li><li>超时时间需合理设置（建议比同步调用略长）</li></ul><h3 id="【困难】dubbo-中的线程模型是如何设计的" tabindex="-1"><a class="header-anchor" href="#【困难】dubbo-中的线程模型是如何设计的" aria-hidden="true">#</a> 【困难】Dubbo 中的线程模型是如何设计的？</h3><div class="hint-container info"><p class="hint-container-title">Consumer 线程模型</p></div>`,55),O={href:"https://github.com/apache/dubbo/issues/2013",target:"_blank",rel:"noopener noreferrer"},L=e(`<p>改进后的消费端线程池模型，通过复用业务端被阻塞的线程，很好的解决了这个问题。</p><p><strong>老的线程池模型</strong></p><figure><img src="https://cn.dubbo.apache.org/imgs/user/consumer-threadpool0.png" alt="消费端线程池.png" tabindex="0" loading="lazy"><figcaption>消费端线程池.png</figcaption></figure><p>我们重点关注 Consumer 部分：</p><ol><li>业务线程发出请求，拿到一个 <code>Future</code> 实例。</li><li>业务线程紧接着调用 <code>future.get</code> 阻塞等待业务结果返回。</li><li>当业务数据返回后，交由独立的 <code>Consumer</code> 端线程池进行反序列化等处理，并调用 <code>future.set</code> 将反序列化后的业务结果置回。</li><li>业务线程拿到结果直接返回</li></ol><p><strong>当前线程池模型</strong></p><figure><img src="https://cn.dubbo.apache.org/imgs/user/consumer-threadpool1.png" alt="消费端线程池新.png" tabindex="0" loading="lazy"><figcaption>消费端线程池新.png</figcaption></figure><ol><li>业务线程发出请求，拿到一个 <code>Future</code> 实例。</li><li>在调用 <code>future.get()</code> 之前，先调用 <code>ThreadlessExecutor.wait()</code>，<code>wait</code> 会使业务线程在一个阻塞队列上等待，直到队列中被加入元素。</li><li>当业务数据返回后，生成一个 <code>Runnable Task</code> 并放入 <code>ThreadlessExecutor</code> 队列</li><li>业务线程将 <code>Task</code> 取出并在本线程中执行：反序列化业务数据并 <code>set</code> 到 <code>Future</code>。</li><li>业务线程拿到结果直接返回</li></ol><p>这样，相比于老的线程池模型，由业务线程自己负责监测并解析返回结果，免去了额外的消费端线程池开销。</p><div class="hint-container info"><p class="hint-container-title">Provider 线程模型</p></div><p>Dubbo 协议的和 Triple 协议目前的线程模型还并没有对齐。</p><p>Dubbo 对 channel 上的操作抽象成了五种行为：</p><ul><li><strong>建立连接（connected）</strong> - 主要是的职责是在 channel 记录 read、write 的时间，以及处理建立连接后的回调逻辑，比如 dubbo 支持在断开后自定义回调的 hook（onconnect），即在该操作中执行。</li><li><strong>断开连接（disconnected）</strong> - 主要是的职责是在 channel 移除 read、write 的时间，以及处理端开连接后的回调逻辑，比如 dubbo 支持在断开后自定义回调的 hook（ondisconnect），即在该操作中执行。</li><li><strong>发送消息（sent）</strong> - 包括发送请求和发送响应。记录 write 的时间。</li><li><strong>接收消息（received）</strong> - 包括接收请求和接收响应。记录 read 的时间。</li><li><strong>异常捕获（caught）</strong> - 用于处理在 channel 上发生的各类异常。</li></ul><p>Dubbo 框架的线程模型与以上这五种行为息息相关，Dubbo 协议 Provider 线程模型可以分为五类，也就是 AllDispatcher、DirectDispatcher、MessageOnlyDispatcher、ExecutionDispatcher、ConnectionOrderedDispatcher。</p><p><strong>All Dispatcher</strong></p><p>所有消息都派发到 Dubbo 线程池。</p><figure><img src="https://cn.dubbo.apache.org/imgs/v3/feature/performance/threading-model/dubbo-provider-alldispatcher.png" alt="dubbo-provider-alldispatcher" tabindex="0" loading="lazy"><figcaption>dubbo-provider-alldispatcher</figcaption></figure><p>在 IO 线程中执行的操作有：</p><ol><li><code>sent</code> 操作在 IO 线程上执行。</li><li>序列化响应在 IO 线程上执行。</li></ol><p>在 Dubbo 线程中执行的操作有：</p><ol><li><code>received</code>、<code>connected</code>、<code>disconnected</code>、<code>caught</code> 都是在 Dubbo 线程上执行的。</li><li>反序列化请求的行为在 Dubbo 中做的。</li></ol><p><strong>Direct Dispatcher</strong></p><p>所有消息都不派发到 Dubbo 线程池，全部在 IO 线程上直接执行。</p><figure><img src="https://cn.dubbo.apache.org/imgs/v3/feature/performance/threading-model/dubbo-provider-directDispatcher.png" alt="dubbo-provider-directDispatcher" tabindex="0" loading="lazy"><figcaption>dubbo-provider-directDispatcher</figcaption></figure><p>在 IO 线程中执行的操作有：</p><ol><li><code>received</code>、<code>connected</code>、<code>disconnected</code>、<code>caught</code>、<code>sent</code> 操作在 IO 线程上执行。</li><li>反序列化请求和序列化响应在 IO 线程上执行。</li></ol><p>并没有在 Dubbo 线程操作的行为。</p><p><strong>Execution Dispatcher</strong></p><p>只有请求消息派发到 Dubbo 线程池，不含响应，响应和其它连接断开事件，心跳等消息，直接在 IO 线程上执行。</p><figure><img src="https://cn.dubbo.apache.org/imgs/v3/feature/performance/threading-model/dubbo-provider-executionDispatcher.png" alt="dubbo-provider-ExecutionDispatcher" tabindex="0" loading="lazy"><figcaption>dubbo-provider-ExecutionDispatcher</figcaption></figure><p>在 IO 线程中执行的操作有：</p><ol><li><code>sent</code>、<code>connected</code>、<code>disconnected</code>、<code>caught</code> 操作在 IO 线程上执行。</li><li>序列化响应在 IO 线程上执行。</li></ol><p>在 Dubbo 线程中执行的操作有：</p><ol><li><code>received</code> 都是在 Dubbo 线程上执行的。</li><li>反序列化请求的行为在 Dubbo 中做的。</li></ol><p><strong>Message Only Dispatcher</strong></p><p>在 Provider 端，Message Only Dispatcher 和 Execution Dispatcher 的线程模型是一致的，所以下图和 Execution Dispatcher 的图一致，区别在 Consumer 端。见下方 Consumer 端的线程模型。</p><figure><img src="https://cn.dubbo.apache.org/imgs/v3/feature/performance/threading-model/dubbo-provider-executionDispatcher.png" alt="dubbo-provider-ExecutionDispatcher" tabindex="0" loading="lazy"><figcaption>dubbo-provider-ExecutionDispatcher</figcaption></figure><p>在 IO 线程中执行的操作有：</p><ol><li><code>sent</code>、<code>connected</code>、<code>disconnected</code>、<code>caught</code> 操作在 IO 线程上执行。</li><li>序列化响应在 IO 线程上执行。</li></ol><p>在 Dubbo 线程中执行的操作有：</p><ol><li><code>received</code> 都是在 Dubbo 线程上执行的。</li><li>反序列化请求的行为在 Dubbo 中做的。</li></ol><p><strong>Connection Ordered Dispatcher</strong></p><figure><img src="https://cn.dubbo.apache.org/imgs/v3/feature/performance/threading-model/dubbbo-provider-connectionOrderedDispatcher.png" alt="dubbbo-provider-connectionOrderedDispatcher" tabindex="0" loading="lazy"><figcaption>dubbbo-provider-connectionOrderedDispatcher</figcaption></figure><p>在 IO 线程中执行的操作有：</p><ol><li><code>sent</code> 操作在 IO 线程上执行。</li><li>序列化响应在 IO 线程上执行。</li></ol><p>在 Dubbo 线程中执行的操作有：</p><ol><li><code>received</code>、<code>connected</code>、<code>disconnected</code>、<code>caught</code> 都是在 Dubbo 线程上执行的。但是 <code>connected</code> 和 <code>disconnected</code> 两个行为是与其他两个行为通过线程池隔离开的。并且在 Dubbo connected thread pool 中提供了链接限制、告警灯能力。</li><li>反序列化请求的行为在 Dubbo 中做的。</li></ol><h3 id="【中等】dubbo-中的连接数过多如何处理" tabindex="-1"><a class="header-anchor" href="#【中等】dubbo-中的连接数过多如何处理" aria-hidden="true">#</a> 【中等】Dubbo 中的连接数过多如何处理？</h3><p><strong>核心优化手段</strong></p><table><thead><tr><th>方法</th><th>配置示例</th><th>作用</th></tr></thead><tbody><tr><td><strong>限制最大连接数</strong></td><td><code>&lt;dubbo:protocol accepts=&quot;100&quot;/&gt;</code></td><td>防止服务端过载</td></tr><tr><td><strong>共享连接池</strong></td><td><code>&lt;dubbo:protocol threadpool=&quot;cached&quot;/&gt;</code></td><td>提高连接复用率</td></tr><tr><td><strong>连接数控制</strong></td><td><code>&lt;dubbo:reference connections=&quot;10&quot;/&gt;</code></td><td>限制单服务连接数</td></tr><tr><td><strong>超时设置</strong></td><td><code>&lt;dubbo:reference timeout=&quot;3000&quot;/&gt;</code></td><td>避免僵死连接</td></tr><tr><td><strong>重试策略</strong></td><td><code>&lt;dubbo:reference retries=&quot;2&quot;/&gt;</code></td><td>控制失败重试次数</td></tr></tbody></table><p><strong>关键配置详解</strong></p><p>（1）<strong>服务端配置</strong></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 限制单服务最大连接数 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>protocol</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dubbo<span class="token punctuation">&quot;</span></span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>20880<span class="token punctuation">&quot;</span></span> <span class="token attr-name">accepts</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>200<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token comment">&lt;!-- 设置 IO 线程数 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>protocol</span> <span class="token attr-name">threads</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>50<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）<strong>客户端配置</strong></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 限制单服务连接数 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.xx.Service<span class="token punctuation">&quot;</span></span> <span class="token attr-name">connections</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>5<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token comment">&lt;!-- 设置连接超时 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span> <span class="token attr-name">timeout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>2000<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>高级优化方案</strong></p><ul><li><p><strong>连接池选择</strong></p><ul><li>默认使用 Netty 连接池</li><li>可集成第三方连接池（如 HikariCP）</li></ul></li><li><p><strong>动态调整策略</strong></p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 运行时动态调整连接数</span>
<span class="token class-name">ReferenceConfig</span><span class="token punctuation">.</span><span class="token function">cacheConnections</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>熔断保护</strong></li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span> <span class="token attr-name">cluster</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>failfast<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>监控与治理</strong></p><table><thead><tr><th>工具</th><th>功能</th></tr></thead><tbody><tr><td><strong>Dubbo-Admin</strong></td><td>实时监控连接数</td></tr><tr><td><strong>Prometheus+Grafana</strong></td><td>可视化监控</td></tr><tr><td><strong>Skywalking</strong></td><td>调用链分析</td></tr></tbody></table><p><strong>最佳实践建议</strong></p><ul><li><p><strong>生产环境配置</strong></p><ul><li>服务端 accepts=CPU 核心数、*2</li><li>客户端 connections=2~5</li><li>超时时间≥3000ms</li></ul></li><li><p><strong>异常处理</strong></p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    service<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RpcException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">isTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 超时处理</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>压测建议</strong><ul><li>使用 JMeter 模拟高并发</li><li>逐步增加连接数观察性能拐点</li></ul></li></ul><p><strong>典型问题排查流程</strong>：</p><ol><li>监控发现连接数异常</li><li>分析调用链路定位问题服务</li><li>调整连接池参数</li><li>增加服务实例水平扩展</li></ol><h3 id="【困难】dubbo-中的时钟轮机制是如何设计的" tabindex="-1"><a class="header-anchor" href="#【困难】dubbo-中的时钟轮机制是如何设计的" aria-hidden="true">#</a> 【困难】Dubbo 中的时钟轮机制是如何设计的？</h3><div class="hint-container info"><p class="hint-container-title">JDK 中定时任务的实现</p></div><p>在很多开源框架中，都需要定时任务的管理功能，例如 ZooKeeper、Netty、Quartz、Kafka 以及 Linux 操作系统。</p><p>定时器的本质是设计一种数据结构，能够存储和调度任务集合，而且 deadline 越近的任务拥有更高的优先级。那么定时器如何知道一个任务是否到期了呢？定时器需要通过轮询的方式来实现，每隔一个时间片去检查任务是否到期。</p><p>所以定时器的内部结构一般需要一个任务队列和一个异步轮询线程，并且能够提供三种基本操作：</p><ul><li>Schedule 新增任务至任务集合；</li><li>Cancel 取消某个任务；</li><li>Run 执行到期的任务。</li></ul><p>JDK 原生提供了三种常用的定时器实现方式，分别为 <code>Timer</code>、<code>DelayedQueue</code> 和 <code>ScheduledThreadPoolExecutor</code>。</p><p>JDK 内置的三种实现定时器的方式，实现思路都非常相似，都离不开<strong>任务</strong>、<strong>任务管理</strong>、<strong>任务调度</strong>三个角色。三种定时器新增和取消任务的时间复杂度都是 <code>O(logn)</code>，面对海量任务插入和删除的场景，这三种定时器都会遇到比较严重的性能瓶颈。</p>`,76),A=n("strong",null,"对于性能要求较高的场景，一般都会采用时间轮算法来实现定时器",-1),E={href:"https://www.cse.wustl.edu/~cdgill/courses/cs6874/TimingWheels.ppt",target:"_blank",rel:"noopener noreferrer"},M=e('<div class="hint-container info"><p class="hint-container-title">时间轮的基本原理</p></div><p><strong>时间轮是一种高效的、批量管理定时任务的调度模型</strong>。时间轮可以理解为一种环形结构，像钟表一样被分为多个 slot 槽位。每个 slot 代表一个时间段，每个 slot 中可以存放多个任务，使用的是链表结构保存该时间段到期的所有任务。时间轮通过一个时针随着时间一个个 slot 转动，并执行 slot 中的所有到期任务。</p><figure><img src="https://learn.lianglianglee.com/专栏/Netty 核心原理剖析与 RPC 实践-完/assets/CgpVE1_okKiAGl0gAAMLshtTq-M933.png" alt="图片 22.png" tabindex="0" loading="lazy"><figcaption>图片 22.png</figcaption></figure><p>任务是如何添加到时间轮当中的呢？可以根据任务的到期时间进行取模，然后将任务分布到不同的 slot 中。如上图所示，时间轮被划分为 8 个 slot，每个 slot 代表 1s，当前时针指向 2。假如现在需要调度一个 3s 后执行的任务，应该加入 <code>2+3=5</code> 的 slot 中；如果需要调度一个 12s 以后的任务，需要等待时针完整走完一圈 round 零 4 个 slot，需要放入第 <code>(2+12)%8=6</code> 个 slot。</p><p>那么当时针走到第 6 个 slot 时，怎么区分每个任务是否需要立即执行，还是需要等待下一圈，甚至更久时间之后执行呢？所以我们需要把 round 信息保存在任务中。例如图中第 6 个 slot 的链表中包含 3 个任务，第一个任务 round=0，需要立即执行；第二个任务 round=1，需要等待 <code>1*8=8s</code> 后执行；第三个任务 round=2，需要等待 <code>2*8=8s</code> 后执行。所以当时针转动到对应 slot 时，只执行 round=0 的任务，slot 中其余任务的 round 应当减 1，等待下一个 round 之后执行。</p><p>上面介绍了时间轮算法的基本理论，可以看出时间轮有点类似 HashMap，如果多个任务如果对应同一个 slot，处理冲突的方法采用的是拉链法。在任务数量比较多的场景下，适当增加时间轮的 slot 数量，可以减少时针转动时遍历的任务个数。</p><p>时间轮定时器最大的优势就是，任务的新增和取消都是 <code>O(1)</code> 时间复杂度，而且只需要一个线程就可以驱动时间轮进行工作。</p><div class="hint-container info"><p class="hint-container-title">Dubbo 中的时间轮</p></div><p><code>org.apache.dubbo.common.timer.HashedWheelTimer</code> 是 Dubbo 中时间轮的算法实现。它主要应用于以下方面：</p><ul><li><strong>失败重试，</strong> 例如，Provider 向注册中心进行注册失败时的重试操作，或是 Consumer 向注册中心订阅时的失败重试等。</li><li><strong>周期性定时任务，</strong> 例如，定期发送心跳请求，请求超时的处理，或是网络连接断开后的重连机制。</li></ul><h2 id="扩展性设计" tabindex="-1"><a class="header-anchor" href="#扩展性设计" aria-hidden="true">#</a> 扩展性设计</h2><h3 id="【困难】dubbo-架构是如何实现高度可扩展的" tabindex="-1"><a class="header-anchor" href="#【困难】dubbo-架构是如何实现高度可扩展的" aria-hidden="true">#</a> 【困难】Dubbo 架构是如何实现高度可扩展的？</h3><div class="hint-container info"><p class="hint-container-title">微内核+插件架构</p></div><p>Dubbo 的架构设计采用<strong>微内核+插件</strong>架构，高度支持可扩展。</p><p>基于扩展点，用户完全可以基于自身需求，替换 Dubbo 原生实现，来满足自身业务需求。</p><figure><img src="https://cn.dubbo.apache.org/imgs/v3/advantages/extensibility.png" alt="Admin 效果图" tabindex="0" loading="lazy"><figcaption>Admin 效果图</figcaption></figure><ul><li><strong>协议与编码扩展</strong>。通信协议、序列化编码协议等</li><li><strong>流量管控扩展</strong>。集群容错策略、路由规则、负载均衡、限流降级、熔断策略等</li><li><strong>服务治理扩展</strong>。注册中心、配置中心、元数据中心、分布式事务、全链路追踪、监控系统等</li><li><strong>诊断与调优扩展</strong>。流量统计、线程池策略、日志、QoS 运维命令、健康检查、配置加载等</li></ul><div class="hint-container info"><p class="hint-container-title">基于扩展的生态</p></div><p>Dubbo 调用链路中几乎所有核心节点都被定义为扩展点。</p><figure><img src="https://cn.dubbo.apache.org/imgs/v3/feature/extensibility/arc.png" alt="extensibility-echosystem.png" tabindex="0" loading="lazy"><figcaption>extensibility-echosystem.png</figcaption></figure><p>以上是按架构层次划分的 Dubbo 内的一些核心扩展点定义及实现，可以从三个层次来展开：</p><p><strong>（1）协议通信层</strong></p><ul><li><strong>Protocol</strong> - Protocol 定义了 RPC 协议，利用这个扩展点可以实现灵活切换通信协议。Dubbo 官方提供了 Triple、gRPC、Dubbo2、REST 等 RPC 协议。</li><li><strong>Serialization</strong> - Serialization 定义了序列化协议，利用这个扩展点可以实现灵活切换序列化协议。Dubbo 官方提供了 Fastjson、Protobuf、Hessian2、Kryo、FST 等序列化协议。</li></ul><figure><img src="https://cn.dubbo.apache.org/imgs/v3/feature/extensibility/protocol.png" alt="协议与编码原理图" tabindex="0" loading="lazy"><figcaption>协议与编码原理图</figcaption></figure><p><strong>（2）流量管控层</strong></p><p>Dubbo 在服务调用链路上预置了大量扩展点，通过这些扩展点用户可以控制运行态的流量走向、改变运行时调用行为等，包括 Dubbo 内置的一些负载均衡策略、流量路由策略、超时等很多流量管控能力都是通过这类扩展点实现的。</p><figure><img src="https://cn.dubbo.apache.org/imgs/v3/feature/extensibility/traffic.png" alt="协议与编码原理图" tabindex="0" loading="lazy"><figcaption>协议与编码原理图</figcaption></figure><ul><li><strong>Filter</strong> - Filter 流量拦截器是 Dubbo 服务调用之上的 AOP 设计模式，Filter 用来对每次服务调用做一些预处理、后处理动作，使用 Filter 可以完成访问日志、加解密、流量统计、参数验证等任务，Dubbo 中的很多生态适配如限流降级 Sentinel、全链路追踪 Tracing 等都是通过 Fitler 扩展实现的。Filter 以链式串联工作，彼此独立。 <ul><li>从消费端视角，它在请求发起前基于请求参数等做一些预处理工作，在接收到响应后，对响应结果做一些后置处理；</li><li>从提供者视角则，在接收到访问请求后，在返回响应结果前做一些预处理，</li></ul></li><li><strong>Router</strong> - Router 将符合一定条件的流量转发到特定分组的地址子集，是 Dubbo 中一些关键能力如按比例流量转发、流量隔离等的基础。每次服务调用请求都会流经一组路由器 （路由链），每个路由器根据预先设定好的规则、全量地址列表以及当前请求上下文计算出一个地址子集，再传给下一个路由器，重复这一过程直到最后得出一个有效的地址子集。</li><li><strong>Load Balance</strong> - 在 Dubbo 中，Load Balance 负载均衡工作在 Router 之后，对于每次服务调用，负载均衡负责在 Router 链输出的地址子集中选择一台机器实例进行访问，保证一段时间内的调用都均匀的分布在地址子集的所有机器上。Dubbo 官方提供了加权随机、加权轮询、一致性哈希、最小活跃度优先、最短响应时间优先等负载均衡策略，还提供了根据集群负载自适应调度的负载均衡算法。</li></ul><p><strong>（3）服务治理层</strong></p><p>Dubbo3 由注册中心 （服务发现）、配置中心和元数据中心构成了整个服务治理的核心。</p><figure><img src="https://cn.dubbo.apache.org/imgs/v3/concepts/threecenters.png" alt="服务治理架构图" tabindex="0" loading="lazy"><figcaption>服务治理架构图</figcaption></figure><p>Dubbo 很多服务治理的核心能力都是通过上图描述的几个关键组件实现的。用户通过控制面或者 Admin 下发的各种规则与配置、各类微服务集群状态的展示等都是直接与注册中心、配置中心和元数据中心交互。在具体实现或者部署上，注册中心、配置中心和元数据中心可以是同一组件，比如 Zookeeper 可同时作为注册、配置和元数据中心，Nacos 也是如此。因此，三个中心只是从架构职责上的划分，你甚至可以用同一个 Zookeeper 集群来承担所有三个职责，只需要在应用里将他们设置为同一个集群地址就可以了。</p><ul><li><strong>Registry</strong> - <strong>注册中心是 Dubbo 实现服务发现能力的基础</strong>。Dubbo 官方支持 Zookeeper、Nacos、Etcd、Consul、Eureka 等注册中心。通过对 Consul、Eureka 的支持，Dubbo 也实现了与 Spring Cloud 体系在地址和通信层面的互通，让用户同时部署 Dubbo 与 Spring Cloud，或者从 Spring Cloud 迁移到 Dubbo 变得更容易。</li><li><strong>Config Center</strong> - <strong>配置中心是用户实现动态控制 Dubbo 行为的关键组件</strong>。Dubbo 所有的路由规则，都是先下发到配置中心保存起来，进而 Dubbo 实例通过监听配置中心的变化，收到路由规则并达到控制流量的行为。Dubbo 官方支持 Zookeeper、Nacos、Etcd、Redis、Apollo 等配置中心实现。</li><li><strong>Metadata Center</strong> - 与配置中心相反，从用户视角来看元数据中心是只读的，元数据中心唯一的写入方是 Dubbo 进程实例，Dubbo 实例会在启动之后将一些内部状态（如服务列表、服务配置、服务定义格式等）上报到元数据中心，供一些治理能力作为数据来源，如服务测试、文档管理、服务状态展示等。Dubbo 官方支持 Zookeeper、Nacos、Etcd、Redis 等元数据中心实现。</li></ul>',33),J={href:"https://cn.dubbo.apache.org/zh-cn/overview/what/core-features/extensibility/",target:"_blank",rel:"noopener noreferrer"},N=e(`<h3 id="【中等】如何自定义一个-dubbo-的-spi-扩展" tabindex="-1"><a class="header-anchor" href="#【中等】如何自定义一个-dubbo-的-spi-扩展" aria-hidden="true">#</a> 【中等】如何自定义一个 Dubbo 的 SPI 扩展？</h3><p><strong>核心开发步骤</strong></p><p>（1）<strong>定义SPI接口</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SPI</span><span class="token punctuation">(</span><span class="token string">&quot;default&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// 指定默认实现</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyFilter</span> <span class="token punctuation">{</span>
    <span class="token class-name">Result</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">Invoker</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> invoker<span class="token punctuation">,</span> <span class="token class-name">Invocation</span> invocation<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）<strong>实现扩展类</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogFilter</span> <span class="token keyword">implements</span> <span class="token class-name">MyFilter</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">Invoker</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> invoker<span class="token punctuation">,</span> <span class="token class-name">Invocation</span> invocation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Before invocation&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> invoker<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>invocation<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（3）<strong>注册扩展实现</strong></p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">--</span> <span class="token value attr-value">文件位置：META-INF/dubbo/com.xxx.MyFilter</span>
<span class="token key attr-name">log</span><span class="token punctuation">=</span><span class="token value attr-value">com.xxx.LogFilter</span>
<span class="token key attr-name">cache</span><span class="token punctuation">=</span><span class="token value attr-value">com.xxx.CacheFilter</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（4）<strong>加载使用扩展</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">MyFilter</span> filter <span class="token operator">=</span> <span class="token class-name">ExtensionLoader</span>
    <span class="token punctuation">.</span><span class="token function">getExtensionLoader</span><span class="token punctuation">(</span><span class="token class-name">MyFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">getExtension</span><span class="token punctuation">(</span><span class="token string">&quot;log&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 指定扩展名</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>高级特性</strong></p><table><thead><tr><th>特性</th><th>实现方式</th><th>应用场景</th></tr></thead><tbody><tr><td><strong>自适应扩展</strong></td><td><code>@Adaptive</code>注解方法/类</td><td>运行时动态选择实现</td></tr><tr><td><strong>自动激活</strong></td><td><code>@Activate(group={&quot;provider&quot;}, order=1)</code></td><td>根据条件自动激活扩展</td></tr><tr><td><strong>Wrapper类</strong></td><td>实现类构造函数包含扩展接口参数</td><td>AOP增强</td></tr></tbody></table><p><strong>关键注解详解</strong></p><ul><li><strong>@SPI</strong></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SPI</span><span class="token punctuation">(</span><span class="token string">&quot;netty&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// 默认实现</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Transporter</span> <span class="token punctuation">{</span>
    <span class="token class-name">Server</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token class-name">URL</span> url<span class="token punctuation">,</span> <span class="token class-name">ChannelHandler</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>@Adaptive</strong></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 方法级适配</span>
<span class="token annotation punctuation">@Adaptive</span><span class="token punctuation">(</span><span class="token string">&quot;transport&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Transporter</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Adaptive</span>
    <span class="token class-name">Server</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token class-name">URL</span> url<span class="token punctuation">,</span> <span class="token class-name">ChannelHandler</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>@Activate</strong></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Activate</span><span class="token punctuation">(</span>group <span class="token operator">=</span> <span class="token string">&quot;consumer&quot;</span><span class="token punctuation">,</span> order <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TokenFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>
    <span class="token comment">// 消费者端自动激活</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>典型扩展点</strong></p><ul><li><strong>协议扩展</strong> (<code>Protocol</code>)</li><li><strong>过滤器扩展</strong> (<code>Filter</code>)</li><li><strong>负载均衡扩展</strong> (<code>LoadBalance</code>)</li><li><strong>序列化扩展</strong> (<code>Serialization</code>)</li></ul><p><strong>最佳实践</strong></p><ul><li><p><strong>配置建议</strong></p><ul><li>扩展点命名全小写，多个单词用<code>.</code>分隔</li><li>每个扩展点单独建立配置文件</li></ul></li><li><p><strong>调试技巧</strong></p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 查看所有已注册扩展</span>
<span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> exts <span class="token operator">=</span> <span class="token class-name">ExtensionLoader</span>
    <span class="token punctuation">.</span><span class="token function">getExtensionLoader</span><span class="token punctuation">(</span><span class="token class-name">MyFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">getSupportedExtensions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>注意事项</strong><ul><li>避免扩展类循环依赖</li><li>线程安全需自行保证</li><li>生产环境建议禁用动态编译（<code>-Ddubbo.compiler.disable=true</code>）</li></ul></li></ul><p><strong>示例项目结构</strong>：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>src
├── main
│   ├── java
│   │   └── com
│   │       └── xxx
│   │           ├── MyFilter.java
│   │           └── filter
│   │               ├── LogFilter.java
│   │               └── CacheFilter.java
│   └── resources
│       └── META-INF
│           └── dubbo
│               └── com.xxx.MyFilter
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="【困难】dubbo-的-spi-机制是如何设计的" tabindex="-1"><a class="header-anchor" href="#【困难】dubbo-的-spi-机制是如何设计的" aria-hidden="true">#</a> 【困难】Dubbo 的 SPI 机制是如何设计的？</h3><p><strong>SPI</strong> 全称 Service Provider Interface，<strong>旨在由第三方实现或扩展的 API，它是一种用于动态加载服务的机制</strong>。SPI 的本质是<strong>将接口实现类的全限定名配置在文件中，并由服务加载器读取配置文件，加载实现类</strong>。这样可以在运行时，动态为接口替换实现类。</p><p>Java 中提供了 SPI 机制，但是由于存在一些不足，Dubbo 自行实现了一套 Dubbo SPI 机制。</p><div class="hint-container info"><p class="hint-container-title">Java SPI</p></div><p>Java 中 SPI 机制主要思想是将装配的控制权移到程序之外，在模块化设计中这个机制尤其重要，其核心思想就是 <strong>解耦</strong>。</p><p>Java SPI 有四个要素：</p><ul><li><strong>SPI 接口</strong>：为服务提供者实现类约定的的接口或抽象类。</li><li><strong>SPI 实现类</strong>：实际提供服务的实现类。</li><li><strong>SPI 配置</strong>：Java SPI 机制约定的配置文件，提供查找服务实现类的逻辑。配置文件必须置于 <code>META-INF/services</code> 目录中，并且，文件名应与服务提供者接口的完全限定名保持一致。文件中的每一行都有一个实现服务类的详细信息，同样是服务提供者类的完全限定名称。</li><li><strong><code>ServiceLoader</code></strong>：Java SPI 的核心类，用于加载 SPI 实现类。 <code>ServiceLoader</code> 中有各种实用方法来获取特定实现、迭代它们或重新加载服务。</li></ul><p>Java SPI 存在一些不足：</p><ul><li><strong>不能按需加载</strong>，需要遍历所有的实现并实例化，然后在循环中才能找到我们需要的实现。如果不想用某些实现类，或者某些类实例化很耗时，它也被载入并实例化了，这就造成了浪费。</li><li>获取某个实现类的方式不够灵活，<strong>只能通过 <code>Iterator</code> 形式获取</strong>，不能根据某个参数来获取对应的实现类。</li><li>并发多线程使用 <code>ServiceLoader</code> 类的实例是<strong>不安全</strong>的。</li></ul><div class="hint-container info"><p class="hint-container-title">Dubbo SPI</p></div><p>正是有 Java SPI 存在以上不足点，Dubbo 并未使用 Java 原生的 SPI 机制，而是对其进行了增强，使其能够更好的满足需求。在 Dubbo 中，SPI 是一个非常重要的模块。基于 SPI，我们可以很容易的对 Dubbo 进行拓展。</p><p>Dubbo SPI 所需的配置文件需放置在 <code>META-INF/dubbo</code> 路径下。配置内容形式如下：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">optimusPrime</span> <span class="token punctuation">=</span> <span class="token value attr-value">org.apache.spi.OptimusPrime</span>
<span class="token key attr-name">bumblebee</span> <span class="token punctuation">=</span> <span class="token value attr-value">org.apache.spi.Bumblebee</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>与 Java SPI 实现类配置不同，Dubbo SPI 是<strong>通过键值对的方式进行配置</strong>，这样可以<strong>按需加载</strong>指定的实现类。Dubbo SPI 除了支持按需加载接口实现类，还增加了 IOC 和 AOP 等特性。</p><p>Dubbo SPI 的相关逻辑被封装在了 <code>ExtensionLoader</code> 类中，通过 <code>ExtensionLoader</code>，可以加载指定的实现类。<code>ExtensionLoader</code> 的 <code>getExtension</code> 方法是其入口方法。</p>`,42),z=n("p",null,"扩展阅读：",-1),B={href:"https://cn.dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/spi/overview/",target:"_blank",rel:"noopener noreferrer"},H={href:"https://dunwu.github.io/waterdrop/pages/beda0f54/",target:"_blank",rel:"noopener noreferrer"},U=n("h3",{id:"【中等】什么是-dubbo-的-filter-机制",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#【中等】什么是-dubbo-的-filter-机制","aria-hidden":"true"},"#"),s(" 【中等】什么是 Dubbo 的 Filter 机制？")],-1),G=n("p",null,[s("Filter 是 Dubbo 的核心扩展点之一，通过拦截 RPC 调用实现横切逻辑（如日志、鉴权、监控），其设计遵循 "),n("strong",null,"责任链模式"),s("，与 Spring AOP 理念相似但更轻量级。")],-1),K=n("p",null,"通过 Filter 机制，Dubbo 实现了业务逻辑与横切关注点的解耦，结合 SPI 扩展能力，可灵活适应各类微服务治理需求。",-1),W=n("p",null,[n("strong",null,"核心工作原理")],-1),Z=n("ul",null,[n("li",null,[n("strong",null,"拦截链路"),s("：请求和响应会依次通过所有激活的 Filter，形成双向处理链。")])],-1),V=e(`<ul><li>每个 Filter 可通过 <code>invoker.invoke()</code> 决定是否继续传递或中断调用。</li><li><strong>内置 Filter</strong>： Dubbo 默认包含多个 Filter（如 <code>ActiveLimitFilter</code> 限流、<code>TokenFilter</code> 鉴权），可通过 <code>&lt;dubbo:provider filter=&quot;-default&quot; /&gt;</code> 禁用默认链。</li></ul><p><strong>自定义 Filter 开发</strong></p><p>步骤 1：实现 Filter 接口</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Activate</span><span class="token punctuation">(</span>group <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">PROVIDER</span><span class="token punctuation">,</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">CONSUMER</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 自动激活条件</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TraceIdFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Invoker</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> invoker<span class="token punctuation">,</span> <span class="token class-name">Invocation</span> invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RpcException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 请求前：生成TraceID</span>
        <span class="token class-name">String</span> traceId <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">RpcContext</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttachment</span><span class="token punctuation">(</span><span class="token string">&quot;traceId&quot;</span><span class="token punctuation">,</span> traceId<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[TRACE] Start call %s#%s, traceId=%s\\n&quot;</span><span class="token punctuation">,</span>
                invoker<span class="token punctuation">.</span><span class="token function">getInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                invocation<span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                traceId<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 执行后续调用链</span>
            <span class="token class-name">Result</span> result <span class="token operator">=</span> invoker<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>invocation<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 响应后：记录耗时</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[TRACE] End call, traceId=%s, cost=%dms\\n&quot;</span><span class="token punctuation">,</span>
                traceId<span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> result<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 异常处理</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[TRACE] Call failed, traceId=%s, error=%s\\n&quot;</span><span class="token punctuation">,</span> traceId<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>步骤 2：注册 Filter</p><ul><li>方式1：SPI 自动加载<br> 在 <code>META-INF/dubbo/com.alibaba.dubbo.rpc.Filter</code> 文件中添加：</li></ul><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">traceIdFilter</span><span class="token punctuation">=</span><span class="token value attr-value">com.your.package.TraceIdFilter</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>方式2：XML 显式配置</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 全局生效 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>provider</span> <span class="token attr-name">filter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>traceIdFilter<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>consumer</span> <span class="token attr-name">filter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>traceIdFilter<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">&lt;!-- 单个服务生效 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>service</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.example.UserService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">filter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>traceIdFilter<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>高级配置技巧</strong></p><ul><li><strong>Filter 执行顺序</strong>：通过 <code>@Activate(order = -100)</code> 指定优先级（值越小越早执行）。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Activate</span><span class="token punctuation">(</span>order <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">,</span> group <span class="token operator">=</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">PROVIDER</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>条件生效</strong>：使用 <code>@Activate</code> 的 <code>group</code> 和 <code>value</code> 参数控制生效场景：</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 仅当消费者指定参数validation=true时激活</span>
<span class="token annotation punctuation">@Activate</span><span class="token punctuation">(</span>group <span class="token operator">=</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">CONSUMER</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">&quot;validation&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValidationFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>异步支持</strong>：Filter 默认兼容异步调用（如 <code>CompletableFuture</code>），可通过 <code>RpcContext.isAsync()</code> 判断当前调用模式。</li></ul><p><strong>典型应用场景</strong></p><table><thead><tr><th><strong>场景</strong></th><th><strong>实现方案</strong></th><th><strong>相关 Filter</strong></th></tr></thead><tbody><tr><td><strong>分布式链路追踪</strong></td><td>透传 TraceID 和 SpanID</td><td>自定义 TraceIdFilter</td></tr><tr><td><strong>接口鉴权</strong></td><td>校验 RpcContext 中的 Token</td><td>AuthFilter + TokenManager</td></tr><tr><td><strong>限流熔断</strong></td><td>统计 QPS 并触发限流逻辑</td><td>结合 Sentinel/Dubbo 限流插件</td></tr><tr><td><strong>参数校验</strong></td><td>使用 JSR-303 校验方法参数</td><td>ValidationFilter</td></tr><tr><td><strong>日志脱敏</strong></td><td>拦截请求/响应数据，过滤敏感字段</td><td>SensitiveDataFilter</td></tr></tbody></table><p><strong>常见问题排查</strong></p><ul><li><strong>Filter 未生效</strong><ul><li>检查是否配置了 <code>&lt;dubbo:provider filter=&quot;-default&quot; /&gt;</code> 覆盖了默认链。</li><li>确认 SPI 文件路径和内容是否正确。</li></ul></li><li><strong>执行顺序异常</strong>：通过 <code>@Activate(order=1)</code> 显式指定优先级，避免依赖默认顺序。</li><li><strong>性能瓶颈</strong>：避免在 Filter 中执行阻塞 IO 操作，异步场景推荐使用 <code>CompletableFuture</code>。</li></ul><p><strong>最佳实践</strong></p><ul><li><strong>生产建议</strong>： <ul><li>为关键 Filter 添加 <code>@SPI</code> 注解，支持动态替换实现。</li><li>使用 <code>RpcContext.getContext().get()</code> 传递跨调用参数，而非 ThreadLocal。</li></ul></li><li><strong>调试技巧</strong>： <ul><li>启用 Dubbo QOS（<code>telnet 127.0.0.1 22222</code>）实时查看 Filter 链：</li></ul></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token function">ls</span> filter
traceIdFilter
authFilter
<span class="token operator">&gt;</span> invoke traceIdFilter status
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="分布式特性" tabindex="-1"><a class="header-anchor" href="#分布式特性" aria-hidden="true">#</a> 分布式特性</h2><h3 id="【困难】dubbo-中如何实现分布式事务" tabindex="-1"><a class="header-anchor" href="#【困难】dubbo-中如何实现分布式事务" aria-hidden="true">#</a> 【困难】Dubbo 中如何实现分布式事务？</h3><p>在 Dubbo 分布式系统中实现事务，主要面临跨服务数据一致性问题。以下是主流解决方案：</p><p><strong>事务消息</strong></p><p><strong>适用场景</strong>：异步解耦场景（如订单创建后通知库存）</p>`,27),Q=e(`<p><strong>实现步骤</strong>：</p><ol><li>集成 RocketMQ 事务消息</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 订单服务</span>
<span class="token class-name">TransactionMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransactionMQProducer</span><span class="token punctuation">(</span><span class="token string">&quot;order_group&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
producer<span class="token punctuation">.</span><span class="token function">setTransactionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LocalTransactionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">LocalTransactionState</span> <span class="token function">executeLocalTransaction</span><span class="token punctuation">(</span><span class="token class-name">Message</span> msg<span class="token punctuation">,</span> <span class="token class-name">Object</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            orderDao<span class="token punctuation">.</span><span class="token function">createOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 本地事务</span>
            <span class="token keyword">return</span> <span class="token class-name">LocalTransactionState</span><span class="token punctuation">.</span><span class="token constant">COMMIT_MESSAGE</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">LocalTransactionState</span><span class="token punctuation">.</span><span class="token constant">ROLLBACK_MESSAGE</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Seata AT（推荐）</strong></p><p><strong>架构原理</strong>：</p>`,5),X=e(`<p><strong>集成方式</strong>：</p><ol><li>添加依赖</li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.seata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>seata-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.6.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>配置全局事务</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GlobalTransactional</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createOrder</span><span class="token punctuation">(</span><span class="token class-name">OrderDTO</span> order<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    orderService<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 本地事务</span>
    stockService<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getProductId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 远程Dubbo调用</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>数据源代理配置</strong>：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">seata</span><span class="token punctuation">:</span>
  <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">application-id</span><span class="token punctuation">:</span> order<span class="token punctuation">-</span>service
  <span class="token key atrule">tx-service-group</span><span class="token punctuation">:</span> my_tx_group
  <span class="token key atrule">service</span><span class="token punctuation">:</span>
    <span class="token key atrule">vgroup-mapping</span><span class="token punctuation">:</span>
      <span class="token key atrule">my_tx_group</span><span class="token punctuation">:</span> default
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>TCC（两阶段提交）</strong></p><p>适用于复杂业务。</p><p><strong>阶段划分</strong>：</p><ol><li>Try：预留资源</li><li>Confirm：确认操作</li><li>Cancel：取消预留</li></ol><p><strong>Dubbo 服务定义</strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StockService</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@TwoPhaseBusinessAction</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;reduceStock&quot;</span><span class="token punctuation">,</span> commitMethod <span class="token operator">=</span> <span class="token string">&quot;confirm&quot;</span><span class="token punctuation">,</span> rollbackMethod <span class="token operator">=</span> <span class="token string">&quot;cancel&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">boolean</span> <span class="token function">tryReduceStock</span><span class="token punctuation">(</span><span class="token class-name">BusinessActionContext</span> context<span class="token punctuation">,</span> <span class="token class-name">Long</span> productId<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">boolean</span> <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token class-name">BusinessActionContext</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token class-name">BusinessActionContext</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>SAGA（长事务）</strong></p><p><strong>适用场景</strong>：跨多服务的业务流程（如旅行订票）</p>`,15),Y=e(`<p><strong>实现方案</strong>：</p><ol><li>使用 Apache ServiceComb Saga</li><li>定义补偿方法：</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SagaStart</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bookTravel</span><span class="token punctuation">(</span><span class="token class-name">TravelOrder</span> order<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    flightService<span class="token punctuation">.</span><span class="token function">book</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>
    hotelService<span class="token punctuation">.</span><span class="token function">reserve</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Compensate</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cancelFlight</span><span class="token punctuation">(</span><span class="token class-name">TravelOrder</span> order<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    flightService<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方案对比</strong></p><table><thead><tr><th>方案</th><th>一致性</th><th>性能</th><th>复杂度</th><th>适用场景</th></tr></thead><tbody><tr><td>事务消息</td><td>最终</td><td>高</td><td>低</td><td>异步通知场景</td></tr><tr><td>Seata AT</td><td>强一致</td><td>中</td><td>中</td><td>常规分布式事务</td></tr><tr><td>TCC</td><td>强一致</td><td>较高</td><td>高</td><td>资金类高敏感业务</td></tr><tr><td>SAGA</td><td>最终</td><td>低</td><td>高</td><td>跨多服务长流程</td></tr></tbody></table><p><strong>生产建议</strong></p><ol><li><strong>Seata AT 模式</strong>作为默认选择，平衡易用性与一致性</li><li>重要资金操作采用 <strong>TCC 模式</strong>，如支付、转账</li><li>配合 Dubbo 的 <strong>集群容错</strong> 策略：</li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span> <span class="token attr-name">cluster</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>failover<span class="token punctuation">&quot;</span></span> <span class="token attr-name">retries</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>2<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>必须实现 <strong>幂等接口</strong> 应对重试场景</li></ol><p><strong>监控配置</strong>：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">seata</span><span class="token punctuation">:</span>
  <span class="token key atrule">metrics</span><span class="token punctuation">:</span>
    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">registry-type</span><span class="token punctuation">:</span> compact
    <span class="token key atrule">exporter-list</span><span class="token punctuation">:</span> prometheus
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过以上方案，Dubbo 系统可在保证性能的同时实现不同级别的事务一致性。实际选型需根据业务特点权衡。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,13),$={href:"https://github.com/apache/dubbo",target:"_blank",rel:"noopener noreferrer"},nn={href:"https://dubbo.apache.org/zh-cn/",target:"_blank",rel:"noopener noreferrer"},sn={href:"https://cn.dubbo.apache.org/zh-cn/docsv2.7/dev/design/",target:"_blank",rel:"noopener noreferrer"},an={href:"https://github.com/doocs/advanced-java/blob/master/docs/distributed-system/dubbo-service-management.md",target:"_blank",rel:"noopener noreferrer"};function tn(en,on){const t=p("ExternalLinkIcon"),o=p("Mermaid");return l(),i("div",null,[u,n("ul",null,[n("li",null,[d,s(" - Dubbo3 新增，基于 HTTP/2 并且完全兼容 gRPC 协议，原生支持 Streaming 通信语义，Triple 可同时运行在 HTTP/1 和 HTTP/2 传输协议之上，让你可以直接使用 curl、浏览器访问后端 Dubbo 服务。自 Triple 协议开始，Dubbo 还支持基于 Protocol Buffers 的服务定义与数据传输，但 Triple 实现并不绑定 IDL。Triple 具备更好的网关、代理穿透性，因此非常适合于跨网关、代理通信的部署架构，如服务网格等。更多详情见：Triple 协议详情见 "),n("a",k,[s("Triple 协议开发任务"),a(t)]),s("、"),n("a",g,[s("Triple 设计思路与协议规范"),a(t)]),s("。")]),n("li",null,[b,s(" - Dubbo2 协议是基于 TCP 传输层协议之上构建的一套 RPC 通信协议，具有紧凑、灵活、高性能等特点。它是 Dubbo 的默认通信协议，采用单一长连接和 NIO 异步通信，基于 hessian 作为序列化协议。Dubbo2 协议适合于小数据量大并发的服务调用，以及服务消费者机器数远大于服务提供者机器数的情况。反之，Dubbo 缺省协议不适合传送大数据量的服务，比如传文件，传视频等，除非请求量很低。Dubbo 协议详情见 "),n("a",v,[s("Dubbo2 协议开发任务"),a(t)]),s("、"),n("a",m,[s("Dubbo2 设计思路与协议规范"),a(t)]),s("。")]),n("li",null,[h,s(" - gRPC 是谷歌开源的基于 HTTP/2 的通信协议。gRPC 的定位是通信协议与实现，是一款纯粹的 RPC 框架，而 Dubbo 定位是一款微服务框架，为微服务实践提供解决方案。在 Dubbo 体系下使用 gRPC 协议是一个非常高效和轻量的选择，它让你既能使用原生的 gRPC 协议通信，又避免了基于 gRPC 进行二次定制与开发的复杂度。gRPC 协议详情见 "),n("a",f,[s("gRPC over Dubbo 示例"),a(t)]),s("。")]),n("li",null,[y,s(" - 微服务领域常用的一种通信模式是 HTTP + JSON，包括 Spring Cloud、Microprofile 等一些主流的微服务框架都默认使用的这种通信模式，Dubbo 同样提供了对基于 HTTP 的编程、通信模式的支持。REST 协议详情见 "),n("a",x,[s("HTTP over Dubbo 示例"),a(t)]),s("、"),n("a",D,[s("Dubbo 与 Spring Cloud 体系互通"),a(t)]),s("。")]),n("li",null,[S,s(" - "),n("a",P,[s("hessian"),a(t)]),s(" 协议用于集成 Hessian 的服务，Hessian 底层采用 Http 通讯，采用 Servlet 暴露服务，Dubbo 缺省内嵌 Jetty 作为服务器实现。Dubbo 的 Hessian 协议可以和原生 Hessian 服务互操作，即： "),C]),n("li",null,[I,s(" - dubbo 支持的 "),n("a",q,[s("thrift"),a(t)]),s(" 协议是对 thrift 原生协议的扩展，在原生协议的基础上添加了一些额外的头信息，比如 service name，magic number 等。使用 dubbo thrift 协议同样需要使用 thrift 的 idl compiler 编译生成相应的 java 代码。")])]),n("p",null,[s("扩展："),n("a",w,[s("Dubbo 官方文档之通信协议"),a(t)])]),T,n("blockquote",null,[n("p",null,[s("扩展阅读："),n("a",_,[s("Dubbo 框架设计"),a(t)])])]),R,n("blockquote",null,[n("p",null,[s("扩展："),n("a",F,[s("长文详解：DUBBO 源码使用了哪些设计模式"),a(t)])])]),j,n("p",null,[s("对 2.7.5 版本之前的 Dubbo 应用，尤其是一些消费端应用，当面临需要消费大量服务且并发数比较大的大流量场景时（典型如网关类场景），经常会出现消费端线程数分配过多的问题，具体问题讨论可参见 "),n("a",O,[s("Need a limited Threadpool in consumer side #2013"),a(t)])]),L,n("p",null,[A,s("。时间轮（Timing Wheel）是 George Varghese 和 Tony Lauck 在 1996 年的论文 "),n("a",E,[s("Hashed and Hierarchical Timing Wheels: data structures to efficiently implement a timer facility"),a(t)]),s(" 实现的，它在 Linux 内核中使用广泛，是 Linux 内核定时器的实现方法和基础之一。")]),M,n("blockquote",null,[n("p",null,[s("扩展阅读："),n("a",J,[s("Dubbo 官方文档之扩展适配"),a(t)])])]),N,n("blockquote",null,[z,n("ul",null,[n("li",null,[n("a",B,[s("Dubbo SPI 概述"),a(t)])]),n("li",null,[n("a",H,[s("源码级深度理解 Java SPI"),a(t)])])])]),U,G,K,W,Z,a(o,{id:"mermaid-2666",code:"eJxTUEgvSizIUPAJ4lIAAuf8vOLS3NQiBV1du5qg1MLS1OKSGgW3zJyS1CJDkCCUbQRm6+npIYn5gdkBRfllmSmpRWDjYByoccUFQONTYeZB1KOaATEX2T6Yi7gA/TMyzw=="}),V,a(o,{id:"mermaid-2888",code:"eJwrTi0sTc1LTnXJTEwvSszlUgCCp/1NT3b0vWhoVXixbtHT3qnP5vQ+7Vqoa2fnG2ilYKj3tH/iy4bGl4tani5pf7at41nj+vd7Op72dj3Z1Q1UBhPpBBvlG6gL1IdsjJWCkd6L/VOezp4HMedZx4SnXfPBitFsc3GyUjDWe9a5/MXCnmdz1jydswFiAza1IJeZ6D3rn/Bk1xJ9oNnPds+COATmCju7p7smP107A+YIU71nXVNfNkxCUoWsAGq9GdR6qNTk3id753ABAPw2pD4="}),Q,a(o,{id:"mermaid-2906",code:"eJxLL0osyFAIceFSAIIQZ43g1MSSRIXg1KKy1CJNsKBj9It1i572Tn02p/dp18JYBV1duxpDvWebVzxt63na0fZsyvoaoEawUqfop7smP107A1mpEXalIc5gWWO9p60rnm5seLKrG6jj+bqFzye01Sg4ElbixAUApThTMA=="}),X,a(o,{id:"mermaid-2966",code:"eJxLL0osyFDwCeJSAALH6BfrFj2bs+v50hWxCrq6dgpOIIGXrZOe7poeC1bhBBZ2jn6+fP6LvcsgYs5gMZfoZ1PWP9k9I5YLAH9MIV4="}),Y,n("ul",null,[n("li",null,[n("a",$,[s("Dubbo Github"),a(t)])]),n("li",null,[n("a",nn,[s("Dubbo 官方文档"),a(t)])]),n("li",null,[n("a",sn,[s("Dubbo 框架设计"),a(t)])]),n("li",null,[n("a",an,[s("如何基于 Dubbo 进行服务治理、服务降级、失败重试以及超时重试？"),a(t)])])])])}const ln=c(r,[["render",tn],["__file","index.html.vue"]]);export{ln as default};
