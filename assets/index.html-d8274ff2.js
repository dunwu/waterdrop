const e=JSON.parse('{"key":"v-67bddae3","path":"/pages/296e650c/","title":"MQ 面试","lang":"zh-CN","frontmatter":{"title":"MQ 面试","date":"2022-02-17T22:34:30.000Z","permalink":"/pages/296e650c/","category":["分布式","分布式通信","MQ","MQ 综合"],"tag":["Java","中间件","MQ","面试"],"description":"MQ 面试 消息队列（Message Queue，简称 MQ）技术是应用间交换信息的一种技术。 消息队列主要解决异步处理、应用间耦合，流量削锋等问题，实现高性能，高可用，可伸缩和最终一致性架构。是大型分布式系统不可缺少的中间件。 目前主流的 MQ 有：Kafka、RabbitMQ、RocketMQ、ActiveMQ，而部分数据库如 Redis、MySQL 以及 phxsql 也可实现消息队列的功能。 注意：为了简便，下文中除了文章标题，一律使用 MQ 简称。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/296e650c/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"MQ 面试"}],["meta",{"property":"og:description","content":"MQ 面试 消息队列（Message Queue，简称 MQ）技术是应用间交换信息的一种技术。 消息队列主要解决异步处理、应用间耦合，流量削锋等问题，实现高性能，高可用，可伸缩和最终一致性架构。是大型分布式系统不可缺少的中间件。 目前主流的 MQ 有：Kafka、RabbitMQ、RocketMQ、ActiveMQ，而部分数据库如 Redis、MySQL 以及 phxsql 也可实现消息队列的功能。 注意：为了简便，下文中除了文章标题，一律使用 MQ 简称。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-15T12:00:31.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"中间件"}],["meta",{"property":"article:tag","content":"MQ"}],["meta",{"property":"article:tag","content":"面试"}],["meta",{"property":"article:published_time","content":"2022-02-17T22:34:30.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-15T12:00:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MQ 面试\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-02-17T22:34:30.000Z\\",\\"dateModified\\":\\"2025-06-15T12:00:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"MQ 简介","slug":"mq-简介","link":"#mq-简介","children":[{"level":3,"title":"【简单】什么是 MQ？","slug":"【简单】什么是-mq","link":"#【简单】什么是-mq","children":[]},{"level":3,"title":"【简单】为什么需要 MQ？","slug":"【简单】为什么需要-mq","link":"#【简单】为什么需要-mq","children":[]},{"level":3,"title":"【中等】引入 MQ 带来哪些问题？","slug":"【中等】引入-mq-带来哪些问题","link":"#【中等】引入-mq-带来哪些问题","children":[]},{"level":3,"title":"【中等】MQ 有哪些通信模型？","slug":"【中等】mq-有哪些通信模型","link":"#【中等】mq-有哪些通信模型","children":[]},{"level":3,"title":"【中等】MQ 推拉模式各有什么利弊，如何选择？","slug":"【中等】mq-推拉模式各有什么利弊-如何选择","link":"#【中等】mq-推拉模式各有什么利弊-如何选择","children":[]}]},{"level":2,"title":"MQ 可靠传输","slug":"mq-可靠传输","link":"#mq-可靠传输","children":[{"level":3,"title":"【困难】如何保证 MQ 消息不丢失？","slug":"【困难】如何保证-mq-消息不丢失","link":"#【困难】如何保证-mq-消息不丢失","children":[]},{"level":3,"title":"【困难】如何处理重复 MQ 消息？","slug":"【困难】如何处理重复-mq-消息","link":"#【困难】如何处理重复-mq-消息","children":[]},{"level":3,"title":"【困难】如何保证 MQ 消息的顺序性？","slug":"【困难】如何保证-mq-消息的顺序性","link":"#【困难】如何保证-mq-消息的顺序性","children":[]},{"level":3,"title":"【困难】如何处理 MQ 消息积压？","slug":"【困难】如何处理-mq-消息积压","link":"#【困难】如何处理-mq-消息积压","children":[]}]},{"level":2,"title":"MQ 高可用","slug":"mq-高可用","link":"#mq-高可用","children":[{"level":3,"title":"【困难】如何保证 MQ 的高可用？","slug":"【困难】如何保证-mq-的高可用","link":"#【困难】如何保证-mq-的高可用","children":[]}]},{"level":2,"title":"MQ 架构","slug":"mq-架构","link":"#mq-架构","children":[{"level":3,"title":"【困难】Kafka、ActiveMQ、RabbitMQ、RocketMQ 有什么优缺点？","slug":"【困难】kafka、activemq、rabbitmq、rocketmq-有什么优缺点","link":"#【困难】kafka、activemq、rabbitmq、rocketmq-有什么优缺点","children":[]},{"level":3,"title":"【困难】什么是 JMS？","slug":"【困难】什么是-jms","link":"#【困难】什么是-jms","children":[]},{"level":3,"title":"【中等】什么是 AMQP？","slug":"【中等】什么是-amqp","link":"#【中等】什么是-amqp","children":[]}]},{"level":2,"title":"Kafka","slug":"kafka","link":"#kafka","children":[{"level":3,"title":"【困难】Kafka 为什么性能高？","slug":"【困难】kafka-为什么性能高","link":"#【困难】kafka-为什么性能高","children":[]},{"level":3,"title":"【困难】ZooKeeper 在 Kafka 中的作用是什么？","slug":"【困难】zookeeper-在-kafka-中的作用是什么","link":"#【困难】zookeeper-在-kafka-中的作用是什么","children":[]},{"level":3,"title":"【中等】Kafka 为什么要弃用 Zookeeper？","slug":"【中等】kafka-为什么要弃用-zookeeper","link":"#【中等】kafka-为什么要弃用-zookeeper","children":[]},{"level":3,"title":"【中等】Kafka 中如何实现时间轮？","slug":"【中等】kafka-中如何实现时间轮","link":"#【中等】kafka-中如何实现时间轮","children":[]},{"level":3,"title":"【中等】Kafka 的索引设计有什么亮点？","slug":"【中等】kafka-的索引设计有什么亮点","link":"#【中等】kafka-的索引设计有什么亮点","children":[]},{"level":3,"title":"【困难】Kafka 处理请求的全流程？","slug":"【困难】kafka-处理请求的全流程","link":"#【困难】kafka-处理请求的全流程","children":[]},{"level":3,"title":"【困难】Kafka 中如何实现事务机制？","slug":"【困难】kafka-中如何实现事务机制","link":"#【困难】kafka-中如何实现事务机制","children":[]},{"level":3,"title":"【困难】Kafka 控制器如何处理事件？","slug":"【困难】kafka-控制器如何处理事件","link":"#【困难】kafka-控制器如何处理事件","children":[]}]},{"level":2,"title":"RocketMQ","slug":"rocketmq","link":"#rocketmq","children":[{"level":3,"title":"【中等】RocketMQ 的事务消息有什么缺点？你还了解过别的事务消息实现吗？","slug":"【中等】rocketmq-的事务消息有什么缺点-你还了解过别的事务消息实现吗","link":"#【中等】rocketmq-的事务消息有什么缺点-你还了解过别的事务消息实现吗","children":[]},{"level":3,"title":"【中等】为什么 RocketMQ 不使用 Zookeeper 作为注册中心？","slug":"【中等】为什么-rocketmq-不使用-zookeeper-作为注册中心","link":"#【中等】为什么-rocketmq-不使用-zookeeper-作为注册中心","children":[]},{"level":3,"title":"【中等】RocketMQ 的延迟消息是怎么实现的？","slug":"【中等】rocketmq-的延迟消息是怎么实现的","link":"#【中等】rocketmq-的延迟消息是怎么实现的","children":[]},{"level":3,"title":"【中等】RocketMQ 和 Kafka 在架构和功能上有什么区别？","slug":"【中等】rocketmq-和-kafka-在架构和功能上有什么区别","link":"#【中等】rocketmq-和-kafka-在架构和功能上有什么区别","children":[]},{"level":3,"title":"【困难】RocketMQ 如何实现事务消息？","slug":"【困难】rocketmq-如何实现事务消息","link":"#【困难】rocketmq-如何实现事务消息","children":[]}]},{"level":2,"title":"RabbitMQ","slug":"rabbitmq","link":"#rabbitmq","children":[{"level":3,"title":"【简单】RabbitMQ 的 routing key 和 binding key 的最大长度是多少字节？","slug":"【简单】rabbitmq-的-routing-key-和-binding-key-的最大长度是多少字节","link":"#【简单】rabbitmq-的-routing-key-和-binding-key-的最大长度是多少字节","children":[]},{"level":3,"title":"【中等】RabbitMQ 中无法路由的消息会去到哪里？","slug":"【中等】rabbitmq-中无法路由的消息会去到哪里","link":"#【中等】rabbitmq-中无法路由的消息会去到哪里","children":[]},{"level":3,"title":"【中等】RabbitMQ 中消息什么时候会进入死信交换机？","slug":"【中等】rabbitmq-中消息什么时候会进入死信交换机","link":"#【中等】rabbitmq-中消息什么时候会进入死信交换机","children":[]},{"level":3,"title":"【中等】RabbitMQ 如何实现事务机制？","slug":"【中等】rabbitmq-如何实现事务机制","link":"#【中等】rabbitmq-如何实现事务机制","children":[]},{"level":3,"title":"【中等】RabbitMQ 中有哪些核心概念？","slug":"【中等】rabbitmq-中有哪些核心概念","link":"#【中等】rabbitmq-中有哪些核心概念","children":[]},{"level":3,"title":"【中等】RabbitMQ 有哪些工作模式？","slug":"【中等】rabbitmq-有哪些工作模式","link":"#【中等】rabbitmq-有哪些工作模式","children":[]},{"level":3,"title":"【中等】RabbitMQ 有哪些集群模式？","slug":"【中等】rabbitmq-有哪些集群模式","link":"#【中等】rabbitmq-有哪些集群模式","children":[]},{"level":3,"title":"【中等】RabbitMQ 如何实现延迟队列？","slug":"【中等】rabbitmq-如何实现延迟队列","link":"#【中等】rabbitmq-如何实现延迟队列","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1738508672000,"updatedTime":1749988831000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":3}]},"readingTime":{"minutes":68.62,"words":20587},"filePathRelative":"15.分布式/21.分布式通信/02.MQ/00.MQ综合/MQ面试.md","localizedDate":"2022年2月17日","excerpt":"<h1> MQ 面试</h1>\\n<blockquote>\\n<p>消息队列（Message Queue，简称 MQ）技术是<strong>应用间交换信息</strong>的一种技术。</p>\\n<p>消息队列主要解决异步处理、应用间耦合，流量削锋等问题，实现高性能，高可用，可伸缩和最终一致性架构。是大型分布式系统不可缺少的中间件。</p>\\n<p>目前主流的 MQ 有：Kafka、RabbitMQ、RocketMQ、ActiveMQ，而部分数据库如 Redis、MySQL 以及 phxsql 也可实现消息队列的功能。</p>\\n<p>注意：<em>为了简便，下文中除了文章标题，一律使用 MQ 简称</em>。</p>\\n</blockquote>","autoDesc":true}');export{e as data};
