const e=JSON.parse('{"key":"v-58f2941d","path":"/pages/5cd0d547/","title":"Spring集成缓存","lang":"zh-CN","frontmatter":{"title":"Spring集成缓存","date":"2017-11-08T16:53:27.000Z","order":1,"permalink":"/pages/5cd0d547/","category":["Java","框架","Spring","Spring集成"],"tag":["Java","框架","Spring","集成","缓存"],"description":"Spring 集成缓存中间件 Spring 中提供了缓存功能的抽象，允许你在底层灵活的替换缓存实现，而对上层暴露相同的缓存接口。 缓存接口 Spring 的缓存 API 以注解方式提供。 开启注解 Spring 为缓存功能提供了注解功能，但是你必须启动注解。 你有两个选择： (1) 在 xml 中声明 像上一节 spring-ehcache.xml 中的做法一样，使用&lt;cache:annotation-driven/&gt;","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/5cd0d547/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"Spring集成缓存"}],["meta",{"property":"og:description","content":"Spring 集成缓存中间件 Spring 中提供了缓存功能的抽象，允许你在底层灵活的替换缓存实现，而对上层暴露相同的缓存接口。 缓存接口 Spring 的缓存 API 以注解方式提供。 开启注解 Spring 为缓存功能提供了注解功能，但是你必须启动注解。 你有两个选择： (1) 在 xml 中声明 像上一节 spring-ehcache.xml 中的做法一样，使用&lt;cache:annotation-driven/&gt;"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-18T15:46:22.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"框架"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:tag","content":"集成"}],["meta",{"property":"article:tag","content":"缓存"}],["meta",{"property":"article:published_time","content":"2017-11-08T16:53:27.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-18T15:46:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring集成缓存\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2017-11-08T16:53:27.000Z\\",\\"dateModified\\":\\"2024-06-18T15:46:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"缓存接口","slug":"缓存接口","link":"#缓存接口","children":[{"level":3,"title":"开启注解","slug":"开启注解","link":"#开启注解","children":[]},{"level":3,"title":"缓存注解使用","slug":"缓存注解使用","link":"#缓存注解使用","children":[]}]},{"level":2,"title":"缓存存储","slug":"缓存存储","link":"#缓存存储","children":[{"level":3,"title":"使用 ConcurrentHashMap 作为缓存","slug":"使用-concurrenthashmap-作为缓存","link":"#使用-concurrenthashmap-作为缓存","children":[]},{"level":3,"title":"使用 Ehcache 作为缓存","slug":"使用-ehcache-作为缓存","link":"#使用-ehcache-作为缓存","children":[]},{"level":3,"title":"使用 Caffeine 作为缓存","slug":"使用-caffeine-作为缓存","link":"#使用-caffeine-作为缓存","children":[]}]},{"level":2,"title":"示例代码","slug":"示例代码","link":"#示例代码","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1697125600000,"updatedTime":1718725582000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":2}]},"readingTime":{"minutes":4.08,"words":1223},"filePathRelative":"01.Java/13.框架/01.Spring/05.Spring集成/01.Spring集成缓存.md","localizedDate":"2017年11月8日","excerpt":"<h1> Spring 集成缓存中间件</h1>\\n<blockquote>\\n<p>Spring 中提供了缓存功能的抽象，允许你在底层灵活的替换缓存实现，而对上层暴露相同的缓存接口。</p>\\n</blockquote>\\n<h2> 缓存接口</h2>\\n<p>Spring 的缓存 API 以注解方式提供。</p>\\n<h3> 开启注解</h3>\\n<p>Spring 为缓存功能提供了注解功能，但是你必须启动注解。<br>\\n你有两个选择：<br>\\n(1) 在 xml 中声明<br>\\n像上一节 spring-ehcache.xml 中的做法一样，使用<code>&lt;cache:annotation-driven/&gt;</code></p>","autoDesc":true}');export{e as data};
