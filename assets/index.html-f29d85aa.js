import{_ as d}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as p,c as E,a as n,b as t,d as a,w as s,e as r}from"./app-f29527f5.js";const g={},A=r('<h1 id="设计模式面试" tabindex="-1"><a class="header-anchor" href="#设计模式面试" aria-hidden="true">#</a> 设计模式面试</h1><h2 id="综合" tabindex="-1"><a class="header-anchor" href="#综合" aria-hidden="true">#</a> 综合</h2><h3 id="【简单】什么是设计模式-为什么需要设计模式" tabindex="-1"><a class="header-anchor" href="#【简单】什么是设计模式-为什么需要设计模式" aria-hidden="true">#</a> 【简单】什么是设计模式？为什么需要设计模式？</h3><p><strong>设计模式</strong>是软件设计中常见问题的典型解决方案。</p><p><strong>设计模式</strong>是针对软件设计中<strong>常见问题</strong>的、<strong>可重用</strong>的<strong>解决方案模板</strong>和<strong>最佳实践</strong>。</p><p>模式是针对软件设计中常见问题的解决方案工具箱， 它们定义了一种让你的团队能更高效沟通的通用语言。</p><h3 id="【中等】设计模式可以分为哪几类-一共有多少种主流的设计模式" tabindex="-1"><a class="header-anchor" href="#【中等】设计模式可以分为哪几类-一共有多少种主流的设计模式" aria-hidden="true">#</a> 【中等】设计模式可以分为哪几类？一共有多少种主流的设计模式？</h3><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/202509211833382.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>一共有 23 种主流设计模式</p>',9),k=n("strong",null,"创建型模式",-1),h=n("strong",null,"结构型模式",-1),m=n("strong",null,"行为型模式",-1),B=n("h2",{id:"创建型模式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#创建型模式","aria-hidden":"true"},"#"),t(" 创建型模式")],-1),v=n("h3",{id:"【中等】单例模式有哪几种实现-如何保证线程安全",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#【中等】单例模式有哪几种实现-如何保证线程安全","aria-hidden":"true"},"#"),t(" 【中等】单例模式有哪几种实现？如何保证线程安全？")],-1),b=n("p",null,[t("线程不安全：如果两个线程同时执行到 "),n("code",null,"if (instance == null)"),t(" 判断，且都发现为 null，则会创建两个实例")],-1),y=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"public"),t(),n("span",{class:"token keyword"},"class"),t(),n("span",{class:"token class-name"},"Singleton"),t(),n("span",{class:"token punctuation"},"{"),t(`
    `),n("span",{class:"token keyword"},"private"),t(),n("span",{class:"token keyword"},"static"),t(),n("span",{class:"token class-name"},"Singleton"),t(" instance"),n("span",{class:"token punctuation"},";"),t(`

    `),n("span",{class:"token comment"},"// 私有构造函数，防止外部 new"),t(`
    `),n("span",{class:"token keyword"},"private"),t(),n("span",{class:"token class-name"},"Singleton"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),t(`

    `),n("span",{class:"token comment"},"// 全局访问点"),t(`
    `),n("span",{class:"token keyword"},"public"),t(),n("span",{class:"token keyword"},"static"),t(),n("span",{class:"token class-name"},"Singleton"),t(),n("span",{class:"token function"},"getInstance"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
        `),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("instance "),n("span",{class:"token operator"},"=="),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(),n("span",{class:"token comment"},"// 线程不安全的发生点"),t(`
            instance `),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"new"),t(),n("span",{class:"token class-name"},"Singleton"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
        `),n("span",{class:"token punctuation"},"}"),t(`
        `),n("span",{class:"token keyword"},"return"),t(" instance"),n("span",{class:"token punctuation"},";"),t(`
    `),n("span",{class:"token punctuation"},"}"),t(`
`),n("span",{class:"token punctuation"},"}"),t(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),f=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"public"),t(),n("span",{class:"token keyword"},"class"),t(),n("span",{class:"token class-name"},"Singleton"),t(),n("span",{class:"token punctuation"},"{"),t(`
    `),n("span",{class:"token comment"},"// 类加载时就直接初始化"),t(`
    `),n("span",{class:"token keyword"},"private"),t(),n("span",{class:"token keyword"},"static"),t(),n("span",{class:"token keyword"},"final"),t(),n("span",{class:"token class-name"},"Singleton"),t(" instance "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"new"),t(),n("span",{class:"token class-name"},"Singleton"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`

    `),n("span",{class:"token keyword"},"private"),t(),n("span",{class:"token class-name"},"Singleton"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),t(`

    `),n("span",{class:"token keyword"},"public"),t(),n("span",{class:"token keyword"},"static"),t(),n("span",{class:"token class-name"},"Singleton"),t(),n("span",{class:"token function"},"getInstance"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
        `),n("span",{class:"token keyword"},"return"),t(" instance"),n("span",{class:"token punctuation"},";"),t(`
    `),n("span",{class:"token punctuation"},"}"),t(`
`),n("span",{class:"token punctuation"},"}"),t(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),_=n("p",null,[t("如果没有 "),n("code",null,"volatile"),t("，JVM 可能会进行指令重排序，将步骤 3 和步骤 2 调换顺序。这可能导致其他线程拿到一个未完全初始化的对象。"),n("code",null,"volatile"),t(" 可以防止这种重排序，保证可见性和有序性。")],-1),C=n("p",null,"线程安全，延迟加载，效率较高（只在第一次初始化时同步）。",-1),w=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"public"),t(),n("span",{class:"token keyword"},"class"),t(),n("span",{class:"token class-name"},"Singleton"),t(),n("span",{class:"token punctuation"},"{"),t(`
    `),n("span",{class:"token comment"},"// 使用 volatile 关键字禁止指令重排序，至关重要"),t(`
    `),n("span",{class:"token keyword"},"private"),t(),n("span",{class:"token keyword"},"static"),t(),n("span",{class:"token keyword"},"volatile"),t(),n("span",{class:"token class-name"},"Singleton"),t(" instance"),n("span",{class:"token punctuation"},";"),t(`

    `),n("span",{class:"token keyword"},"private"),t(),n("span",{class:"token class-name"},"Singleton"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),t(`

    `),n("span",{class:"token keyword"},"public"),t(),n("span",{class:"token keyword"},"static"),t(),n("span",{class:"token class-name"},"Singleton"),t(),n("span",{class:"token function"},"getInstance"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
        `),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("instance "),n("span",{class:"token operator"},"=="),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(),n("span",{class:"token comment"},"// 第一次检查，避免不必要的同步"),t(`
            `),n("span",{class:"token keyword"},"synchronized"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Singleton"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(),n("span",{class:"token comment"},"// 同步锁"),t(`
                `),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("instance "),n("span",{class:"token operator"},"=="),t(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(),n("span",{class:"token comment"},"// 第二次检查，确保线程安全"),t(`
                    instance `),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"new"),t(),n("span",{class:"token class-name"},"Singleton"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
                `),n("span",{class:"token punctuation"},"}"),t(`
            `),n("span",{class:"token punctuation"},"}"),t(`
        `),n("span",{class:"token punctuation"},"}"),t(`
        `),n("span",{class:"token keyword"},"return"),t(" instance"),n("span",{class:"token punctuation"},";"),t(`
    `),n("span",{class:"token punctuation"},"}"),t(`
`),n("span",{class:"token punctuation"},"}"),t(`

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),F=n("ul",null,[n("li",null,[n("strong",null,"原理"),t("：JVM 在加载外部类时，不会立即加载其内部类。内部类 "),n("code",null,"SingletonHolder"),t(" 只有在 "),n("code",null,"getInstance()"),t(" 方法被调用时才会被加载和初始化，从而初始化 "),n("code",null,"INSTANCE"),t(" 实例。")]),n("li",null,[n("strong",null,"优点"),t("： "),n("ul",null,[n("li",null,[n("strong",null,"线程安全"),t("：由 JVM 类加载机制保证。")]),n("li",null,[n("strong",null,"懒加载"),t("：只有在调用 "),n("code",null,"getInstance()"),t(" 时才会实例化。")]),n("li",null,[n("strong",null,"高效"),t("：无需同步锁，性能高。")])])])],-1),x=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"public"),t(),n("span",{class:"token keyword"},"class"),t(),n("span",{class:"token class-name"},"Singleton"),t(),n("span",{class:"token punctuation"},"{"),t(`
    `),n("span",{class:"token keyword"},"private"),t(),n("span",{class:"token class-name"},"Singleton"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),t(`

    `),n("span",{class:"token comment"},"// 静态内部类"),t(`
    `),n("span",{class:"token keyword"},"private"),t(),n("span",{class:"token keyword"},"static"),t(),n("span",{class:"token keyword"},"class"),t(),n("span",{class:"token class-name"},"SingletonHolder"),t(),n("span",{class:"token punctuation"},"{"),t(`
        `),n("span",{class:"token keyword"},"private"),t(),n("span",{class:"token keyword"},"static"),t(),n("span",{class:"token keyword"},"final"),t(),n("span",{class:"token class-name"},"Singleton"),t(),n("span",{class:"token constant"},"INSTANCE"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"new"),t(),n("span",{class:"token class-name"},"Singleton"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
    `),n("span",{class:"token punctuation"},"}"),t(`

    `),n("span",{class:"token keyword"},"public"),t(),n("span",{class:"token keyword"},"static"),t(),n("span",{class:"token class-name"},"Singleton"),t(),n("span",{class:"token function"},"getInstance"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
        `),n("span",{class:"token keyword"},"return"),t(),n("span",{class:"token class-name"},"SingletonHolder"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"INSTANCE"),n("span",{class:"token punctuation"},";"),t(`
    `),n("span",{class:"token punctuation"},"}"),t(`
`),n("span",{class:"token punctuation"},"}"),t(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),S=n("p",null,"@枚举",-1),I=n("p",null,[n("strong",null,"这是《Effective Java》强烈推荐的方式，如果需要抵抗序列化和反射攻击，这是最好的选择。")],-1),D=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"public"),t(),n("span",{class:"token keyword"},"enum"),t(),n("span",{class:"token class-name"},"Singleton"),t(),n("span",{class:"token punctuation"},"{"),t(`
    `),n("span",{class:"token constant"},"INSTANCE"),n("span",{class:"token punctuation"},";"),t(),n("span",{class:"token comment"},"// 唯一的实例"),t(`

    `),n("span",{class:"token comment"},"// 可以添加任意方法"),t(`
    `),n("span",{class:"token keyword"},"public"),t(),n("span",{class:"token keyword"},"void"),t(),n("span",{class:"token function"},"doSomething"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
        `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),t("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Doing something..."'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
    `),n("span",{class:"token punctuation"},"}"),t(`
`),n("span",{class:"token punctuation"},"}"),t(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),J=n("p",null,[t("使用方法："),n("code",null,"Singleton.INSTANCE.doSomething();")],-1),M=n("p",null,[n("strong",null,"优点"),t("：")],-1),j=n("ul",null,[n("li",null,[n("strong",null,"极其简单"),t("：代码简洁。")]),n("li",null,[n("strong",null,"线程安全"),t("：枚举实例的创建由 JVM 保证全局唯一。")]),n("li",null,[n("strong",null,"防止反射攻击"),t("：枚举类默认不允许通过反射创建实例，能有效防止通过反射破坏单例。")]),n("li",null,[n("strong",null,"防止反序列化破坏"),t("：Java 规范保证每个枚举类型和定义的枚举变量都是唯一的，在序列化和反序列化时不会创建新的对象。")])],-1),N=r('<h3 id="【中等】什么是简单工厂模式-有哪些经典的应用场景" tabindex="-1"><a class="header-anchor" href="#【中等】什么是简单工厂模式-有哪些经典的应用场景" aria-hidden="true">#</a> 【中等】什么是简单工厂模式？有哪些经典的应用场景？</h3><p><strong>简单工厂模式由一个工厂类统一负责对象的创建，根据传入的参数决定具体创建哪种产品</strong>。 客户端无需关心创建细节，实现创建与使用的分离。</p><p><strong>三大角色</strong></p><ul><li><strong>工厂 (Factory)</strong>：核心，包含创建逻辑的静态方法。</li><li><strong>抽象产品 (Product)</strong>：所有具体产品的父类或接口，定义公共方法。</li><li><strong>具体产品 (Concrete Product)</strong>：工厂创建的目标，实现抽象产品接口。</li></ul><p><strong>经典应用场景</strong></p><ul><li><strong>JDK</strong>：<code>Calendar.getInstance()</code>, <code>NumberFormat.getInstance()</code></li><li><strong>日志框架</strong>：<code>LoggerFactory.getLogger()</code></li><li><strong>数据库连接</strong>：<code>DriverManager.getConnection()</code>, 连接池获取连接</li><li><strong>加密解密</strong>：<code>KeyGenerator.getInstance(&quot;AES&quot;)</code></li><li><strong>GUI 工具包</strong>：跨平台创建控件</li></ul><p>优缺点</p><ul><li><strong>优点</strong>：<strong>解耦</strong>（创建与使用分离）、<strong>职责清晰</strong>（代码易于维护）。</li><li><strong>缺点</strong>：<strong>违反开闭原则</strong>（新增产品必须修改工厂逻辑），工厂类会变得臃肿。</li></ul><h3 id="【中等】什么是工厂模式-有哪些经典的应用场景" tabindex="-1"><a class="header-anchor" href="#【中等】什么是工厂模式-有哪些经典的应用场景" aria-hidden="true">#</a> 【中等】什么是工厂模式？有哪些经典的应用场景？</h3><p><strong>工厂模式将对象的创建过程封装起来，与使用它的代码解耦</strong>。客户端不关心对象如何被创建，只关心如何使用。</p><p>三种工厂模式对比</p><table><thead><tr><th style="text-align:left;">模式</th><th style="text-align:left;">核心思想</th><th style="text-align:left;">优点</th><th style="text-align:left;">缺点</th><th style="text-align:left;">适用场景</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>简单工厂</strong></td><td style="text-align:left;">一个“万能”工厂，根据参数创建<strong>一种类型</strong>的不同产品。</td><td style="text-align:left;">结构简单，封装创建过程。</td><td style="text-align:left;"><strong>违反开闭原则</strong>，新增产品需修改工厂。</td><td style="text-align:left;">产品类型少且稳定（如计算器运算）。</td></tr><tr><td style="text-align:left;"><strong>工厂方法</strong></td><td style="text-align:left;">定义一个创建接口，让<strong>子类工厂</strong>决定实例化<strong>哪一种产品</strong>。</td><td style="text-align:left;"><strong>符合开闭原则</strong>，易于扩展新产品。</td><td style="text-align:left;">类数量增多（每产品一工厂）。</td><td style="text-align:left;">需要频繁扩展<strong>新产品个体</strong>（如新增日志输出源）。</td></tr><tr><td style="text-align:left;"><strong>抽象工厂</strong></td><td style="text-align:left;">一个工厂创建<strong>一整套（一族）</strong> 相关的产品。</td><td style="text-align:left;">保证产品族兼容性，切换整套产品方便。</td><td style="text-align:left;">难以支持<strong>新增产品种类</strong>。</td><td style="text-align:left;">需要创建<strong>一组有关联的产品</strong>（如整套跨平台 UI 控件）。</td></tr></tbody></table><p><strong>经典应用场景</strong></p><ul><li><p><strong>JDK/框架级应用</strong>：</p><ul><li><code>Calendar.getInstance()</code>, <code>DriverManager.getConnection()</code> （<strong>简单工厂</strong>）</li><li><code>Collection.iterator()</code> （<strong>工厂方法</strong> - 每个集合生产自己的迭代器）</li><li><strong>Spring IOC 容器</strong>：终极的工厂，<code>getBean()</code> 是核心工厂方法。</li></ul></li><li><p><strong>工具库</strong>：</p><ul><li><strong>日志框架</strong>（SLF4J）：<code>getLogger()</code> 是工厂方法，绑定不同实现（Logback, Log4j）就是具体工厂。</li><li><strong>JDBC</strong>：<code>Connection</code> 是抽象工厂，其 <code>createStatement()</code> 是工厂方法。</li></ul></li><li><p><strong>业务系统</strong>：</p><ul><li><strong>支付系统</strong>：<code>PaymentFactory</code> 下有 <code>AliPayFactory</code>, <code>WeChatPayFactory</code>（<strong>工厂方法</strong>），每个工厂生产一套支付产品（支付、退款、查询）。</li><li><strong>UI 主题/游戏风格</strong>：<code>DarkThemeFactory</code> 和 <code>LightThemeFactory</code> 分别生产一套 dark/light 风格的按钮、对话框、菜单（<strong>抽象工厂</strong>）。</li></ul></li></ul><p><strong>一句话总结</strong></p><ul><li><strong>简单工厂</strong>：怎么造？我一个厂子全包了！（<strong>产品扩展麻烦</strong>）</li><li><strong>工厂方法</strong>：造什么？我开分厂，每个分厂专精一样！（<strong>个体扩展方便</strong>）</li><li><strong>抽象工厂</strong>：要配套！我开集团，每个集团生产一套组合产品！（<strong>整套切换方便</strong>）</li></ul><h2 id="结构型模式" tabindex="-1"><a class="header-anchor" href="#结构型模式" aria-hidden="true">#</a> 结构型模式</h2><h3 id="【中等】什么是代理模式-有哪些经典的应用场景" tabindex="-1"><a class="header-anchor" href="#【中等】什么是代理模式-有哪些经典的应用场景" aria-hidden="true">#</a> 【中等】什么是代理模式？有哪些经典的应用场景？</h3><p><strong>代理模式通过一个“中介”（代理对象）来控制和管理对另一个对象（真实对象）的访问</strong>。代理与真实对象实现相同的接口，使客户端无感知。</p><p><strong>典型应用场景</strong></p><table><thead><tr><th style="text-align:left;">代理类型</th><th style="text-align:left;">核心目的</th><th style="text-align:left;">经典应用场景</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>RPC</strong></td><td style="text-align:left;"><strong>隐藏对象不在本地</strong>的事实，提供本地代表。</td><td style="text-align:left;">RPC 框架（如 gRPC, Dubbo）、Java RMI。客户端调用的 Stub 就是代理。</td></tr><tr><td style="text-align:left;"><strong>AOP</strong></td><td style="text-align:left;"><strong>在访问前后添加额外操作</strong>，增强功能。</td><td style="text-align:left;"><strong>Spring AOP</strong>（日志、事务）、<strong>ORM 懒加载</strong>（Hibernate/MyBatis）、缓存。</td></tr></tbody></table><p>代理模式的核心价值在于：<strong>在不修改原始对象的情况下，通过代理间接访问，从而实现权限控制、功能增强或性能优化</strong>。它是 Spring AOP 等技术的基石。</p><h2 id="行为型模式" tabindex="-1"><a class="header-anchor" href="#行为型模式" aria-hidden="true">#</a> 行为型模式</h2><h3 id="【中等】什么是策略模式-有哪些经典的应用场景" tabindex="-1"><a class="header-anchor" href="#【中等】什么是策略模式-有哪些经典的应用场景" aria-hidden="true">#</a> 【中等】什么是策略模式？有哪些经典的应用场景？</h3><p><strong>策略模式定义一族算法，封装每个算法，并使它们可以互相替换</strong>。策略模式让算法的变化独立于使用它的客户端，实现“做什么”和“怎么做”的分离。</p><p><strong>三大核心角色</strong></p><ul><li><strong>上下文 (Context)</strong>：持有策略的引用，负责对接客户端，并委托策略执行。</li><li><strong>抽象策略 (Strategy)</strong>：策略家族的抽象（接口或抽象类），定义了所有策略必须实现的方法。</li><li><strong>具体策略 (Concrete Strategy)</strong>：实现了抽象策略接口的具体算法。</li></ul><p><strong>核心价值与优点</strong></p><ul><li><strong>消除条件判断</strong>：用组合替代大量 <code>if-else</code> 或 <code>switch</code>，使代码更清晰。</li><li><strong>符合开闭原则</strong>：<strong>新增策略只需添加新类，无需修改上下文或已有代码</strong>，扩展性极佳。</li><li><strong>算法复用与独立</strong>：算法可以独立变化和复用。</li></ul><p><strong>经典应用场景</strong></p><ul><li><strong>电商促销</strong>：无缝切换折扣、立减、满减等不同计价策略。</li><li><strong>支付系统</strong>：灵活支持支付宝、微信、银联等不同支付方式。</li><li><strong>排序比较</strong>：Java 中的 <code>Comparator</code> 接口是典范，传入不同比较器实现不同排序规则。</li><li><strong>导航规划</strong>：根据用户选择（最短时间、最短距离、避开收费）计算不同路线。</li><li><strong>游戏 AI</strong>：角色动态切换攻击（近战、远程）或移动（行走、奔跑）策略。</li></ul><p><strong>当代码中出现大量条件判断来选择不同行为时，就是使用策略模式的最佳时机。它通过“组合”和“委托”将算法灵活地包装起来，便于任意替换和扩展。</strong></p><h3 id="【中等】什么是观察者模式-有哪些经典的应用场景" tabindex="-1"><a class="header-anchor" href="#【中等】什么是观察者模式-有哪些经典的应用场景" aria-hidden="true">#</a> 【中等】什么是观察者模式？有哪些经典的应用场景？</h3><p><strong>观察者模式实现一对多的依赖关系（又称发布-订阅模型），当一个对象（主题）状态改变时，它能自动通知并更新所有依赖它的对象（观察者）。</strong></p><p><strong>两大核心角色</strong></p><ul><li><strong>主题 (Subject)</strong>：维护一个观察者列表，提供注册、移除和通知的方法。</li><li><strong>观察者 (Observer)</strong>：定义一个接收通知的更新接口。</li></ul><p><strong>核心价值与优点</strong></p><ul><li><strong>松耦合</strong>：主题与观察者互不知晓对方细节，仅通过接口交互，独立性极强。</li><li><strong>动态联动</strong>：支持在运行时动态地添加或删除观察者，非常灵活。</li><li><strong>广播通信</strong>：主题的一次调用可以触发所有观察者的更新。</li></ul><p><strong>经典应用场景</strong></p><ul><li><strong>GUI 事件处理</strong>：按钮、鼠标等控件（主题）的事件监听器（观察者）。</li><li><strong>发布-订阅消息队列</strong>：Kafka、RabbitMQ 等中间件（分布式观察者模式）。</li><li><strong>前端响应式框架</strong>：Vue/React 的响应式系统（数据变 → 视图自动更新）。</li><li><strong>MVC 架构</strong>：模型（Model）数据变化 → 自动通知视图（View）更新。</li><li><strong>社交媒体推送</strong>：你关注的人（主题）发帖 → 你（观察者）的时间线更新。</li></ul><h3 id="【中等】什么是模板方法模式-有哪些经典的应用场景" tabindex="-1"><a class="header-anchor" href="#【中等】什么是模板方法模式-有哪些经典的应用场景" aria-hidden="true">#</a> 【中等】什么是模板方法模式？有哪些经典的应用场景？</h3><p><strong>模板方法模式中，父类定义算法骨架（模板方法），子类实现具体步骤</strong>。实现“流程固定，细节可变”，确保逻辑顺序一致的同时允许特定步骤个性化。</p><p><strong>两大核心角色</strong></p><ul><li><strong>抽象类 (Abstract Class)</strong>： <ul><li>包含一个 <strong><code>final</code> 模板方法</strong>（定义不可更改的算法流程）。</li><li>包含<strong>抽象方法</strong>（必须由子类实现）、<strong>具体方法</strong>（通用步骤）和<strong>钩子方法</strong>（可选步骤，提供额外扩展点）。</li></ul></li><li><strong>具体子类 (Concrete Class)</strong>：<strong>仅负责实现父类定义的抽象方法</strong>，填充算法骨架中的具体步骤。</li></ul><p><strong>核心价值与优点</strong></p><ul><li><strong>代码复用</strong>：将公共流程提升至父类，避免子类代码重复。</li><li><strong>反向控制（好莱坞原则）</strong>：父类控制流程，“调用”子类，而非子类调用父类。</li><li><strong>便于扩展与维护</strong>：新增行为只需增加子类；修改流程只需改动父类一处。</li></ul><p><strong>经典应用场景</strong></p><ul><li><strong>框架设计</strong>：是框架的基石，定义扩展流程。 <ul><li><strong>Java Servlet</strong>：<code>HttpServlet.service()</code> 是模板方法，调用开发者重写的 <code>doGet()/doPost()</code>。</li><li><strong>Spring JdbcTemplate</strong>：固定了数据库操作流程（取连接、执行、释放资源），开发者提供 SQL 和结果处理逻辑。</li></ul></li><li><strong>单元测试</strong>：<strong>JUnit</strong> 的 <code>TestCase</code> 定义了 <code>setUp() → testMethod() → tearDown()</code> 的标准流程。</li><li><strong>生命周期管理</strong>：<strong>Android Activity</strong> 的生命周期方法调用顺序由系统框架固定。</li><li><strong>通用算法</strong>：Java 集合框架的 <code>AbstractList</code> 提供了基于 <code>get()</code> 和 <code>size()</code> 的通用算法实现。</li></ul><h3 id="【中等】什么是责任链模式-有哪些经典的应用场景" tabindex="-1"><a class="header-anchor" href="#【中等】什么是责任链模式-有哪些经典的应用场景" aria-hidden="true">#</a> 【中等】什么是责任链模式？有哪些经典的应用场景？</h3><p><strong>责任链模式将处理请求的对象连成一条链，请求沿链传递，直到有一个对象处理它为止</strong>。实现“谁有空谁处理”的“踢皮球”机制。</p><p><strong>两大核心角色</strong></p><ol><li><strong>处理者 (Handler)</strong>：定义处理请求的接口，并持有下一个处理者的引用。</li><li><strong>具体处理者 (Concrete Handler)</strong>：实现处理接口。能处理则处理，不能处理则转发给下一个。</li></ol><p><strong>核心价值与优点</strong></p><ul><li><strong>解耦</strong>：<strong>请求发送者无需知道谁处理请求</strong>，只需向链首提交。</li><li><strong>动态灵活</strong>：可动态增删或调整处理者顺序，灵活改变处理流程。</li><li><strong>职责清晰</strong>：每个处理者只需关注自己的职责范围。</li></ul><p><strong>经典应用场景</strong></p><ul><li><strong>审批流程</strong>：多级审批（如报销、请假），根据金额、类型等条件由不同级别领导处理。</li><li><strong>Web 过滤器/拦截器</strong>：<strong>Java Servlet FilterChain</strong> 和 <strong>Spring Interceptor</strong>，请求依次通过权限校验、日志、编码等过滤器。</li><li><strong>异常处理</strong>：Java 的 <code>try-catch</code> 块就是责任链，沿调用栈寻找匹配的异常处理器。</li><li><strong>事件冒泡</strong>：UI 编程中（如浏览器 DOM），事件从子元素向父元素逐级传播处理。</li><li><strong>日志系统</strong>：日志消息根据级别（DEBUG, ERROR）被传递到不同的输出端（控制台、文件）。</li></ul><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>',57),P={href:"https://www.mianshiya.com/bank/1801559627969929217",target:"_blank",rel:"noopener noreferrer"};function L(R,T){const e=i("RouterLink"),c=i("Tabs"),u=i("ExternalLinkIcon");return p(),E("div",null,[A,n("ul",null,[n("li",null,[k,t("：创建型模式提供了创建对象的机制， 能够提升已有代码的灵活性和可复用性。 "),n("ul",null,[n("li",null,[a(e,{to:"/03.%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.html"},{default:s(()=>[t("简单工厂模式 (Simple Factory)")]),_:1})]),n("li",null,[a(e,{to:"/03.%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.html"},{default:s(()=>[t("工厂方法模式 (Factory Method)")]),_:1})]),n("li",null,[a(e,{to:"/03.%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.html"},{default:s(()=>[t("抽象工厂模式 (Abstract Factory)")]),_:1})]),n("li",null,[a(e,{to:"/03.%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F.html"},{default:s(()=>[t("建造者模式 (Builder)")]),_:1})]),n("li",null,[a(e,{to:"/03.%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F.html"},{default:s(()=>[t("原型模式 (Prototype)")]),_:1})]),n("li",null,[a(e,{to:"/03.%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html"},{default:s(()=>[t("单例模式 (Singleton)")]),_:1})])])]),n("li",null,[h,t("：结构型模式介绍如何将对象和类组装成较大的结构， 并同时保持结构的灵活和高效。 "),n("ul",null,[n("li",null,[a(e,{to:"/03.%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F.html"},{default:s(()=>[t("适配器模式 (Adapter)")]),_:1})]),n("li",null,[a(e,{to:"/03.%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F.html"},{default:s(()=>[t("桥接模式 (Bridge)")]),_:1})]),n("li",null,[a(e,{to:"/03.%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F.html"},{default:s(()=>[t("组合模式 (Composite)")]),_:1})]),n("li",null,[a(e,{to:"/03.%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F.html"},{default:s(()=>[t("装饰模式 (Decorator)")]),_:1})]),n("li",null,[a(e,{to:"/03.%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F.html"},{default:s(()=>[t("外观模式 (Facade)")]),_:1})]),n("li",null,[a(e,{to:"/03.%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F.html"},{default:s(()=>[t("享元模式 (Flyweight)")]),_:1})]),n("li",null,[a(e,{to:"/03.%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.html"},{default:s(()=>[t("代理模式 (Proxy)")]),_:1})])])]),n("li",null,[m,t("：行为模式负责对象间的高效沟通和职责委派。 "),n("ul",null,[n("li",null,[a(e,{to:"/03.%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.html"},{default:s(()=>[t("模板方法模式 (Template Method)")]),_:1})]),n("li",null,[a(e,{to:"/03.%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F.html"},{default:s(()=>[t("命令模式 (Command)")]),_:1})]),n("li",null,[a(e,{to:"/03.%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F.html"},{default:s(()=>[t("迭代器模式 (Iterator)")]),_:1})]),n("li",null,[a(e,{to:"/03.%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.html"},{default:s(()=>[t("观察者模式 (Observer)")]),_:1})]),n("li",null,[a(e,{to:"/03.%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F.html"},{default:s(()=>[t("解释器模式 (Interpreter)")]),_:1})]),n("li",null,[a(e,{to:"/03.%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F.html"},{default:s(()=>[t("中介者模式 (Mediator)")]),_:1})]),n("li",null,[a(e,{to:"/03.%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F.html"},{default:s(()=>[t("职责链模式 (Chain of Responsibility)")]),_:1})]),n("li",null,[a(e,{to:"/03.%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F.html"},{default:s(()=>[t("备忘录模式 (Memento)")]),_:1})]),n("li",null,[a(e,{to:"/03.%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.html"},{default:s(()=>[t("策略模式 (Strategy)")]),_:1})]),n("li",null,[a(e,{to:"/03.%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F.html"},{default:s(()=>[t("访问者模式 (Visitor)")]),_:1})]),n("li",null,[a(e,{to:"/03.%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F.html"},{default:s(()=>[t("状态模式 (State)")]),_:1})])])])]),B,v,a(c,{id:"176",data:[{id:"懒汉式"},{id:"饿汉式"},{id:"双重检查锁"},{id:"静态内部类"}],"tab-id":"单例模式"},{title0:s(({value:l,isActive:o})=>[t("懒汉式")]),title1:s(({value:l,isActive:o})=>[t("饿汉式")]),title2:s(({value:l,isActive:o})=>[t("双重检查锁")]),title3:s(({value:l,isActive:o})=>[t("静态内部类")]),tab0:s(({value:l,isActive:o})=>[b,y]),tab1:s(({value:l,isActive:o})=>[f]),tab2:s(({value:l,isActive:o})=>[_,C,w]),tab3:s(({value:l,isActive:o})=>[F,x,S,I,D,J,M,j]),_:1}),N,n("ul",null,[n("li",null,[n("a",P,[t("面试鸭 - 设计模式面试"),a(u)])])])])}const U=d(g,[["render",L],["__file","index.html.vue"]]);export{U as default};
