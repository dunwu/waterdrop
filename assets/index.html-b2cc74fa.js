import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c as l,a as n,b as a,d as t,e as c}from"./app-70dbecd6.js";const i={},u=c(`<h1 id="一篇文章让你彻底掌握-scala" tabindex="-1"><a class="header-anchor" href="#一篇文章让你彻底掌握-scala" aria-hidden="true">#</a> 一篇文章让你彻底掌握 Scala</h1><blockquote><p>Scala 是大数据领域的热门语言，如：Akka、Kafka，所以，想要学习大数据顶级开源项目的源码，有必要具备一定的 Scala 基础。</p></blockquote><h2 id="基本语法" tabindex="-1"><a class="header-anchor" href="#基本语法" aria-hidden="true">#</a> 基本语法</h2><p>Scala 基本语法需要注意以下几点：</p><ul><li><strong>区分大小写</strong> - Scala 是大小写敏感的。</li><li><strong>类名</strong> - 对于所有的类名的第一个字母要大写。示例：<code>class MyFirstScalaClass</code></li><li><strong>方法名称</strong> - 所有的方法名称的第一个字母用小写。示例：<code>def myMethodName()</code></li><li><strong>程序文件名</strong> - 程序文件的名称应该与对象名称完全匹配(新版本不需要了，但建议保留这种习惯)。示例: 假设&quot;HelloWorld&quot;是对象的名称。那么该文件应保存为&#39;HelloWorld.scala&quot;</li><li><strong><code>def main(args: Array[String])</code></strong> - Scala 程序从 <code>main()</code> 方法开始处理，这是每一个 Scala 程序的强制程序入口部分。</li><li>一行中只有空格或者带有注释，Scala 会认为其是空行，会忽略它。标记可以被空格或者注释来分割。</li><li>Scala 是面向行的语言，语句可以用分号（;）结束或换行符。</li></ul><h2 id="注释" tabindex="-1"><a class="header-anchor" href="#注释" aria-hidden="true">#</a> 注释</h2><p>Scala 类似 Java 支持单行和多行注释。</p><p>【示例】单行和多行注释</p><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code><span class="token keyword">object</span> HelloWorld <span class="token punctuation">{</span>
  <span class="token comment">/*
   * 这是我的第一个 Scala 程序
   * 以下程序将输出&#39;Hello World!&#39;
   */</span>
  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    println<span class="token punctuation">(</span><span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 输出 Hello World</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h2><p>在 Scala 中，使用关键词 <code>var</code> 声明变量，使用关键词 <code>val</code> 声明常量。</p><p>【示例】声明变量</p><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code><span class="token keyword">var</span> myVar <span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token string">&quot;Foo&quot;</span>
<span class="token keyword">var</span> myVar <span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token string">&quot;Too&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>【示例】声明常量</p><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code><span class="token keyword">val</span> myVal <span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token string">&quot;Foo&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="变量类型声明" tabindex="-1"><a class="header-anchor" href="#变量类型声明" aria-hidden="true">#</a> 变量类型声明</h3><p>变量的类型在变量名之后等号之前声明。定义变量的类型的语法格式如下：</p><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code><span class="token comment">// 声明变量类型</span>
<span class="token keyword">var</span> VariableName <span class="token operator">:</span> DataType <span class="token punctuation">[</span><span class="token operator">=</span>  Initial Value<span class="token punctuation">]</span>
<span class="token comment">// 声明常量类型</span>
<span class="token keyword">val</span> VariableName <span class="token operator">:</span> DataType <span class="token punctuation">[</span><span class="token operator">=</span>  Initial Value<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Scala 中声明变量和常量不一定要指明数据类型，在没有指明数据类型的情况下，其数据类型是通过变量或常量的初始值推断出来的。所以，如果在没有指明数据类型的情况下声明变量或常量必须要给出其初始值，否则将会报错。</p><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code><span class="token keyword">var</span> myVar <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">val</span> myVal <span class="token operator">=</span> <span class="token string">&quot;Hello, Scala!&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">val</span> xmax<span class="token punctuation">,</span> ymax <span class="token operator">=</span> <span class="token number">100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h2><p>Scala 与 Java 有着相同的数据类型：</p><table><thead><tr><th style="text-align:left;">数据类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">Byte</td><td style="text-align:left;">8 位有符号补码整数。数值区间为 -128 到 127</td></tr><tr><td style="text-align:left;">Short</td><td style="text-align:left;">16 位有符号补码整数。数值区间为 -32768 到 32767</td></tr><tr><td style="text-align:left;">Int</td><td style="text-align:left;">32 位有符号补码整数。数值区间为 -2147483648 到 2147483647</td></tr><tr><td style="text-align:left;">Long</td><td style="text-align:left;">64 位有符号补码整数。数值区间为 -9223372036854775808 到 9223372036854775807</td></tr><tr><td style="text-align:left;">Float</td><td style="text-align:left;">32 位, IEEE 754 标准的单精度浮点数</td></tr><tr><td style="text-align:left;">Double</td><td style="text-align:left;">64 位 IEEE 754 标准的双精度浮点数</td></tr><tr><td style="text-align:left;">Char</td><td style="text-align:left;">16 位无符号 Unicode 字符, 区间值为 U+0000 到 U+FFFF</td></tr><tr><td style="text-align:left;">String</td><td style="text-align:left;">字符序列</td></tr><tr><td style="text-align:left;">Boolean</td><td style="text-align:left;">true 或 false</td></tr><tr><td style="text-align:left;">Unit</td><td style="text-align:left;">表示无值，和其他语言中 void 等同。用作不返回任何结果的方法的结果类型。Unit 只有一个实例值，写成()。</td></tr><tr><td style="text-align:left;">Null</td><td style="text-align:left;">null 或空引用</td></tr><tr><td style="text-align:left;">Nothing</td><td style="text-align:left;">Nothing 类型在 Scala 的类层级的最底端；它是任何其他类型的子类型。</td></tr><tr><td style="text-align:left;">Any</td><td style="text-align:left;">Any 是所有其他类的超类</td></tr><tr><td style="text-align:left;">AnyRef</td><td style="text-align:left;">AnyRef 类是 Scala 里所有引用类(reference class)的基类</td></tr></tbody></table><p>上表中列出的数据类型都是<strong>对象</strong>，也就是说 scala 没有 java 中的原生类型。在 scala 是可以对数字等基础类型调用方法的。</p><h2 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h2><p>Scala 数组声明的语法格式：</p><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code><span class="token comment">// 方式一</span>
<span class="token keyword">var</span> z<span class="token operator">:</span>Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token comment">// 方式二</span>
<span class="token keyword">var</span> z <span class="token operator">=</span> <span class="token keyword">new</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="逻辑控制语句" tabindex="-1"><a class="header-anchor" href="#逻辑控制语句" aria-hidden="true">#</a> 逻辑控制语句</h2><h3 id="条件语句" tabindex="-1"><a class="header-anchor" href="#条件语句" aria-hidden="true">#</a> 条件语句</h3><p>【示例】条件语句</p><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code><span class="token keyword">object</span> IfDemo <span class="token punctuation">{</span>
  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      println<span class="token punctuation">(</span><span class="token string">&quot;X 的值为 10&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      println<span class="token punctuation">(</span><span class="token string">&quot;X 的值为 20&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      println<span class="token punctuation">(</span><span class="token string">&quot;X 的值为 30&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      println<span class="token punctuation">(</span><span class="token string">&quot;无法判断 X 的值&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="循环语句" tabindex="-1"><a class="header-anchor" href="#循环语句" aria-hidden="true">#</a> 循环语句</h3><p>和 Java 一样，Scala 支持 <code>while</code>、<code>do ... while</code>、<code>for</code> 三种循环语句。</p><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code><span class="token keyword">object</span> WhileDemo <span class="token punctuation">{</span>
  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 局部变量</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

    <span class="token comment">// while 循环执行</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      println<span class="token punctuation">(</span><span class="token string">&quot;Value of a: &quot;</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
      a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>scala 不支持 <code>break</code> 和 <code>continue</code></strong>。但是，可以通过 <code>Breaks</code> 对象来进行循环控制。</p><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code><span class="token keyword">import</span> <span class="token namespace">scala<span class="token punctuation">.</span>util<span class="token punctuation">.</span>control<span class="token punctuation">.</span></span>_

<span class="token keyword">object</span> BreakDemo <span class="token punctuation">{</span>
  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">val</span> numList1 <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">val</span> numList2 <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">val</span> outer <span class="token operator">=</span> <span class="token keyword">new</span> Breaks<span class="token punctuation">;</span>
    <span class="token keyword">val</span> inner <span class="token operator">=</span> <span class="token keyword">new</span> Breaks<span class="token punctuation">;</span>

    outer<span class="token punctuation">.</span>breakable <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span>a <span class="token keyword">&lt;-</span> numList1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        println<span class="token punctuation">(</span><span class="token string">&quot;Value of a: &quot;</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        inner<span class="token punctuation">.</span>breakable <span class="token punctuation">{</span>
          <span class="token keyword">for</span> <span class="token punctuation">(</span>b <span class="token keyword">&lt;-</span> numList2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            println<span class="token punctuation">(</span><span class="token string">&quot;Value of b: &quot;</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              inner<span class="token punctuation">.</span>break<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token comment">// 内嵌循环中断</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token comment">// 外部循环中断</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模式匹配" tabindex="-1"><a class="header-anchor" href="#模式匹配" aria-hidden="true">#</a> 模式匹配</h3><p>scala 的 <code>match</code> 对应 Java 里的 <code>switch</code>，但是写在选择器表达式之后。即： <strong>选择器 match {备选项}。</strong></p><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code><span class="token comment">/**
  * @author peng.zhang
  */</span>
<span class="token keyword">object</span> MatchDemo <span class="token punctuation">{</span>
  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    println<span class="token punctuation">(</span>matchTest<span class="token punctuation">(</span><span class="token string">&quot;two&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    println<span class="token punctuation">(</span>matchTest<span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    println<span class="token punctuation">(</span>matchTest<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    println<span class="token punctuation">(</span>matchTest<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token punctuation">}</span>

  <span class="token keyword">def</span> matchTest<span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">Any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Any</span> <span class="token operator">=</span> x <span class="token keyword">match</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token number">1</span>      <span class="token keyword">=&gt;</span> <span class="token string">&quot;one&quot;</span>
    <span class="token keyword">case</span> <span class="token string">&quot;two&quot;</span>  <span class="token keyword">=&gt;</span> <span class="token number">2</span>
    <span class="token keyword">case</span> y<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token keyword">=&gt;</span> <span class="token string">&quot;scala.Int&quot;</span>
    <span class="token keyword">case</span> _      <span class="token keyword">=&gt;</span> <span class="token string">&quot;many&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h2><p>Scala 含有丰富的内置运算符，包括以下几种类型：</p><ul><li>算术运算符：<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、<code>%</code></li><li>关系运算符：<code>==</code>、<code>!=</code>、<code>&gt;</code>、<code>&lt;</code>、<code>&gt;=</code>、<code>&lt;=</code></li><li>逻辑运算符：<code>&amp;&amp;</code>、<code>||</code>、<code>!</code></li><li>位运算符：<code>~</code>、<code>&amp;</code>、<code>|</code>、<code>^</code>、<code>&lt;&lt;</code>、<code>&gt;&gt;</code>、<code>&gt;&gt;&gt;</code> （无符号右移）</li><li>赋值运算符：<code>=</code></li></ul><h2 id="方法与函数" tabindex="-1"><a class="header-anchor" href="#方法与函数" aria-hidden="true">#</a> 方法与函数</h2><p>Scala 有方法与函数，二者在语义上的区别很小。</p><p>Scala 中的方法跟 Java 的类似，方法是组成类的一部分。</p><p>Scala 中的函数则是一个完整的对象，Scala 中的函数其实就是继承了 Trait 的类的对象。</p><p>Scala 中使用 <code>val</code> 语句可以定义函数，<code>def</code> 语句定义方法。</p><p>【示例】</p><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code><span class="token keyword">class</span> Test <span class="token punctuation">{</span>
  <span class="token keyword">def</span> m<span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">3</span>
  <span class="token keyword">val</span> f <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token keyword">=&gt;</span> x <span class="token operator">+</span> <span class="token number">3</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包" aria-hidden="true">#</a> 闭包</h2><p>闭包是一个函数，返回值依赖于声明在函数外部的一个或多个变量。</p><p>闭包通常来讲可以简单的认为是可以访问一个函数里面局部变量的另外一个函数。</p><p>如下面这段匿名的函数：</p><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code><span class="token keyword">val</span> multiplier <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token keyword">=&gt;</span> i <span class="token operator">*</span> <span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>函数体内有一个变量 i，它作为函数的一个参数。如下面的另一段代码：</p><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code><span class="token keyword">val</span> multiplier <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token keyword">=&gt;</span> i <span class="token operator">*</span> factor
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在 multiplier 中有两个变量：i 和 factor。其中的一个 i 是函数的形式参数，在 multiplier 函数被调用时，i 被赋予一个新的值。然而，factor 不是形式参数，而是自由变量，考虑下面代码：</p><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code><span class="token keyword">var</span> factor <span class="token operator">=</span> <span class="token number">3</span>
<span class="token keyword">val</span> multiplier <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token keyword">=&gt;</span> i <span class="token operator">*</span> factor
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们引入一个自由变量 factor，这个变量定义在函数外面。</p><p>这样定义的函数变量 multiplier 成为一个&quot;闭包&quot;，因为它引用到函数外面定义的变量，定义这个函数的过程是将这个自由变量捕获而构成一个封闭的函数。</p><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code><span class="token keyword">object</span> ClosureDemo <span class="token punctuation">{</span>
  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    println<span class="token punctuation">(</span><span class="token string">&quot;muliplier(1) value = &quot;</span> <span class="token operator">+</span> multiplier<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    println<span class="token punctuation">(</span><span class="token string">&quot;muliplier(2) value = &quot;</span> <span class="token operator">+</span> multiplier<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">var</span> factor <span class="token operator">=</span> <span class="token number">3</span>
  <span class="token keyword">val</span> multiplier <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token keyword">=&gt;</span> i <span class="token operator">*</span> factor
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="集合" tabindex="-1"><a class="header-anchor" href="#集合" aria-hidden="true">#</a> 集合</h2><p>Scala 集合支持 List、Set、Map、元祖、Option。</p><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code><span class="token comment">// 定义整型 List</span>
<span class="token keyword">val</span> x <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>

<span class="token comment">// 定义 Set</span>
<span class="token keyword">val</span> x <span class="token operator">=</span> Set<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span>

<span class="token comment">// 定义 Map</span>
<span class="token keyword">val</span> x <span class="token operator">=</span> Map<span class="token punctuation">(</span><span class="token string">&quot;one&quot;</span> <span class="token operator">-&gt;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;two&quot;</span> <span class="token operator">-&gt;</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;three&quot;</span> <span class="token operator">-&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span>

<span class="token comment">// 创建两个不同类型元素的元组</span>
<span class="token keyword">val</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&quot;Runoob&quot;</span><span class="token punctuation">)</span>

<span class="token comment">// 定义 Option</span>
<span class="token keyword">val</span> x<span class="token operator">:</span>Option<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> Some<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="迭代器" tabindex="-1"><a class="header-anchor" href="#迭代器" aria-hidden="true">#</a> 迭代器</h3><p>迭代器 it 的两个基本操作是 <strong>next</strong> 和 <strong>hasNext</strong>。</p><p>调用 <strong>it.next()</strong> 会返回迭代器的下一个元素，并且更新迭代器的状态。</p><p>调用 <strong>it.hasNext()</strong> 用于检测集合中是否还有元素。</p><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code><span class="token keyword">object</span> Test <span class="token punctuation">{</span>
   <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">val</span> it <span class="token operator">=</span> Iterator<span class="token punctuation">(</span><span class="token string">&quot;Baidu&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Google&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Runoob&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Taobao&quot;</span><span class="token punctuation">)</span>

      <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span>hasNext<span class="token punctuation">)</span><span class="token punctuation">{</span>
         println<span class="token punctuation">(</span>it<span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="类和对象" tabindex="-1"><a class="header-anchor" href="#类和对象" aria-hidden="true">#</a> 类和对象</h2><p>类是对象的抽象，而对象是类的具体实例。类是抽象的，不占用内存，而对象是具体的，占用存储空间。类是用于创建对象的蓝图，它是一个定义包括在特定类型的对象中的方法和变量的软件模板。</p><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code><span class="token keyword">class</span> Point<span class="token punctuation">(</span><span class="token keyword">val</span> xc<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token keyword">val</span> yc<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> x<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> xc
  <span class="token keyword">var</span> y<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> yc

  <span class="token keyword">def</span> move<span class="token punctuation">(</span>dx<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> dy<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    x <span class="token operator">=</span> x <span class="token operator">+</span> dx
    y <span class="token operator">=</span> y <span class="token operator">+</span> dy
    println<span class="token punctuation">(</span><span class="token string">&quot;x 的坐标点 : &quot;</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    println<span class="token punctuation">(</span><span class="token string">&quot;y 的坐标点 : &quot;</span> <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> Location<span class="token punctuation">(</span><span class="token keyword">override</span> <span class="token keyword">val</span> xc<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token keyword">override</span> <span class="token keyword">val</span> yc<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token keyword">val</span> zc<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span>
    <span class="token keyword">extends</span> Point<span class="token punctuation">(</span>xc<span class="token punctuation">,</span> yc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> z<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> zc

  <span class="token keyword">def</span> move<span class="token punctuation">(</span>dx<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> dy<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> dz<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    x <span class="token operator">=</span> x <span class="token operator">+</span> dx
    y <span class="token operator">=</span> y <span class="token operator">+</span> dy
    z <span class="token operator">=</span> z <span class="token operator">+</span> dz
    println<span class="token punctuation">(</span><span class="token string">&quot;x 的坐标点 : &quot;</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    println<span class="token punctuation">(</span><span class="token string">&quot;y 的坐标点 : &quot;</span> <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    println<span class="token punctuation">(</span><span class="token string">&quot;z 的坐标点 : &quot;</span> <span class="token operator">+</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">object</span> Test <span class="token punctuation">{</span>
  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> loc <span class="token operator">=</span> <span class="token keyword">new</span> Location<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 移到一个新的位置</span>
    loc<span class="token punctuation">.</span>move<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="trait" tabindex="-1"><a class="header-anchor" href="#trait" aria-hidden="true">#</a> Trait</h2><p>Scala Trait(特征) 相当于 Java 的接口，实际上它比接口还功能强大。</p><p>与接口不同的是，它还可以定义属性和方法的实现。</p><p>一般情况下 Scala 的类只能够继承单一父类，但是如果是 Trait(特征) 的话就可以继承多个，从结果来看就是实现了多重继承。</p><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code><span class="token keyword">trait</span> Equal <span class="token punctuation">{</span>
  <span class="token keyword">def</span> isEqual<span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">Any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Boolean</span>

  <span class="token keyword">def</span> isNotEqual<span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">Any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Boolean</span> <span class="token operator">=</span> <span class="token operator">!</span>isEqual<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> Point<span class="token punctuation">(</span>xc<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> yc<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> Equal <span class="token punctuation">{</span>
  <span class="token keyword">var</span> x<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> xc
  <span class="token keyword">var</span> y<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> yc

  <span class="token keyword">def</span> isEqual<span class="token punctuation">(</span>obj<span class="token operator">:</span> <span class="token builtin">Any</span><span class="token punctuation">)</span> <span class="token operator">=</span>
    obj<span class="token punctuation">.</span>isInstanceOf<span class="token punctuation">[</span>Point<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span>
      obj<span class="token punctuation">.</span>asInstanceOf<span class="token punctuation">[</span>Point<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">==</span> x
<span class="token punctuation">}</span>

<span class="token keyword">object</span> Test <span class="token punctuation">{</span>
  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> Point<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> Point<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> p3 <span class="token operator">=</span> <span class="token keyword">new</span> Point<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>

    println<span class="token punctuation">(</span>p1<span class="token punctuation">.</span>isNotEqual<span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">)</span>
    println<span class="token punctuation">(</span>p1<span class="token punctuation">.</span>isNotEqual<span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">)</span>
    println<span class="token punctuation">(</span>p1<span class="token punctuation">.</span>isNotEqual<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="异常" tabindex="-1"><a class="header-anchor" href="#异常" aria-hidden="true">#</a> 异常</h2><p>Scala 抛出异常的方法和 Java 一样，使用 <code>throw</code> 关键词。</p><p>【示例】抛出异常</p><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code><span class="token keyword">throw</span> <span class="token keyword">new</span> IllegalArgumentException
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>【示例】捕获异常</p><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token punctuation">{</span>FileNotFoundException<span class="token punctuation">,</span> FileReader<span class="token punctuation">,</span> IOException<span class="token punctuation">}</span>

<span class="token keyword">object</span> Test <span class="token punctuation">{</span>
  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">val</span> f <span class="token operator">=</span> <span class="token keyword">new</span> FileReader<span class="token punctuation">(</span><span class="token string">&quot;input.txt&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> ex<span class="token operator">:</span> FileNotFoundException <span class="token keyword">=&gt;</span> <span class="token punctuation">{</span>
        println<span class="token punctuation">(</span><span class="token string">&quot;Missing file exception&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">case</span> ex<span class="token operator">:</span> IOException <span class="token keyword">=&gt;</span> <span class="token punctuation">{</span>
        println<span class="token punctuation">(</span><span class="token string">&quot;IO Exception&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
      println<span class="token punctuation">(</span><span class="token string">&quot;Exiting finally...&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="输入输出" tabindex="-1"><a class="header-anchor" href="#输入输出" aria-hidden="true">#</a> 输入输出</h2><h3 id="读取用户输入" tabindex="-1"><a class="header-anchor" href="#读取用户输入" aria-hidden="true">#</a> 读取用户输入</h3><p>使用 <code>scala.io.StdIn.readLine()</code> 方法读取用户输入</p><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code><span class="token keyword">object</span> StdInDemo <span class="token punctuation">{</span>
  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    print<span class="token punctuation">(</span><span class="token string">&quot;请输入内容: &quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> line <span class="token operator">=</span> StdIn<span class="token punctuation">.</span>readLine<span class="token punctuation">(</span><span class="token punctuation">)</span>

    println<span class="token punctuation">(</span><span class="token string">&quot;你输入的是: &quot;</span> <span class="token operator">+</span> line<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="读取文件内容" tabindex="-1"><a class="header-anchor" href="#读取文件内容" aria-hidden="true">#</a> 读取文件内容</h3><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code><span class="token keyword">object</span> SourceDemo <span class="token punctuation">{</span>
  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    println<span class="token punctuation">(</span><span class="token string">&quot;文件内容为:&quot;</span><span class="token punctuation">)</span>

    Source<span class="token punctuation">.</span>fromFile<span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach <span class="token punctuation">{</span>
      print
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="包" tabindex="-1"><a class="header-anchor" href="#包" aria-hidden="true">#</a> 包</h2><h3 id="定义包" tabindex="-1"><a class="header-anchor" href="#定义包" aria-hidden="true">#</a> 定义包</h3><p>Scala 使用 <code>package</code> 关键字定义包，在 Scala 将代码定义到某个包中有两种方式：</p><p>第一种方法和 Java 一样，在文件的头定义包名，这种方法就后续所有代码都放在该包中。 比如：</p><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>runoob</span>
<span class="token keyword">class</span> HelloWorld
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>第二种方法有些类似 C#，如：</p><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>runoob</span> <span class="token punctuation">{</span>
  <span class="token keyword">class</span> HelloWorld
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="引用" tabindex="-1"><a class="header-anchor" href="#引用" aria-hidden="true">#</a> 引用</h3><p>Scala 使用 <code>import</code> 关键字引用包。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>import java.awt.Color  // 引入Color

import java.awt._  // 引入包内所有成员

def handler(evt: event.ActionEvent) { // java.awt.event.ActionEvent
  ...  // 因为引入了java.awt，所以可以省去前面的部分
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>import 语句可以出现在任何地方，而不是只能在文件顶部。import 的效果从开始延伸到语句块的结束。这可以大幅减少名称冲突的可能性。</p><p>如果想要引入包中的几个成员，可以使用 selector（选取器）：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>import java.awt.{Color, Font}

// 重命名成员
import java.util.{HashMap =&gt; JavaHashMap}

// 隐藏成员
import java.util.{HashMap =&gt; _, _} // 引入了util包的所有成员，但是HashMap被隐藏了
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>**注意：**默认情况下，Scala 总会引入 java.lang._ 、 scala._ 和 Predef._，这里也能解释，为什么以 scala 开头的包，在使用时都是省去 scala.的。</p></blockquote><h3 id="访问修饰符" tabindex="-1"><a class="header-anchor" href="#访问修饰符" aria-hidden="true">#</a> 访问修饰符</h3><p>Scala 访问修饰符基本和 Java 的一样，分别有：private，protected，public。</p><p>如果没有指定访问修饰符，默认情况下，Scala 对象的访问级别都是 public。</p><p>Scala 中的 private 限定符，比 Java 更严格，在嵌套类情况下，外层类甚至不能访问被嵌套类的私有成员。</p><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code><span class="token keyword">class</span> Outer <span class="token punctuation">{</span>

  <span class="token keyword">class</span> Inner <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">def</span> f<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      println<span class="token punctuation">(</span><span class="token string">&quot;f&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">class</span> InnerMost <span class="token punctuation">{</span>
      f<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 正确</span>
    <span class="token punctuation">}</span>

  <span class="token punctuation">}</span>

  <span class="token punctuation">(</span><span class="token keyword">new</span> Inner<span class="token punctuation">)</span><span class="token punctuation">.</span>f<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//错误</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,109),r={href:"https://www.scala-lang.org/",target:"_blank",rel:"noopener noreferrer"},d={href:"https://www.runoob.com/scala/scala-tutorial.html",target:"_blank",rel:"noopener noreferrer"};function k(v,m){const s=p("ExternalLinkIcon");return o(),l("div",null,[u,n("ul",null,[n("li",null,[n("a",r,[a("Scala 官网"),t(s)])]),n("li",null,[n("a",d,[a("Scala 菜鸟教程"),t(s)])])])])}const h=e(i,[["render",k],["__file","index.html.vue"]]);export{h as default};
