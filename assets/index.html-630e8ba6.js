import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as i,c as l,a as n,b as a,d as e,f as c,e as t}from"./app-4a721680.js";const d={},r=n("h1",{id:"《极客时间教程-mongodb-高手课》笔记一",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#《极客时间教程-mongodb-高手课》笔记一","aria-hidden":"true"},"#"),a(" 《极客时间教程 - MongoDB 高手课》笔记一")],-1),u={href:"https://time.geekbang.org/course/intro/100040001",target:"_blank",rel:"noopener noreferrer"},k=t(`<h2 id="第一章-mongodb-再入门" tabindex="-1"><a class="header-anchor" href="#第一章-mongodb-再入门" aria-hidden="true">#</a> 第一章：MongoDB 再入门</h2><h3 id="mongodb-简介" tabindex="-1"><a class="header-anchor" href="#mongodb-简介" aria-hidden="true">#</a> MongoDB 简介</h3><p>什么是 MongoDB？</p><p>一个以 JSON 为数据模型的文档数据库。</p><p>为什么叫文档数据库？</p><p>文档来自于“JSON Document”，并非我们一般理解的 PDF，WORD 文档。</p><p>谁开发 MongDB？</p><p>上市公司 MongoDB Inc. ，总部位于美国纽约。</p><p>主要用途</p><ul><li>应用数据库，类似于 Oracle, MySQL</li><li>海量数据处理，数据平台。</li></ul><p>主要特点</p><ul><li><p>建模为可选</p></li><li><p>JSON 数据模型比较适合开发者</p></li><li><p>横向扩展可以支撑很大数据量和并发</p></li></ul><p>MongoDB 是免费的吗？</p><p>MongoDB 有两个发布版本：社区版和企业版。</p><ul><li>社区版是基于 SSPL，一种和 AGPL 基本类似的开源协议 。</li><li>企业版是基于商业协议，需付费使用。</li></ul><h3 id="mongodb-vs-rdbms" tabindex="-1"><a class="header-anchor" href="#mongodb-vs-rdbms" aria-hidden="true">#</a> MongoDB vs. RDBMS</h3><table><thead><tr><th></th><th>MongoDB</th><th>RDBMS</th></tr></thead><tbody><tr><td>数据模型</td><td>文档模型</td><td>关系模型</td></tr><tr><td>数据库类型</td><td>OLTP</td><td>OLTP</td></tr><tr><td>CRUD 操作</td><td>MQL/SQL</td><td>SQL</td></tr><tr><td>高可用</td><td>复制集</td><td>集群模式</td></tr><tr><td>横向扩展能力</td><td>通过原生分片完善支持</td><td>数据分区或者应用侵入式</td></tr><tr><td>索引支持</td><td>B-树、全文索引、地理位置索引、多键 (multikey) 索引、TTL 索引</td><td>B 树</td></tr><tr><td>开发难度</td><td>容易</td><td>困难</td></tr><tr><td>数据容量</td><td>没有理论上限</td><td>千万、亿</td></tr><tr><td>扩展方式</td><td>垂直扩展+水平扩展</td><td>垂直扩展</td></tr></tbody></table><h3 id="mongodb-特色及优势" tabindex="-1"><a class="header-anchor" href="#mongodb-特色及优势" aria-hidden="true">#</a> MongoDB 特色及优势</h3><p>文档模型的面向对象特点</p><p>灵活：快速响应业务变化</p><ul><li>多形性：同一个集合中可以包含 不同字段（类型）的文档对象</li><li>动态性：线上修改数据模式，修 改是应用与数据库均无须下线</li><li>数据治理：支持使用 JSON Schema 来规范数据模式。在保证模式灵活动态的前提下，提供数据治理能力文档模型的快速开发特点</li></ul><p>快速：最简单快速的开发方式</p><ul><li>数据库引擎只需要在一个存储区读写</li><li>反范式、无关联的组织极大优化查询速度</li><li>程序 API 自然，开发快速</li></ul><p>MongoDB 优势</p><ul><li>原生的高可用和横向扩展能力 <ul><li>Replica Set – 2 to 50 个成员</li><li>自恢复</li><li>多中心容灾能力</li><li>滚动服务 – 最小化服务终端</li></ul></li><li>横向扩展能力 <ul><li>需要的时候无缝扩展</li><li>应用全透明</li><li>多种数据分布策略</li><li>轻松支持 TB – PB 数量级</li></ul></li></ul><p>MongoDB 技术优势总结</p><ul><li>JSON 结构和对象模型接近，开发代码量低</li><li>JSON 的动态模型意味着更容易响应新的业务需求</li><li>复制集提供 99.999% 高可用</li><li>分片架构支持海量数据和无缝扩容</li></ul><h3 id="mongodb-基本操作" tabindex="-1"><a class="header-anchor" href="#mongodb-基本操作" aria-hidden="true">#</a> MongoDB 基本操作</h3><h4 id="使用-insert-完成插入操作" tabindex="-1"><a class="header-anchor" href="#使用-insert-完成插入操作" aria-hidden="true">#</a> 使用 insert 完成插入操作</h4><p>操作格式：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>db.&lt;集合&gt;.insertOne(&lt;JSON 对象&gt;)
db.&lt;集合&gt;.insertMany(<span class="token punctuation">[</span>&lt;JSON <span class="token number">1</span>&gt;<span class="token punctuation">,</span> &lt;JSON <span class="token number">2</span>&gt;<span class="token punctuation">,</span> …&lt;JSON n&gt;<span class="token punctuation">]</span>)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>示例：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>db.fruit.insertOne(<span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&quot;apple&quot;</span><span class="token punctuation">}</span>)
db.fruit.insertMany(<span class="token punctuation">[</span>
    <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&quot;apple&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&quot;pear&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&quot;orange&quot;</span><span class="token punctuation">}</span>
<span class="token punctuation">]</span>)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用-find-查询文档" tabindex="-1"><a class="header-anchor" href="#使用-find-查询文档" aria-hidden="true">#</a> 使用 find 查询文档</h4><p>find 是 MongoDB 中查询数据的基本指令，相当于 SQL 中的 SELECT 。</p><p>find 返回的是游标。</p><p>示例：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>db.movies.find( <span class="token punctuation">{</span> <span class="token property">&quot;year&quot;</span> <span class="token operator">:</span> <span class="token number">1975</span> <span class="token punctuation">}</span> ) <span class="token comment">//单条件查询</span>

db.movies.find( <span class="token punctuation">{</span> <span class="token property">&quot;year&quot;</span> <span class="token operator">:</span> <span class="token number">1989</span><span class="token punctuation">,</span> <span class="token property">&quot;title&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Batman&quot;</span> <span class="token punctuation">}</span> ) <span class="token comment">//多条件 and 查询</span>

db.movies.find( <span class="token punctuation">{</span> $and <span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span><span class="token property">&quot;title&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Batman&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token property">&quot;category&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;action&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> ) <span class="token comment">// and 的另一种形式</span>

db.movies.find( <span class="token punctuation">{</span> $or<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token property">&quot;year&quot;</span> <span class="token operator">:</span> <span class="token number">1989</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token property">&quot;title&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Batman&quot;</span><span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> ) <span class="token comment">//多条件 or 查询</span>

db.movies.find( <span class="token punctuation">{</span> <span class="token property">&quot;title&quot;</span> <span class="token operator">:</span> /^B/<span class="token punctuation">}</span> ) <span class="token comment">//按正则表达式查找</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="查询条件对照表" tabindex="-1"><a class="header-anchor" href="#查询条件对照表" aria-hidden="true">#</a> 查询条件对照表</h5><table><thead><tr><th>SQL</th><th>MQL</th></tr></thead><tbody><tr><td><code>a = 1</code></td><td><code>{a: 1}</code></td></tr><tr><td><code>a &lt;&gt; 1</code></td><td><code>{a: {$ne: 1}}</code></td></tr><tr><td><code>a &gt; 1</code></td><td><code>{a: {$gt: 1}}</code></td></tr><tr><td><code>a &gt;= 1</code></td><td><code>{a: {$gte: 1}}</code></td></tr><tr><td><code>a &lt; 1</code></td><td><code>{a: {$lt: 1}}</code></td></tr><tr><td><code>a &lt;= 1</code></td><td><code>{a: {$lte: 1}}</code></td></tr></tbody></table><h5 id="查询逻辑对照表" tabindex="-1"><a class="header-anchor" href="#查询逻辑对照表" aria-hidden="true">#</a> 查询逻辑对照表</h5><table><thead><tr><th>SQL</th><th>MQL</th></tr></thead><tbody><tr><td><code>a = 1 AND b = 1</code></td><td><code>{a: 1, b: 1}</code> 或 <code>{$and: [{a: 1}, {b: 1}]}</code></td></tr><tr><td><code>a = 1 OR b = 1</code></td><td><code>{$or: [{a: 1}, {b: 1}]}</code></td></tr><tr><td><code>a IS NULL</code></td><td><code>{a: {$exists: false}}</code></td></tr><tr><td><code>a IN (1, 2, 3)</code></td><td><code>{a: {$in: [1, 2, 3]}}</code></td></tr></tbody></table><h5 id="查询逻辑运算符" tabindex="-1"><a class="header-anchor" href="#查询逻辑运算符" aria-hidden="true">#</a> 查询逻辑运算符</h5><ul><li><code>$lt</code> - 存在并小于</li><li><code>$lte</code> - 存在并小于等于</li><li><code>$gt</code> - 存在并大于</li><li><code>$gte</code> - 存在并大于等于</li><li><code>$ne</code> - 不存在或存在但不等于</li><li><code>$in</code> - 存在并在指定数组中</li><li><code>$nin</code> - 不存在或不在指定数组中</li><li><code>$or</code> - 匹配两个或多个条件中的一个</li><li><code>$and</code> - 匹配全部条件</li></ul><h4 id="使用-find-搜索子文档" tabindex="-1"><a class="header-anchor" href="#使用-find-搜索子文档" aria-hidden="true">#</a> 使用 find 搜索子文档</h4><p>find 支持使用“field.sub_field”的形式查询子文档。假设有一个文档：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>db.fruit.insertOne(<span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span>
    from<span class="token operator">:</span> <span class="token punctuation">{</span>
        country<span class="token operator">:</span> <span class="token string">&quot;China&quot;</span><span class="token punctuation">,</span>
        province<span class="token operator">:</span> <span class="token string">&quot;Guangdon&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>db.fruit.find( <span class="token punctuation">{</span> <span class="token property">&quot;from.country&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;China&quot;</span> <span class="token punctuation">}</span> )
db.fruit.find( <span class="token punctuation">{</span> <span class="token property">&quot;from&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span>country<span class="token operator">:</span> <span class="token string">&quot;China&quot;</span><span class="token punctuation">}</span> <span class="token punctuation">}</span> )
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用-find-搜索数组" tabindex="-1"><a class="header-anchor" href="#使用-find-搜索数组" aria-hidden="true">#</a> 使用 find 搜索数组</h4><p>find 支持对数组中的元素进行搜索。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>db.fruit.insert(<span class="token punctuation">[</span>
    <span class="token punctuation">{</span> <span class="token property">&quot;name&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Apple&quot;</span><span class="token punctuation">,</span> color<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;red&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;green&quot;</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token property">&quot;name&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Mango&quot;</span><span class="token punctuation">,</span> color<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;yellow&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;green&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>
<span class="token punctuation">]</span>)

db.fruit.find(<span class="token punctuation">{</span>color<span class="token operator">:</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">}</span>)
db.fruit.find(<span class="token punctuation">{</span>$or<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>color<span class="token operator">:</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>color<span class="token operator">:</span> <span class="token string">&quot;yellow&quot;</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span> )
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用-find-搜索数组中的对象" tabindex="-1"><a class="header-anchor" href="#使用-find-搜索数组中的对象" aria-hidden="true">#</a> 使用 find 搜索数组中的对象</h4><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>db.movies.insertOne( <span class="token punctuation">{</span>
    <span class="token property">&quot;title&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Raiders of the Lost Ark&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;filming_locations&quot;</span> <span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span> <span class="token property">&quot;city&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Los Angeles&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;state&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;CA&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;country&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;USA&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span> <span class="token property">&quot;city&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Rome&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;state&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Lazio&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;country&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Italy&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span> <span class="token property">&quot;city&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Florence&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;state&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;SC&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;country&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;USA&quot;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>)
<span class="token comment">// 查找城市是 Rome 的记录</span>
db.movies.find(<span class="token punctuation">{</span><span class="token property">&quot;filming_locations.city&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Rome&quot;</span><span class="token punctuation">}</span>)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在数组中搜索子对象的多个字段时，如果使用 $elemMatch，它表示必须是同一个 子对象满足多个条件。考虑以下两个查询：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>db.getCollection(&#39;movies&#39;).find(<span class="token punctuation">{</span>
    <span class="token property">&quot;filming_locations.city&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Rome&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;filming_locations.country&quot;</span><span class="token operator">:</span> <span class="token string">&quot;USA&quot;</span>
<span class="token punctuation">}</span>)

db.getCollection(&#39;movies&#39;).find(<span class="token punctuation">{</span>
    <span class="token property">&quot;filming_locations&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    	$elemMatch<span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">&quot;city&quot;</span><span class="token operator">:</span><span class="token string">&quot;Rome&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;country&quot;</span><span class="token operator">:</span> <span class="token string">&quot;USA&quot;</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="控制-find-返回的字段" tabindex="-1"><a class="header-anchor" href="#控制-find-返回的字段" aria-hidden="true">#</a> 控制 find 返回的字段</h4><ul><li>find 可以指定只返回指定的字段；</li><li><code>_id</code>字段必须明确指明不返回，否则默认返回；</li><li>在 MongoDB 中我们称这为投影（projection）；</li><li><code>db.movies.find({&quot;category&quot;: &quot;action&quot;},{&quot;_id&quot;:0, title:1})</code></li></ul><h4 id="使用-remove-删除文档" tabindex="-1"><a class="header-anchor" href="#使用-remove-删除文档" aria-hidden="true">#</a> 使用 remove 删除文档</h4><p>remove 命令需要配合查询条件使用；</p><p>匹配查询条件的的文档会被删除；</p><p>指定一个空文档条件会删除所有文档；</p><p>示例：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>db.testcol.remove( <span class="token punctuation">{</span> a <span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> ) <span class="token comment">// 删除 a 等于 1 的记录</span>
db.testcol.remove( <span class="token punctuation">{</span> a <span class="token operator">:</span> <span class="token punctuation">{</span> $lt <span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> ) <span class="token comment">// 删除 a 小于 5 的记录</span>
db.testcol.remove( <span class="token punctuation">{</span> <span class="token punctuation">}</span> ) <span class="token comment">// 删除所有记录</span>
db.testcol.remove() <span class="token comment">//报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用-update-更新文档" tabindex="-1"><a class="header-anchor" href="#使用-update-更新文档" aria-hidden="true">#</a> 使用 update 更新文档</h4><p>Update 操作执行格式：<code>db.&lt;集合&gt;.update(&lt;查询条件&gt;, &lt;更新字段&gt;)</code></p><p>示例：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>db.fruit.insertMany(<span class="token punctuation">[</span>
    <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&quot;apple&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&quot;pear&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&quot;orange&quot;</span><span class="token punctuation">}</span>
<span class="token punctuation">]</span>)

db.fruit.updateOne(<span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&quot;apple&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>$set<span class="token operator">:</span> <span class="token punctuation">{</span>from<span class="token operator">:</span> <span class="token string">&quot;China&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 updateOne 表示无论条件匹配多少条记录，始终只更新第一条；</p><p>使用 updateMany 表示条件匹配多少条就更新多少条；</p><p>updateOne/updateMany 方法要求更新条件部分必须具有以下之一，否则将报错：</p><ul><li><p><code>$set/$unset</code></p></li><li><p><code>$push/$pushAll/$pop</code></p></li><li><p><code>$pull/$pullAll</code></p></li><li><p><code>$addToSet</code></p></li></ul><h4 id="使用-update-更新数组" tabindex="-1"><a class="header-anchor" href="#使用-update-更新数组" aria-hidden="true">#</a> 使用 update 更新数组</h4><ul><li><code>$push</code>: 增加一个对象到数组底部</li><li><code>$pushAll</code>: 增加多个对象到数组底部</li><li><code>$pop</code>: 从数组底部删除一个对象</li><li><code>$pull</code>: 如果匹配指定的值，从数组中删除相应的对象</li><li><code>$pullAll</code>: 如果匹配任意的值，从数据中删除相应的对象</li><li><code>$addToSet</code>: 如果不存在则增加一个值到数组</li></ul><h4 id="使用-drop-删除集合" tabindex="-1"><a class="header-anchor" href="#使用-drop-删除集合" aria-hidden="true">#</a> 使用 drop 删除集合</h4><p>使用 db.&lt;集合&gt;.drop() 来删除一个集合</p><p>集合中的全部文档都会被删除</p><p>集合相关的索引也会被删除</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>db.collection.drop()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="使用-dropdatabase-删除数据库" tabindex="-1"><a class="header-anchor" href="#使用-dropdatabase-删除数据库" aria-hidden="true">#</a> 使用 dropDatabase 删除数据库</h4><p>使用 db.dropDatabase() 来删除数据库</p><p>数据库相应文件也会被删除，磁盘空间将被释放</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>use tempDB
db.dropDatabase()
show collections <span class="token comment">// No collections</span>
show dbs <span class="token comment">// The db is gone</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="聚合查詢" tabindex="-1"><a class="header-anchor" href="#聚合查詢" aria-hidden="true">#</a> 聚合查詢</h3><h4 id="什么是-mongodb-聚合框架" tabindex="-1"><a class="header-anchor" href="#什么是-mongodb-聚合框架" aria-hidden="true">#</a> 什么是 MongoDB 聚合框架</h4><p>MongoDB 聚合框架（Aggregation Framework）是一个计算框架，它可以：</p><ul><li><p>作用在一个或几个集合上；</p></li><li><p>对集合中的数据进行的一系列运算；</p></li><li><p>将这些数据转化为期望的形式；</p></li></ul><p>从效果而言，聚合框架相当于 SQL 查询中的：</p><ul><li><p>GROUP BY</p></li><li><p>LEFT OUTER JOIN</p></li><li><p>AS 等</p></li></ul><h4 id="管道-pipeline-和步骤-stage" tabindex="-1"><a class="header-anchor" href="#管道-pipeline-和步骤-stage" aria-hidden="true">#</a> 管道（Pipeline）和步骤（Stage）</h4><p>整个聚合运算过程称为管道（Pipeline），它是由多个步骤（Stage）组成的， 每个管道：</p><ul><li>接受一系列文档（原始数据）；</li><li>每个步骤对这些文档进行一系列运算；</li><li>结果文档输出给下一个步骤；</li></ul><p>聚合计算的基本格式：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pipeline = [$stage1, $stage2, ...$stageN];

db.&lt;COLLECTION&gt;.aggregate(
    pipeline,
    { options }
);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>常见步骤：</p><table><thead><tr><th>步骤</th><th>作用</th><th>SQL 等价运算符</th></tr></thead><tbody><tr><td><code>$match</code></td><td>过滤</td><td><code>WHERE</code></td></tr><tr><td><code>$project</code></td><td>投影</td><td><code>AS</code></td></tr><tr><td><code>$sort</code></td><td>排序</td><td><code>ORDER BY</code></td></tr><tr><td><code>$group</code></td><td>分组</td><td><code>GROUP BY</code></td></tr><tr><td><code>$skip</code> / <code>$limit</code></td><td>结果限制</td><td><code>SKIP</code> / <code>LIMIT</code></td></tr><tr><td><code>$lookup</code></td><td>左外连接</td><td><code>LEFT OUTER JOIN</code></td></tr><tr><td><code>$unwind</code></td><td>展开数组</td><td>N/A</td></tr><tr><td><code>$graphLookup</code></td><td>图搜索</td><td>N/A</td></tr><tr><td><code>$facet</code> / <code>$bucket</code></td><td>分面搜索</td><td>N/A</td></tr></tbody></table><p>常见步骤中的运算符</p><table><thead><tr><th><code>$match</code></th><th><code>$project</code></th><th><code>$group</code></th></tr></thead><tbody><tr><td><code>$eq</code>/<code>$gt</code>/<code>$gte</code>/<code>$lt</code>/<code>$lte</code><br><code>$and</code>/<code>$or</code>/<code>$not</code>/<code>$in</code><br><code>$geoWithin</code>/<code>$intersect</code></td><td>选择需要的或排除不需要的字段<br><code>$map</code>/<code>$reduce</code>/<code>$filter</code><br><code>$range</code><br><code>$multiply</code>/<code>$divide</code>/<code>$substract</code>/<code>$add</code><br><code>$year</code>/<code>$month</code>/<code>$dayOfMonth</code>/<code>$hour</code>/<code>$minute</code>/<code>$second</code><br>……</td><td><code>$sum</code>/<code>$avg</code><br><code>$push</code>/<code>$addToSet</code><br><code>$first</code>/<code>$last</code>/<code>$max</code>/<code>$min</code><br>……</td></tr></tbody></table><h4 id="聚合运算的使用场景" tabindex="-1"><a class="header-anchor" href="#聚合运算的使用场景" aria-hidden="true">#</a> 聚合运算的使用场景</h4><p>聚合查询可以用于 OLAP 和 OLTP 场景。例如：</p><ul><li>OTLP - 计算</li><li>OLAP <ul><li>分析一段时间内的销售总额、均值</li><li>计算一段时间内的净利润</li><li>分析购买人的年龄分布</li><li>分析学生成绩分布</li><li>统计员工绩效</li></ul></li></ul><p>MQL 常用步骤与 SQL 对比</p><p>【示例一】</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
FIRST_NAME <span class="token keyword">AS</span> <span class="token identifier"><span class="token punctuation">\`</span>名<span class="token punctuation">\`</span></span><span class="token punctuation">,</span>
LAST_NAME <span class="token keyword">AS</span> <span class="token identifier"><span class="token punctuation">\`</span>姓<span class="token punctuation">\`</span></span>
<span class="token keyword">FROM</span> Users
<span class="token keyword">WHERE</span> GENDER <span class="token operator">=</span> <span class="token string">&#39;男&#39;</span>
SKIP <span class="token number">100</span>
<span class="token keyword">LIMIT</span> <span class="token number">20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>等价于</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>db.users.aggregate(<span class="token punctuation">[</span>
    <span class="token punctuation">{</span>$match<span class="token operator">:</span> <span class="token punctuation">{</span>gender<span class="token operator">:</span> ’’男”<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>$skip<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>$limit<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>$project<span class="token operator">:</span> <span class="token punctuation">{</span>
        &#39;名&#39;<span class="token operator">:</span> &#39;$first_name&#39;<span class="token punctuation">,</span>
        &#39;姓&#39;<span class="token operator">:</span> &#39;$last_name&#39;
    <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">]</span>);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【示例二】</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> DEPARTMENT<span class="token punctuation">,</span>
<span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> EMP_QTY
<span class="token keyword">FROM</span> Users
<span class="token keyword">WHERE</span> GENDER <span class="token operator">=</span> <span class="token string">&#39;女&#39;</span>
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> DEPARTMENT <span class="token keyword">HAVING</span>
<span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>等价于</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>db.users.aggregate(<span class="token punctuation">[</span>
    <span class="token punctuation">{</span>$match<span class="token operator">:</span> <span class="token punctuation">{</span>gender<span class="token operator">:</span> &#39;女&#39;<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>$group<span class="token operator">:</span> <span class="token punctuation">{</span>
        _id<span class="token operator">:</span> &#39;$DEPARTMENT’<span class="token punctuation">,</span>
        emp_qty<span class="token operator">:</span> <span class="token punctuation">{</span>$sum<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>$match<span class="token operator">:</span> <span class="token punctuation">{</span>emp_qty<span class="token operator">:</span> <span class="token punctuation">{</span>$lt<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">]</span>);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【示例三】</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>&gt; db.students.findOne()
<span class="token punctuation">{</span>
    name<span class="token operator">:</span>&#39;张三&#39;<span class="token punctuation">,</span>
    score<span class="token operator">:</span><span class="token punctuation">[</span>
        <span class="token punctuation">{</span>subject<span class="token operator">:</span>&#39;语文&#39;<span class="token punctuation">,</span>score<span class="token operator">:</span><span class="token number">84</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>subject<span class="token operator">:</span>&#39;数学&#39;<span class="token punctuation">,</span>score<span class="token operator">:</span><span class="token number">90</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>subject<span class="token operator">:</span>&#39;外语&#39;<span class="token punctuation">,</span>score<span class="token operator">:</span><span class="token number">69</span><span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>

&gt; db.students.aggregate(<span class="token punctuation">[</span><span class="token punctuation">{</span>$unwind<span class="token operator">:</span> &#39;$score&#39;<span class="token punctuation">}</span><span class="token punctuation">]</span>)
<span class="token punctuation">{</span>name<span class="token operator">:</span> &#39;张三&#39;<span class="token punctuation">,</span> score<span class="token operator">:</span> <span class="token punctuation">{</span>subject<span class="token operator">:</span> &#39;语文&#39;<span class="token punctuation">,</span> score<span class="token operator">:</span> <span class="token number">84</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span>name<span class="token operator">:</span> &#39;张三&#39;<span class="token punctuation">,</span> score<span class="token operator">:</span> <span class="token punctuation">{</span>subject<span class="token operator">:</span> &#39;数学&#39;<span class="token punctuation">,</span> score<span class="token operator">:</span> <span class="token number">90</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span>name<span class="token operator">:</span> &#39;张三&#39;<span class="token punctuation">,</span> score<span class="token operator">:</span> <span class="token punctuation">{</span>subject<span class="token operator">:</span> &#39;外语&#39;<span class="token punctuation">,</span> score<span class="token operator">:</span> <span class="token number">69</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="mql-特有步骤-bucket" tabindex="-1"><a class="header-anchor" href="#mql-特有步骤-bucket" aria-hidden="true">#</a> MQL 特有步骤 <code>$bucket</code></h4><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>db.products.aggregate(<span class="token punctuation">[</span><span class="token punctuation">{</span>
    $bucket<span class="token operator">:</span><span class="token punctuation">{</span>
        groupBy<span class="token operator">:</span> <span class="token string">&quot;$price&quot;</span><span class="token punctuation">,</span>
        boundaries<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        default<span class="token operator">:</span> <span class="token string">&quot;Other&quot;</span><span class="token punctuation">,</span>
        output<span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">&quot;count&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>$sum<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">]</span>)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="mql-特有步骤-facet" tabindex="-1"><a class="header-anchor" href="#mql-特有步骤-facet" aria-hidden="true">#</a> MQL 特有步骤 $facet</h4><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>db.products.aggregate(<span class="token punctuation">[</span><span class="token punctuation">{</span>
    $facet<span class="token operator">:</span><span class="token punctuation">{</span>
        price<span class="token operator">:</span><span class="token punctuation">{</span>
            $bucket<span class="token operator">:</span><span class="token punctuation">{</span>…<span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        year<span class="token operator">:</span><span class="token punctuation">{</span>
            $bucket<span class="token operator">:</span><span class="token punctuation">{</span>…<span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">]</span>)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="聚合查询实验" tabindex="-1"><a class="header-anchor" href="#聚合查询实验" aria-hidden="true">#</a> 聚合查询实验</h4><p>计算到目前为止的所有订单的总销售额</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>db.orders.aggregate(<span class="token punctuation">[</span>
	<span class="token punctuation">{</span> $group<span class="token operator">:</span>
		<span class="token punctuation">{</span>
			_id<span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
			total<span class="token operator">:</span> <span class="token punctuation">{</span> $sum<span class="token operator">:</span> <span class="token string">&quot;$total&quot;</span> <span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">]</span>)

<span class="token comment">// 结果： // { &quot;_id&quot; : null, &quot;total&quot; : NumberDecimal(&quot;44019609&quot;) }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查询 2019 年第一季度（1 月 1 日~3 月 31 日）已完成订单（completed）的订单总金额和订单总数</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>db.orders.aggregate(<span class="token punctuation">[</span>

    <span class="token comment">// 步骤 1：匹配条件</span>
    <span class="token punctuation">{</span> $match<span class="token operator">:</span> <span class="token punctuation">{</span> status<span class="token operator">:</span> <span class="token string">&quot;completed&quot;</span><span class="token punctuation">,</span> orderDate<span class="token operator">:</span> <span class="token punctuation">{</span>
                                    $gte<span class="token operator">:</span> ISODate(<span class="token string">&quot;2019-01-01&quot;</span>)<span class="token punctuation">,</span>
                                    $lt<span class="token operator">:</span> ISODate(<span class="token string">&quot;2019-04-01&quot;</span>) <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token comment">// 步骤二：聚合订单总金额、总运费、总数量</span>
    <span class="token punctuation">{</span> $group<span class="token operator">:</span> <span class="token punctuation">{</span>
                _id<span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
                total<span class="token operator">:</span> <span class="token punctuation">{</span> $sum<span class="token operator">:</span> <span class="token string">&quot;$total&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
                shippingFee<span class="token operator">:</span> <span class="token punctuation">{</span> $sum<span class="token operator">:</span> <span class="token string">&quot;$shippingFee&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
                count<span class="token operator">:</span> <span class="token punctuation">{</span> $sum<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> $project<span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token comment">// 计算总金额</span>
                grandTotal<span class="token operator">:</span> <span class="token punctuation">{</span> $add<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;$total&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;$shippingFee&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
                count<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
                _id<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
<span class="token punctuation">]</span>)

<span class="token comment">// 结果：</span>
<span class="token comment">// { &quot;count&quot; : 5875, &quot;grandTotal&quot; : NumberDecimal(&quot;2636376.00&quot;) }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="复制集机制及原理" tabindex="-1"><a class="header-anchor" href="#复制集机制及原理" aria-hidden="true">#</a> 复制集机制及原理</h3><h4 id="复制集的作用" tabindex="-1"><a class="header-anchor" href="#复制集的作用" aria-hidden="true">#</a> 复制集的作用</h4><p>MongoDB 复制集的主要意义在于实现服务高可用</p><p>它的现实依赖于两个方面的功能：</p><ul><li>数据写入时将数据迅速复制到另一个独立节点上</li><li>在接受写入的节点发生故障时自动选举出一个新的替代节点</li></ul><p>在实现高可用的同时，复制集实现了其他几个附加作用：</p><ul><li><p>数据分发：将数据从一个区域复制到另一个区域，减少另一个区域的读延迟</p></li><li><p>读写分离：不同类型的压力分别在不同的节点上执行</p></li><li><p>异地容灾：在数据中心故障时候快速切换到异地</p></li></ul><h4 id="典型复制集结构" tabindex="-1"><a class="header-anchor" href="#典型复制集结构" aria-hidden="true">#</a> 典型复制集结构</h4><p>一个典型的复制集由 3 个以上具有投票权的节点组成，包括：</p><ul><li>一个主节点（PRIMARY）：接受写入操作和选举时投票</li><li>两个（或多个）从节点（SECONDARY）：复制主节点上的新数据和选举时投票</li><li>不推荐使用 Arbiter（投票节点）</li></ul><h4 id="数据是如何复制的" tabindex="-1"><a class="header-anchor" href="#数据是如何复制的" aria-hidden="true">#</a> 数据是如何复制的？</h4><p>当一个修改操作，无论是插入、更新或删除，到达主节点时，它对数据的操作将被 记录下来（经过一些必要的转换），这些记录称为 oplog。</p><p>从节点通过在主节点上打开一个 tailable 游标不断获取新进入主节点的 oplog，并 在自己的数据上回放，以此保持跟主节点的数据一致。</p><h4 id="通过选举完成故障恢复" tabindex="-1"><a class="header-anchor" href="#通过选举完成故障恢复" aria-hidden="true">#</a> 通过选举完成故障恢复</h4><ul><li><p>具有投票权的节点之间两两互相发送心跳；</p></li><li><p>当 5 次心跳未收到时判断为节点失联；</p></li><li><p>如果失联的是主节点，从节点会发起选举，选出新的主节点；</p></li><li><p>如果失联的是从节点则不会产生新的选举；</p></li><li><p>选举基于 RAFT 一致性算法 实现，选举成功的必要条件是大多数投票节点存活；</p></li><li><p>复制集中最多可以有 50 个节点，但具有投票权的节点最多 7 个。</p></li></ul><h4 id="影响选举的因素" tabindex="-1"><a class="header-anchor" href="#影响选举的因素" aria-hidden="true">#</a> 影响选举的因素</h4><p>整个集群必须有大多数节点（N / 2 + 1）存活；</p><p>被选举为主节点的节点必须：</p><ul><li>能够与多数节点建立连接</li><li>具有较新的 oplog</li><li>具有较高的优先级（如果有配置）</li></ul><h4 id="常见选项" tabindex="-1"><a class="header-anchor" href="#常见选项" aria-hidden="true">#</a> 常见选项</h4><p>复制集节点有以下常见的选配项：</p><ul><li>是否具有投票权（v 参数）：有则参与投票；</li><li>优先级（priority 参数）：优先级越高的节点越优先成为主节点。优先级为 0 的节点无法成 为主节点；</li><li>隐藏（hidden 参数）：复制数据，但对应用不可见。隐藏节点可以具有投票仅，但优先 级必须为 0；</li><li>延迟（slaveDelay 参数）：复制 n 秒之前的数据，保持与主节点的时间差。</li></ul><h4 id="复制集注意事项" tabindex="-1"><a class="header-anchor" href="#复制集注意事项" aria-hidden="true">#</a> 复制集注意事项</h4><p>关于硬件：</p><ul><li>因为正常的复制集节点都有可能成为主节点，它们的地位是一样的，因此硬件配置上必须一致；</li><li>为了保证节点不会同时宕机，各节点使用的硬件必须具有独立性。</li></ul><p>关于软件：</p><ul><li>复制集各节点软件版本必须一致，以避免出现不可预知的问题。</li></ul><p>增加节点不会增加系统写性能！</p><h3 id="mongodb-全家桶" tabindex="-1"><a class="header-anchor" href="#mongodb-全家桶" aria-hidden="true">#</a> MongoDB 全家桶</h3><table><thead><tr><th>软件模块</th><th>描述</th></tr></thead><tbody><tr><td>mongod</td><td>MongoDB 数据库软件</td></tr><tr><td>mongo</td><td>MongoDB 命令行工具，管理 MongoDB 数据库</td></tr><tr><td>mongos</td><td>MongoDB 路由进程，分片环境下使用</td></tr><tr><td>mongodump / mongorestore</td><td>命令行数据库备份与恢复工具</td></tr><tr><td>mongoexport / mongoimport</td><td>CSV/JSON 导入与导出，主要用于不同系统间数据迁移</td></tr><tr><td>Compass</td><td>MongoDB GUI 管理工具</td></tr><tr><td>Ops Manager（企业版）</td><td>MongoDB 集群管理软件</td></tr><tr><td>BI Connector（企业版）</td><td>SQL 解释器 / BI 套接件</td></tr><tr><td>MongoDB Charts（企业版）</td><td>MongoDB 可视化软件</td></tr><tr><td>Atlas（付费及免费）</td><td>MongoDB 云托管服务，包括永久免费云数据库</td></tr></tbody></table><h2 id="第二章-从熟练到精通的开发之路" tabindex="-1"><a class="header-anchor" href="#第二章-从熟练到精通的开发之路" aria-hidden="true">#</a> 第二章：从熟练到精通的开发之路</h2><h3 id="模型设计基础" tabindex="-1"><a class="header-anchor" href="#模型设计基础" aria-hidden="true">#</a> 模型设计基础</h3><h4 id="数据模型" tabindex="-1"><a class="header-anchor" href="#数据模型" aria-hidden="true">#</a> 数据模型</h4><p>什么是数据模型？</p><p>数据模型是一组由符号、文本组成的集合，用以准确表达信息，达到有效交流、沟通 的目的。</p><h4 id="数据模型设计的元素" tabindex="-1"><a class="header-anchor" href="#数据模型设计的元素" aria-hidden="true">#</a> 数据模型设计的元素</h4><p><strong>实体 Entity</strong></p><ul><li><p>描述业务的主要数据集合</p></li><li><p>谁，什么，何时，何地，为何，如何</p></li></ul><p><strong>属性 Attribute</strong></p><ul><li>描述实体里面的单个信息</li></ul><p><strong>关系 Relationship</strong></p><ul><li><p>描述实体与实体之间的数据规则</p></li><li><p>结构规则：1-N， N-1, N-N</p></li><li><p>引用规则：电话号码不能单独存在</p></li></ul><p>数据模型的三层深度：</p><ul><li>概念模型，逻辑模型，物理模型</li><li>一个模型逐步细化的过程</li></ul><h4 id="mongodb-文档模型设计的三个误区" tabindex="-1"><a class="header-anchor" href="#mongodb-文档模型设计的三个误区" aria-hidden="true">#</a> MongoDB 文档模型设计的三个误区</h4><ol><li>不需要模型设计</li><li>MongoDB 应该用一个超级大文档来组织所有数据</li><li>MongoDB 不支持关联或者事务</li></ol><h4 id="关于-json-文档模型设计" tabindex="-1"><a class="header-anchor" href="#关于-json-文档模型设计" aria-hidden="true">#</a> 关于 JSON 文档模型设计</h4><p>文档模型设计处于是物理模型设计阶段 （PDM）</p><p>JSON 文档模型通过内嵌数组或引用字段来表示关系</p><p>文档模型设计不遵从第三范式，允许冗余。</p><h4 id="为什么人们都说-mongodb-是无模式" tabindex="-1"><a class="header-anchor" href="#为什么人们都说-mongodb-是无模式" aria-hidden="true">#</a> 为什么人们都说 MongoDB 是无模式？</h4><p>MongoDB 同样需要概念/逻辑建模</p><p>文档模型设计的物理层结构可以和逻辑层类似</p><p>MongoDB 无模式由来： 可以省略物理建模的具体过程</p><h4 id="关系模型-vs-文档模型" tabindex="-1"><a class="header-anchor" href="#关系模型-vs-文档模型" aria-hidden="true">#</a> 关系模型 vs 文档模型</h4><table><thead><tr><th></th><th>关系数据库</th><th>JSON 文档模型</th></tr></thead><tbody><tr><td>模型设计层次</td><td>概念模型<br>逻辑模型<br>物理模型</td><td>概念模型<br>逻辑模型</td></tr><tr><td>模型实体</td><td>表</td><td>集合</td></tr><tr><td>模型属性</td><td>列</td><td>字段</td></tr><tr><td>模型关系</td><td>关联关系，主外键</td><td>内嵌数组，引用字段</td></tr></tbody></table><h3 id="文档模型设计之一-基础设计" tabindex="-1"><a class="header-anchor" href="#文档模型设计之一-基础设计" aria-hidden="true">#</a> 文档模型设计之一：基础设计</h3><p>建立基础文档模型</p><ul><li>根据概念模型或者业务需求推导出逻辑模型 – 找到对象</li><li>列出实体之间的关系（及基数） - 明确关系</li><li>套用逻辑设计原则来决定内嵌方式 – 进行建模</li><li>完成基础模型构建</li></ul><p>基础建模小结</p><ul><li>90:10 规则： 大部分时候你会使用内嵌来表示 1-1，1-N，N-N</li><li>内嵌类似于预先聚合（关联）</li><li>内嵌后对读操作通常有优势（减少关联）</li></ul><h3 id="文档模型设计之二-工况细化" tabindex="-1"><a class="header-anchor" href="#文档模型设计之二-工况细化" aria-hidden="true">#</a> 文档模型设计之二：工况细化</h3><p>场景梳理：</p><ul><li><p>最频繁的数据查询模式</p></li><li><p>最常用的查询参数</p></li><li><p>最频繁的数据写入模式</p></li><li><p>读写操作的比例</p></li><li><p>数据量的大小</p></li></ul><p>基于内嵌的文档模型</p><p>根据业务需求</p><ul><li>使用引用来避免性能瓶颈</li><li>使用冗余来优化访问性能</li></ul><p>什么时候该使用引用方式？</p><ul><li>内嵌文档太大，数 MB 或者超过 16MB</li><li>内嵌文档或数组元素会频繁修改</li><li>内嵌数组元素会持续增长并且没有封顶</li></ul><p>MongoDB 引用设计的限制</p><ul><li>MongoDB 对使用引用的集合之间并无主外键检查</li><li>MongoDB 使用聚合框架的 <code>$lookup</code> 来模仿关联查询</li><li><code>$lookup</code> 只支持 left outer join</li><li><code>$lookup</code> 的关联目标（from）不能是分片表</li></ul><h3 id="文档模型设计之三-模式套用" tabindex="-1"><a class="header-anchor" href="#文档模型设计之三-模式套用" aria-hidden="true">#</a> 文档模型设计之三：模式套用</h3><ul><li><p>利用文档内嵌数组，将一个时间段的数据聚合到一个文档里。</p></li><li><p>大量减少文档数量</p></li><li><p>大量减少索引占用空间</p></li></ul><h3 id="设计模式集锦" tabindex="-1"><a class="header-anchor" href="#设计模式集锦" aria-hidden="true">#</a> 设计模式集锦</h3><p>大文档，很多字段，很多索引</p><p>列转行</p><p>模型灵活了，如何管理文档不同版本？</p><ul><li>增加一个版本号字段</li><li>快速过滤掉不需要升级的文档</li><li>升级时候对不同版本的文档做 不同的处理</li></ul><p>统计网页点击流量</p><ul><li>用近似计算</li></ul><p>业绩排名，游戏排名，商品统计等精确统计</p><ul><li>用预聚合字段</li><li>模型中直接增加统计字段</li><li>每次更新数据时候同时更新统计值</li></ul><h3 id="事务开发-写操作事务" tabindex="-1"><a class="header-anchor" href="#事务开发-写操作事务" aria-hidden="true">#</a> 事务开发：写操作事务</h3><p>writeConcern 决定一个写操作落到多少个节点上才算成功。writeConcern 的取值包括：</p><ul><li><p>0：发起写操作，不关心是否成功；</p></li><li><p>1~集群最大数据节点数：写操作需要被复制到指定节点数才算成功；</p></li><li><p>majority：写操作需要被复制到大多数节点上才算成功。</p></li></ul><p>发起写操作的程序将阻塞到写操作到达指定的节点数为止。</p><p>writeConcern 可以决定写操作到达多少个节点才算成功，journal 则定义如何才算成 功。取值包括：</p><ul><li>true: 写操作落到 journal 文件中才算成功；</li><li>false: 写操作到达内存即算作成功。</li></ul><h3 id="事务开发-读操作事务之一" tabindex="-1"><a class="header-anchor" href="#事务开发-读操作事务之一" aria-hidden="true">#</a> 事务开发：读操作事务之一</h3><p>在读取数据的过程中我们需要关注以下两个问题：</p><p>从哪里读？——由 readPreference 来解决</p><p>什么样的数据可以读？ ——由 readConcern 来解决</p><h4 id="什么是-readpreference" tabindex="-1"><a class="header-anchor" href="#什么是-readpreference" aria-hidden="true">#</a> 什么是 readPreference？</h4><p>readPreference 决定使用哪一个节点来满足 正在发起的读请求。可选值包括：</p><ul><li>primary: 只选择主节点；</li><li>primaryPreferred：优先选择主节点，如 果不可用则选择从节点；</li><li>secondary：只选择从节点；</li><li>secondaryPreferred：优先选择从节点， 如果从节点不可用则选择主节点；</li><li>nearest：选择最近的节点；</li></ul><h4 id="readpreference-场景举例" tabindex="-1"><a class="header-anchor" href="#readpreference-场景举例" aria-hidden="true">#</a> readPreference 场景举例</h4><p>用户下订单后马上将用户转到订单详情页——primary/primaryPreferred。因为此时从节点可能还没复制到新订单；</p><p>用户查询自己下过的订单——secondary/secondaryPreferred。查询历史订单对时效性通常没有太高要求；</p><p>生成报表——secondary。报表对时效性要求不高，但资源需求大，可以在从节点单独处理，避免对线上用户造成影响；</p><p>将用户上传的图片分发到全世界，让各地用户能够就近读取——nearest。每个地区的应用选择最近的节点读取数据。</p><h4 id="readpreference-与-tag" tabindex="-1"><a class="header-anchor" href="#readpreference-与-tag" aria-hidden="true">#</a> readPreference 与 Tag</h4><p>readPreference 只能控制使用一类节点。Tag 则可以将节点选择控制<br> 到一个或几个节点。考虑以下场景：</p><ul><li><p>一个 5 个节点的复制集；</p></li><li><p>3 个节点硬件较好，专用于服务线上客户；</p></li><li><p>2 个节点硬件较差，专用于生成报表；</p></li></ul><p>可以使用 Tag 来达到这样的控制目的：</p><ul><li><p>为 3 个较好的节点打上 {purpose: &quot;online&quot;}；</p></li><li><p>为 2 个较差的节点打上 {purpose: &quot;analyse&quot;}；</p></li><li><p>在线应用读取时指定 online，报表读取时指定 reporting。</p></li></ul><h4 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> 注意事项</h4><ul><li><p>指定 readPreference 时也应注意高可用问题。例如将 readPreference 指定 primary，则发生故障转移不存在 primary 期间将没有节点可读。如果业务允许，则应选择 primaryPreferred；</p></li><li><p>使用 Tag 时也会遇到同样的问题，如果只有一个节点拥有一个特定 Tag，则在这个节点失效时将无节点可读。这在有时候是期望的结果，有时候不是。例如：</p><ul><li>如果报表使用的节点失效，即使不生成报表，通常也不希望将报表负载转移到其他节点上，此时只有一个节点有报表 Tag 是合理的选择；</li><li>如果线上节点失效，通常希望有替代节点，所以应该保持多个节点有同样的 Tag；</li></ul></li><li><p>Tag 有时需要与优先级、选举权综合考虑。例如做报表的节点通常不会希望它成为主节点，则优先级应为 0。</p></li></ul><h3 id="事务开发-读操作事务之二" tabindex="-1"><a class="header-anchor" href="#事务开发-读操作事务之二" aria-hidden="true">#</a> 事务开发：读操作事务之二</h3><h4 id="什么是-readconcern" tabindex="-1"><a class="header-anchor" href="#什么是-readconcern" aria-hidden="true">#</a> 什么是 readConcern？</h4><p>在 readPreference 选择了指定的节点后，readConcern 决定这个节点上的数据哪些 是可读的，类似于关系数据库的隔离级别。可选值包括：</p><ul><li>available：读取所有可用的数据；</li><li>local：读取所有可用且属于当前分片的数据，默认设置；</li><li>majority：读取在大多数节点上提交完成的数据；</li><li>linearizable：可线性化读取文档；增强处理 majority 情况下主节点失联时候的例外情况</li><li>snapshot：读取最近快照中的数据；最高隔离级别，接近于 Seriazable</li></ul><h4 id="readconcern-local-和-available" tabindex="-1"><a class="header-anchor" href="#readconcern-local-和-available" aria-hidden="true">#</a> readConcern: local 和 available</h4><p>在复制集中 local 和 available 是没有区别的。两者的区别主要体现在分片集上。考虑以下场景：</p><ul><li><p>一个 chunk x 正在从 shard1 向 shard2 迁移；</p></li><li><p>整个迁移过程中 chunk x 中的部分数据会在 shard1 和 shard2 中同时存在，但源分片 shard1 仍然是 chunk x 的负责方：</p><ul><li>所有对 chunk x 的读写操作仍然进入 shard1；</li><li>config 中记录的信息 chunk x 仍然属于 shard1；</li></ul></li><li><p>此时如果读 shard2，则会体现出 local 和 available 的区别：</p><ul><li>local：只取应该由 shard2 负责的数据（不包括 x）；</li><li>available：shard2 上有什么就读什么（包括 x）；</li></ul></li></ul><p>注意事项：</p><ul><li>虽然看上去总是应该选择 local，但毕竟对结果集进行过滤会造成额外消耗。在一些 无关紧要的场景（例如统计）下，也可以考虑 available；</li><li><code>MongoDB &lt;=3.6</code> 不支持对从节点使用 {readConcern: &quot;local&quot;}；</li><li>从主节点读取数据时默认 readConcern 是 local，从从节点读取数据时默认 readConcern 是 available（向前兼容原因）。</li></ul><h4 id="readconcern-majority" tabindex="-1"><a class="header-anchor" href="#readconcern-majority" aria-hidden="true">#</a> readConcern: majority</h4><p>只读取大多数据节点上都提交了的数据。考虑如 下场景：</p><ul><li>集合中原有文档 {x: 0}；</li><li>将 x 值更新为 1；</li></ul><p>如果在各节点上应用 {readConcern: “majority”} 来读取数据：</p><p>如何实现？</p><p>节点上维护多个 x 版本，MVCC 机制 MongoDB 通过维护多个快照来链接不同的版本：</p><ul><li>每个被大多数节点确认过的版本都将是一个快照；</li><li>快照持续到没有人使用为止才被删除；</li></ul><h4 id="readconcern-majority-与脏读" tabindex="-1"><a class="header-anchor" href="#readconcern-majority-与脏读" aria-hidden="true">#</a> readConcern: majority 与脏读</h4><p>MongoDB 中的回滚：</p><ul><li><p>写操作到达大多数节点之前都是不安全的，一旦主节点崩溃，而从节还没复制到该次操作，刚才的写操作就丢失了；</p></li><li><p>把一次写操作视为一个事务，从事务的角度，可以认为事务被回滚了。</p></li></ul><p>所以从分布式系统的角度来看，事务的提交被提升到了分布式集群的多个节点级别的“提交”，而不再是单个节点上的“提交”。</p><p>在可能发生回滚的前提下考虑脏读问题：</p><ul><li>如果在一次写操作到达大多数节点前读取了这个写操作，然后因为系统故障该操作回滚了，则发生了脏读问题；</li></ul><p>使用 {readConcern: “majority”} 可以有效避免脏读</p><h4 id="readconcern-如何实现安全的读写分离" tabindex="-1"><a class="header-anchor" href="#readconcern-如何实现安全的读写分离" aria-hidden="true">#</a> readConcern: 如何实现安全的读写分离</h4><p>考虑如下场景：</p><p>向主节点写入一条数据；</p><p>立即从从节点读取这条数据。</p><p>如何保证自己能够读到刚刚写入的数据？</p><p>下述方式有可能读不到刚写入的订单</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>db.orders.insert(<span class="token punctuation">{</span> oid<span class="token operator">:</span> <span class="token number">101</span><span class="token punctuation">,</span> sku<span class="token operator">:</span> ”kite&quot;<span class="token punctuation">,</span> q<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span>)
db.orders.find(<span class="token punctuation">{</span>oid<span class="token operator">:</span><span class="token number">101</span><span class="token punctuation">}</span>).readPref(<span class="token string">&quot;secondary&quot;</span>)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 writeConcern + readConcern majority 来解决</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>db.orders.insert(<span class="token punctuation">{</span> oid<span class="token operator">:</span> <span class="token number">101</span><span class="token punctuation">,</span> sku<span class="token operator">:</span> <span class="token string">&quot;kiteboar&quot;</span><span class="token punctuation">,</span> q<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>writeConcern<span class="token operator">:</span><span class="token punctuation">{</span>w<span class="token operator">:</span> &quot;majority”<span class="token punctuation">}</span><span class="token punctuation">}</span>)
db.orders.find(<span class="token punctuation">{</span>oid<span class="token operator">:</span><span class="token number">101</span><span class="token punctuation">}</span>).readPref(“secondary”).readConcern(<span class="token string">&quot;majority&quot;</span>)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="readconcern-linearizable" tabindex="-1"><a class="header-anchor" href="#readconcern-linearizable" aria-hidden="true">#</a> readConcern: linearizable</h4><p>只读取大多数节点确认过的数据。和 majority 最大差别是保证绝对的操作线性顺序 –在写操作自然时间后面的发生的读，一定可以读到之前的写</p><ul><li>只对读取单个文档时有效；</li><li>可能导致非常慢的读，因此总是建议配合使用 maxTimeMS；</li></ul><h4 id="readconcern-snapshot" tabindex="-1"><a class="header-anchor" href="#readconcern-snapshot" aria-hidden="true">#</a> readConcern: snapshot</h4><p>{readConcern: “snapshot”} 只在多文档事务中生效。将一个事务的 readConcern 设置为 snapshot，将保证在事务中的读：</p><ul><li><p>不出现脏读；</p></li><li><p>不出现不可重复读；</p></li><li><p>不出现幻读。</p></li></ul><p>因为所有的读都将使用同一个快照，直到事务提交为止该快照才被释放。</p><h3 id="事务开发-多文档事务" tabindex="-1"><a class="header-anchor" href="#事务开发-多文档事务" aria-hidden="true">#</a> 事务开发：多文档事务</h3><p>MongoDB 虽然已经在 4.2 开始全面支持了多文档事务，但并不代表大家应该毫无节制 地使用它。相反，对事务的使用原则应该是：能不用尽量不用。</p><p>通过合理地设计文档模型，可以规避绝大部分使用事务的必要性</p><p>为什么？事务 = 锁，节点协调，额外开销，性能影响</p><p>MongoDB ACID 多文档事务支持</p><ul><li>Atomocity 原子性 <ul><li>单表单文档 ： 1.x 就支持</li><li>复制集多表多行：4.0 复制集</li><li>分片集群多表多行 4.2</li></ul></li><li>Consistency 一致性 - writeConcern, readConcern (3.2)</li><li>Isolation 隔离性 - readConcern (3.2)</li><li>Durability 持久性 - Journal and Replication</li></ul><h4 id="事务的隔离级别" tabindex="-1"><a class="header-anchor" href="#事务的隔离级别" aria-hidden="true">#</a> 事务的隔离级别</h4><p>事务完成前，事务外的操作对该事务所做的修改不可访问</p><p>如果事务内使用 {readConcern: “snapshot”}，则可以达到可重复读 Repeatable Read</p><h4 id="事务写机制" tabindex="-1"><a class="header-anchor" href="#事务写机制" aria-hidden="true">#</a> 事务写机制</h4><p>MongoDB 的事务错误处理机制不同于关系数据库：</p>`,277),h=n("li",null,[n("p",null,"当一个事务开始后，如果事务要修改的文档在事务外部被修改过，则事务修改这个文档时会触发 Abort 错误，因为此时的修改冲突了；")],-1),m=n("li",null,[n("p",null,"这种情况下，只需要简单地重做事务就可以了；")],-1),b={href:"http://write-wait.md",target:"_blank",rel:"noopener noreferrer"},v=t('<h3 id="change-stream" tabindex="-1"><a class="header-anchor" href="#change-stream" aria-hidden="true">#</a> Change Stream</h3><p>Change Stream 是 MongoDB 用于实现变更追踪的解决方案，类似于关系数据库的触 发器，但原理不完全相同：</p><table><thead><tr><th></th><th>Change Stream</th><th>触发器</th></tr></thead><tbody><tr><td>触发方式</td><td>异步</td><td>同步（事务保证）</td></tr><tr><td>触发位置</td><td>应用回调事件</td><td>数据库触发器</td></tr><tr><td>触发次数</td><td>每个订阅事件的客户端</td><td>1 次（触发器）</td></tr><tr><td>故障恢复</td><td>从上次断点重新触发</td><td>事务回滚</td></tr></tbody></table><h4 id="change-stream-的实现原理" tabindex="-1"><a class="header-anchor" href="#change-stream-的实现原理" aria-hidden="true">#</a> Change Stream 的实现原理</h4><p>Change Stream 是基于 oplog 实现的。它在 oplog 上开启一个 tailable cursor 来追踪所有复制集上的变更操作，最终调用应用中定义的回调函数。</p><p>被追踪的变更事件主要包括：</p><ul><li><p>insert/update/delete：插入、更新、删除；</p></li><li><p>drop：集合被删除；</p></li><li><p>rename：集合被重命名；</p></li><li><p>dropDatabase：数据库被删除；</p></li><li><p>invalidate：drop/rename/dropDatabase 将导致 invalidate 被触发，并关闭 change stream；</p></li></ul><p>Change Stream 只推送已经在大多数节点上提交的变更操作。即“可重复读”的变更。 这个验证是通过 {readConcern: “majority”} 实现的。因此：</p><ul><li>未开启 majority readConcern 的集群无法使用 Change Stream；</li><li>当集群无法满足 {w: “majority”} 时，不会触发 Change Stream（例如 PSA 架构 中的 S 因故障宕机）。</li></ul><h4 id="change-stream-使用场景" tabindex="-1"><a class="header-anchor" href="#change-stream-使用场景" aria-hidden="true">#</a> Change Stream 使用场景</h4><ul><li><p>跨集群的变更复制——在源集群中订阅 Change Stream，一旦得到任何变更立即写入目标集群。</p></li><li><p>微服务联动——当一个微服务变更数据库时，其他微服务得到通知并做出相应的变更。</p></li><li><p>其他任何需要系统联动的场景。</p></li></ul><h4 id="注意事项-1" tabindex="-1"><a class="header-anchor" href="#注意事项-1" aria-hidden="true">#</a> 注意事项</h4><ul><li><p>Change Stream 依赖于 oplog，因此中断时间不可超过 oplog 回收的最大时间窗；</p></li><li><p>在执行 update 操作时，如果只更新了部分数据，那么 Change Stream 通知的也<br> 是增量部分；</p></li><li><p>同理，删除数据时通知的仅是删除数据的 <code>_id</code>。</p></li></ul><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>',14),g={href:"https://time.geekbang.org/course/intro/100040001",target:"_blank",rel:"noopener noreferrer"};function q(f,y){const s=p("ExternalLinkIcon");return i(),l("div",null,[r,n("p",null,[n("a",u,[a("极客时间教程 - MongoDB 高手课"),e(s)]),a(" 学习笔记")]),c(" more "),k,n("ul",null,[h,m,n("li",null,[n("p",null,[a("如果一个事务已经开始修改一个文档，在事务以外尝试修改同一个文档，则事务以外的修改会等待事务完成才能继续进行（"),n("a",b,[a("write-wait.md"),e(s)]),a(" 实验）。")])])]),v,n("ul",null,[n("li",null,[n("a",g,[a("极客时间教程 - MongoDB 高手课"),e(s)])])])])}const j=o(d,[["render",q],["__file","index.html.vue"]]);export{j as default};
