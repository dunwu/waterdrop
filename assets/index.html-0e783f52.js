import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a as n,b as s,d as e,e as t}from"./app-6a91f8e9.js";const i={},u=t(`<h1 id="spring-mvc-之-dispatcherservlet" tabindex="-1"><a class="header-anchor" href="#spring-mvc-之-dispatcherservlet" aria-hidden="true">#</a> Spring MVC 之 DispatcherServlet</h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p><code>DispatcherServlet</code> 是 Spring MVC 框架的核心组件，负责将<strong>客户端请求映射到相应的控制器，然后调用控制器处理请求并返回响应结果</strong>。</p><h3 id="dispatcherservlet-工作原理" tabindex="-1"><a class="header-anchor" href="#dispatcherservlet-工作原理" aria-hidden="true">#</a> DispatcherServlet 工作原理</h3><h4 id="dispatcherservlet-工作流程" tabindex="-1"><a class="header-anchor" href="#dispatcherservlet-工作流程" aria-hidden="true">#</a> DispatcherServlet 工作流程</h4><p><code>DispatcherServlet</code> 的工作流程大致如下图所示：</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/java/spring/web/spring-dispatcher-servlet.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ol><li><strong>接收 Http 请求</strong>：当客户端发送 HTTP 请求时，<code>DispatcherServlet</code> 接收该请求并将其传递给 Spring MVC 框架。</li><li><strong>选择 <code>Handler</code></strong>：<code>DispatcherServlet</code> 会根据请求的 URL 找到对应的处理器映射器 <code>HandlerMapping</code>，该映射器会根据配置文件中的 URL 映射规则找到合适的处理器 <code>Handler</code>。 <ul><li><strong>绑定属性</strong>：<code>DispatcherServlet</code> 会根据程序的 web 初始化策略关联各种 <code>Resolver</code>，如：<code>LocaleResolver</code>、<code>ThemeResolver</code> 等。</li><li><code>DispatcherServlet</code> 根据 <code>&lt;servlet-name&gt;-servlet.xml</code> 中的配置对请求的 URL 进行解析，得到请求资源标识符（URI）。然后根据该 URI，调用 <code>HandlerMapping</code> 获得该 <code>Handler</code> 配置的所有相关的对象（包括 <code>Handler</code> 对象以及 <code>Handler</code> 对象对应的拦截器），最后以<code>HandlerExecutionChain</code> 对象的形式返回。 <ul><li>将请求映射到处理程序以及用于预处理和后处理的拦截器列表。映射基于一些标准，其细节因 <code>HandlerMapping</code> 实现而异。</li><li>两个主要的 <code>HandlerMapping</code> 实现是 <code>RequestMappingHandlerMapping</code>（支持 <code>@RequestMapping</code> 注释方法）和 <code>SimpleUrlHandlerMapping</code>（维护 URI 路径模式到处理程序的显式注册）。</li></ul></li></ul></li><li><strong>选择 <code>HandlerAdapter</code></strong>： <code>DispatcherServlet</code> 根据获得的 <code>Handler</code>，选择一个合适的 <code>HandlerAdapter</code>。 <ul><li><code>HandlerAdapter</code> 帮助 <code>DispatcherServlet</code> 调用映射到请求的 <code>Handler</code>，而不管实际调用 <code>Handler</code> 的方式如何。例如，调用带注解的控制器需要解析注解。<code>HandlerAdapter</code> 的主要目的是保护 <code>DispatcherServlet</code> 免受此类细节的影响。</li></ul></li><li><strong><code>Handler</code> 处理请求</strong>：<code>DispatcherServlet</code> 提取 <code>Request</code> 中的模型数据，填充 <code>Handler</code> 入参，由 <code>HandlerAdapter</code> 负责调用 <code>Handler</code>（<code>Controller</code>)。 在填充 <code>Handler</code> 的入参过程中，根据你的配置，Spring 将帮你做一些额外的工作： <ul><li><code>HttpMessageConverter</code>： 将请求消息（如 Json、xml 等数据）转换成一个对象，将对象转换为指定的响应信息。</li><li>数据转换：对请求消息进行数据转换。如 <code>String</code> 转换成 <code>Integer</code>、<code>Double </code>等。</li><li>数据格式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等。</li><li>数据验证： 验证数据的有效性（长度、格式等），验证结果存储到 <code>BindingResult</code> 或 <code>Error</code> 中。</li></ul></li><li><strong>返回 <code>ModelAndView</code> 对象</strong>：<code>Handler</code> 处理完请求后，会返回一个 <code>ModelAndView</code> 对象，其中包含了处理结果（<code>Model</code>）和视图（<code>View</code>）信息。</li><li><strong>选择 <code>ViewResolver</code> 渲染 <code>ModelAndView</code></strong>：根据返回的 <code>ModelAndView</code>，选择一个适合的 <code>ViewResolver</code>，并将 <code>ModelAndView</code> 传递给 <code>ViewResolver</code> 进行渲染，最后将渲染后的结果返回给客户端。</li></ol><h4 id="dispatcherservlet-源码解读" tabindex="-1"><a class="header-anchor" href="#dispatcherservlet-源码解读" aria-hidden="true">#</a> DispatcherServlet 源码解读</h4><p>前面介绍了 <code>DispatcherServlet</code> 的工作流程，下面通过核心源码解读，来加深对 <code>DispatcherServlet</code> 工作原理的理解</p><p>（1）<code>onRefresh</code> 方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">initStrategies</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token doc-comment comment">/**
	 * 初始化此 servlet 使用的策略对象
	 * 可以在子类中重写以初始化更多策略对象
	 */</span>
	<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initStrategies</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">initMultipartResolver</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">initLocaleResolver</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">initThemeResolver</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">initHandlerMappings</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">initHandlerAdapters</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">initHandlerExceptionResolvers</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">initRequestToViewNameTranslator</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">initViewResolvers</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">initFlashMapManager</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）<code>doService</code> 方法</p><p><code>DispatcherServlet</code> 的核心方法 <code>doService</code> 源码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doService</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
		<span class="token function">logRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// 在包含的情况下保留请求属性的快照，以便能够在包含后恢复原始属性</span>
		<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> attributesSnapshot <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">isIncludeRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			attributesSnapshot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> attrNames <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getAttributeNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">while</span> <span class="token punctuation">(</span>attrNames<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token class-name">String</span> attrName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> attrNames<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cleanupAfterInclude <span class="token operator">||</span> attrName<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_STRATEGIES_PREFIX</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					attributesSnapshot<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>attrName<span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>attrName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// 设置请求属性（绑定各种 Resolver），使框架对象可用于处理程序和视图对象</span>
		request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">WEB_APPLICATION_CONTEXT_ATTRIBUTE</span><span class="token punctuation">,</span> <span class="token function">getWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">LOCALE_RESOLVER_ATTRIBUTE</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>localeResolver<span class="token punctuation">)</span><span class="token punctuation">;</span>
		request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">THEME_RESOLVER_ATTRIBUTE</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>themeResolver<span class="token punctuation">)</span><span class="token punctuation">;</span>
		request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">THEME_SOURCE_ATTRIBUTE</span><span class="token punctuation">,</span> <span class="token function">getThemeSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>flashMapManager <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">FlashMap</span> inputFlashMap <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>flashMapManager<span class="token punctuation">.</span><span class="token function">retrieveAndUpdate</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>inputFlashMap <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">INPUT_FLASH_MAP_ATTRIBUTE</span><span class="token punctuation">,</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableMap</span><span class="token punctuation">(</span>inputFlashMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">OUTPUT_FLASH_MAP_ATTRIBUTE</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">FlashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">FLASH_MAP_MANAGER_ATTRIBUTE</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>flashMapManager<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token class-name">RequestPath</span> previousRequestPath <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>parseRequestPath<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			previousRequestPath <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RequestPath</span><span class="token punctuation">)</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">ServletRequestPathUtils</span><span class="token punctuation">.</span><span class="token constant">PATH_ATTRIBUTE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token class-name">ServletRequestPathUtils</span><span class="token punctuation">.</span><span class="token function">parseAndCache</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 请求分发</span>
			<span class="token function">doDispatch</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">finally</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">WebAsyncUtils</span><span class="token punctuation">.</span><span class="token function">getAsyncManager</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isConcurrentHandlingStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// 恢复原始属性快照，以防包含</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>attributesSnapshot <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					<span class="token function">restoreAttributesAfterInclude</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> attributesSnapshot<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>parseRequestPath<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token class-name">ServletRequestPathUtils</span><span class="token punctuation">.</span><span class="token function">setParsedRequestPath</span><span class="token punctuation">(</span>previousRequestPath<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（3）<code>doDispatch</code> 方法</p><p><code>doService</code> 中的核心方法是 <code>doDispatch</code>，负责分发请求。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doDispatch</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
   <span class="token class-name">HttpServletRequest</span> processedRequest <span class="token operator">=</span> request<span class="token punctuation">;</span>
   <span class="token class-name">HandlerExecutionChain</span> mappedHandler <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
   <span class="token keyword">boolean</span> multipartRequestParsed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

   <span class="token class-name">WebAsyncManager</span> asyncManager <span class="token operator">=</span> <span class="token class-name">WebAsyncUtils</span><span class="token punctuation">.</span><span class="token function">getAsyncManager</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token class-name">ModelAndView</span> mv <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      <span class="token class-name">Exception</span> dispatchException <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

      <span class="token keyword">try</span> <span class="token punctuation">{</span>
         <span class="token comment">// 检查是否为multipart请求，如果是，则解析参数</span>
         processedRequest <span class="token operator">=</span> <span class="token function">checkMultipart</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
         multipartRequestParsed <span class="token operator">=</span> <span class="token punctuation">(</span>processedRequest <span class="token operator">!=</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>

         <span class="token comment">// 确定适配当前请求的 Handler</span>
         mappedHandler <span class="token operator">=</span> <span class="token function">getHandler</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span>mappedHandler <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">noHandlerFound</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span>

         <span class="token comment">// 确定适配当前请求的 HandlerAdapter</span>
         <span class="token class-name">HandlerAdapter</span> ha <span class="token operator">=</span> <span class="token function">getHandlerAdapter</span><span class="token punctuation">(</span>mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

         <span class="token comment">// 如果 Handler 支持，则处理 last-modified 头</span>
         <span class="token class-name">String</span> method <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">boolean</span> isGet <span class="token operator">=</span> <span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span>isGet <span class="token operator">||</span> <span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token constant">HEAD</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">long</span> lastModified <span class="token operator">=</span> ha<span class="token punctuation">.</span><span class="token function">getLastModified</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServletWebRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">checkNotModified</span><span class="token punctuation">(</span>lastModified<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> isGet<span class="token punctuation">)</span> <span class="token punctuation">{</span>
               <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
         <span class="token punctuation">}</span>

         <span class="token comment">// 请求的前置处理</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mappedHandler<span class="token punctuation">.</span><span class="token function">applyPreHandle</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span>

         <span class="token comment">// 调用实际的 Handler 处理请求并返回 ModelAndView（有可能为 null）</span>
         mv <span class="token operator">=</span> ha<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

         <span class="token keyword">if</span> <span class="token punctuation">(</span>asyncManager<span class="token punctuation">.</span><span class="token function">isConcurrentHandlingStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span>

         <span class="token function">applyDefaultViewName</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> mv<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token comment">// 请求的后置处理</span>
         mappedHandler<span class="token punctuation">.</span><span class="token function">applyPostHandle</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mv<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         dispatchException <span class="token operator">=</span> ex<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token comment">// As of 4.3, we&#39;re processing Errors thrown from handler methods as well,</span>
         <span class="token comment">// making them available for @ExceptionHandler methods and other scenarios.</span>
         dispatchException <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NestedServletException</span><span class="token punctuation">(</span><span class="token string">&quot;Handler dispatch failed&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
       <span class="token comment">// 处理响应结果</span>
      <span class="token function">processDispatchResult</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">,</span> mv<span class="token punctuation">,</span> dispatchException<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">triggerAfterCompletion</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">triggerAfterCompletion</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">NestedServletException</span><span class="token punctuation">(</span><span class="token string">&quot;Handler processing failed&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">finally</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>asyncManager<span class="token punctuation">.</span><span class="token function">isConcurrentHandlingStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token comment">// 替代 postHandle 和 afterCompletion</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span>mappedHandler <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            mappedHandler<span class="token punctuation">.</span><span class="token function">applyAfterConcurrentHandlingStarted</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">else</span> <span class="token punctuation">{</span>
         <span class="token comment">// 清理 multipart 请求所使用的资源</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span>multipartRequestParsed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">cleanupMultipart</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="上下文层次结构" tabindex="-1"><a class="header-anchor" href="#上下文层次结构" aria-hidden="true">#</a> 上下文层次结构</h4><p><code>DispatcherServlet</code> 需要一个 <code>WebApplicationContext</code>（<code>ApplicationContext</code> 的扩展类）用于它自己的配置。<code>WebApplicationContext</code> 有一个指向 <code>ServletContext</code> 和与之关联的 <code>Servlet</code> 的链接。它还绑定到 <code>ServletContext</code>，以便应用程序可以在 <code>RequestContextUtils</code> 上使用静态方法来查找 <code>WebApplicationContext</code>。</p><p>对于多数应用程序来说，拥有一个 <code>WebApplicationContext</code> 单例就足够。也可以有一个上下文层次结构，其中有一个根 <code>WebApplicationContext</code> 在多个 <code>DispatcherServlet</code>（或其他 <code>Servlet</code>）实例之间共享，每个实例都有自己的子 <code>WebApplicationContext</code> 配置。</p><p>根 <code>WebApplicationContext</code> 通常包含基础结构 bean，例如需要跨多个 Servlet 实例共享的数据存储和业务服务。这些 bean 是有效继承的，并且可以在特定 <code>Servlet</code> 的子 <code>WebApplicationContext</code> 中被覆盖（即重新声明），它通常包含指定 <code>Servlet</code> 的本地 bean。下图显示了这种关系：</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20230213103223.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>【示例】配置 <code>WebApplicationContext</code> 层次结构：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyWebAppInitializer</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractAnnotationConfigDispatcherServletInitializer</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getRootConfigClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token class-name">RootConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletConfigClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token class-name">App1Config</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">&quot;/app1/*&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【示例】<code>web.xml</code> 方式配置 <code>WebApplicationContext</code> 层次结构：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>/WEB-INF/root-context.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>app1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>/WEB-INF/app1-context.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>app1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/app1/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h2><p><code>DispatcherServlet</code> 与其他 Servlet 一样，需要使用 Java 配置或在 <code>web.xml</code> 中根据 Servlet 规范进行声明和映射。也就是说，<code>DispatcherServlet</code> 使用 Spring 配置来发现请求映射、视图解析、异常处理等所需的委托组件。</p><p>可以通过将 Servlet 初始化参数（<code>init-param</code> 元素）添加到 <code>web.xml</code> 文件中的 Servlet 声明来自定义各个 <code>DispatcherServlet</code> 实例。下表列出了支持的参数：</p>`,30),r=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"参数"),n("th",{style:{"text-align":"left"}},"说明")])],-1),d=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"contextClass")]),n("td",{style:{"text-align":"left"}},[s("实现 "),n("code",null,"ConfigurableWebApplicationContext"),s(" 的类，将由此 Servlet 实例化和本地配置。默认情况下，使用 "),n("code",null,"XmlWebApplicationContext"),s("。")])],-1),k=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"contextConfigLocation")]),n("td",{style:{"text-align":"left"}},[s("传递给上下文实例（由 "),n("code",null,"contextClass"),s(" 指定）以指示可以在何处找到上下文的字符串。该字符串可能包含多个字符串（使用逗号作为分隔符）以支持多个上下文。在具有两次定义的 bean 的多个上下文位置的情况下，最新的位置优先。")])],-1),v=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"namespace")]),n("td",{style:{"text-align":"left"}},[n("code",null,"WebApplicationContext"),s(" 的命名空间。默认为 "),n("code",null,"[servlet-name]-servlet"),s("。")])],-1),m=n("td",{style:{"text-align":"left"}},[n("code",null,"throwExceptionIfNoHandlerFound")],-1),g={style:{"text-align":"left"}},b=n("code",null,"NoHandlerFoundException",-1),h=n("code",null,"HandlerExceptionResolver",-1),f=n("code",null,"@ExceptionHandler",-1),w=n("code",null,"false",-1),x=n("code",null,"DispatcherServlet",-1),y={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc",target:"_blank",rel:"noopener noreferrer"},S=t(`<p>应用程序可以声明处理请求所需的特殊 Bean 类型中列出的基础结构 bean。<code>DispatcherServlet</code> 检查每个特殊 bean 的 <code>WebApplicationContext</code>。如果没有匹配的 bean 类型，它将回退到 <code>DispatcherServlet.properties</code> 中列出的默认类型。</p><p>在大多数情况下，MVC 配置是最好的起点。它以 Java 或 XML 声明所需的 bean，并提供更高级别的配置回调 API 来对其进行自定义。</p><blockquote><p>注意：Spring Boot 依赖于 MVC Java 配置来配置 Spring MVC，并提供了许多额外的方便选项。</p></blockquote><p>在 Servlet 环境中，您可以选择以编程方式配置 Servlet 容器作为替代方案或与 web.xml 文件结合使用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span></span><span class="token class-name">WebApplicationInitializer</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyWebApplicationInitializer</span> <span class="token keyword">implements</span> <span class="token class-name">WebApplicationInitializer</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStartup</span><span class="token punctuation">(</span><span class="token class-name">ServletContext</span> container<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">XmlWebApplicationContext</span> appContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XmlWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        appContext<span class="token punctuation">.</span><span class="token function">setConfigLocation</span><span class="token punctuation">(</span><span class="token string">&quot;/WEB-INF/spring/dispatcher-config.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">ServletRegistration<span class="token punctuation">.</span>Dynamic</span> registration <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">addServlet</span><span class="token punctuation">(</span><span class="token string">&quot;dispatcher&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DispatcherServlet</span><span class="token punctuation">(</span>appContext<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        registration<span class="token punctuation">.</span><span class="token function">setLoadOnStartup</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        registration<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>WebApplicationInitializer</code> 是 Spring MVC 提供的接口，可确保检测到自定义的实现并自动用于初始化任何 Servlet 3 容器。名为 <code>AbstractDispatcherServletInitializer</code> 的 <code>WebApplicationInitializer</code> 的抽象基类实现通过覆盖方法来指定 servlet 映射和 <code>DispatcherServlet</code> 配置的位置，使得注册 <code>DispatcherServlet</code> 变得更加容易。</p><p>对于使用基于 Java 的 Spring 配置的应用程序，建议这样做，如以下示例所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyWebAppInitializer</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractAnnotationConfigDispatcherServletInitializer</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getRootConfigClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletConfigClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token class-name">MyWebConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">&quot;/&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果使用基于 XML 的 Spring 配置，则应直接从 AbstractDispatcherServletInitializer 扩展，如以下示例所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyWebAppInitializer</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractDispatcherServletInitializer</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">WebApplicationContext</span> <span class="token function">createRootApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">WebApplicationContext</span> <span class="token function">createServletApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">XmlWebApplicationContext</span> cxt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XmlWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cxt<span class="token punctuation">.</span><span class="token function">setConfigLocation</span><span class="token punctuation">(</span><span class="token string">&quot;/WEB-INF/spring/dispatcher-config.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> cxt<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">&quot;/&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>AbstractDispatcherServletInitializer</code> 还提供了一种方便的方法来添加 Filter 实例并将它们自动映射到 <code>DispatcherServlet</code>，如以下示例所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyWebAppInitializer</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractDispatcherServletInitializer</span> <span class="token punctuation">{</span>

    <span class="token comment">// ...</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">Filter</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletFilters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Filter</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token class-name">HiddenHttpMethodFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CharacterEncodingFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每个过滤器都根据其具体类型添加一个默认名称，并自动映射到 <code>DispatcherServlet</code>。</p><p><code>AbstractDispatcherServletInitializer</code> 的 <code>isAsyncSupported</code> 保护方法提供了一个单独的位置来启用 <code>DispatcherServlet</code> 和映射到它的所有过滤器的异步支持。默认情况下，此标志设置为 true。</p><p>最后，如果需要进一步自定义 <code>DispatcherServlet</code> 本身，可以重写 <code>createDispatcherServlet</code> 方法。</p><p>【示例】Java 方式注册并初始化 <code>DispatcherServlet</code>，它由 Servlet 容器自动检测（请参阅 Servlet Config）：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyWebApplicationInitializer</span> <span class="token keyword">implements</span> <span class="token class-name">WebApplicationInitializer</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStartup</span><span class="token punctuation">(</span><span class="token class-name">ServletContext</span> servletContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// Load Spring web application configuration</span>
        <span class="token class-name">AnnotationConfigWebApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">AppConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Create and register the DispatcherServlet</span>
        <span class="token class-name">DispatcherServlet</span> servlet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DispatcherServlet</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ServletRegistration<span class="token punctuation">.</span>Dynamic</span> registration <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">addServlet</span><span class="token punctuation">(</span><span class="token string">&quot;app&quot;</span><span class="token punctuation">,</span> servlet<span class="token punctuation">)</span><span class="token punctuation">;</span>
        registration<span class="token punctuation">.</span><span class="token function">setLoadOnStartup</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        registration<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/app/*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【示例】web.xml 方式注册并初始化 <code>DispatcherServlet</code></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>/WEB-INF/app-context.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>app<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>app<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/app/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="路径匹配" tabindex="-1"><a class="header-anchor" href="#路径匹配" aria-hidden="true">#</a> 路径匹配</h2><p>Servlet API 将完整的请求路径公开为 <code>requestURI</code>，并将其进一步细分为 <code>contextPath</code>、<code>servletPath</code> 和 <code>pathInfo</code>，它们的值因 Servlet 的映射方式而异。从这些输入中，Spring MVC 需要确定用于映射处理程序的查找路径，如果适用，它应该排除 <code>contextPath</code> 和任何 <code>servletMapping</code> 前缀。</p><p><code>servletPath</code> 和 <code>pathInfo</code> 已解码，这使得它们无法直接与完整的 <code>requestURI</code> 进行比较以派生 <code>lookupPath</code>，因此有必要对 <code>requestURI</code> 进行解码。然而，这引入了它自己的问题，因为路径可能包含编码的保留字符，例如 <code>&quot;/&quot;</code> 或 <code>&quot;;&quot;</code> 这反过来又会在解码后改变路径的结构，这也可能导致安全问题。此外，Servlet 容器可能会在不同程度上规范化 <code>servletPath</code>，这使得进一步无法对 <code>requestURI</code> 执行 <code>startsWith</code> 比较。</p><p>这就是为什么最好避免依赖基于前缀的 <code>servletPath</code> 映射类型附带的 <code>servletPath</code>。如果 <code>DispatcherServlet</code> 被映射为带有 <code>&quot;/&quot;</code> 的默认 Servlet，或者没有带 <code>&quot;/*&quot;</code> 的前缀，并且 Servlet 容器是 4.0+，则 Spring MVC 能够检测 Servlet 映射类型，并避免使用 <code>servletPath</code> 和 <code>pathInfo</code>。在 3.1 Servlet 容器上，假设相同的 Servlet 映射类型，可以通过在 MVC 配置中通过路径匹配提供一个带有 <code>alwaysUseFullPath=true</code> 的 <code>UrlPathHelper</code> 来实现等效。</p><p>幸运的是，默认的 Servlet 映射 <code>&quot;/&quot;</code> 是一个不错的选择。但是，仍然存在一个问题，即需要对 <code>requestURI</code> 进行解码才能与控制器映射进行比较。这也是不可取的，因为可能会解码改变路径结构的保留字。如果不需要这样的字符，那么您可以拒绝它们（如 Spring Security HTTP 防火墙），或者您可以使用 <code>urlDecode=false</code> 配置 <code>UrlPathHelper</code>，但控制器映射需要与编码路径匹配，这可能并不总是有效。此外，有时 <code>DispatcherServlet</code> 需要与另一个 Servlet 共享 URL 空间，并且可能需要通过前缀进行映射。</p><p>在使用 <code>PathPatternParser</code> 和解析模式时解决了上述问题，作为使用 <code>AntPathMatcher</code> 进行字符串路径匹配的替代方法。<code>PathPatternParser</code> 从 5.3 版本开始就可以在 Spring MVC 中使用，并且从 6.0 版本开始默认启用。与需要解码查找路径或编码控制器映射的 <code>AntPathMatcher</code> 不同，解析的 <code>PathPattern</code> 与称为 <code>RequestPath</code> 的路径的解析表示匹配，一次一个路径段。这允许单独解码和清理路径段值，而没有改变路径结构的风险。解析的 <code>PathPattern</code> 也支持使用 <code>servletPath</code> 前缀映射，只要使用 Servlet 路径映射并且前缀保持简单，即它没有编码字符。</p><h2 id="拦截器" tabindex="-1"><a class="header-anchor" href="#拦截器" aria-hidden="true">#</a> 拦截器</h2><p>所有 <code>HandlerMapping</code> 实现都支持处理拦截器，当想要将特定功能应用于某些请求时，这些拦截器很有用——例如，检查主体。拦截器必须使用 <code>org.springframework.web.servlet</code> 包中的三个方法实现 <code>HandlerInterceptor</code>，这三个方法应该提供足够的灵活性来进行各种预处理和后处理：</p><ul><li><code>preHandle(..)</code>：在实际 handler 之前执行</li><li><code>postHandle(..)</code>：handler 之后执行</li><li><code>afterCompletion(..)</code>：完成请求后执行</li></ul><p><code>preHandle(..)</code> 方法返回一个布尔值。可以使用此方法中断或继续执行链的处理。当此方法返回 true 时，处理程序执行链将继续。当它返回 false 时，<code>DispatcherServlet</code> 假定拦截器本身已经处理请求（并且，例如，呈现适当的视图）并且不会继续执行其他拦截器和执行链中的实际处理程序。</p>`,29),R={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-config-interceptors",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"HandlerMapping",-1),C=n("code",null,"postHandle",-1),_=n("code",null,"@ResponseBody",-1),A=n("code",null,"ResponseEntity",-1),H=n("code",null,"HandlerAdapter",-1),M=n("code",null,"postHandle",-1),T=n("code",null,"ResponseBodyAdvice",-1),L={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-ann-controller-advice",target:"_blank",rel:"noopener noreferrer"},E=n("code",null,"RequestMappingHandlerAdapter",-1),V=n("h2",{id:"解析器",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#解析器","aria-hidden":"true"},"#"),s(" 解析器")],-1),D=n("p",null,"DispatcherServlet 会加载多种解析器来处理请求，比较常见的有以下几个：",-1),I={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-exceptionhandlers",target:"_blank",rel:"noopener noreferrer"},P=n("code",null,"HandlerExceptionResolver",-1),W={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-viewresolver",target:"_blank",rel:"noopener noreferrer"},U=n("code",null,"ViewResolver",-1),N={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-localeresolver",target:"_blank",rel:"noopener noreferrer"},j=n("code",null,"LocaleResolver",-1),F={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-timezone",target:"_blank",rel:"noopener noreferrer"},B={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-themeresolver",target:"_blank",rel:"noopener noreferrer"},O=n("code",null,"ThemeResolver",-1),z={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-multipart",target:"_blank",rel:"noopener noreferrer"},J=n("code",null,"MultipartResolver",-1),X=t('<h3 id="handlerexceptionresolver" tabindex="-1"><a class="header-anchor" href="#handlerexceptionresolver" aria-hidden="true">#</a> HandlerExceptionResolver</h3><p>在 <code>WebApplicationContext</code> 中声明的 <code>HandlerExceptionResolver</code> 用于解决请求处理期间抛出的异常。这些异常解析器允许自定义逻辑来解决异常。</p><p>对于 HTTP 缓存支持，处理程序可以使用 <code>WebRequest</code> 的 <code>checkNotModified</code> 方法，以及用于控制器的 HTTP 缓存中所述的带注释控制器的更多选项。</p><p>如果在请求映射期间发生异常或从请求处理程序（例如 <code>@Controller</code>）抛出异常，则 <code>DispatcherServlet</code> 委托 <code>HandlerExceptionResolver</code> 链来解决异常并提供替代处理，这通常是错误响应。</p><p>下表列出了可用的 <code>HandlerExceptionResolver</code> 实现：</p>',5),G=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},[n("code",null,"HandlerExceptionResolver")]),n("th",{style:{"text-align":"left"}},"说明")])],-1),Z=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"SimpleMappingExceptionResolver")]),n("td",{style:{"text-align":"left"}},"异常类名称和错误视图名称之间的映射。用于在浏览器应用程序中呈现错误页面。")],-1),K={style:{"text-align":"left"}},Q={href:"https://docs.spring.io/spring-framework/docs/6.0.4/javadoc-api/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolver.html",target:"_blank",rel:"noopener noreferrer"},Y=n("code",null,"DefaultHandlerExceptionResolver",-1),$=n("td",{style:{"text-align":"left"}},"解决由 Spring MVC 引发的异常并将它们映射到 HTTP 状态代码。",-1),nn=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"ResponseStatusExceptionResolver")]),n("td",{style:{"text-align":"left"}},[s("使用 "),n("code",null,"@ResponseStatus"),s(" 注解解决异常，并根据注解中的值将它们映射到 HTTP 状态代码。")])],-1),sn=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"ExceptionHandlerExceptionResolver")]),n("td",{style:{"text-align":"left"}},[s("通过在 "),n("code",null,"@Controller"),s(" 或 "),n("code",null,"@ControllerAdvice"),s(" 类中调用 "),n("code",null,"@ExceptionHandler"),s(" 方法来解决异常。")])],-1),an=t(`<h4 id="解析器链" tabindex="-1"><a class="header-anchor" href="#解析器链" aria-hidden="true">#</a> 解析器链</h4><p>您可以通过在 Spring 配置中声明多个 <code>HandlerExceptionResolver</code> bean 并根据需要设置它们的顺序属性来构成异常解析器链。order 属性越高，异常解析器的位置就越靠后。</p><p><code>HandlerExceptionResolver</code> 的约定使它可以返回以下内容：</p><ul><li><p>指向错误视图的 <code>ModelAndView</code>。</p></li><li><p>如果异常是在解析器中处理的，则为空的 <code>ModelAndView</code>。</p></li><li><p>如果异常仍未解决，则为 null，供后续解析器尝试，如果异常仍然存在，则允许向上冒泡到 Servlet 容器。</p></li></ul><p>MVC Config 自动为默认的 Spring MVC 异常、<code>@ResponseStatus</code> 注释的异常和对 <code>@ExceptionHandler</code> 方法的支持声明内置解析器。您可以自定义该列表或替换它。</p><h4 id="错误页面" tabindex="-1"><a class="header-anchor" href="#错误页面" aria-hidden="true">#</a> 错误页面</h4><p>如果异常仍未被任何 <code>HandlerExceptionResolver</code> 处理并因此继续传播，或者如果响应状态设置为错误状态（即 4xx、5xx），Servlet 容器可以在 HTML 中呈现默认错误页面。要自定义容器的默认错误页面，您可以在 <code>web.xml</code> 中声明一个错误页面映射。以下示例显示了如何执行此操作：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-page</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>location</span><span class="token punctuation">&gt;</span></span>/error<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>location</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-page</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在前面的示例中，当出现异常或响应具有错误状态时，Servlet 容器会在容器内将 ERROR 分派到配置的 URL（例如，<code>/error</code>）。然后由 <code>DispatcherServlet</code> 处理，可能将其映射到 <code>@Controller</code>，后者可以返回带有模型的错误视图名称或呈现 JSON 响应，如以下示例所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ErrorController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;/error&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;status&quot;</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;jakarta.servlet.error.status_code&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;reason&quot;</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;jakarta.servlet.error.message&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> map<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>提示：Servlet API 不提供在 Java 中创建错误页面映射的方法。但是，您可以同时使用 <code>WebApplicationInitializer</code> 和最小的 <code>web.xml</code>。</p></blockquote><h3 id="viewresolver" tabindex="-1"><a class="header-anchor" href="#viewresolver" aria-hidden="true">#</a> ViewResolver</h3><p>Spring MVC 定义了 <code>ViewResolver</code> 和 <code>View</code> 接口，让用户可以在浏览器中渲染模型，而无需限定于特定的视图技术。<code>ViewResolver</code> 提供视图名称和实际视图之间的映射。<code>View</code> 解决了在移交给特定视图技术之前准备数据的问题。</p><p>下表提供了有关 ViewResolver 一些子类：</p><table><thead><tr><th style="text-align:left;">ViewResolver</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>AbstractCachingViewResolver</code></td><td style="text-align:left;"><code>AbstractCachingViewResolver</code> 的子类缓存它们解析的视图实例。缓存提高了某些视图技术的性能。您可以通过将 <code>cache</code> 属性设置为 <code>false</code> 来关闭缓存。此外，如果您必须在运行时刷新某个视图（例如，修改 FreeMarker 模板时），您可以使用 removeFromCache(String viewName, Locale loc) 方法。</td></tr><tr><td style="text-align:left;"><code>UrlBasedViewResolver</code></td><td style="text-align:left;"><code>ViewResolver</code> 接口的简单实现，无需显式映射定义即可将逻辑视图名称直接解析为 URL。如果您的逻辑名称以直接的方式匹配您的视图资源的名称，而不需要任意映射，那么这是合适的。</td></tr><tr><td style="text-align:left;"><code>InternalResourceViewResolver</code></td><td style="text-align:left;"><code>UrlBasedViewResolver</code> 的子类，支持 <code>InternalResourceView</code>（实际上是 Servlet 和 JSP）以及 <code>JstlView</code> 和 <code>TilesView</code> 等子类。可以使用 <code>setViewClass(..)</code> 为该解析器生成的所有视图指定视图类。</td></tr><tr><td style="text-align:left;"><code>FreeMarkerViewResolver</code></td><td style="text-align:left;"><code>UrlBasedViewResolver</code> 的子类，支持 <code>FreeMarkerView</code> 和它们的自定义子类。</td></tr><tr><td style="text-align:left;"><code>ContentNegotiatingViewResolver</code></td><td style="text-align:left;"><code>ViewResolver</code> 接口的实现，该接口根据请求文件名或 <code>Accept</code> 标头解析视图。</td></tr><tr><td style="text-align:left;"><code>BeanNameViewResolver</code></td><td style="text-align:left;">将视图名称解释为当前应用程序上下文中的 bean 名称的 ViewResolver 接口的实现。这是一个非常灵活的变体，允许根据不同的视图名称混合和匹配不同的视图类型。每个这样的“视图”都可以定义为一个 bean，例如 在 XML 或配置类中。</td></tr></tbody></table><h4 id="处理" tabindex="-1"><a class="header-anchor" href="#处理" aria-hidden="true">#</a> 处理</h4><p>可以通过声明多个解析器来构成视图解析器链，如果需要，还可以通过设置 order 属性来指定顺序。顺序属性越高，视图解析器在链中的位置就越靠后。</p><p><code>ViewResolver</code> 的约定指定它可以返回 null 以指示找不到视图。但是，对于 JSP 和 <code>InternalResourceViewResolver</code>，确定 JSP 是否存在的唯一方法是通过 <code>RequestDispatcher</code> 执行分派。因此，您必须始终将 <code>InternalResourceViewResolver</code> 配置为在视图解析器的整体顺序中排在最后。</p><p>配置视图解析就像将 <code>ViewResolver</code> 添加到 Spring 配置中一样简单。MVC Config 为视图解析器和添加无逻辑视图控制器提供了专用的配置 API，这对于没有控制器逻辑的 HTML 模板渲染很有用。</p><h4 id="重定向" tabindex="-1"><a class="header-anchor" href="#重定向" aria-hidden="true">#</a> 重定向</h4><p>视图名称中的特殊前缀 <code>redirect:</code> 可以实现一个重定向。<code>UrlBasedViewResolver</code>（及其子类）将此识别为需要重定向的指令。视图名称的其余部分是重定向 URL。</p><p>最终效果与控制器返回 <code>RedirectView</code> 相同，但现在控制器本身可以根据逻辑视图名称进行操作。逻辑视图名称（例如 <code>redirect:/myapp/some/resource</code>）相对于当前 Servlet 上下文重定向，而名称（例如 <code>redirect:https://myhost.com/some/arbitrary/path</code>）重定向到绝对 URL。</p><p>请注意，如果使用 <code>@ResponseStatus</code> 注解标记控制器方法，则注解值优先于 <code>RedirectView</code> 设置的响应状态。</p><h4 id="转发" tabindex="-1"><a class="header-anchor" href="#转发" aria-hidden="true">#</a> 转发</h4><p>视图名称中的特殊前缀 <code>forward:</code> 可以实现一个转发。这将创建一个 <code>InternalResourceView</code>，它执行 <code>RequestDispatcher.forward()</code>。因此，此前缀对 <code>InternalResourceViewResolver</code> 和 <code>InternalResourceView</code>（对于 JSP）没有用，但如果您使用另一种视图技术但仍想强制转发由 Servlet/JSP 引擎处理的资源，它可能会有所帮助。</p><h4 id="内容协商" tabindex="-1"><a class="header-anchor" href="#内容协商" aria-hidden="true">#</a> 内容协商</h4><p><code>ContentNegotiatingViewResolver</code> 本身不解析视图，而是委托给其他视图解析器并选择类似于客户端请求的表示的视图。可以从 <code>Accept</code> 头或查询参数（例如，<code>&quot;/path?format=pdf&quot;</code>）确定表示形式。</p><p><code>ContentNegotiatingViewResolver</code> 通过将请求媒体类型与其每个 <code>ViewResolver</code> 关联的 <code>View</code> 支持的媒体类型（也称为 <code>Content-Type</code>）进行比较，来选择合适的 <code>View</code> 来处理请求。列表中第一个具有兼容 <code>Content-Type</code> 的视图将处理结果返回给客户端。如果 <code>ViewResolver</code> 链无法提供兼容的视图，则会查阅通过 <code>DefaultViews</code> 属性指定的视图列表。后一个选项适用于单例视图，它可以呈现当前资源的适当表示，而不管逻辑视图名称如何。<code>Accept</code> 标头可以包含通配符（例如 <code>text/*</code>），在这种情况下，<code>Content-Type</code> 为 <code>text/xml</code> 的 View 是兼容的匹配项。</p><h3 id="localeresolver" tabindex="-1"><a class="header-anchor" href="#localeresolver" aria-hidden="true">#</a> LocaleResolver</h3><p>大部分的 Spring 架构都支持国际化，就像 Spring web MVC 框架所做的那样。<code>DispatcherServlet</code> 允许您使用客户端的语言环境自动解析消息。这是通过 <code>LocaleResolver</code> 对象完成的。</p><p>当收到请求时，<code>DispatcherServlet</code> 会寻找语言环境解析器，如果找到，它会尝试使用它来设置 Locale 环境。通过使用 <code>RequestContext.getLocale()</code> 方法，您始终可以检索由 Locale 解析器解析的语言环境。</p><p>除了自动识别 Locale 环境之外，您还可以为 handle 映射附加拦截器，在特定情况下更改 Locale 环境设置（例如，基于请求中的参数）。</p><p>Locale 解析器和拦截器在 <code>org.springframework.web.servlet.i18n</code> 包中定义，并以正常方式在您的应用程序上下文中配置。Spring 中有以下 Locale 解析器可供选择。</p>`,33),en={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-timezone",target:"_blank",rel:"noopener noreferrer"},tn={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-localeresolver-acceptheader",target:"_blank",rel:"noopener noreferrer"},pn={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-localeresolver-cookie",target:"_blank",rel:"noopener noreferrer"},on={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-localeresolver-session",target:"_blank",rel:"noopener noreferrer"},cn={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-localeresolver-interceptor",target:"_blank",rel:"noopener noreferrer"},ln=t(`<h4 id="localeresolver-1" tabindex="-1"><a class="header-anchor" href="#localeresolver-1" aria-hidden="true">#</a> LocaleResolver</h4><p>除了获取客户端的区域设置外，了解其时区通常也很有用。<code>LocaleContextResolver</code> 接口提供了 <code>LocaleResolver</code> 的扩展，让解析器提供更丰富的 <code>LocaleContext</code>，其中可能包括时区信息。</p><p>如果可用，可以使用 <code>RequestContext.getTimeZone()</code> 方法获取用户的 <code>TimeZone</code>。在 Spring 的 <code>ConversionService</code> 中注册的任何日期/时间 <code>Converter</code> 和 <code>Formatter</code> 对象会自动使用时区信息。</p><h4 id="标头解析器" tabindex="-1"><a class="header-anchor" href="#标头解析器" aria-hidden="true">#</a> 标头解析器</h4><p>此 Locale 解析器检查客户端（例如网络浏览器）发送的请求中的 <code>accept-language</code> 头。通常，此头字段包含客户端操作系统的区域信息。请注意，此解析器不支持时区信息。</p><h4 id="cookielocaleresolver" tabindex="-1"><a class="header-anchor" href="#cookielocaleresolver" aria-hidden="true">#</a> CookieLocaleResolver</h4><p>This locale resolver inspects a <code>Cookie</code> that might exist on the client to see if a <code>Locale</code> or <code>TimeZone</code> is specified. If so, it uses the specified details. By using the properties of this locale resolver, you can specify the name of the cookie as well as the maximum age. The following example defines a <code>CookieLocaleResolver</code>:</p><p>此 Locale 解析器检查客户端上是否存在 <code>Cookie</code>，以查看是否指定了 <code>Locale</code> 或 <code>TimeZone</code>。如果是，它会使用指定的详细信息。通过使用此 Locale 解析器的属性，可以指定 cookie 的名称以及最长期限。以下示例定义了 <code>CookieLocaleResolver</code>：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>localeResolver<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.web.servlet.i18n.CookieLocaleResolver<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cookieName<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>clientlanguage<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

    <span class="token comment">&lt;!-- in seconds. If set to -1, the cookie is not persisted (deleted when browser shuts down) --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cookieMaxAge<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>100000<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下表描述了 <code>CookieLocaleResolver</code> 的属性：</p><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">默认值</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>cookieName</code></td><td style="text-align:left;">类名 + LOCALE</td><td style="text-align:left;">cookie 名</td></tr><tr><td style="text-align:left;"><code>cookieMaxAge</code></td><td style="text-align:left;">Servlet container default</td><td style="text-align:left;">cookie 在客户端上保留的最长时间。如果指定了“-1”，则不会保留 cookie。它仅在客户端关闭浏览器之前可用。</td></tr><tr><td style="text-align:left;"><code>cookiePath</code></td><td style="text-align:left;">/</td><td style="text-align:left;">将 cookie 的可见性限制在您网站的特定部分。当指定 <code>cookiePath</code> 时，cookie 仅对该路径及其下方的路径可见。</td></tr></tbody></table><h4 id="sessionlocaleresolver" tabindex="-1"><a class="header-anchor" href="#sessionlocaleresolver" aria-hidden="true">#</a> SessionLocaleResolver</h4><p><code>SessionLocaleResolver</code> 允许您从可能与用户请求相关联的会话中检索 <code>Locale</code> 和 <code>TimeZone</code>。与 <code>CookieLocaleResolver</code> 相比，此策略将本地选择的 locale 设置存储在 Servlet 容器的 <code>HttpSession</code> 中。因此，这些设置对于每个会话都是临时的，因此会在每个会话结束时丢失。</p><p>注意，这与外部会话管理机制（例如 Spring Session 项目）没有直接关系。此 <code>SessionLocaleResolver</code> 根据当前 <code>HttpServletRequest</code> 评估和修改相应的 <code>HttpSession</code> 属性。</p><h4 id="localechangeinterceptor" tabindex="-1"><a class="header-anchor" href="#localechangeinterceptor" aria-hidden="true">#</a> LocaleChangeInterceptor</h4><p>可以通过将 <code>LocaleChangeInterceptor</code> 添加到一个 <code>HandlerMapping</code> 定义来启用区域设置更改。它检测请求中的参数并相应地更改 Locale 环境，在调度程序的应用程序上下文中调用 <code>LocaleResolver</code> 上的 <code>setLocale</code> 方法。下面的示例显示调用所有包含名为 <code>siteLanguage</code> 的参数的 <code>*.view</code> 资源，以更改语言环境。因此，例如，对 URL <code>https://www.sf.net/home.view?siteLanguage=nl</code> 的请求将站点语言更改为荷兰语。以下示例显示了如何拦截语言环境：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>localeChangeInterceptor<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.web.servlet.i18n.LocaleChangeInterceptor<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>paramName<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>siteLanguage<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>localeResolver<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.web.servlet.i18n.CookieLocaleResolver<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>urlMapping<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.web.servlet.handler.SimpleUrlHandlerMapping<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>interceptors<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>localeChangeInterceptor<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mappings<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>/**/*.view=someController<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="themeresolver" tabindex="-1"><a class="header-anchor" href="#themeresolver" aria-hidden="true">#</a> ThemeResolver</h3><p>您可以应用 Spring Web MVC 框架主题来设置应用程序的整体外观，从而增强用户体验。主题是静态资源的集合，通常是样式表和图像，它们会影响应用程序的视觉风格。</p><p>要在 Web 应用程序中使用主题，必须设置 <code>org.springframework.ui.context.ThemeSource</code> 接口的实现。<code>WebApplicationContext</code> 接口扩展了 <code>ThemeSource</code> 但将其职责委托给了专门的实现。默认情况下，委托是 <code>org.springframework.ui.context.support.ResourceBundleThemeSource</code> ，它从类的根路径加载属性文件。要使用自定义的 <code>ThemeSource</code> 实现或配置 <code>ResourceBundleThemeSource</code> 的基本名称前缀，您可以在应用程序上下文中使用保留名称 <code>themeSource</code> 注册一个 bean。Web 应用程序上下文自动检测具有该名称的 bean 并使用它。</p><p>当使用 <code>ResourceBundleThemeSource</code> 时，主题是在一个简单的属性文件中定义的。属性文件列出了构成主题的资源，如以下示例所示：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">styleSheet</span><span class="token punctuation">=</span><span class="token value attr-value">/themes/cool/style.css</span>
<span class="token key attr-name">background</span><span class="token punctuation">=</span><span class="token value attr-value">/themes/cool/img/coolBg.jpg</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>属性的键是从视图代码中引用主题元素的名称。对于 JSP，通常使用 <code>spring:theme</code> 自定义标签来执行此操作，它与 <code>spring:message</code> 标签非常相似。以下 JSP 片段使用前面示例中定义的主题来自定义外观：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>&lt;%@ taglib prefix=&quot;spring&quot; uri=&quot;http://www.springframework.org/tags&quot;%&gt;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>&lt;spring:theme code=&#39;styleSheet&#39;/&gt;<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/css<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>background=&lt;spring:theme code=&#39;background&#39;/&gt;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        ...
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下， <code>ResourceBundleThemeSource</code> 使用空的基本名称前缀。因此，属性文件是从类路径的根加载的。因此，可以将 <code>cool.properties</code> 主题定义放在类路径根目录中（例如，在 <code>/WEB-INF/classes</code> 中）。<code>ResourceBundleThemeSource</code> 使用标准的 Java 资源包加载机制，允许主题完全国际化。例如，我们可以有一个 <code>/WEB-INF/classes/cool_nl.properties</code>，它引用一个带有荷兰语文本的特殊背景图像。</p><p>定义主题后，可以决定使用哪个要使用的主题。<code>DispatcherServlet</code> 查找名为 <code>themeResolver</code> 的 bean 以找出要使用的 <code>ThemeResolver</code> 实现。主题解析器的工作方式与 <code>LocaleResolver</code> 大致相同。它检测用于特定请求的主题，也可以更改请求的主题。下表描述了 Spring 提供的主题解析器：</p><table><thead><tr><th style="text-align:left;">Class</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>FixedThemeResolver</code></td><td style="text-align:left;">选择一个固定的主题，使用 <code>defaultThemeName</code> 属性设置。</td></tr><tr><td style="text-align:left;"><code>SessionThemeResolver</code></td><td style="text-align:left;">主题在用户的 HTTP 会话中维护。 它只需要为每个会话设置一次，但不会在会话之间持续存在。</td></tr><tr><td style="text-align:left;"><code>CookieThemeResolver</code></td><td style="text-align:left;">所选主题存储在客户端的 cookie 中。</td></tr></tbody></table><p>Spring 还提供了一个 <code>ThemeChangeInterceptor</code>，它允许使用一个简单的请求参数在每个请求上更改主题。</p><h3 id="multipartresolver" tabindex="-1"><a class="header-anchor" href="#multipartresolver" aria-hidden="true">#</a> MultipartResolver</h3><p><code>org.springframework.web.multipart</code> 包中的 <code>MultipartResolver</code> 是一种解析 multipart 请求（包括文件上传）的策略。 有一个基于容器的 <code>StandardServletMultipartResolver</code> 实现，用于 Servlet 多部分请求解析。 请注意，从具有新 Servlet 5.0+ 基线的 Spring Framework 6.0 开始，基于 Apache Commons FileUpload 的过时的 <code>CommonsMultipartResolver</code> 不再可用。</p><p>要启用 multipart 处理，需要在 <code>DispatcherServlet</code> Spring 配置中声明一个名为 <code>multipartResolver</code> 的 <code>MultipartResolver</code>。 <code>DispatcherServlet</code> 检测到它并将其应用于传入请求。 当接收到内容类型为 <code>multipart/form-data</code> 的 POST 时，解析器解析将当前 <code>HttpServletRequest</code> 包装为 <code>MultipartHttpServletRequest</code> 的内容，以提供对已解析文件的访问以及将部分作为请求参数公开。</p><p>Servlet 多部分解析需要通过 Servlet 容器配置启用。 为此：</p><ul><li><p>在 Java 中，在 Servlet 注册上设置一个 <code>MultipartConfigElement</code>。</p></li><li><p>在 <code>web.xml</code> 中，将 <code>&lt;multipart-config&gt;</code> 部分添加到 servlet 声明。</p></li></ul><p>以下示例显示如何在 Servlet 注册上设置 <code>MultipartConfigElement</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppInitializer</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractAnnotationConfigDispatcherServletInitializer</span> <span class="token punctuation">{</span>

    <span class="token comment">// ...</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">customizeRegistration</span><span class="token punctuation">(</span><span class="token class-name">ServletRegistration<span class="token punctuation">.</span>Dynamic</span> registration<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// Optionally also set maxFileSize, maxRequestSize, fileSizeThreshold</span>
        registration<span class="token punctuation">.</span><span class="token function">setMultipartConfig</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MultipartConfigElement</span><span class="token punctuation">(</span><span class="token string">&quot;/tmp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一旦 Servlet multipart 配置好，就可以添加一个名为 <code>multipartResolver</code> 的 <code>StandardServletMultipartResolver</code> 类型的 bean。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,37),un={href:"https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/index.html",target:"_blank",rel:"noopener noreferrer"},rn={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/web.html",target:"_blank",rel:"noopener noreferrer"};function dn(kn,vn){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("table",null,[r,n("tbody",null,[d,k,v,n("tr",null,[m,n("td",g,[s("当找不到请求的处理程序时是否抛出 "),b,s("。然后可以使用 "),h,s("（例如，通过使用 "),f,s(" 控制器方法）捕获异常并像其他任何方法一样处理。默认情况下，它设置为 "),w,s("，在这种情况下，"),x,s(" 设置响应状态为 404 (NOT_FOUND) 而不会引发异常。请注意，如果 [默认 servlet 处理]("),n("a",y,[s("https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc"),e(a)]),s(" -default-servlet-handler) 也被配置，未解决的请求总是转发到默认的 servlet 并且永远不会引发 404。")])])])]),S,n("p",null,[s("有关如何配置拦截器的示例，请参阅 MVC 配置部分中的"),n("a",R,[s("拦截器"),e(a)]),s("。还可以通过在各个 "),q,s(" 实现上使用 setter 来直接注册它们。")]),n("p",null,[C,s(" 方法对于 "),_,s(" 和 "),A,s(" 的方法不太有用，它们的响应是在 "),H,s(" 中和 "),M,s(" 之前编写和提交的。这意味着对响应进行任何更改都为时已晚，例如添加额外的标头。对于此类场景，您可以实现 "),T,s(" 并将其声明为 "),n("a",L,[s("Controller Advice"),e(a)]),s(" bean 或直接在 "),E,s(" 上进行配置。")]),V,D,n("ul",null,[n("li",null,[n("a",I,[P,e(a)]),s(" - 解决异常的策略，可能将它们映射到处理程序、HTML 错误视图或其他目标。")]),n("li",null,[n("a",W,[U,e(a)]),s(" - 将从处理程序返回的基于字符串的逻辑视图名称解析为用于呈现响应的实际视图。")]),n("li",null,[n("a",N,[j,e(a)]),s(", "),n("a",F,[s("LocaleContextResolver"),e(a)]),s(" - 解析用户正在使用的本地化设置，可能还有他们的时区，以便能够提供国际化的视图。")]),n("li",null,[n("a",B,[O,e(a)]),s(" - 解析 Web 应用程序可以使用的主题——例如，提供个性化布局。")]),n("li",null,[n("a",z,[J,e(a)]),s(" - 通过一些 multipart 解析库的帮助解析 multipart 请求（例如，通过浏览器上传文件）。")])]),X,n("table",null,[G,n("tbody",null,[Z,n("tr",null,[n("td",K,[n("a",Q,[Y,e(a)])]),$]),nn,sn])]),an,n("ul",null,[n("li",null,[n("a",en,[s("Time Zone"),e(a)])]),n("li",null,[n("a",tn,[s("Header Resolver"),e(a)])]),n("li",null,[n("a",pn,[s("Cookie Resolver"),e(a)])]),n("li",null,[n("a",on,[s("Session Resolver"),e(a)])]),n("li",null,[n("a",cn,[s("Locale Interceptor"),e(a)])])]),ln,n("ul",null,[n("li",null,[n("a",un,[s("Spring Framework 官方文档"),e(a)])]),n("li",null,[n("a",rn,[s("Spring Framework 官方文档之 Web"),e(a)])])])])}const bn=p(i,[["render",dn],["__file","index.html.vue"]]);export{bn as default};
