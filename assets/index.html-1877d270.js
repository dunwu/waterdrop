const e=JSON.parse('{"key":"v-7a948697","path":"/pages/02820fbd/","title":"Dubbo 面试","lang":"zh-CN","frontmatter":{"title":"Dubbo 面试","date":"2024-12-12T08:18:57.000Z","permalink":"/pages/02820fbd/","category":["分布式","分布式通信","RPC"],"tag":["分布式","通信","RPC","微服务","Dubbo","面试"],"description":"Dubbo 面试 简介 【基础】Dubbo 是什么？为什么使用 Dubbo？ Dubbo 是一款高性能、轻量级的开源 Java RPC 框架。 Dubbo 提供了三大核心能力： 面向接口的远程过程调用（RPC）：提供高性能的基于代理的远程调用能力，服务以接口为粒度，为开发者屏蔽远程调用底层细节。 智能容错和负载均衡：内置多种负载均衡策略，智能感知下游节点健康状况，显著减少调用延迟，提高系统吞吐量。 服务自动注册和发现：支持多种注册中心服务，服务实例上下线实时感知。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/02820fbd/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"Dubbo 面试"}],["meta",{"property":"og:description","content":"Dubbo 面试 简介 【基础】Dubbo 是什么？为什么使用 Dubbo？ Dubbo 是一款高性能、轻量级的开源 Java RPC 框架。 Dubbo 提供了三大核心能力： 面向接口的远程过程调用（RPC）：提供高性能的基于代理的远程调用能力，服务以接口为粒度，为开发者屏蔽远程调用底层细节。 智能容错和负载均衡：内置多种负载均衡策略，智能感知下游节点健康状况，显著减少调用延迟，提高系统吞吐量。 服务自动注册和发现：支持多种注册中心服务，服务实例上下线实时感知。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-08T15:35:46.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"分布式"}],["meta",{"property":"article:tag","content":"通信"}],["meta",{"property":"article:tag","content":"RPC"}],["meta",{"property":"article:tag","content":"微服务"}],["meta",{"property":"article:tag","content":"Dubbo"}],["meta",{"property":"article:tag","content":"面试"}],["meta",{"property":"article:published_time","content":"2024-12-12T08:18:57.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-08T15:35:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Dubbo 面试\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-12-12T08:18:57.000Z\\",\\"dateModified\\":\\"2025-05-08T15:35:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[{"level":3,"title":"【基础】Dubbo 是什么？为什么使用 Dubbo？","slug":"【基础】dubbo-是什么-为什么使用-dubbo","link":"#【基础】dubbo-是什么-为什么使用-dubbo","children":[]},{"level":3,"title":"【基础】Dubbo3 有什么新特性？","slug":"【基础】dubbo3-有什么新特性","link":"#【基础】dubbo3-有什么新特性","children":[]}]},{"level":2,"title":"架构","slug":"架构","link":"#架构","children":[{"level":3,"title":"【基础】Dubbo 有哪些核心组件？","slug":"【基础】dubbo-有哪些核心组件","link":"#【基础】dubbo-有哪些核心组件","children":[]},{"level":3,"title":"【高级】Dubbo 框架整体如何设计的？","slug":"【高级】dubbo-框架整体如何设计的","link":"#【高级】dubbo-框架整体如何设计的","children":[]},{"level":3,"title":"【高级】Dubbo 架构是如何实现高度可扩展的？","slug":"【高级】dubbo-架构是如何实现高度可扩展的","link":"#【高级】dubbo-架构是如何实现高度可扩展的","children":[]},{"level":3,"title":"【高级】Dubbo 的 SPI 机制是如何设计的？","slug":"【高级】dubbo-的-spi-机制是如何设计的","link":"#【高级】dubbo-的-spi-机制是如何设计的","children":[]},{"level":3,"title":"【高级】Dubbo 中的时钟轮机制是如何设计的？","slug":"【高级】dubbo-中的时钟轮机制是如何设计的","link":"#【高级】dubbo-中的时钟轮机制是如何设计的","children":[]},{"level":3,"title":"【高级】Dubbo 中的线程模型是如何设计的？","slug":"【高级】dubbo-中的线程模型是如何设计的","link":"#【高级】dubbo-中的线程模型是如何设计的","children":[]},{"level":3,"title":"【中级】Dubbo 中用到哪些设计模式？","slug":"【中级】dubbo-中用到哪些设计模式","link":"#【中级】dubbo-中用到哪些设计模式","children":[]}]},{"level":2,"title":"服务注册和发现","slug":"服务注册和发现","link":"#服务注册和发现","children":[{"level":3,"title":"【基础】服务注册和发现的流程是怎样的？","slug":"【基础】服务注册和发现的流程是怎样的","link":"#【基础】服务注册和发现的流程是怎样的","children":[]},{"level":3,"title":"【基础】Dubbo 支持哪些注册中心？","slug":"【基础】dubbo-支持哪些注册中心","link":"#【基础】dubbo-支持哪些注册中心","children":[]},{"level":3,"title":"【中级】注册中心是选择 CP 还是 AP？","slug":"【中级】注册中心是选择-cp-还是-ap","link":"#【中级】注册中心是选择-cp-还是-ap","children":[]},{"level":3,"title":"【基础】注册中心挂了可以继续通信吗？","slug":"【基础】注册中心挂了可以继续通信吗","link":"#【基础】注册中心挂了可以继续通信吗","children":[]}]},{"level":2,"title":"通信协议和序列化","slug":"通信协议和序列化","link":"#通信协议和序列化","children":[{"level":3,"title":"【基础】Dubbo 支持哪些通信协议，各有什么利弊？","slug":"【基础】dubbo-支持哪些通信协议-各有什么利弊","link":"#【基础】dubbo-支持哪些通信协议-各有什么利弊","children":[]}]},{"level":2,"title":"负载均衡","slug":"负载均衡","link":"#负载均衡","children":[{"level":3,"title":"【中级】Dubbo 支持哪些负载均衡方式？各有什么利弊？","slug":"【中级】dubbo-支持哪些负载均衡方式-各有什么利弊","link":"#【中级】dubbo-支持哪些负载均衡方式-各有什么利弊","children":[]}]},{"level":2,"title":"路由","slug":"路由","link":"#路由","children":[{"level":3,"title":"【中级】Dubbo 路由是怎样工作的？","slug":"【中级】dubbo-路由是怎样工作的","link":"#【中级】dubbo-路由是怎样工作的","children":[]},{"level":3,"title":"【中级】Dubbo 支持哪些路由方式？分别适用于什么场景？","slug":"【中级】dubbo-支持哪些路由方式-分别适用于什么场景","link":"#【中级】dubbo-支持哪些路由方式-分别适用于什么场景","children":[]}]},{"level":2,"title":"服务治理","slug":"服务治理","link":"#服务治理","children":[{"level":3,"title":"【中级】Dubbo 有哪些集群容错策略？","slug":"【中级】dubbo-有哪些集群容错策略","link":"#【中级】dubbo-有哪些集群容错策略","children":[]},{"level":3,"title":"【中级】Dubbo 提供了哪些监控能力？","slug":"【中级】dubbo-提供了哪些监控能力","link":"#【中级】dubbo-提供了哪些监控能力","children":[]}]},{"level":2,"title":"应用","slug":"应用","link":"#应用","children":[{"level":3,"title":"【基础】接口不同版本如何兼容？","slug":"【基础】接口不同版本如何兼容","link":"#【基础】接口不同版本如何兼容","children":[]}]},{"level":2,"title":"TODO","slug":"todo","link":"#todo","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1737504501000,"updatedTime":1746718546000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":3}]},"readingTime":{"minutes":51.9,"words":15570},"filePathRelative":"15.分布式/21.分布式通信/01.RPC/Dubbo面试.md","localizedDate":"2024年12月12日","excerpt":"<h1> Dubbo 面试</h1>\\n<h2> 简介</h2>\\n<h3> 【基础】Dubbo 是什么？为什么使用 Dubbo？</h3>\\n<p><a href=\\"https://dubbo.apache.org/zh-cn/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Dubbo</a> 是一款高性能、轻量级的开源 Java RPC 框架。</p>\\n<p>Dubbo 提供了三大核心能力：</p>\\n<ul>\\n<li><strong>面向接口的远程过程调用（RPC）</strong>：提供高性能的基于代理的远程调用能力，服务以接口为粒度，为开发者屏蔽远程调用底层细节。</li>\\n<li><strong>智能容错和负载均衡</strong>：内置多种负载均衡策略，智能感知下游节点健康状况，显著减少调用延迟，提高系统吞吐量。</li>\\n<li><strong>服务自动注册和发现</strong>：支持多种注册中心服务，服务实例上下线实时感知。</li>\\n</ul>","autoDesc":true}');export{e as data};
