import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as p,c as t,a as s,b as o,d as l,e as c}from"./app-812acd96.js";const i={},d=c(`<h1 id="《sql-必知必会》笔记" tabindex="-1"><a class="header-anchor" href="#《sql-必知必会》笔记" aria-hidden="true">#</a> 《SQL 必知必会》笔记</h1><h2 id="第-1-课-了解-sql" tabindex="-1"><a class="header-anchor" href="#第-1-课-了解-sql" aria-hidden="true">#</a> 第 1 课 了解 SQL</h2><h3 id="数据库基础" tabindex="-1"><a class="header-anchor" href="#数据库基础" aria-hidden="true">#</a> 数据库基础</h3><ul><li>数据库（database） - 保存有组织的数据的容器（通常是一个文件或一组文件）。</li><li>表（table） - 某种特定类型数据的结构化清单。</li><li>模式 - 关于数据库和表的布局及特性的信息。</li><li>列（column） - 表中的一个字段。所有表都是由一个或多个列组成的。</li><li>数据类型 - 所允许的数据的类型。每个表列都有相应的数据类型，它限制（或允许）该列中存储的数据。</li><li>行（row） - 表中的一个记录。</li><li>主键（primary key） - 一列（或一组列），其值能够唯一标识表中每一行。表中的任何列都可以作为主键，只要它满足以下条件： <ul><li>任意两行都不具有相同的主键值；</li><li>每一行都必须具有一个主键值（主键列不允许 NULL 值）；</li><li>主键列中的值不允许修改或更新；</li><li>主键值不能重用（如果某行从表中删除，它的主键不能赋给以后的新行）。</li></ul></li></ul><h3 id="什么是-sql" tabindex="-1"><a class="header-anchor" href="#什么是-sql" aria-hidden="true">#</a> 什么是 SQL</h3><p>SQL 是 Structured Query Language（结构化查询语言）的缩写。SQL 是一种专门用来与数据库沟通的语言。</p><h2 id="第-2-课-检索数据" tabindex="-1"><a class="header-anchor" href="#第-2-课-检索数据" aria-hidden="true">#</a> 第 2 课 检索数据</h2><p>作为 SQL 组成部分的保留字。关键字不能用作表或列的名字。</p><p>检索单列</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> prod_name
<span class="token keyword">FROM</span> Products<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>检索多列</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_name<span class="token punctuation">,</span> prod_price
<span class="token keyword">FROM</span> Products<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>检索所有列</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> Products<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>检索去重</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> vend_id
<span class="token keyword">FROM</span> Products<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>限制数量</p><p>检索 TOP5 数据：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- SQL Server 和 Access</span>
<span class="token keyword">SELECT</span> <span class="token keyword">TOP</span> <span class="token number">5</span> prod_name
<span class="token keyword">FROM</span> Products<span class="token punctuation">;</span>

<span class="token comment">-- DB2</span>
<span class="token keyword">SELECT</span> prod_name
<span class="token keyword">FROM</span> Products
<span class="token keyword">FETCH</span> <span class="token keyword">FIRST</span> <span class="token number">5</span> <span class="token keyword">ROWS</span> ONLY<span class="token punctuation">;</span>

<span class="token comment">-- Oracle</span>
<span class="token keyword">SELECT</span> prod_name
<span class="token keyword">FROM</span> Products
<span class="token keyword">WHERE</span> ROWNUM <span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span>

<span class="token comment">-- MySQL、MariaDB、PostgreSQL 或者 SQLite</span>
<span class="token keyword">SELECT</span> prod_name
<span class="token keyword">FROM</span> Products
<span class="token keyword">LIMIT</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token comment">-- 检索从第 5 行起的 5 行数据</span>
<span class="token keyword">SELECT</span> prod_name
<span class="token keyword">FROM</span> Products
<span class="token keyword">LIMIT</span> <span class="token number">5</span> <span class="token keyword">OFFSET</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token comment">-- MySQL 和 MariaDB 中，上面的示例可以简化如下</span>
<span class="token keyword">SELECT</span> prod_name
<span class="token keyword">FROM</span> Products
<span class="token keyword">LIMIT</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用注释</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> prod_name <span class="token comment">-- 这是一条注释</span>
<span class="token keyword">FROM</span> Products<span class="token punctuation">;</span>

<span class="token comment"># 这是一条注释</span>
<span class="token keyword">SELECT</span> prod_name
<span class="token keyword">FROM</span> Products<span class="token punctuation">;</span>

<span class="token comment">/* SELECT prod_name, vend_id
FROM Products; */</span>
<span class="token keyword">SELECT</span> prod_name
<span class="token keyword">FROM</span> Products<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第-3-课-排序检索数据" tabindex="-1"><a class="header-anchor" href="#第-3-课-排序检索数据" aria-hidden="true">#</a> 第 3 课 排序检索数据</h2><p>SQL 语句由子句构成，有些子句是必需的，有些则是可选的。一个子句通常由一个关键字加上所提供的数据组成。例如，SELECT 语句中的 FROM 子句。</p><p>ORDER BY 子句取一个或多个列的名字，据此对输出进行排序。ORDER BY 支持两种排序方式：ASC（升序） 和 DESC（降序）。</p><p>按单列排序：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> prod_name
<span class="token keyword">FROM</span> Products
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> prod_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>按多列排序：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_price<span class="token punctuation">,</span> prod_name
<span class="token keyword">FROM</span> Products
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> prod_price <span class="token keyword">DESC</span><span class="token punctuation">,</span> prod_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>按列位置排序（不推荐）：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_price<span class="token punctuation">,</span> prod_name
<span class="token keyword">FROM</span> Products
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>指定排序方向</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_price<span class="token punctuation">,</span> prod_name
<span class="token keyword">FROM</span> Products
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> prod_price <span class="token keyword">DESC</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第-4-课-过滤数据" tabindex="-1"><a class="header-anchor" href="#第-4-课-过滤数据" aria-hidden="true">#</a> 第 4 课 过滤数据</h2><p>只检索所需数据需要指定搜索条件（search criteria），搜索条件也称为过滤条件（filter condition）。</p><p>在 SELECT 语句中，数据根据 WHERE 子句中指定的搜索条件进行过滤。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> prod_name<span class="token punctuation">,</span> prod_price
<span class="token keyword">FROM</span> Products
<span class="token keyword">WHERE</span> prod_price <span class="token operator">=</span> <span class="token number">3.49</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>检索所有价格小于 10 美元的产品。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> prod_name<span class="token punctuation">,</span> prod_price
<span class="token keyword">FROM</span> Products
<span class="token keyword">WHERE</span> prod_price <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>检索所有不是供应商 DLL01 制造的产品</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 下面两条查询语句作用相同</span>

<span class="token keyword">SELECT</span> vend_id<span class="token punctuation">,</span> prod_name
<span class="token keyword">FROM</span> Products
<span class="token keyword">WHERE</span> vend_id <span class="token operator">&lt;&gt;</span> <span class="token string">&#39;DLL01&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">SELECT</span> vend_id<span class="token punctuation">,</span> prod_name
<span class="token keyword">FROM</span> Products
<span class="token keyword">WHERE</span> vend_id <span class="token operator">!=</span> <span class="token string">&#39;DLL01&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>检索价格在 5 美元和 10 美元之间的所有产品</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> prod_name<span class="token punctuation">,</span> prod_price
<span class="token keyword">FROM</span> Products
<span class="token keyword">WHERE</span> prod_price <span class="token operator">BETWEEN</span> <span class="token number">5</span> <span class="token operator">AND</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>检索所有没有邮件地址的顾客</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> cust_name
<span class="token keyword">FROM</span> CUSTOMERS
<span class="token keyword">WHERE</span> cust_email <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第-5-课-高级数据过滤" tabindex="-1"><a class="header-anchor" href="#第-5-课-高级数据过滤" aria-hidden="true">#</a> 第 5 课 高级数据过滤</h2><ul><li><strong>AND</strong> - AND 用来表示检索满足所有给定条件的行。</li><li><strong>OR</strong> - OR 用来表示检索匹配任一给定条件的行。</li></ul><h3 id="组合-where-子句" tabindex="-1"><a class="header-anchor" href="#组合-where-子句" aria-hidden="true">#</a> 组合 WHERE 子句</h3><p>检索由供应商 DLL01 制造且价格小于等于 4 美元的所有产品的名称和价格</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_price<span class="token punctuation">,</span> prod_name
<span class="token keyword">FROM</span> Products
<span class="token keyword">WHERE</span> vend_id <span class="token operator">=</span> <span class="token string">&#39;DLL01&#39;</span> <span class="token operator">AND</span> prod_price <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>检索由供应商 DLL01 或供应商 BRS01 制造的所有产品的名称和价格</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> prod_name<span class="token punctuation">,</span> prod_price
<span class="token keyword">FROM</span> Products
<span class="token keyword">WHERE</span> vend_id <span class="token operator">=</span> <span class="token string">&#39;DLL01&#39;</span> <span class="token operator">OR</span> vend_id <span class="token operator">=</span> <span class="token string">&#39;BRS01&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>WHERE 子句可以包含任意数目的 AND 和 OR 操作符。允许两者结合以进行复杂、高级的过滤。</p><p>SQL 在处理 OR 操作符前，优先处理 AND 操作符。</p><p>下面的示例中，SQL 会理解为由供应商 BRS01 制造的价格为 10 美元以上的所有产品，以及由供应商 DLL01 制造的所有产品，而不管其价格如何。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> prod_name<span class="token punctuation">,</span> prod_price
<span class="token keyword">FROM</span> Products
<span class="token keyword">WHERE</span> vend_id <span class="token operator">=</span> <span class="token string">&#39;DLL01&#39;</span> <span class="token operator">OR</span> vend_id <span class="token operator">=</span> <span class="token string">&#39;BRS01&#39;</span>
<span class="token operator">AND</span> prod_price <span class="token operator">&gt;=</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>任何时候使用具有 AND 和 OR 操作符的 WHERE 子句，都应该使用圆括号明确地分组操作符。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> prod_name<span class="token punctuation">,</span> prod_price
<span class="token keyword">FROM</span> Products
<span class="token keyword">WHERE</span> <span class="token punctuation">(</span>vend_id <span class="token operator">=</span> <span class="token string">&#39;DLL01&#39;</span> <span class="token operator">OR</span> vend_id <span class="token operator">=</span> <span class="token string">&#39;BRS01&#39;</span><span class="token punctuation">)</span>
<span class="token operator">AND</span> prod_price <span class="token operator">&gt;=</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="in-操作符" tabindex="-1"><a class="header-anchor" href="#in-操作符" aria-hidden="true">#</a> IN 操作符</h3><p>IN 操作符用来指定条件范围，范围中的每个条件都可以进行匹配。IN 取一组由逗号分隔、括在圆括号中的合法值。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> prod_name<span class="token punctuation">,</span> prod_price
<span class="token keyword">FROM</span> Products
<span class="token keyword">WHERE</span> vend_id <span class="token operator">IN</span> <span class="token punctuation">(</span> <span class="token string">&#39;DLL01&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;BRS01&#39;</span> <span class="token punctuation">)</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> prod_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和下面的示例作用相同</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> prod_name<span class="token punctuation">,</span> prod_price
<span class="token keyword">FROM</span> Products
<span class="token keyword">WHERE</span> vend_id <span class="token operator">=</span> <span class="token string">&#39;DLL01&#39;</span> <span class="token operator">OR</span> vend_id <span class="token operator">=</span> <span class="token string">&#39;BRS01&#39;</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> prod_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么要使用 IN 操作符？其优点如下。</p><ul><li>在有很多合法选项时，IN 操作符的语法更清楚，更直观。</li><li>在与其他 AND 和 OR 操作符组合使用 IN 时，求值顺序更容易管理。</li><li>IN 操作符一般比一组 OR 操作符执行得更快。</li><li>IN 的最大优点是可以包含其他 SELECT 语句，能够更动态地建立 HERE 子句。</li></ul><h3 id="not-操作符" tabindex="-1"><a class="header-anchor" href="#not-操作符" aria-hidden="true">#</a> NOT 操作符</h3><p>NOT 用来否定其后条件的关键字。</p><p>检索除 DLL01 之外的所有供应商制造的产品</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> prod_name
<span class="token keyword">FROM</span> Products
<span class="token keyword">WHERE</span> <span class="token operator">NOT</span> vend_id <span class="token operator">=</span> <span class="token string">&#39;DLL01&#39;</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> prod_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和下面的示例作用相同</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> prod_name
<span class="token keyword">FROM</span> Products
<span class="token keyword">WHERE</span> vend_id <span class="token operator">&lt;&gt;</span> <span class="token string">&#39;DLL01&#39;</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> prod_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第-6-课-用通配符进行过滤" tabindex="-1"><a class="header-anchor" href="#第-6-课-用通配符进行过滤" aria-hidden="true">#</a> 第 6 课 用通配符进行过滤</h2><p>通配符（wildcard）用来匹配值的一部分的特殊字符。</p><p>搜索模式（search pattern）由字面值、通配符或两者组合构成的搜索条件。</p><p>在搜索子句中使用通配符，必须使用 LIKE 操作符。LIKE 指示 DBMS，后跟的搜索模式利用通配符匹配而不是简单的相等匹配进行比较。</p><h3 id="百分号-通配符" tabindex="-1"><a class="header-anchor" href="#百分号-通配符" aria-hidden="true">#</a> 百分号（%）通配符</h3><p>%表示任何字符出现任意次数。</p><p>检索所有产品名以 Fish 开头的产品</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_name
<span class="token keyword">FROM</span> Products
<span class="token keyword">WHERE</span> prod_name <span class="token operator">LIKE</span> <span class="token string">&#39;Fish%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>匹配任何位置上包含文本 bean bag 的值，<br> 不论它之前或之后出现什么字符。</p><p>检索产品名中包含 bean bag 的产品</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_name
<span class="token keyword">FROM</span> Products
<span class="token keyword">WHERE</span> prod_name <span class="token operator">LIKE</span> <span class="token string">&#39;%bean bag%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>检索产品名中以 F 开头，y 结尾的产品</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> prod_name
<span class="token keyword">FROM</span> Products
<span class="token keyword">WHERE</span> prod_name <span class="token operator">LIKE</span> <span class="token string">&#39;F%y&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="下划线-通配符" tabindex="-1"><a class="header-anchor" href="#下划线-通配符" aria-hidden="true">#</a> 下划线（_）通配符</h3><p>下划线（_）的用途与%一样，但它只匹配单个字符。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_name
<span class="token keyword">FROM</span> Products
<span class="token keyword">WHERE</span> prod_name <span class="token operator">LIKE</span> <span class="token string">&#39;__ inch teddy bear&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方括号-通配符" tabindex="-1"><a class="header-anchor" href="#方括号-通配符" aria-hidden="true">#</a> 方括号（[ ]）通配符</h3><p>方括号（[]）通配符用来指定一个字符集，它必须匹配指定位置（通配符的位置）的一个字符。</p><blockquote><p>说明：并不是所有 DBMS 都支持用来创建集合的 []。只有微软的 Access 和 SQL Server 支持集合。</p></blockquote><p>找出所有名字以 J 或 M 开头的联系人：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> cust_contact
<span class="token keyword">FROM</span> Customers
<span class="token keyword">WHERE</span> cust_contact <span class="token operator">LIKE</span> <span class="token string">&#39;[JM]%&#39;</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> cust_contact<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第-7-课-创建计算字段" tabindex="-1"><a class="header-anchor" href="#第-7-课-创建计算字段" aria-hidden="true">#</a> 第 7 课 创建计算字段</h2><h3 id="拼接字段" tabindex="-1"><a class="header-anchor" href="#拼接字段" aria-hidden="true">#</a> 拼接字段</h3><p>拼接字符串值：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- Access 和 SQL Server</span>
<span class="token keyword">SELECT</span> vend_name <span class="token operator">+</span> <span class="token string">&#39; (&#39;</span> <span class="token operator">+</span> vend_country <span class="token operator">+</span> <span class="token string">&#39;)&#39;</span>
<span class="token keyword">FROM</span> Vendors
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> vend_name<span class="token punctuation">;</span>

<span class="token comment">-- DB2、Oracle、PostgreSQL、SQLite 和 Open Office Base</span>
<span class="token keyword">SELECT</span> vend_name <span class="token operator">||</span> <span class="token string">&#39; (&#39;</span> <span class="token operator">||</span> vend_country <span class="token operator">||</span> <span class="token string">&#39;)&#39;</span>
<span class="token keyword">FROM</span> Vendors
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> vend_name<span class="token punctuation">;</span>

<span class="token comment">-- MySQL 或 MariaDB</span>
<span class="token keyword">SELECT</span> Concat<span class="token punctuation">(</span>vend_name<span class="token punctuation">,</span> <span class="token string">&#39; (&#39;</span><span class="token punctuation">,</span> vend_country<span class="token punctuation">,</span> <span class="token string">&#39;)&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">FROM</span> Vendors
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> vend_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>去除字符串中的空格</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- Access 和 SQL Server</span>
<span class="token keyword">SELECT</span> RTRIM<span class="token punctuation">(</span>vend_name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39; (&#39;</span> <span class="token operator">+</span> RTRIM<span class="token punctuation">(</span>vend_country<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;)&#39;</span>
<span class="token keyword">FROM</span> Vendors
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> vend_name<span class="token punctuation">;</span>

<span class="token comment">-- DB2、Oracle、PostgreSQL、SQLite 和 Open Office Base</span>
<span class="token keyword">SELECT</span> RTRIM<span class="token punctuation">(</span>vend_name<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39; (&#39;</span> <span class="token operator">||</span> RTRIM<span class="token punctuation">(</span>vend_country<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;)&#39;</span>
<span class="token keyword">FROM</span> Vendors
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> vend_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="别名" tabindex="-1"><a class="header-anchor" href="#别名" aria-hidden="true">#</a> 别名</h3><p>使用别名</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- Access 和 SQL Server</span>
<span class="token keyword">SELECT</span> RTRIM<span class="token punctuation">(</span>vend_name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39; (&#39;</span> <span class="token operator">+</span> RTRIM<span class="token punctuation">(</span>vend_country<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;)&#39;</span>
<span class="token keyword">AS</span> vend_title
<span class="token keyword">FROM</span> Vendors
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> vend_name<span class="token punctuation">;</span>

<span class="token comment">-- DB2、Oracle、PostgreSQL、SQLite 和 Open Office Base</span>
<span class="token keyword">SELECT</span> RTRIM<span class="token punctuation">(</span>vend_name<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39; (&#39;</span> <span class="token operator">||</span> RTRIM<span class="token punctuation">(</span>vend_country<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;)&#39;</span>
<span class="token keyword">AS</span> vend_title
<span class="token keyword">FROM</span> Vendors
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> vend_name<span class="token punctuation">;</span>

<span class="token comment">-- MySQL 和 MariaDB</span>
<span class="token keyword">SELECT</span> Concat<span class="token punctuation">(</span>vend_name<span class="token punctuation">,</span> <span class="token string">&#39; (&#39;</span><span class="token punctuation">,</span> vend_country<span class="token punctuation">,</span> <span class="token string">&#39;)&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">AS</span> vend_title
<span class="token keyword">FROM</span> Vendors
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> vend_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="执行算术计算" tabindex="-1"><a class="header-anchor" href="#执行算术计算" aria-hidden="true">#</a> 执行算术计算</h3><p>汇总物品的价格（单价乘以订购数量）：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span>
quantity<span class="token punctuation">,</span>
item_price<span class="token punctuation">,</span>
quantity<span class="token operator">*</span>item_price <span class="token keyword">AS</span> expanded_price
<span class="token keyword">FROM</span> OrderItems
<span class="token keyword">WHERE</span> order_num <span class="token operator">=</span> <span class="token number">20008</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第-8-课-使用函数处理数据" tabindex="-1"><a class="header-anchor" href="#第-8-课-使用函数处理数据" aria-hidden="true">#</a> 第 8 课 使用函数处理数据</h2><p>大多数 SQL 实现支持以下类型的函数：</p><ul><li>算术函数</li><li>文本处理函数</li><li>时间处理函数</li><li>聚合函数</li><li>返回 DBMS 正使用的特殊信息（如返回用户登录信息）的系统函数</li></ul><h3 id="文本处理函数" tabindex="-1"><a class="header-anchor" href="#文本处理函数" aria-hidden="true">#</a> 文本处理函数</h3><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>LEFT()（或使用子字符串函数）</td><td>返回字符串左边的字符</td></tr><tr><td>LENGTH()（也使用 DATALENGTH() 或 LEN()）</td><td>返回字符串的长度</td></tr><tr><td>LOWER()（Access 使用 LCASE()）</td><td>将字符串转换为小写</td></tr><tr><td>LTRIM()</td><td>去掉字符串左边的空格</td></tr><tr><td>RIGHT()（或使用子字符串函数）</td><td>返回字符串右边的字符</td></tr><tr><td>RTRIM()</td><td>去掉字符串右边的空格</td></tr><tr><td>SOUNDEX()</td><td>返回字符串的 SOUNDEX 值</td></tr><tr><td>UPPER()（Access 使用 UCASE()）</td><td>将字符串转换为大写</td></tr></tbody></table><p>UPPER() 将文本转换为大写</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> vend_name<span class="token punctuation">,</span> UPPER<span class="token punctuation">(</span>vend_name<span class="token punctuation">)</span> <span class="token keyword">AS</span> vend_name_upcase
<span class="token keyword">FROM</span> Vendors
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> vend_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="日期和时间处理函数" tabindex="-1"><a class="header-anchor" href="#日期和时间处理函数" aria-hidden="true">#</a> 日期和时间处理函数</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- SQL Server</span>
<span class="token keyword">SELECT</span> order_num
<span class="token keyword">FROM</span> Orders
<span class="token keyword">WHERE</span> DATEPART<span class="token punctuation">(</span>yy<span class="token punctuation">,</span> order_date<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2012</span><span class="token punctuation">;</span>

<span class="token comment">-- Access</span>
<span class="token keyword">SELECT</span> order_num
<span class="token keyword">FROM</span> Orders
<span class="token keyword">WHERE</span> DATEPART<span class="token punctuation">(</span><span class="token string">&#39;yyyy&#39;</span><span class="token punctuation">,</span> order_date<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2012</span><span class="token punctuation">;</span>

<span class="token comment">-- PostgreSQL</span>
<span class="token keyword">SELECT</span> order_num
<span class="token keyword">FROM</span> Orders
<span class="token keyword">WHERE</span> DATE_PART<span class="token punctuation">(</span><span class="token string">&#39;year&#39;</span><span class="token punctuation">,</span> order_date<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2012</span><span class="token punctuation">;</span>

<span class="token comment">-- Oracle</span>
<span class="token keyword">SELECT</span> order_num
<span class="token keyword">FROM</span> Orders
<span class="token keyword">WHERE</span> to_number<span class="token punctuation">(</span>to_char<span class="token punctuation">(</span>order_date<span class="token punctuation">,</span> <span class="token string">&#39;YYYY&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2012</span><span class="token punctuation">;</span>

<span class="token comment">-- MySQL 和 MariaDB</span>
<span class="token keyword">SELECT</span> order_num
<span class="token keyword">FROM</span> Orders
<span class="token keyword">WHERE</span> <span class="token keyword">YEAR</span><span class="token punctuation">(</span>order_date<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2012</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数值处理函数" tabindex="-1"><a class="header-anchor" href="#数值处理函数" aria-hidden="true">#</a> 数值处理函数</h3><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>ABS()</td><td>返回一个数的绝对值</td></tr><tr><td>COS()</td><td>返回一个角度的余弦</td></tr><tr><td>EXP()</td><td>返回一个数的指数值</td></tr><tr><td>PI()</td><td>返回圆周率</td></tr><tr><td>SIN()</td><td>返回一个角度的正弦</td></tr><tr><td>SQRT()</td><td>返回一个数的平方根</td></tr><tr><td>TAN()</td><td>返回一个角度的正切</td></tr></tbody></table><h2 id="第-9-课-汇总数据" tabindex="-1"><a class="header-anchor" href="#第-9-课-汇总数据" aria-hidden="true">#</a> 第 9 课 汇总数据</h2><p>聚集函数（aggregate function）对某些行运行的函数，计算并返回一个值。</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>AVG()</td><td>返回某列的平均值</td></tr><tr><td>COUNT()</td><td>返回某列的行数</td></tr><tr><td>MAX()</td><td>返回某列的最大值</td></tr><tr><td>MIN()</td><td>返回某列的最小值</td></tr><tr><td>SUM()</td><td>返回某列值之和</td></tr></tbody></table><p>AVG() 通过对表中行数计数并计算其列值之和，求得该列的平均值。</p><p>使用 AVG() 返回 Products 表中所有产品的平均价格：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span> <span class="token keyword">AS</span> avg_price
<span class="token keyword">FROM</span> Products<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>COUNT() 函数进行计数。可利用 COUNT() 确定表中行的数目或符合特定条件的行的数目。</p><p>返回 Customers 表中顾客的总数：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> num_cust
<span class="token keyword">FROM</span> Customers<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>只对具有电子邮件地址的客户计数：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>cust_email<span class="token punctuation">)</span> <span class="token keyword">AS</span> num_cust
<span class="token keyword">FROM</span> Customers<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>MAX() 返回指定列中的最大值。</p><p>返回 Products 表中最贵物品的价格：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span> <span class="token keyword">AS</span> max_price
<span class="token keyword">FROM</span> Products<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>MIN() 返回指定列的最小值。</p><p>返回 Products 表中最便宜物品的价格</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span> <span class="token keyword">AS</span> min_price
<span class="token keyword">FROM</span> Products<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>SUM() 用来返回指定列值的和（总计）。</p><p>返回订单中所有物品数量之和</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>quantity<span class="token punctuation">)</span> <span class="token keyword">AS</span> items_ordered
<span class="token keyword">FROM</span> OrderItems
<span class="token keyword">WHERE</span> order_num <span class="token operator">=</span> <span class="token number">20005</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="组合聚集函数" tabindex="-1"><a class="header-anchor" href="#组合聚集函数" aria-hidden="true">#</a> 组合聚集函数</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> num_items<span class="token punctuation">,</span>
<span class="token function">MIN</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span> <span class="token keyword">AS</span> price_min<span class="token punctuation">,</span>
<span class="token function">MAX</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span> <span class="token keyword">AS</span> price_max<span class="token punctuation">,</span>
<span class="token function">AVG</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span> <span class="token keyword">AS</span> price_avg
<span class="token keyword">FROM</span> Products<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第-10-课-分组数据" tabindex="-1"><a class="header-anchor" href="#第-10-课-分组数据" aria-hidden="true">#</a> 第 10 课 分组数据</h2><p>分组是使用 SELECT 语句的 GROUP BY 子句建立的。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> vend_id<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> num_prods
<span class="token keyword">FROM</span> Products
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> vend_id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>GROUP BY 要点：</p><ul><li>GROUP BY 子句可以包含任意数目的列，因而可以对分组进行嵌套，更细致地进行数据分组。</li><li>如果在 GROUP BY 子句中嵌套了分组，数据将在最后指定的分组上进行汇总。换句话说，在建立分组时，指定的所有列都一起计算（所以不能从个别的列取回数据）。</li><li>GROUP BY 子句中列出的每一列都必须是检索列或有效的表达式（但不能是聚集函数）。如果在 SELECT 中使用表达式，则必须在 GROUP BY 子句中指定相同的表达式。不能使用别名。</li><li>大多数 SQL 实现不允许 GROUP BY 列带有长度可变的数据类型（如文本或备注型字段）。</li><li>除聚集计算语句外，SELECT 语句中的每一列都必须在 GROUP BY 子句中给出。</li><li>如果分组列中包含具有 NULL 值的行，则 NULL 将作为一个分组返回。如果列中有多行 NULL 值，它们将分为一组。</li><li>GROUP BY 子句必须出现在 WHERE 子句之后，ORDER BY 子句之前。</li></ul><p>HAVING 要点：</p><p>HAVING 非常类似于 WHERE。唯一的差别是，WHERE 过滤行，而 HAVING 过滤分组。</p><p>过滤两个以上订单的分组</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> cust_id<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> orders
<span class="token keyword">FROM</span> Orders
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> cust_id
<span class="token keyword">HAVING</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>列出具有两个以上产品且其价格大于等于 4 的供应商：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> vend_id<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> num_prods
<span class="token keyword">FROM</span> Products
<span class="token keyword">WHERE</span> prod_price <span class="token operator">&gt;=</span> <span class="token number">4</span>
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> vend_id
<span class="token keyword">HAVING</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>检索包含三个或更多物品的订单号和订购物品的数目：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> order_num<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> items
<span class="token keyword">FROM</span> orderitems
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> order_num
<span class="token keyword">HAVING</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">3</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要按订购物品的数目排序输出，需要添加 ORDER BY 子句</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> order_num<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> items
<span class="token keyword">FROM</span> orderitems
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> order_num
<span class="token keyword">HAVING</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">3</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> items<span class="token punctuation">,</span> order_num<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 SELECT 语句中使用时必须遵循的次序：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">FROM</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">WHERE</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">HAVING</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="第-11-课-使用子查询" tabindex="-1"><a class="header-anchor" href="#第-11-课-使用子查询" aria-hidden="true">#</a> 第 11 课 使用子查询</h2><p>子查询（subquery），即嵌套在其他查询中的查询。</p><p>假如需要列出订购物品 RGAN01 的所有顾客，应该怎样检索？下面列出具体的步骤。</p><p>(1) 检索包含物品 RGAN01 的所有订单的编号。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> order_num
<span class="token keyword">FROM</span> OrderItems
<span class="token keyword">WHERE</span> prod_id <span class="token operator">=</span> <span class="token string">&#39;RGAN01&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>order_num
-----------
20007
20008
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>(2) 检索具有前一步骤列出的订单编号的所有顾客的 ID。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> cust_id
<span class="token keyword">FROM</span> Orders
<span class="token keyword">WHERE</span> order_num <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">20007</span><span class="token punctuation">,</span><span class="token number">20008</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>cust_id
----------
1000000004
1000000005
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>(3) 检索前一步骤返回的所有顾客 ID 的顾客信息。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> cust_name<span class="token punctuation">,</span> cust_contact
<span class="token keyword">FROM</span> Customers
<span class="token keyword">WHERE</span> cust_id <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">&#39;1000000004&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;1000000005&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，结合这两个查询，把第一个查询（返回订单号的那一个）变为子查询。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> cust_id
<span class="token keyword">FROM</span> orders
<span class="token keyword">WHERE</span> order_num <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> order_num
                    <span class="token keyword">FROM</span> orderitems
                    <span class="token keyword">WHERE</span> prod_id <span class="token operator">=</span> <span class="token string">&#39;RGAN01&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再进一步结合第三个查询</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> cust_name<span class="token punctuation">,</span> cust_contact
<span class="token keyword">FROM</span> customers
<span class="token keyword">WHERE</span> cust_id <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> cust_id
                  <span class="token keyword">FROM</span> orders
                  <span class="token keyword">WHERE</span> order_num <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> order_num
                                      <span class="token keyword">FROM</span> orderitems
                                      <span class="token keyword">WHERE</span> prod_id <span class="token operator">=</span> <span class="token string">&#39;RGAN01&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第-12-课-联结表" tabindex="-1"><a class="header-anchor" href="#第-12-课-联结表" aria-hidden="true">#</a> 第 12 课 联结表</h2><p>笛卡尔积 - 由没有联结条件的表关系返回的结果为笛卡儿积。检索出的行的数目将是第一个表中的行数乘以第二个表中的行数。</p><p>内联结</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> vend_name<span class="token punctuation">,</span> prod_name<span class="token punctuation">,</span> prod_price
<span class="token keyword">FROM</span> vendors <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> products
<span class="token keyword">ON</span> vendors<span class="token punctuation">.</span>vend_id <span class="token operator">=</span> products<span class="token punctuation">.</span>vend_id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>联结多个表</p><p>下面两个 SQL 等价：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> cust_name<span class="token punctuation">,</span> cust_contact
<span class="token keyword">FROM</span> customers<span class="token punctuation">,</span> orders<span class="token punctuation">,</span> orderitems
<span class="token keyword">WHERE</span> customers<span class="token punctuation">.</span>cust_id <span class="token operator">=</span> orders<span class="token punctuation">.</span>cust_id <span class="token operator">AND</span> orderitems<span class="token punctuation">.</span>order_num <span class="token operator">=</span> orders<span class="token punctuation">.</span>order_num <span class="token operator">AND</span> prod_id <span class="token operator">=</span> <span class="token string">&#39;RGAN01&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">SELECT</span> cust_name<span class="token punctuation">,</span> cust_contact
<span class="token keyword">FROM</span> customers
<span class="token keyword">WHERE</span> cust_id <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> cust_id
                  <span class="token keyword">FROM</span> orders
                  <span class="token keyword">WHERE</span> order_num <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> order_num
                                      <span class="token keyword">FROM</span> orderitems
                                      <span class="token keyword">WHERE</span> prod_id <span class="token operator">=</span> <span class="token string">&#39;RGAN01&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第-13-课-创建高级联结" tabindex="-1"><a class="header-anchor" href="#第-13-课-创建高级联结" aria-hidden="true">#</a> 第 13 课 创建高级联结</h2><p>自联结</p><p>给与 Jim Jones 同一公司的所有顾客发送一封信件：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 子查询方式</span>
<span class="token keyword">SELECT</span> cust_id<span class="token punctuation">,</span> cust_name<span class="token punctuation">,</span> cust_contact
<span class="token keyword">FROM</span> customers
<span class="token keyword">WHERE</span> cust_name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> cust_name
                   <span class="token keyword">FROM</span> customers
                   <span class="token keyword">WHERE</span> cust_contact <span class="token operator">=</span> <span class="token string">&#39;Jim Jones&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 自联结方式</span>
<span class="token keyword">SELECT</span> c1<span class="token punctuation">.</span>cust_id<span class="token punctuation">,</span> c1<span class="token punctuation">.</span>cust_name<span class="token punctuation">,</span> c1<span class="token punctuation">.</span>cust_contact
<span class="token keyword">FROM</span> customers <span class="token keyword">AS</span> c1<span class="token punctuation">,</span> customers <span class="token keyword">AS</span> c2
<span class="token keyword">WHERE</span> c1<span class="token punctuation">.</span>cust_name <span class="token operator">=</span> c2<span class="token punctuation">.</span>cust_name <span class="token operator">AND</span> c2<span class="token punctuation">.</span>cust_contact <span class="token operator">=</span> <span class="token string">&#39;Jim Jones&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自然联结</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> c<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span> o<span class="token punctuation">.</span>order_num<span class="token punctuation">,</span> o<span class="token punctuation">.</span>order_date<span class="token punctuation">,</span> oi<span class="token punctuation">.</span>prod_id<span class="token punctuation">,</span> oi<span class="token punctuation">.</span>quantity<span class="token punctuation">,</span> oi<span class="token punctuation">.</span>item_price
<span class="token keyword">FROM</span> customers <span class="token keyword">AS</span> c<span class="token punctuation">,</span> orders <span class="token keyword">AS</span> o<span class="token punctuation">,</span> orderitems <span class="token keyword">AS</span> oi
<span class="token keyword">WHERE</span> c<span class="token punctuation">.</span>cust_id <span class="token operator">=</span> o<span class="token punctuation">.</span>cust_id <span class="token operator">AND</span> oi<span class="token punctuation">.</span>order_num <span class="token operator">=</span> o<span class="token punctuation">.</span>order_num <span class="token operator">AND</span> prod_id <span class="token operator">=</span> <span class="token string">&#39;RGAN01&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>左外联结</p><div class="language-sqL line-numbers-mode" data-ext="sqL"><pre class="language-sqL"><code>SELECT customers.cust_id, orders.order_num
FROM customers
       INNER JOIN orders
ON customers.cust_id = orders.cust_id;

SELECT customers.cust_id, orders.order_num
FROM customers
       LEFT OUTER JOIN orders
ON customers.cust_id = orders.cust_id;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>右外联结</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> customers<span class="token punctuation">.</span>cust_id<span class="token punctuation">,</span> orders<span class="token punctuation">.</span>order_num
<span class="token keyword">FROM</span> customers
       <span class="token keyword">RIGHT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> orders
<span class="token keyword">ON</span> orders<span class="token punctuation">.</span>cust_id <span class="token operator">=</span> customers<span class="token punctuation">.</span>cust_id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>全外联结</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> customers<span class="token punctuation">.</span>cust_id<span class="token punctuation">,</span> orders<span class="token punctuation">.</span>order_num
<span class="token keyword">FROM</span> orders
       <span class="token keyword">FULL</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> customers
<span class="token keyword">ON</span> orders<span class="token punctuation">.</span>cust_id <span class="token operator">=</span> customers<span class="token punctuation">.</span>cust_id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：Access、MariaDB、MySQL、Open Office Base 和 SQLite 不支持 FULLOUTER JOIN 语法。</p></blockquote><p>使用带聚集函数的联结</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> customers<span class="token punctuation">.</span>cust_id<span class="token punctuation">,</span>
  <span class="token function">COUNT</span><span class="token punctuation">(</span>orders<span class="token punctuation">.</span>order_num<span class="token punctuation">)</span> <span class="token keyword">AS</span> num_ord
<span class="token keyword">FROM</span> customers
       <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> orders
<span class="token keyword">ON</span> customers<span class="token punctuation">.</span>cust_id <span class="token operator">=</span> orders<span class="token punctuation">.</span>cust_id
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> customers<span class="token punctuation">.</span>cust_id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第-14-课-组合查询" tabindex="-1"><a class="header-anchor" href="#第-14-课-组合查询" aria-hidden="true">#</a> 第 14 课 组合查询</h2><p>主要有两种情况需要使用组合查询：</p><ul><li>在一个查询中从不同的表返回结构数据；</li><li>对一个表执行多个查询，按一个查询返回数据。</li></ul><p>把 Illinois、Indiana、Michigan 等州的缩写传递给 IN 子句，检索出这些州的所有行</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> cust_name<span class="token punctuation">,</span> cust_contact<span class="token punctuation">,</span> cust_email
<span class="token keyword">FROM</span> Customers
<span class="token keyword">WHERE</span> cust_state <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">&#39;IL&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;IN&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;MI&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>找出所有 Fun4All</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> cust_name<span class="token punctuation">,</span> cust_contact<span class="token punctuation">,</span> cust_email
<span class="token keyword">FROM</span> Customers
<span class="token keyword">WHERE</span> cust_name <span class="token operator">=</span> <span class="token string">&#39;Fun4All&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>组合这两条语句</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> cust_name<span class="token punctuation">,</span> cust_contact<span class="token punctuation">,</span> cust_email
<span class="token keyword">FROM</span> customers
<span class="token keyword">WHERE</span> cust_state <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">&#39;IL&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;IN&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;MI&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">UNION</span>
<span class="token keyword">SELECT</span> cust_name<span class="token punctuation">,</span> cust_contact<span class="token punctuation">,</span> cust_email
<span class="token keyword">FROM</span> customers
<span class="token keyword">WHERE</span> cust_name <span class="token operator">=</span> <span class="token string">&#39;Fun4All&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>UNION 默认从查询结果集中自动去除了重复的行；如果想返回所有的匹配行，可使用 UNION ALL</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> cust_name<span class="token punctuation">,</span> cust_contact<span class="token punctuation">,</span> cust_email
<span class="token keyword">FROM</span> customers
<span class="token keyword">WHERE</span> cust_state <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">&#39;IL&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;IN&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;MI&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">UNION</span> <span class="token keyword">ALL</span>
<span class="token keyword">SELECT</span> cust_name<span class="token punctuation">,</span> cust_contact<span class="token punctuation">,</span> cust_email
<span class="token keyword">FROM</span> customers
<span class="token keyword">WHERE</span> cust_name <span class="token operator">=</span> <span class="token string">&#39;Fun4All&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第-15-课-插入数据" tabindex="-1"><a class="header-anchor" href="#第-15-课-插入数据" aria-hidden="true">#</a> 第 15 课 插入数据</h2><p>插入完整的行</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 下面两条 SQL 等价</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> Customers
<span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;1000000006&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Toy Land&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123 Any Street&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;New York&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;NY&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;11111&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;USA&#39;</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> Customers<span class="token punctuation">(</span>cust_id<span class="token punctuation">,</span> cust_name<span class="token punctuation">,</span> cust_address<span class="token punctuation">,</span> cust_city<span class="token punctuation">,</span> cust_state<span class="token punctuation">,</span> cust_zip<span class="token punctuation">,</span> cust_country<span class="token punctuation">,</span> cust_contact<span class="token punctuation">,</span> cust_email<span class="token punctuation">)</span>
<span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;1000000006&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Toy Land&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123 Any Street&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;New York&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;NY&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;11111&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;USA&#39;</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>插入行的一部分</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> customers<span class="token punctuation">(</span>cust_id<span class="token punctuation">,</span> cust_name<span class="token punctuation">,</span> cust_address<span class="token punctuation">,</span> cust_city<span class="token punctuation">,</span> cust_state<span class="token punctuation">,</span> cust_zip<span class="token punctuation">,</span> cust_country<span class="token punctuation">)</span>
<span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;1000000006&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Toy Land&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123 Any Street&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;New York&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;NY&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;11111&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;USA&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>插入某些查询的结果</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> Customers<span class="token punctuation">(</span>cust_id<span class="token punctuation">,</span> cust_contact<span class="token punctuation">,</span> cust_email<span class="token punctuation">,</span> cust_name<span class="token punctuation">,</span> cust_address<span class="token punctuation">,</span> cust_city<span class="token punctuation">,</span> cust_state<span class="token punctuation">,</span> cust_zip<span class="token punctuation">,</span> cust_country<span class="token punctuation">)</span>
<span class="token keyword">SELECT</span> cust_id<span class="token punctuation">,</span> cust_contact<span class="token punctuation">,</span> cust_email<span class="token punctuation">,</span> cust_name<span class="token punctuation">,</span> cust_address<span class="token punctuation">,</span> cust_city<span class="token punctuation">,</span> cust_state<span class="token punctuation">,</span> cust_zip<span class="token punctuation">,</span> cust_country
<span class="token keyword">FROM</span> CustNew<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从一个表复制到另一个表</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">INTO</span> CustCopy
<span class="token keyword">FROM</span> Customers<span class="token punctuation">;</span>

<span class="token comment">-- MariaDB、MySQL、Oracle、PostgreSQL 和 SQLite</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> CustCopy <span class="token keyword">AS</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Customers<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第-16-课-更新和删除数据" tabindex="-1"><a class="header-anchor" href="#第-16-课-更新和删除数据" aria-hidden="true">#</a> 第 16 课 更新和删除数据</h2><p>更新单列</p><p>更新客户 1000000005 的电子邮件地址</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">UPDATE</span> Customers
<span class="token keyword">SET</span> cust_email <span class="token operator">=</span> <span class="token string">&#39;kim@thetoystore.com&#39;</span>
<span class="token keyword">WHERE</span> cust_id <span class="token operator">=</span> <span class="token string">&#39;1000000005&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更新多列</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">UPDATE</span> customers
<span class="token keyword">SET</span> cust_contact <span class="token operator">=</span> <span class="token string">&#39;Sam Roberts&#39;</span><span class="token punctuation">,</span> cust_email <span class="token operator">=</span> <span class="token string">&#39;sam@toyland.com&#39;</span>
<span class="token keyword">WHERE</span> cust_id <span class="token operator">=</span> <span class="token string">&#39;1000000006&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从表中删除特定的行</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> Customers
<span class="token keyword">WHERE</span> cust_id <span class="token operator">=</span> <span class="token string">&#39;1000000006&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>更新和删除的指导原则</p><ul><li>除非确实打算更新和删除每一行，否则绝对不要使用不带 WHERE 子句的 UPDATE 或 DELETE 语句。</li><li>保证每个表都有主键，尽可能像 WHERE 子句那样使用它（可以指定各主键、多个值或值的范围）。</li><li>在 UPDATE 或 DELETE 语句使用 WHERE 子句前，应该先用 SELECT 进行测试，保证它过滤的是正确的记录，以防编写的 WHERE 子句不正确。</li><li>使用强制实施引用完整性的数据库，这样 DBMS 将不允许删除其数据与其他表相关联的行。</li><li>有的 DBMS 允许数据库管理员施加约束，防止执行不带 WHERE 子句的 UPDATE 或 DELETE 语句。如果所采用的 DBMS 支持这个特性，应该使用它。</li></ul><h2 id="第-17-课-创建和操纵表" tabindex="-1"><a class="header-anchor" href="#第-17-课-创建和操纵表" aria-hidden="true">#</a> 第 17 课 创建和操纵表</h2><p>创建表</p><p>利用 CREATE TABLE 创建表，必须给出下列信息：</p><ul><li>新表的名字，在关键字 CREATE TABLE 之后给出；</li><li>表列的名字和定义，用逗号分隔；</li><li>有的 DBMS 还要求指定表的位置。</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> products <span class="token punctuation">(</span>
  prod_id <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  vend_id <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  prod_name <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">254</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  prod_price <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  prod_desc <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="更新表" tabindex="-1"><a class="header-anchor" href="#更新表" aria-hidden="true">#</a> 更新表</h3><p>添加列：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> Vendors
<span class="token keyword">ADD</span> vend_phone <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>删除列：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> Vendors
<span class="token keyword">DROP</span> <span class="token keyword">COLUMN</span> vend_phone<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="删除表" tabindex="-1"><a class="header-anchor" href="#删除表" aria-hidden="true">#</a> 删除表</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> CustCopy<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="第-18-课-使用视图" tabindex="-1"><a class="header-anchor" href="#第-18-课-使用视图" aria-hidden="true">#</a> 第 18 课 使用视图</h2><p>视图是虚拟的表。与包含数据的表不一样，视图只包含使用时动态检索数据的查询。</p><p>视图的一些常见应用</p><p>重用 SQL 语句</p><ul><li>简化复杂的 SQL 操作。在编写查询后，可以方便地重用它而不必知道其基本查询细节。</li><li>使用表的一部分而不是整个表。</li><li>保护数据。可以授予用户访问表的特定部分的权限，而不是整个表的访问权限。</li><li>更改数据格式和表示。视图可返回与底层表的表示和格式不同的数据。</li></ul><p>创建视图</p><p>创建一个名为 ProductCustomers 的视图，它联结三个表，返回已订购了任意产品的所有顾客的列表。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> ProductCustomers <span class="token keyword">AS</span>
<span class="token keyword">SELECT</span> cust_name<span class="token punctuation">,</span> cust_contact<span class="token punctuation">,</span> prod_id
<span class="token keyword">FROM</span> Customers<span class="token punctuation">,</span> Orders<span class="token punctuation">,</span> OrderItems
<span class="token keyword">WHERE</span> Customers<span class="token punctuation">.</span>cust_id <span class="token operator">=</span> Orders<span class="token punctuation">.</span>cust_id
<span class="token operator">AND</span> OrderItems<span class="token punctuation">.</span>order_num <span class="token operator">=</span> Orders<span class="token punctuation">.</span>order_num<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>检索订购了产品 RGAN01 的顾客</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> cust_name<span class="token punctuation">,</span> cust_contact
<span class="token keyword">FROM</span> ProductCustomers
<span class="token keyword">WHERE</span> prod_id <span class="token operator">=</span> <span class="token string">&#39;RGAN01&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第-19-课-使用存储过程" tabindex="-1"><a class="header-anchor" href="#第-19-课-使用存储过程" aria-hidden="true">#</a> 第 19 课 使用存储过程</h2><p>创建存储过程</p><p>对邮件发送清单中具有邮件地址的顾客进行计数</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> MailingListCount <span class="token punctuation">(</span>
  ListCount <span class="token keyword">OUT</span> <span class="token keyword">INTEGER</span>
<span class="token punctuation">)</span> <span class="token operator">IS</span>
v_rows <span class="token keyword">INTEGER</span><span class="token punctuation">;</span>

<span class="token keyword">BEGIN</span>
<span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>
<span class="token keyword">INTO</span> v_rows
<span class="token keyword">FROM</span> customers
<span class="token keyword">WHERE</span> <span class="token operator">NOT</span> cust_email <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>
ListCount :<span class="token operator">=</span> v_rows<span class="token punctuation">;</span>
<span class="token keyword">END</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第-20-课-管理事务处理" tabindex="-1"><a class="header-anchor" href="#第-20-课-管理事务处理" aria-hidden="true">#</a> 第 20 课 管理事务处理</h2><p>使用事务处理（transaction processing），通过确保成批的 SQL 操作要么完全执行，要么完全不执行，来维护数据库的完整性。</p><ul><li>事务（transaction）指一组 SQL 语句；</li><li>回退（rollback）指撤销指定 SQL 语句的过程；</li><li>提交（commit）指将未存储的 SQL 语句结果写入数据库表；</li><li>保留点（savepoint）指事务处理中设置的临时占位符（placeholder），可以对它发布回退（与回退整个事务处理不同）。</li></ul><p>事务开始结束标记</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- SQL Server</span>
<span class="token keyword">BEGIN</span> <span class="token keyword">TRANSACTION</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">COMMIT</span> <span class="token keyword">TRANSACTION</span>

<span class="token comment">-- MariaDB 和 MySQL</span>
<span class="token keyword">SET</span> <span class="token keyword">TRANSACTION</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token comment">-- Oracle</span>
<span class="token keyword">SET</span> <span class="token keyword">TRANSACTION</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token comment">-- PostgreSQL</span>
<span class="token keyword">BEGIN</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>SQL 的 ROLLBACK 命令用来回退（撤销）SQL 语句</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> Orders<span class="token punctuation">;</span>
<span class="token keyword">ROLLBACK</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>一般的 SQL 语句都是针对数据库表直接执行和编写的。这就是所谓的隐式提交（implicit commit），即提交（写或保存）操作是自动进行的。</p><p>在事务处理块中，提交不会隐式进行。进行明确的提交，使用 COMMIT 语句。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">BEGIN</span> <span class="token keyword">TRANSACTION</span>
<span class="token keyword">DELETE</span> OrderItems <span class="token keyword">WHERE</span> order_num <span class="token operator">=</span> <span class="token number">12345</span>
<span class="token keyword">DELETE</span> Orders <span class="token keyword">WHERE</span> order_num <span class="token operator">=</span> <span class="token number">12345</span>
<span class="token keyword">COMMIT</span> <span class="token keyword">TRANSACTION</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要支持回退部分事务，必须在事务处理块中的合适位置放置占位符。这样，如果需要回退，可以回退到某个占位符。在 SQL 中，这些占位符称为保留点。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- MariaDB、MySQL 和 Oracle</span>
<span class="token keyword">SAVEPOINT</span> delete1<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">ROLLBACK</span> <span class="token keyword">TO</span> delete1<span class="token punctuation">;</span>

<span class="token comment">-- SQL Server</span>
<span class="token keyword">SAVE</span> <span class="token keyword">TRANSACTION</span> delete1<span class="token punctuation">;</span>
<span class="token keyword">ROLLBACK</span> <span class="token keyword">TRANSACTION</span> delete1<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第-21-课-使用游标" tabindex="-1"><a class="header-anchor" href="#第-21-课-使用游标" aria-hidden="true">#</a> 第 21 课 使用游标</h2><p>SQL 检索操作返回一组称为结果集的行，这组返回的行都是与 SQL 语句相匹配的行（零行或多行）。简单地使用 SELECT 语句，没有办法得到第一行、下一行或前 10 行。</p><p>有时，需要在检索出来的行中前进或后退一行或多行，这就是游标的用途所在。游标（cursor）是一个存储在 DBMS 服务器上的数据库查询，它不是一条 SELECT 语句，而是被该语句检索出来的结果集。</p><p>游标要点</p><ul><li>能够标记游标为只读，使数据能读取，但不能更新和删除。</li><li>能控制可以执行的定向操作（向前、向后、第一、最后、绝对位置、相对位置等）。</li><li>能标记某些列为可编辑的，某些列为不可编辑的。</li><li>规定范围，使游标对创建它的特定请求（如存储过程）或对所有请求可访问。</li><li>指示 DBMS 对检索出的数据（而不是指出表中活动数据）进行复制，使数据在游标打开和访问期间不变化。</li></ul><p>使用 DECLARE 语句创建游标，这条语句在不同的 DBMS 中有所不同。DECLARE 命名游标，并定义相应的 SELECT 语句，根据需要带 WHERE 和其他子句。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- DB2、MariaDB、MySQL 和 SQL Server</span>
<span class="token keyword">DECLARE</span> CustCursor <span class="token keyword">CURSOR</span>
<span class="token keyword">FOR</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Customers
<span class="token keyword">WHERE</span> cust_email <span class="token operator">IS</span> <span class="token boolean">NULL</span>

<span class="token comment">-- Oracle 和 PostgreSQL</span>
<span class="token keyword">DECLARE</span> <span class="token keyword">CURSOR</span> CustCursor
<span class="token operator">IS</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Customers
<span class="token keyword">WHERE</span> cust_email <span class="token operator">IS</span> <span class="token boolean">NULL</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 OPEN CURSOR 语句打开游标，在大多数 DBMS 中的语法相同：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">OPEN</span> <span class="token keyword">CURSOR</span> CustCursor
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>关闭游标</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CLOSE</span> CustCursor
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="第-22-课-高级-sql-特性" tabindex="-1"><a class="header-anchor" href="#第-22-课-高级-sql-特性" aria-hidden="true">#</a> 第 22 课 高级 SQL 特性</h2><h3 id="约束" tabindex="-1"><a class="header-anchor" href="#约束" aria-hidden="true">#</a> 约束</h3><p>约束（constraint）管理如何插入或处理数据库数据的规则。</p><p>DBMS 通过在数据库表上施加约束来实施引用完整性。大多数约束是在表定义中定义的，用 CREATE TABLE 或 ALTER TABLE 语句。</p><p>主键是一种特殊的约束，用来保证一列（或一组列）中的值是唯一的，而且永不改动。换句话说，表中的一列（或多个列）的值唯一标识表中的每一行。</p><p>表中任意列只要满足以下条件，都可以用于主键</p><ul><li>任意两行的主键值都不相同。</li><li>每行都具有一个主键值（即列中不允许 NULL 值）。</li><li>包含主键值的列从不修改或更新。</li><li>主键值不能重用。如果从表中删除某一行，其主键值不分配给新行。</li></ul><p>创建表时指定主键</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> vendors <span class="token punctuation">(</span>
  vend_id <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>
  vend_name <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  vend_address <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  vend_city <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  vend_state <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  vend_zip <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  vend_country <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更新表时指定主键</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> Vendors
<span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>vend_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>外键是表中的一列，其值必须列在另一表的主键中。</p><p>创建表时指定外键</p><p>cust_id 中的任何值都必须是 Customers 表的 cust_id 中的值</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> Orders <span class="token punctuation">(</span>
  order_num <span class="token keyword">INTEGER</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>
  order_date <span class="token keyword">DATETIME</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  cust_id <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">REFERENCES</span> customers<span class="token punctuation">(</span>cust_id<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更新表时指定外键</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> Orders
<span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span>
<span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>cust_id<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> Customers <span class="token punctuation">(</span>cust_id<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>唯一约束用来保证一列（或一组列）中的数据是唯一的。它们类似于主键，但存在以下重要区别。</p><ul><li>表可包含多个唯一约束，但每个表只允许一个主键。</li><li>唯一约束列可包含 NULL 值。</li><li>唯一约束列可修改或更新。</li><li>唯一约束列的值可重复使用。</li><li>与主键不一样，唯一约束不能用来定义外键。</li></ul><p>检查约束用来保证一列（或一组列）中的数据满足一组指定的条件。检查约束的常见用途有以下几点。</p><ul><li>检查最小或最大值。例如，防止 0 个物品的订单（即使 0 是合法的数）。</li><li>指定范围。例如，保证发货日期大于等于今天的日期，但不超过今天起一年后的日期。</li><li>只允许特定的值。例如，在性别字段中只允许 M 或 F。</li></ul><p>利用这个约束，任何插入（或更新）的行都会被检查，保证 quantity 大于 0。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> OrderItems <span class="token punctuation">(</span>
  order_num <span class="token keyword">INTEGER</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  order_item <span class="token keyword">INTEGER</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  prod_id <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  quantity <span class="token keyword">INTEGER</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">CHECK</span> <span class="token punctuation">(</span>quantity <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  item_price MONEY <span class="token operator">NOT</span> <span class="token boolean">NULL</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>检查名为 gender 的列只包含 M 或 F，可编写如下的 ALTER TABLE 语句：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> <span class="token keyword">CHECK</span> <span class="token punctuation">(</span>gender <span class="token operator">LIKE</span> <span class="token string">&#39;[MF]&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="索引" tabindex="-1"><a class="header-anchor" href="#索引" aria-hidden="true">#</a> 索引</h3><p>索引用来排序数据以加快搜索和排序操作的速度。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> prod_name_ind
<span class="token keyword">ON</span> Products <span class="token punctuation">(</span>prod_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="触发器" tabindex="-1"><a class="header-anchor" href="#触发器" aria-hidden="true">#</a> 触发器</h3><p>触发器是特殊的存储过程，它在特定的数据库活动发生时自动执行。触发器可以与特定表上的 INSERT、UPDATE 和 DELETE 操作（或组合）相关联。</p><p>触发器的一些常见用途</p><ul><li>保证数据一致。例如，在 INSERT 或 UPDATE 操作中将所有州名转换为大写。</li><li>基于某个表的变动在其他表上执行活动。例如，每当更新或删除一行时将审计跟踪记录写入某个日志表。</li><li>进行额外的验证并根据需要回退数据。例如，保证某个顾客的可用资金不超限定，如果已经超出，则阻塞插入。</li><li>计算计算列的值或更新时间戳。</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- SQL Server</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> customer_state
<span class="token keyword">ON</span> Customers
<span class="token keyword">FOR</span> <span class="token keyword">INSERT</span><span class="token punctuation">,</span> <span class="token keyword">UPDATE</span>
<span class="token keyword">AS</span>
<span class="token keyword">UPDATE</span> Customers
<span class="token keyword">SET</span> cust_state <span class="token operator">=</span> Upper<span class="token punctuation">(</span>cust_state<span class="token punctuation">)</span>
<span class="token keyword">WHERE</span> Customers<span class="token punctuation">.</span>cust_id <span class="token operator">=</span> inserted<span class="token punctuation">.</span>cust_id<span class="token punctuation">;</span>

<span class="token comment">-- Oracle 和 PostgreSQL</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> customer_state
<span class="token keyword">AFTER</span> <span class="token keyword">INSERT</span> <span class="token operator">OR</span> <span class="token keyword">UPDATE</span>
<span class="token keyword">FOR EACH ROW</span>
<span class="token keyword">BEGIN</span>
<span class="token keyword">UPDATE</span> Customers
<span class="token keyword">SET</span> cust_state <span class="token operator">=</span> Upper<span class="token punctuation">(</span>cust_state<span class="token punctuation">)</span>
<span class="token keyword">WHERE</span> Customers<span class="token punctuation">.</span>cust_id <span class="token operator">=</span> :OLD<span class="token punctuation">.</span>cust_id
<span class="token keyword">END</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据库安全" tabindex="-1"><a class="header-anchor" href="#数据库安全" aria-hidden="true">#</a> 数据库安全</h3><p>安全性使用 SQL 的 GRANT 和 REVOKE 语句来管理。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,307),r={href:"https://book.douban.com/subject/35167240/",target:"_blank",rel:"noopener noreferrer"};function u(k,v){const n=e("ExternalLinkIcon");return p(),t("div",null,[d,s("ul",null,[s("li",null,[s("a",r,[o("《SQL 必知必会》"),l(n)])])])])}const E=a(i,[["render",u],["__file","index.html.vue"]]);export{E as default};
