const e=JSON.parse('{"key":"v-7b9a1b56","path":"/pages/fe8759c6/","title":"Spring 依赖注入","lang":"zh-CN","frontmatter":{"title":"Spring 依赖注入","date":"2020-08-30T16:06:10.000Z","order":4,"permalink":"/pages/fe8759c6/","category":["Java","框架","Spring","Spring核心"],"tag":["Java","框架","Spring","IOC","依赖注入"],"description":"Spring 依赖注入 DI，是 Dependency Injection 的缩写，即依赖注入。依赖注入是 IoC 的最常见形式。依赖注入是手动或自动绑定的方式，无需依赖特定的容器或 API。 依赖注入 (Dependency Injection，简称 DI) 是一个过程，其中对象仅通过构造函数参数、工厂方法的参数或对象实例在构造或从工厂方法返回。然后容器在创建 bean 时注入这些依赖项。这个过程基本上是 bean 本身的逆过程（因此得名，控制反转），它通过使用类的直接构造或服务定位器模式自行控制其依赖项的实例化或位置。 使用 DI，代码更干净，当对象具有依赖关系时，解耦更有效。对象不查找其依赖项，也不知道依赖项的位置或类别。结果，您的类变得更容易测试，特别是当依赖关系在接口或抽象基类上时，它们允许在单元测试中使用存根或模拟实现。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/fe8759c6/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"Spring 依赖注入"}],["meta",{"property":"og:description","content":"Spring 依赖注入 DI，是 Dependency Injection 的缩写，即依赖注入。依赖注入是 IoC 的最常见形式。依赖注入是手动或自动绑定的方式，无需依赖特定的容器或 API。 依赖注入 (Dependency Injection，简称 DI) 是一个过程，其中对象仅通过构造函数参数、工厂方法的参数或对象实例在构造或从工厂方法返回。然后容器在创建 bean 时注入这些依赖项。这个过程基本上是 bean 本身的逆过程（因此得名，控制反转），它通过使用类的直接构造或服务定位器模式自行控制其依赖项的实例化或位置。 使用 DI，代码更干净，当对象具有依赖关系时，解耦更有效。对象不查找其依赖项，也不知道依赖项的位置或类别。结果，您的类变得更容易测试，特别是当依赖关系在接口或抽象基类上时，它们允许在单元测试中使用存根或模拟实现。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-19T00:24:17.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"框架"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:tag","content":"IOC"}],["meta",{"property":"article:tag","content":"依赖注入"}],["meta",{"property":"article:published_time","content":"2020-08-30T16:06:10.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-19T00:24:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring 依赖注入\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-08-30T16:06:10.000Z\\",\\"dateModified\\":\\"2025-09-19T00:24:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"IoC 依赖注入 API","slug":"ioc-依赖注入-api","link":"#ioc-依赖注入-api","children":[]},{"level":2,"title":"依赖注入模式","slug":"依赖注入模式","link":"#依赖注入模式","children":[{"level":3,"title":"手动注入模式","slug":"手动注入模式","link":"#手动注入模式","children":[]},{"level":3,"title":"自动注入模式","slug":"自动注入模式","link":"#自动注入模式","children":[]}]},{"level":2,"title":"依赖注入方式","slug":"依赖注入方式","link":"#依赖注入方式","children":[{"level":3,"title":"构造器注入","slug":"构造器注入","link":"#构造器注入","children":[]},{"level":3,"title":"Setter 方法注入","slug":"setter-方法注入","link":"#setter-方法注入","children":[]},{"level":3,"title":"字段注入","slug":"字段注入","link":"#字段注入","children":[]},{"level":3,"title":"方法注入","slug":"方法注入","link":"#方法注入","children":[]},{"level":3,"title":"接口回调注入","slug":"接口回调注入","link":"#接口回调注入","children":[]},{"level":3,"title":"依赖注入选型","slug":"依赖注入选型","link":"#依赖注入选型","children":[]}]},{"level":2,"title":"限定注入和延迟注入","slug":"限定注入和延迟注入","link":"#限定注入和延迟注入","children":[{"level":3,"title":"限定注入","slug":"限定注入","link":"#限定注入","children":[]},{"level":3,"title":"延迟注入","slug":"延迟注入","link":"#延迟注入","children":[]}]},{"level":2,"title":"依赖注入数据类型","slug":"依赖注入数据类型","link":"#依赖注入数据类型","children":[{"level":3,"title":"基础类型","slug":"基础类型","link":"#基础类型","children":[]},{"level":3,"title":"集合类型","slug":"集合类型","link":"#集合类型","children":[]}]},{"level":2,"title":"依赖处理过程","slug":"依赖处理过程","link":"#依赖处理过程","children":[]},{"level":2,"title":"依赖查找 VS. 依赖注入","slug":"依赖查找-vs-依赖注入","link":"#依赖查找-vs-依赖注入","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1758241457000,"updatedTime":1758241457000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":1}]},"readingTime":{"minutes":9.77,"words":2931},"filePathRelative":"01.Java/框架/Spring/Spring核心/Spring依赖注入.md","localizedDate":"2020年8月30日","excerpt":"<h1> Spring 依赖注入</h1>\\n<p>DI，是 Dependency Injection 的缩写，即依赖注入。依赖注入是 IoC 的最常见形式。依赖注入是手动或自动绑定的方式，无需依赖特定的容器或 API。</p>\\n<p>依赖注入 (Dependency Injection，简称 DI) 是一个过程，其中对象仅通过构造函数参数、工厂方法的参数或对象实例在构造或从工厂方法返回。然后容器在创建 bean 时注入这些依赖项。这个过程基本上是 bean 本身的逆过程（因此得名，控制反转），它通过使用类的直接构造或服务定位器模式自行控制其依赖项的实例化或位置。</p>\\n<p>使用 DI，代码更干净，当对象具有依赖关系时，解耦更有效。对象不查找其依赖项，也不知道依赖项的位置或类别。结果，您的类变得更容易测试，特别是当依赖关系在接口或抽象基类上时，它们允许在单元测试中使用存根或模拟实现。</p>","autoDesc":true}');export{e as data};
