const e=JSON.parse('{"key":"v-3f31c4cb","path":"/pages/f40d72cf/","title":"Spring Data 综合","lang":"zh-CN","frontmatter":{"title":"Spring Data 综合","date":"2023-02-08T09:10:35.000Z","order":20,"permalink":"/pages/f40d72cf/","category":["Java","框架","Spring","Spring数据"],"tag":["Java","框架","Spring","SpringBoot"],"description":"Spring Data 综合 Spring Data Repository 抽象的目标是显著减少各种访问持久化存储的样板式代码。 核心概念 Repository 是 Spring Data 的核心接口。此接口主要用作标记接口，以捕获要使用的类型并帮助您发现扩展此接口的接口。CrudRepository 和 ListCrudRepository 接口为被管理的实体类提供复杂的 CRUD 功能。ListCrudRepository 提供等效方法，但它们返回 List，而 CrudRepository 方法返回 Iterable。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/f40d72cf/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"Spring Data 综合"}],["meta",{"property":"og:description","content":"Spring Data 综合 Spring Data Repository 抽象的目标是显著减少各种访问持久化存储的样板式代码。 核心概念 Repository 是 Spring Data 的核心接口。此接口主要用作标记接口，以捕获要使用的类型并帮助您发现扩展此接口的接口。CrudRepository 和 ListCrudRepository 接口为被管理的实体类提供复杂的 CRUD 功能。ListCrudRepository 提供等效方法，但它们返回 List，而 CrudRepository 方法返回 Iterable。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-18T15:46:22.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"框架"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:tag","content":"SpringBoot"}],["meta",{"property":"article:published_time","content":"2023-02-08T09:10:35.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-18T15:46:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring Data 综合\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-02-08T09:10:35.000Z\\",\\"dateModified\\":\\"2024-06-18T15:46:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"核心概念","slug":"核心概念","link":"#核心概念","children":[]},{"level":2,"title":"查询方法","slug":"查询方法","link":"#查询方法","children":[]},{"level":2,"title":"定义 Repository","slug":"定义-repository","link":"#定义-repository","children":[{"level":3,"title":"微调 Repository 定义","slug":"微调-repository-定义","link":"#微调-repository-定义","children":[]},{"level":3,"title":"使用多个 Spring 数据模块","slug":"使用多个-spring-数据模块","link":"#使用多个-spring-数据模块","children":[]}]},{"level":2,"title":"定义查询方法","slug":"定义查询方法","link":"#定义查询方法","children":[{"level":3,"title":"查询策略","slug":"查询策略","link":"#查询策略","children":[]},{"level":3,"title":"查询创建","slug":"查询创建","link":"#查询创建","children":[]}]},{"level":2,"title":"创建 Repository 实例","slug":"创建-repository-实例","link":"#创建-repository-实例","children":[]},{"level":2,"title":"自定义 Repository 实现","slug":"自定义-repository-实现","link":"#自定义-repository-实现","children":[]},{"level":2,"title":"Spring Data 扩展","slug":"spring-data-扩展","link":"#spring-data-扩展","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1697125600000,"updatedTime":1718725582000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":2}]},"readingTime":{"minutes":6.76,"words":2028},"filePathRelative":"01.Java/13.框架/01.Spring/02.Spring数据/20.SpringData综合.md","localizedDate":"2023年2月8日","excerpt":"<h1> Spring Data 综合</h1>\\n<p>Spring Data Repository 抽象的目标是显著减少各种访问持久化存储的样板式代码。</p>\\n<h2> 核心概念</h2>\\n<p>Repository 是 Spring Data 的核心接口。此接口主要用作标记接口，以捕获要使用的类型并帮助您发现扩展此接口的接口。<code>CrudRepository</code> 和 <code>ListCrudRepository</code> 接口为被管理的实体类提供复杂的 CRUD 功能。<code>ListCrudRepository</code> 提供等效方法，但它们返回 <code>List</code>，而 <code>CrudRepository</code> 方法返回 <code>Iterable</code>。</p>","autoDesc":true}');export{e as data};
