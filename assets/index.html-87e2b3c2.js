const t=JSON.parse('{"key":"v-26927db3","path":"/pages/d6c9102c/","title":"MyBatis 面试","lang":"zh-CN","frontmatter":{"title":"MyBatis 面试","date":"2025-04-30T06:33:26.000Z","order":99,"permalink":"/pages/d6c9102c/","category":["Java","框架","ORM"],"tag":["Java","框架","ORM","MyBatis"],"description":"MyBatis 面试 【简单】MyBatis 中 #{} 和 ${} 的区别是什么？ MyBatis 中 #{} 和 ${} 的区别对比 特性 #{}（预编译占位符） ${}（字符串拼接） 底层原理 使用 PreparedStatement，生成带 ? 的 SQL，预编译防止注入。 直接拼接字符串到 SQL 中，无参数化处理。 SQL 注入风险 ❌ 安全（自动转义特殊字符）。 ✔️ 高风险（需手动过滤参数）。 适用场景 动态条件值（如 WHERE id = #{value}）。 动态表名、列名（如 ORDER BY ${column}）。 数据类型处理 自动识别 Java 类型，匹配 JDBC 类型（如 Date→TIMESTAMP）。 原样替换，可能导致语法错误（如字符串未加引号）。 性能 预编译 SQL 可复用，高效。 每次生成新 SQL，效率较低。 示例 xml SELECT * FROM user WHERE name = #{name} xml SELECT * FROM ${tableName}","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/d6c9102c/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"MyBatis 面试"}],["meta",{"property":"og:description","content":"MyBatis 面试 【简单】MyBatis 中 #{} 和 ${} 的区别是什么？ MyBatis 中 #{} 和 ${} 的区别对比 特性 #{}（预编译占位符） ${}（字符串拼接） 底层原理 使用 PreparedStatement，生成带 ? 的 SQL，预编译防止注入。 直接拼接字符串到 SQL 中，无参数化处理。 SQL 注入风险 ❌ 安全（自动转义特殊字符）。 ✔️ 高风险（需手动过滤参数）。 适用场景 动态条件值（如 WHERE id = #{value}）。 动态表名、列名（如 ORDER BY ${column}）。 数据类型处理 自动识别 Java 类型，匹配 JDBC 类型（如 Date→TIMESTAMP）。 原样替换，可能导致语法错误（如字符串未加引号）。 性能 预编译 SQL 可复用，高效。 每次生成新 SQL，效率较低。 示例 xml SELECT * FROM user WHERE name = #{name} xml SELECT * FROM ${tableName}"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-14T13:48:12.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"框架"}],["meta",{"property":"article:tag","content":"ORM"}],["meta",{"property":"article:tag","content":"MyBatis"}],["meta",{"property":"article:published_time","content":"2025-04-30T06:33:26.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-14T13:48:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MyBatis 面试\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-04-30T06:33:26.000Z\\",\\"dateModified\\":\\"2025-09-14T13:48:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":3,"title":"【简单】MyBatis 中 #{} 和 ${} 的区别是什么？","slug":"【简单】mybatis-中-和-的区别是什么","link":"#【简单】mybatis-中-和-的区别是什么","children":[]},{"level":3,"title":"【简单】MyBatis 如何实现一对一、一对多的关联查询 ？","slug":"【简单】mybatis-如何实现一对一、一对多的关联查询","link":"#【简单】mybatis-如何实现一对一、一对多的关联查询","children":[]},{"level":3,"title":"【简单】使用 MyBatis 的 mapper 接口调用时有哪些要求？","slug":"【简单】使用-mybatis-的-mapper-接口调用时有哪些要求","link":"#【简单】使用-mybatis-的-mapper-接口调用时有哪些要求","children":[]},{"level":3,"title":"【简单】MyBatis 自带的连接池有了解过吗？","slug":"【简单】mybatis-自带的连接池有了解过吗","link":"#【简单】mybatis-自带的连接池有了解过吗","children":[]},{"level":3,"title":"【简单】MyBatis 和 Hibernate 有哪些差异？","slug":"【简单】mybatis-和-hibernate-有哪些差异","link":"#【简单】mybatis-和-hibernate-有哪些差异","children":[]},{"level":3,"title":"【中等】说说 MyBatis 的缓存机制？","slug":"【中等】说说-mybatis-的缓存机制","link":"#【中等】说说-mybatis-的缓存机制","children":[]},{"level":3,"title":"【中等】MyBatis 写个 Xml 映射文件，再写个 DAO 接口就能执行，这个原理是什么？","slug":"【中等】mybatis-写个-xml-映射文件-再写个-dao-接口就能执行-这个原理是什么","link":"#【中等】mybatis-写个-xml-映射文件-再写个-dao-接口就能执行-这个原理是什么","children":[]},{"level":3,"title":"【中等】MyBatis 动态 sql 有什么用？执行原理？有哪些动态 sql？","slug":"【中等】mybatis-动态-sql-有什么用-执行原理-有哪些动态-sql","link":"#【中等】mybatis-动态-sql-有什么用-执行原理-有哪些动态-sql","children":[]},{"level":3,"title":"【中等】MyBatis 是否支持延迟加载？如果支持，它的实现原理是什么？","slug":"【中等】mybatis-是否支持延迟加载-如果支持-它的实现原理是什么","link":"#【中等】mybatis-是否支持延迟加载-如果支持-它的实现原理是什么","children":[]},{"level":3,"title":"【中等】简述 MyBatis 的插件运行原理，以及如何编写一个插件？","slug":"【中等】简述-mybatis-的插件运行原理-以及如何编写一个插件","link":"#【中等】简述-mybatis-的插件运行原理-以及如何编写一个插件","children":[]},{"level":3,"title":"【中等】JDBC 编程有哪些不足之处，MyBatis 是如何解决的？","slug":"【中等】jdbc-编程有哪些不足之处-mybatis-是如何解决的","link":"#【中等】jdbc-编程有哪些不足之处-mybatis-是如何解决的","children":[]},{"level":3,"title":"【中等】MyBatis 都有哪些 Executor 执行器？它们之间的区别是什么？","slug":"【中等】mybatis-都有哪些-executor-执行器-它们之间的区别是什么","link":"#【中等】mybatis-都有哪些-executor-执行器-它们之间的区别是什么","children":[]},{"level":3,"title":"【中等】MyBatis 如何实现数据库类型和 Java 类型的转换的？","slug":"【中等】mybatis-如何实现数据库类型和-java-类型的转换的","link":"#【中等】mybatis-如何实现数据库类型和-java-类型的转换的","children":[]},{"level":2,"title":"【中等】MyBatis  有哪些核心组件？","slug":"【中等】mybatis-有哪些核心组件","link":"#【中等】mybatis-有哪些核心组件","children":[{"level":3,"title":"SqlSessionFactoryBuilder","slug":"sqlsessionfactorybuilder","link":"#sqlsessionfactorybuilder","children":[]},{"level":3,"title":"SqlSessionFactory","slug":"sqlsessionfactory","link":"#sqlsessionfactory","children":[]},{"level":3,"title":"SqlSession","slug":"sqlsession","link":"#sqlsession","children":[]},{"level":3,"title":"Mapper","slug":"mapper","link":"#mapper","children":[]}]},{"level":2,"title":"【中等】能详细说说 MyBatis 的执行流程吗？","slug":"【中等】能详细说说-mybatis-的执行流程吗","link":"#【中等】能详细说说-mybatis-的执行流程吗","children":[]},{"level":2,"title":"【困难】MyBatis 的架构是如何设计的？","slug":"【困难】mybatis-的架构是如何设计的","link":"#【困难】mybatis-的架构是如何设计的","children":[{"level":3,"title":"基础支撑层","slug":"基础支撑层","link":"#基础支撑层","children":[]},{"level":3,"title":"核心处理层","slug":"核心处理层","link":"#核心处理层","children":[]}]}],"git":{"createdTime":1757857692000,"updatedTime":1757857692000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":1}]},"readingTime":{"minutes":6.91,"words":2074},"filePathRelative":"01.Java/13.框架/ORM/MyBatis面试.md","localizedDate":"2025年4月30日","excerpt":"<h1> MyBatis 面试</h1>\\n<h3> 【简单】MyBatis 中 #{} 和 ${} 的区别是什么？</h3>\\n<p><strong>MyBatis 中 <code>#{}</code> 和 <code>${}</code> 的区别对比</strong></p>\\n<table>\\n<thead>\\n<tr>\\n<th><strong>特性</strong></th>\\n<th><strong><code>#{}</code>（预编译占位符）</strong></th>\\n<th><strong><code>${}</code>（字符串拼接）</strong></th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><strong>底层原理</strong></td>\\n<td>使用 <code>PreparedStatement</code>，生成带 <code>?</code> 的 SQL，预编译防止注入。</td>\\n<td>直接拼接字符串到 SQL 中，无参数化处理。</td>\\n</tr>\\n<tr>\\n<td><strong>SQL 注入风险</strong></td>\\n<td>❌ 安全（自动转义特殊字符）。</td>\\n<td>✔️ 高风险（需手动过滤参数）。</td>\\n</tr>\\n<tr>\\n<td><strong>适用场景</strong></td>\\n<td>动态条件值（如 <code>WHERE id = #{value}</code>）。</td>\\n<td>动态表名、列名（如 <code>ORDER BY ${column}</code>）。</td>\\n</tr>\\n<tr>\\n<td><strong>数据类型处理</strong></td>\\n<td>自动识别 Java 类型，匹配 JDBC 类型（如 <code>Date</code>→<code>TIMESTAMP</code>）。</td>\\n<td>原样替换，可能导致语法错误（如字符串未加引号）。</td>\\n</tr>\\n<tr>\\n<td><strong>性能</strong></td>\\n<td>预编译 SQL 可复用，高效。</td>\\n<td>每次生成新 SQL，效率较低。</td>\\n</tr>\\n<tr>\\n<td><strong>示例</strong></td>\\n<td><code>xml SELECT * FROM user WHERE name = #{name}</code></td>\\n<td><code>xml SELECT * FROM ${tableName}</code></td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{t as data};
