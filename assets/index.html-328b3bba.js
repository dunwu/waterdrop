import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as p,c as d,d as r,w as e,e as i,b as s,a as n}from"./app-8719940a.js";const u={},v=i(`<h1 id="nginx-面试" tabindex="-1"><a class="header-anchor" href="#nginx-面试" aria-hidden="true">#</a> Nginx 面试</h1><h2 id="【中等】如何限制上传文件大小" tabindex="-1"><a class="header-anchor" href="#【中等】如何限制上传文件大小" aria-hidden="true">#</a> 【中等】如何限制上传文件大小？</h2><p>显示错误信息：<strong>413 Request Entity Too Large</strong>。</p><p>意思是请求的内容过大，浏览器不能正确显示。常见的情况是发送 <code>POST</code> 请求来上传大文件。</p><p><strong>解决方法</strong></p><ul><li>可以在 <code>http</code> 模块中设置：<code>client_max_body_size 20m;</code></li><li>可以在 <code>server</code> 模块中设置：<code>client_max_body_size 20m;</code></li><li>可以在 <code>location</code> 模块中设置：<code>client_max_body_size 20m;</code></li></ul><p>三者区别是：</p><ul><li>如果文大小限制设置在 <code>http</code> 模块中，则对所有 Nginx 收到的请求。</li><li>如果文大小限制设置在 <code>server</code> 模块中，则只对该 <code>server</code> 收到的请求生效。</li><li>如果文大小限制设置在 <code>location</code> 模块中，则只对匹配了 <code>location</code> 路由规则的请求生效。</li></ul><h2 id="【中等】什么是-nginx" tabindex="-1"><a class="header-anchor" href="#【中等】什么是-nginx" aria-hidden="true">#</a> 【中等】什么是 Nginx？</h2><p>Nginx 是一个高性能、开源的 <strong>Web 服务器</strong>软件。但它更核心的现代角色是作为<strong>反向代理服务器</strong>和<strong>负载均衡器</strong>。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/web/nginx/nginx.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>核心特点</strong>：采用<strong>事件驱动</strong>的异步架构，能以极少的资源处理海量并发连接，以<strong>高性能、高稳定性和低内存占用</strong>著称。</p><p><strong>应用场景</strong></p><table><thead><tr><th style="text-align:left;">场景</th><th style="text-align:left;">角色</th><th style="text-align:left;">核心作用</th><th style="text-align:left;">简单比喻</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>静态内容服务</strong></td><td style="text-align:left;">Web 服务器</td><td style="text-align:left;">直接高效地处理静态文件（HTML, CSS, 图片等）</td><td style="text-align:left;"><strong>仓库管理员</strong>，直接发货</td></tr><tr><td style="text-align:left;"><strong>反向代理</strong></td><td style="text-align:left;">流量门户</td><td style="text-align:left;">接收所有用户请求，转发给后端应用服务器，并隐藏服务器细节</td><td style="text-align:left;"><strong>公司前台/总机</strong>，接收所有电话再转接内部</td></tr><tr><td style="text-align:left;"><strong>负载均衡</strong></td><td style="text-align:left;">流量分配器</td><td style="text-align:left;">将用户请求分发到多个后端服务器，提升系统性能和可用性</td><td style="text-align:left;"><strong>银行的排队叫号系统</strong>，将顾客平均分给多个柜台</td></tr></tbody></table><h2 id="【中等】什么是正向代理和反向代理" tabindex="-1"><a class="header-anchor" href="#【中等】什么是正向代理和反向代理" aria-hidden="true">#</a> 【中等】什么是正向代理和反向代理？</h2><p>反向代理（Reverse Proxy）方式是指以代理服务器来接受 internet 上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给 internet 上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/web/nginx/reverse-proxy.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="【中等】如何用-nginx-做限流-有几种限流算法-分别如何实现" tabindex="-1"><a class="header-anchor" href="#【中等】如何用-nginx-做限流-有几种限流算法-分别如何实现" aria-hidden="true">#</a> 【中等】如何用 Nginx 做限流，有几种限流算法，分别如何实现？</h2><p>Nginx 主要通过两个<strong>原生模块</strong>实现限流，对应两种不同的场景：</p><p>（1）<strong><code>limit_req_zone</code> / <code>limit_req</code>：限制请求速率（常用）</strong></p><ul><li><strong>算法</strong>：<strong>漏桶算法</strong>，能<strong>平滑突发流量</strong>，强制以恒定速率处理请求。</li><li><strong>目的</strong>：防止 CC 攻击、API 滥用、保护登录接口等。</li><li><strong>关键参数</strong>： <ul><li><code>zone</code>：定义共享内存区（存储访问状态）。</li><li><code>rate</code>：限制速率，如 <code>1r/s</code>（每秒 1 次请求）。</li><li><code>burst</code>：桶容量，允许的突发请求数（队列长度）。</li><li><code>nodelay</code>：与 <code>burst</code> 联用，立即处理突发队列中的请求，不延迟。</li></ul></li></ul><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token comment"># http 块中定义限流规则</span>
<span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">{</span>
    <span class="token comment"># 定义规则：以客户端 IP 为键，速率限制为每秒 10 次请求</span>
    <span class="token directive"><span class="token keyword">limit_req_zone</span> <span class="token variable">$binary_remote_addr</span> zone=my_rate_limit:10m rate=10r/s</span><span class="token punctuation">;</span>
    ...
<span class="token punctuation">}</span>

<span class="token comment"># server/location 块中应用规则</span>
<span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">location</span> /api/</span> <span class="token punctuation">{</span>
        <span class="token comment"># 应用规则，并允许最多 20 个请求的突发队列，且立即处理</span>
        <span class="token directive"><span class="token keyword">limit_req</span> zone=my_rate_limit burst=20 nodelay</span><span class="token punctuation">;</span>
        ...
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）<strong><code>limit_conn_zone</code> / <code>limit_conn</code>：限制并发连接数</strong></p><ul><li><strong>算法</strong>：无特定算法，简单计数。</li><li><strong>目的</strong>：防止单个客户端（如 IP）建立过多连接，耗尽服务器资源。适用于下载、上传等场景。</li><li><strong>关键参数</strong>： <ul><li><code>zone</code>：定义共享内存区。</li><li>数值：每个键（如 IP）允许的最大并发连接数。</li></ul></li></ul><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token comment"># http 块中定义</span>
<span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">{</span>
    <span class="token comment"># 定义连接限制区</span>
    <span class="token directive"><span class="token keyword">limit_conn_zone</span> <span class="token variable">$binary_remote_addr</span> zone=my_conn_limit:10m</span><span class="token punctuation">;</span>
    ...
<span class="token punctuation">}</span>

<span class="token comment"># server/location 块中应用</span>
<span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">location</span> /download/</span> <span class="token punctuation">{</span>
        <span class="token comment"># 每个 IP 同时只能有 2 个连接</span>
        <span class="token directive"><span class="token keyword">limit_conn</span> my_conn_limit <span class="token number">2</span></span><span class="token punctuation">;</span>
        <span class="token comment"># 可配合限速</span>
        <span class="token directive"><span class="token keyword">limit_rate</span> <span class="token number">500k</span></span><span class="token punctuation">;</span>
        ...
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>其他限流算法对比</strong></p><table><thead><tr><th style="text-align:left;">算法</th><th style="text-align:left;">特点</th><th style="text-align:left;">Nginx 支持情况</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>漏桶算法</strong></td><td style="text-align:left;"><strong>平滑流量</strong>，输出速率恒定，Nginx 原生支持。</td><td style="text-align:left;"><strong>原生支持</strong> (<code>limit_req</code>)</td></tr><tr><td style="text-align:left;"><strong>令牌桶算法</strong></td><td style="text-align:left;"><strong>允许突发</strong>，只要桶里有令牌即可快速处理。</td><td style="text-align:left;">需通过 OpenResty/Lua 等扩展实现</td></tr><tr><td style="text-align:left;"><strong>滑动窗口</strong></td><td style="text-align:left;"><strong>更精确</strong>，解决临界点问题，适合分布式环境。</td><td style="text-align:left;">需通过 OpenResty/Lua+Redis 等扩展实现</td></tr></tbody></table><p><strong>建议</strong></p><ul><li><strong>首选 <code>limit_req</code></strong>：应对大多数流量控制场景。</li><li><strong>善用 <code>burst</code> 和 <code>nodelay</code></strong>：在限制速率的同时，兼顾用户体验，允许合理的突发流量。</li><li><strong>组合使用</strong>：对核心接口可同时使用 <code>limit_req</code>（防刷）和 <code>limit_conn</code>（防资源耗尽）。</li><li><strong>设置白名单</strong>：避免内部 IP 或健康检查被误限。</li></ul><h2 id="【中等】如何用-nginx-实现反向代理" tabindex="-1"><a class="header-anchor" href="#【中等】如何用-nginx-实现反向代理" aria-hidden="true">#</a> 【中等】如何用 Nginx 实现反向代理？</h2><p>要使用 Nginx 实现反向代理，你需要配置 Nginx 的配置文件，指定代理规则。以下是具体步骤和示例：</p><p>基本反向代理配置</p><p>打开 Nginx 配置文件（通常位于 <code>/etc/nginx/nginx.conf</code> 或 <code>/etc/nginx/conf.d/default.conf</code>），添加如下配置：</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span></span><span class="token punctuation">;</span>                 <span class="token comment"># Nginx 监听的端口</span>
    <span class="token directive"><span class="token keyword">server_name</span> example.com</span><span class="token punctuation">;</span>   <span class="token comment"># 访问的域名</span>

    <span class="token comment"># 反向代理配置</span>
    <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">proxy_pass</span> http://127.0.0.1:3000</span><span class="token punctuation">;</span>  <span class="token comment"># 目标服务器地址（被代理的服务）</span>
        <span class="token directive"><span class="token keyword">proxy_set_header</span> Host <span class="token variable">$host</span></span><span class="token punctuation">;</span>       <span class="token comment"># 传递主机名</span>
        <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Real-IP <span class="token variable">$remote_addr</span></span><span class="token punctuation">;</span>  <span class="token comment"># 传递真实客户端 IP</span>
        <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span></span><span class="token punctuation">;</span>  <span class="token comment"># 传递代理链 IP</span>
        <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-Proto <span class="token variable">$scheme</span></span><span class="token punctuation">;</span>  <span class="token comment"># 传递协议（http/https）</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>按路径分流的反向代理</strong></p><p>可以根据不同的 URL 路径代理到不同的服务：</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">server_name</span> example.com</span><span class="token punctuation">;</span>

    <span class="token comment"># 访问 /api 路径时代理到后端 API 服务</span>
    <span class="token directive"><span class="token keyword">location</span> /api</span> <span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">proxy_pass</span> http://127.0.0.1:8080</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">proxy_set_header</span> Host <span class="token variable">$host</span></span><span class="token punctuation">;</span>
        <span class="token comment"># 其他代理头配置。..</span>
    <span class="token punctuation">}</span>

    <span class="token comment"># 访问 /admin 路径时代理到管理后台服务</span>
    <span class="token directive"><span class="token keyword">location</span> /admin</span> <span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">proxy_pass</span> http://127.0.0.1:9000</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">proxy_set_header</span> Host <span class="token variable">$host</span></span><span class="token punctuation">;</span>
        <span class="token comment"># 其他代理头配置。..</span>
    <span class="token punctuation">}</span>

    <span class="token comment"># 其他路径代理到前端服务</span>
    <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">proxy_pass</span> http://127.0.0.1:3000</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">proxy_set_header</span> Host <span class="token variable">$host</span></span><span class="token punctuation">;</span>
        <span class="token comment"># 其他代理头配置。..</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>检查并生效配置</strong></p><p>配置完成后，执行以下命令检查配置是否正确并重启 Nginx：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 检查配置语法</span>
nginx <span class="token parameter variable">-t</span>

<span class="token comment"># 重启 Nginx 使配置生效</span>
systemctl restart nginx
<span class="token comment"># 或</span>
<span class="token function">service</span> nginx restart
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>核心参数</strong></p><ul><li><code>proxy_pass</code>：指定被代理的目标服务器地址（可以是 IP: 端口 或域名）</li><li><code>proxy_set_header</code>：设置传递给后端服务器的请求头</li><li><code>listen</code>：Nginx 监听的端口</li><li><code>server_name</code>：匹配的域名</li></ul><h2 id="【中等】如何用-nginx-实现负载均衡" tabindex="-1"><a class="header-anchor" href="#【中等】如何用-nginx-实现负载均衡" aria-hidden="true">#</a> 【中等】如何用 Nginx 实现负载均衡？</h2><p>要使用 Nginx 实现负载均衡，需要在配置中定义一个后端服务器集群（upstream），然后通过反向代理将请求分发到集群中的服务器。以下是具体实现方法：</p><p><strong>基本负载均衡配置</strong></p><p>首先定义一个服务器集群，然后配置反向代理指向这个集群：</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token comment"># 定义后端服务器集群</span>
<span class="token directive"><span class="token keyword">upstream</span> backend_servers</span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">server</span> 127.0.0.1:3000</span><span class="token punctuation">;</span>  <span class="token comment"># 服务器 1</span>
    <span class="token directive"><span class="token keyword">server</span> 127.0.0.1:3001</span><span class="token punctuation">;</span>  <span class="token comment"># 服务器 2</span>
    <span class="token directive"><span class="token keyword">server</span> 192.168.1.100:3000</span><span class="token punctuation">;</span>  <span class="token comment"># 服务器 3（可跨主机）</span>
<span class="token punctuation">}</span>

<span class="token comment"># 配置反向代理到集群</span>
<span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">server_name</span> example.com</span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">proxy_pass</span> http://backend_servers</span><span class="token punctuation">;</span>  <span class="token comment"># 指向上面定义的集群</span>
        <span class="token directive"><span class="token keyword">proxy_set_header</span> Host <span class="token variable">$host</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Real-IP <span class="token variable">$remote_addr</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>负载均衡策略</strong></p><p>Nginx 提供了多种负载均衡策略，默认是<strong>轮询</strong>（每个请求按顺序分配到不同服务器），其他常用策略如下：</p>`,49),k=n("p",null,"给性能更好的服务器分配更高权重：",-1),m=n("div",{class:"language-nginx line-numbers-mode","data-ext":"nginx"},[n("pre",{class:"language-nginx"},[n("code",null,[n("span",{class:"token directive"},[n("span",{class:"token keyword"},"upstream"),s(" backend_servers")]),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token directive"},[n("span",{class:"token keyword"},"server"),s(" 127.0.0.1:3000 weight=3")]),n("span",{class:"token punctuation"},";"),s("  "),n("span",{class:"token comment"},"# 30%的请求"),s(`
    `),n("span",{class:"token directive"},[n("span",{class:"token keyword"},"server"),s(" 127.0.0.1:3001 weight=2")]),n("span",{class:"token punctuation"},";"),s("  "),n("span",{class:"token comment"},"# 20%的请求"),s(`
    `),n("span",{class:"token directive"},[n("span",{class:"token keyword"},"server"),s(" 192.168.1.100:3000 weight=5")]),n("span",{class:"token punctuation"},";"),s("  "),n("span",{class:"token comment"},"# 50%的请求"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),g=n("p",null,"同一客户端 IP 始终访问同一服务器（解决会话保持问题）：",-1),b=n("div",{class:"language-nginx line-numbers-mode","data-ext":"nginx"},[n("pre",{class:"language-nginx"},[n("code",null,[n("span",{class:"token directive"},[n("span",{class:"token keyword"},"upstream"),s(" backend_servers")]),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token directive"},[n("span",{class:"token keyword"},"ip_hash")]),n("span",{class:"token punctuation"},";"),s("  "),n("span",{class:"token comment"},"# 启用 IP 哈希策略"),s(`
    `),n("span",{class:"token directive"},[n("span",{class:"token keyword"},"server"),s(" 127.0.0.1:3000")]),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token directive"},[n("span",{class:"token keyword"},"server"),s(" 127.0.0.1:3001")]),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),x=n("p",null,"优先分配请求到连接数最少的服务器：",-1),h=n("div",{class:"language-nginx line-numbers-mode","data-ext":"nginx"},[n("pre",{class:"language-nginx"},[n("code",null,[n("span",{class:"token directive"},[n("span",{class:"token keyword"},"upstream"),s(" backend_servers")]),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token directive"},[n("span",{class:"token keyword"},"least_conn")]),n("span",{class:"token punctuation"},";"),s("  "),n("span",{class:"token comment"},"# 启用最少连接策略"),s(`
    `),n("span",{class:"token directive"},[n("span",{class:"token keyword"},"server"),s(" 127.0.0.1:3000")]),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token directive"},[n("span",{class:"token keyword"},"server"),s(" 127.0.0.1:3001")]),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),y=n("p",null,[s("根据请求 URL 分配到固定服务器（需安装 "),n("code",null,"ngx_http_upstream_hash_module"),s("）：")],-1),_=n("div",{class:"language-nginx line-numbers-mode","data-ext":"nginx"},[n("pre",{class:"language-nginx"},[n("code",null,[n("span",{class:"token directive"},[n("span",{class:"token keyword"},"upstream"),s(" backend_servers")]),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token directive"},[n("span",{class:"token keyword"},"hash"),s(),n("span",{class:"token variable"},"$request_uri")]),n("span",{class:"token punctuation"},";"),s("  "),n("span",{class:"token comment"},"# 按 URL 哈希"),s(`
    `),n("span",{class:"token directive"},[n("span",{class:"token keyword"},"server"),s(" 127.0.0.1:3000")]),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token directive"},[n("span",{class:"token keyword"},"server"),s(" 127.0.0.1:3001")]),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),w=i(`<p><strong>高级配置（健康检查）</strong></p><p>配置服务器健康检查，自动剔除故障节点：</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">upstream</span> backend_servers</span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">server</span> 127.0.0.1:3000</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">server</span> 127.0.0.1:3001</span><span class="token punctuation">;</span>

    <span class="token comment"># 健康检查配置</span>
    <span class="token directive"><span class="token keyword">keepalive</span> <span class="token number">32</span></span><span class="token punctuation">;</span>  <span class="token comment"># 保持连接数</span>
    <span class="token directive"><span class="token keyword">max_fails</span> <span class="token number">3</span></span><span class="token punctuation">;</span>   <span class="token comment"># 最大失败次数</span>
    <span class="token directive"><span class="token keyword">fail_timeout</span> <span class="token number">30s</span></span><span class="token punctuation">;</span>  <span class="token comment"># 失败后暂停 30 秒</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>配置生效</strong></p><p>完成配置后，检查并重启 Nginx：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 检查配置语法</span>
nginx <span class="token parameter variable">-t</span>

<span class="token comment"># 重启 Nginx</span>
systemctl restart nginx
<span class="token comment"># 或</span>
<span class="token function">service</span> nginx restart
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过以上配置，Nginx 会根据指定策略将请求分发到后端服务器集群，实现负载均衡，提高系统可用性和吞吐量。</p>`,7);function f(N,P){const l=o("Tabs");return p(),d("div",null,[v,r(l,{id:"369",data:[{id:"权重分配（weight）"},{id:"IP 哈希（ip_hash）"},{id:"最少连接（least_conn）"},{id:"URL 哈希（需要第三方模块）"}],"tab-id":"负载均衡配置"},{title0:e(({value:a,isActive:t})=>[s("权重分配（weight）")]),title1:e(({value:a,isActive:t})=>[s("IP 哈希（ip_hash）")]),title2:e(({value:a,isActive:t})=>[s("最少连接（least_conn）")]),title3:e(({value:a,isActive:t})=>[s("URL 哈希（需要第三方模块）")]),tab0:e(({value:a,isActive:t})=>[k,m]),tab1:e(({value:a,isActive:t})=>[g,b]),tab2:e(({value:a,isActive:t})=>[x,h]),tab3:e(({value:a,isActive:t})=>[y,_]),_:1}),w])}const R=c(u,[["render",f],["__file","index.html.vue"]]);export{R as default};
