import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as n,c as t,a as e,b as d,d as s,e as h}from"./app-812acd96.js";const c={},o=h(`<h1 id="系统伸缩性架构" tabindex="-1"><a class="header-anchor" href="#系统伸缩性架构" aria-hidden="true">#</a> 系统伸缩性架构</h1><blockquote><p>伸缩性架构是指不需要改变系统的软硬件设计，仅通过改变部署服务器数量就可以扩大或缩小系统的服务处理能力。</p></blockquote><h2 id="系统架构的伸缩性设计" tabindex="-1"><a class="header-anchor" href="#系统架构的伸缩性设计" aria-hidden="true">#</a> 系统架构的伸缩性设计</h2><h3 id="不同功能进行物理分离实现伸缩" tabindex="-1"><a class="header-anchor" href="#不同功能进行物理分离实现伸缩" aria-hidden="true">#</a> 不同功能进行物理分离实现伸缩</h3><ul><li><strong>纵向分离（分层后分离）</strong> - 将业务处理流程上的不同部分分离部署，实现系统伸缩性。</li><li><strong>横向分离（业务分割后分离）</strong> - 将不同的业务模块分离部署，实现系统伸缩性。</li></ul><h3 id="单一功能通过集群规模实现伸缩" tabindex="-1"><a class="header-anchor" href="#单一功能通过集群规模实现伸缩" aria-hidden="true">#</a> 单一功能通过集群规模实现伸缩</h3><p>将不同功能分离部署可以实现一定程度的伸缩性，但是随着访问量逐步增加，即使分离到最小粒度的独立部署，单一的服务器也不能满足业务规模的要求。因此必须使用服务器集群，即将相同服务部署在多态服务器上构成一个集群整体对外提供服务。</p><h2 id="应用服务器集群的伸缩性设计" tabindex="-1"><a class="header-anchor" href="#应用服务器集群的伸缩性设计" aria-hidden="true">#</a> 应用服务器集群的伸缩性设计</h2><p>如果 HTTP 请求分发装置可以感知或者可以配置集群的服务器数量，可以及时发现集群中新上线或下线的服务器，并能向新上线的服务器分发请求，停止向已下线的服务器分发请求，那么就实现了应用服务器集群的伸缩性。</p><h3 id="http-重定向负载均衡" tabindex="-1"><a class="header-anchor" href="#http-重定向负载均衡" aria-hidden="true">#</a> HTTP 重定向负载均衡</h3><div align="center"><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/architecture/负载均衡-HTTP重定向.png" width="500"></div><p>利用 HTTP 重定向协议实现负载均衡。</p><p>这种负载均衡方案的优点是比较简单。</p><p>缺点是浏览器需要两次请求服务器才能完成一次访问，性能较差：重定向服务器自身的处理能力有可能成为瓶颈，整个集群的伸缩性规模有限；使用 HTTP 302 响应码重定向，可能使搜索引擎判断为 SEO 作弊，降低搜索排名。</p><h3 id="dns-域名解析负载均衡" tabindex="-1"><a class="header-anchor" href="#dns-域名解析负载均衡" aria-hidden="true">#</a> DNS 域名解析负载均衡</h3><p>利用 DNS 处理域名解析请求的同时进行负载均衡处理的一种方案。</p><div align="center"><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/architecture/负载均衡-DNS域名解析.png" width="500"></div><p>在 DNS 服务器中配置多个 A 记录，如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>114.100.40.1 www.mysite.com
114.100.40.2 www.mysite.com
114.100.40.3 www.mysite.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每次域名解析请求都会根据负载均衡算法计算一个不同的 IP 地址返回，这样 A 记录中配置的多个服务器就构成一个集群，并可以实现负载均衡。</p><p>DNS 域名解析负载均衡的优点：</p><ul><li>将负载均衡的工作转交给了 DNS，省掉了网站管理维护的麻烦。</li><li>同时，许多 DNS 服务器还支持基于地理位置的域名解析，即将域名解析成距离用户地理最近的一个服务器地址，这样可以加快用户访问速度，改善性能。</li></ul><p>DNS 域名解析负载均衡的缺点：</p><ul><li>DNS 是多级解析，每一级 DNS 都可能缓存 A 记录，当某台服务器下线后，即使修改了 DNS 的 A 记录，要使其生效也需要较长时间。这段时间，依然会域名解析到已经下线的服务器，导致用户访问失败。</li><li>DNS 的负载均衡的控制权在域名服务商那里，网站无法对其做更多改善和更强大的管理。</li></ul><h3 id="反向代理负载均衡" tabindex="-1"><a class="header-anchor" href="#反向代理负载均衡" aria-hidden="true">#</a> 反向代理负载均衡</h3><p>大多数反向代理服务器同时提供反向代理和负载均衡的功能。</p><div align="center"><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/architecture/负载均衡-反向代理.png" width="500"></div><p>反向代理服务器的优点是部署简单。缺点是反向代理服务器是所有请求和响应的中转站，其性能可能会成为瓶颈。</p><h3 id="ip-负载均衡" tabindex="-1"><a class="header-anchor" href="#ip-负载均衡" aria-hidden="true">#</a> IP 负载均衡</h3><p>在网络层通过修改请求目标地址进行负载均衡。</p><div align="center"><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/architecture/负载均衡-IP层.png" width="500"></div><p>负载均衡服务器（网关服务器）在操作系统内核获取网络数据包，根据负载均衡算法计算得到一台真实 Web 服务器 10.0.0.1，然后将目的 IP 地址修改为 10.0.0.1，不需要通过用户进程。真实 Web 服务器处理完成后，响应数据包回到负载均衡服务器，负载均衡服务器再将数据包原地址修改为自身的 IP 地址（114.100.80.10）发送给浏览器。</p><p>IP 负载均衡在内核完成数据分发，所以处理性能优于反向代理负载均衡。但是因为所有请求响应都要经过负载均衡服务器，集群的最大响应数据吞吐量受制于负载均衡服务器网卡带宽。</p><h3 id="数据链路层负载均衡" tabindex="-1"><a class="header-anchor" href="#数据链路层负载均衡" aria-hidden="true">#</a> 数据链路层负载均衡</h3><p>数据链路层负载均衡是指在通信协议的数据链路层修改 mac 地址进行负载均衡。</p><div align="center"><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/architecture/负载均衡-数据链路层.png" width="500"></div><p>这种方式又称作三角传输方式，负载均衡数据分发过程中不修改 IP 地址，只修改目的 mac 地址，通过配置真实物理服务器集群所有机器虚拟 IP 和负载均衡服务器 IP 地址一致，从而达到不修改数据包的源地址和目的地址就可以进行数据分发的目的，由于实际处理请求的真实物理服务器 IP 和数据请求目的 IP 一致，不需要通过负载均衡服务器进行地址转换，可将响应数据包直接返回给用户浏览器，避免负载均衡服务器网卡带宽成为瓶颈。这种负载方式又称作直接路由方式。</p><p>在 Linux 平台上最好的链路层负载均衡开源产品是 <strong>LVS(Linux Virtual Server)</strong>。</p><h3 id="负载均衡算法" tabindex="-1"><a class="header-anchor" href="#负载均衡算法" aria-hidden="true">#</a> 负载均衡算法</h3><p>负载均衡服务器的实现可以分为两个部分：</p><ol><li>根据负载均衡算法和 Web 服务器列表计算得到集群中一台 Web 服务器的地址。</li><li>将请求数据发送到该地址对应的 Web 服务器上。</li></ol><p>负载均衡算法通常有以下几种：</p><ul><li><strong>轮询（Round Robin）</strong> - 所有请求被依次分发到每台应用服务器上，即每台服务器需要处理的请求数据都相同，适合于所有服务器硬件都相同的场景。</li><li><strong>加权轮询（Weighted Round Robin）</strong> - 根据服务器硬件性能情况，在轮询的基础上，按照配置权重将请求分发到每个服务器，高性能服务器能分配更多请求。</li><li><strong>随机（Random）</strong> - 请求被随机分配到各个应用服务器，在许多场合下，这种方案都很简单实用，因为好的随机数本身就很平均，即使应用服务器硬件配置不同，也可以使用加权随机算法。</li><li><strong>最少连接（Least Connection）</strong> - 记录每个应用服务器正在处理的连接数，将新到的请求分发到最少连接的服务器上，应该说，这是最符合负载均衡定义的算法。</li><li><strong>源地址 Hash（Source Hash）</strong> - 根据请求来源的 IP 地址进行 Hash 计算，得到应用服务器，这样来自同一个 IP 地址的请求总在同一个服务器上处理，该请求的上下文信息可以存储在这台服务器上，在一个会话周期内重复使用，从而实现会话粘滞。</li></ul><h2 id="分布式缓存集群的伸缩性设计" tabindex="-1"><a class="header-anchor" href="#分布式缓存集群的伸缩性设计" aria-hidden="true">#</a> 分布式缓存集群的伸缩性设计</h2><p>目前比较流行的分布式集群伸缩性方案就是：一致性 HASH 算法</p><h2 id="数据存储服务集群的伸缩性设计" tabindex="-1"><a class="header-anchor" href="#数据存储服务集群的伸缩性设计" aria-hidden="true">#</a> 数据存储服务集群的伸缩性设计</h2><h3 id="关系型数据库的伸缩性设计" tabindex="-1"><a class="header-anchor" href="#关系型数据库的伸缩性设计" aria-hidden="true">#</a> 关系型数据库的伸缩性设计</h3><ul><li><strong>主从复制</strong> - 主流关系型数据库一般都支持主从复制。</li><li><strong>分库</strong> - 根据业务对数据库进行分割。制约条件是跨库的表不能进行 Join 操作。</li><li><strong>分表</strong> - 使用数据库分片中间件，如 Cobar 等。</li></ul><h3 id="nosql-数据库的伸缩性设计" tabindex="-1"><a class="header-anchor" href="#nosql-数据库的伸缩性设计" aria-hidden="true">#</a> NoSql 数据库的伸缩性设计</h3><p>一般而言，Nosql 不支持 SQL 和 ACID，但是强化了对于高可用和伸缩性的支持。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,51),l={href:"https://item.jd.com/11322972.html",target:"_blank",rel:"noopener noreferrer"};function u(p,g){const a=r("ExternalLinkIcon");return n(),t("div",null,[o,e("ul",null,[e("li",null,[e("a",l,[d("《大型网站技术架构：核心原理与案例分析》"),s(a)])])])])}const x=i(c,[["render",u],["__file","index.html.vue"]]);export{x as default};
