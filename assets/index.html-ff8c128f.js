const e=JSON.parse('{"key":"v-45a63d1f","path":"/pages/615dc76d/","title":"设计模式之工厂方法模式","lang":"zh-CN","frontmatter":{"title":"设计模式之工厂方法模式","date":"2015-06-03T10:03:00.000Z","order":2,"permalink":"/pages/615dc76d/","category":["设计","设计模式"],"tag":["设计","设计模式"],"description":"设计模式之工厂方法模式 意图 工厂方法模式 (Factory Method)是一种创建型设计模式， 其在父类中提供一个创建对象的方法， 让子类决定实例化对象的类型。 工厂模式中，增加一种产品类，就要增加一个工厂类：因为每个工厂类只能创建一种产品的实例。 工厂模式遵循“开放-封闭原则”：工厂模式中，新增一种产品并不需要修改原有类，仅仅是扩展。 简单工厂模式相比于工厂方法模式","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/615dc76d/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"设计模式之工厂方法模式"}],["meta",{"property":"og:description","content":"设计模式之工厂方法模式 意图 工厂方法模式 (Factory Method)是一种创建型设计模式， 其在父类中提供一个创建对象的方法， 让子类决定实例化对象的类型。 工厂模式中，增加一种产品类，就要增加一个工厂类：因为每个工厂类只能创建一种产品的实例。 工厂模式遵循“开放-封闭原则”：工厂模式中，新增一种产品并不需要修改原有类，仅仅是扩展。 简单工厂模式相比于工厂方法模式"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-18T15:46:22.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"设计"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2015-06-03T10:03:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-18T15:46:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式之工厂方法模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2015-06-03T10:03:00.000Z\\",\\"dateModified\\":\\"2024-06-18T15:46:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"意图","slug":"意图","link":"#意图","children":[]},{"level":2,"title":"适用场景","slug":"适用场景","link":"#适用场景","children":[]},{"level":2,"title":"结构","slug":"结构","link":"#结构","children":[{"level":3,"title":"结构说明","slug":"结构说明","link":"#结构说明","children":[]},{"level":3,"title":"结构代码范式","slug":"结构代码范式","link":"#结构代码范式","children":[]}]},{"level":2,"title":"伪代码","slug":"伪代码","link":"#伪代码","children":[]},{"level":2,"title":"案例","slug":"案例","link":"#案例","children":[]},{"level":2,"title":"与其他模式的关系","slug":"与其他模式的关系","link":"#与其他模式的关系","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1651071272000,"updatedTime":1718725582000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":5}]},"readingTime":{"minutes":8.83,"words":2648},"filePathRelative":"03.设计/02.设计模式/02.工厂方法模式.md","localizedDate":"2015年6月3日","excerpt":"<h1> 设计模式之工厂方法模式</h1>\\n<h2> 意图</h2>\\n<p><strong>工厂方法模式</strong> (Factory Method)是一种创建型设计模式， 其在父类中提供一个创建对象的方法， 让子类决定实例化对象的类型。</p>\\n<ul>\\n<li><strong>工厂模式中，增加一种产品类，就要增加一个工厂类</strong>：因为每个工厂类只能创建一种产品的实例。</li>\\n<li>工厂模式<strong>遵循“开放-封闭原则”</strong>：工厂模式中，新增一种产品并不需要修改原有类，仅仅是扩展。</li>\\n</ul>\\n<p>简单工厂模式相比于工厂方法模式</p>","autoDesc":true}');export{e as data};
