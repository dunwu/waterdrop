const e=JSON.parse('{"key":"v-7d36b14b","path":"/pages/76e764a2/","title":"Java 并发面试一","lang":"zh-CN","frontmatter":{"title":"Java 并发面试一","date":"2020-06-04T13:51:00.000Z","permalink":"/pages/76e764a2/","category":["Java","JavaCore","面试"],"tag":["Java","JavaCore","面试","并发"],"description":"Java 并发面试一 并发简介 【简单】并发和并行有什么区别？ 什么是并发？ 什么是并行？ 并发和并行有什么区别？ 并发和并行是最容易让新手费解的概念，那么如何理解二者呢？其最关键的差异在于：是否是同时发生： 并发是指具备处理多个任务的能力，但不一定要同时。 并行是指具备同时处理多个任务的能力。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/76e764a2/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"Java 并发面试一"}],["meta",{"property":"og:description","content":"Java 并发面试一 并发简介 【简单】并发和并行有什么区别？ 什么是并发？ 什么是并行？ 并发和并行有什么区别？ 并发和并行是最容易让新手费解的概念，那么如何理解二者呢？其最关键的差异在于：是否是同时发生： 并发是指具备处理多个任务的能力，但不一定要同时。 并行是指具备同时处理多个任务的能力。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-13T09:28:24.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"JavaCore"}],["meta",{"property":"article:tag","content":"面试"}],["meta",{"property":"article:tag","content":"并发"}],["meta",{"property":"article:published_time","content":"2020-06-04T13:51:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-13T09:28:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 并发面试一\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-06-04T13:51:00.000Z\\",\\"dateModified\\":\\"2025-09-13T09:28:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"并发简介","slug":"并发简介","link":"#并发简介","children":[{"level":3,"title":"【简单】并发和并行有什么区别？","slug":"【简单】并发和并行有什么区别","link":"#【简单】并发和并行有什么区别","children":[]},{"level":3,"title":"【简单】同步和异步有什么区别？","slug":"【简单】同步和异步有什么区别","link":"#【简单】同步和异步有什么区别","children":[]},{"level":3,"title":"【简单】阻塞和非阻塞有什么区别？","slug":"【简单】阻塞和非阻塞有什么区别","link":"#【简单】阻塞和非阻塞有什么区别","children":[]},{"level":3,"title":"【中等】进程、线程、协程、管程有什么区别？","slug":"【中等】进程、线程、协程、管程有什么区别","link":"#【中等】进程、线程、协程、管程有什么区别","children":[]},{"level":3,"title":"【中等】Java 线程和操作系统的线程有什么区别？","slug":"【中等】java-线程和操作系统的线程有什么区别","link":"#【中等】java-线程和操作系统的线程有什么区别","children":[]},{"level":3,"title":"【中等】单核 CPU 支持 Java 多线程吗？","slug":"【中等】单核-cpu-支持-java-多线程吗","link":"#【中等】单核-cpu-支持-java-多线程吗","children":[]},{"level":3,"title":"【简单】并发一定比串行更快吗？","slug":"【简单】并发一定比串行更快吗","link":"#【简单】并发一定比串行更快吗","children":[]},{"level":3,"title":"【简单】什么是并发安全？有哪些线程不安全的情况？","slug":"【简单】什么是并发安全-有哪些线程不安全的情况","link":"#【简单】什么是并发安全-有哪些线程不安全的情况","children":[]},{"level":3,"title":"【中等】为什么会有并发安全问题？","slug":"【中等】为什么会有并发安全问题","link":"#【中等】为什么会有并发安全问题","children":[]},{"level":3,"title":"【中等】哪些场景需要额外注意线程安全问题？","slug":"【中等】哪些场景需要额外注意线程安全问题","link":"#【中等】哪些场景需要额外注意线程安全问题","children":[]},{"level":3,"title":"【困难】什么是死锁？如何发现死锁？如何避免死锁？","slug":"【困难】什么是死锁-如何发现死锁-如何避免死锁","link":"#【困难】什么是死锁-如何发现死锁-如何避免死锁","children":[]},{"level":3,"title":"【中等】什么是活锁？如何避免活锁？","slug":"【中等】什么是活锁-如何避免活锁","link":"#【中等】什么是活锁-如何避免活锁","children":[]},{"level":3,"title":"【中等】什么是饥饿问题？如何避免饥饿？","slug":"【中等】什么是饥饿问题-如何避免饥饿","link":"#【中等】什么是饥饿问题-如何避免饥饿","children":[]},{"level":3,"title":"【简单】简单介绍一下 Java 并发编程？","slug":"【简单】简单介绍一下-java-并发编程","link":"#【简单】简单介绍一下-java-并发编程","children":[]}]},{"level":2,"title":"Java 线程","slug":"java-线程","link":"#java-线程","children":[{"level":3,"title":"【中等】Java 线程生命周期有哪些状态？状态之间如何切换？","slug":"【中等】java-线程生命周期有哪些状态-状态之间如何切换","link":"#【中等】java-线程生命周期有哪些状态-状态之间如何切换","children":[]},{"level":3,"title":"【中等】Java 中，创建线程有几种方式？","slug":"【中等】java-中-创建线程有几种方式","link":"#【中等】java-中-创建线程有几种方式","children":[]},{"level":3,"title":"【简单】可以直接调用 Thread.run() 方法么？","slug":"【简单】可以直接调用-thread-run-方法么","link":"#【简单】可以直接调用-thread-run-方法么","children":[]},{"level":3,"title":"【简单】一个线程两次调用 Thread.start() 方法会怎样？","slug":"【简单】一个线程两次调用-thread-start-方法会怎样","link":"#【简单】一个线程两次调用-thread-start-方法会怎样","children":[]},{"level":3,"title":"【简单】Thread.sleep()、Thread.yield()、Thread.join()、Object.wait() 有什么区别？","slug":"【简单】thread-sleep-、thread-yield-、thread-join-、object-wait-有什么区别","link":"#【简单】thread-sleep-、thread-yield-、thread-join-、object-wait-有什么区别","children":[]},{"level":3,"title":"【中等】为什么 Thread.sleep()、Thread.yield() 设计为静态方法？","slug":"【中等】为什么-thread-sleep-、thread-yield-设计为静态方法","link":"#【中等】为什么-thread-sleep-、thread-yield-设计为静态方法","children":[]},{"level":3,"title":"【中等】为什么 Object.wait()、Object.notify() 和 Object.notifyAll() 被定义在 Object 类里？","slug":"【中等】为什么-object-wait-、object-notify-和-object-notifyall-被定义在-object-类里","link":"#【中等】为什么-object-wait-、object-notify-和-object-notifyall-被定义在-object-类里","children":[]},{"level":3,"title":"【中等】为什么 Object.wait()、Object.notify() 和 Object.notifyAll() 必须在 synchronized 方法/块中被调用？","slug":"【中等】为什么-object-wait-、object-notify-和-object-notifyall-必须在-synchronized-方法-块中被调用","link":"#【中等】为什么-object-wait-、object-notify-和-object-notifyall-必须在-synchronized-方法-块中被调用","children":[]},{"level":3,"title":"【中等】如何正确停止 Java 线程？","slug":"【中等】如何正确停止-java-线程","link":"#【中等】如何正确停止-java-线程","children":[]},{"level":3,"title":"【中等】可以使用 Thread.stop，Thread.suspend 和 Thread.resume 停止线程吗？为什么？","slug":"【中等】可以使用-thread-stop-thread-suspend-和-thread-resume-停止线程吗-为什么","link":"#【中等】可以使用-thread-stop-thread-suspend-和-thread-resume-停止线程吗-为什么","children":[]},{"level":3,"title":"【中等】使用 volatile 标记方式停止线程正确吗？","slug":"【中等】使用-volatile-标记方式停止线程正确吗","link":"#【中等】使用-volatile-标记方式停止线程正确吗","children":[]},{"level":3,"title":"【中等】Java 线程之间如何进行通信？","slug":"【中等】java-线程之间如何进行通信","link":"#【中等】java-线程之间如何进行通信","children":[]},{"level":3,"title":"【简单】高优先级的 Java 线程一定先执行吗？","slug":"【简单】高优先级的-java-线程一定先执行吗","link":"#【简单】高优先级的-java-线程一定先执行吗","children":[]}]},{"level":2,"title":"Java 内存模型","slug":"java-内存模型","link":"#java-内存模型","children":[{"level":3,"title":"【中等】什么是 Java 内存模型？","slug":"【中等】什么是-java-内存模型","link":"#【中等】什么是-java-内存模型","children":[]},{"level":3,"title":"【困难】什么是 Happens-Before 规则？有什么用？","slug":"【困难】什么是-happens-before-规则-有什么用","link":"#【困难】什么是-happens-before-规则-有什么用","children":[]},{"level":3,"title":"【困难】什么是 Java 内存屏障？有什么用？","slug":"【困难】什么是-java-内存屏障-有什么用","link":"#【困难】什么是-java-内存屏障-有什么用","children":[]},{"level":3,"title":"【中等】volatile 有什么作用？","slug":"【中等】volatile-有什么作用","link":"#【中等】volatile-有什么作用","children":[]},{"level":3,"title":"【中等】volatile 能完全保证并发安全吗？","slug":"【中等】volatile-能完全保证并发安全吗","link":"#【中等】volatile-能完全保证并发安全吗","children":[]},{"level":3,"title":"【中等】volatile 和 synchronized 有什么区别？volatile 能替代 synchronized 吗？","slug":"【中等】volatile-和-synchronized-有什么区别-volatile-能替代-synchronized-吗","link":"#【中等】volatile-和-synchronized-有什么区别-volatile-能替代-synchronized-吗","children":[]},{"level":3,"title":"【中等】synchronized 有什么作用？","slug":"【中等】synchronized-有什么作用","link":"#【中等】synchronized-有什么作用","children":[]},{"level":3,"title":"【中等】synchronized 的实现原理是什么？","slug":"【中等】synchronized-的实现原理是什么","link":"#【中等】synchronized-的实现原理是什么","children":[]},{"level":3,"title":"【困难】JDK6 对synchronized 进行了哪些优化？","slug":"【困难】jdk6-对synchronized-进行了哪些优化","link":"#【困难】jdk6-对synchronized-进行了哪些优化","children":[]},{"level":3,"title":"【中等】final 关键字可以保证线程的可见性吗？","slug":"【中等】final-关键字可以保证线程的可见性吗","link":"#【中等】final-关键字可以保证线程的可见性吗","children":[]}]}],"git":{"createdTime":1743948422000,"updatedTime":1757755704000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":6}]},"readingTime":{"minutes":43.46,"words":13037},"filePathRelative":"01.Java/01.JavaCore/99.面试/Java_面试_并发（一）.md","localizedDate":"2020年6月4日","excerpt":"<h1> Java 并发面试一</h1>\\n<h2> 并发简介</h2>\\n<h3> 【简单】并发和并行有什么区别？</h3>\\n<blockquote>\\n<ul>\\n<li>什么是并发？</li>\\n<li>什么是并行？</li>\\n<li>并发和并行有什么区别？</li>\\n</ul>\\n</blockquote>\\n<p>并发和并行是最容易让新手费解的概念，那么如何理解二者呢？其最关键的差异在于：是否是<strong>同时</strong>发生：</p>\\n<ul>\\n<li><strong>并发是指具备处理多个任务的能力，但不一定要同时</strong>。</li>\\n<li><strong>并行是指具备同时处理多个任务的能力</strong>。</li>\\n</ul>","autoDesc":true}');export{e as data};
