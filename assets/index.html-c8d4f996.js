import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as s,e}from"./app-418b068d.js";const t={},p=e(`<h1 id="java-虚拟机面试一" tabindex="-1"><a class="header-anchor" href="#java-虚拟机面试一" aria-hidden="true">#</a> Java 虚拟机面试一</h1><p>【中等】JVM 的 TLAB（Thread-Local Allocation Buffer）是什么？<br> 【中等】Java 是如何实现跨平台的？</p><p>【中等】编译执行与解释执行的区别是什么？JVM 使用哪种方式？</p><p>【困难】你了解 Java 的类加载器吗？<br> 【中等】什么是 Java 中的 JIT（Just-In-Time）?<br> 【中等】JIT 编译后的代码存在哪？<br> 【中等】什么是 Java 的 AOT（Ahead-Of-Time）？<br> 【困难】你了解 Java 的逃逸分析吗？<br> 【中等】Java 中的强引用、软引用、弱引用和虚引用分别是什么？</p><p>【中等】什么是 Java 的 PLAB？<br> 【困难】JVM 垃圾回收时产生的 concurrent mode failure 的原因是什么？<br> 【困难】为什么 Java 中 CMS 垃圾收集器在发生 Concurrent Mode Failure 时的 Full GC 是单线程的？<br> 【中等】为什么 Java 中某些新生代和老年代的垃圾收集器不能组合使用？比如 ParNew 和 Parallel Old<br> 【中等】JVM 新生代垃圾回收如何避免全堆扫描？<br> 【困难】Java 的 CMS 垃圾回收器和 G1 垃圾回收器在记忆集的维护上有什么不同？<br> 【困难】为什么 G1 垃圾收集器不维护年轻代到老年代的记忆集？<br> 【困难】Java 中的 CMS 和 G1 垃圾收集器如何维持并发的正确性？<br> 【中等】Java G1 相对于 CMS 有哪些进步的地方?<br> 【中等】什么是 Java 中的 logging write barrier？</p><p>【中等】JVM 垃圾回收调优的主要目标是什么？<br> 【中等】如何对 Java 的垃圾回收进行调优？<br> 【中等】常用的 JVM 配置参数有哪些？<br> 【中等】你常用哪些工具来分析 JVM 性能？<br> 【中等】如何在 Java 中进行内存泄漏分析？<br> 【中等】Java 里的对象在虚拟机里面是怎么存储的？<br> 【中等】说说 Java 的执行流程?</p><h2 id="jvm-简介" tabindex="-1"><a class="header-anchor" href="#jvm-简介" aria-hidden="true">#</a> JVM 简介</h2><h3 id="【中等】jvm-由哪些部分组成" tabindex="-1"><a class="header-anchor" href="#【中等】jvm-由哪些部分组成" aria-hidden="true">#</a> 【中等】JVM 由哪些部分组成？</h3><h2 id="jvm-内存管理" tabindex="-1"><a class="header-anchor" href="#jvm-内存管理" aria-hidden="true">#</a> JVM 内存管理</h2><h3 id="【中等】jvm-的内存区域是如何划分的" tabindex="-1"><a class="header-anchor" href="#【中等】jvm-的内存区域是如何划分的" aria-hidden="true">#</a> 【中等】JVM 的内存区域是如何划分的？</h3><h3 id="【简单】jvm-方法区是否会出现内存溢出" tabindex="-1"><a class="header-anchor" href="#【简单】jvm-方法区是否会出现内存溢出" aria-hidden="true">#</a> 【简单】JVM 方法区是否会出现内存溢出?</h3><h3 id="【中等】jvm-有那几种情况会产生-oom-内存溢出" tabindex="-1"><a class="header-anchor" href="#【中等】jvm-有那几种情况会产生-oom-内存溢出" aria-hidden="true">#</a> 【中等】JVM 有那几种情况会产生 OOM（内存溢出）？</h3><h3 id="【中等】java-中堆和栈的区别是什么" tabindex="-1"><a class="header-anchor" href="#【中等】java-中堆和栈的区别是什么" aria-hidden="true">#</a> 【中等】Java 中堆和栈的区别是什么？</h3><h3 id="【困难】什么是-java-中的直接内存-堆外内存" tabindex="-1"><a class="header-anchor" href="#【困难】什么是-java-中的直接内存-堆外内存" aria-hidden="true">#</a> 【困难】什么是 Java 中的直接内存（堆外内存）？</h3><h3 id="【中等】什么是-java-中的常量池" tabindex="-1"><a class="header-anchor" href="#【中等】什么是-java-中的常量池" aria-hidden="true">#</a> 【中等】什么是 Java 中的常量池？</h3><h3 id="程序计数器为什么是私有的" tabindex="-1"><a class="header-anchor" href="#程序计数器为什么是私有的" aria-hidden="true">#</a> 程序计数器为什么是私有的？</h3><p>程序计数器主要有下面两个作用：</p><ol><li>字节码解释器通过改变程序计数器来依次读取指令，从而实现代码的流程控制，如：顺序执行、选择、循环、异常处理。</li><li>在多线程的情况下，程序计数器用于记录当前线程执行的位置，从而当线程被切换回来的时候能够知道该线程上次运行到哪儿了。</li></ol><p>需要注意的是，如果执行的是 native 方法，那么程序计数器记录的是 undefined 地址，只有执行的是 Java 代码时程序计数器记录的才是下一条指令的地址。</p><p>所以，程序计数器私有主要是为了<strong>线程切换后能恢复到正确的执行位置</strong>。</p><h3 id="虚拟机栈和本地方法栈为什么是私有的" tabindex="-1"><a class="header-anchor" href="#虚拟机栈和本地方法栈为什么是私有的" aria-hidden="true">#</a> 虚拟机栈和本地方法栈为什么是私有的？</h3><ul><li><strong>虚拟机栈：</strong> 每个 Java 方法在执行之前会创建一个栈帧用于存储局部变量表、操作数栈、常量池引用等信息。从方法调用直至执行完成的过程，就对应着一个栈帧在 Java 虚拟机栈中入栈和出栈的过程。</li><li><strong>本地方法栈：</strong> 和虚拟机栈所发挥的作用非常相似，区别是：<strong>虚拟机栈为虚拟机执行 Java 方法 （也就是字节码）服务，而本地方法栈则为虚拟机使用到的 Native 方法服务。</strong> 在 HotSpot 虚拟机中和 Java 虚拟机栈合二为一。</li></ul><p>所以，为了<strong>保证线程中的局部变量不被别的线程访问到</strong>，虚拟机栈和本地方法栈是线程私有的。</p><h3 id="一句话简单了解堆和方法区" tabindex="-1"><a class="header-anchor" href="#一句话简单了解堆和方法区" aria-hidden="true">#</a> 一句话简单了解堆和方法区</h3><p>堆和方法区是所有线程共享的资源，其中堆是进程中最大的一块内存，主要用于存放新创建的对象 （几乎所有对象都在这里分配内存），方法区主要用于存放已被加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</p><p>内存区域</p><h2 id="垃圾收集" tabindex="-1"><a class="header-anchor" href="#垃圾收集" aria-hidden="true">#</a> 垃圾收集</h2><h3 id="【中等】java-中有哪些垃圾回收算法" tabindex="-1"><a class="header-anchor" href="#【中等】java-中有哪些垃圾回收算法" aria-hidden="true">#</a> 【中等】Java 中有哪些垃圾回收算法？</h3><h3 id="【中等】java-中常见的垃圾收集器有哪些" tabindex="-1"><a class="header-anchor" href="#【中等】java-中常见的垃圾收集器有哪些" aria-hidden="true">#</a> 【中等】Java 中常见的垃圾收集器有哪些？</h3><h3 id="【困难】java-中如何判断对象是否是垃圾-不同实现方式有何区别" tabindex="-1"><a class="header-anchor" href="#【困难】java-中如何判断对象是否是垃圾-不同实现方式有何区别" aria-hidden="true">#</a> 【困难】Java 中如何判断对象是否是垃圾？不同实现方式有何区别？</h3><h3 id="【中等】为什么-java-的垃圾收集器将堆分为老年代和新生代" tabindex="-1"><a class="header-anchor" href="#【中等】为什么-java-的垃圾收集器将堆分为老年代和新生代" aria-hidden="true">#</a> 【中等】为什么 Java 的垃圾收集器将堆分为老年代和新生代？</h3><h3 id="【困难】为什么-java-8-移除了永久代-permgen-并引入了元空间-metaspace" tabindex="-1"><a class="header-anchor" href="#【困难】为什么-java-8-移除了永久代-permgen-并引入了元空间-metaspace" aria-hidden="true">#</a> 【困难】为什么 Java 8 移除了永久代（PermGen）并引入了元空间（Metaspace）？</h3><h3 id="【中等】为什么-java-新生代被划分为-s0、s1-和-eden-区" tabindex="-1"><a class="header-anchor" href="#【中等】为什么-java-新生代被划分为-s0、s1-和-eden-区" aria-hidden="true">#</a> 【中等】为什么 Java 新生代被划分为 S0、S1 和 Eden 区？</h3><h3 id="【困难】什么是三色标记算法" tabindex="-1"><a class="header-anchor" href="#【困难】什么是三色标记算法" aria-hidden="true">#</a> 【困难】什么是三色标记算法？</h3><h3 id="【困难】java-中的-young-gc、old-gc、full-gc-和-mixed-gc-的区别是什么" tabindex="-1"><a class="header-anchor" href="#【困难】java-中的-young-gc、old-gc、full-gc-和-mixed-gc-的区别是什么" aria-hidden="true">#</a> 【困难】Java 中的 young GC、old GC、full GC 和 mixed GC 的区别是什么？</h3><h3 id="【中等】什么条件会触发-java-的-young-gc" tabindex="-1"><a class="header-anchor" href="#【中等】什么条件会触发-java-的-young-gc" aria-hidden="true">#</a> 【中等】什么条件会触发 Java 的 young GC？</h3><h3 id="【困难】什么情况下会触发-java-的-full-gc" tabindex="-1"><a class="header-anchor" href="#【困难】什么情况下会触发-java-的-full-gc" aria-hidden="true">#</a> 【困难】什么情况下会触发 Java 的 Full GC？</h3><h3 id="【困难】java-的-g1-垃圾回收流程是怎样的" tabindex="-1"><a class="header-anchor" href="#【困难】java-的-g1-垃圾回收流程是怎样的" aria-hidden="true">#</a> 【困难】Java 的 G1 垃圾回收流程是怎样的？</h3><h3 id="【困难】java-的-cms-垃圾回收流程是怎样的" tabindex="-1"><a class="header-anchor" href="#【困难】java-的-cms-垃圾回收流程是怎样的" aria-hidden="true">#</a> 【困难】Java 的 CMS 垃圾回收流程是怎样的？</h3><h3 id="【困难】你了解-java-的-zgc-z-garbage-collector-吗" tabindex="-1"><a class="header-anchor" href="#【困难】你了解-java-的-zgc-z-garbage-collector-吗" aria-hidden="true">#</a> 【困难】你了解 Java 的 ZGC（Z Garbage Collector）吗？</h3><h2 id="字节码" tabindex="-1"><a class="header-anchor" href="#字节码" aria-hidden="true">#</a> 字节码</h2><h2 id="工具" tabindex="-1"><a class="header-anchor" href="#工具" aria-hidden="true">#</a> 工具</h2><h3 id="【简单】jdk-内置了哪些工具" tabindex="-1"><a class="header-anchor" href="#【简单】jdk-内置了哪些工具" aria-hidden="true">#</a> 【简单】JDK 内置了哪些工具？</h3><details class="hint-container details"><summary>要点</summary><p><strong>基础开发工具</strong></p><ul><li><strong><code>javac</code></strong> – Java 编译器（<code>.java</code> → <code>.class</code>）</li><li><strong><code>java</code></strong> – 运行 Java 程序（启动 JVM）</li><li><strong><code>javadoc</code></strong> – 生成 API 文档（基于源码注释）</li><li><strong><code>jar</code></strong> – 打包 <code>.class</code> 文件为 JAR</li><li><strong><code>jdb</code></strong> – 命令行调试工具（断点、变量查看）</li></ul><p><strong>性能监控与分析工具</strong></p><ul><li><strong><code>jps</code></strong> – 查看 Java 进程</li><li><strong><code>jstack</code></strong> – 线程堆栈分析（排查死锁、线程阻塞）</li><li><strong><code>jmap</code></strong> – 内存快照（生成 Heap Dump）</li><li><strong><code>jhat</code></strong> – 分析 Heap Dump（内存泄漏排查）</li><li><strong><code>jstat</code></strong> – JVM 统计（GC、内存、类加载监控）</li><li><strong><code>jconsole</code></strong> – 图形化 JVM 监控（内存、线程、类）</li><li><strong><code>jvisualvm</code></strong> – 综合性能分析（CPU、内存、GC）</li></ul><p><strong>诊断工具</strong></p><ul><li><strong><code>jinfo</code></strong> – 查看/修改 JVM 运行参数</li><li><strong><code>jstatd</code></strong> – 远程 JVM 监控（分布式支持）</li></ul></details><h2 id="故障处理" tabindex="-1"><a class="header-anchor" href="#故障处理" aria-hidden="true">#</a> 故障处理</h2><h2 id="类加载" tabindex="-1"><a class="header-anchor" href="#类加载" aria-hidden="true">#</a> 类加载</h2><h3 id="java-支持哪些引用类型-分别用于什么场景" tabindex="-1"><a class="header-anchor" href="#java-支持哪些引用类型-分别用于什么场景" aria-hidden="true">#</a> Java 支持哪些引用类型？分别用于什么场景？</h3><p>无论是通过引用计算算法判断对象的引用数量，还是通过可达性分析算法判断对象的引用链是否可达，判定对象是否可被回收都与引用有关。</p><p>Java 具有四种强度不同的引用类型：</p><ul><li>强引用（Strong Reference）</li><li>软引用（Soft Reference）</li><li>弱引用（Weak Reference）</li><li>虚引用</li></ul><p><strong>（1）强引用</strong></p><p><strong>被强引用（Strong Reference）关联的对象不会被垃圾收集器回收。</strong></p><p>使用 <code>new</code> 一个新对象的方式来创建强引用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>（2）软引用</strong></p><p>**被软引用（Soft Reference）关联的对象，只有在 JVM 内存不够的情况下才会被回收。**JVM 会确保在抛出 <code>OutOfMemoryError</code> 之前，清理软引用指向的对象。软引用通常用来实现内存敏感的缓存，如果还有空闲内存，就可以暂时保留缓存，当内存不足时清理掉，这样就保证了使用缓存的同时，不会耗尽内存。</p><p>使用 <code>SoftReference</code> 类来创建软引用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">SoftReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> sf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoftReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
obj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 使对象只被软引用关联</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（3）弱引用</strong></p><p><strong>被弱引用（Weak Reference）关联的对象一定会被垃圾收集器回收，也就是说它只能存活到下一次垃圾收集发生之前。</strong></p><p>使用 <code>WeakReference</code> 类来实现弱引用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> wf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
obj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>WeakHashMap</code> 的 <code>Entry</code> 继承自 <code>WeakReference</code>，主要用来实现缓存。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Tomcat 中的 <code>ConcurrentCache</code> 就使用了 <code>WeakHashMap</code> 来实现缓存功能。<code>ConcurrentCache</code> 采取的是分代缓存，经常使用的对象放入 eden 中，而不常用的对象放入 longterm。eden 使用 <code>ConcurrentHashMap</code> 实现，longterm 使用 <code>WeakHashMap</code>，保证了不常使用的对象容易被回收。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ConcurrentCache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> eden<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> longterm<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ConcurrentCache</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> size<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>eden <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>longterm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">K</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">V</span> v <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>eden<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            v <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>longterm<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>eden<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> v<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> k<span class="token punctuation">,</span> <span class="token class-name">V</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>eden<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>longterm<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>eden<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>eden<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>eden<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（4）虚引用</strong></p><p>又称为幽灵引用或者幻影引用。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用取得一个对象实例。</p><p><strong>为一个对象设置虚引用关联的唯一目的就是能在这个对象被收集器回收时收到一个系统通知。</strong></p><p>使用 <code>PhantomReference</code> 来实现虚引用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">PhantomReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> pf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhantomReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
obj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="调优" tabindex="-1"><a class="header-anchor" href="#调优" aria-hidden="true">#</a> 调优</h2>`,72),c=[p];function o(l,i){return n(),s("div",null,c)}const u=a(t,[["render",o],["__file","index.html.vue"]]);export{u as default};
