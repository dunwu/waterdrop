const t=JSON.parse('{"key":"v-356ab9b2","path":"/pages/25887789/","title":"Java 容器面试二","lang":"zh-CN","frontmatter":{"title":"Java 容器面试二","date":"2024-07-03T07:44:02.000Z","order":5,"permalink":"/pages/25887789/","category":["Java","JavaCore","面试"],"tag":["Java","JavaCore","面试","容器"],"description":"Java 容器面试二 Map 【中等】HashMap 和 Hashtable 有什么区别？ HashMap 更高效且灵活，Hashtable 线程安全但过时，推荐用 ConcurrentHashMap 替代。 对比项 HashMap (JDK 1.2+) Hashtable (JDK 1.0) 线程安全 ❌ 非线程安全（需额外同步） ✅ 线程安全（方法用 synchronized 修饰） 性能 ⚡ 更高（无锁竞争） ⏳ 较低（同步开销） Null 键/值 ✅ 允许 null 键和值 ❌ 不允许 null 迭代器 fail-fast（快速失败，并发修改抛异常） enumerator（不抛异常） 继承体系 继承 AbstractMap 继承 Dictionary（已过时） 初始容量与扩容 默认 16，扩容为 2 倍 默认 11，扩容为 2 倍 + 1 哈希冲突解决 链表 + 红黑树（JDK 8+） 仅链表","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/25887789/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"Java 容器面试二"}],["meta",{"property":"og:description","content":"Java 容器面试二 Map 【中等】HashMap 和 Hashtable 有什么区别？ HashMap 更高效且灵活，Hashtable 线程安全但过时，推荐用 ConcurrentHashMap 替代。 对比项 HashMap (JDK 1.2+) Hashtable (JDK 1.0) 线程安全 ❌ 非线程安全（需额外同步） ✅ 线程安全（方法用 synchronized 修饰） 性能 ⚡ 更高（无锁竞争） ⏳ 较低（同步开销） Null 键/值 ✅ 允许 null 键和值 ❌ 不允许 null 迭代器 fail-fast（快速失败，并发修改抛异常） enumerator（不抛异常） 继承体系 继承 AbstractMap 继承 Dictionary（已过时） 初始容量与扩容 默认 16，扩容为 2 倍 默认 11，扩容为 2 倍 + 1 哈希冲突解决 链表 + 红黑树（JDK 8+） 仅链表"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-16T15:22:44.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"JavaCore"}],["meta",{"property":"article:tag","content":"面试"}],["meta",{"property":"article:tag","content":"容器"}],["meta",{"property":"article:published_time","content":"2024-07-03T07:44:02.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-16T15:22:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 容器面试二\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-03T07:44:02.000Z\\",\\"dateModified\\":\\"2025-09-16T15:22:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"Map","slug":"map","link":"#map","children":[{"level":3,"title":"【中等】HashMap 和 Hashtable 有什么区别？","slug":"【中等】hashmap-和-hashtable-有什么区别","link":"#【中等】hashmap-和-hashtable-有什么区别","children":[]},{"level":3,"title":"【中等】对比一下 HashMap 和 HashSet？","slug":"【中等】对比一下-hashmap-和-hashset","link":"#【中等】对比一下-hashmap-和-hashset","children":[]},{"level":3,"title":"【中等】HashMap、TreeMap、LinkedHashMap 有什么区别？","slug":"【中等】hashmap、treemap、linkedhashmap-有什么区别","link":"#【中等】hashmap、treemap、linkedhashmap-有什么区别","children":[]},{"level":3,"title":"【困难】HashMap 底层实现原理是什么？🌟🌟🌟","slug":"【困难】hashmap-底层实现原理是什么-🌟🌟🌟","link":"#【困难】hashmap-底层实现原理是什么-🌟🌟🌟","children":[]},{"level":3,"title":"【困难】JDK 1.8 对 HashMap 做了哪些改动？🌟🌟🌟","slug":"【困难】jdk-1-8-对-hashmap-做了哪些改动-🌟🌟🌟","link":"#【困难】jdk-1-8-对-hashmap-做了哪些改动-🌟🌟🌟","children":[]},{"level":3,"title":"【困难】HashMap 为什么线程不安全？","slug":"【困难】hashmap-为什么线程不安全","link":"#【困难】hashmap-为什么线程不安全","children":[]},{"level":3,"title":"【中等】WeakHashMap 有什么用？","slug":"【中等】weakhashmap-有什么用","link":"#【中等】weakhashmap-有什么用","children":[]},{"level":3,"title":"【中等】ConcurrentHashMap 和 Hashtable 有什么区别？","slug":"【中等】concurrenthashmap-和-hashtable-有什么区别","link":"#【中等】concurrenthashmap-和-hashtable-有什么区别","children":[]},{"level":3,"title":"【困难】ConcurrentHashMap 的底层实现原理是什么？🌟🌟🌟","slug":"【困难】concurrenthashmap-的底层实现原理是什么-🌟🌟🌟","link":"#【困难】concurrenthashmap-的底层实现原理是什么-🌟🌟🌟","children":[]},{"level":3,"title":"【中等】ConcurrentHashMap 为什么 key 和 value 不能为 null？","slug":"【中等】concurrenthashmap-为什么-key-和-value-不能为-null","link":"#【中等】concurrenthashmap-为什么-key-和-value-不能为-null","children":[]},{"level":3,"title":"【中等】ConcurrentHashMap 能保证复合操作的原子性吗？🌟","slug":"【中等】concurrenthashmap-能保证复合操作的原子性吗-🌟","link":"#【中等】concurrenthashmap-能保证复合操作的原子性吗-🌟","children":[]}]}],"git":{"createdTime":1757980215000,"updatedTime":1758036164000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":2}]},"readingTime":{"minutes":16.93,"words":5080},"filePathRelative":"01.Java/JavaCore/面试/Java_面试_容器（二）.md","localizedDate":"2024年7月3日","excerpt":"<h1> Java 容器面试二</h1>\\n<h2> Map</h2>\\n<h3> 【中等】HashMap 和 Hashtable 有什么区别？</h3>\\n<p><code>HashMap</code> 更高效且灵活，<code>Hashtable</code> 线程安全但过时，推荐用 <code>ConcurrentHashMap</code> 替代。</p>\\n<table>\\n<thead>\\n<tr>\\n<th><strong>对比项</strong></th>\\n<th><strong>HashMap</strong> (JDK 1.2+)</th>\\n<th><strong>Hashtable</strong> (JDK 1.0)</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><strong>线程安全</strong></td>\\n<td>❌ 非线程安全（需额外同步）</td>\\n<td>✅ 线程安全（方法用 <code>synchronized</code> 修饰）</td>\\n</tr>\\n<tr>\\n<td><strong>性能</strong></td>\\n<td>⚡ 更高（无锁竞争）</td>\\n<td>⏳ 较低（同步开销）</td>\\n</tr>\\n<tr>\\n<td><strong>Null 键/值</strong></td>\\n<td>✅ 允许 <code>null</code> 键和值</td>\\n<td>❌ 不允许 <code>null</code></td>\\n</tr>\\n<tr>\\n<td><strong>迭代器</strong></td>\\n<td><strong><code>fail-fast</code></strong>（快速失败，并发修改抛异常）</td>\\n<td><strong><code>enumerator</code></strong>（不抛异常）</td>\\n</tr>\\n<tr>\\n<td><strong>继承体系</strong></td>\\n<td>继承 <code>AbstractMap</code></td>\\n<td>继承 <code>Dictionary</code>（已过时）</td>\\n</tr>\\n<tr>\\n<td><strong>初始容量与扩容</strong></td>\\n<td>默认 16，扩容为 2 倍</td>\\n<td>默认 11，扩容为 2 倍 + 1</td>\\n</tr>\\n<tr>\\n<td><strong>哈希冲突解决</strong></td>\\n<td>链表 + 红黑树（JDK 8+）</td>\\n<td>仅链表</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{t as data};
