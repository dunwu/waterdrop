import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c as l,a as n,b as s,d as e,e as c}from"./app-067f3ea1.js";const i={},u=c(`<h1 id="设计模式之职责链模式" tabindex="-1"><a class="header-anchor" href="#设计模式之职责链模式" aria-hidden="true">#</a> 设计模式之职责链模式</h1><h2 id="意图" tabindex="-1"><a class="header-anchor" href="#意图" aria-hidden="true">#</a> 意图</h2><p><strong>职责链模式</strong>（Chain Of Responsibility） 是一种行为设计模式， 允许你将请求沿着处理者链进行发送。 收到请求后， 每个处理者均可对请求进行处理， 或将其传递给链上的下个处理者。</p><p>使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。<br> 将这个对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。</p><h2 id="适用场景" tabindex="-1"><a class="header-anchor" href="#适用场景" aria-hidden="true">#</a> 适用场景</h2><ul><li>当程序需要使用不同方式处理不同种类请求， 而且请求类型和顺序预先未知时， 可以使用责任链模式。</li><li>当必须按顺序执行多个处理者时， 可以使用该模式。</li><li>如果所需处理者及其顺序必须在运行时进行改变， 可以使用责任链模式。</li></ul><h2 id="结构" tabindex="-1"><a class="header-anchor" href="#结构" aria-hidden="true">#</a> 结构</h2><h3 id="结构说明" tabindex="-1"><a class="header-anchor" href="#结构说明" aria-hidden="true">#</a> 结构说明</h3><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20210520172147.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ol><li><p><strong>处理者</strong> （Handler） 声明了所有具体处理者的通用接口。 该接口通常仅包含单个方法用于请求处理， 但有时其还会包含一个设置链上下个处理者的方法。</p></li><li><p><strong>基础处理者</strong> （Base Handler） 是一个可选的类， 你可以将所有处理者共用的样本代码放置在其中。</p><p>通常情况下， 该类中定义了一个保存对于下个处理者引用的成员变量。 客户端可通过将处理者传递给上个处理者的构造函数或设定方法来创建链。 该类还可以实现默认的处理行为： 确定下个处理者存在后再将请求传递给它。</p></li><li><p><strong>具体处理者</strong> （Concrete Handlers） 包含处理请求的实际代码。 每个处理者接收到请求后， 都必须决定是否进行处理， 以及是否沿着链传递请求。</p><p>处理者通常是独立且不可变的， 需要通过构造函数一次性地获得所有必要地数据。</p></li><li><p><strong>客户端</strong> （Client） 可根据程序逻辑一次性或者动态地生成链。 值得注意的是， 请求可发送给链上的任意一个处理者， 而非必须是第一个处理者。</p></li></ol><h3 id="结构代码范式" tabindex="-1"><a class="header-anchor" href="#结构代码范式" aria-hidden="true">#</a> 结构代码范式</h3><p><strong>Handler</strong> : 定义一个处理请求的接口。（<strong><em>可选的</em></strong>）实现设置后继者的方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token class-name">Handler</span> successor<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">SetSuccesssor</span><span class="token punctuation">(</span><span class="token class-name">Handler</span> successor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>successor <span class="token operator">=</span> successor<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token class-name">HandlerRequest</span><span class="token punctuation">(</span><span class="token keyword">int</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>ConcreteHandler</strong> : 处理它所负责的请求，可以访问它的后继者，如果可处理该请求，就处理之，否则就将请求转发给它的后继者。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">ConcreteHandler1</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">HandlerRequest</span><span class="token punctuation">(</span><span class="token keyword">int</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>request <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> request <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ConcreteHandler1 处理请求 &quot;</span> <span class="token operator">+</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> successor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token namespace">successor<span class="token punctuation">.</span></span>HandlerRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ConcreteHandler2</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">HandlerRequest</span><span class="token punctuation">(</span><span class="token keyword">int</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>request <span class="token operator">&gt;=</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> request <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ConcreteHandler2 处理请求 &quot;</span> <span class="token operator">+</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> successor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token namespace">successor<span class="token punctuation">.</span></span>HandlerRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ConcreteHandler3</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">HandlerRequest</span><span class="token punctuation">(</span><span class="token keyword">int</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>request <span class="token operator">&gt;=</span> <span class="token number">20</span> <span class="token operator">&amp;&amp;</span> request <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ConcreteHandler3 处理请求 &quot;</span> <span class="token operator">+</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> successor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token namespace">successor<span class="token punctuation">.</span></span>HandlerRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Client</strong> : 需要设置一个职责链的各环节对象串联起来。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChainOfResponsibilityPattern</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Handler</span> h1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteHandler1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Handler</span> h2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteHandler2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Handler</span> h3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteHandler3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token namespace">h1<span class="token punctuation">.</span></span>SetSuccesssor</span><span class="token punctuation">(</span>h2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token namespace">h2<span class="token punctuation">.</span></span>SetSuccesssor</span><span class="token punctuation">(</span>h3<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> requests <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> requests<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token namespace">h1<span class="token punctuation">.</span></span>HandlerRequest</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="伪代码" tabindex="-1"><a class="header-anchor" href="#伪代码" aria-hidden="true">#</a> 伪代码</h2><p>在本例中， <strong>责任链</strong>模式负责为活动的 GUI 元素显示上下文帮助信息。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20210520172324.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>应用程序的 GUI 　通常为对象树结构。 例如， 负责渲染程序主窗口的 <code>对话框</code>类就是对象树的根节点。 对话框包含 <code>面板</code> ， 而面板可能包含其他面板， 或是 <code>按钮</code>和 <code>文本框</code>等下层元素。</p><p>只要给一个简单的组件指定帮助文本， 它就可显示简短的上下文提示。 但更复杂的组件可自定义上下文帮助文本的显示方式， 例如显示手册摘录内容或在浏览器中打开一个网页。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20210520172415.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>当用户将鼠标指针移动到某个元素并按下 <code>F1</code>键时， 程序检测到指针下的组件并对其发送帮助请求。 该请求不断向上传递到该元素所有的容器， 直至某个元素能够显示帮助信息。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 处理者接口声明了一个创建处理者链的方法。还声明了一个执行请求的方法。</span>
<span class="token keyword">interface</span> <span class="token class-name">ComponentWithContextualHelp</span> is
    method <span class="token function">showHelp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token comment">// 简单组件的基础类。</span>
<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Component</span> <span class="token keyword">implements</span> <span class="token class-name">ComponentWithContextualHelp</span> is
    field tooltipText<span class="token operator">:</span> string

    <span class="token comment">// 组件容器在处理者链中作为“下一个”链接。</span>
    <span class="token keyword">protected</span> field container<span class="token operator">:</span> <span class="token class-name">Container</span>

    <span class="token comment">// 如果组件设定了帮助文字，那它将会显示提示信息。如果组件没有帮助文字</span>
    <span class="token comment">// 且其容器存在，那它会将调用传递给容器。</span>
    method <span class="token function">showHelp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> is
        <span class="token keyword">if</span> <span class="token punctuation">(</span>tooltipText <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token comment">// 显示提示信息。</span>
        <span class="token keyword">else</span>
            container<span class="token punctuation">.</span><span class="token function">showHelp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token comment">// 容器可以将简单组件和其他容器作为其子项目。链关系将在这里建立。该类将从</span>
<span class="token comment">// 其父类处继承 showHelp（显示帮助）的行为。</span>
<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Container</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> is
    <span class="token keyword">protected</span> field children<span class="token operator">:</span> array of <span class="token class-name">Component</span>

    method <span class="token function">add</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span> is
        children<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span>
        child<span class="token punctuation">.</span>container <span class="token operator">=</span> <span class="token keyword">this</span>


<span class="token comment">// 原始组件应该能够使用帮助操作的默认实现...</span>
<span class="token keyword">class</span> <span class="token class-name">Button</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> is
    <span class="token comment">// ...</span>

<span class="token comment">// 但复杂组件可能会对默认实现进行重写。如果无法以新的方式来提供帮助文字，</span>
<span class="token comment">// 那组件总是还能调用基础实现的（参见 Component 类）。</span>
<span class="token keyword">class</span> <span class="token class-name">Panel</span> <span class="token keyword">extends</span> <span class="token class-name">Container</span> is
    field modalHelpText<span class="token operator">:</span> string

    method <span class="token function">showHelp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> is
        <span class="token keyword">if</span> <span class="token punctuation">(</span>modalHelpText <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token comment">// 显示包含帮助文字的模态窗口。</span>
        <span class="token keyword">else</span>
            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">showHelp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// ...同上...</span>
<span class="token keyword">class</span> <span class="token class-name">Dialog</span> <span class="token keyword">extends</span> <span class="token class-name">Container</span> is
    field wikiPageURL<span class="token operator">:</span> string

    method <span class="token function">showHelp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> is
        <span class="token keyword">if</span> <span class="token punctuation">(</span>wikiPageURL <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token comment">// 打开百科帮助页面。</span>
        <span class="token keyword">else</span>
            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">showHelp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token comment">// 客户端代码。</span>
<span class="token keyword">class</span> <span class="token class-name">Application</span> is
    <span class="token comment">// 每个程序都能以不同方式对链进行配置。</span>
    method <span class="token function">createUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> is
        dialog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dialog</span><span class="token punctuation">(</span><span class="token string">&quot;预算报告&quot;</span><span class="token punctuation">)</span>
        dialog<span class="token punctuation">.</span>wikiPageURL <span class="token operator">=</span> <span class="token string">&quot;http://...&quot;</span>
        panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Panel</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">)</span>
        panel<span class="token punctuation">.</span>modalHelpText <span class="token operator">=</span> <span class="token string">&quot;本面板用于...&quot;</span>
        ok <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">760</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">&quot;确认&quot;</span><span class="token punctuation">)</span>
        ok<span class="token punctuation">.</span>tooltipText <span class="token operator">=</span> <span class="token string">&quot;这是一个确认按钮...&quot;</span>
        cancel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token number">320</span><span class="token punctuation">,</span> <span class="token number">760</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">&quot;取消&quot;</span><span class="token punctuation">)</span>
        <span class="token comment">// ...</span>
        panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ok<span class="token punctuation">)</span>
        panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cancel<span class="token punctuation">)</span>
        dialog<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>panel<span class="token punctuation">)</span>

    <span class="token comment">// 想象这里会发生什么。</span>
    method <span class="token function">onF1KeyPress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> is
        component <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getComponentAtMouseCoords</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        component<span class="token punctuation">.</span><span class="token function">showHelp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="与其他模式的关系" tabindex="-1"><a class="header-anchor" href="#与其他模式的关系" aria-hidden="true">#</a> 与其他模式的关系</h2>`,26),r={href:"https://refactoringguru.cn/design-patterns/chain-of-responsibility",target:"_blank",rel:"noopener noreferrer"},d={href:"https://refactoringguru.cn/design-patterns/command",target:"_blank",rel:"noopener noreferrer"},k={href:"https://refactoringguru.cn/design-patterns/mediator",target:"_blank",rel:"noopener noreferrer"},m={href:"https://refactoringguru.cn/design-patterns/observer",target:"_blank",rel:"noopener noreferrer"},v=n("ul",null,[n("li",null,[n("em",null,"责任链"),s("按照顺序将请求动态传递给一系列的潜在接收者， 直至其中一名接收者对请求进行处理。")]),n("li",null,[n("em",null,"命令"),s("在发送者和请求者之间建立单向连接。")]),n("li",null,[n("em",null,"中介者"),s("清除了发送者和请求者之间的直接连接， 强制它们通过一个中介对象进行间接沟通。")]),n("li",null,[n("em",null,"观察者"),s("允许接收者动态地订阅或取消接收请求。")])],-1),b={href:"https://refactoringguru.cn/design-patterns/chain-of-responsibility",target:"_blank",rel:"noopener noreferrer"},h={href:"https://refactoringguru.cn/design-patterns/composite",target:"_blank",rel:"noopener noreferrer"},g={href:"https://refactoringguru.cn/design-patterns/chain-of-responsibility",target:"_blank",rel:"noopener noreferrer"},f={href:"https://refactoringguru.cn/design-patterns/command",target:"_blank",rel:"noopener noreferrer"},w=n("p",null,[s("还有另外一种实现方式， 那就是请求自身就是一个"),n("em",null,"命令"),s("对象。 在这种情况下， 你可以对由一系列不同上下文连接而成的链执行相同的操作。")],-1),y={href:"https://refactoringguru.cn/design-patterns/chain-of-responsibility",target:"_blank",rel:"noopener noreferrer"},_={href:"https://refactoringguru.cn/design-patterns/decorator",target:"_blank",rel:"noopener noreferrer"},H={href:"https://refactoringguru.cn/design-patterns/chain-of-responsibility",target:"_blank",rel:"noopener noreferrer"},q=n("em",null,"装饰",-1),x=n("h2",{id:"案例",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#案例","aria-hidden":"true"},"#"),s(" 案例")],-1),C=n("p",null,[n("strong",null,"使用示例："),s(" 责任链模式在 Java 程序中并不常见， 因为它仅在代码与对象链打交道时才能发挥作用。")],-1),j=n("p",null,"该模式最流行的使用案例之一是在 GUI 类中将事件向上传递给父组件。 另一个值得注意的使用案例是依次访问过滤器。",-1),R=n("p",null,"下面是该模式在核心 Java 程序库中的一些示例：",-1),S={href:"http://docs.oracle.com/javaee/7/api/javax/servlet/Filter.html#doFilter-javax.servlet.ServletRequest-javax.servlet.ServletResponse-javax.servlet.FilterChain-",target:"_blank",rel:"noopener noreferrer"},F=n("code",null,"javax.servlet.Filter#doFilter()",-1),L={href:"http://docs.oracle.com/javase/8/docs/api/java/util/logging/Logger.html#log-java.util.logging.Level-java.lang.String-",target:"_blank",rel:"noopener noreferrer"},B=n("code",null,"java.util.logging.Logger#log()",-1),P=n("p",null,[n("strong",null,"识别方法："),s(" 该模式可通过一组对象的行为方法间接调用其他对象的相同方法来识别， 而且所有对象都会遵循相同的接口。")],-1),T=n("h2",{id:"参考资料",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考资料","aria-hidden":"true"},"#"),s(" 参考资料")],-1),U={href:"https://book.douban.com/subject/2243615/",target:"_blank",rel:"noopener noreferrer"},I={href:"https://book.douban.com/subject/2334288/",target:"_blank",rel:"noopener noreferrer"},O={href:"https://refactoringguru.cn/design-patterns/catalog",target:"_blank",rel:"noopener noreferrer"};function N(V,z){const a=p("ExternalLinkIcon");return o(),l("div",null,[u,n("ul",null,[n("li",null,[n("p",null,[n("a",r,[s("责任链模式"),e(a)]),s("、 "),n("a",d,[s("命令模式"),e(a)]),s("、 "),n("a",k,[s("中介者模式"),e(a)]),s("和"),n("a",m,[s("观察者模式"),e(a)]),s("用于处理请求发送者和接收者之间的不同连接方式：")]),v]),n("li",null,[n("p",null,[n("a",b,[s("责任链"),e(a)]),s("通常和"),n("a",h,[s("组合模式"),e(a)]),s("结合使用。 在这种情况下， 叶组件接收到请求后， 可以将请求沿包含全体父组件的链一直传递至对象树的底部。")])]),n("li",null,[n("p",null,[n("a",g,[s("责任链"),e(a)]),s("的管理者可使用"),n("a",f,[s("命令模式"),e(a)]),s("实现。 在这种情况下， 你可以对由请求代表的同一个上下文对象执行许多不同的操作。")]),w]),n("li",null,[n("p",null,[n("a",y,[s("责任链"),e(a)]),s("和"),n("a",_,[s("装饰模式"),e(a)]),s("的类结构非常相似。 两者都依赖递归组合将需要执行的操作传递给一系列对象。 但是， 两者有几点重要的不同之处。")]),n("p",null,[n("a",H,[s("责任链"),e(a)]),s("的管理者可以相互独立地执行一切操作， 还可以随时停止传递请求。 另一方面， 各种"),q,s("可以在遵循基本接口的情况下扩展对象的行为。 此外， 装饰无法中断请求的传递。")])])]),x,C,j,R,n("ul",null,[n("li",null,[n("a",S,[F,e(a)])]),n("li",null,[n("a",L,[B,e(a)])])]),P,T,n("ul",null,[n("li",null,[n("a",U,[s("《Head First 设计模式》"),e(a)])]),n("li",null,[n("a",I,[s("《大话设计模式》"),e(a)])]),n("li",null,[n("a",O,[s("设计模式教程"),e(a)])])])])}const A=t(i,[["render",N],["__file","index.html.vue"]]);export{A as default};
