import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as c,c as l,a as n,b as s,d as e,e as t}from"./app-a70a1432.js";const i={},r=t(`<h1 id="网络技术之-websocket" tabindex="-1"><a class="header-anchor" href="#网络技术之-websocket" aria-hidden="true">#</a> 网络技术之 WebSocket</h1><h2 id="socket" tabindex="-1"><a class="header-anchor" href="#socket" aria-hidden="true">#</a> Socket</h2><p>Socket 作为一种抽象层，应用程序通过它来发送和接收数据，使用 Socket 可以将应用程序与处于同一网络中的其他应用程序进行通信交互。简而言之，Socket 提供了应用程序内部与外界通信的端口以及为通信双方提供了数据传输的通道。</p><h3 id="socket-用法" tabindex="-1"><a class="header-anchor" href="#socket-用法" aria-hidden="true">#</a> Socket 用法</h3><p>很多编程语言都支持 Socket。这里以 Java 的 Socket 用法为例。</p><p>在 Java 的 SDK 中，socket 的共有两个接口：用于监听客户连接的 <code>ServerSocket</code> 和用于通信的 <code>Socket</code>。使用 socket 的步骤如下：</p><ul><li>创建 <code>ServerSocket</code> 并监听客户连接</li><li>使用 <code>Socket</code> 连接服务端</li><li>通过 <code>Socket</code> 获取输入输出流进行通信</li></ul><h3 id="socket-长连接" tabindex="-1"><a class="header-anchor" href="#socket-长连接" aria-hidden="true">#</a> Socket 长连接</h3><p>Socket 长连接，指的是在客户和服务端之间保持一个 socket 连接长时间不断开。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>socket.setKeepAlive(true);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="websocket" tabindex="-1"><a class="header-anchor" href="#websocket" aria-hidden="true">#</a> WebSocket</h2><h3 id="websocket-简介" tabindex="-1"><a class="header-anchor" href="#websocket-简介" aria-hidden="true">#</a> WebSocket 简介</h3><h4 id="websocket-是什么" tabindex="-1"><a class="header-anchor" href="#websocket-是什么" aria-hidden="true">#</a> WebSocket 是什么</h4>`,13),u={href:"http://websocket.org/",target:"_blank",rel:"noopener noreferrer"},d={href:"https://tools.ietf.org/html/rfc6455",target:"_blank",rel:"noopener noreferrer"},k=t(`<p>WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。</p><h4 id="为什么需要-websocket" tabindex="-1"><a class="header-anchor" href="#为什么需要-websocket" aria-hidden="true">#</a> 为什么需要 WebSocket</h4><p>了解计算机网络协议的人，应该都知道：HTTP 协议是一种无状态的、无连接的、单向的应用层协议。它采用了请求/响应模型。通信请求只能由客户端发起，服务端对请求做出应答处理。</p><p>这种通信模型有一个弊端：HTTP 协议无法实现服务器主动向客户端发起消息。</p><p>这种单向请求的特点，注定了如果服务器有连续的状态变化，客户端要获知就非常麻烦。大多数 Web 应用程序将通过频繁的异步 JavaScript 和 XML（AJAX）请求实现长轮询。轮询的效率低，非常浪费资源（因为必须不停连接，或者 HTTP 连接始终打开）。</p><p><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/java/spring/web/ajax-long-polling.png" alt="img" loading="lazy"><br> 因此，工程师们一直在思考，有没有更好的方法。WebSocket 就是这样发明的。WebSocket 连接允许客户端和服务器之间进行全双工通信，以便任一方都可以通过建立的连接将数据推送到另一端。WebSocket 只需要建立一次连接，就可以一直保持连接状态。这相比于轮询方式的不停建立连接显然效率要大大提高。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/java/spring/web/websockets-flow.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="websocket-如何工作" tabindex="-1"><a class="header-anchor" href="#websocket-如何工作" aria-hidden="true">#</a> WebSocket 如何工作</h4><p>Web 浏览器和服务器都必须实现 WebSockets 协议来建立和维护连接。由于 WebSockets 连接长期存在，与典型的 HTTP 连接不同，对服务器有重要的影响。</p><p>基于多线程或多进程的服务器无法适用于 WebSockets，因为它旨在打开连接，尽可能快地处理请求，然后关闭连接。任何实际的 WebSockets 服务器端实现都需要一个异步服务器。</p><h3 id="websocket-使用" tabindex="-1"><a class="header-anchor" href="#websocket-使用" aria-hidden="true">#</a> WebSocket 使用</h3><h4 id="websocket-客户端" tabindex="-1"><a class="header-anchor" href="#websocket-客户端" aria-hidden="true">#</a> WebSocket 客户端</h4><p>在客户端，没有必要为 WebSockets 使用 JavaScript 库。实现 WebSockets 的 Web 浏览器将通过 WebSockets 对象公开所有必需的客户端功能（主要指支持 Html5 的浏览器）。</p><p>以下 API 用于创建 WebSocket 对象。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>var Socket = new WebSocket(url, [protocol] );
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以上代码中的第一个参数 url, 指定连接的 URL。第二个参数 protocol 是可选的，指定了可接受的子协议。</p><h5 id="websocket-属性" tabindex="-1"><a class="header-anchor" href="#websocket-属性" aria-hidden="true">#</a> WebSocket 属性</h5><p>以下是 WebSocket 对象的属性。假定我们使用了以上代码创建了 Socket 对象：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>Socket.readyState</td><td>只读属性 <strong>readyState</strong> 表示连接状态，可以是以下值：0 - 表示连接尚未建立。1 - 表示连接已建立，可以进行通信。2 - 表示连接正在进行关闭。3 - 表示连接已经关闭或者连接不能打开。</td></tr><tr><td>Socket.bufferedAmount</td><td>只读属性 <strong>bufferedAmount</strong> 已被 send() 放入正在队列中等待传输，但是还没有发出的 UTF-8 文本字节数。</td></tr></tbody></table><h5 id="websocket-事件" tabindex="-1"><a class="header-anchor" href="#websocket-事件" aria-hidden="true">#</a> WebSocket 事件</h5><p>以下是 WebSocket 对象的相关事件。假定我们使用了以上代码创建了 Socket 对象：</p><table><thead><tr><th>事件</th><th>事件处理程序</th><th>描述</th></tr></thead><tbody><tr><td>open</td><td>Socket.onopen</td><td>连接建立时触发</td></tr><tr><td>message</td><td>Socket.onmessage</td><td>客户端接收服务端数据时触发</td></tr><tr><td>error</td><td>Socket.onerror</td><td>通信发生错误时触发</td></tr><tr><td>close</td><td>Socket.onclose</td><td>连接关闭时触发</td></tr></tbody></table><h5 id="websocket-方法" tabindex="-1"><a class="header-anchor" href="#websocket-方法" aria-hidden="true">#</a> WebSocket 方法</h5><p>以下是 WebSocket 对象的相关方法。假定我们使用了以上代码创建了 Socket 对象：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>Socket.send()</td><td>使用连接发送数据</td></tr><tr><td>Socket.close()</td><td>关闭连接</td></tr></tbody></table><p>WebSocket 客户端代码示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 初始化一个 WebSocket 对象</span>
<span class="token keyword">var</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">&#39;ws://localhost:9998/echo&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 建立 web socket 连接成功触发事件</span>
ws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 使用 send() 方法发送数据</span>
  ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;发送数据&#39;</span><span class="token punctuation">)</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;数据发送中...&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 接收服务端数据时触发事件</span>
ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> received_msg <span class="token operator">=</span> evt<span class="token punctuation">.</span>data
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;数据已接收...&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 断开 web socket 连接成功触发事件</span>
ws<span class="token punctuation">.</span><span class="token function-variable function">onclose</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;连接已关闭...&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="websocket-服务端" tabindex="-1"><a class="header-anchor" href="#websocket-服务端" aria-hidden="true">#</a> WebSocket 服务端</h4><p>WebSocket 在服务端的实现非常丰富。Node.js、Java、C++、Python 等多种语言都有自己的解决方案。</p><p>以下，介绍我在学习 WebSocket 过程中接触过的 WebSocket 服务端解决方案。</p><h5 id="node-js" tabindex="-1"><a class="header-anchor" href="#node-js" aria-hidden="true">#</a> Node.js</h5><p>常用的 Node 实现有以下三种。</p>`,32),v={href:"https://github.com/uWebSockets/uWebSockets",target:"_blank",rel:"noopener noreferrer"},b={href:"http://socket.io/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/theturtle32/WebSocket-Node",target:"_blank",rel:"noopener noreferrer"},g=n("h5",{id:"java",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#java","aria-hidden":"true"},"#"),s(" Java")],-1),h=n("p",null,"Java 的 web 一般都依托于 servlet 容器。",-1),w=n("p",null,"我使用过的 servlet 容器有：Tomcat、Jetty、Resin。其中 Tomcat7、Jetty7 及以上版本均开始支持 WebSocket（推荐较新的版本，因为随着版本的更迭，对 WebSocket 的支持可能有变更）。",-1),f=n("p",null,"此外，Spring 框架对 WebSocket 也提供了支持。",-1),S={href:"https://tools.ietf.org/html/rfc6455",target:"_blank",rel:"noopener noreferrer"},_={href:"http://www.jcp.org/en/jsr/detail?id=356",target:"_blank",rel:"noopener noreferrer"},y=t(`<h5 id="spring" tabindex="-1"><a class="header-anchor" href="#spring" aria-hidden="true">#</a> Spring</h5><p>Spring 对于 WebSocket 的支持基于下面的 jar 包：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-websocket<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Spring 实现 WebSocket 服务器大概分为以下几步：</p><p><strong>创建 WebSocket 处理器</strong></p><p>扩展 <code>TextWebSocketHandler</code> 或 <code>BinaryWebSocketHandler</code> ，你可以覆写指定的方法。Spring 在收到 WebSocket 事件时，会自动调用事件对应的方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>socket<span class="token punctuation">.</span></span><span class="token class-name">WebSocketHandler</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>socket<span class="token punctuation">.</span></span><span class="token class-name">WebSocketSession</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>socket<span class="token punctuation">.</span></span><span class="token class-name">TextMessage</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyHandler</span> <span class="token keyword">extends</span> <span class="token class-name">TextWebSocketHandler</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleTextMessage</span><span class="token punctuation">(</span><span class="token class-name">WebSocketSession</span> session<span class="token punctuation">,</span> <span class="token class-name">TextMessage</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>WebSocketHandler</code> 源码如下，这意味着你的处理器大概可以处理哪些 WebSocket 事件：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">WebSocketHandler</span> <span class="token punctuation">{</span>

   <span class="token doc-comment comment">/**
    * 建立连接后触发的回调
    */</span>
   <span class="token keyword">void</span> <span class="token function">afterConnectionEstablished</span><span class="token punctuation">(</span><span class="token class-name">WebSocketSession</span> session<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>

   <span class="token doc-comment comment">/**
    * 收到消息时触发的回调
    */</span>
   <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token class-name">WebSocketSession</span> session<span class="token punctuation">,</span> <span class="token class-name">WebSocketMessage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> message<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>

   <span class="token doc-comment comment">/**
    * 传输消息出错时触发的回调
    */</span>
   <span class="token keyword">void</span> <span class="token function">handleTransportError</span><span class="token punctuation">(</span><span class="token class-name">WebSocketSession</span> session<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> exception<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>

   <span class="token doc-comment comment">/**
    * 断开连接后触发的回调
    */</span>
   <span class="token keyword">void</span> <span class="token function">afterConnectionClosed</span><span class="token punctuation">(</span><span class="token class-name">WebSocketSession</span> session<span class="token punctuation">,</span> <span class="token class-name">CloseStatus</span> closeStatus<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>

   <span class="token doc-comment comment">/**
    * 是否处理分片消息
    */</span>
   <span class="token keyword">boolean</span> <span class="token function">supportsPartialMessages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>配置 WebSocket</strong></p><p>配置有两种方式：注解和 xml 。其作用就是将 WebSocket 处理器添加到注册中心。</p><ol><li>实现 <code>WebSocketConfigurer</code></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">EnableWebSocket</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebSocketConfigurer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebSocketHandlerRegistry</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableWebSocket</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebSocketConfigurer</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerWebSocketHandlers</span><span class="token punctuation">(</span><span class="token class-name">WebSocketHandlerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        registry<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span><span class="token function">myHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;/myHandler&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">WebSocketHandler</span> <span class="token function">myHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>xml 方式</li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name"><span class="token namespace">xmlns:</span>websocket</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/websocket<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/websocket
        http://www.springframework.org/schema/websocket/spring-websocket.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">websocket:</span>handlers</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">websocket:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/myHandler<span class="token punctuation">&quot;</span></span> <span class="token attr-name">handler</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myHandler<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">websocket:</span>handlers</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myHandler<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.samples.MyHandler<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),x={href:"https://docs.spring.io/spring/docs/4.3.12.RELEASE/spring-framework-reference/htmlsingle/#websocket",target:"_blank",rel:"noopener noreferrer"},W=t(`<p>javax.websocket</p><p>如果不想使用 Spring 框架的 WebSocket API，你也可以选择基本的 javax.websocket。</p><p>首先，需要引入 API jar 包。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;!-- To write basic javax.websocket against --&gt;
&lt;dependency&gt;
  &lt;groupId&gt;javax.websocket&lt;/groupId&gt;
  &lt;artifactId&gt;javax.websocket-api&lt;/artifactId&gt;
  &lt;version&gt;1.0&lt;/version&gt;
&lt;/dependency&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果使用嵌入式 jetty，你还需要引入它的实现包：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- To run javax.websocket in embedded server --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.eclipse.jetty.websocket<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>javax-websocket-server-impl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${jetty-version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- To run javax.websocket client --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.eclipse.jetty.websocket<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>javax-websocket-client-impl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${jetty-version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>@ServerEndpoint</strong></p><p>这个注解用来标记一个类是 WebSocket 的处理器。</p><p>然后，你可以在这个类中使用下面的注解来表明所修饰的方法是触发事件的回调</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 收到消息触发事件</span>
<span class="token annotation punctuation">@OnMessage</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token class-name">Session</span> session<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token comment">// 打开连接触发事件</span>
<span class="token annotation punctuation">@OnOpen</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onOpen</span><span class="token punctuation">(</span><span class="token class-name">Session</span> session<span class="token punctuation">,</span> <span class="token class-name">EndpointConfig</span> config<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathParam</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token comment">// 关闭连接触发事件</span>
<span class="token annotation punctuation">@OnClose</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClose</span><span class="token punctuation">(</span><span class="token class-name">Session</span> session<span class="token punctuation">,</span> <span class="token class-name">CloseReason</span> closeReason<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token comment">// 传输消息错误触发事件</span>
<span class="token annotation punctuation">@OnError</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>ServerEndpointConfig.Configurator</strong></p><p>编写完处理器，你需要扩展 ServerEndpointConfig.Configurator 类完成配置：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketServerConfigurator</span> <span class="token keyword">extends</span> <span class="token class-name">ServerEndpointConfig<span class="token punctuation">.</span>Configurator</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">modifyHandshake</span><span class="token punctuation">(</span><span class="token class-name">ServerEndpointConfig</span> sec<span class="token punctuation">,</span> <span class="token class-name">HandshakeRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HandshakeResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">HttpSession</span> httpSession <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpSession</span><span class="token punctuation">)</span> request<span class="token punctuation">.</span><span class="token function">getHttpSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sec<span class="token punctuation">.</span><span class="token function">getUserProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">HttpSession</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> httpSession<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后就没有然后了，就是这么简单。</p><h4 id="websocket-代理" tabindex="-1"><a class="header-anchor" href="#websocket-代理" aria-hidden="true">#</a> WebSocket 代理</h4><p>如果把 WebSocket 的通信看成是电话连接，Nginx 的角色则像是电话接线员，负责将发起电话连接的电话转接到指定的客服。</p>`,16),j={href:"http://nginx.com/blog/websocket-nginx/",target:"_blank",rel:"noopener noreferrer"},H=t(`<p>以下为参考配置：</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>
  <span class="token comment"># this section is specific to the WebSockets proxying</span>
  <span class="token directive"><span class="token keyword">location</span> /socket.io</span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">proxy_pass</span> http://app_server_wsgiapp/socket.io</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">proxy_redirect</span> <span class="token boolean">off</span></span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">proxy_set_header</span> Host <span class="token variable">$host</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Real-IP <span class="token variable">$remote_addr</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span></span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">proxy_http_version</span> 1.1</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">proxy_set_header</span> Upgrade <span class="token variable">$http_upgrade</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">proxy_set_header</span> Connection <span class="token string">&quot;upgrade&quot;</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">proxy_read_timeout</span> <span class="token number">600</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),q={href:"http://nginx.org/en/docs/http/websocket.html",target:"_blank",rel:"noopener noreferrer"},T=n("h4",{id:"websocket-应用示例",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#websocket-应用示例","aria-hidden":"true"},"#"),s(" WebSocket 应用示例")],-1),I=n("p",null,"如果需要完整示例代码，可以参考我的 Github 代码：",-1),C={href:"https://github.com/dunwu/spring-notes/tree/master/codes/web/websocket",target:"_blank",rel:"noopener noreferrer"},E={href:"https://github.com/dunwu/javaee-notes/tree/master/codes/websocket",target:"_blank",rel:"noopener noreferrer"},P=t('<p>spring-websocket 和 jetty 9.3 版本似乎存在兼容性问题，Tomcat 则木有问题。</p><p>我尝试了好几次，没有找到解决方案，只好使用 Jetty 官方的嵌入式示例在 Jetty 中使用 WebSocket 。</p><h2 id="faq" tabindex="-1"><a class="header-anchor" href="#faq" aria-hidden="true">#</a> FAQ</h2><h3 id="http-vs-socket" tabindex="-1"><a class="header-anchor" href="#http-vs-socket" aria-hidden="true">#</a> Http vs. Socket</h3><p>Http 通信与 Socket 通信方式有何差异？</p><ul><li>Http <ul><li>基于请求/响应模式，采取一问一答方式（客户端请求，服务端才会响应）</li></ul></li><li>Socket <ul><li>客户端和服务端建立双向连接。连接成功后，任意一方都可主动发送消息。</li><li>数据丢失率低，使用简单，易于移植。</li></ul></li></ul><h3 id="http-和-websocket-有什么关系" tabindex="-1"><a class="header-anchor" href="#http-和-websocket-有什么关系" aria-hidden="true">#</a> HTTP 和 WebSocket 有什么关系？</h3><p>Websocket 其实是一个新协议，跟 HTTP 协议基本没有关系，只是为了兼容现有浏览器的握手规范而已，也就是说它是 HTTP 协议上的一种补充。</p><h3 id="html-和-http-有什么关系" tabindex="-1"><a class="header-anchor" href="#html-和-http-有什么关系" aria-hidden="true">#</a> Html 和 HTTP 有什么关系？</h3><p>Html 是超文本标记语言，是一种用于创建网页的标准标记语言。它是一种技术标准。Html5 是它的最新版本。</p><p>Http 是一种网络通信协议。其本身和 Html 没有直接关系。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>',12),J={href:"https://www.zhihu.com/question/20215561",target:"_blank",rel:"noopener noreferrer"},N={href:"http://www.ruanyifeng.com/blog/2017/05/websocket.html",target:"_blank",rel:"noopener noreferrer"},M={href:"https://www.fullstackpython.com/websockets.html",target:"_blank",rel:"noopener noreferrer"},A=n("em",null,"fullstackpython",-1),R={href:"http://nginx.org/en/docs/http/websocket.html",target:"_blank",rel:"noopener noreferrer"},O={href:"https://docs.spring.io/spring/docs/4.3.12.RELEASE/spring-framework-reference/htmlsingle/#websocket",target:"_blank",rel:"noopener noreferrer"},L={href:"http://tomcat.apache.org/tomcat-7.0-doc/web-socket-howto.html",target:"_blank",rel:"noopener noreferrer"},$={href:"https://www.eclipse.org/jetty/documentation/9.4.7.v20170914/websocket-intro.html",target:"_blank",rel:"noopener noreferrer"},F={href:"https://juejin.im/post/57f885370bd1d00058b37d74",target:"_blank",rel:"noopener noreferrer"},B={href:"https://juejin.im/post/5b3649d751882552f052703b",target:"_blank",rel:"noopener noreferrer"};function X(U,V){const a=p("ExternalLinkIcon");return c(),l("div",null,[r,n("p",null,[n("a",u,[s("WebSocket"),e(a)]),s(" 是一种网络通信协议。"),n("a",d,[s("RFC6455"),e(a)]),s(" 定义了它的通信标准。")]),k,n("ul",null,[n("li",null,[n("a",v,[s("µWebSockets"),e(a)])]),n("li",null,[n("a",b,[s("Socket.IO"),e(a)])]),n("li",null,[n("a",m,[s("WebSocket-Node"),e(a)])])]),g,h,w,f,n("p",null,[s("虽然，以上应用对于 WebSocket 都有各自的实现。但是，它们都遵循"),n("a",S,[s("RFC6455"),e(a)]),s(" 的通信标准，并且 Java API 统一遵循 "),n("a",_,[s("JSR 356 - JavaTM API for WebSocket "),e(a)]),s(" 规范。所以，在实际编码中，API 差异不大。")]),y,n("blockquote",null,[n("p",null,[s("更多配置细节可以参考："),n("a",x,[s("Spring WebSocket 文档"),e(a)])])]),W,n("p",null,[s("Nginx 从 "),n("a",j,[s("1.3 版"),e(a)]),s("开始正式支持 WebSocket 代理。如果你的 web 应用使用了代理服务器 Nginx，那么你还需要为 Nginx 做一些配置，使得它开启 WebSocket 代理功能。")]),H,n("blockquote",null,[n("p",null,[s("更多配置细节可以参考："),n("a",q,[s("Nginx 官方的 websocket 文档"),e(a)])])]),T,I,n("ul",null,[n("li",null,[n("a",C,[s("Spring 对 WebSocket 支持的示例"),e(a)])]),n("li",null,[n("a",E,[s("嵌入式 Jetty 服务器的 WebSocket 示例"),e(a)])])]),P,n("ul",null,[n("li",null,[n("a",J,[s("知乎高票答案——WebSocket 是什么原理"),e(a)]),s(" - 对 WebSocket 原理的阐述简单易懂。")]),n("li",null,[n("a",N,[s("WebSocket 教程"),e(a)]),s(" - 阮一峰大神的科普一如既往的浅显易懂。")]),n("li",null,[n("a",M,[s("WebSockets"),e(a)]),s(" - by "),A]),n("li",null,[n("a",R,[s("Nginx 官方的 websocket 文档"),e(a)])]),n("li",null,[n("a",O,[s("Spring WebSocket 文档"),e(a)])]),n("li",null,[n("a",L,[s("Tomcat7 WebSocket 文档"),e(a)])]),n("li",null,[n("a",$,[s("Jetty WebSocket 文档"),e(a)])]),n("li",null,[n("a",F,[s("Socket，你需要知道的事儿"),e(a)])]),n("li",null,[n("a",B,[s("手把手教你写 Socket 长连接"),e(a)])])])])}const D=o(i,[["render",X],["__file","index.html.vue"]]);export{D as default};
