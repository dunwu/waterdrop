const l=JSON.parse('{"key":"v-5841fe9b","path":"/pages/cf957091/","title":"MySQL 面试","lang":"zh-CN","frontmatter":{"icon":"logos:mysql","title":"MySQL 面试","cover":"https://raw.githubusercontent.com/dunwu/images/master/snap/202503110803916.jpg","date":"2020-09-12T10:43:53.000Z","permalink":"/pages/cf957091/","category":["数据库","关系型数据库","mysql"],"tag":["数据库","关系型数据库","mysql","面试"],"description":"MySQL 面试 关系数据库综合 【基础】什么是范式？什么是反范式？ 要点 数据库规范化，又称“范式”，是数据库设计的指导理论。范式的目标是：使数据库结构更合理，消除存储异常，使数据冗余尽量小，增进数据的一致性。 根据约束程度从低到高有：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）等等。 1NF 要求所有属性都不可再分解。 2NF 要求不存在部分依赖。 3NF 要求不存在传递依赖。 反范式，顾名思义，与范式的目标正好相反。范式的目标是消除冗余；反范式的目标是冗余以提高查询效率。 范式并非越严格越好，现代数据库设计，一般最多满足 3NF。范式越高意味着表的划分更细，一个数据库中需要的表也就越多，用户不得不将原本相关联的数据分摊到多个表中。当用户同时需要这些数据时只能通过关联表的形式将数据重新合并在一起。同时把多个表联接在一起的花费是巨大的，尤其是当需要连接的两张或者多张表数据非常庞大的时候，表连接操作几乎是一个噩梦，这严重地降低了系统运行性能。因此，有时为了提高查询效率，有必要适当的冗余数据，以达到空间换时间的目的——这就是“反范式”。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/cf957091/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"MySQL 面试"}],["meta",{"property":"og:description","content":"MySQL 面试 关系数据库综合 【基础】什么是范式？什么是反范式？ 要点 数据库规范化，又称“范式”，是数据库设计的指导理论。范式的目标是：使数据库结构更合理，消除存储异常，使数据冗余尽量小，增进数据的一致性。 根据约束程度从低到高有：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）等等。 1NF 要求所有属性都不可再分解。 2NF 要求不存在部分依赖。 3NF 要求不存在传递依赖。 反范式，顾名思义，与范式的目标正好相反。范式的目标是消除冗余；反范式的目标是冗余以提高查询效率。 范式并非越严格越好，现代数据库设计，一般最多满足 3NF。范式越高意味着表的划分更细，一个数据库中需要的表也就越多，用户不得不将原本相关联的数据分摊到多个表中。当用户同时需要这些数据时只能通过关联表的形式将数据重新合并在一起。同时把多个表联接在一起的花费是巨大的，尤其是当需要连接的两张或者多张表数据非常庞大的时候，表连接操作几乎是一个噩梦，这严重地降低了系统运行性能。因此，有时为了提高查询效率，有必要适当的冗余数据，以达到空间换时间的目的——这就是“反范式”。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/dunwu/images/master/snap/202503110803916.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-05T00:20:14.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"MySQL 面试"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"数据库"}],["meta",{"property":"article:tag","content":"关系型数据库"}],["meta",{"property":"article:tag","content":"mysql"}],["meta",{"property":"article:tag","content":"面试"}],["meta",{"property":"article:published_time","content":"2020-09-12T10:43:53.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-05T00:20:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MySQL 面试\\",\\"image\\":[\\"https://raw.githubusercontent.com/dunwu/images/master/snap/202503110803916.jpg\\"],\\"datePublished\\":\\"2020-09-12T10:43:53.000Z\\",\\"dateModified\\":\\"2025-06-05T00:20:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"关系数据库综合","slug":"关系数据库综合","link":"#关系数据库综合","children":[{"level":3,"title":"【基础】什么是范式？什么是反范式？","slug":"【基础】什么是范式-什么是反范式","link":"#【基础】什么是范式-什么是反范式","children":[]},{"level":3,"title":"【基础】为什么不推荐使用存储过程？","slug":"【基础】为什么不推荐使用存储过程","link":"#【基础】为什么不推荐使用存储过程","children":[]}]},{"level":2,"title":"MySQL CRUD","slug":"mysql-crud","link":"#mysql-crud","children":[{"level":3,"title":"【中级】如何避免重复插入数据？","slug":"【中级】如何避免重复插入数据","link":"#【中级】如何避免重复插入数据","children":[]},{"level":3,"title":"【基础】EXISTS 和 IN 有什么区别？","slug":"【基础】exists-和-in-有什么区别","link":"#【基础】exists-和-in-有什么区别","children":[]},{"level":3,"title":"【基础】UNION 和 UNION ALL 有什么区别？","slug":"【基础】union-和-union-all-有什么区别","link":"#【基础】union-和-union-all-有什么区别","children":[]},{"level":3,"title":"【基础】JOIN 有哪些类型？","slug":"【基础】join-有哪些类型","link":"#【基础】join-有哪些类型","children":[]},{"level":3,"title":"【中级】为什么不推荐多表 JOIN？","slug":"【中级】为什么不推荐多表-join","link":"#【中级】为什么不推荐多表-join","children":[]},{"level":3,"title":"【中级】DELETE、DROP 和 TRUNCATE 有什么区别？","slug":"【中级】delete、drop-和-truncate-有什么区别","link":"#【中级】delete、drop-和-truncate-有什么区别","children":[]},{"level":3,"title":"【中级】哪种 COUNT 性能最好？","slug":"【中级】哪种-count-性能最好","link":"#【中级】哪种-count-性能最好","children":[]}]},{"level":2,"title":"MySQL 数据类型","slug":"mysql-数据类型","link":"#mysql-数据类型","children":[{"level":3,"title":"【基础】CHAR 和 VARCHAR 的区别是什么？","slug":"【基础】char-和-varchar-的区别是什么","link":"#【基础】char-和-varchar-的区别是什么","children":[]},{"level":3,"title":"【基础】金额数据用什么类型存储？","slug":"【基础】金额数据用什么类型存储","link":"#【基础】金额数据用什么类型存储","children":[]},{"level":3,"title":"【基础】如何存储 emoji 😃？","slug":"【基础】如何存储-emoji-😃","link":"#【基础】如何存储-emoji-😃","children":[]},{"level":3,"title":"【基础】时间数据选择 DATETIME 还是 TIMESTAMP？","slug":"【基础】时间数据选择-datetime-还是-timestamp","link":"#【基础】时间数据选择-datetime-还是-timestamp","children":[]}]},{"level":2,"title":"MySQL 存储","slug":"mysql-存储","link":"#mysql-存储","children":[{"level":3,"title":"【中级】MySQL 支持哪些存储引擎？","slug":"【中级】mysql-支持哪些存储引擎","link":"#【中级】mysql-支持哪些存储引擎","children":[]},{"level":3,"title":"【中级】InnoDB 和 MyISAM 有哪些差异？","slug":"【中级】innodb-和-myisam-有哪些差异","link":"#【中级】innodb-和-myisam-有哪些差异","children":[]},{"level":3,"title":"【中级】如何选择存储引擎？","slug":"【中级】如何选择存储引擎","link":"#【中级】如何选择存储引擎","children":[]},{"level":3,"title":"【中级】MySQL 有哪些物理存储文件？","slug":"【中级】mysql-有哪些物理存储文件","link":"#【中级】mysql-有哪些物理存储文件","children":[]},{"level":3,"title":"【中级】什么是 Buffer Pool？","slug":"【中级】什么是-buffer-pool","link":"#【中级】什么是-buffer-pool","children":[]},{"level":3,"title":"【中级】什么是 Change Buffer？","slug":"【中级】什么是-change-buffer","link":"#【中级】什么是-change-buffer","children":[]}]},{"level":2,"title":"MySQL 日志","slug":"mysql-日志","link":"#mysql-日志","children":[{"level":3,"title":"【基础】MySQL 有哪些类型的日志？","slug":"【基础】mysql-有哪些类型的日志","link":"#【基础】mysql-有哪些类型的日志","children":[]},{"level":3,"title":"【基础】bin log 和 redo log 有什么区别？","slug":"【基础】bin-log-和-redo-log-有什么区别","link":"#【基础】bin-log-和-redo-log-有什么区别","children":[]},{"level":3,"title":"【基础】redo log 如何刷盘？","slug":"【基础】redo-log-如何刷盘","link":"#【基础】redo-log-如何刷盘","children":[]},{"level":3,"title":"【中级】日志为什么要两阶段提交？","slug":"【中级】日志为什么要两阶段提交","link":"#【中级】日志为什么要两阶段提交","children":[]},{"level":3,"title":"【中级】什么是 WAL？","slug":"【中级】什么是-wal","link":"#【中级】什么是-wal","children":[]}]},{"level":2,"title":"MySQL 复制","slug":"mysql-复制","link":"#mysql-复制","children":[{"level":3,"title":"【中级】MySQL 如何实现主从同步？","slug":"【中级】mysql-如何实现主从同步","link":"#【中级】mysql-如何实现主从同步","children":[]},{"level":3,"title":"【中级】如何处理 MySQL 主从同步延迟？","slug":"【中级】如何处理-mysql-主从同步延迟","link":"#【中级】如何处理-mysql-主从同步延迟","children":[]},{"level":3,"title":"【中级】如何实现 MySQL 读写分离？","slug":"【中级】如何实现-mysql-读写分离","link":"#【中级】如何实现-mysql-读写分离","children":[]}]},{"level":2,"title":"MySQL 分库分表","slug":"mysql-分库分表","link":"#mysql-分库分表","children":[{"level":3,"title":"【中级】什么是分库分表？为何要分库分表？","slug":"【中级】什么是分库分表-为何要分库分表","link":"#【中级】什么是分库分表-为何要分库分表","children":[]},{"level":3,"title":"【中级】分库分表有哪些策略？","slug":"【中级】分库分表有哪些策略","link":"#【中级】分库分表有哪些策略","children":[]},{"level":3,"title":"【高级】分库分表存在哪些问题？","slug":"【高级】分库分表存在哪些问题","link":"#【高级】分库分表存在哪些问题","children":[]},{"level":3,"title":"【高级】如何实现迁库和扩容？","slug":"【高级】如何实现迁库和扩容","link":"#【高级】如何实现迁库和扩容","children":[]}]},{"level":2,"title":"MySQL 优化","slug":"mysql-优化","link":"#mysql-优化","children":[{"level":3,"title":"【基础】如何发现慢 SQL？","slug":"【基础】如何发现慢-sql","link":"#【基础】如何发现慢-sql","children":[]},{"level":3,"title":"【基础】什么是执行计划？","slug":"【基础】什么是执行计划","link":"#【基础】什么是执行计划","children":[]},{"level":3,"title":"【基础】如何分析执行计划？","slug":"【基础】如何分析执行计划","link":"#【基础】如何分析执行计划","children":[]},{"level":3,"title":"【中级】如何优化 SQL？","slug":"【中级】如何优化-sql","link":"#【中级】如何优化-sql","children":[]},{"level":3,"title":"【中级】MySQL 中如何解决深分页问题？","slug":"【中级】mysql-中如何解决深分页问题","link":"#【中级】mysql-中如何解决深分页问题","children":[]}]},{"level":2,"title":"MySQL 架构","slug":"mysql-架构","link":"#mysql-架构","children":[{"level":3,"title":"【中级】SQL 查询语句的执行顺序是怎么样的？","slug":"【中级】sql-查询语句的执行顺序是怎么样的","link":"#【中级】sql-查询语句的执行顺序是怎么样的","children":[]},{"level":3,"title":"【高级】一条 SQL 查询语句是如何执行的？","slug":"【高级】一条-sql-查询语句是如何执行的","link":"#【高级】一条-sql-查询语句是如何执行的","children":[]},{"level":3,"title":"【高级】一条 SQL 更新语句是如何执行的？","slug":"【高级】一条-sql-更新语句是如何执行的","link":"#【高级】一条-sql-更新语句是如何执行的","children":[]},{"level":3,"title":"【高级】order by 是怎么工作的？","slug":"【高级】order-by-是怎么工作的","link":"#【高级】order-by-是怎么工作的","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1742566700000,"updatedTime":1749082814000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":5},{"name":"Dunwu","email":"forbreak@163.com","commits":1}]},"readingTime":{"minutes":62.8,"words":18841},"filePathRelative":"12.数据库/03.关系型数据库/mysql/MySQL_面试.md","localizedDate":"2020年9月12日","excerpt":"<h1> MySQL 面试</h1>\\n<h2> 关系数据库综合</h2>\\n<h3> 【基础】什么是范式？什么是反范式？</h3>\\n<details class=\\"hint-container details\\"><summary>要点</summary>\\n<p>数据库规范化，又称“<strong>范式</strong>”，是数据库设计的指导理论。<strong>范式的目标是：使数据库结构更合理，消除存储异常，使数据冗余尽量小，增进数据的一致性</strong>。</p>\\n<p>根据约束程度从低到高有：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）等等。</p>\\n<figure><img src=\\"https://raw.githubusercontent.com/dunwu/images/master/snap/202410022024207.png\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>\\n<ul>\\n<li>1NF 要求<strong>所有属性都不可再分解</strong>。</li>\\n<li>2NF 要求<strong>不存在部分依赖</strong>。</li>\\n<li>3NF 要求<strong>不存在传递依赖</strong>。</li>\\n</ul>\\n<p>反范式，顾名思义，与范式的目标正好相反。<strong>范式</strong>的目标是<strong>消除冗余</strong>；<strong>反范式</strong>的目标是<strong>冗余以提高查询效率</strong>。</p>\\n<p>范式并非越严格越好，现代数据库设计，一般最多满足 3NF。范式越高意味着表的划分更细，一个数据库中需要的表也就越多，用户不得不将原本相关联的数据分摊到多个表中。当用户同时需要这些数据时只能通过关联表的形式将数据重新合并在一起。同时把多个表联接在一起的花费是巨大的，尤其是当需要连接的两张或者多张表数据非常庞大的时候，表连接操作几乎是一个噩梦，这严重地降低了系统运行性能。因此，<strong>有时为了提高查询效率，有必要适当的冗余数据，以达到空间换时间的目的——这就是“反范式”</strong>。</p>\\n</details>","autoDesc":true}');export{l as data};
