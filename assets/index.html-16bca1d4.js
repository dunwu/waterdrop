const t=JSON.parse('{"key":"v-61bca9d0","path":"/pages/fb14d899/","title":"栈和队列","lang":"zh-CN","frontmatter":{"title":"栈和队列","date":"2014-01-25T16:46:13.000Z","order":2,"permalink":"/pages/fb14d899/","category":["数据结构和算法"],"tag":["数据结构","线性表","栈","队列"],"description":"栈和队列 队列和栈都是操作受限的线性表：前者先进先出，后者先进后出。 栈 栈是什么 在 LIFO(后进先出) 数据结构中，将首先处理添加到队列中的最新元素。 栈是一个 LIFO(后进先出) 数据结构。栈是一种“操作受限”的线性表，只允许在一端插入和删除数据。通常，插入操作在栈中被称作入栈 push 。与队列类似，总是在堆栈的末尾添加一个新元素。但是，删除操作，退栈 pop ，将始终删除队列中相对于它的最后一个元素。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/fb14d899/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"栈和队列"}],["meta",{"property":"og:description","content":"栈和队列 队列和栈都是操作受限的线性表：前者先进先出，后者先进后出。 栈 栈是什么 在 LIFO(后进先出) 数据结构中，将首先处理添加到队列中的最新元素。 栈是一个 LIFO(后进先出) 数据结构。栈是一种“操作受限”的线性表，只允许在一端插入和删除数据。通常，插入操作在栈中被称作入栈 push 。与队列类似，总是在堆栈的末尾添加一个新元素。但是，删除操作，退栈 pop ，将始终删除队列中相对于它的最后一个元素。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-13T09:28:24.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"数据结构"}],["meta",{"property":"article:tag","content":"线性表"}],["meta",{"property":"article:tag","content":"栈"}],["meta",{"property":"article:tag","content":"队列"}],["meta",{"property":"article:published_time","content":"2014-01-25T16:46:13.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-13T09:28:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"栈和队列\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2014-01-25T16:46:13.000Z\\",\\"dateModified\\":\\"2025-09-13T09:28:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"栈","slug":"栈","link":"#栈","children":[{"level":3,"title":"栈是什么","slug":"栈是什么","link":"#栈是什么","children":[]},{"level":3,"title":"为什么需要栈","slug":"为什么需要栈","link":"#为什么需要栈","children":[]},{"level":3,"title":"栈的应用场景","slug":"栈的应用场景","link":"#栈的应用场景","children":[]}]},{"level":2,"title":"队列","slug":"队列","link":"#队列","children":[{"level":3,"title":"什么是队列","slug":"什么是队列","link":"#什么是队列","children":[]},{"level":3,"title":"循环队列","slug":"循环队列","link":"#循环队列","children":[]},{"level":3,"title":"为什么需要队列","slug":"为什么需要队列","link":"#为什么需要队列","children":[]},{"level":3,"title":"队列的应用场景","slug":"队列的应用场景","link":"#队列的应用场景","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1757755704000,"updatedTime":1757755704000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":1}]},"readingTime":{"minutes":3.91,"words":1172},"filePathRelative":"11.算法/栈和队列.md","localizedDate":"2014年1月25日","excerpt":"<h1> 栈和队列</h1>\\n<blockquote>\\n<p><strong>队列</strong>和<strong>栈</strong>都是<strong>操作受限</strong>的<strong>线性表</strong>：前者先进先出，后者先进后出。</p>\\n</blockquote>\\n<h2> 栈</h2>\\n<h3> 栈是什么</h3>\\n<p>在 <strong>LIFO(后进先出)</strong> 数据结构中，将首先处理添加到队列中的最新元素。</p>\\n<p><strong>栈是一个 LIFO(后进先出) 数据结构</strong>。<strong>栈是一种“操作受限”的线性表</strong>，只允许在一端插入和删除数据。通常，插入操作在栈中被称作入栈 push 。与队列类似，总是在堆栈的末尾添加一个新元素。但是，删除操作，退栈 pop ，将始终删除队列中相对于它的最后一个元素。</p>","autoDesc":true}');export{t as data};
