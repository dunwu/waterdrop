const e=JSON.parse('{"key":"v-6246b544","path":"/pages/62dcea5e/","title":"设计模式面试","lang":"zh-CN","frontmatter":{"title":"设计模式面试","date":"2025-09-22T08:19:26.000Z","order":99,"permalink":"/pages/62dcea5e/","category":["设计","设计模式"],"tag":["设计","设计模式","面试"],"description":"设计模式面试 综合 【简单】什么是设计模式？为什么需要设计模式？ 设计模式是软件设计中常见问题的典型解决方案。 设计模式是针对软件设计中常见问题的、可重用的解决方案模板和最佳实践。 模式是针对软件设计中常见问题的解决方案工具箱， 它们定义了一种让你的团队能更高效沟通的通用语言。 【中等】设计模式可以分为哪几类？一共有多少种主流的设计模式？","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/62dcea5e/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"设计模式面试"}],["meta",{"property":"og:description","content":"设计模式面试 综合 【简单】什么是设计模式？为什么需要设计模式？ 设计模式是软件设计中常见问题的典型解决方案。 设计模式是针对软件设计中常见问题的、可重用的解决方案模板和最佳实践。 模式是针对软件设计中常见问题的解决方案工具箱， 它们定义了一种让你的团队能更高效沟通的通用语言。 【中等】设计模式可以分为哪几类？一共有多少种主流的设计模式？"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-24T23:49:46.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"设计"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:tag","content":"面试"}],["meta",{"property":"article:published_time","content":"2025-09-22T08:19:26.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-24T23:49:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式面试\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-09-22T08:19:26.000Z\\",\\"dateModified\\":\\"2025-09-24T23:49:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"综合","slug":"综合","link":"#综合","children":[{"level":3,"title":"【简单】什么是设计模式？为什么需要设计模式？","slug":"【简单】什么是设计模式-为什么需要设计模式","link":"#【简单】什么是设计模式-为什么需要设计模式","children":[]},{"level":3,"title":"【中等】设计模式可以分为哪几类？一共有多少种主流的设计模式？","slug":"【中等】设计模式可以分为哪几类-一共有多少种主流的设计模式","link":"#【中等】设计模式可以分为哪几类-一共有多少种主流的设计模式","children":[]}]},{"level":2,"title":"创建型模式","slug":"创建型模式","link":"#创建型模式","children":[{"level":3,"title":"【中等】单例模式有哪几种实现？如何保证线程安全？","slug":"【中等】单例模式有哪几种实现-如何保证线程安全","link":"#【中等】单例模式有哪几种实现-如何保证线程安全","children":[]},{"level":3,"title":"【中等】什么是简单工厂模式？有哪些经典的应用场景？","slug":"【中等】什么是简单工厂模式-有哪些经典的应用场景","link":"#【中等】什么是简单工厂模式-有哪些经典的应用场景","children":[]},{"level":3,"title":"【中等】什么是工厂模式？有哪些经典的应用场景？","slug":"【中等】什么是工厂模式-有哪些经典的应用场景","link":"#【中等】什么是工厂模式-有哪些经典的应用场景","children":[]}]},{"level":2,"title":"结构型模式","slug":"结构型模式","link":"#结构型模式","children":[{"level":3,"title":"【中等】什么是代理模式？有哪些经典的应用场景？","slug":"【中等】什么是代理模式-有哪些经典的应用场景","link":"#【中等】什么是代理模式-有哪些经典的应用场景","children":[]}]},{"level":2,"title":"行为型模式","slug":"行为型模式","link":"#行为型模式","children":[{"level":3,"title":"【中等】什么是策略模式？有哪些经典的应用场景？","slug":"【中等】什么是策略模式-有哪些经典的应用场景","link":"#【中等】什么是策略模式-有哪些经典的应用场景","children":[]},{"level":3,"title":"【中等】什么是观察者模式？有哪些经典的应用场景？","slug":"【中等】什么是观察者模式-有哪些经典的应用场景","link":"#【中等】什么是观察者模式-有哪些经典的应用场景","children":[]},{"level":3,"title":"【中等】什么是模板方法模式？有哪些经典的应用场景？","slug":"【中等】什么是模板方法模式-有哪些经典的应用场景","link":"#【中等】什么是模板方法模式-有哪些经典的应用场景","children":[]},{"level":3,"title":"【中等】什么是责任链模式？有哪些经典的应用场景？","slug":"【中等】什么是责任链模式-有哪些经典的应用场景","link":"#【中等】什么是责任链模式-有哪些经典的应用场景","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1758500484000,"updatedTime":1758757786000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":3}]},"readingTime":{"minutes":12.48,"words":3745},"filePathRelative":"03.设计/设计模式/设计模式面试.md","localizedDate":"2025年9月22日","excerpt":"<h1> 设计模式面试</h1>\\n<h2> 综合</h2>\\n<h3> 【简单】什么是设计模式？为什么需要设计模式？</h3>\\n<p><strong>设计模式</strong>是软件设计中常见问题的典型解决方案。</p>\\n<p><strong>设计模式</strong>是针对软件设计中<strong>常见问题</strong>的、<strong>可重用</strong>的<strong>解决方案模板</strong>和<strong>最佳实践</strong>。</p>\\n<p>模式是针对软件设计中常见问题的解决方案工具箱， 它们定义了一种让你的团队能更高效沟通的通用语言。</p>\\n<h3> 【中等】设计模式可以分为哪几类？一共有多少种主流的设计模式？</h3>","autoDesc":true}');export{e as data};
