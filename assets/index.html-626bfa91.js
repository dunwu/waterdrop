const e=JSON.parse('{"key":"v-2fae154f","path":"/pages/f38610f8/","title":"Java 基础面试一","lang":"zh-CN","frontmatter":{"title":"Java 基础面试一","cover":"https://raw.githubusercontent.com/dunwu/images/master/snap/202503110803916.jpg","date":"2024-06-18T22:46:20.000Z","permalink":"/pages/f38610f8/","category":["Java","JavaCore","面试"],"tag":["Java","JavaCore","面试"],"description":"Java 基础面试一 Java 常识 【简单】Java 语言有什么优势？ 跨平台：【一次编写，到处执行（Write Once, Run Anywhere）】——JVM 执行字节码。 自动垃圾回收：垃圾回收（GC）减少内存泄漏风险。 强大生态：Spring、Hadoop、Android 等广泛支持。 面向对象：支持封装、继承、多态，代码结构清晰易维护。 高性能：JIT 编译优化，多线程支持高并发。 健壮安全：强类型检查、异常处理、JVM 安全机制。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/f38610f8/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"Java 基础面试一"}],["meta",{"property":"og:description","content":"Java 基础面试一 Java 常识 【简单】Java 语言有什么优势？ 跨平台：【一次编写，到处执行（Write Once, Run Anywhere）】——JVM 执行字节码。 自动垃圾回收：垃圾回收（GC）减少内存泄漏风险。 强大生态：Spring、Hadoop、Android 等广泛支持。 面向对象：支持封装、继承、多态，代码结构清晰易维护。 高性能：JIT 编译优化，多线程支持高并发。 健壮安全：强类型检查、异常处理、JVM 安全机制。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/dunwu/images/master/snap/202503110803916.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-13T09:46:18.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"Java 基础面试一"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"JavaCore"}],["meta",{"property":"article:tag","content":"面试"}],["meta",{"property":"article:published_time","content":"2024-06-18T22:46:20.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-13T09:46:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 基础面试一\\",\\"image\\":[\\"https://raw.githubusercontent.com/dunwu/images/master/snap/202503110803916.jpg\\"],\\"datePublished\\":\\"2024-06-18T22:46:20.000Z\\",\\"dateModified\\":\\"2025-09-13T09:46:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"Java 常识","slug":"java-常识","link":"#java-常识","children":[{"level":3,"title":"【简单】Java 语言有什么优势？","slug":"【简单】java-语言有什么优势","link":"#【简单】java-语言有什么优势","children":[]},{"level":3,"title":"【简单】Oracle JDK 和 Open JDK 有什么区别？","slug":"【简单】oracle-jdk-和-open-jdk-有什么区别","link":"#【简单】oracle-jdk-和-open-jdk-有什么区别","children":[]},{"level":3,"title":"【简单】Java SE 和 Java EE 有什么区别？","slug":"【简单】java-se-和-java-ee-有什么区别","link":"#【简单】java-se-和-java-ee-有什么区别","children":[]},{"level":3,"title":"【简单】JDK、JRE、JVM 之间有什么关系？","slug":"【简单】jdk、jre、jvm-之间有什么关系","link":"#【简单】jdk、jre、jvm-之间有什么关系","children":[]},{"level":3,"title":"【中等】Java 如何调用外部可执行程序或系统命令？","slug":"【中等】java-如何调用外部可执行程序或系统命令","link":"#【中等】java-如何调用外部可执行程序或系统命令","children":[]}]},{"level":2,"title":"Java 基础语法","slug":"java-基础语法","link":"#java-基础语法","children":[{"level":3,"title":"【简单】Java 有几种注释形式？","slug":"【简单】java-有几种注释形式","link":"#【简单】java-有几种注释形式","children":[]},{"level":3,"title":"【简单】Java 有哪些标识符命名规则？","slug":"【简单】java-有哪些标识符命名规则","link":"#【简单】java-有哪些标识符命名规则","children":[]},{"level":3,"title":"【简单】Java 中有哪些关键字？","slug":"【简单】java-中有哪些关键字","link":"#【简单】java-中有哪些关键字","children":[]},{"level":3,"title":"【中等】如果移位操作位数超限会怎样？","slug":"【中等】如果移位操作位数超限会怎样","link":"#【中等】如果移位操作位数超限会怎样","children":[]}]},{"level":2,"title":"Java 数据类型","slug":"java-数据类型","link":"#java-数据类型","children":[{"level":3,"title":"【简单】Java 有哪些值类型？","slug":"【简单】java-有哪些值类型","link":"#【简单】java-有哪些值类型","children":[]},{"level":3,"title":"【简单】什么是装箱、拆箱？","slug":"【简单】什么是装箱、拆箱","link":"#【简单】什么是装箱、拆箱","children":[]},{"level":3,"title":"【中等】包装类型的缓存机制了解么？","slug":"【中等】包装类型的缓存机制了解么","link":"#【中等】包装类型的缓存机制了解么","children":[]},{"level":3,"title":"【简单】比较包装类型为什么不能用 ==？","slug":"【简单】比较包装类型为什么不能用","link":"#【简单】比较包装类型为什么不能用","children":[]},{"level":3,"title":"【中等】为什么浮点数运算的时候会有精度丢失的风险？","slug":"【中等】为什么浮点数运算的时候会有精度丢失的风险","link":"#【中等】为什么浮点数运算的时候会有精度丢失的风险","children":[]},{"level":3,"title":"【简单】如何解决浮点数运算的精度丢失问题？","slug":"【简单】如何解决浮点数运算的精度丢失问题","link":"#【简单】如何解决浮点数运算的精度丢失问题","children":[]},{"level":3,"title":"【简单】超过 long 整型的数据应该如何表示？","slug":"【简单】超过-long-整型的数据应该如何表示","link":"#【简单】超过-long-整型的数据应该如何表示","children":[]}]},{"level":2,"title":"Java 变量","slug":"java-变量","link":"#java-变量","children":[{"level":3,"title":"【简单】静态变量、成员变量、局部变量的区别？","slug":"【简单】静态变量、成员变量、局部变量的区别","link":"#【简单】静态变量、成员变量、局部变量的区别","children":[]},{"level":3,"title":"【简单】为什么成员变量有默认值？","slug":"【简单】为什么成员变量有默认值","link":"#【简单】为什么成员变量有默认值","children":[]},{"level":3,"title":"【简单】字符型常量和字符串常量的区别？","slug":"【简单】字符型常量和字符串常量的区别","link":"#【简单】字符型常量和字符串常量的区别","children":[]}]},{"level":2,"title":"Java 方法","slug":"java-方法","link":"#java-方法","children":[{"level":3,"title":"【简单】Java 方法有哪些类型？","slug":"【简单】java-方法有哪些类型","link":"#【简单】java-方法有哪些类型","children":[]},{"level":3,"title":"【简单】静态方法和实例方法有何不同？","slug":"【简单】静态方法和实例方法有何不同","link":"#【简单】静态方法和实例方法有何不同","children":[]},{"level":3,"title":"【简单】重载和重写有什么区别？","slug":"【简单】重载和重写有什么区别","link":"#【简单】重载和重写有什么区别","children":[]},{"level":3,"title":"【简单】什么是可变长参数？","slug":"【简单】什么是可变长参数","link":"#【简单】什么是可变长参数","children":[]}]},{"level":2,"title":"Java 异常","slug":"java-异常","link":"#java-异常","children":[{"level":3,"title":"【简单】Exception 和 Error 有什么区别？","slug":"【简单】exception-和-error-有什么区别","link":"#【简单】exception-和-error-有什么区别","children":[]},{"level":3,"title":"【简单】Checked Exception 和 Unchecked Exception 有什么区别？","slug":"【简单】checked-exception-和-unchecked-exception-有什么区别","link":"#【简单】checked-exception-和-unchecked-exception-有什么区别","children":[]},{"level":3,"title":"【简单】Throwable 类常用方法有哪些？","slug":"【简单】throwable-类常用方法有哪些","link":"#【简单】throwable-类常用方法有哪些","children":[]},{"level":3,"title":"【简单】try-catch-finally 如何使用？","slug":"【简单】try-catch-finally-如何使用","link":"#【简单】try-catch-finally-如何使用","children":[]},{"level":3,"title":"【简单】finally 中的代码一定会执行吗？","slug":"【简单】finally-中的代码一定会执行吗","link":"#【简单】finally-中的代码一定会执行吗","children":[]},{"level":3,"title":"【简单】如何使用 try-with-resources 代替try-catch-finally？","slug":"【简单】如何使用-try-with-resources-代替try-catch-finally","link":"#【简单】如何使用-try-with-resources-代替try-catch-finally","children":[]},{"level":3,"title":"【简单】NoClassDefFoundError 和 ClassNotFoundException 有什么区别","slug":"【简单】noclassdeffounderror-和-classnotfoundexception-有什么区别","link":"#【简单】noclassdeffounderror-和-classnotfoundexception-有什么区别","children":[]},{"level":3,"title":"【简单】异常使用有哪些需要注意的地方？","slug":"【简单】异常使用有哪些需要注意的地方","link":"#【简单】异常使用有哪些需要注意的地方","children":[]},{"level":3,"title":"【中等】Java 中 final、finally 和 finalize 有什么区别？","slug":"【中等】java-中-final、finally-和-finalize-有什么区别","link":"#【中等】java-中-final、finally-和-finalize-有什么区别","children":[]}]}],"git":{"createdTime":1743948422000,"updatedTime":1757756778000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":5}]},"readingTime":{"minutes":27.13,"words":8138},"filePathRelative":"01.Java/01.JavaCore/99.面试/Java_面试_基础（一）.md","localizedDate":"2024年6月18日","excerpt":"<h1> Java 基础面试一</h1>\\n<h2> Java 常识</h2>\\n<h3> 【简单】Java 语言有什么优势？</h3>\\n<ul>\\n<li><strong>跨平台</strong>：【<strong>一次编写，到处执行（Write Once, Run Anywhere）</strong>】——JVM 执行字节码。</li>\\n<li><strong>自动垃圾回收</strong>：垃圾回收（GC）减少内存泄漏风险。</li>\\n<li><strong>强大生态</strong>：Spring、Hadoop、Android 等广泛支持。</li>\\n<li><strong>面向对象</strong>：支持封装、继承、多态，代码结构清晰易维护。</li>\\n<li><strong>高性能</strong>：JIT 编译优化，多线程支持高并发。</li>\\n<li><strong>健壮安全</strong>：强类型检查、异常处理、JVM 安全机制。</li>\\n</ul>","autoDesc":true}');export{e as data};
