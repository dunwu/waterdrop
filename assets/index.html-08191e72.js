const e=JSON.parse('{"key":"v-d38657a8","path":"/pages/a3e4ca88/","title":"《极客时间教程 - 深入拆解 Java 虚拟机》笔记","lang":"zh-CN","frontmatter":{"title":"《极客时间教程 - 深入拆解 Java 虚拟机》笔记","date":"2024-08-07T07:22:58.000Z","order":3,"permalink":"/pages/a3e4ca88/","category":["笔记","Java"],"tag":["Java","JVM"],"description":"《极客时间教程 - 深入拆解 Java 虚拟机》笔记 开篇词 为什么我们要学习 Java 虚拟机？ Java 代码是怎么运行的？ 从虚拟机视角来看，执行 Java 代码首先需要将它编译而成的 class 文件加载到 Java 虚拟机中。加载后的 Java 类会被存放于方法区（Method Area）中。实际运行时，虚拟机会执行方法区内的代码。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/a3e4ca88/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"《极客时间教程 - 深入拆解 Java 虚拟机》笔记"}],["meta",{"property":"og:description","content":"《极客时间教程 - 深入拆解 Java 虚拟机》笔记 开篇词 为什么我们要学习 Java 虚拟机？ Java 代码是怎么运行的？ 从虚拟机视角来看，执行 Java 代码首先需要将它编译而成的 class 文件加载到 Java 虚拟机中。加载后的 Java 类会被存放于方法区（Method Area）中。实际运行时，虚拟机会执行方法区内的代码。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-13T09:10:08.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"JVM"}],["meta",{"property":"article:published_time","content":"2024-08-07T07:22:58.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-13T09:10:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"《极客时间教程 - 深入拆解 Java 虚拟机》笔记\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-08-07T07:22:58.000Z\\",\\"dateModified\\":\\"2025-09-13T09:10:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"开篇词 为什么我们要学习 Java 虚拟机？","slug":"开篇词-为什么我们要学习-java-虚拟机","link":"#开篇词-为什么我们要学习-java-虚拟机","children":[]},{"level":2,"title":"Java 代码是怎么运行的？","slug":"java-代码是怎么运行的","link":"#java-代码是怎么运行的","children":[]},{"level":2,"title":"Java 的基本类型","slug":"java-的基本类型","link":"#java-的基本类型","children":[]},{"level":2,"title":"Java 虚拟机是如何加载 Java 类的","slug":"java-虚拟机是如何加载-java-类的","link":"#java-虚拟机是如何加载-java-类的","children":[]},{"level":2,"title":"JVM 是如何执行方法调用的？（上）","slug":"jvm-是如何执行方法调用的-上","link":"#jvm-是如何执行方法调用的-上","children":[]},{"level":2,"title":"JVM 是如何执行方法调用的？（下）","slug":"jvm-是如何执行方法调用的-下","link":"#jvm-是如何执行方法调用的-下","children":[]},{"level":2,"title":"JVM 是如何处理异常的？","slug":"jvm-是如何处理异常的","link":"#jvm-是如何处理异常的","children":[]},{"level":2,"title":"JVM 是如何实现反射的？","slug":"jvm-是如何实现反射的","link":"#jvm-是如何实现反射的","children":[]},{"level":2,"title":"JVM 是怎么实现 invokedynamic 的？（上）","slug":"jvm-是怎么实现-invokedynamic-的-上","link":"#jvm-是怎么实现-invokedynamic-的-上","children":[]},{"level":2,"title":"JVM 是怎么实现 invokedynamic 的？（下）","slug":"jvm-是怎么实现-invokedynamic-的-下","link":"#jvm-是怎么实现-invokedynamic-的-下","children":[]},{"level":2,"title":"Java 对象的内存布局","slug":"java-对象的内存布局","link":"#java-对象的内存布局","children":[{"level":3,"title":"压缩指针","slug":"压缩指针","link":"#压缩指针","children":[]},{"level":3,"title":"字段重排序","slug":"字段重排序","link":"#字段重排序","children":[]}]},{"level":2,"title":"垃圾回收（上）","slug":"垃圾回收-上","link":"#垃圾回收-上","children":[{"level":3,"title":"引用计数法","slug":"引用计数法","link":"#引用计数法","children":[]},{"level":3,"title":"可达性分析法","slug":"可达性分析法","link":"#可达性分析法","children":[]},{"level":3,"title":"Stop-the-world","slug":"stop-the-world","link":"#stop-the-world","children":[]},{"level":3,"title":"垃圾回收方式","slug":"垃圾回收方式","link":"#垃圾回收方式","children":[]}]},{"level":2,"title":"垃圾回收（下）","slug":"垃圾回收-下","link":"#垃圾回收-下","children":[]},{"level":2,"title":"Java 内存模型","slug":"java-内存模型","link":"#java-内存模型","children":[]},{"level":2,"title":"Java 虚拟机是怎么实现 synchronized 的？","slug":"java-虚拟机是怎么实现-synchronized-的","link":"#java-虚拟机是怎么实现-synchronized-的","children":[]},{"level":2,"title":"Java 语法糖与 Java 编译器","slug":"java-语法糖与-java-编译器","link":"#java-语法糖与-java-编译器","children":[]},{"level":2,"title":"即时编译（上）","slug":"即时编译-上","link":"#即时编译-上","children":[]},{"level":2,"title":"即时编译（下）","slug":"即时编译-下","link":"#即时编译-下","children":[]},{"level":2,"title":"即时编译器的中间表达形式","slug":"即时编译器的中间表达形式","link":"#即时编译器的中间表达形式","children":[]},{"level":2,"title":"Java 字节码（基础篇）","slug":"java-字节码-基础篇","link":"#java-字节码-基础篇","children":[]},{"level":2,"title":"方法内联（上）","slug":"方法内联-上","link":"#方法内联-上","children":[]},{"level":2,"title":"方法内联（下）","slug":"方法内联-下","link":"#方法内联-下","children":[]},{"level":2,"title":"HotSpot 虚拟机的 intrinsic","slug":"hotspot-虚拟机的-intrinsic","link":"#hotspot-虚拟机的-intrinsic","children":[]},{"level":2,"title":"逃逸分析","slug":"逃逸分析","link":"#逃逸分析","children":[]},{"level":2,"title":"字段访问相关优化","slug":"字段访问相关优化","link":"#字段访问相关优化","children":[]},{"level":2,"title":"循环优化","slug":"循环优化","link":"#循环优化","children":[]},{"level":2,"title":"向量化","slug":"向量化","link":"#向量化","children":[]},{"level":2,"title":"注解处理器","slug":"注解处理器","link":"#注解处理器","children":[]},{"level":2,"title":"基准测试框架 JMH（上）","slug":"基准测试框架-jmh-上","link":"#基准测试框架-jmh-上","children":[]},{"level":2,"title":"基准测试框架 JMH（下）","slug":"基准测试框架-jmh-下","link":"#基准测试框架-jmh-下","children":[]},{"level":2,"title":"Java 虚拟机的监控及诊断工具（命令行篇）","slug":"java-虚拟机的监控及诊断工具-命令行篇","link":"#java-虚拟机的监控及诊断工具-命令行篇","children":[]},{"level":2,"title":"Java 虚拟机的监控及诊断工具（GUI 篇）","slug":"java-虚拟机的监控及诊断工具-gui-篇","link":"#java-虚拟机的监控及诊断工具-gui-篇","children":[]},{"level":2,"title":"JNI 的运行机制","slug":"jni-的运行机制","link":"#jni-的运行机制","children":[]},{"level":2,"title":"JavaAgent 与字节码注入","slug":"javaagent-与字节码注入","link":"#javaagent-与字节码注入","children":[]},{"level":2,"title":"Graal：用 Java 编译 Java","slug":"graal-用-java-编译-java","link":"#graal-用-java-编译-java","children":[]},{"level":2,"title":"Truffle：语言实现框架","slug":"truffle-语言实现框架","link":"#truffle-语言实现框架","children":[]},{"level":2,"title":"SubstrateVM：AOT 编译框架","slug":"substratevm-aot-编译框架","link":"#substratevm-aot-编译框架","children":[]},{"level":2,"title":"尾声丨道阻且长，努力加餐。html","slug":"尾声丨道阻且长-努力加餐。html","link":"#尾声丨道阻且长-努力加餐。html","children":[]},{"level":2,"title":"工具篇 常用工具介绍","slug":"工具篇-常用工具介绍","link":"#工具篇-常用工具介绍","children":[]}],"git":{"createdTime":1757754608000,"updatedTime":1757754608000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":1}]},"readingTime":{"minutes":25.29,"words":7588},"filePathRelative":"00.笔记/01.Java/极客时间教程-深入拆解Java虚拟机笔记.md","localizedDate":"2024年8月7日","excerpt":"<h1> 《极客时间教程 - 深入拆解 Java 虚拟机》笔记</h1>\\n<h2> 开篇词 为什么我们要学习 Java 虚拟机？</h2>\\n<figure><img src=\\"https://learn.lianglianglee.com/专栏/深入拆解Java虚拟机/assets/414248014bf825dd610c3095eed75377.jpg\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>\\n<h2> Java 代码是怎么运行的？</h2>\\n<p>从虚拟机视角来看，执行 Java 代码首先需要将它编译而成的 class 文件加载到 Java 虚拟机中。加载后的 Java 类会被存放于方法区（Method Area）中。实际运行时，虚拟机会执行方法区内的代码。</p>","autoDesc":true}');export{e as data};
