const e=JSON.parse('{"key":"v-376b31db","path":"/pages/cfd35751/","title":"Java NIO","lang":"zh-CN","frontmatter":{"title":"Java NIO","date":"2020-02-19T18:54:21.000Z","order":2,"permalink":"/pages/cfd35751/","category":["Java","JavaCore","IO"],"tag":["Java","JavaCore","IO","NIO","Channel","Buffer","Selector","多路复用"],"description":"Java NIO NIO 简介 在传统的 Java I/O 模型（BIO）中，I/O 操作是以阻塞的方式进行的。也就是说，当一个线程执行一个 I/O 操作时，它会被阻塞直到操作完成。这种阻塞模型在处理多个并发连接时可能会导致性能瓶颈，因为需要为每个连接创建一个线程，而线程的创建和切换都是有开销的。 为了解决此问题，在 Java 1.4 中引入了非阻塞的 I/O 模型——NIO（New IO，也称为 Non-blocking IO）。NIO 对应 java.nio 包，提供了 Channel 、Selector、Buffer 等抽象。它支持面向缓冲的，基于通道的 I/O 操作方法。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/cfd35751/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"Java NIO"}],["meta",{"property":"og:description","content":"Java NIO NIO 简介 在传统的 Java I/O 模型（BIO）中，I/O 操作是以阻塞的方式进行的。也就是说，当一个线程执行一个 I/O 操作时，它会被阻塞直到操作完成。这种阻塞模型在处理多个并发连接时可能会导致性能瓶颈，因为需要为每个连接创建一个线程，而线程的创建和切换都是有开销的。 为了解决此问题，在 Java 1.4 中引入了非阻塞的 I/O 模型——NIO（New IO，也称为 Non-blocking IO）。NIO 对应 java.nio 包，提供了 Channel 、Selector、Buffer 等抽象。它支持面向缓冲的，基于通道的 I/O 操作方法。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-13T09:28:24.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"JavaCore"}],["meta",{"property":"article:tag","content":"IO"}],["meta",{"property":"article:tag","content":"NIO"}],["meta",{"property":"article:tag","content":"Channel"}],["meta",{"property":"article:tag","content":"Buffer"}],["meta",{"property":"article:tag","content":"Selector"}],["meta",{"property":"article:tag","content":"多路复用"}],["meta",{"property":"article:published_time","content":"2020-02-19T18:54:21.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-13T09:28:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java NIO\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-02-19T18:54:21.000Z\\",\\"dateModified\\":\\"2025-09-13T09:28:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"NIO 简介","slug":"nio-简介","link":"#nio-简介","children":[{"level":3,"title":"NIO 的基本流程","slug":"nio-的基本流程","link":"#nio-的基本流程","children":[]},{"level":3,"title":"NIO 核心组件","slug":"nio-核心组件","link":"#nio-核心组件","children":[]}]},{"level":2,"title":"Channel（通道）","slug":"channel-通道","link":"#channel-通道","children":[]},{"level":2,"title":"Buffer（缓冲区）","slug":"buffer-缓冲区","link":"#buffer-缓冲区","children":[{"level":3,"title":"缓冲区状态变量","slug":"缓冲区状态变量","link":"#缓冲区状态变量","children":[]},{"level":3,"title":"文件 NIO 示例","slug":"文件-nio-示例","link":"#文件-nio-示例","children":[]},{"level":3,"title":"DirectBuffer","slug":"directbuffer","link":"#directbuffer","children":[]}]},{"level":2,"title":"Selector（选择器）","slug":"selector-选择器","link":"#selector-选择器","children":[{"level":3,"title":"创建选择器","slug":"创建选择器","link":"#创建选择器","children":[]},{"level":3,"title":"将通道注册到选择器上","slug":"将通道注册到选择器上","link":"#将通道注册到选择器上","children":[]},{"level":3,"title":"监听事件","slug":"监听事件","link":"#监听事件","children":[]},{"level":3,"title":"获取到达的事件","slug":"获取到达的事件","link":"#获取到达的事件","children":[]},{"level":3,"title":"事件循环","slug":"事件循环","link":"#事件循环","children":[]},{"level":3,"title":"套接字 NIO 示例","slug":"套接字-nio-示例","link":"#套接字-nio-示例","children":[]},{"level":3,"title":"内存映射文件","slug":"内存映射文件","link":"#内存映射文件","children":[]}]},{"level":2,"title":"NIO vs. BIO","slug":"nio-vs-bio","link":"#nio-vs-bio","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1743948422000,"updatedTime":1757755704000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":2}]},"readingTime":{"minutes":10.88,"words":3265},"filePathRelative":"01.Java/01.JavaCore/04.IO/Java_IO_NIO.md","localizedDate":"2020年2月19日","excerpt":"<h1> Java NIO</h1>\\n<h2> NIO 简介</h2>\\n<p>在传统的 Java I/O 模型（BIO）中，I/O 操作是以阻塞的方式进行的。也就是说，当一个线程执行一个 I/O 操作时，它会被阻塞直到操作完成。这种阻塞模型在处理多个并发连接时可能会导致性能瓶颈，因为需要为每个连接创建一个线程，而线程的创建和切换都是有开销的。</p>\\n<p>为了解决此问题，在 Java 1.4 中引入了非阻塞的 I/O 模型——NIO（New IO，也称为 Non-blocking IO）。NIO 对应 <code>java.nio</code> 包，提供了 <code>Channel</code> 、<code>Selector</code>、<code>Buffer</code> 等抽象。它支持面向缓冲的，基于通道的 I/O 操作方法。</p>","autoDesc":true}');export{e as data};
