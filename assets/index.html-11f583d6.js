import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as p,c as l,a as n,b as s,d as t,f as c,e as i}from"./app-c6dda127.js";const u={},r=n("h1",{id:"《mongodb-权威指南》笔记一",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#《mongodb-权威指南》笔记一","aria-hidden":"true"},"#"),s(" 《MongoDB 权威指南》笔记一")],-1),d={href:"https://book.douban.com/subject/35688800/",target:"_blank",rel:"noopener noreferrer"},k=i(`<h2 id="第-1-章-mongodb-简介" tabindex="-1"><a class="header-anchor" href="#第-1-章-mongodb-简介" aria-hidden="true">#</a> 第 1 章 MongoDB 简介</h2><h3 id="mongodb-简介" tabindex="-1"><a class="header-anchor" href="#mongodb-简介" aria-hidden="true">#</a> MongoDB 简介</h3><p>MongoDB 是一个分布式文档数据库，由 C++ 语言编写。</p><h4 id="面向文档" tabindex="-1"><a class="header-anchor" href="#面向文档" aria-hidden="true">#</a> 面向文档</h4><p>面向文档的数据库使用更灵活的“文档”模型取代了“行”的概念。通过嵌入文档和数组，面向文档的方式可以仅用一条记录来表示复杂的层次关系。</p><p>MongoDB 中也没有预定义模式（predefined schema）：文档键值的类型和大小不是固定的。由于没有固定的模式，因此按需添加或删除字段变得更容易。</p><p>综上，<strong>MongoDB 支持结构化、半结构化数据模型，可以动态响应结构变化</strong>。</p><h4 id="功能丰富" tabindex="-1"><a class="header-anchor" href="#功能丰富" aria-hidden="true">#</a> 功能丰富</h4><p>MongoDB 提供了丰富的功能：</p><ul><li><strong>索引</strong> - MongoDB 支持通用的二级索引，并提供唯一索引、复合索引、地理空间索引及全文索引功能。此外，它还支持在不同层次结构（如嵌套文档和数组）上建立二级索引。</li><li><strong>聚合</strong> - MongoDB 提供了一种基于数据处理管道的聚合框架。</li><li><strong>特殊的集合和索引类型</strong> - MongoDB 支持有限生命周期（TTL）集合，适用于保存将在特定时间过期的数据，比如会话和固定大小的集合，以及用于保存最近的数据（日志）。MongoDB 还支持部分索引，可以仅对符合某个条件的文档创建索引，以提高效率并减少所需的存储空间。</li><li><strong>文件存储</strong> - 针对大文件及文件元数据的存储，MongoDB 使用了一种非常易用的协议。</li><li>...</li></ul><h4 id="分布式" tabindex="-1"><a class="header-anchor" href="#分布式" aria-hidden="true">#</a> 分布式</h4><p>MongoDB 作为分布式存储，自然也具备了分布式的一般特性：</p><ul><li>通过副本机制提供高可用</li><li>通过分片提供扩容能力</li></ul><h2 id="第-2-章-入门指南" tabindex="-1"><a class="header-anchor" href="#第-2-章-入门指南" aria-hidden="true">#</a> 第 2 章 入门指南</h2><p>文档是 MongoDB 中的基本数据单元，可以粗略地认为其相当于关系数据库管理系统中的行（但表达力要强得多）。</p><p>类似地，集合可以被看作具有动态模式的表。</p><p>一个 MongoDB 实例可以拥有多个独立的数据库，每个数据库都拥有自己的集合。</p><p>每个文档都有一个特殊的键 &quot;<code>_id</code>&quot;，其在所属的集合中是唯一的。</p><p>MongoDB 自带了一个简单但功能强大的工具：mongo shell。mongo shell 对管理 MongoDB 实例和使用 MongoDB 的查询语言操作数据提供了内置的支持。它也是一个功能齐全的 JavaScript 解释器，用户可以根据需求创建或加载自己的脚本。</p><h3 id="文档" tabindex="-1"><a class="header-anchor" href="#文档" aria-hidden="true">#</a> 文档</h3><p>文档是一组有序键值的集合。</p><p>文档中的值不仅仅是“二进制大对象”，它们可以是几种不同的数据类型之一（甚至可以是一个完整的嵌入文档）。</p><p>文档中的键是字符串类型。除了少数例外的情况，可以使用任意 UTF-8 字符作为键。</p><p>键中不能含有 <code>\\0</code>（空字符）。这个字符用于表示一个键的结束。</p><p><code>.</code> 和 <code>$</code> 是特殊字符，只能在某些特定情况下使用。</p><p>MongoDB 会区分类型和大小写。</p><p>下面这两个文档是不同的：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;count&quot;</span> <span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token property">&quot;count&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;5&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>下面这两个文档也不同：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;count&quot;</span> <span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token property">&quot;Count&quot;</span> <span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意，MongoDB 中的文档不能包含重复的键。例如，下面这个文档是不合法的。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span> <span class="token property">&quot;greeting&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;greeting&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Hello, MongoDB!&quot;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="集合" tabindex="-1"><a class="header-anchor" href="#集合" aria-hidden="true">#</a> 集合</h3><p>集合就是一组文档。如果将文档比作关系数据库中的行，那么一个集合就相当于一张表。</p><p>集合具有<strong>动态模式</strong>的特性。这意味着一个集合中的文档可以具有任意数量的不同“形状”。例如，以下两个文档可以存储在同一个集合中：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;greeting&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;views&quot;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token property">&quot;signoff&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Good night, and good luck&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>集合由其名称进行标识。集合名称可以是任意 UTF-8 字符串，但有以下限制。</p><ul><li>集合名称不能是空字符串（&quot;&quot;）。</li><li>集合名称不能含有 <code>\\0</code>（空字符），因为这个字符用于表示一个集合名称的结束。</li><li>集合名称不能以 <code>system.</code> 开头，该前缀是为内部集合保留的。例如，<code>system.users</code> 集合中保存着数据库的用户，<code>system.namespaces</code> 集合中保存着有关数据库所有集合的信息。</li><li>用户创建的集合名称中不应包含保留字符 <code>$</code>。许多驱动程序确实支持在集合名称中使用 <code>$</code>，这是因为某些由系统生成的集合会包含它，但除非你要访问的是这些集合之一，否则不应在名称中使用 <code>$</code> 字符。</li></ul><p>使用 <code>.</code> 字符分隔不同命名空间的子集合是一种组织集合的惯例。例如，有一个具有博客功能的应用程序，可能包含名为 <code>blog.posts</code> 和名为 <code>blog.authors</code> 的集合。这只是一种组织管理的方式，blog 集合（它甚至不必存在）与其“子集合”之间没有任何关系。</p><h3 id="数据库" tabindex="-1"><a class="header-anchor" href="#数据库" aria-hidden="true">#</a> 数据库</h3><p>MongoDB 使用集合对文档进行分组，使用数据库对集合进行分组。一个 MongoDB 实例可以承载多个数据库，每个数据库有零个或多个集合。</p><p>数据库按照名称进行标识的。数据库名称可以是任意 UTF-8 字符串，但有以下限制：</p><ul><li>数据库名称不能是空字符串（&quot;&quot;）。</li><li>数据库名称不能包含 <code>/</code>、<code>\\</code>、<code>.</code>、<code>&quot;</code>、<code>*</code>、<code>&lt;</code>、<code>&gt;</code>、<code>:</code>、<code>|</code>、<code>?</code>、<code>$</code>、单一的空格以及 <code>\\0</code>（空字符），基本上只能使用 ASCII 字母和数字。</li><li>数据库名称区分大小写。</li><li>数据库名称的长度限制为 64 字节。</li></ul><p>MongoDB 使用 WiredTiger 存储引擎之前，数据库名称会对应文件系统中的文件名。尽管现在已经不这样处理了，但之前的许多限制遗留了下来。</p><p>此外，还有一些数据库名称是保留的。这些数据库可以被访问，但它们具有特殊的语义。具体如下。</p><ul><li><strong>admin</strong>：<code>admin</code> 数据库会在身份验证和授权时被使用。此外，某些管理操作需要访问此数据库。</li><li><strong>local</strong>：在副本集中，<code>local</code> 用于存储复制过程中所使用的数据，而 <code>local</code> 数据库本身不会被复制。</li><li><strong>config</strong>：MongoDB 的分片集群会使用 config 数据库存储关于每个分片的信息。通过将数据库名称与该库中的集合名称连接起来，可以获得一个完全限定的集合名称，称为命名空间</li></ul><h3 id="启动-mongodb" tabindex="-1"><a class="header-anchor" href="#启动-mongodb" aria-hidden="true">#</a> 启动 MongoDB</h3><p>启动 MongoDB 的方式：</p><ul><li>Unix 系统 - 执行 mongod</li><li>Windows 系统 - 执行 mongod.exe</li></ul><p>如果没有指定参数，则 mongod 会使用默认的数据目录 <code>/data/db/</code>。如果数据目录不存在或不可写，那么服务器端将无法启动。因此在启动 MongoDB 之前，创建数据目录（如 mkdir -p /data/db/）并确保对该目录有写权限非常重要。</p><p>默认情况下，MongoDB 会监听 27017 端口上的套接字连接。如果端口不可用，那么服务器将无法启动。</p><h3 id="mongodb-shell" tabindex="-1"><a class="header-anchor" href="#mongodb-shell" aria-hidden="true">#</a> MongoDB Shell</h3><p>MongoDB 内置了 MongoDB Shell 工具来提供命令行交互工具。</p><p>要启动 shell，可以执行 mongo 文件。</p><p>【示例】MongoDB Shell 基本操作</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看有哪些数据库</span>
<span class="token operator">&gt;</span> show dbs
admin            <span class="token number">0</span>.000GB
config           <span class="token number">0</span>.000GB
fc_open_core     <span class="token number">0</span>.000GB
<span class="token builtin class-name">local</span>            <span class="token number">0</span>.000GB
spring-tutorial  <span class="token number">0</span>.000GB
<span class="token builtin class-name">test</span>             <span class="token number">0</span>.919GB

<span class="token comment"># 切换到 test 数据库</span>
<span class="token operator">&gt;</span> use <span class="token builtin class-name">test</span>
switched to db <span class="token builtin class-name">test</span>

<span class="token comment"># 插入文档</span>
<span class="token operator">&gt;</span> db.user.insertOne<span class="token punctuation">(</span><span class="token punctuation">{</span> name: <span class="token string">&quot;dunwu&quot;</span>, sex: <span class="token string">&#39;man&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        <span class="token string">&quot;acknowledged&quot;</span> <span class="token builtin class-name">:</span> true,
        <span class="token string">&quot;insertedId&quot;</span> <span class="token builtin class-name">:</span> ObjectId<span class="token punctuation">(</span><span class="token string">&quot;670a281a2647017bf5f42962&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment"># 查询文档</span>
<span class="token punctuation">}</span>
<span class="token operator">&gt;</span> db.user.<span class="token function-name function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span> <span class="token string">&quot;_id&quot;</span> <span class="token builtin class-name">:</span> ObjectId<span class="token punctuation">(</span><span class="token string">&quot;670a281a2647017bf5f42962&quot;</span><span class="token punctuation">)</span>, <span class="token string">&quot;name&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;dunwu&quot;</span>, <span class="token string">&quot;sex&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;man&quot;</span> <span class="token punctuation">}</span>

<span class="token comment"># 更新文档</span>
<span class="token operator">&gt;</span> db.user.updateOne<span class="token punctuation">(</span><span class="token punctuation">{</span> name: <span class="token string">&quot;dunwu&quot;</span> <span class="token punctuation">}</span>, <span class="token punctuation">{</span> <span class="token variable">$set</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span> age: <span class="token number">30</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span> <span class="token string">&quot;acknowledged&quot;</span> <span class="token builtin class-name">:</span> true, <span class="token string">&quot;matchedCount&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">1</span>, <span class="token string">&quot;modifiedCount&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>

<span class="token comment"># 删除文档</span>
<span class="token operator">&gt;</span> db.user.deleteOne<span class="token punctuation">(</span><span class="token punctuation">{</span> name: <span class="token string">&quot;dunwu&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span> <span class="token string">&quot;acknowledged&quot;</span> <span class="token builtin class-name">:</span> true, <span class="token string">&quot;deletedCount&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>

<span class="token comment"># 退出 MongoDB Shell</span>
<span class="token operator">&gt;</span> quit<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h3><p>MongoDB 中的文档可以被认为是“类似于 JSON”的形式。</p><p>MongoDB 基本数据类型如下：</p><p><strong><code>null</code></strong> - <code>null</code> 类型用于表示空值或不存在的字段。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span> <span class="token property">&quot;x&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>布尔类型</strong> - 布尔类型的值可以为 true 或者 false。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span> <span class="token property">&quot;x&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>数值类型</strong> - shell 默认使用 64 位的浮点数来表示数值类型。因此，下面的数值在 shell 中看起来是“正常”的：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;x&quot;</span> <span class="token operator">:</span> <span class="token number">3.14</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token property">&quot;x&quot;</span> <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>对于整数，可以使用 NumberInt 或 NumberLong 类，它们分别表示 4 字节和 8 字节的有符号整数。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;x&quot;</span> <span class="token operator">:</span> NumberInt(<span class="token string">&quot;3&quot;</span>)<span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token property">&quot;x&quot;</span> <span class="token operator">:</span> NumberLong(<span class="token string">&quot;3&quot;</span>)<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>字符串类型</strong> - 任何 UTF-8 字符串都可以使用字符串类型来表示。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span> <span class="token property">&quot;x&quot;</span><span class="token operator">:</span> <span class="token string">&quot;foobar&quot;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>日期类型</strong> - MongoDB 会将日期存储为 64 位整数，表示自 Unix 纪元（1970 年 1 月 1 日）以来的毫秒数，不包含时区信息。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;x&quot;</span> <span class="token operator">:</span> new Date()<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>正则表达式</strong> - 查询时可以使用正则表达式，语法与 JavaScript 的正则表达式语法相同。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;x&quot;</span> <span class="token operator">:</span> /foobar/i<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>数组类型</strong> - 集合或者列表可以表示为数组。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span> <span class="token property">&quot;x&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>内嵌文档</strong> - 文档可以嵌套其他文档，此时被嵌套的文档就成了父文档的值。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span> <span class="token property">&quot;x&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;foo&quot;</span><span class="token operator">:</span> <span class="token string">&quot;bar&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>Object ID</strong> - Object ID 是一个 12 字节的 ID，是文档的唯一标识。MongoDB 中存储的每个文档都必须有一个 &quot;<code>_id</code>&quot; 键。&quot;<code>_id</code>&quot; 的值可以是任何类型，但其默认为 ObjectId。在单个集合中，每个文档的 &quot;<code>_id</code>&quot; 值都必须是唯一的，以确保集合中的每个文档都可以被唯一标识。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;x&quot;</span> <span class="token operator">:</span> ObjectId()<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>ObjectId 占用了 12 字节的存储空间，可以用 24 个十六进制数字组成的字符串来表示。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>0  |  1  |  2  |  3  |  4  |  5  |  6  |  7  |  8  |  9  |  10  |  11
         时间戳       |           随机值            | 计数器（起始值随机）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>ObjectId 的前 4 字节是从 Unix 纪元开始以秒为单位的时间戳。这提供了一些有用的属性。时间戳与接下来的 5 字节（稍后会介绍）组合在一起，在秒级别的粒度上提供了唯一性。</p><p><strong>二进制数据</strong> - 二进制数据是任意字节的字符串，不能通过 shell 操作。如果要将非 UTF-8 字符串存入数据库，那么使用二进制数据是唯一的方法。</p><p>代码 - MongoDB 还可以在查询和文档中存储任意的 JavaScript 代码：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;x&quot;</span> <span class="token operator">:</span> function() <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最后，还有一些类型主要在内部使用（或被其他类型取代）。这些将根据需要在文中特别说明</p><h3 id="使用-mongodb-shell-略" tabindex="-1"><a class="header-anchor" href="#使用-mongodb-shell-略" aria-hidden="true">#</a> 使用 MongoDB shell（略）</h3><h2 id="第-3-章-创建、更新和删除文档" tabindex="-1"><a class="header-anchor" href="#第-3-章-创建、更新和删除文档" aria-hidden="true">#</a> 第 3 章 创建、更新和删除文档</h2><h3 id="插入文档" tabindex="-1"><a class="header-anchor" href="#插入文档" aria-hidden="true">#</a> 插入文档</h3><h4 id="insertone" tabindex="-1"><a class="header-anchor" href="#insertone" aria-hidden="true">#</a> insertOne</h4><p><code>insertOne</code> 方法用于<strong>插入单条文档</strong>。</p><p>insertOne 方法语法如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>db.collection.insertOne(document, options)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>document - 要插入的单个文档。</li><li>options（可选） - 一个可选参数对象，可以包含 <code>writeConcern</code> 和 <code>bypassDocumentValidation</code> 等。</li></ul><p>【示例】向 <code>movies</code> 集合中插入一条文档</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>&gt; db.movies.insertOne(<span class="token punctuation">{</span><span class="token property">&quot;title&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Stand by Me&quot;</span><span class="token punctuation">}</span>)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="insertmany" tabindex="-1"><a class="header-anchor" href="#insertmany" aria-hidden="true">#</a> insertMany</h4><p><code>insertMany</code> 方法用于<strong>批量插入文档</strong>。</p><p><code>insertMany</code> 方法语法如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>db.collection.insertMany(documents, options)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>documents - 要插入的文档数组。</li><li>options（可选） - 一个可选参数对象，可以包含 <code>ordered</code>、<code>writeConcern</code> 和 <code>bypassDocumentValidation</code> 等。</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>&gt; db.movies.insertMany(<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token property">&quot;title&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Ghostbusters&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token property">&quot;title&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;E.T.&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token property">&quot;title&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Blade Runner&quot;</span><span class="token punctuation">}</span><span class="token punctuation">]</span>);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在当前版本中，MongoDB 能够接受的最大消息长度是 48MB，因此在单次批量插入中能够插入的文档是有限制的。如果尝试插入超过 48MB 的数据，则多数驱动程序会将这个批量插入请求拆分为多个 48MB 的批量插入请求。</p><p>MongoDB 会对要插入的数据进行最基本的检查：检查文档的基本结构，如果不存在 &quot;<code>_id</code>&quot; 字段，则自动添加一个。</p><h3 id="删除文档" tabindex="-1"><a class="header-anchor" href="#删除文档" aria-hidden="true">#</a> 删除文档</h3><h4 id="deleteone" tabindex="-1"><a class="header-anchor" href="#deleteone" aria-hidden="true">#</a> deleteOne</h4><p><code>deleteOne</code> 方法用于<strong>删除单条文档</strong></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>&gt; db.movies.find()
<span class="token punctuation">{</span> <span class="token property">&quot;_id&quot;</span> <span class="token operator">:</span> ObjectId(<span class="token string">&quot;670a31a206fe06538fb4d138&quot;</span>)<span class="token punctuation">,</span> <span class="token property">&quot;title&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Stand by Me&quot;</span> <span class="token punctuation">}</span>
<span class="token punctuation">{</span> <span class="token property">&quot;_id&quot;</span> <span class="token operator">:</span> ObjectId(<span class="token string">&quot;670a31ab06fe06538fb4d139&quot;</span>)<span class="token punctuation">,</span> <span class="token property">&quot;title&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Ghostbusters&quot;</span> <span class="token punctuation">}</span>
<span class="token punctuation">{</span> <span class="token property">&quot;_id&quot;</span> <span class="token operator">:</span> ObjectId(<span class="token string">&quot;670a31ab06fe06538fb4d13a&quot;</span>)<span class="token punctuation">,</span> <span class="token property">&quot;title&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;E.T.&quot;</span> <span class="token punctuation">}</span>
<span class="token punctuation">{</span> <span class="token property">&quot;_id&quot;</span> <span class="token operator">:</span> ObjectId(<span class="token string">&quot;670a31ab06fe06538fb4d13b&quot;</span>)<span class="token punctuation">,</span> <span class="token property">&quot;title&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Blade Runner&quot;</span> <span class="token punctuation">}</span>

&gt; db.movies.deleteOne(<span class="token punctuation">{</span><span class="token property">&quot;_id&quot;</span> <span class="token operator">:</span> ObjectId(<span class="token string">&quot;670a31a206fe06538fb4d138&quot;</span>)<span class="token punctuation">}</span>)
<span class="token punctuation">{</span> <span class="token property">&quot;acknowledged&quot;</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token property">&quot;deletedCount&quot;</span> <span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>

&gt; db.movies.find()
<span class="token punctuation">{</span> <span class="token property">&quot;_id&quot;</span> <span class="token operator">:</span> ObjectId(<span class="token string">&quot;670a31ab06fe06538fb4d139&quot;</span>)<span class="token punctuation">,</span> <span class="token property">&quot;title&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Ghostbusters&quot;</span> <span class="token punctuation">}</span>
<span class="token punctuation">{</span> <span class="token property">&quot;_id&quot;</span> <span class="token operator">:</span> ObjectId(<span class="token string">&quot;670a31ab06fe06538fb4d13a&quot;</span>)<span class="token punctuation">,</span> <span class="token property">&quot;title&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;E.T.&quot;</span> <span class="token punctuation">}</span>
<span class="token punctuation">{</span> <span class="token property">&quot;_id&quot;</span> <span class="token operator">:</span> ObjectId(<span class="token string">&quot;670a31ab06fe06538fb4d13b&quot;</span>)<span class="token punctuation">,</span> <span class="token property">&quot;title&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Blade Runner&quot;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="deletemany" tabindex="-1"><a class="header-anchor" href="#deletemany" aria-hidden="true">#</a> deleteMany</h4><p><code>deleteMany</code> 方法用于<strong>删除满足筛选条件的所有文档</strong></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>&gt; db.movies.find()
<span class="token punctuation">{</span> <span class="token property">&quot;_id&quot;</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token property">&quot;title&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Top Gun&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;year&quot;</span> <span class="token operator">:</span> <span class="token number">1986</span> <span class="token punctuation">}</span>
<span class="token punctuation">{</span> <span class="token property">&quot;_id&quot;</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token property">&quot;title&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Back to the Future&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;year&quot;</span> <span class="token operator">:</span> <span class="token number">1985</span> <span class="token punctuation">}</span>
<span class="token punctuation">{</span> <span class="token property">&quot;_id&quot;</span> <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token property">&quot;title&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Sixteen Candles&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;year&quot;</span> <span class="token operator">:</span> <span class="token number">1984</span> <span class="token punctuation">}</span>
<span class="token punctuation">{</span> <span class="token property">&quot;_id&quot;</span> <span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token property">&quot;title&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;The Terminator&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;year&quot;</span> <span class="token operator">:</span> <span class="token number">1984</span> <span class="token punctuation">}</span>
<span class="token punctuation">{</span> <span class="token property">&quot;_id&quot;</span> <span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token property">&quot;title&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Scarface&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;year&quot;</span> <span class="token operator">:</span> <span class="token number">1983</span> <span class="token punctuation">}</span>

&gt; db.movies.deleteMany(<span class="token punctuation">{</span><span class="token property">&quot;year&quot;</span> <span class="token operator">:</span> <span class="token number">1984</span><span class="token punctuation">}</span>)<span class="token punctuation">{</span> <span class="token property">&quot;acknowledged&quot;</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token property">&quot;deletedCount&quot;</span> <span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span>

&gt; db.movies.find()
<span class="token punctuation">{</span> <span class="token property">&quot;_id&quot;</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token property">&quot;title&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Top Gun&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;year&quot;</span> <span class="token operator">:</span> <span class="token number">1986</span> <span class="token punctuation">}</span>
<span class="token punctuation">{</span> <span class="token property">&quot;_id&quot;</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token property">&quot;title&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Back to the Future&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;year&quot;</span> <span class="token operator">:</span> <span class="token number">1985</span> <span class="token punctuation">}</span>
<span class="token punctuation">{</span> <span class="token property">&quot;_id&quot;</span> <span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token property">&quot;title&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Scarface&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;year&quot;</span> <span class="token operator">:</span> <span class="token number">1983</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用 <code>deleteMany</code> 来<strong>删除集合中的所有文档</strong></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>&gt; db.movies.find()
<span class="token punctuation">{</span> <span class="token property">&quot;_id&quot;</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> &quot;titl
e<span class="token string">&quot; : &quot;</span>Top Gun<span class="token string">&quot;, &quot;</span>year<span class="token string">&quot; : 1986 }{ &quot;</span>_id<span class="token string">&quot; : 1, &quot;</span>titl
e<span class="token string">&quot; : &quot;</span>Back to the Future<span class="token string">&quot;, &quot;</span>year<span class="token string">&quot; : 1985 }{ &quot;</span>_id<span class="token string">&quot; : 3, &quot;</span>titl
e<span class="token string">&quot; : &quot;</span>Sixteen Candles<span class="token string">&quot;, &quot;</span>year<span class="token string">&quot; : 1984 }{ &quot;</span>_id<span class="token string">&quot; : 4, &quot;</span>titl
e<span class="token string">&quot; : &quot;</span>The Terminator<span class="token string">&quot;, &quot;</span>year<span class="token string">&quot; : 1984 }{ &quot;</span>_id<span class="token string">&quot; : 5, &quot;</span>titl
e<span class="token string">&quot; : &quot;</span>Scarface<span class="token string">&quot;, &quot;</span>year&quot; <span class="token operator">:</span> <span class="token number">1983</span> <span class="token punctuation">}</span>

&gt; db.movies.deleteMany(<span class="token punctuation">{</span><span class="token punctuation">}</span>)
<span class="token punctuation">{</span> <span class="token property">&quot;acknowledged&quot;</span> <span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token property">&quot;deletedCount&quot;</span> <span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span>

&gt; db.movies.find()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="更新文档" tabindex="-1"><a class="header-anchor" href="#更新文档" aria-hidden="true">#</a> 更新文档</h3><h4 id="replaceone" tabindex="-1"><a class="header-anchor" href="#replaceone" aria-hidden="true">#</a> replaceOne</h4><p><code>replaceOne</code> 方法用于<strong>将新文档完全替换匹配的文档</strong>。这对于进行大规模模式迁移的场景非常有用。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>db.collection.replaceOne(filter, replacement, options)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>filter</strong> - 用于查找文档的查询条件。</li><li><strong>replacement</strong> - 新的文档，将替换旧的文档。</li><li><strong>options</strong> - 可选参数对象，如 <code>upsert</code> 等。</li></ul><p>【示例】replaceOne 示例</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>db.collection.replaceOne(
    <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;Tom&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                  <span class="token comment">// 过滤条件</span>
    <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;Tom&quot;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">}</span>          <span class="token comment">// 新文档</span>
);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="updateone" tabindex="-1"><a class="header-anchor" href="#updateone" aria-hidden="true">#</a> updateOne</h4><p><code>updateOne</code> 方法用于<strong>更新单条文档</strong>。</p><p><code>updateOne</code> 方法语法如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>db.collection.updateOne(filter, update, options)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>filter</strong> - 用于查找文档的查询条件。</li><li><strong>update</strong> - 指定更新操作的文档或更新操作符。</li><li><strong>options</strong> - 可选参数对象，如 <code>upsert</code>、<code>arrayFilters</code> 等。</li></ul><p>【示例】updateOne 示例</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>db.collection.updateOne(
    <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;Tom&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token comment">// 过滤条件</span>
    <span class="token punctuation">{</span> $set<span class="token operator">:</span> <span class="token punctuation">{</span> age<span class="token operator">:</span> <span class="token number">19</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment">// 更新操作</span>
    <span class="token punctuation">{</span> upsert<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>                 <span class="token comment">// 可选参数</span>
);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="updatemany" tabindex="-1"><a class="header-anchor" href="#updatemany" aria-hidden="true">#</a> updateMany</h4><p><code>updateMany</code> 方法用于<strong>批量更新文档</strong>。</p><p><code>updateMany</code> 方法语法如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>db.collection.updateMany(filter, update, options)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>filter</strong> - 用于查找文档的查询条件。</li><li><strong>update</strong> - 指定更新操作的文档或更新操作符。</li><li><strong>options</strong> - 可选参数对象，如 <code>upsert</code>、<code>arrayFilters</code> 等。</li></ul><p>【示例】updateMany 示例</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>db.collection.updateMany(
    <span class="token punctuation">{</span> age<span class="token operator">:</span> <span class="token punctuation">{</span> $lt<span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>             <span class="token comment">// 过滤条件</span>
    <span class="token punctuation">{</span> $set<span class="token operator">:</span> <span class="token punctuation">{</span> status<span class="token operator">:</span> <span class="token string">&quot;active&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token comment">// 更新操作</span>
    <span class="token punctuation">{</span> upsert<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>                  <span class="token comment">// 可选参数</span>
);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="更新运算符" tabindex="-1"><a class="header-anchor" href="#更新运算符" aria-hidden="true">#</a> 更新运算符</h4><p><strong>&quot;$set&quot; 用来设置一个字段的值</strong>。如果这个字段不存在，则创建该字段。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// 使用 &quot;$set&quot; 来修改值</span>
&gt; db.users.updateOne(<span class="token punctuation">{</span><span class="token property">&quot;name&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;joe&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token property">&quot;$set&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">&quot;favorite book&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Green Eggs and Ham&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>)

<span class="token comment">// 使用 &quot;$set&quot; 来修改键的类型</span>
<span class="token comment">// 将 &quot;favorite book&quot; 键的值更改为一个数组</span>
&gt; db.users.updateOne(<span class="token punctuation">{</span><span class="token property">&quot;name&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;joe&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token property">&quot;$set&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">&quot;favorite book&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Green Eggs and Ham&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>)

<span class="token comment">// 如果用户发现自己其实不爱读书，则可以用 &quot;$unset&quot; 将这个键完全删除</span>
&gt; db.users.updateOne(<span class="token punctuation">{</span><span class="token property">&quot;name&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;joe&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token property">&quot;$unset&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">&quot;favorite book&quot;</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span>)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>&quot;$inc&quot; 运算符可以用来修改已存在的键值或者在该键不存在时创建它</strong>。对于更新分析数据、因果关系、投票或者其他有数值变化的地方，使用这个会非常方便。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>&gt; db.games.updateOne(<span class="token punctuation">{</span><span class="token property">&quot;game&quot;</span><span class="token operator">:</span><span class="token string">&quot;pinball&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;user&quot;</span><span class="token operator">:</span><span class="token string">&quot;joe&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token property">&quot;$inc&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">&quot;score&quot;</span><span class="token operator">:</span><span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">}</span>)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>如果数组已存在，&quot;$push&quot; 就会将元素添加到数组末尾；如果数组不存在，则会创建一个新的数组</strong>。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>&gt; db.blog.posts.updateOne(<span class="token punctuation">{</span><span class="token property">&quot;title&quot;</span><span class="token operator">:</span><span class="token string">&quot;A blog post&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token property">&quot;$push&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">&quot;comments&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;joe&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;email&quot;</span><span class="token operator">:</span><span class="token string">&quot;joe@example.com&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;content&quot;</span><span class="token operator">:</span><span class="token string">&quot;nice post.&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>**如果将数组视为队列或者栈，那么可以使用 &quot;<span class="katex-error" title="ParseError: KaTeX parse error: Expected &#39;}&#39;, got &#39;EOF&#39; at end of input: …从任意一端删除元素**。\`{&quot;" style="color:#cc0000;">pop&quot;从任意一端删除元素**。\`{&quot;</span>pop&quot;:{&quot;key&quot;:1}}<code> 会从数组末尾删除一个元素，</code>{&quot;$pop&quot;:{&quot;key&quot;:-1}}\` 则会从头部删除它。</p><p><strong>&quot;$pull&quot; 用于删除与给定条件匹配的数组元素</strong>。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>&gt; db.lists.updateOne(<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token property">&quot;$pull&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">&quot;todo&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;laundry&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="upsert" tabindex="-1"><a class="header-anchor" href="#upsert" aria-hidden="true">#</a> upsert</h4><p>upsert 是一种特殊类型的更新。如果找不到与筛选条件相匹配的文档，则会以这个条件和更新文档为基础来创建一个新文档；如果找到了匹配的文档，则进行正常的更新。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>&gt; db.users.updateOne(<span class="token punctuation">{</span><span class="token property">&quot;rep&quot;</span> <span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token property">&quot;$inc&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">&quot;rep&quot;</span> <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token property">&quot;upsert&quot;</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span>)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="第-4-章-查询" tabindex="-1"><a class="header-anchor" href="#第-4-章-查询" aria-hidden="true">#</a> 第 4 章 查询</h2><h3 id="find-简介" tabindex="-1"><a class="header-anchor" href="#find-简介" aria-hidden="true">#</a> find 简介</h3><p><strong>MongoDB 中使用 find 方法来进行查询</strong>。查询就是返回集合中文档的一个子集，子集的范围从 0 个文档到整个集合。要返回哪些文档由 find 的第一个参数决定，该参数是一个用于指定查询条件的文档。</p><p>find 的语法格式如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>db.collection.find(query<span class="token punctuation">,</span> projection)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>query</strong> - 用于查找文档的查询条件。默认为 <code>{}</code>，即匹配所有文档。</li><li><strong>projection</strong>（可选） - 指定返回结果中包含或排除的字段。</li></ul><p>【示例】查找示例</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// 查找所有文档</span>
&gt; db.collection.find()

<span class="token comment">// 按条件查找文档</span>
&gt; db.collection.find(<span class="token punctuation">{</span> age<span class="token operator">:</span> <span class="token punctuation">{</span> $gt<span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>)

<span class="token comment">// 按条件查找文档，并只返回指定字段</span>
&gt; db.collection.find(
    <span class="token punctuation">{</span> age<span class="token operator">:</span> <span class="token punctuation">{</span> $gt<span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> _id<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span>
)

<span class="token comment">// 以格式化的方式来显示所有文档</span>
&gt; db.collection.find().pretty()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查询条件" tabindex="-1"><a class="header-anchor" href="#查询条件" aria-hidden="true">#</a> 查询条件</h3><h4 id="比较操作符" tabindex="-1"><a class="header-anchor" href="#比较操作符" aria-hidden="true">#</a> 比较操作符</h4><table><thead><tr><th style="text-align:left;">操作符</th><th style="text-align:left;">描述</th><th style="text-align:left;">示例</th></tr></thead><tbody><tr><td style="text-align:left;"><code>$eq</code></td><td style="text-align:left;">等于</td><td style="text-align:left;"><code>{ age: { $eq: 25 } }</code></td></tr><tr><td style="text-align:left;"><code>$ne</code></td><td style="text-align:left;">不等于</td><td style="text-align:left;"><code>{ age: { $ne: 25 } }</code></td></tr><tr><td style="text-align:left;"><code>$gt</code></td><td style="text-align:left;">大于</td><td style="text-align:left;"><code>{ age: { $gt: 25 } }</code></td></tr><tr><td style="text-align:left;"><code>$gte</code></td><td style="text-align:left;">大于等于</td><td style="text-align:left;"><code>{ age: { $gte: 25 } }</code></td></tr><tr><td style="text-align:left;"><code>$lt</code></td><td style="text-align:left;">小于</td><td style="text-align:left;"><code>{ age: { $lt: 25 } }</code></td></tr><tr><td style="text-align:left;"><code>$lte</code></td><td style="text-align:left;">小于等于</td><td style="text-align:left;"><code>{ age: { $lte: 25 } }</code></td></tr><tr><td style="text-align:left;"><code>$in</code></td><td style="text-align:left;">在指定的数组中</td><td style="text-align:left;"><code>{ age: { $in: [25, 30, 35] } }</code></td></tr><tr><td style="text-align:left;"><code>$nin</code></td><td style="text-align:left;">不在指定的数组中</td><td style="text-align:left;"><code>{ age: { $nin: [25, 30, 35] } }</code></td></tr></tbody></table><p>【示例】查找年龄大于 25 且城市为 &quot;New York&quot; 的文档：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>db.collection.find(<span class="token punctuation">{</span> age<span class="token operator">:</span> <span class="token punctuation">{</span> $gt<span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> city<span class="token operator">:</span> <span class="token string">&quot;New York&quot;</span> <span class="token punctuation">}</span>);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="逻辑操作符" tabindex="-1"><a class="header-anchor" href="#逻辑操作符" aria-hidden="true">#</a> 逻辑操作符</h4><table><thead><tr><th style="text-align:left;">操作符</th><th style="text-align:left;">描述</th><th style="text-align:left;">示例</th></tr></thead><tbody><tr><td style="text-align:left;"><code>$and</code></td><td style="text-align:left;">逻辑与，符合所有条件</td><td style="text-align:left;"><code>{ $and: [ { age: { $gt: 25 } }, { city: &quot;New York&quot; } ] }</code></td></tr><tr><td style="text-align:left;"><code>$or</code></td><td style="text-align:left;">逻辑或，符合任意条件</td><td style="text-align:left;"><code>{ $or: [ { age: { $lt: 25 } }, { city: &quot;New York&quot; } ] }</code></td></tr><tr><td style="text-align:left;"><code>$not</code></td><td style="text-align:left;">取反，不符合条件</td><td style="text-align:left;"><code>{ age: { $not: { $gt: 25 } } }</code></td></tr><tr><td style="text-align:left;"><code>$nor</code></td><td style="text-align:left;">逻辑与非，均不符合条件</td><td style="text-align:left;"><code>{ $nor: [ { age: { $gt: 25 } }, { city: &quot;New York&quot; } ] }</code></td></tr></tbody></table><p>【示例】查找年龄大于 25 或城市为 &quot;New York&quot; 的文档：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>db.collection.find(<span class="token punctuation">{</span> $or<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span> age<span class="token operator">:</span> <span class="token punctuation">{</span> $gt<span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> city<span class="token operator">:</span> <span class="token string">&quot;New York&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span>);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="元素操作符" tabindex="-1"><a class="header-anchor" href="#元素操作符" aria-hidden="true">#</a> 元素操作符</h4><table><thead><tr><th style="text-align:left;">操作符</th><th style="text-align:left;">描述</th><th style="text-align:left;">示例</th></tr></thead><tbody><tr><td style="text-align:left;"><code>$exists</code></td><td style="text-align:left;">字段是否存在</td><td style="text-align:left;"><code>{ age: { $exists: true } }</code></td></tr><tr><td style="text-align:left;"><code>$type</code></td><td style="text-align:left;">字段的 BSON 类型</td><td style="text-align:left;"><code>{ age: { $type: &quot;int&quot; } }</code></td></tr></tbody></table><p>【示例】查找包含 age 字段的文档：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>db.myCollection.find(<span class="token punctuation">{</span> age<span class="token operator">:</span> <span class="token punctuation">{</span> $exists<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="数组操作符" tabindex="-1"><a class="header-anchor" href="#数组操作符" aria-hidden="true">#</a> 数组操作符</h4><table><thead><tr><th style="text-align:left;">操作符</th><th style="text-align:left;">描述</th><th style="text-align:left;">示例</th></tr></thead><tbody><tr><td style="text-align:left;"><code>$all</code></td><td style="text-align:left;">数组包含所有指定的元素</td><td style="text-align:left;"><code>{ tags: { $all: [&quot;red&quot;, &quot;blue&quot;] } }</code></td></tr><tr><td style="text-align:left;"><code>$elemMatch</code></td><td style="text-align:left;">数组中的元素匹配指定条件</td><td style="text-align:left;"><code>{ results: { $elemMatch: { score: { $gt: 80, $lt: 85 } } } }</code></td></tr><tr><td style="text-align:left;"><code>$size</code></td><td style="text-align:left;">数组的长度等于指定值</td><td style="text-align:left;"><code>{ tags: { $size: 3 } }</code></td></tr><tr><td style="text-align:left;"><code>slice</code></td><td style="text-align:left;">返回一个数组键中元素的子集</td><td style="text-align:left;"></td></tr></tbody></table><p>查询数组元素的方式与查询标量值相同。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// 插入数组列表</span>
db.food.insertOne(<span class="token punctuation">{</span><span class="token property">&quot;fruit&quot;</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;peach&quot;</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
<span class="token comment">// 查找数组中的 banana 元素</span>
db.food.find(<span class="token punctuation">{</span><span class="token property">&quot;fruit&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">}</span>)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要通过多个元素来匹配数组，那么可以使用 &quot;$all&quot;。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>db.food.insertOne(<span class="token punctuation">{</span><span class="token property">&quot;_id&quot;</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token property">&quot;fruit&quot;</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;peach&quot;</span><span class="token punctuation">]</span><span class="token punctuation">}</span>)
db.food.insertOne(<span class="token punctuation">{</span><span class="token property">&quot;_id&quot;</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token property">&quot;fruit&quot;</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;kumquat&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;orange&quot;</span><span class="token punctuation">]</span><span class="token punctuation">}</span>)
db.food.insertOne(<span class="token punctuation">{</span><span class="token property">&quot;_id&quot;</span> <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token property">&quot;fruit&quot;</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;cherry&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;apple&quot;</span><span class="token punctuation">]</span><span class="token punctuation">}</span>)

<span class="token comment">// 查询同时包含元素 &quot;apple&quot; 和 &quot;banana&quot; 的文档</span>
db.food.find(<span class="token punctuation">{</span>fruit <span class="token operator">:</span> <span class="token punctuation">{</span>$all <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span>)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查询特定长度的数组</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>db.food.find(<span class="token punctuation">{</span><span class="token property">&quot;fruit&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">&quot;$size&quot;</span> <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">}</span>)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="其他操作符" tabindex="-1"><a class="header-anchor" href="#其他操作符" aria-hidden="true">#</a> 其他操作符</h4><p>还有一些其他操作符如下：</p><table><thead><tr><th style="text-align:left;">操作符</th><th style="text-align:left;">描述</th><th style="text-align:left;">示例</th></tr></thead><tbody><tr><td style="text-align:left;"><code>$regex</code></td><td style="text-align:left;">匹配正则表达式</td><td style="text-align:left;"><code>{ name: { $regex: /^A/ } }</code></td></tr><tr><td style="text-align:left;"><code>$text</code></td><td style="text-align:left;">进行文本搜索</td><td style="text-align:left;"><code>{ $text: { $search: &quot;coffee&quot; } }</code></td></tr><tr><td style="text-align:left;"><code>$where</code></td><td style="text-align:left;">使用 JavaScript 表达式进行条件过滤</td><td style="text-align:left;"><code>{ $where: &quot;this.age &gt; 25&quot; }</code></td></tr></tbody></table><p>查找名字以 &quot;A&quot; 开头的文档：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>db.myCollection.find(<span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token punctuation">{</span> $regex<span class="token operator">:</span> /^A/ <span class="token punctuation">}</span> <span class="token punctuation">}</span>)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="特定类型查询" tabindex="-1"><a class="header-anchor" href="#特定类型查询" aria-hidden="true">#</a> 特定类型查询</h3><h4 id="null" tabindex="-1"><a class="header-anchor" href="#null" aria-hidden="true">#</a> null</h4><p>null 会匹配值为 null 的文档以及缺少这个键的所有文档</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>&gt; db.c.find(<span class="token punctuation">{</span><span class="token property">&quot;z&quot;</span> <span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">}</span>)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果仅想匹配键值为 null 的文档，则需要检查该键的值是否为 null，并且通过 &quot;$exists&quot; 条件确认该键已存在。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>db.c.find(<span class="token punctuation">{</span><span class="token property">&quot;z&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">&quot;$eq&quot;</span> <span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span> <span class="token property">&quot;$exists&quot;</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">}</span>)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="正则表达式" tabindex="-1"><a class="header-anchor" href="#正则表达式" aria-hidden="true">#</a> 正则表达式</h4><p>$regex&quot; 可以在查询中为字符串的模式匹配提供正则表达式功能。正则表达式对于灵活的字符串匹配非常有用。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>&gt; db.users.find( <span class="token punctuation">{</span><span class="token property">&quot;name&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">&quot;$regex&quot;</span> <span class="token operator">:</span> /joe/i <span class="token punctuation">}</span> <span class="token punctuation">}</span>)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>MongoDB 会使用 Perl 兼容的正则表达式（PCRE）库来对正则表达式进行匹配。任何 PCRE 支持的正则表达式语法都能被 MongoDB 接受。在查询中使用正则表达式之前，最好先在 JavaScript shell 中检查一下语法，这样可以确保匹配与预想的一致。</p><h4 id="查询内嵌文档" tabindex="-1"><a class="header-anchor" href="#查询内嵌文档" aria-hidden="true">#</a> 查询内嵌文档</h4><p>假设文档形式如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;first&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Joe&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;last&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Schmoe&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token number">45</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查询 first 属性为 Joe，last 属性为 Schmoe 的文档：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>db.people.find({&quot;name.first&quot; : &quot;Joe&quot;, &quot;name.last&quot; : &quot;Schmoe&quot;})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="where-查询" tabindex="-1"><a class="header-anchor" href="#where-查询" aria-hidden="true">#</a> <code>$where</code> 查询</h4><p><code>$where</code> 允许你在查询中执行任意的 JavaScript 代码。这样就能在查询中做大部分事情了。除非绝对必要，否则不应该使用 &quot;$where&quot; 查询：它们比常规查询慢得多。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>db.foo.find(<span class="token punctuation">{</span><span class="token property">&quot;$where&quot;</span> <span class="token operator">:</span> function () <span class="token punctuation">{</span>
	for (var current in this) <span class="token punctuation">{</span>
		for (var other in this) <span class="token punctuation">{</span>
			if (current != other &amp;&amp; this<span class="token punctuation">[</span>current<span class="token punctuation">]</span> == this<span class="token punctuation">[</span>other<span class="token punctuation">]</span>) <span class="token punctuation">{</span>
				return <span class="token boolean">true</span>;
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	return <span class="token boolean">false</span>;
<span class="token punctuation">}</span><span class="token punctuation">}</span>);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="游标" tabindex="-1"><a class="header-anchor" href="#游标" aria-hidden="true">#</a> 游标</h4><p>数据库会使用游标返回 find 的执行结果。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>var cursor = db.people.find();
cursor.forEach(function(x) <span class="token punctuation">{</span>
	print(x.name);
<span class="token punctuation">}</span>);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>limit()</code> 方法用于限制查询结果返回的文档数量。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>db.collection.find().limit(<span class="token number">10</span>);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>skip()</code> 方法用于跳过指定数量的文档，从而实现分页或分批查询。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// 跳过前 10 个文档，返回接下来的 10 个文档</span>
db.collection.find().skip(<span class="token number">10</span>).limit(<span class="token number">10</span>);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>sort()</code> 方法可以通过参数指定排序的字段。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// 先按 age 字段升序排序，再按 createdAt 字段降序排序</span>
db.myCollection.find().sort(<span class="token punctuation">{</span> age<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> createdAt<span class="token operator">:</span> <span class="token number">-1</span> <span class="token punctuation">}</span>);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,209),g={href:"https://book.douban.com/subject/35688800/",target:"_blank",rel:"noopener noreferrer"};function v(m,b){const a=o("ExternalLinkIcon");return p(),l("div",null,[r,n("p",null,[n("a",d,[s("《MongoDB 权威指南》"),t(a)]),s(" 学习笔记")]),c(" more "),k,n("ul",null,[n("li",null,[n("a",g,[s("《MongoDB 权威指南》"),t(a)])])])])}const y=e(u,[["render",v],["__file","index.html.vue"]]);export{y as default};
