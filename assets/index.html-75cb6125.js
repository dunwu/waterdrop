import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o,c,f as i,a as t,b as e,d as l,e as n}from"./app-8719940a.js";const r={},p=t("h1",{id:"mysql-数据类型",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#mysql-数据类型","aria-hidden":"true"},"#"),e(" MySQL 数据类型")],-1),y=t("div",{class:"hint-container info"},[t("p",{class:"hint-container-title"},"概述"),t("p",null,"数据类型在 MySQL 中扮演着至关重要的角色，它定义了表中每个字段可以存储的数据种类和格式。"),t("p",null,"MySQL 支持多种类型，大致可以分为三类：数值、时间和字符串类型。")],-1),f=n(`<h2 id="数值类型" tabindex="-1"><a class="header-anchor" href="#数值类型" aria-hidden="true">#</a> 数值类型</h2><p>MySQL 支持所有标准 SQL 数值数据类型。这些类型包括严格数值数据类型 (<code>INTEGER</code>、<code>SMALLINT</code>、<code>DECIMAL</code> 和 <code>NUMERIC</code>)，以及近似数值数据类型 (<code>FLOAT</code>、<code>REAL</code> 和 <code>DOUBLE PRECISION</code>)。</p><p>作为 SQL 标准的扩展，MySQL 也支持整数类型 <code>TINYINT</code>、<code>MEDIUMINT</code> 和 <code>BIGINT</code>。下面的表显示了需要的每个整数类型的存储和范围。</p><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">大小 （字节）</th><th style="text-align:left;">范围（有符号）</th><th style="text-align:left;">范围（无符号）</th><th style="text-align:left;">用途</th></tr></thead><tbody><tr><td style="text-align:left;"><code>TINYINT</code></td><td style="text-align:left;">1</td><td style="text-align:left;">(-128，127)</td><td style="text-align:left;">(0，255)</td><td style="text-align:left;">小整数值</td></tr><tr><td style="text-align:left;"><code>SMALLINT</code></td><td style="text-align:left;">2</td><td style="text-align:left;">(-32768，32767)</td><td style="text-align:left;">(0，65535)</td><td style="text-align:left;">大整数值</td></tr><tr><td style="text-align:left;"><code>MEDIUMINT</code></td><td style="text-align:left;">3</td><td style="text-align:left;">(-8388608，8388607)</td><td style="text-align:left;">(0，16777215)</td><td style="text-align:left;">大整数值</td></tr><tr><td style="text-align:left;"><code>INT</code> 或 <code>INTEGER</code></td><td style="text-align:left;">4</td><td style="text-align:left;">(-2147483648，2147483647)</td><td style="text-align:left;">(0，4294967295)</td><td style="text-align:left;">大整数值</td></tr><tr><td style="text-align:left;"><code>BIGINT</code></td><td style="text-align:left;">8</td><td style="text-align:left;">(-9223372036854775808，9223372036854775 807)</td><td style="text-align:left;">(0，18446744073709551615)</td><td style="text-align:left;">极大整数值</td></tr><tr><td style="text-align:left;"><code>FLOAT</code></td><td style="text-align:left;">4</td><td style="text-align:left;">(-3.402823466E+38，-1.175494351E-38)，0，(1.175494351E-38，3.402823466351E+38)</td><td style="text-align:left;">0，(1.175494351E-38，3.402823466E+38)</td><td style="text-align:left;">单精度 浮点数值</td></tr><tr><td style="text-align:left;"><code>DOUBLE</code></td><td style="text-align:left;">8</td><td style="text-align:left;">(-1.7976931348623157E+308，-2.2250738585072014E-308)，0，(2.2250738585072014E-308，1.7976931348623157E+308)</td><td style="text-align:left;">0，(2.2250738585072014E-308，1.7976931348623157E+308)</td><td style="text-align:left;">双精度 浮点数值</td></tr><tr><td style="text-align:left;"><code>DECIMAL</code></td><td style="text-align:left;">对 DECIMAL(M,D) ，如果 M&gt;D，为 M+2 否则为 D+2</td><td style="text-align:left;">依赖于 M 和 D 的值</td><td style="text-align:left;">依赖于 M 和 D 的值</td><td style="text-align:left;">小数值</td></tr></tbody></table><h2 id="日期和时间类型" tabindex="-1"><a class="header-anchor" href="#日期和时间类型" aria-hidden="true">#</a> 日期和时间类型</h2><p>表示时间值的日期和时间类型为 <code>DATETIME</code>、<code>DATE</code>、<code>TIMESTAMP</code>、<code>TIME</code> 和 <code>YEAR</code>。</p><p>每个时间类型有一个有效值范围和一个&quot;零&quot;值，当指定不合法的 MySQL 不能表示的值时使用&quot;零&quot;值。</p><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">大小 （字节）</th><th style="text-align:left;">范围</th><th style="text-align:left;">格式</th><th style="text-align:left;">用途</th></tr></thead><tbody><tr><td style="text-align:left;"><code>DATE</code></td><td style="text-align:left;">3</td><td style="text-align:left;">1000-01-01/9999-12-31</td><td style="text-align:left;">YYYY-MM-DD</td><td style="text-align:left;">日期值</td></tr><tr><td style="text-align:left;"><code>TIME</code></td><td style="text-align:left;">3</td><td style="text-align:left;">&#39;-838:59:59&#39;/&#39;838:59:59&#39;</td><td style="text-align:left;">HH:MM:SS</td><td style="text-align:left;">时间值或持续时间</td></tr><tr><td style="text-align:left;"><code>YEAR</code></td><td style="text-align:left;">1</td><td style="text-align:left;">1901/2155</td><td style="text-align:left;">YYYY</td><td style="text-align:left;">年份值</td></tr><tr><td style="text-align:left;"><code>DATETIME</code></td><td style="text-align:left;">8</td><td style="text-align:left;">&#39;1000-01-01 00:00:00&#39; 到 &#39;9999-12-31 23:59:59&#39;</td><td style="text-align:left;">YYYY-MM-DD hh:mm:ss</td><td style="text-align:left;">混合日期和时间值</td></tr><tr><td style="text-align:left;"><code>TIMESTAMP</code></td><td style="text-align:left;">4</td><td style="text-align:left;">&#39;1970-01-01 00:00:01&#39; UTC 到 &#39;2038-01-19 03:14:07&#39; UTC</td><td style="text-align:left;">YYYY-MM-DD hh:mm:ss</td><td style="text-align:left;">混合日期和时间值，时间戳</td></tr></tbody></table><p><code>DATETIME</code> 类型最终展现的形式为：<code>YYYY-MM-DD HH:MM:SS</code>，固定占用 8 个字节。从 MySQL 5.6 版本开始，<code>DATETIME</code> 类型支持毫秒，<code>DATETIME(N)</code> 中的 N 表示毫秒的精度。例如，<code>DATETIME(6)</code> 表示可以存储 6 位的毫秒值。同时，一些日期函数也支持精确到毫秒，例如常见的函数 <code>NOW</code>、<code>SYSDATE</code>。</p><p>TIMESTAMP 类型存储的内容为‘1970-01-01 00:00:00’到现在的毫秒数。TIMESTAMP 占用 4 个字节，因此其存储的时间上限只能到 “2038-01-19 03:14:07”。同类型 DATETIME 一样，从 MySQL 5.6 版本开始，类型 TIMESTAMP 也能支持毫秒。与 DATETIME 不同的是，<strong>若带有毫秒时，类型 TIMESTAMP 占用 7 个字节，而 DATETIME 无论是否存储毫秒信息，都占用 8 个字节</strong>。</p><h2 id="字符串类型" tabindex="-1"><a class="header-anchor" href="#字符串类型" aria-hidden="true">#</a> 字符串类型</h2><p>字符串类型指 <code>CHAR</code>、<code>VARCHAR</code>、<code>BINARY</code>、<code>VARBINARY</code>、<code>BLOB</code>、<code>TEXT</code>、<code>ENUM</code> 和 <code>SET</code>。</p><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">大小 （字节）</th><th style="text-align:left;">用途</th></tr></thead><tbody><tr><td style="text-align:left;"><code>CHAR</code></td><td style="text-align:left;">0-255</td><td style="text-align:left;">定长字符串</td></tr><tr><td style="text-align:left;"><code>VARCHAR</code></td><td style="text-align:left;">0-65535</td><td style="text-align:left;">变长字符串</td></tr><tr><td style="text-align:left;"><code>TINYBLOB</code></td><td style="text-align:left;">0-255</td><td style="text-align:left;">不超过 255 个字符的二进制字符串</td></tr><tr><td style="text-align:left;"><code>TINYTEXT</code></td><td style="text-align:left;">0-255</td><td style="text-align:left;">短文本字符串</td></tr><tr><td style="text-align:left;"><code>BLOB</code></td><td style="text-align:left;">0-65535</td><td style="text-align:left;">二进制形式的长文本数据</td></tr><tr><td style="text-align:left;"><code>TEXT</code></td><td style="text-align:left;">0-65535</td><td style="text-align:left;">长文本数据</td></tr><tr><td style="text-align:left;"><code>MEDIUMBLOB</code></td><td style="text-align:left;">0-16777215</td><td style="text-align:left;">二进制形式的中等长度文本数据</td></tr><tr><td style="text-align:left;"><code>MEDIUMTEXT</code></td><td style="text-align:left;">0-16777215</td><td style="text-align:left;">中等长度文本数据</td></tr><tr><td style="text-align:left;"><code>LONGBLOB</code></td><td style="text-align:left;">0-4294967295</td><td style="text-align:left;">二进制形式的极大文本数据</td></tr><tr><td style="text-align:left;"><code>LONGTEXT</code></td><td style="text-align:left;">0-4294967295</td><td style="text-align:left;">极大文本数据</td></tr></tbody></table><p>说明：</p><p><code>BLOB</code> 是一个二进制大对象，可以容纳可变数量的数据。有 4 种 BLOB 类型：<code>TINYBLOB</code>、<code>BLOB</code>、<code>MEDIUMBLOB</code> 和 <code>LONGBLOB</code>。它们区别在于可容纳存储范围不同。</p><p>有 4 种 <code>TEXT</code> 类型：<code>TINYTEXT</code>、<code>TEXT</code>、<code>MEDIUMTEXT</code> 和 <code>LONGTEXT</code>。对应的这 4 种 <code>BLOB</code> 类型，可存储的最大长度不同，可根据实际情况选择。</p><h2 id="数据类型常见问题" tabindex="-1"><a class="header-anchor" href="#数据类型常见问题" aria-hidden="true">#</a> 数据类型常见问题</h2><h3 id="char-和-varchar-的区别是什么" tabindex="-1"><a class="header-anchor" href="#char-和-varchar-的区别是什么" aria-hidden="true">#</a> CHAR 和 VARCHAR 的区别是什么？</h3><p><code>CHAR</code> 和 <code>VARCHAR</code> 的主要区别在于：<strong>CHAR 是定长字符串，VARCHAR 是变长字符串。</strong></p><ul><li><code>CHAR</code> 在存储时会在右边填充空格以达到指定的长度，检索时会去掉空格；<code>VARCHAR</code> 在存储时需要使用 1 或 2 个额外字节记录字符串的长度，检索时不需要处理。</li><li><code>CHAR</code> 更适合存储长度较短或者长度都差不多的字符串，例如 Bcrypt 算法、MD5 算法加密后的密码、身份证号码；<code>VARCHAR</code> 类型适合存储长度不确定或者差异较大的字符串，例如用户昵称、文章标题等。</li><li><code>CHAR(M)</code> 和 <code>VARCHAR(M)</code> 的 M 都代表能够保存的字符数的最大值，无论是字母、数字还是中文，每个都只占用一个字符。</li></ul><p><code>BINARY</code> 和 <code>VARBINARY</code> 类似于 <code>CHAR</code> 和 <code>VARCHAR</code>，不同的是它们包含二进制字符串而不要非二进制字符串。也就是说，它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值。</p><h3 id="金钱相关的数据用什么类型存储" tabindex="-1"><a class="header-anchor" href="#金钱相关的数据用什么类型存储" aria-hidden="true">#</a> 金钱相关的数据用什么类型存储？</h3><p>MySQL 中有 3 种类型可以表示浮点数，分别是 <code>FLOAT</code>、<code>DOUBLE</code> 和 <code>DECIMAL</code>。</p><p><strong>采用 <code>FLOAT</code> 和 <code>DOUBLE</code> 类型会丢失精度</strong>。数据的精确度取决于分配给每种数据类型的存储长度。由于计算机只能存储二进制，所以浮点型数据在存储的时候，必须转化成二进制。</p><ul><li>单精度类型 <code>FLOAT</code> 存储空间为 4 字节，即 32 位。</li><li>双精度类型 <code>DOUBLE</code> 存储空间为 8 字节，即 64 位。</li></ul><p>如果存储的数据转为二进制后，超过存储的位数，数据就被截断，因此存在丢失精度的可能。</p><p>更重要的是，从 MySQL 8.0.17 版本开始，当创建表用到类型 Float 或 Double 时，会抛出下面的警告：MySQL 提醒用户不该用上述浮点类型，甚至提醒将在之后版本中废弃浮点类型。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Specifying number of digits for floating point data types is deprecated and will be removed in a future release
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>【示例】丢失精度案例</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 创建表</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>test<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">\`</span>value<span class="token punctuation">\`</span></span> <span class="token keyword">FLOAT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> test <span class="token keyword">value</span> <span class="token punctuation">(</span><span class="token number">131072.32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">-----------+</span>
<span class="token operator">|</span> <span class="token keyword">value</span>     <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-----------+</span>
<span class="token operator">|</span> <span class="token number">131072.31</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-----------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.02</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：示例中，使用 FLOAT 类型，明明保留了两位小数。但是写入的数据却从 <code>131072.32</code> 变成了 <code>131072.31</code> 。</p><p><code>DECIMAL</code> 类型是 MySQL 官方唯一指定能精确存储的类型。因此，对于不允许丢失精度的场景（如金钱相关的业务），可以使用 <code>DECIMAL</code> 类型。</p><p>然而，在海量并发的互联网业务中使用，金额字段的设计并不推荐使用 <code>DECIMAL</code> 类型，而更推荐使用 <code>BIGINT</code> 整型类型。这里会用到一个巧思：将资金类型的数据用分为单位存储，而不是用元为单位存储。如 1 元在数据库中用整型类型 100 存储。</p><p>为什么更推荐用 <code>BIGINT</code> 存储金钱数据？因为 <code>DECIMAL</code> 是个变长字段，若要定义金额字段，则定义为 <code>DECIMAL(8,2)</code> 是远远不够的。这样只能表示存储最大值为 999999.99，百万级的资金存储。用户的金额至少要存储百亿的字段，而统计局的 GDP 金额字段则可能达到数十万亿级别。用类型 <code>DECIMAL</code> 定义，不好统一。另外重要的是，类型 <code>DECIMAL</code> 是通过二进制实现的一种编码方式，计算效率远不如整型来的高效。因此，推荐使用 <code>BIGINT</code> 来存储金额相关的字段。</p>`,34),g={href:"http://blog.leanote.com/post/weibo-007/mysql_float_double_decimal",target:"_blank",rel:"noopener noreferrer"},u=n(`<h3 id="如何存储-emoji-😃" tabindex="-1"><a class="header-anchor" href="#如何存储-emoji-😃" aria-hidden="true">#</a> 如何存储 emoji 😃？</h3><p>在表结构设计中，除了将列定义为 <code>CHAR</code> 和 <code>VARCHAR</code> 用以存储字符以外，还需要额外定义字符对应的字符集，因为每种字符在不同字符集编码下，对应着不同的二进制值。常见的字符集有 <code>gbk</code>、<code>utf8</code>，通常推荐把默认字符集设置为 <code>utf8</code>。</p><p>随着移动互联网的飞速发展，<strong>推荐把 MySQL 的默认字符集设置为 <code>utf8mb4</code></strong>，否则，某些 emoji 表情字符无法在 UTF8 字符集下存储。</p><p>【示例】设置表的字符集为 <code>utf8mb4</code></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> test <span class="token keyword">CHARSET</span> utf8mb4<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>注意：上述修改只是将表的字符集修改为 <code>utf8mb4</code>，下次新增列时，若不显式地指定字符集，新列的字符集会变更为 <code>utf8mb4</code>，<strong>但对于已经存在的列，其默认字符集并不做修改</strong>。</p></blockquote><p>【示例】设置表的默认字符集为 <code>utf8mb4</code></p><p>正确设置 <code>utf8mb4</code> 字符集方法如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> test <span class="token keyword">CONVERT</span> <span class="token keyword">TO</span> <span class="token keyword">CHARSET</span> utf8mb4<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="时间数据选择-datetime-还是-timestamp" tabindex="-1"><a class="header-anchor" href="#时间数据选择-datetime-还是-timestamp" aria-hidden="true">#</a> 时间数据选择 DATETIME 还是 TIMESTAMP？</h3><p>表结构设计时，对时间字段的存储，通常会有 3 种选择：<code>DATETIME</code>、<code>TIMESTAMP</code>、<code>INT</code>。</p><p><code>INT</code> 类型就是直接存储 ‘1970-01-01 00:00:00’ 到现在的毫秒数，本质和 <code>TIMESTAMP</code> 一样，因此用 <code>INT</code> 不如直接使用 <code>TIMESTAMP</code>。</p><p><code>TIMESTAMP</code> 类型存储的内容为‘1970-01-01 00:00:00’到现在的毫秒数。<strong><code>TIMESTAMP</code> 占用 4 个字节，因此其存储的时间上限只能到 “2038-01-19 03:14:07”</strong>。</p><p>此外，<code>TIMESTAMP</code> 还存在潜在的性能问题。虽然从毫秒数转换到类型 <code>TIMESTAMP</code> 本身需要的 CPU 指令并不多，这并不会带来直接的性能问题。但是如果使用默认的操作系统时区，则每次通过时区计算时间时，要调用操作系统底层系统函数 <code>__tz_convert()</code>，而这个函数需要额外的加锁操作，以确保这时操作系统时区没有修改。所以，当大规模并发访问时，由于热点资源竞争，会产生两个问题。</p><ul><li><strong>性能不如 DATETIME：</strong> <code>DATETIME</code> 不存在时区转化问题。</li><li><strong>性能抖动：</strong> 海量并发时，存在性能抖动问题。</li></ul><p>为了优化 TIMESTAMP 的使用，强烈建议使用显式的时区，而不是操作系统时区。比如在配置文件中显示地设置时区，而不要使用系统时区</p><p>综上，由于 <code>TIMESTAMP</code> 存在时间上限和潜在性能问题，所以推荐使用 <code>DATETIME</code> 类型来存储时间字段。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><ul><li><p>自增整型主键，务必使用 <code>BIGINT</code>，而非 <code>INT</code>，以防后期超过数据范围，会很麻烦。</p></li><li><p>不要再使用浮点类型 <code>Float</code>、<code>Double</code>，MySQL 后续版本将不再支持上述两种类型。</p></li><li><p>金钱数据字段，可以使用 <code>DECIMAL</code> 类型。但是更推荐使用 <code>BIGINT</code>，长度固定，存储更紧凑，性能更好。</p></li><li><p>业务隐私信息，如密码、手机、信用卡等信息，需要加密。切记简单的 MD5 算法是可以进行暴力破解，并不安全，推荐使用动态盐+动态加密算法进行隐私数据的存储。</p></li><li><p>由于 <code>TIMESTAMP</code> 存在时间上限和潜在性能问题，所以推荐使用 <code>DATETIME</code> 类型来存储时间字段。</p></li></ul><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,20),T={href:"https://book.douban.com/subject/23008813/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://time.geekbang.org/column/intro/139",target:"_blank",rel:"noopener noreferrer"},x={href:"https://dev.mysql.com/doc/refman/8.4/en/data-types.html",target:"_blank",rel:"noopener noreferrer"},E={href:"http://blog.leanote.com/post/weibo-007/mysql_float_double_decimal",target:"_blank",rel:"noopener noreferrer"};function M(k,A){const d=s("ExternalLinkIcon");return o(),c("div",null,[p,y,i(" more "),f,t("blockquote",null,[t("p",null,[e("扩展阅读："),t("a",g,[e("MySQL 如何选择 float, double, decimal"),l(d)])])]),u,t("ul",null,[t("li",null,[t("a",T,[e("《高性能 MySQL》"),l(d)])]),t("li",null,[t("a",h,[e("极客时间教程 - MySQL 实战 45 讲"),l(d)])]),t("li",null,[t("a",x,[e("MySQL 官方文档之数据类型"),l(d)])]),t("li",null,[t("a",E,[e("MySQL 如何选择 float, double, decimal"),l(d)])])])])}const b=a(r,[["render",M],["__file","index.html.vue"]]);export{b as default};
