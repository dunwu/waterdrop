import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as p,c,d as a,a as n,b as s,e}from"./app-d71076bb.js";const r={},u=e('<h1 id="dubbo-面试之服务治理" tabindex="-1"><a class="header-anchor" href="#dubbo-面试之服务治理" aria-hidden="true">#</a> Dubbo 面试之服务治理</h1><h2 id="服务注册和发现" tabindex="-1"><a class="header-anchor" href="#服务注册和发现" aria-hidden="true">#</a> 服务注册和发现</h2><h3 id="【中等】什么是服务注册与发现-dubbo-如何实现" tabindex="-1"><a class="header-anchor" href="#【中等】什么是服务注册与发现-dubbo-如何实现" aria-hidden="true">#</a> 【中等】什么是服务注册与发现？Dubbo 如何实现？</h3><div class="hint-container info"><p class="hint-container-title">什么是服务注册与发现？</p></div><p>服务注册与发现是微服务的核心基础设施，通过<strong>解耦服务地址硬编码</strong>，实现<strong>动态扩缩容</strong>和<strong>故障自动恢复</strong>。</p><ul><li><strong>服务注册（Registration）</strong>：服务提供者（Provider）启动时，将自己的 <strong>IP、端口、接口名</strong> 等信息上报到<strong>注册中心</strong>（如 Zookeeper/Nacos）。<strong>举例</strong>：<code>订单服务</code>启动后，向注册中心注册：<code>&quot;order-service: 192.168.1.100:8080&quot;</code>。</li><li><strong>服务发现（Discovery）</strong>：服务消费者（Consumer）从注册中心 <strong>拉取可用服务列表</strong>，并基于负载均衡策略选择目标实例。<strong>举例</strong>：<code>支付服务</code>需要调用<code>订单服务</code>时，从注册中心获取所有可用的<code>order-service</code>节点列表。</li></ul><p><strong>注册阶段</strong></p>',7),d=n("p",null,[n("strong",null,"发现阶段")],-1),g=e(`<div class="hint-container info"><p class="hint-container-title">有哪些常见的注册中心？</p></div><p><strong>主流注册中心对比</strong></p><table><thead><tr><th><strong>类型</strong></th><th><strong>代表产品</strong></th><th><strong>特点</strong></th></tr></thead><tbody><tr><td><strong>CP 型</strong></td><td>Zookeeper/Consul/Etcd</td><td>强一致性，适合金融类业务</td></tr><tr><td><strong>AP 型</strong></td><td>Eureka</td><td>高可用优先，适合互联网场景</td></tr><tr><td><strong>混合型</strong></td><td>Nacos</td><td>可调整副本数、同步策略，来确立偏重</td></tr></tbody></table><p>Dubbo 中可以通过 <code>registry</code> 配置来指定注册中心。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 服务提供者注册 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>service</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.example.OrderService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>orderService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">registry</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>zookeeper://127.0.0.1:2181<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

<span class="token comment">&lt;!-- 服务消费者发现 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>orderService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.example.OrderService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">registry</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>zookeeper://127.0.0.1:2181<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="【简单】dubbo-支持哪些注册中心" tabindex="-1"><a class="header-anchor" href="#【简单】dubbo-支持哪些注册中心" aria-hidden="true">#</a> 【简单】Dubbo 支持哪些注册中心？</h3><p>不同于传统的 Dubbo2，Dubbo3 中定义了三种中心：注册中心、配置中心、元数据中心。配置中心、元数据中心是实现 Dubbo 高阶服务治理能力会依赖的组件，如流量管控规则等，相比于注册中心通常这两个组件的配置是可选的。</p><p>配置方式如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>dubbo
 registry
  <span class="token key atrule">address</span><span class="token punctuation">:</span> nacos<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">8848</span>
 config<span class="token punctuation">-</span>center
  <span class="token key atrule">address</span><span class="token punctuation">:</span> nacos<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">8848</span>
 metadata<span class="token punctuation">-</span>report
  <span class="token key atrule">address</span><span class="token punctuation">:</span> nacos<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">8848</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，<strong>对于部分注册中心类型（如 Zookeeper、Nacos 等），Dubbo 会默认同时将其用作元数据中心和配置中心（建议保持默认开启状态）。</strong></p><p>Dubbo 目前支持的主流注册中心实现包括：</p><ul><li>Zookeeper</li><li>Nacos</li><li>Redis</li><li>Consul</li><li>Etcd</li><li>更多实现</li></ul>`,12),k={href:"http://localhost:1313/zh-cn/overview/mannual/java-sdk/tasks/deploy/",target:"_blank",rel:"noopener noreferrer"},b=e('<h3 id="【简单】注册中心挂了可以继续通信吗" tabindex="-1"><a class="header-anchor" href="#【简单】注册中心挂了可以继续通信吗" aria-hidden="true">#</a> 【简单】注册中心挂了可以继续通信吗？</h3><p>可以。Dubbo 消费者在应用启动时会从注册中心拉取已注册的生产者的地址接口，并缓存在本地。每次调用时，按照本地存储的地址进行调用。</p><h3 id="【中等】注册中心是选择-cp-还是-ap" tabindex="-1"><a class="header-anchor" href="#【中等】注册中心是选择-cp-还是-ap" aria-hidden="true">#</a> 【中等】注册中心是选择 CP 还是 AP？</h3><div class="hint-container info"><p class="hint-container-title">什么是 CAP？</p></div>',4),v={href:"https://en.wikipedia.org/wiki/CAP_theorem",target:"_blank",rel:"noopener noreferrer"},m=e('<ul><li><strong>一致性（Consistency）</strong> - 在任何给定时间，网络中的所有节点都具有完全相同（最近）的值。</li><li><strong>可用性（Availability）</strong> - 对网络的每个请求都会返回响应，但不能保证返回的数据是最新的。</li><li><strong>分区容错性（Partition Tolerance）</strong> - 即使任意数量的节点出现故障，网络仍会继续运行。</li></ul><p>CAP 就是取 Consistency、Availability、Partition Tolerance 的首字母而命名。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202405160639643.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在分布式系统中，分区容错性是一个既定的事实：因为分布式系统总会出现各种各样的问题，如由于网络原因而导致节点失联；发生机器故障；机器重启或升级等等。因此，<strong>CAP 定理实际上是要在可用性（A）和一致性（C）之间做权衡</strong>。</p><div class="hint-container info"><p class="hint-container-title">注册中心选 AP 还是 CP？</p></div><p>注册中心作为服务提供者和服务消费者之间沟通的桥梁，它的重要性不言而喻。所以注册中心一般都是采用集群部署来保证高可用性，并通过分布式一致性协议来确保集群中不同节点之间的数据保持一致。</p>',6),h={href:"https://en.wikipedia.org/wiki/CAP_theorem",target:"_blank",rel:"noopener noreferrer"},f=n("li",null,[n("strong",null,"CP 型注册中心"),s(" - "),n("strong",null,"牺牲可用性来换取数据强一致性"),s("，最典型的例子就是 ZooKeeper，etcd，Consul 了。ZooKeeper 集群内只有一个 Leader，而且在 Leader 无法使用的时候通过算法选举出一个新的 Leader。这个 Leader 的目的就是保证写信息的时候只向这个 Leader 写入，Leader 会同步信息到 Followers，这个过程就可以保证数据的强一致性。但如果多个 ZooKeeper 之间网络出现问题，造成出现多个 Leader，发生脑裂的话，注册中心就不可用了。而 etcd 和 Consul 集群内都是通过 Raft 协议来保证强一致性，如果出现脑裂的话， 注册中心也不可用。")],-1),y=n("li",null,[n("strong",null,"AP 型注册中心"),s(" - "),n("strong",null,"牺牲一致性（只保证最终一致性）来换取可用性"),s("，最典型的例子就是 Eureka 了。Eureka 在设计的时候就是优先保证 A （可用性）。在 Eureka 中不存在什么 Leader 节点，每个节点都是一样的、平等的。因此 Eureka 不会像 ZooKeeper 那样出现选举过程中或者半数以上的机器不可用的时候服务就是不可用的情况。 Eureka 保证即使大部分节点挂掉也不会影响正常提供服务，只要有一个节点是可用的就行了。只不过这个节点上的数据可能并不是最新的。")],-1),x=n("strong",null,"CP & AP 都支持型注册中心",-1),q={href:"https://nacos.io/en/blog/faq/nacos-user-question-history10508/?spm=5238cd80.e9131ff.0.0.69845e2958zjvo&source=wuyi",target:"_blank",rel:"noopener noreferrer"},_=e('<p>选择 CP 还是 AP，根据实际需要来定：如果业务场景要求强一致，优先选择 CP 型注册中心；如果业务场景强调可用性，优先选择 AP 型注册中心。</p><div class="hint-container info"><p class="hint-container-title">注册中心选型对比</p></div><table><thead><tr><th>注册中心</th><th>特点</th><th>适用场景</th></tr></thead><tbody><tr><td><strong>Zookeeper</strong></td><td>CP 系统，强一致性，高延迟</td><td>对一致性要求高的传统项目</td></tr><tr><td><strong>Nacos</strong></td><td>AP/CP 可切换，支持动态配置</td><td>云原生、微服务架构</td></tr><tr><td><strong>Consul</strong></td><td>多数据中心，健康检查完善</td><td>跨机房服务发现</td></tr></tbody></table><h3 id="【中等】dubbo-的服务自动上线与下线机制是怎样的" tabindex="-1"><a class="header-anchor" href="#【中等】dubbo-的服务自动上线与下线机制是怎样的" aria-hidden="true">#</a> 【中等】Dubbo 的服务自动上线与下线机制是怎样的？</h3><div class="hint-container info"><p class="hint-container-title">服务自动上线流程</p></div><ul><li><strong>启动注册</strong>：</li><li>服务提供者启动时，解析配置文件（如 <code>dubbo:service</code> 或注解 <code>@Service</code>），获取服务接口、方法、版本、分组等信息。 <ul><li>将服务元数据（如 IP、端口、接口名）注册到注册中心（如 Zookeeper/Nacos）。</li><li>注册中心存储服务信息，形成服务目录（如 Zookeeper 的 <code>/dubbo/{service}/providers</code> 节点）。</li></ul></li><li><strong>消费者发现</strong>： <ul><li>消费者启动时，从注册中心拉取服务提供者列表，并建立长连接。</li><li>注册中心推送变更通知（如新服务上线），消费者动态更新本地服务列表。</li></ul></li></ul><div class="hint-container info"><p class="hint-container-title">服务自动下线流程</p></div><ul><li><strong>主动下线</strong>：</li><li>服务提供者正常关闭时，触发 Shutdown Hook，向注册中心发送注销请求。 <ul><li>注册中心删除对应节点，消费者通过事件监听感知服务下线。</li></ul></li><li><strong>被动下线</strong>： <ul><li><strong>心跳检测</strong>：若提供者宕机，注册中心未收到心跳（如 Zookeeper 的 Session 超时），自动剔除故障节点。</li><li><strong>消费者容错</strong>：已连接的消费者通过故障处理机制（如 Failover）切换至其他可用节点。</li></ul></li></ul><div class="hint-container info"><p class="hint-container-title">关键保障机制</p></div><ul><li><strong>心跳保活</strong>：默认心跳间隔 60 秒（可调），超时时间建议 3 倍心跳间隔。</li><li><strong>重试容错</strong>：消费者支持 <code>retries</code> 配置（如 Failover 策略），避免单点故障。</li><li><strong>优雅停机</strong>：通过 <code>ProtocolConfig.destroy()</code> 确保注销完成后再终止 JVM。</li></ul><div class="hint-container info"><p class="hint-container-title">高级治理能力</p></div><ul><li><strong>版本灰度</strong>：通过 <code>version</code> 字段实现多版本共存，逐步下线旧版本。</li><li><strong>权重调整</strong>：动态修改服务权重（如 Nacos 控制台），实现平滑流量迁移。</li><li><strong>无损下线</strong>：结合 QOS 命令（<code>offline</code>）或 PreStop Hook，确保流量完全迁移后再下线。</li></ul><div class="hint-container info"><p class="hint-container-title">常见问题排查</p></div><ul><li><p><strong>服务未注册</strong>：</p><ul><li>检查注册中心地址、网络连通性。</li><li>查看提供者日志是否有 <code>RegistryFailedException</code>。</li></ul></li><li><p><strong>僵尸节点</strong>：</p><ul><li>手动清理注册中心残留节点（如 Zookeeper 的 <code>delete /dubbo/{service}/providers/xxx</code>）。</li><li>调整心跳超时时间，避免因网络抖动误判。</li></ul></li><li><p><strong>消费者未感知下线</strong>：</p><ul><li>确认注册中心支持事件推送（如 Nacos 的 <code>notify</code> 机制）。</li><li>检查消费者是否配置了 <code>check=false</code>（禁用启动时强依赖检查）。</li></ul></li></ul><div class="hint-container info"><p class="hint-container-title">最佳实践</p></div><ul><li><strong>生产环境建议</strong>： <ul><li>使用 Nacos 作为注册中心，兼顾可用性和动态配置能力。</li><li>开启 Dubbo Admin 监控，实时查看服务状态。</li></ul></li><li><strong>停机操作</strong>：先通过 <code>telnet 127.0.0.1 20880</code> 执行 <code>invoke offline()</code> 命令，再重启服务。</li><li><strong>版本迭代</strong>：采用 <code>version=&quot;1.0.0&quot;</code> 和 <code>group=&quot;canary&quot;</code> 分批次上线，降低风险。</li></ul><h3 id="【困难】dubbo3-的应用级服务发现的工作原理是什么" tabindex="-1"><a class="header-anchor" href="#【困难】dubbo3-的应用级服务发现的工作原理是什么" aria-hidden="true">#</a> 【困难】Dubbo3 的应用级服务发现的工作原理是什么？</h3><p><strong>【应用级服务发现】是 Dubbo3 引入的新特性</strong>，旨在解决大规模微服务架构下 <strong>注册中心压力大</strong> 和 <strong>服务治理效率低</strong> 的问题。其核心思想是 <strong>以应用为维度注册实例</strong>，而非传统接口级注册。</p><p>应用级注册通过 <strong>注册与元数据分离</strong>，将注册中心的数据量降低至常数级，显著提升了大规模微服务架构的可扩展性。其核心创新在于：</p><ul><li><strong>注册中心只存应用实例</strong>，元数据独立存储；</li><li><strong>消费者按需加载接口信息</strong>，减少网络开销；</li><li><strong>完美兼容旧模式</strong>，支持渐进式迁移。</li></ul><p><strong>与传统接口级注册的对比</strong></p><table><thead><tr><th><strong>维度</strong></th><th><strong>Dubbo2（接口级）</strong></th><th><strong>Dubbo3（应用级）</strong></th></tr></thead><tbody><tr><td><strong>注册单位</strong></td><td>每个服务接口单独注册（如 <code>com.example.UserService</code>）</td><td>整个应用的所有接口统一注册（如 <code>user-service-app</code>）</td></tr><tr><td><strong>注册数据量</strong></td><td>随接口数量线性增长（100 接口=100 条注册记录）</td><td>恒定（1 个应用=1 条注册记录）</td></tr><tr><td><strong>服务发现粒度</strong></td><td>接口级别</td><td>应用级别（消费者按需拉取接口元数据）</td></tr></tbody></table><div class="hint-container info"><p class="hint-container-title">接口级服务发现工作原理</p></div><p>Dubbo3 以前的版本采用的是接口级服务发现。</p><figure><img src="https://cn.dubbo.apache.org/imgs/blog/proposals/discovery/interface-data1.png" alt="interface-data1" tabindex="0" loading="lazy"><figcaption>interface-data1</figcaption></figure><p>Provider 部署的应用中通常会有多个 Service，每个 service 都可能会有其独有的配置。Service 服务发布的过程，其实就是基于这个服务配置生成地址 URL 的过程，生成的地址数据如图所示。</p><p>注册中心的地址数据存储结构，以 Service 服务名为数据划分依据，将一个服务下的所有地址数据都作为子节点进行聚合，子节点的内容就是实际可访问的 ip 地址，也就是我们 Dubbo 中 URL，格式就是刚才 Provider 实例生成的。</p><figure><img src="https://cn.dubbo.apache.org/imgs/blog/proposals/discovery/interface-data2.png" alt="interface-data2" tabindex="0" loading="lazy"><figcaption>interface-data2</figcaption></figure><p>这里把 URL 地址数据划分成了几份：</p><ul><li><strong>实例可访问地址</strong>：主要信息包含 ip 和 port，消费端将基于这条数据生成 tcp 网络链接，作为后续 RPC 数据的传输载体。</li><li><strong>RPC 元数据</strong>：元数据用于定义和描述一次 RPC 请求。它可以分为两类： <ul><li><strong>具体的 RPC 服务信息</strong>：如版本号、分组以及方法相关信息；</li><li><strong>RPC 配置数据</strong>：控制 RPC 调用的行为，同步 Provider 进程实例的状态（如超时时间、数据编码的序列化方式等）。</li></ul></li><li><strong>自定义元数据</strong>：用户可任意扩展并添加自定义元数据。</li></ul><p>综上，有以下结论：</p><ol><li>服务发现聚合的 key 就是 RPC 粒度的服务</li><li>注册中心同步的数据不止包含地址，还包含了各种元数据以及配置</li><li>得益于 1 与 2，Dubbo 实现了支持应用、RPC 服务、方法粒度的服务治理能力</li></ol><p>这就是一直以来 Dubbo2 在易用性、服务治理功能性、可扩展性上强于很多服务框架的真正原因。</p><figure><img src="https://cn.dubbo.apache.org/imgs/blog/proposals/discovery/interface-defect.png" alt="interface-defect" tabindex="0" loading="lazy"><figcaption>interface-defect</figcaption></figure><p>接口级注册的易用性是有代价的，它限制了整体架构的扩展性，在大规模 Dubbo 集群中尤为凸显。其突出问题如下：</p><ul><li><strong>注册中心集群容量会成为瓶颈</strong>：由于所有的 URL 地址数据都被发送到注册中心，注册中心的存储容量达到上限，推送效率也随之下降。</li><li><strong>消费端资源消耗较大</strong>：在消费端，Dubbo2 框架常驻内存已超 40%，每次地址推送带来的 cpu 等资源消耗率也非常高，影响正常的业务调用。</li></ul><p>为什么会出现这个问题？举例来说，假设有一个普通的 Dubbo Provider 应用，该应用内部定义有 10 个 RPC Service，应用被部署在 100 个机器实例上。这个应用在集群中产生的数据量将会是 <code>Service 数 * 机器实例数</code>，也就是 <code>10 * 100 = 1000</code> 条数据。数据会从两个维度放大：</p><ul><li><strong>从地址角度</strong>。100 条唯一的实例地址，被放大 10 倍</li><li><strong>从服务角度</strong>。10 条唯一的服务元数据，被放大 100 倍</li></ul><div class="hint-container info"><p class="hint-container-title">应用级服务发现工作原理</p></div><figure><img src="https://cn.dubbo.apache.org/imgs/blog/proposals/discovery/app-workflow.png" alt="app-metadataservice" tabindex="0" loading="lazy"><figcaption>app-metadataservice</figcaption></figure><p><strong>提供者服务注册</strong></p><ul><li>启动时，应用（如 <code>user-service-app</code>）将所有服务接口的 <strong>元数据</strong>（方法列表、协议等）上报至 <strong>元数据中心</strong>（如 Nacos）。</li><li>仅将 <strong>应用名+实例 IP+端口</strong> 注册到 <strong>注册中心</strong>（如 ZooKeeper），<strong>不包含接口信息</strong>。</li></ul><p><strong>消费者服务发现</strong></p><ul><li><strong>订阅目标应用</strong>： <ul><li>消费者（如 <code>order-service-app</code>）从注册中心获取目标应用（如 <code>user-service-app</code>）的 <strong>实例列表</strong>（IP+端口）。</li><li><strong>不直接获取接口信息</strong>，避免注册中心数据膨胀。</li></ul></li><li><strong>按需拉取元数据</strong>： <ul><li>消费者首次调用前，从 <strong>元数据中心</strong> 拉取目标应用的接口元数据（如 <code>UserService</code> 的方法签名）。</li><li>本地缓存元数据，后续调用直接使用。</li></ul></li></ul><p><strong>调用过程</strong></p><ul><li>消费者通过 <strong>应用名+接口名</strong> 定位实例，发起 RPC 调用（协议兼容 Dubbo2）。</li><li>负载均衡在应用实例级别进行（如随机选择 <code>user-service-app</code> 的一个实例）。</li></ul><p><strong>关键设计优势</strong></p><ul><li><strong>注册中心轻量化</strong>：实例数从 <code>O（接口数×实例数）</code> 降至 <code>O（实例数）</code>，适合万级节点集群。</li><li><strong>动态扩容高效</strong>：新增接口无需重复注册，只需更新元数据中心。</li><li><strong>兼容性保障</strong>：支持与 Dubbo2 的接口级注册共存，平滑升级。</li></ul>',48),D={href:"https://cn.dubbo.apache.org/zh-cn/blog/2023/01/30/dubbo3-%E5%BA%94%E7%94%A8%E7%BA%A7%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E8%AE%BE%E8%AE%A1/",target:"_blank",rel:"noopener noreferrer"},P=e(`<h2 id="负载均衡" tabindex="-1"><a class="header-anchor" href="#负载均衡" aria-hidden="true">#</a> 负载均衡</h2><h3 id="【中等】dubbo-支持哪些负载均衡方式-各有什么利弊" tabindex="-1"><a class="header-anchor" href="#【中等】dubbo-支持哪些负载均衡方式-各有什么利弊" aria-hidden="true">#</a> 【中等】Dubbo 支持哪些负载均衡方式？各有什么利弊？</h3><p>Dubbo 提供了多种均衡策略，缺省为 <code>weighted random</code> 基于权重的随机负载均衡策略。</p><p>具体实现上，Dubbo 提供的是客户端负载均衡，即由 Consumer 通过负载均衡算法得出需要将请求提交到哪个 Provider 实例。</p><p>目前 Dubbo 内置了如下负载均衡算法，可通过调整配置项启用。</p><table><thead><tr><th style="text-align:left;">算法</th><th style="text-align:left;">算法类型</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">Random</td><td style="text-align:left;">加权随机</td><td style="text-align:left;">默认算法，默认权重相同</td></tr><tr><td style="text-align:left;">RoundRobin</td><td style="text-align:left;">加权轮询</td><td style="text-align:left;">借鉴于 Nginx 的平滑加权轮询算法，默认权重相同，</td></tr><tr><td style="text-align:left;">LeastActive</td><td style="text-align:left;">最少活跃优先 + 加权随机</td><td style="text-align:left;">背后是能者多劳的思想</td></tr><tr><td style="text-align:left;">ShortestResponse</td><td style="text-align:left;">最短响应优先 + 加权随机</td><td style="text-align:left;">更加关注响应速度</td></tr><tr><td style="text-align:left;">ConsistentHash</td><td style="text-align:left;">一致性哈希</td><td style="text-align:left;">确定的入参，确定的提供者，适用于有状态请求</td></tr><tr><td style="text-align:left;">P2C</td><td style="text-align:left;">Power of Two Choice</td><td style="text-align:left;">随机选择两个节点后，继续选择“连接数”较小的那个节点。</td></tr><tr><td style="text-align:left;">Adaptive</td><td style="text-align:left;">自适应负载均衡</td><td style="text-align:left;">在 P2C 算法基础上，选择二者中 load 最小的那个节点</td></tr></tbody></table><p>Dubbo 的负载均衡配置可以细粒度到服务、方法级别，且 <code>dubbo:service</code> 和 <code>dubbo:reference</code> 均可配置。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 服务端服务级别 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>service</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span> <span class="token attr-name">loadbalance</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>roundrobin<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token comment">&lt;!-- 客户端服务级别 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span> <span class="token attr-name">loadbalance</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>roundrobin<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token comment">&lt;!-- 服务端方法级别 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>service</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span> <span class="token attr-name">loadbalance</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>roundrobin<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">dubbo:</span>service</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 客户端方法级别 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span> <span class="token attr-name">loadbalance</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>roundrobin<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">dubbo:</span>reference</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">Random（随机）</p></div><ul><li><strong>加权随机</strong>，按权重设置随机概率。</li><li>在一个截面上碰撞的概率高，但调用量越大分布越均匀，而且按概率使用权重后也比较均匀，有利于动态调整提供者权重。</li><li>缺点：存在慢的提供者累积请求的问题，比如：第二台机器很慢，但没挂，当请求调到第二台时就卡在那，久而久之，所有请求都卡在调到第二台上。</li></ul><div class="hint-container info"><p class="hint-container-title">RoundRobin（轮询）</p></div><ul><li><strong>加权轮询</strong>，按公约后的权重设置轮询比率，循环调用节点</li><li>缺点：同样存在慢的提供者累积请求的问题。</li></ul><div class="hint-container info"><p class="hint-container-title">LeastActive（最少活跃优先）</p></div><ul><li><strong>加权最少活跃调用优先</strong>，活跃数越低，越优先调用，相同活跃数的进行加权随机。活跃数指调用前后计数差（针对特定提供者：请求发送数 - 响应返回数），表示特定提供者的任务堆积量，活跃数越低，代表该提供者处理能力越强。</li><li>使慢的提供者收到更少请求，因为越慢的提供者的调用前后计数差会越大；相对的，处理能力越强的节点，处理更多的请求。</li></ul><div class="hint-container info"><p class="hint-container-title">ShortestResponse（最短响应优先）</p></div><ul><li><strong>加权最短响应优先</strong>，在最近一个滑动窗口中，响应时间越短，越优先调用。相同响应时间的进行加权随机。</li><li>使得响应时间越快的提供者，处理更多的请求。</li><li>缺点：可能会造成流量过于集中于高性能节点的问题。</li></ul><p>这里的响应时间 = 某个提供者在窗口时间内的平均响应时间，窗口时间默认是 30s。</p><div class="hint-container info"><p class="hint-container-title">ConsistentHash（一致性 Hash）</p></div>`,18),C=n("li",null,[n("strong",null,"一致性 Hash"),s("，相同参数的请求总是发到同一提供者。")],-1),w=n("li",null,"当某一台提供者挂时，原本发往该提供者的请求，基于虚拟节点，平摊到其它提供者，不会引起剧烈变动。",-1),A={href:"http://en.wikipedia.org/wiki/Consistent_hashing",target:"_blank",rel:"noopener noreferrer"},R=n("li",null,[s("缺省只对第一个参数 Hash，如果要修改，请配置 "),n("code",null,'<dubbo:parameter key="hash.arguments" value="0,1" />')],-1),L=n("li",null,[s("缺省用 160 份虚拟节点，如果要修改，请配置 "),n("code",null,'<dubbo:parameter key="hash.nodes" value="320" />')],-1),S=n("div",{class:"hint-container info"},[n("p",{class:"hint-container-title"},"P2C")],-1),M=n("p",null,"Power of Two Choice 算法简单但是经典，主要思路如下：",-1),E=n("ol",null,[n("li",null,"对于每次调用，从可用的 provider 列表中做两次随机选择，选出两个节点 providerA 和 providerB。"),n("li",null,"比较 providerA 和 providerB 两个节点，选择其“当前正在处理的连接数”较小的那个节点。")],-1),I={href:"https://cn.dubbo.apache.org/zh-cn/overview/reference/proposals/heuristic-flow-control/#p2c%20%E7%AE%97%E6%B3%95",target:"_blank",rel:"noopener noreferrer"},j=n("div",{class:"hint-container info"},[n("p",{class:"hint-container-title"},"Adaptive（自适应）")],-1),z=n("p",null,"Adaptive 即自适应负载均衡，是一种能根据后端实例负载自动调整流量分布的算法实现，它总是尝试将请求转发到负载最小的节点。",-1),F={href:"https://cn.dubbo.apache.org/zh-cn/overview/reference/proposals/heuristic-flow-control/#adaptive%E7%AE%97%E6%B3%95",target:"_blank",rel:"noopener noreferrer"},H=n("p",null,"扩展：",-1),N={href:"https://cn.dubbo.apache.org/zh-cn/overview/what/core-features/load-balance/",target:"_blank",rel:"noopener noreferrer"},T={href:"https://dunwu.github.io/waterdrop/pages/bcf0fb8c/",target:"_blank",rel:"noopener noreferrer"},Z=e(`<h2 id="服务路由" tabindex="-1"><a class="header-anchor" href="#服务路由" aria-hidden="true">#</a> 服务路由</h2><h3 id="【中等】dubbo-如何进行服务路由控制" tabindex="-1"><a class="header-anchor" href="#【中等】dubbo-如何进行服务路由控制" aria-hidden="true">#</a> 【中等】Dubbo 如何进行服务路由控制？</h3><p><strong>路由规则</strong></p><table><thead><tr><th style="text-align:left;">策略类型</th><th style="text-align:left;">配置方式</th><th style="text-align:left;">匹配维度</th><th style="text-align:left;">适用场景</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>条件路由</strong></td><td style="text-align:left;">DSL 表达式/IP 段匹配</td><td style="text-align:left;">方法名、参数、来源 IP</td><td style="text-align:left;">灰度发布、环境隔离</td></tr><tr><td style="text-align:left;"><strong>标签路由</strong></td><td style="text-align:left;">实例元数据标记</td><td style="text-align:left;">逻辑分组（如地域、版本）</td><td style="text-align:left;">金丝雀发布、A/B 测试</td></tr><tr><td style="text-align:left;"><strong>脚本路由</strong></td><td style="text-align:left;">Groovy/JS 脚本</td><td style="text-align:left;">复杂业务逻辑</td><td style="text-align:left;">动态分流（如 VIP 用户）</td></tr></tbody></table><p><strong>配置方案</strong></p><p><strong>条件路由强化</strong></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 多条件组合路由（支持&amp;&amp;,||,! 运算符）</span>
<span class="token key atrule">conditions</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token string">&#39;method=createOrder &amp;&amp; userLevel=VIP =&gt; 192.168.1.100&#39;</span>
  <span class="token punctuation">-</span> <span class="token string">&#39;headers.appVersion=3.2.* =&gt; region=hangzhou&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>动态生效技巧</strong>：通过<code>force:false</code>实现软路由，当目标节点不可用时自动降级</p><p><strong>标签路由进阶</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 编程式打标（配合配置中心）</span>
<span class="token class-name">RpcContext</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttachment</span><span class="token punctuation">(</span><span class="token string">&quot;traffic-tag&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;experimental&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>最佳实践</strong>：建立标签命名规范（如<code>env=prod</code>、<code>version=2.0</code>）</p><p><strong>架构图</strong></p>`,12),B=e(`<p><strong>动态管控</strong></p><ul><li><strong>规则存储</strong>：建议使用 Nacos/Apollo 替代 Zookeeper，支持规则版本回溯</li><li><strong>实时生效</strong>：消费者节点秒级感知（长连接推送）</li><li><strong>兜底策略</strong>：本地缓存最后有效规则，避免配置中心不可用</li></ul><p><strong>生产级解决方案</strong></p><p><strong>场景：跨机房流量调度</strong></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 基于地域标签的路由</span>
<span class="token key atrule">tags</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">&#39;region=shanghai&#39;</span>
    <span class="token key atrule">addresses</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;10.1.1.1-10.1.1.20&#39;</span><span class="token punctuation">]</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">&#39;region=beijing&#39;</span>
    <span class="token key atrule">addresses</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;10.2.1.1-10.2.1.20&#39;</span><span class="token punctuation">]</span>
<span class="token key atrule">rules</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token string">&#39;=&gt; region=shanghai&#39;</span> <span class="token comment"># 默认路由</span>
  <span class="token punctuation">-</span> <span class="token string">&#39;headers.forceZone=beijing =&gt; region=beijing&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>性能优化</strong>：</p><ul><li>路由缓存：本地缓存路由决策结果（TTL 5s）</li><li>预计算：在服务目录更新时提前生成路由快照</li></ul><p><strong>异常处理机制</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 自定义路由失败处理器</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomRouterFailover</span> <span class="token keyword">implements</span> <span class="token class-name">RouterListener</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onRouteFail</span><span class="token punctuation">(</span><span class="token class-name">Invoker</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> invoker<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Metrics</span><span class="token punctuation">.</span><span class="token function">counter</span><span class="token punctuation">(</span><span class="token string">&quot;route_fail&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 自动切换备用集群。..</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>监控指标设计</strong></p><table><thead><tr><th>指标名称</th><th>采集方式</th><th>告警阈值</th></tr></thead><tbody><tr><td>路由命中率</td><td>采样统计（每 1min）</td><td>&lt;95% 触发警告</td></tr><tr><td>规则变更频率</td><td>配置中心事件监听</td><td>&gt;5 次/分钟告警</td></tr><tr><td>跨域调用比例</td><td>标签路由计数器</td><td>超出预设范围报警</td></tr></tbody></table><p><strong>与治理功能联动</strong></p><ul><li><strong>负载均衡</strong>：路由结果作为 LB 的优先权重依据</li><li><strong>限流</strong>：按路由维度设置独立限流规则</li><li><strong>熔断</strong>：路由异常节点自动加入熔断黑名单</li></ul><p><strong>实施建议</strong>：</p><ul><li>先通过<code>&lt;dubbo:parameter key=&quot;router&quot; value=&quot;tag&quot; /&gt;</code>启用基础路由</li><li>使用 Arthas 的<code>watch</code>命令实时观察路由决策过程</li><li>在预发布环境进行规则压测（模拟 1000 次/秒规则变更）</li></ul><h3 id="【中等】dubbo-路由是怎样工作的" tabindex="-1"><a class="header-anchor" href="#【中等】dubbo-路由是怎样工作的" aria-hidden="true">#</a> 【中等】Dubbo 路由是怎样工作的？</h3><p>以下是 Dubbo 单个路由器的工作过程，路由器接收一个服务的实例地址集合作为输入，基于请求上下文 (Request Context) 和 (Router Rule) 实际的路由规则定义对输入地址进行匹配，所有匹配成功的实例组成一个地址子集，最终地址子集作为输出结果继续交给下一个路由器或者负载均衡组件处理。</p><figure><img src="https://cn.dubbo.apache.org/imgs/v3/feature/traffic/router1.png" alt="Router" tabindex="0" loading="lazy"><figcaption>Router</figcaption></figure><p>通常，在 Dubbo 中，多个路由器组成一条路由链共同协作，前一个路由器的输出作为另一个路由器的输入，经过层层路由规则筛选后，最终生成有效的地址集合。</p><ul><li>Dubbo 中的每个服务都有一条完全独立的路由链，每个服务的路由链组成可能不通，处理的规则各异，各个服务间互不影响。</li><li>对单条路由链而言，即使每次输入的地址集合相同，根据每次请求上下文的不同，生成的地址子集结果也可能不同。</li></ul><figure><img src="https://cn.dubbo.apache.org/imgs/v3/feature/traffic/router2.png" alt="Router" tabindex="0" loading="lazy"><figcaption>Router</figcaption></figure><h3 id="【中等】dubbo-支持哪些路由方式-分别适用于什么场景" tabindex="-1"><a class="header-anchor" href="#【中等】dubbo-支持哪些路由方式-分别适用于什么场景" aria-hidden="true">#</a> 【中等】Dubbo 支持哪些路由方式？分别适用于什么场景？</h3><p>Dubbo 的路由规则可以基于应用、服务、方法、参数等粒度精准的控制请求分发，根据请求的目标服务、方法以及请求体中的其他附加参数进行匹配，符合匹配条件的请求会进一步的按照特定规则转发到一个地址子集。</p><p>Dubbo 支持以下路由规则：</p><ul><li>标签路由规则</li><li>条件路由规则</li><li>脚本路由规则</li><li>动态配置规则</li></ul><div class="hint-container info"><p class="hint-container-title">标签路由规则</p></div><p><strong>标签路由</strong>通过将某一个服务的实例划分到不同的<strong>分组</strong>，<strong>约束具有特定标签的流量只能在指定分组中流转</strong>，不同分组为不同的流量场景服务，从而实现流量隔离的目的。<strong>标签路由可以作为蓝绿发布、灰度发布等场景能力的基础</strong>。</p>`,27),J={href:"https://cn.dubbo.apache.org/zh-cn/overview/what/core-features/tasks/traffic-management/weight/",target:"_blank",rel:"noopener noreferrer"},U=e(`<p><strong>标签主要是指对 Provider 端应用实例的分组</strong>，目前有两种方式可以完成实例分组，分别是动态规则打标和静态规则打标。<strong>动态规则打标</strong>可以在运行时动态的圈住一组机器实例，而<strong>静态规则打标</strong>则需要实例重启后才能生效，其中，动态规则相较于静态规则优先级更高，而当两种规则同时存在且出现冲突时，将以动态规则为准。</p><div class="hint-container info"><p class="hint-container-title">条件路由规则</p></div><p>条件路由与标签路由的工作模式非常相似，也是首先对请求中的参数进行匹配，<strong>符合匹配条件的请求将被转发到包含特定实例地址列表的子集</strong>。相比于标签路由，条件路由的匹配方式更灵活：</p><ul><li>在标签路由中，一旦给某一台或几台机器实例打了标签，则这部分实例就会被立马从通用流量集合中移除，不同标签之间不会再有交集。有点类似下图，地址集合在输入阶段就已经划分明确。</li></ul><figure><img src="https://cn.dubbo.apache.org/imgs/v3/feature/traffic/tag-condition-compare1.png" alt="tag-condition-compare" tabindex="0" loading="lazy"><figcaption>tag-condition-compare</figcaption></figure><ul><li>而从条件路由的视角，所有的实例都是一致的，路由过程中不存在分组隔离的问题，每次路由过滤都是基于全量地址中执行</li></ul><figure><img src="https://cn.dubbo.apache.org/imgs/v3/feature/traffic/tag-condition-compare2.png" alt="tag-condition-compare" tabindex="0" loading="lazy"><figcaption>tag-condition-compare</figcaption></figure><p>条件路由规则的主体 <code>conditions</code> 主要包含两部分内容：</p><ul><li>=&gt; 之前的为请求参数匹配条件，指定的<strong>匹配条件指定的参数</strong>将与<strong>消费者的请求上下文 (URL)</strong>、甚至<strong>方法参数</strong>进行对比，当消费者满足匹配条件时，对该消费者执行后面的地址子集过滤规则。</li><li>=&gt; 之后的为地址子集过滤条件，指定的<strong>过滤条件指定的参数</strong>将与**提供者实例地址 (URL) **进行对比，消费者最终只能拿到符合过滤条件的实例列表，从而确保流量只会发送到符合条件的地址子集。 <ul><li>如果匹配条件为空，表示对所有请求生效，如：<code>=&gt; status != staging</code></li><li>如果过滤条件为空，表示禁止来自相应请求的访问，如：<code>application = product =&gt;</code></li></ul></li></ul><div class="hint-container info"><p class="hint-container-title">脚本路由规则</p></div><p>脚本路由是最直观的路由方式，同时它也是当前最灵活的路由规则，因为你可以在脚本中定义任意的地址筛选规则。如果我们为某个服务定义一条脚本规则，则后续所有请求都会先执行一遍这个脚本，脚本过滤出来的地址即为请求允许发送到的、有效的地址集合。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">configVersion</span><span class="token punctuation">:</span> v3.0
<span class="token key atrule">key</span><span class="token punctuation">:</span> demo<span class="token punctuation">-</span>provider
<span class="token key atrule">type</span><span class="token punctuation">:</span> javascript
<span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token key atrule">script</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
  (function route(invokers,invocation,context) {
      var result = new java.util.ArrayList(invokers.size());
      for (i = 0; i &lt; invokers.size(); i ++) {
          if (&quot;10.20.3.3&quot;.equals(invokers.get(i).getUrl().getHost())) {
              result.add(invokers.get(i));
          }
      }
      return result;
  } (invokers, invocation, context)); // 表示立即执行方法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">动态配置规则</p></div><p>通过 Dubbo 提供的动态配置规则，可以动态的修改 Dubbo 服务进程的运行时行为，整个过程不需要重启，配置参数实时生效。基于这个强大的功能，基本上所有运行期参数都可以动态调整，比如超时时间、临时开启 Access Log、修改 Tracing 采样率、调整限流降级参数、负载均衡、线程池配置、日志等级、给机器实例动态打标签等。与上文讲到的流量管控规则类似，动态配置规则支持应用、服务两个粒度，也就是说一次可以选择只调整应用中的某一个或几个服务的参数配置。</p><p>当然，出于系统稳定性、安全性的考量，有些特定的参数是不允许动态修改的，但除此之外，基本上所有参数都允许动态修改，很多强大的运行态能力都可以通过这个规则实现。通常 URL 地址中的参数均可以修改，这在每个语言实现的参考手册里也记录了一些更详细的说明。</p><h3 id="【中等】如何在-dubbo-中使用直连提供者" tabindex="-1"><a class="header-anchor" href="#【中等】如何在-dubbo-中使用直连提供者" aria-hidden="true">#</a> 【中等】如何在 Dubbo 中使用直连提供者？</h3><p><strong>核心配置方式</strong></p><ul><li><strong>XML 配置</strong></li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span>
    <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myService<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.example.MyService<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dubbo://192.168.1.100:20880/com.example.MyService<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>注解配置</strong></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Reference</span><span class="token punctuation">(</span>url <span class="token operator">=</span> <span class="token string">&quot;dubbo://192.168.1.100:20880/com.example.MyService&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">MyService</span> myService<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>关键特性</strong></p><table><thead><tr><th>特性</th><th>说明</th></tr></thead><tbody><tr><td><strong>协议格式</strong></td><td><code>dubbo://IP:PORT/接口全限定名</code></td></tr><tr><td><strong>绕过注册中心</strong></td><td>直接连接指定服务节点，避免注册中心复杂度</td></tr><tr><td><strong>即时生效</strong></td><td>配置修改后无需重启服务</td></tr></tbody></table><p><strong>适用场景</strong></p><ul><li><strong>开发调试</strong>：快速连接本地/测试环境服务</li><li><strong>问题排查</strong>：临时绕过注册中心验证服务可用性</li><li><strong>单元测试</strong>：固定服务端点保证测试稳定性</li></ul><p><strong>注意事项</strong></p><ul><li><p><strong>生产环境风险</strong></p><ul><li>丧失服务发现能力（无法自动感知节点上下线）</li><li>缺少负载均衡和熔断机制</li><li>配置维护成本高（需手动管理所有节点地址）</li></ul></li><li><p><strong>安全建议</strong></p><ul><li>限制直连 IP 白名单</li><li>避免在配置文件中硬编码地址（建议使用环境变量）</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dubbo://\${PROVIDER_IP}:20880/com.example.MyService<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p><strong>调试技巧</strong></p><ul><li><strong>动态切换</strong>：通过 JVM 参数临时启用直连</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-Dcom.example.MyService.url=dubbo://127.0.0.1:20880
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>组合使用</strong>：保留注册中心配置，通过<code>url</code>属性覆盖特定服务</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>registry</span> <span class="token attr-name">address</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>nacos://localhost:8848<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dubbo://192.168.1.100:20880<span class="token punctuation">&quot;</span></span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.example.MyService<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>最佳实践</strong>：建议仅在非生产环境使用直连模式，生产环境应通过注册中心实现服务发现和治理。</p></blockquote><h2 id="流量控制" tabindex="-1"><a class="header-anchor" href="#流量控制" aria-hidden="true">#</a> 流量控制</h2><h3 id="【中等】dubbo-中的流量控制策略有哪些" tabindex="-1"><a class="header-anchor" href="#【中等】dubbo-中的流量控制策略有哪些" aria-hidden="true">#</a> 【中等】Dubbo 中的流量控制策略有哪些？</h3><p>流量控制策略主要包括：限流、熔断、降级</p><p>Dubbo 中，可以通过集成 Hystrix 或 Sentinel 来实现限流、熔断、降级。</p><h3 id="【中等】什么是-dubbo-的-mock-机制-如何使用" tabindex="-1"><a class="header-anchor" href="#【中等】什么是-dubbo-的-mock-机制-如何使用" aria-hidden="true">#</a> 【中等】什么是 Dubbo 的 Mock 机制？如何使用？</h3><p>Dubbo 的 Mock 机制是一种用于服务降级的功能。当远程调用失败或不稳定时，通过 Mock 机制可以返回预先定义的结果，从而保证服务的可用性。</p><p>除了 Dubbo，很多分布式框架和微服务架构都会提供类似的服务降级功能。比如 Spring Cloud 里面的 Hystrix，可以通过配置降级策略，在服务异常时返回降级数据。</p><p><strong>配置方式</strong></p><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">实现方式</th><th style="text-align:left;">示例</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>全局配置</strong></td><td style="text-align:left;">XML 配置</td><td style="text-align:left;"><code>&lt;dubbo:reference mock=&quot;true&quot; interface=&quot;com.xx.DemoService&quot;/&gt;</code></td></tr><tr><td style="text-align:left;"><strong>注解配置</strong></td><td style="text-align:left;">@Reference 注解</td><td style="text-align:left;"><code>@Reference(mock = &quot;true&quot;) private DemoService demoService;</code></td></tr><tr><td style="text-align:left;"><strong>自定义 Mock</strong></td><td style="text-align:left;">实现 Mock 类</td><td style="text-align:left;">略</td></tr></tbody></table><p><strong>高级配置</strong></p><ul><li><strong>强制 Mock</strong>：<code>mock=&quot;force:return empty&quot;</code>（直接返回 Mock 结果）</li><li><strong>失败 Mock</strong>：<code>mock=&quot;fail:return null&quot;</code>（仅调用失败时生效）</li><li><strong>方法级 Mock</strong>：<code>mock=&quot;return {methodName}&quot;</code>（指定方法 Mock）</li></ul><p><strong>典型应用场景</strong></p><ul><li><strong>容灾场景</strong>：网络故障/服务不可用时的兜底方案</li><li><strong>开发测试</strong>：解耦依赖服务，提升开发效率</li><li><strong>性能保障</strong>：非核心服务降级，保障核心链路</li></ul><p><strong>注意事项</strong></p><ul><li><strong>生产环境建议</strong>： <ul><li>配合超时配置使用：<code>&lt;dubbo:reference timeout=&quot;3000&quot; mock=&quot;true&quot;/&gt;</code></li><li>避免写操作接口使用 Mock</li></ul></li><li><strong>性能影响</strong>： <ul><li>Mock 类应保持简单逻辑</li><li>复杂 Mock 可能成为性能瓶颈</li></ul></li></ul><p><strong>与其他方案对比</strong></p><table><thead><tr><th>方案</th><th>触发条件</th><th>粒度</th><th>实现复杂度</th></tr></thead><tbody><tr><td><strong>Dubbo Mock</strong></td><td>调用失败</td><td>方法级</td><td>低</td></tr><tr><td><strong>熔断器</strong></td><td>错误率阈值</td><td>服务级</td><td>中</td></tr><tr><td><strong>限流</strong></td><td>流量阈值</td><td>系统级</td><td>高</td></tr></tbody></table><h2 id="故障处理" tabindex="-1"><a class="header-anchor" href="#故障处理" aria-hidden="true">#</a> 故障处理</h2><h3 id="【中等】如何在-dubbo-中使用健康检查" tabindex="-1"><a class="header-anchor" href="#【中等】如何在-dubbo-中使用健康检查" aria-hidden="true">#</a> 【中等】如何在 Dubbo 中使用健康检查？</h3><p>Dubbo 通过 <strong>多级健康检查机制</strong> 保障服务可用性，开发者可根据业务需求选择默认配置或扩展自定义检查逻辑。</p><p><strong>健康检查方式</strong></p><table><thead><tr><th><strong>类型</strong></th><th><strong>触发条件</strong></th><th><strong>适用场景</strong></th><th><strong>配置示例</strong></th></tr></thead><tbody><tr><td><strong>服务提供者探活</strong></td><td>定时心跳检测（默认 3 秒）</td><td>快速发现宕机节点</td><td><code>&lt;dubbo:provider heartbeat=&quot;5000&quot;/&gt;</code></td></tr><tr><td><strong>注册中心剔除</strong></td><td>长连接断开后自动摘除（如 Zookeeper）</td><td>防止调用失效节点</td><td>无需配置，依赖注册中心能力</td></tr><tr><td><strong>接口级检查</strong></td><td>自定义<code>HealthCheck</code>接口实现</td><td>精细化业务健康状态（如依赖 DB）</td><td>实现<code>org.apache.dubbo.health.HealthChecker</code></td></tr></tbody></table><p><strong>关键配置参数</strong></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 服务端配置示例 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>provider</span>
    <span class="token attr-name">heartbeat</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>3000<span class="token punctuation">&quot;</span></span>                 <span class="token attr-name">&lt;!--</span> <span class="token attr-name">心跳间隔（毫秒）</span> <span class="token attr-name">--</span><span class="token punctuation">&gt;</span></span>
    heartbeat-timeout=&quot;60000&quot;        <span class="token comment">&lt;!-- 超时剔除时间 --&gt;</span>
    checks=&quot;true&quot;                    <span class="token comment">&lt;!-- 开启消费者检查（默认 true） --&gt;</span>
/&gt;

<span class="token comment">&lt;!-- 客户端配置示例 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>consumer</span>
    <span class="token attr-name">check</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span>                    <span class="token attr-name">&lt;!--</span> <span class="token attr-name">启动时不强制检查提供者（默认为</span> <span class="token attr-name">true</span> <span class="token attr-name">阻塞启动）</span> <span class="token attr-name">--</span><span class="token punctuation">&gt;</span></span>
    stale-check=&quot;true&quot;               <span class="token comment">&lt;!-- 启用陈旧节点检查 --&gt;</span>
/&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>自定义健康检查（高级）</strong></p><p><strong>步骤</strong>：</p><ol><li><p>实现<code>HealthChecker</code>接口：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DbHealthChecker</span> <span class="token keyword">implements</span> <span class="token class-name">HealthChecker</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isHealthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">checkDatabaseConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 自定义检查逻辑</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>SPI 注册（在<code>META-INF/dubbo/org.apache.dubbo.health.HealthChecker</code>文件添加）：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">dbHealth</span><span class="token punctuation">=</span><span class="token value attr-value">com.example.DbHealthChecker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><p><strong>监控与运维建议</strong></p><ul><li><strong>日志监控</strong>：关注<code>HeartbeatFailedEvent</code>告警日志</li><li><strong>组合策略</strong>： <ul><li>生产环境建议同时启用 <strong>心跳检测</strong> + <strong>注册中心剔除</strong></li><li>关键服务补充 <strong>接口级检查</strong>（如数据库/缓存连接）</li></ul></li><li><strong>压测注意</strong>：高频心跳可能增加注册中心负载，需调整<code>heartbeat</code>参数平衡敏感度与性能</li></ul><h3 id="【中等】dubbo-有哪些集群容错策略" tabindex="-1"><a class="header-anchor" href="#【中等】dubbo-有哪些集群容错策略" aria-hidden="true">#</a> 【中等】Dubbo 有哪些集群容错策略？</h3><p>在集群调用失败时，Dubbo 提供了多种容错方案，缺省为 failover 重试。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/distributed/rpc/dubbo/dubbo集群容错.jpg" alt="Dubbo 容错" tabindex="0" loading="lazy"><figcaption>Dubbo 容错</figcaption></figure><p>图中节点关系说明：</p><ul><li>这里的 <code>Invoker</code> 是 <code>Provider</code> 的一个可调用 <code>Service</code> 的抽象，<code>Invoker</code> 封装了 <code>Provider</code> 地址及 <code>Service</code> 接口信息</li><li><code>Directory</code> 代表多个 <code>Invoker</code>，可以把它看成 <code>List&lt;Invoker&gt;</code> ，但与 <code>List</code> 不同的是，它的值可能是动态变化的，比如注册中心推送变更</li><li><code>Cluster</code> 将 <code>Directory</code> 中的多个 <code>Invoker</code> 伪装成一个 <code>Invoker</code>，对上层透明，伪装过程包含了容错逻辑，调用失败后，重试另一个</li><li><code>Router</code> 负责从多个 <code>Invoker</code> 中按路由规则选出子集，比如读写分离，应用隔离等</li><li><code>LoadBalance</code> 负责从多个 <code>Invoker</code> 中选出具体的一个用于本次调用，选的过程包含了负载均衡算法，调用失败后，需要重选</li></ul><p>Dubbo 支持的容错策略：</p><ul><li><strong>Failover</strong> - <strong>失败自动切换</strong>。当出现失败，重试其它服务器。通常用于读操作，但重试会带来更长延迟。可通过 <code>retries=&quot;2&quot;</code> 来设置重试次数（不含第一次）。</li><li><strong>Failfast</strong> - <strong>快速失败</strong>。只发起一次调用，失败立即报错。通常用于非幂等性的写操作，比如新增记录。</li><li><strong>Failsafe</strong> - <strong>失败安全</strong>。出现异常时，直接忽略。通常用于写入审计日志等操作。</li><li><strong>Failback</strong> - <strong>失败自动恢复</strong>。后台记录失败请求，定时重发。通常用于消息通知操作。</li><li><strong>Forking</strong> - <strong>并行调用多个服务器</strong>。只要一个成功即返回。通常用于实时性要求较高的读操作，但需要浪费更多服务资源。可通过 <code>forks=&quot;2&quot;</code> 来设置最大并行数。</li><li><strong>Broadcast</strong> - <strong>广播调用所有提供者</strong>。逐个调用，任意一台报错则报错。通常用于通知所有提供者更新缓存或日志等本地资源信息。</li></ul><p>集群容错配置示例：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>service</span> <span class="token attr-name">cluster</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>failsafe<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span> <span class="token attr-name">cluster</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>failsafe<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="可观测" tabindex="-1"><a class="header-anchor" href="#可观测" aria-hidden="true">#</a> 可观测</h2><h3 id="【中等】dubbo-提供了哪些监控能力" tabindex="-1"><a class="header-anchor" href="#【中等】dubbo-提供了哪些监控能力" aria-hidden="true">#</a> 【中等】Dubbo 提供了哪些监控能力？</h3><p>Dubbo 内部维护了多个纬度的可观测指标，并且支持多种方式的可视化监测。可观测性指标从总体上来说分为三个度量纬度：</p><ul><li><strong>Admin</strong> - Admin 控制台可视化展示了集群中的应用、服务、实例及依赖关系，支持流量治理规则下发，同时还提供如服务测试、mock、文档管理等提升研发测试效率的工具。</li><li><strong>Metrics</strong> - Dubbo 统计了一系列的流量指标如 QPS、RT、成功请求数、失败请求数等，还包括一系列的内部组件状态如线程池数、服务健康状态等。</li><li><strong>Tracing</strong> - Dubbo 与业界主流的链路追踪工作做了适配，包括 Skywalking、Zipkin、Jaeger 都支持 Dubbo 服务的链路追踪。</li><li><strong>Logging</strong> - Dubbo 支持多种日志框架适配。以 Java 体系为例，支持包括 Slf4j、Log4j2、Log4j、Logback、Jcl 等，用户可以基于业务需要选择合适的框架；同时 Dubbo 还支持 Access Log 记录请求踪迹。</li></ul><h3 id="【中等】dubbo-的-monitor-是如何工作的" tabindex="-1"><a class="header-anchor" href="#【中等】dubbo-的-monitor-是如何工作的" aria-hidden="true">#</a> 【中等】Dubbo 的 Monitor 是如何工作的？</h3><p>Dubbo Monitor 在设计上兼顾低侵入性、高性能、实时性。</p><p><strong>核心职责</strong></p><ul><li><strong>数据采集</strong>：通过<code>MonitorFilter</code>拦截每次服务调用，记录：调用次数、调用时间、耗时、成功数、失败数、异常等信息。</li><li><strong>数据上报</strong>：采用非阻塞方式上报统计信息到监控中心，避免影响业务性能。</li><li><strong>存储和分析</strong>：监控中心可以是第三方监控系统，如：Zabbix、Prometheus 或 Dubbo 内置的轻量级实现，持久化存储数据。</li><li><strong>可视化</strong>：可视化可以选择 Dubbo 提供的轻量级实现 Dubbo Admin，也可以集成第三方可视化 Dashboard。</li></ul><p><strong>关键组件</strong></p><ul><li><strong>MonitorFilter</strong><ul><li><strong>调用前</strong>：记录开始时间。</li><li><strong>调用后</strong>：计算耗时，封装监控数据（成功/失败状态）。</li><li><strong>上报</strong>：通过<code>MonitorProtocol</code>异步发送数据。</li></ul></li><li><strong>MonitorProtocol</strong>：专为监控设计的轻量协议，支持批量上报，降低网络开销。</li></ul><p><strong>高可用与扩展</strong></p><ul><li><strong>多实例部署</strong>：监控中心集群化，避免单点故障。</li><li><strong>弹性扩展</strong>：采用分布式存储（如 ES、时序数据库）应对高流量。</li></ul><p><strong>监控数据流</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>服务调用 → MonitorFilter 拦截 → 记录指标 → 异步上报 → Monitor 中心 → 存储 → 可视化
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="【困难】如何在-dubbo-中处理服务调用链路追踪" tabindex="-1"><a class="header-anchor" href="#【困难】如何在-dubbo-中处理服务调用链路追踪" aria-hidden="true">#</a> 【困难】如何在 Dubbo 中处理服务调用链路追踪？</h3><p><strong>核心实现步骤</strong></p><ol><li><p><strong>集成追踪框架</strong></p><ul><li>选择 SkyWalking/Zipkin/Jaeger 等工具</li></ul></li></ol><ul><li>添加对应依赖（如<code>skywalking-agent.jar</code>）</li></ul><ol start="2"><li><p><strong>配置 Dubbo 过滤器</strong></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 全局启用追踪过滤器 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>provider</span> <span class="token attr-name">filter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tracingFilter<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>consumer</span> <span class="token attr-name">filter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tracingFilter<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>实现追踪过滤器</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Activate</span><span class="token punctuation">(</span>group <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token constant">PROVIDER</span><span class="token punctuation">,</span> <span class="token constant">CONSUMER</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TracingFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Invoker</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> invoker<span class="token punctuation">,</span> <span class="token class-name">Invocation</span> inv<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RpcException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1. 从 invocation 获取/生成 TraceID</span>
        <span class="token class-name">String</span> traceId <span class="token operator">=</span> <span class="token function">getOrCreateTraceId</span><span class="token punctuation">(</span>inv<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 2. 记录开始时间（RPC 上下文/ThreadLocal）</span>
        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 3. 传递追踪上下文（通过 RpcContext）</span>
            <span class="token class-name">RpcContext</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttachment</span><span class="token punctuation">(</span><span class="token string">&quot;traceId&quot;</span><span class="token punctuation">,</span> traceId<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 4. 执行实际调用</span>
            <span class="token keyword">return</span> invoker<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>inv<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token comment">// 5. 上报追踪数据</span>
            <span class="token function">report</span><span class="token punctuation">(</span>traceId<span class="token punctuation">,</span> inv<span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p><strong>关键设计要点</strong></p><ol><li><p><strong>上下文传播</strong></p><ul><li>通过<code>RpcContext</code>传递<code>TraceID</code>和<code>SpanID</code></li><li>跨服务时自动携带 HTTP Headers/Dubbo Attachments</li></ul></li><li><p><strong>异步上报</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 示例：使用异步线程池上报</span>
executor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    tracer<span class="token punctuation">.</span><span class="token function">report</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Span</span><span class="token punctuation">(</span>traceId<span class="token punctuation">,</span> duration<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>采样控制</strong></p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># 在配置文件中控制采样率</span>
<span class="token key attr-name">dubbo.tracing.sample-rate</span><span class="token punctuation">=</span><span class="token value attr-value">0.1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p><strong>主流方案对比</strong></p><table><thead><tr><th>框架</th><th>数据存储</th><th>可视化</th><th>特点</th></tr></thead><tbody><tr><td>SkyWalking</td><td>ES/H2</td><td>原生 UI</td><td>零侵入、APM 集成度高</td></tr><tr><td>Zipkin</td><td>Cassandra/ES</td><td>Zipkin UI</td><td>轻量级、部署简单</td></tr><tr><td>Jaeger</td><td>Cassandra/Kafka</td><td>Jaeger UI</td><td>Uber 开源、支持大规模集群</td></tr></tbody></table><p><strong>生产建议</strong></p><ol><li><p><strong>性能优化</strong></p><ul><li>采用异步批量上报（如 Jaeger 的 gRPC reporter）</li><li>对高频服务启用采样（1%~10%）</li></ul></li><li><p><strong>异常处理</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> invoker<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>inv<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 标记错误 span</span>
    span<span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">throw</span> e<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>扩展功能</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 添加自定义标签</span>
span<span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token string">&quot;region&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;north-1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 记录业务指标</span>
span<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;order_amount&quot;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><blockquote><p><strong>注</strong>：新版 Dubbo 已内置 Tracing 支持，可通过<code>dubbo-spring-boot-starter</code>快速集成，推荐优先使用官方方案。</p></blockquote><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,98),O={href:"https://github.com/apache/dubbo",target:"_blank",rel:"noopener noreferrer"},V={href:"https://dubbo.apache.org/zh-cn/",target:"_blank",rel:"noopener noreferrer"},K={href:"https://cn.dubbo.apache.org/zh-cn/docsv2.7/dev/design/",target:"_blank",rel:"noopener noreferrer"},X={href:"https://github.com/doocs/advanced-java/blob/master/docs/distributed-system/dubbo-service-management.md",target:"_blank",rel:"noopener noreferrer"};function W(Q,G){const o=l("Mermaid"),t=l("ExternalLinkIcon");return p(),c("div",null,[u,a(o,{id:"mermaid-29",code:"eJxLL0osyFDwCeIKKMovy0xJLdLVtasx1FN4tnnF07aep3M2PJ3bUBOUmp5ZXFJUqRGVn5+dmlqQWqTvl5icX6zJBQBGeBor"}),d,a(o,{id:"mermaid-33",code:"eJxLL0osyFDwCeJyzs8rLs1NLdLVtasx0lN41t35tH/aszm9T7sWPu2Y/mLhipqg1PTM4pKiShSlxnoKLzY0P5+y4vnsdc8WtCsEFOWXZaakFtXAGFwAerEsig=="}),g,n("p",null,[s("同时也支持 Kubernetes、Mesh 体系的服务发现，具体请参考 "),n("a",k,[s("使用教程 - kubernetes 部署"),a(t)])]),b,n("p",null,[s("在分布式系统领域，有一个著名的 "),n("a",v,[s("CAP 理论"),a(t)]),s("。CAP 定理提出：分布式系统有三个指标，这三个指标不能同时做到：")]),m,n("p",null,[s("根据 "),n("a",h,[s("CAP 理论"),a(t)]),s("，三种特性无法同时达成，必须在可用性和一致性之间做取舍。于是，根据不同侧重点，注册中心可以分为 CP 和 AP 两个阵营：")]),n("ul",null,[f,y,n("li",null,[x,s(" - Nacos 的内在设计偏向于 CP，即在发生网络分区的情况下优先保证数据的一致性和分区容错性，牺牲一定的可用性。虽然 Nacos 的内在设计偏向于 CP，但通过合理的配置与实践，可以在一定程度上优化其可用性。例如：调整副本数、配置同步策略。更多详情可以参考："),n("a",q,[s("Nacos CAP"),a(t)])])]),_,n("blockquote",null,[n("p",null,[s("扩展："),n("a",D,[s("Dubbo3 应用级服务发现设计"),a(t)])])]),P,n("ul",null,[C,w,n("li",null,[s("算法参见："),n("a",A,[s("Consistent Hashing | WIKIPEDIA"),a(t)])]),R,L]),S,M,E,n("p",null,[s("以下是 "),n("a",I,[s("Dubbo P2C 算法实现提案"),a(t)])]),j,z,n("p",null,[s("以下是 "),n("a",F,[s("Dubbo Adaptive 算法实现提案"),a(t)])]),n("blockquote",null,[H,n("ul",null,[n("li",null,[n("a",N,[s("Dubbo 官方文档之负载均衡"),a(t)])]),n("li",null,[n("a",T,[s("负载均衡"),a(t)])])])]),Z,a(o,{id:"mermaid-1102",code:"eJxLL0osyFAIceJSAALHlNzMvOjn6xY+n9D2rG/5045tT/s3xCro6trVPOtb8bKh8cXylqcdM2sUnPPz0jLTnVPzSlKLol+29j7fu+7JjrVP9zfHgs1Blgbrfrpu3rPp255O6Hm2dmmNQkBRfllmClDnszm9T7sWvuhqet60E66zuDQXquvF9vXPp2x82rb5+dppNQpB+aVA45wzEoFOhMi8nLwPogtJCqJxf/uz3UtqFHycol9smf9i796nc9tfLFwYywUAa490Ew=="}),B,n("p",null,[s("标签路由规则是一个非此即彼的流量隔离方案，也就是匹配标签的请求会 100% 转发到有相同标签的实例，没有匹配标签的请求会 100% 转发到其余未匹配的实例。如果您需要按比例的流量调度方案，请参考示例 "),n("a",J,[s("基于权重的按比例流量路由"),a(t)]),s("。")]),U,n("ul",null,[n("li",null,[n("a",O,[s("Dubbo Github"),a(t)])]),n("li",null,[n("a",V,[s("Dubbo 官方文档"),a(t)])]),n("li",null,[n("a",K,[s("Dubbo 框架设计"),a(t)])]),n("li",null,[n("a",X,[s("如何基于 Dubbo 进行服务治理、服务降级、失败重试以及超时重试？"),a(t)])])])])}const nn=i(r,[["render",W],["__file","index.html.vue"]]);export{nn as default};
