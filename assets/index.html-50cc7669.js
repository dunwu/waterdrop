import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as d,c as l,a as e,b as r,d as t,e as n}from"./app-70dbecd6.js";const a={},i=e("h1",{id:"spring-mvc-之过滤器",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#spring-mvc-之过滤器","aria-hidden":"true"},"#"),r(" Spring MVC 之过滤器")],-1),h=e("p",null,[e("code",null,"spring-web"),r(" 模块提供了一些有用的 Filter：")],-1),_={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#filters-http-put",target:"_blank",rel:"noopener noreferrer"},p={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#filters-forwarded-headers",target:"_blank",rel:"noopener noreferrer"},f={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#filters-shallow-etag",target:"_blank",rel:"noopener noreferrer"},u={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#filters-cors",target:"_blank",rel:"noopener noreferrer"},g=n('<h2 id="表单内容过滤器" tabindex="-1"><a class="header-anchor" href="#表单内容过滤器" aria-hidden="true">#</a> 表单内容过滤器</h2><p>浏览器只能通过 HTTP GET 或 HTTP POST 提交表单数据，但非浏览器客户端也可以使用 HTTP PUT、PATCH 和 DELETE。 Servlet API 需要 <code>ServletRequest.getParameter*()</code> 系列方法来支持仅对 HTTP POST 的表单字段访问。</p><p><code>spring-web</code> 模块提供了 <code>FormContentFilter</code> 来拦截内容类型为 <code>applicationx-www-form-urlencoded</code> 的 HTTP PUT、PATCH、DELETE 请求，从请求体中读取表单数据，并包装 <code>ServletRequest</code> 通过 <code>ServletRequest.getParameter()</code> 系列方法使表单数据可用。</p><h2 id="转发过滤器" tabindex="-1"><a class="header-anchor" href="#转发过滤器" aria-hidden="true">#</a> 转发过滤器</h2><p>当请求通过代理（如负载均衡器）时，主机、端口和方案可能会发生变化，这使得从客户端角度创建指向正确主机、端口和方案的链接成为一项挑战。</p>',5),m={href:"https://tools.ietf.org/html/rfc7239",target:"_blank",rel:"noopener noreferrer"},w=e("code",null,"Forwarded",-1),b=e("code",null,"X-Forwarded-Host",-1),T=e("code",null,"X-Forwarded-Port",-1),S=e("code",null,"X-Forwarded-Proto",-1),k=e("code",null,"X-Forwarded-Ssl",-1),F=e("code",null,"X-Forwarded-Prefix",-1),E=n("<p><code>ForwardedHeaderFilter</code> 是一个 Servlet 过滤器，它修改请求以便 a) 根据 <code>Forwarded</code> 头更改主机、端口和 scheme；b) 删除这些头以消除进一步的影响。该过滤器依赖于包装请求，因此它必须排在其他过滤器之前，例如 <code>RequestContextFilter</code>，它应该与修改后的请求一起使用，而不是原始请求。</p><p><code>Forwarded</code> 头有安全考量，因为应用程序无法知道头是由代理按预期添加的，还是由恶意客户端添加的。这就是为什么应将信任边界处的代理配置为删除来自外部的不受信任的 <code>Forwarded</code> 头。还可以使用 <code>removeOnly=true</code> 配置 <code>ForwardedHeaderFilter</code>，在这种情况下它会删除但不使用头。</p>",2),x={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-ann-async",target:"_blank",rel:"noopener noreferrer"},C=e("code",null,"DispatcherType.ASYNC",-1),P=e("code",null,"DispatcherType.ERROR",-1),v=e("code",null,"AbstractAnnotationConfigDispatcherServletInitializer",-1),R={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-container-config",target:"_blank",rel:"noopener noreferrer"},D=e("code",null,"web.xml",-1),H=e("code",null,"FilterRegistrationBean",-1),y=e("code",null,"DispatcherType.REQUEST",-1),A=e("code",null,"DispatcherType.ASYNC",-1),N=e("code",null,"DispatcherType.ERROR",-1),O=e("h2",{id:"etag-过滤器",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#etag-过滤器","aria-hidden":"true"},"#"),r(" ETag 过滤器")],-1),I=e("p",null,[e("code",null,"ShallowEtagHeaderFilter"),r(" 过滤器通过缓存写入响应的内容并从中计算 MD5 哈希来创建“浅”ETag。下次客户端发送时，它会做同样的事情，但它还会将计算值与 "),e("code",null,"If-None-Match"),r(" 请求标头进行比较，如果两者相等，则返回 304 (NOT_MODIFIED)。")],-1),B=e("p",null,"此策略节省网络带宽但不节省 CPU，因为必须为每个请求计算完整响应。前面描述的控制器级别的其他策略可以避免计算。",-1),V=e("code",null,"writeWeakETag",-1),M=e("code",null,'W"02a2d595e6ed9a0b24f027f2b63b134d6"',-1),X={href:"https://tools.ietf.org/html/rfc7232#section-2.3",target:"_blank",rel:"noopener noreferrer"},q={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-ann-async",target:"_blank",rel:"noopener noreferrer"},L=e("code",null,"DispatcherType.ASYNC",-1),U=e("code",null,"AbstractAnnotationConfigDispatcherServletInitializer",-1),Y=e("code",null,"web.xml",-1),W=e("code",null,"FilterRegistrationBean",-1),z=e("code",null,"DispatcherType.ASYNC",-1),G=e("h2",{id:"跨域过滤器",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#跨域过滤器","aria-hidden":"true"},"#"),r(" 跨域过滤器")],-1),Q=e("p",null,[r("Spring MVC 通过控制器上的注解为 CORS 配置提供细粒度支持。但是，当与 Spring Security 一起使用时，建议依赖内置的 "),e("code",null,"CorsFilter"),r("，它必须在 Spring Security 的过滤器链之前订阅。")],-1),j=e("h2",{id:"参考资料",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#参考资料","aria-hidden":"true"},"#"),r(" 参考资料")],-1),J={href:"https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/index.html",target:"_blank",rel:"noopener noreferrer"},K={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/web.html",target:"_blank",rel:"noopener noreferrer"};function Z($,ee){const o=c("ExternalLinkIcon");return d(),l("div",null,[i,h,e("ul",null,[e("li",null,[e("a",_,[r("Form Data"),t(o)])]),e("li",null,[e("a",p,[r("Forwarded Headers"),t(o)])]),e("li",null,[e("a",f,[r("Shallow ETag"),t(o)])]),e("li",null,[e("a",u,[r("CORS"),t(o)])])]),g,e("p",null,[e("a",m,[r("RFC 7239"),t(o)]),r(" 定义了 "),w,r(" HTTP 头，代理可以使用它来提供有关原始请求的信息。还有其他非标准头，包括 "),b,r("、"),T,r("、"),S,r("、"),k,r(" 和 "),F,r("。")]),E,e("p",null,[r("为了支持"),e("a",x,[r("异步请求"),t(o)]),r("和错误分派，此过滤器应使用 "),C,r(" 和 "),P,r(" 进行映射。如果使用 Spring Framework 的 "),v,r("（参见 "),e("a",R,[r("Servlet Config"),t(o)]),r("），所有过滤器都会自动为所有调度类型注册。但是，如果通过 "),D,r(" 或在 Spring Boot 中通过 "),H,r(" 注册过滤器，请确保除了 "),y,r(" 之外还包括 "),A,r(" 和 "),N,r("。")]),O,I,B,e("p",null,[r("此过滤器有一个 "),V,r(" 参数，该参数将过滤器配置为写入类似于以下内容的弱 ETag："),M,r("（如 "),e("a",X,[r("RFC 7232 Section 2.3"),t(o)]),r(" 中所定义）。")]),e("p",null,[r("为了支持"),e("a",q,[r("异步请求"),t(o)]),r("，这个过滤器必须用 "),L,r(" 映射，这样过滤器才能延迟并成功生成一个 ETag 到最后最后一次异步调度。如果使用 Spring Framework 的 "),U,r("，所有过滤器都会自动为所有调度类型注册。但是，如果通过 "),Y,r(" 或在 Spring Boot 中通过 "),W,r(" 注册过滤器，请确保包含 "),z,r("。")]),G,Q,j,e("ul",null,[e("li",null,[e("a",J,[r("Spring Framework 官方文档"),t(o)])]),e("li",null,[e("a",K,[r("Spring Framework 官方文档之 Web"),t(o)])])])])}const te=s(a,[["render",Z],["__file","index.html.vue"]]);export{te as default};
