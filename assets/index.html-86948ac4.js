import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as a,e as s}from"./app-c4d395b2.js";const e={},o=s(`<h1 id="java-虚拟机面试二" tabindex="-1"><a class="header-anchor" href="#java-虚拟机面试二" aria-hidden="true">#</a> Java 虚拟机面试二</h1><h2 id="垃圾收集" tabindex="-1"><a class="header-anchor" href="#垃圾收集" aria-hidden="true">#</a> 垃圾收集</h2><h3 id="【困难】如何判断-java-对象是否可以被回收" tabindex="-1"><a class="header-anchor" href="#【困难】如何判断-java-对象是否可以被回收" aria-hidden="true">#</a> 【困难】如何判断 Java 对象是否可以被回收？</h3><p>判断 Java 对象是否可以被回收有两种方法：</p><ul><li>引用计数法</li><li>可达性分析法</li></ul><h4 id="引用计数法" tabindex="-1"><a class="header-anchor" href="#引用计数法" aria-hidden="true">#</a> 引用计数法</h4><p>引用计数算法（Reference Counting）的原理是：在对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加一；当引用失效时，计数器值就减一；任何时刻计数器为零的对象就是不可能再被使用的。</p><p>引用计数算法<strong>简单高效</strong>，但是<strong>存在循环引用问题</strong>——两个对象出现循环引用的情况下，此时引用计数器永远不为 0，导致无法对它们进行回收。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReferenceCountingGC</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ReferenceCountingGC</span> objectA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceCountingGC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ReferenceCountingGC</span> objectB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceCountingGC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        objectA<span class="token punctuation">.</span>instance <span class="token operator">=</span> objectB<span class="token punctuation">;</span>
        objectB<span class="token punctuation">.</span>instance <span class="token operator">=</span> objectA<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为循环引用的存在，所以 <strong>Java 虚拟机不适用引用计数算法</strong>。</p><h4 id="可达性分析法" tabindex="-1"><a class="header-anchor" href="#可达性分析法" aria-hidden="true">#</a> 可达性分析法</h4><p>通过 <strong>GC Roots</strong> 作为起始点进行搜索，JVM 将能够到达到的对象视为<strong>存活</strong>，不可达的对象视为<strong>死亡</strong>。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/java/javacore/jvm/jvm-gc-root.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>可作为 GC Roots 的对象</strong>包括下面几种：</p><ul><li>虚拟机栈（栈帧中的局部变量表）中引用的对象（如当前方法局部变量）。</li><li>本地方法栈（JNI）中引用的 Native 对象。</li><li>方法区中静态属性（<code>static</code>字段）引用的对象。</li><li>方法区中常量（<code>final</code>常量）引用的对象。</li></ul><h4 id="方法区的回收条件" tabindex="-1"><a class="header-anchor" href="#方法区的回收条件" aria-hidden="true">#</a> 方法区的回收条件</h4><p>主要回收<strong>废弃常量</strong>和<strong>不再使用的类</strong>。</p><p>不再使用的类定义如下：</p><ul><li>Java 堆中不存在该类的任何实例。</li><li>加载该类的 <code>ClassLoader</code> 已被回收。</li><li>该类对应的 <code>Class</code> 对象无任何地方引用（如反射）。</li></ul><p>以上为<strong>类卸载必要条件，且全部满足也不一定被卸载</strong>。</p><h4 id="常见内存泄漏场景" tabindex="-1"><a class="header-anchor" href="#常见内存泄漏场景" aria-hidden="true">#</a> 常见内存泄漏场景</h4><p><strong>内存泄漏的本质是对象无法回收</strong>，常见的有以下情况：</p><ul><li>静态容器（如 <code>static HashMap</code>）持有对象。</li><li>未关闭的资源（如数据库连接、流）。</li><li>监听器未注销。</li><li>不合理使用 <code>finalize()</code> 导致对象复活。</li></ul><h3 id="【中等】为什么不建议使用-finalize" tabindex="-1"><a class="header-anchor" href="#【中等】为什么不建议使用-finalize" aria-hidden="true">#</a> 【中等】为什么不建议使用 finalize()？</h3><p><code>finalize()</code> 类似 C++ 的析构函数，用来做关闭外部资源等工作。<code>finalize()</code> 方法是 Java 提供的对象被垃圾回收前最后的自救机会（在 GC 时被调用一次）。</p><ul><li><strong>调用时机</strong>：对象被标记为垃圾后、实际回收前，由 JVM 的垃圾回收线程触发（不保证立即执行）。</li><li><strong>自救机制</strong>：在 <code>finalize()</code> 中重新让对象被引用（如赋值给静态变量），可避免本次回收。</li><li><strong>风险</strong>： <ul><li><strong>执行时机不确定，可能永远不调用</strong>。</li><li><strong>性能差（延迟回收），易导致内存泄漏</strong>。</li></ul></li></ul><p><strong>不要使用 finalize()</strong>！在 Java 9 后，<code>finalize()</code> 直接被标记为 <code>@Deprecated</code>。推荐用 <code>try-with-resources</code> 或显式调用 <code>close()</code> 管理资源。</p><h3 id="【中等】java-对象有哪些引用类型" tabindex="-1"><a class="header-anchor" href="#【中等】java-对象有哪些引用类型" aria-hidden="true">#</a> 【中等】Java 对象有哪些引用类型？</h3><p>在 Java 中，对象的引用类型决定了它们如何被垃圾回收（GC）处理，主要分为 <strong>4 种引用类型</strong>，按强度从高到低排列如下：</p><table><thead><tr><th>引用类型</th><th>回收时机</th><th>是否可获取对象（<code>get()</code>）</th><th>典型用途</th></tr></thead><tbody><tr><td>强引用</td><td>永不回收（除非显式置空）</td><td>是</td><td>常规对象</td></tr><tr><td>软引用</td><td>内存不足时</td><td>是</td><td>缓存</td></tr><tr><td>弱引用</td><td>GC 运行时</td><td>是</td><td>避免内存泄漏（如 <code>WeakHashMap</code>）</td></tr><tr><td>虚引用</td><td>GC 运行时</td><td>否</td><td>对象回收跟踪（如堆外内存管理）</td></tr></tbody></table><p><strong>（1）强引用（Strong Reference）</strong></p><p><strong>被强引用关联的对象不会被垃圾收集器回收。</strong></p><p>强引用：使用 <code>new</code> 一个新对象的方式来创建强引用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 强引用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>回收条件</strong>：当 <code>obj = null</code> 或超出作用域时，对象变为可回收状态。</p><p><strong>（2）软引用（Soft Reference）</strong></p><p><strong>被软引用关联的对象，只有在内存不够的情况下才会被回收。</strong></p><p>软引用：使用 <code>SoftReference</code> 类来创建软引用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">SoftReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> softRef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoftReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Object</span> obj <span class="token operator">=</span> softRef<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可能返回 null（如果被回收）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>用途</strong>：适合实现缓存（如图片缓存）。</p><p><strong>（3）弱引用（Weak Reference）</strong></p><p><strong>被弱引用关联的对象一定会被垃圾收集器回收，也就是说它只能存活到下一次垃圾收集发生之前。</strong></p><p>使用 <code>WeakReference</code> 类来实现弱引用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> weakRef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Object</span> obj <span class="token operator">=</span> weakRef<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 通常返回 null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>用途</strong>：适合临时缓存（如 <code>WeakHashMap</code> 的键）、避免内存泄漏。</p><p><strong>（4）虚引用（Phantom Reference）</strong></p><p>虚引用又称为幽灵引用或者幻影引用。</p><p>无法通过虚引用获取对象（<code>get()</code> 始终返回 <code>null</code>）：一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用取得一个对象实例。</p><p><strong>为一个对象设置虚引用关联的唯一目的就是能在这个对象被收集器回收时收到一个系统通知。</strong></p><p>使用 <code>PhantomReference</code> 来实现虚引用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ReferenceQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">PhantomReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> phantomRef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhantomReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Reference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> ref <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不为 null 说明对象被回收</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>用途</strong>：管理堆外内存（如 NIO 的 <code>DirectByteBuffer</code>）。</p><p><strong>对比</strong>：</p><ol><li><strong>强引用</strong>是默认方式，其他引用需显式使用 <code>java.lang.ref</code> 包下的类。</li><li><strong>软引用 vs 弱引用</strong>： <ul><li>软引用适合保留缓存直到内存紧张；</li><li>弱引用立即释放，避免内存泄漏。</li></ul></li><li><strong>虚引用</strong>的唯一用途是关联 <code>ReferenceQueue</code>，用于对象回收后的通知。</li></ol><p>通过合理选择引用类型，可以优化内存管理并避免内存泄漏问题。</p><h3 id="【中等】java-中有哪些垃圾回收算法" tabindex="-1"><a class="header-anchor" href="#【中等】java-中有哪些垃圾回收算法" aria-hidden="true">#</a> 【中等】Java 中有哪些垃圾回收算法？</h3><p>Java 中的垃圾回收（GC）算法主要分为以下几类，每种算法针对不同的场景和内存区域（如年轻代、老年代）进行优化。</p><p>垃圾收集的性能指标主要有两点：</p><ul><li><strong>停顿时间</strong> - 停顿时间是因为 GC 而导致程序不能工作的时间长度。</li><li><strong>吞吐量</strong> - 吞吐量关注在特定的时间周期内一个应用的工作量的最大值。对关注吞吐量的应用来说长暂停时间是可以接受的。由于高吞吐量的应用关注的基准在更长周期时间上，所以快速响应时间不在考虑之内。</li></ul><p>以下是核心算法及其特点的概括：</p><h4 id="标记-清除算法-mark-sweep" tabindex="-1"><a class="header-anchor" href="#标记-清除算法-mark-sweep" aria-hidden="true">#</a> 标记-清除算法（Mark-Sweep）</h4><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/java/javacore/jvm/jvm-gc-mark-sweep.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><strong>原理</strong>： <ol><li><strong>标记</strong>：从 GC Roots 出发，标记所有可达对象。</li><li><strong>清除</strong>：遍历堆内存，回收未被标记的对象。</li></ol></li><li><strong>缺点</strong>： <ul><li>产生<strong>内存碎片</strong>（不连续空间），可能导致大对象分配失败。</li><li>效率较低（需遍历全堆）。</li></ul></li><li><strong>适用场景</strong>：老年代（如 CMS 回收器的初始阶段）。</li></ul><h4 id="标记-整理算法-mark-compact" tabindex="-1"><a class="header-anchor" href="#标记-整理算法-mark-compact" aria-hidden="true">#</a> 标记-整理算法（Mark-Compact）</h4><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/java/javacore/jvm/jvm-gc-mark-compact.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><strong>原理</strong>： <ol><li><strong>标记</strong>：与标记-清除相同，标记可达对象。</li><li><strong>整理</strong>：将存活对象向内存一端移动，清理边界外空间。</li></ol></li><li><strong>优点</strong>：避免内存碎片。</li><li><strong>缺点</strong>：移动对象开销大（需更新引用地址）。</li><li><strong>适用场景</strong>：适合<strong>老年代</strong>，对象存活率高（如 Serial Old、Parallel Old 回收器）。</li></ul><h4 id="复制算法-copying" tabindex="-1"><a class="header-anchor" href="#复制算法-copying" aria-hidden="true">#</a> 复制算法（Copying）</h4><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/java/javacore/jvm/jvm-gc-copying.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><strong>原理</strong>： <ul><li>将内存分为两块（<code>From</code> 和 <code>To</code> 空间），每次只使用一块。</li><li>GC 时将存活对象从 <code>From</code> 复制到 <code>To</code> 空间，并清空 <code>From</code>。</li></ul></li><li><strong>优点</strong>： <ul><li>无内存碎片。</li><li>高效（仅复制存活对象）。</li></ul></li><li><strong>缺点</strong>：内存利用率仅 50%（需预留一半空间）。</li><li><strong>适用场景</strong>：年轻代（如 Serial、ParNew 等回收器），因年轻代对象存活率低。</li><li><strong>优化</strong>：实际 JVM 将年轻代分为 <strong>Eden</strong> 和 <strong>Survivor（From/To）</strong> 区（比例通常为 <code>8:1:1</code>），通过多次复制到 Survivor 区避免浪费。</li></ul><h4 id="分代收集算法-generational-collection" tabindex="-1"><a class="header-anchor" href="#分代收集算法-generational-collection" aria-hidden="true">#</a> 分代收集算法（Generational Collection）</h4><p><strong>分代收集是 JVM 在吞吐量、延迟和内存占用之间找到的经典平衡点</strong>，而新一代 GC 则通过更复杂的并发机制尝试突破其限制。</p><p><strong>跨代引用处理</strong>：使用<strong>记忆集</strong>（<strong>Remembered Set</strong>）记录老年代对年轻代的引用，避免全堆扫描。</p><p>根据对象存活周期将堆分为<strong>年轻代</strong>和<strong>老年代</strong>，对不同区域采用不同算法：</p><ul><li><strong>年轻代</strong>：复制算法（因对象朝生夕死，存活率低）。</li><li><strong>老年代</strong>：标记-清除或标记-整理（因对象存活率高）。</li><li><strong>永久代</strong>：这部分就是早期 Hotspot JVM 的方法区实现方式了，储存 Java 类元数据、常量池、Intern 字符串缓存。在 JDK 8 之后就不存在永久代这块儿了。</li></ul><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/java/javacore/jvm/jvm-hotspot-heap-structure.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="分区算法-region-based" tabindex="-1"><a class="header-anchor" href="#分区算法-region-based" aria-hidden="true">#</a> 分区算法（Region-Based）</h4><ul><li><strong>原理</strong>：将堆划分为多个独立区域（如 G1 的 <strong>Region</strong>），优先回收垃圾最多的区域。</li><li><strong>优点</strong>： <ul><li>控制每次回收的区域数量，减少停顿时间（<strong>STW</strong>）。</li><li>适合大内存应用（如 G1、ZGC、Shenandoah）。</li></ul></li></ul><h4 id="增量算法-incremental" tabindex="-1"><a class="header-anchor" href="#增量算法-incremental" aria-hidden="true">#</a> 增量算法（Incremental）</h4><ul><li><strong>目标</strong>：减少单次 GC 停顿时间，通过分阶段执行 GC 与用户线程交替运行。</li><li><strong>缺点</strong>： <ul><li>线程切换开销大，整体吞吐量可能下降。</li></ul></li><li><strong>现代实现</strong>：如 CMS 的并发标记阶段。</li></ul><h4 id="常见垃圾回收器与算法对应" tabindex="-1"><a class="header-anchor" href="#常见垃圾回收器与算法对应" aria-hidden="true">#</a> 常见垃圾回收器与算法对应</h4><table><thead><tr><th>回收器</th><th>新生代算法</th><th>老年代算法</th><th>特点</th></tr></thead><tbody><tr><td><strong>Serial</strong></td><td>复制</td><td>标记-整理</td><td>单线程，STW 时间长。</td></tr><tr><td><strong>ParNew</strong></td><td>复制</td><td>标记-整理</td><td>Serial 的多线程版。</td></tr><tr><td><strong>Parallel Scavenge</strong></td><td>复制</td><td>标记-整理</td><td>吞吐量优先。</td></tr><tr><td><strong>CMS</strong></td><td>-</td><td>标记-清除（并发）</td><td>低延迟，但内存碎片多。</td></tr><tr><td><strong>G1</strong></td><td>复制 + 分区</td><td>标记-整理 + 分区</td><td>兼顾吞吐与延迟，Region 分区。</td></tr><tr><td><strong>ZGC/Shenandoah</strong></td><td>复制 + 分区</td><td>标记-整理 + 分区</td><td>亚毫秒级停顿，并发标记/整理。</td></tr></tbody></table><p>现代 JVM 趋向于使用<strong>分代+分区+并发</strong>的复合算法（如 G1），在吞吐量和延迟之间取得平衡。</p><h3 id="【中等】java-中常见的垃圾收集器有哪些" tabindex="-1"><a class="header-anchor" href="#【中等】java-中常见的垃圾收集器有哪些" aria-hidden="true">#</a> 【中等】Java 中常见的垃圾收集器有哪些？</h3><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/java/javacore/jvm/jvm-gc-overview.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>以下是 Java 主要垃圾收集器的详细对比表格，涵盖算法、特点、适用场景和关键参数：</p><table><thead><tr><th><strong>垃圾收集器</strong></th><th><strong>分类</strong></th><th><strong>算法</strong></th><th><strong>目标</strong></th><th><strong>适用场景</strong></th><th><strong>JDK 版本</strong></th><th><strong>启用参数</strong></th><th><strong>优缺点</strong></th></tr></thead><tbody><tr><td><strong>Serial GC</strong></td><td>串行</td><td>新生代：复制<br>老年代：标记-整理</td><td>简单低开销</td><td>单核、客户端应用、小堆</td><td>所有版本</td><td><code>-XX:+UseSerialGC</code></td><td>✅ 内存占用小<br>❌ 全程 STW，延迟高</td></tr><tr><td><strong>Parallel Scavenge</strong></td><td>并行（吞吐优先）</td><td>新生代：复制</td><td>高吞吐量</td><td>后台计算、多核大堆</td><td>JDK 1.4+</td><td><code>-XX:+UseParallelGC</code></td><td>✅ 吞吐量高<br>❌ 停顿时间较长</td></tr><tr><td><strong>Parallel Old</strong></td><td>并行（吞吐优先）</td><td>老年代：标记-整理</td><td>配合 Parallel Scavenge</td><td>与 Parallel Scavenge 搭配使用</td><td>JDK 6+</td><td><code>-XX:+UseParallelOldGC</code></td><td>✅ 老年代并行回收<br>❌ 仍以吞吐优先，延迟较高</td></tr><tr><td><strong>ParNew</strong></td><td>并行</td><td>新生代：复制</td><td>低停顿（与 CMS 配合）</td><td>需与 CMS 搭配的多核环境</td><td>JDK 1.4+</td><td><code>-XX:+UseParNewGC</code></td><td>✅ 多线程版 Serial GC<br>❌ 仅新生代，需搭配 CMS</td></tr><tr><td><strong>CMS</strong></td><td>并发（低延迟）</td><td>老年代：标记-清除</td><td>最小化停顿时间</td><td>老年代低延迟应用</td><td>JDK 1.4-14</td><td><code>-XX:+UseConcMarkSweepGC</code></td><td>✅ 并发收集，低停顿<br>❌ 内存碎片、并发模式失败风险</td></tr><tr><td><strong>G1</strong></td><td>分区+并发</td><td>标记-整理（分 Region）</td><td>平衡吞吐与延迟</td><td>大堆（数十 GB）、JDK 8+ 默认</td><td>JDK 7+（JDK 9+默认）</td><td><code>-XX:+UseG1GC</code></td><td>✅ 可预测停顿、大堆友好<br>❌ 内存占用略高</td></tr><tr><td><strong>ZGC</strong></td><td>并发</td><td>染色指针+读屏障</td><td>亚毫秒级停顿（&lt;10ms）</td><td>超大堆（TB 级）、云原生</td><td>JDK 11+</td><td><code>-XX:+UseZGC</code></td><td>✅ 极低停顿、堆大小几乎无限制<br>❌ JDK 11+ 支持，兼容性要求高</td></tr><tr><td><strong>Shenandoah</strong></td><td>并发</td><td>转发指针+读屏障</td><td>低延迟（与 ZGC 竞争）</td><td>Red Hat 系、低延迟大堆</td><td>JDK 12+</td><td><code>-XX:+UseShenandoahGC</code></td><td>✅ 并发压缩、无停顿扩展<br>❌ 非 Oracle 官方默认</td></tr></tbody></table><p><strong>关键对比维度</strong></p><ul><li><strong>吞吐量</strong>：Parallel GC（Parallel Scavenge + Parallel Old）最优。</li><li><strong>延迟</strong>：ZGC/Shenandoah &lt; G1 &lt; CMS &lt; Parallel GC。</li><li><strong>堆大小</strong>： <ul><li>小堆（&lt;4GB）：Serial GC / Parallel GC。</li><li>大堆（4GB~数十 GB）：G1。</li><li>超大堆（TB 级）：ZGC/Shenandoah。</li></ul></li><li><strong>版本兼容性</strong>： <ul><li>JDK 8：默认 Parallel GC，可选 G1/CMS（CMS 已废弃）。</li><li>JDK 11+：默认 G1，可选 ZGC/Shenandoah。</li></ul></li></ul><p><strong>选择建议</strong></p><ul><li><strong>常规服务端应用</strong>：JDK 8 用 <code>G1</code>，JDK 11+ 用 <code>ZGC</code>（若需超低延迟）。</li><li><strong>批处理任务</strong>：<code>Parallel GC</code>（高吞吐优先）。</li><li><strong>资源受限环境</strong>：<code>Serial GC</code>（如嵌入式设备）。</li><li><strong>兼容性测试</strong>：JDK 11+ 可试用 <code>Shenandoah</code>（非 Oracle 官方构建需注意）。</li></ul><p>通过此表格可快速定位适合业务需求的 GC 组合。</p><h3 id="【困难】为什么-java-8-移除了永久代-permgen-并引入了元空间-metaspace" tabindex="-1"><a class="header-anchor" href="#【困难】为什么-java-8-移除了永久代-permgen-并引入了元空间-metaspace" aria-hidden="true">#</a> 【困难】为什么 Java 8 移除了永久代（PermGen）并引入了元空间（Metaspace）？</h3><p>Java 8 用元空间替代永久代，解决了 PermGen 固定大小易导致内存溢出和垃圾回收效率低的问题。元空间使用本地内存，具备更灵活的内存分配能力，提升了垃圾收集和内存管理的效率。</p><p><strong>永久代（PermGen）的主要问题</strong></p><ul><li><strong>固定大小限制</strong>：永久代大小通过 <code>-XX:MaxPermSize</code> 设定，默认较小（64MB~128MB），易触发 <code>OutOfMemoryError: PermGen space</code>，尤其是动态加载类过多时（如频繁部署的 Web 应用）。</li><li><strong>垃圾回收效率低</strong>：永久代与老年代共用垃圾回收机制（Full GC 时才会回收），类卸载条件苛刻（需类加载器被回收）。</li><li><strong>内存管理不灵活</strong>：永久代在 JVM 堆内分配，与对象堆共享内存空间，易导致堆内存碎片化。</li></ul><p><strong>元空间（Metaspace）的优势</strong></p><ul><li><strong>使用本地内存（Native Memory）</strong>：元空间直接分配在操作系统的本地内存中，默认无上限（仅受系统物理内存限制），避免 <code>PermGen</code> 大小硬限制问题。可通过 <code>-XX:MaxMetaspaceSize</code> 设置上限（如不设置则动态扩展）。</li><li><strong>自动调整大小</strong>：元空间可以根据需要自动扩展大小，从而降低了 OOM 的风险。</li><li><strong>性能优化</strong>：元空间由于在堆外，因此减少了 Full GC 触发频率。避免了频繁回收 PermGen 时的停顿。</li></ul><p><strong>永久代 vs. 元空间</strong></p><table><thead><tr><th><strong>特性</strong></th><th><strong>永久代（PermGen）</strong></th><th><strong>元空间（Metaspace）</strong></th></tr></thead><tbody><tr><td><strong>存储位置</strong></td><td>JVM 堆内存</td><td>本地内存（Native Memory）</td></tr><tr><td><strong>大小限制</strong></td><td><code>-XX:MaxPermSize</code> 固定上限</td><td>默认无上限，可设 <code>-XX:MaxMetaspaceSize</code></td></tr><tr><td><strong>垃圾回收</strong></td><td>依赖 Full GC</td><td>独立回收，条件更宽松</td></tr><tr><td><strong>OOM 错误</strong></td><td><code>OutOfMemoryError: PermGen space</code></td><td><code>OutOfMemoryError: Metaspace</code></td></tr></tbody></table><h3 id="【困难】java-中的-young-gc、old-gc、full-gc-和-mixed-gc-的区别是什么" tabindex="-1"><a class="header-anchor" href="#【困难】java-中的-young-gc、old-gc、full-gc-和-mixed-gc-的区别是什么" aria-hidden="true">#</a> 【困难】Java 中的 Young GC、Old GC、Full GC 和 Mixed GC 的区别是什么？</h3><h4 id="young-gc" tabindex="-1"><a class="header-anchor" href="#young-gc" aria-hidden="true">#</a> Young GC</h4><p><strong>Young GC 又称为 YGC 或 Minor GC，即年轻代垃圾回收</strong>。</p><ul><li><strong>目标</strong>：高效回收短期对象，减少全局停顿时间，避免频繁扫描老年代。</li><li><strong>作用范围</strong>：仅回收 <strong>年轻代</strong>（Eden + Survivor 区，即 S0/S1）。</li><li><strong>触发条件</strong>：当年轻代内存（尤其是 Eden 区）被填满时触发。 <ul><li><strong>Eden 区空间不足</strong>：新对象优先分配在 Eden 区，Eden 满时触发 YGC。</li><li><strong>Eden + Survivor 区空间不足</strong>：若 Eden + Survivor 区无法容纳存活对象，触发 YGC，部分对象可能直接晋升老年代。</li><li><strong>Full GC 前置操作</strong>：如 Parallel Scavenge，默认在 Full GC 前先执行 YGC（可通过 <code>-XX:+ScavengeBeforeFullGC</code> 控制）。</li></ul></li><li><strong>关键机制</strong><ul><li><strong>对象分配</strong>：新对象优先分配在 Eden 区。</li><li><strong>对象晋升</strong>： <ul><li>年龄阈值：<code>-XX:MaxTenuringThreshold</code>（默认 15）。</li><li><strong>提前晋升</strong>：若 Survivor 区空间不足，存活对象直接进入老年代。</li></ul></li><li><strong>复制算法</strong>：存活对象在 Eden 和 Survivor 区间拷贝，清空原区域。</li></ul></li><li><strong>特点</strong><ul><li><strong>回收速度快</strong>（通常毫秒级），但会触发 STW。</li><li><strong>高效回收</strong>：针对短期对象，减少老年代扫描。</li></ul></li><li><strong>要点</strong><ul><li><strong>Survivor 区溢出</strong>：存活对象过多时，直接晋升老年代，可能引发老年代积压。</li><li><strong>与 Full GC 的关系</strong>：Minor GC 前会检查老年代剩余空间，若不足可能触发 <strong>Full GC</strong>（取决于 GC 策略）。</li></ul></li><li><strong>参数</strong><ul><li><code>-XX:MaxTenuringThreshold=15</code>：晋升老年代的年龄阈值。</li><li><code>-XX:SurvivorRatio=8</code>：Eden 区与单个 Survivor 区的比例（默认 8:1:1）。</li></ul></li></ul><h4 id="old-gc" tabindex="-1"><a class="header-anchor" href="#old-gc" aria-hidden="true">#</a> Old GC</h4><p><strong>Old GC (Major GC 或 OGC) ，老年代垃圾回收</strong></p><ul><li>作用范围：只针对老年代。</li><li>触发条件：当老年代空间不足时触发，通常是当从年轻代晋升到老年代的对象过多，或者老年代的存活对象数量达到一定阈值时。</li><li>执行方式：只回收老年代的对象，年轻代不受影响。</li><li>特点：执行时间比 Young GC 长，因为老年代中的对象存活时间更长，且数量较多。</li></ul><h4 id="full-gc" tabindex="-1"><a class="header-anchor" href="#full-gc" aria-hidden="true">#</a> Full GC</h4><p><strong>Full GC，全堆垃圾回收</strong></p><ul><li>作用范围：对整个堆内存（包括年轻代和老年代）进行回收。</li><li>触发条件：当老年代空间不足且无法通过老年代垃圾回收释放足够空间，或其他情况导致系统内存压力较大时触发（如 System.gc () 调用）。</li><li>执行方式：回收所有代（年轻代、老年代）中的垃圾，并且可能会伴随着元空间的回收。</li><li>特点：回收时间最长，会触发整个 JVM 的停顿（Stop - The - World），对性能有较大影响，通常不希望频繁发生。</li></ul><p><strong>Full GC</strong> 是对整个 <strong>Java 堆（年轻代 + 老年代）</strong> 和 <strong>方法区（元空间/Metaspace）</strong> 进行垃圾回收，部分收集器还会回收直接内存（如 ZGC）。</p><p><strong>Full GC 特点</strong>：</p><ul><li><strong>Stop-The-World（STW）</strong> 时间较长（秒级），对性能影响显著。</li><li>回收算法因 GC 类型而异（如 Serial Old 使用标记-整理，CMS 使用并发标记-清除）。</li></ul><p><strong>Full GC 触发条件</strong></p><table><thead><tr><th><strong>触发条件</strong></th><th><strong>具体原因</strong></th><th><strong>关联参数/备注</strong></th></tr></thead><tbody><tr><td><strong>老年代空间不足</strong></td><td>老年代无法通过垃圾回收释放足够空间，无法容纳新晋升的对象</td><td><code>-Xmx</code>（老年代最大值）、<code>-XX:CMSInitiatingOccupancyFraction</code>（CMS 触发阈值）</td></tr><tr><td><strong>永久代/元空间不足</strong></td><td>Java 7 及之前：永久代（PermGen）耗尽<br>Java 8+：元空间（Metaspace）超过阈值</td><td><code>-XX:MetaspaceSize</code>、<code>-XX:MaxMetaspaceSize</code>（Java 8+）</td></tr><tr><td><strong>显式调用 System.gc()</strong></td><td>代码调用 <code>System.gc()</code> 或通过 <code>jmap -dump</code> 等工具触发（不保证立即执行）</td><td><code>-XX:+DisableExplicitGC</code>（禁用显式 GC）</td></tr><tr><td><strong>空间分配担保失败</strong></td><td>年轻代晋升时，老年代剩余空间不足（<code>Promotion Failed</code>）</td><td><code>-XX:HandlePromotionFailure</code>（JDK 6u24 后默认启用）</td></tr><tr><td><strong>晋升老年代失败</strong></td><td>大对象或长期存活对象直接进入老年代，但老年代空间不足</td><td><code>-XX:PretenureSizeThreshold</code>（大对象直接晋升阈值）</td></tr><tr><td><strong>平均晋升大小预测失败</strong></td><td>Young GC 前，统计发现历史平均晋升大小 &gt; 老年代当前剩余空间</td><td>依赖 JVM 自适应策略（如 <code>-XX:+UseAdaptiveSizePolicy</code>）</td></tr></tbody></table><p><strong>减少 Full GC 的优化策略</strong></p><table><thead><tr><th><strong>优化方向</strong></th><th><strong>具体措施</strong></th><th><strong>关键参数示例</strong></th></tr></thead><tbody><tr><td><strong>调整堆内存</strong></td><td>增大堆大小，避免老年代频繁耗尽</td><td><code>-Xms4g -Xmx4g</code>（初始和最大堆一致，避免动态扩容）</td></tr><tr><td><strong>增大年轻代比例</strong></td><td>减少对象过早晋升到老年代</td><td><code>-XX:NewRatio=2</code>（老年代：新生代=2:1）、<code>-Xmn2g</code>（直接设置年轻代大小）</td></tr><tr><td><strong>调整元空间大小</strong></td><td>避免元空间动态扩展触发 Full GC</td><td><code>-XX:MetaspaceSize=256m -XX:MaxMetaspaceSize=512m</code></td></tr><tr><td><strong>避免大对象直接晋升</strong></td><td>减少大对象分配或调整晋升阈值</td><td><code>-XX:PretenureSizeThreshold=1m</code>（&gt;1MB 对象直接进老年代）</td></tr><tr><td><strong>选择低延迟 GC 算法</strong></td><td>如 G1 或 ZGC，减少 Full GC 频率</td><td><code>-XX:+UseG1GC</code>、<code>-XX:+UseZGC</code></td></tr><tr><td><strong>监控与调优</strong></td><td>通过日志分析 Full GC 原因（如 <code>-XX:+PrintGCDetails</code>）</td><td><code>jstat -gcutil</code>、<code>jmap -histo</code> 等工具辅助定位问题。</td></tr></tbody></table><p><strong>常见表现与影响</strong></p><ul><li><strong>应用卡顿</strong>：STW 导致所有业务线程暂停（如接口超时、TPS 骤降）。</li><li><strong>频繁 Full GC</strong>：可能由内存泄漏、不合理对象分配或 JVM 参数配置不当引起（如 <code>-Xmx</code> 过小）。</li></ul><p><strong>优化建议</strong></p><ul><li><strong>避免内存泄漏</strong>：检查长生命周期对象（如缓存）是否无限制增长。</li><li><strong>调整 JVM 参数</strong>： <ul><li>增大老年代空间（<code>-Xmx</code> 和 <code>-Xms</code> 设为一致，避免动态扩容触发 GC）。</li><li>优化晋升阈值（<code>-XX:MaxTenuringThreshold</code>）。</li><li>使用更高效的 GC 器（如 G1/ZGC 替代 CMS）。</li></ul></li><li><strong>禁用显式 GC</strong>：添加 <code>-XX:+DisableExplicitGC</code>。</li></ul><p><strong>关键参数</strong></p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>-XX:+PrintGCDetails</code></td><td>打印 GC 日志，分析 Full GC 原因</td></tr><tr><td><code>-XX:MetaspaceSize=256m</code></td><td>设置元空间初始大小</td></tr><tr><td><code>-XX:CMSInitiatingOccupancyFraction=70</code></td><td>CMS 老年代占用率触发阈值</td></tr></tbody></table><p><strong>总结</strong>：Full GC 是 JVM 内存回收的最后手段，触发条件复杂，需结合日志和监控定位根本原因，针对性优化堆大小、GC 策略或代码逻辑。</p><h4 id="mixed-gc" tabindex="-1"><a class="header-anchor" href="#mixed-gc" aria-hidden="true">#</a> Mixed GC</h4><p><strong>Mixed GC （仅适用于 G1 GC 的混合垃圾回收）</strong></p><ul><li>作用范围：同时回收年轻代和部分老年代区域。</li><li>触发条件：当 G1 垃圾回收器发现老年代区域的垃圾过多时触发。</li><li>执行方式：混合回收年轻代和部分老年代区域，主要目的是减少老年代中的垃圾积压。</li><li>特点：结合了 YGC 的快速回收和 OGC 的深度回收，尽量减少停顿时间，适用于大内存应用。</li></ul><h3 id="【困难】java-的-cms-垃圾回收流程是怎样的" tabindex="-1"><a class="header-anchor" href="#【困难】java-的-cms-垃圾回收流程是怎样的" aria-hidden="true">#</a> 【困难】Java 的 CMS 垃圾回收流程是怎样的？</h3><p>CMS 是一种以<strong>低延迟</strong>为目标的垃圾回收器，主要用于老年代回收，其核心流程分为四个阶段，其中两个阶段会触发 <strong>STW（Stop-The-World）</strong>，其余阶段与用户线程并发执行。</p><p>CMS 收集器运行步骤如下：</p><ol><li><strong>初始标记</strong>：仅仅只是标记一下 GC Roots 能直接关联到的对象，速度很快，需要停顿。</li><li><strong>并发标记</strong>：进行 GC Roots Tracing 的过程，它在整个回收过程中耗时最长，不需要停顿。</li><li><strong>重新标记</strong>：为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，需要停顿。</li><li><strong>并发清除</strong>：回收在标记阶段被鉴定为不可达的对象。不需要停顿。</li></ol><p>在整个过程中耗时最长的并发标记和并发清除过程中，收集器线程都可以与用户线程一起工作，不需要进行停顿。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/java/javacore/jvm/jvm-gc-cms.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>CMS 的缺陷与应对措施</strong></p><ul><li><strong>内存碎片</strong>：长期运行后可能触发 <strong>Full GC</strong>（压缩内存），通过 <code>-XX:CMSFullGCsBeforeCompaction</code> 设置压缩频率。</li><li><strong>并发模式失败（Concurrent Mode Failure）</strong>： <ul><li>老年代空间不足时，退化为 Serial Old 收集器（STW 时间更长）。</li><li>优化：调整 <code>-XX:CMSInitiatingOccupancyFraction</code>（默认 68%，建议 70-80%）。</li></ul></li><li><strong>浮动垃圾</strong>：需预留空间（通过 <code>-XX:+UseCMSInitiatingOccupancyOnly</code> 避免动态调整阈值）。</li></ul><h3 id="【困难】java-的-g1-垃圾回收流程是怎样的" tabindex="-1"><a class="header-anchor" href="#【困难】java-的-g1-垃圾回收流程是怎样的" aria-hidden="true">#</a> 【困难】Java 的 G1 垃圾回收流程是怎样的？</h3><p>G1 通过分区和增量回收实现低延迟，兼顾吞吐量与内存碎片控制，是 JDK 9 后的默认垃圾回收器。</p><p><strong>核心设计思想</strong></p><ul><li><strong>分区（Region）模型</strong>：将堆划分为多个大小相等的 <strong>Region</strong>（默认约 2048 个），动态分代（逻辑区分 Eden/Survivor/Old/Humongous 区）。</li><li><strong>停顿预测模型</strong>：根据用户设定的 <code>-XX:MaxGCPauseMillis</code>（默认 200ms），优先回收<strong>垃圾最多（Garbage-First）的 Region</strong>。</li><li><strong>并发标记</strong>：减少 STW 时间，但最终标记和拷贝阶段仍需停顿。</li><li><strong>混合回收</strong>：兼顾年轻代和老年代，避免 Full GC。</li><li><strong>适用场景</strong>：大堆内存（4GB+）、需平衡吞吐与延迟的应用（如 JDK9+默认 GC）。</li></ul><p>G1 的垃圾回收分为两大阶段：</p><ol><li><strong>并发标记阶段</strong>（Concurrent Marking，基于 SATB 算法）</li><li><strong>对象拷贝阶段</strong>（Evacuation，STW）</li></ol><h4 id="g1-并发标记阶段-satb-based" tabindex="-1"><a class="header-anchor" href="#g1-并发标记阶段-satb-based" aria-hidden="true">#</a> G1 并发标记阶段（SATB-Based）</h4><ol><li><strong>初始标记（Initial Marking，STW）</strong>：标记从 GC Roots 直接可达的对象。 <ul><li>短暂 STW（Stop-The-World）。</li><li>使用**外部 Bitmap **记录存活对象（而非对象头）。</li><li>通常与年轻代回收（Young GC）同步触发。</li></ul></li><li><strong>并发标记（Concurrent Marking）</strong>：递归标记所有可达对象。 <ul><li>与用户线程并发执行。</li><li>使用** SATB（Snapshot-At-The-Beginning）**算法记录标记过程中的引用变化（通过写屏障维护）。</li></ul></li><li><strong>最终标记（Final Marking，STW）</strong>：处理 SATB 队列中的引用变更，完成最终标记。 <ul><li>短暂 STW。</li><li>修正并发标记期间漏标的对象。</li></ul></li><li><strong>清理阶段（Cleanup，STW）</strong><ul><li>统计每个 Region 的存活对象比例。</li><li>回收<strong>完全无存活对象</strong>的 Region（直接整区回收）。</li><li>生成**回收集合（CSet）**供后续拷贝阶段使用。</li></ul></li></ol><h4 id="对象拷贝阶段-evacuation-stw" tabindex="-1"><a class="header-anchor" href="#对象拷贝阶段-evacuation-stw" aria-hidden="true">#</a> 对象拷贝阶段（Evacuation，STW）</h4><ul><li><strong>作用</strong>：将回收集合（CSet）中的存活对象拷贝到空闲 Region。</li><li><strong>流程</strong>： <ol><li>根据标记结果，选择垃圾比例高的 Region 组成 CSet。</li><li>并行将 CSet 中的存活对象复制到新 Region（类似复制算法）。</li><li>清空原 Region，加入空闲列表。</li></ol></li><li><strong>特点</strong>： <ul><li>完全 STW，是 G1 的主要停顿来源。</li><li>支持<strong>混合回收（Mixed GC）</strong>：同时回收年轻代和老年代 Region。</li></ul></li></ul><h4 id="g1-mixed-gc-混合回收" tabindex="-1"><a class="header-anchor" href="#g1-mixed-gc-混合回收" aria-hidden="true">#</a> G1 Mixed GC（混合回收）</h4><ul><li><strong>触发条件</strong>：老年代占用超过阈值（<code>-XX:InitiatingHeapOccupancyPercent</code>，默认 45%）。</li><li><strong>行为</strong>： <ol><li>在年轻代回收时，**额外选择部分老年代 Region **加入 CSet。</li><li>通过<code>-XX:G1MixedGCLiveThresholdPercent</code>控制老年代 Region 的回收阈值（存活对象比例低于该值才回收）。</li></ol></li></ul><p><strong>关键机制</strong></p><ul><li><strong>Remembered Set（RSet）</strong>：每个 Region 维护一个 RSet，记录其他 Region 对它的引用，避免全堆扫描。</li><li><strong>Humongous 区</strong>：存放大对象（超过 Region 50%），直接分配在 Old 区，避免反复拷贝。</li></ul><p><strong>参数配置</strong></p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>-XX:+UseG1GC</code></td><td>启用 G1 回收器</td></tr><tr><td><code>-XX:MaxGCPauseMillis=200</code></td><td>目标最大停顿时间</td></tr><tr><td><code>-XX:InitiatingHeapOccupancyPercent=45</code></td><td>触发 Mixed GC 的堆占用率阈值</td></tr><tr><td><code>-XX:G1HeapRegionSize=2M</code></td><td>设置 Region 大小（1MB~32MB，需为 2 的幂）</td></tr></tbody></table><p><strong>优缺点</strong></p><ul><li><strong>优势</strong>： <ul><li>可控停顿时间，适合大堆（数十 GB）应用。</li><li>内存整理减少碎片（复制算法）。</li></ul></li><li><strong>劣势</strong>： <ul><li>内存占用较高（RSet 和并发标记开销）。</li><li>复杂场景下可能退化为 Serial Old（如分配失败）。</li></ul></li></ul><p><strong>适用场景</strong></p><ul><li>替代 CMS，适用于 <strong>JDK 8+</strong> 的中大堆应用（如 6GB~100GB）。</li><li>对延迟敏感且需平衡吞吐量的场景（如微服务、实时系统）。</li></ul><h3 id="【困难】java-的-zgc-垃圾回收流程是怎样的" tabindex="-1"><a class="header-anchor" href="#【困难】java-的-zgc-垃圾回收流程是怎样的" aria-hidden="true">#</a> 【困难】Java 的 ZGC 垃圾回收流程是怎样的？</h3><h3 id="【困难】jvm-垃圾回收时产生的-concurrent-mode-failure-的原因是什么" tabindex="-1"><a class="header-anchor" href="#【困难】jvm-垃圾回收时产生的-concurrent-mode-failure-的原因是什么" aria-hidden="true">#</a> 【困难】JVM 垃圾回收时产生的 concurrent mode failure 的原因是什么？</h3><p><strong>Concurrent Mode Failure</strong> 是 <strong>CMS（Concurrent Mark-Sweep）</strong> 垃圾回收器在并发清理阶段失败，被迫触发 <strong>Full GC（Serial Old）</strong> 的现象，导致长时间 STW（Stop-The-World），影响应用响应速度。</p><p><strong>CMS 工作流程</strong>：</p><ol><li><strong>初始标记（Initial Mark）</strong>：标记根对象直接关联的对象（短暂停顿）。</li><li><strong>并发标记（Concurrent Mark）</strong>：与应用线程并发，标记老年代存活对象。</li><li><strong>重新标记（Remark）</strong>：修正并发标记期间变动的对象（短暂停顿）。</li><li><strong>并发清理（Concurrent Sweep）</strong>：清除垃圾对象（并发执行）。</li></ol><p><strong>优化措施</strong></p><ul><li><strong>增加老年代内存</strong>：调整 <code>-Xmx</code> 和 <code>-XX:CMSInitiatingOccupancyFraction</code>，降低 CMS 触发频率。</li><li><strong>调低 CMS 触发阈值</strong>：通过 <code>-XX:CMSInitiatingOccupancyFraction=&lt;N&gt;</code> 提前触发回收（如设为 70%）。</li><li><strong>碎片整理</strong>：配置 <code>-XX:+UseCMSCompactAtFullCollection</code>，在 Full GC 后整理碎片。</li><li><strong>增加年轻代内存</strong>：减少对象晋升老年代的频率，降低老年代压力。</li></ul><p><strong>典型 CMS 参数配置示例</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">java</span> <span class="token parameter variable">-XX:+UseConcMarkSweepGC</span> <span class="token punctuation">\\</span>
     <span class="token parameter variable">-XX:CMSInitiatingOccupancyFraction</span><span class="token operator">=</span><span class="token number">70</span> <span class="token punctuation">\\</span>
     <span class="token parameter variable">-XX:+UseCMSCompactAtFullCollection</span> <span class="token punctuation">\\</span>
     <span class="token parameter variable">-Xmx4g</span> <span class="token parameter variable">-Xms4g</span> YourApplication
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,163),r=[o];function l(i,d){return n(),a("div",null,r)}const g=t(e,[["render",l],["__file","index.html.vue"]]);export{g as default};
