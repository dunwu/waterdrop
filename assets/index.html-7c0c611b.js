const t=JSON.parse('{"key":"v-5f5a47b0","path":"/pages/6094a8c2/","title":"软件工程入门指南","lang":"zh-CN","frontmatter":{"title":"软件工程入门指南","date":"2017-11-20T17:35:00.000Z","order":1,"permalink":"/pages/6094a8c2/","category":["软件工程"],"tag":["软件工程","管理"],"description":"软件工程入门指南 软件工程是一门研究用工程化方法构建和维护有效的、实用的和高质量的软件的学科。它涉及程序设计语言、数据库、软件开发工具、系统平台、标准、设计模式等方面。 软件工程的目标 软件工程的目标是：在给定成本、进度的前提下，开发出具有适用性、有效性、可修改性、可靠性、可理解性、可维护性、可重用性、可移植性、可追踪性、可互操作性和满足用户需求的软件产品。 适用性 - 软件在不同的系统约束条件下，使用户需求得到满足的难易程度。 有效性 - 软件系统能最有效的利用计算机的时间和空间资源。各种软件无不把系统的时/空开销作为衡量软件质量的一项重要技术指标。很多场合，在追求时间有效性和空间有效性时会发生矛盾，这时不得不牺牲时间有效性换取空间有效性或牺牲空间有效性换取时间有效性。时/空折衷是经常采用的技巧。 可修改性 - 允许对系统进行修改而不增加原系统的复杂性。它支持软件的调试和维护，是一个难以达到的目标。 可靠性 - 能防止因概念、设计和结构等方面的不完善造成的软件系统失效，具有挽回因操作不当造成软件系统失效的能力。 可理解性 - 系统具有清晰的结构，能直接反映问题的需求。可理解性有助于控制系统软件复杂性，并支持软件的维护、移植或重用。 可维护性 - 软件交付使用后，能够对它进行修改，以改正潜伏的错误，改进性能和其它属性，使软件产品适应环境的变化等。软件维护费用在软件开发费用中占有很大的比重。可维护性是软件工程中一项十分重要的目标。 可重用性 - 把概念或功能相对独立的一个或一组相关模块定义为一个软部件。可组装在系统的任何位置，降低工作量。 可移植性 - 软件从一个计算机系统或环境搬到另一个计算机系统或环境的难易程度。 可追踪性 - 根据软件需求对软件设计、程序进行正向追踪，或根据软件设计、程序对软件需求的逆向追踪的能力。 可互操作性 - 多个软件元素相互通信并协同完成任务的能力。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/6094a8c2/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"软件工程入门指南"}],["meta",{"property":"og:description","content":"软件工程入门指南 软件工程是一门研究用工程化方法构建和维护有效的、实用的和高质量的软件的学科。它涉及程序设计语言、数据库、软件开发工具、系统平台、标准、设计模式等方面。 软件工程的目标 软件工程的目标是：在给定成本、进度的前提下，开发出具有适用性、有效性、可修改性、可靠性、可理解性、可维护性、可重用性、可移植性、可追踪性、可互操作性和满足用户需求的软件产品。 适用性 - 软件在不同的系统约束条件下，使用户需求得到满足的难易程度。 有效性 - 软件系统能最有效的利用计算机的时间和空间资源。各种软件无不把系统的时/空开销作为衡量软件质量的一项重要技术指标。很多场合，在追求时间有效性和空间有效性时会发生矛盾，这时不得不牺牲时间有效性换取空间有效性或牺牲空间有效性换取时间有效性。时/空折衷是经常采用的技巧。 可修改性 - 允许对系统进行修改而不增加原系统的复杂性。它支持软件的调试和维护，是一个难以达到的目标。 可靠性 - 能防止因概念、设计和结构等方面的不完善造成的软件系统失效，具有挽回因操作不当造成软件系统失效的能力。 可理解性 - 系统具有清晰的结构，能直接反映问题的需求。可理解性有助于控制系统软件复杂性，并支持软件的维护、移植或重用。 可维护性 - 软件交付使用后，能够对它进行修改，以改正潜伏的错误，改进性能和其它属性，使软件产品适应环境的变化等。软件维护费用在软件开发费用中占有很大的比重。可维护性是软件工程中一项十分重要的目标。 可重用性 - 把概念或功能相对独立的一个或一组相关模块定义为一个软部件。可组装在系统的任何位置，降低工作量。 可移植性 - 软件从一个计算机系统或环境搬到另一个计算机系统或环境的难易程度。 可追踪性 - 根据软件需求对软件设计、程序进行正向追踪，或根据软件设计、程序对软件需求的逆向追踪的能力。 可互操作性 - 多个软件元素相互通信并协同完成任务的能力。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-23T15:53:48.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"软件工程"}],["meta",{"property":"article:tag","content":"管理"}],["meta",{"property":"article:published_time","content":"2017-11-20T17:35:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-23T15:53:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"软件工程入门指南\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2017-11-20T17:35:00.000Z\\",\\"dateModified\\":\\"2025-09-23T15:53:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"软件工程的目标","slug":"软件工程的目标","link":"#软件工程的目标","children":[]},{"level":2,"title":"软件工程的原理","slug":"软件工程的原理","link":"#软件工程的原理","children":[]},{"level":2,"title":"软件工程的方法","slug":"软件工程的方法","link":"#软件工程的方法","children":[]},{"level":2,"title":"软件需求","slug":"软件需求","link":"#软件需求","children":[{"level":3,"title":"软件需求说明书（ SRS ）","slug":"软件需求说明书-srs","link":"#软件需求说明书-srs","children":[]}]},{"level":2,"title":"软件生命周期","slug":"软件生命周期","link":"#软件生命周期","children":[]},{"level":2,"title":"软件生命周期模型","slug":"软件生命周期模型","link":"#软件生命周期模型","children":[{"level":3,"title":"瀑布模型","slug":"瀑布模型","link":"#瀑布模型","children":[]},{"level":3,"title":"螺旋模型","slug":"螺旋模型","link":"#螺旋模型","children":[]}]},{"level":2,"title":"软件工程术语","slug":"软件工程术语","link":"#软件工程术语","children":[]},{"level":2,"title":"资源","slug":"资源","link":"#资源","children":[]}],"git":{"createdTime":1758642828000,"updatedTime":1758642828000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":1}]},"readingTime":{"minutes":11.83,"words":3548},"filePathRelative":"21.软件工程/软件工程入门.md","localizedDate":"2017年11月20日","excerpt":"<h1> 软件工程入门指南</h1>\\n<blockquote>\\n<p>软件工程是一门研究用工程化方法构建和维护有效的、实用的和高质量的软件的学科。它涉及程序设计语言、数据库、软件开发工具、系统平台、标准、设计模式等方面。</p>\\n</blockquote>\\n<h2> 软件工程的目标</h2>\\n<p>软件工程的目标是：在给定成本、进度的前提下，开发出具有适用性、有效性、可修改性、可靠性、可理解性、可维护性、可重用性、可移植性、可追踪性、可互操作性和满足用户需求的软件产品。</p>\\n<ul>\\n<li><strong>适用性</strong> - 软件在不同的系统约束条件下，使用户需求得到满足的难易程度。</li>\\n<li><strong>有效性</strong> - 软件系统能最有效的利用计算机的时间和空间资源。各种软件无不把系统的时/空开销作为衡量软件质量的一项重要技术指标。很多场合，在追求时间有效性和空间有效性时会发生矛盾，这时不得不牺牲时间有效性换取空间有效性或牺牲空间有效性换取时间有效性。时/空折衷是经常采用的技巧。</li>\\n<li><strong>可修改性</strong> - 允许对系统进行修改而不增加原系统的复杂性。它支持软件的调试和维护，是一个难以达到的目标。</li>\\n<li><strong>可靠性</strong> - 能防止因概念、设计和结构等方面的不完善造成的软件系统失效，具有挽回因操作不当造成软件系统失效的能力。</li>\\n<li><strong>可理解性</strong> - 系统具有清晰的结构，能直接反映问题的需求。可理解性有助于控制系统软件复杂性，并支持软件的维护、移植或重用。</li>\\n<li><strong>可维护性</strong> - 软件交付使用后，能够对它进行修改，以改正潜伏的错误，改进性能和其它属性，使软件产品适应环境的变化等。软件维护费用在软件开发费用中占有很大的比重。可维护性是软件工程中一项十分重要的目标。</li>\\n<li><strong>可重用性</strong> - 把概念或功能相对独立的一个或一组相关模块定义为一个软部件。可组装在系统的任何位置，降低工作量。</li>\\n<li><strong>可移植性</strong> - 软件从一个计算机系统或环境搬到另一个计算机系统或环境的难易程度。</li>\\n<li><strong>可追踪性</strong> - 根据软件需求对软件设计、程序进行正向追踪，或根据软件设计、程序对软件需求的逆向追踪的能力。</li>\\n<li><strong>可互操作性</strong> - 多个软件元素相互通信并协同完成任务的能力。</li>\\n</ul>","autoDesc":true}');export{t as data};
