const e=JSON.parse('{"key":"v-3d54f9c7","path":"/pages/8ede3b07/","title":"Java 并发面试三","lang":"zh-CN","frontmatter":{"title":"Java 并发面试三","date":"2024-07-23T07:21:03.000Z","permalink":"/pages/8ede3b07/","category":["Java","JavaCore","面试"],"tag":["Java","JavaCore","面试","并发"],"description":"Java 并发面试三 Java 线程池 【简单】为什么要用线程池？ 顾名思义，线程池就是管理一系列线程的资源池。当有任务要处理时，直接从线程池中获取线程来处理，处理完之后线程并不会立即被销毁，而是等待下一个任务。 池化技术想必大家已经屡见不鲜了，线程池、数据库连接池、HTTP 连接池等等都是对这个思想的应用。池化技术的思想主要是为了减少每次获取资源的消耗，提高对资源的利用率。 线程池提供了一种限制和管理资源（包括执行一个任务）的方式。 每个线程池还维护一些基本统计信息，例如已完成任务的数量。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/8ede3b07/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"Java 并发面试三"}],["meta",{"property":"og:description","content":"Java 并发面试三 Java 线程池 【简单】为什么要用线程池？ 顾名思义，线程池就是管理一系列线程的资源池。当有任务要处理时，直接从线程池中获取线程来处理，处理完之后线程并不会立即被销毁，而是等待下一个任务。 池化技术想必大家已经屡见不鲜了，线程池、数据库连接池、HTTP 连接池等等都是对这个思想的应用。池化技术的思想主要是为了减少每次获取资源的消耗，提高对资源的利用率。 线程池提供了一种限制和管理资源（包括执行一个任务）的方式。 每个线程池还维护一些基本统计信息，例如已完成任务的数量。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-19T03:19:24.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"JavaCore"}],["meta",{"property":"article:tag","content":"面试"}],["meta",{"property":"article:tag","content":"并发"}],["meta",{"property":"article:published_time","content":"2024-07-23T07:21:03.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-19T03:19:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 并发面试三\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-23T07:21:03.000Z\\",\\"dateModified\\":\\"2025-04-19T03:19:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"Java 线程池","slug":"java-线程池","link":"#java-线程池","children":[{"level":3,"title":"【简单】为什么要用线程池？","slug":"【简单】为什么要用线程池","link":"#【简单】为什么要用线程池","children":[]},{"level":3,"title":"【简单】Java 创建线程池有哪些方式？","slug":"【简单】java-创建线程池有哪些方式","link":"#【简单】java-创建线程池有哪些方式","children":[]},{"level":3,"title":"【中等】Java 线程池有哪些核心参数？各有什么作用？","slug":"【中等】java-线程池有哪些核心参数-各有什么作用","link":"#【中等】java-线程池有哪些核心参数-各有什么作用","children":[]},{"level":3,"title":"【中等】Java 线程池的工作原理是什么？","slug":"【中等】java-线程池的工作原理是什么","link":"#【中等】java-线程池的工作原理是什么","children":[]},{"level":3,"title":"【简单】Java 线程池的核心线程会被回收吗？","slug":"【简单】java-线程池的核心线程会被回收吗","link":"#【简单】java-线程池的核心线程会被回收吗","children":[]},{"level":3,"title":"【中等】如何合理地设置 Java 线程池的线程数？","slug":"【中等】如何合理地设置-java-线程池的线程数","link":"#【中等】如何合理地设置-java-线程池的线程数","children":[]},{"level":3,"title":"【中等】Java 线程池支持哪些阻塞队列，如何选择？","slug":"【中等】java-线程池支持哪些阻塞队列-如何选择","link":"#【中等】java-线程池支持哪些阻塞队列-如何选择","children":[]},{"level":3,"title":"【中等】Java 线程池支持哪些拒绝策略？如何选择？","slug":"【中等】java-线程池支持哪些拒绝策略-如何选择","link":"#【中等】java-线程池支持哪些拒绝策略-如何选择","children":[]},{"level":3,"title":"【中等】Java 线程池内部任务出异常后，如何知道是哪个线程出了异常？","slug":"【中等】java-线程池内部任务出异常后-如何知道是哪个线程出了异常","link":"#【中等】java-线程池内部任务出异常后-如何知道是哪个线程出了异常","children":[]},{"level":3,"title":"【中等】Java 线程池中 shutdown 与 shutdownNow 的区别是什么？","slug":"【中等】java-线程池中-shutdown-与-shutdownnow-的区别是什么","link":"#【中等】java-线程池中-shutdown-与-shutdownnow-的区别是什么","children":[]},{"level":3,"title":"【困难】Java 线程池参数在运行过程中能修改吗？如何修改？","slug":"【困难】java-线程池参数在运行过程中能修改吗-如何修改","link":"#【困难】java-线程池参数在运行过程中能修改吗-如何修改","children":[]}]},{"level":2,"title":"Java 并发同步工具","slug":"java-并发同步工具","link":"#java-并发同步工具","children":[{"level":3,"title":"【中等】CountDownLatch 的工作原理是什么？","slug":"【中等】countdownlatch-的工作原理是什么","link":"#【中等】countdownlatch-的工作原理是什么","children":[]},{"level":3,"title":"【中等】CyclicBarrier 的工作原理是什么？","slug":"【中等】cyclicbarrier-的工作原理是什么","link":"#【中等】cyclicbarrier-的工作原理是什么","children":[]},{"level":3,"title":"【中等】Semaphore 的工作原理是什么？","slug":"【中等】semaphore-的工作原理是什么","link":"#【中等】semaphore-的工作原理是什么","children":[]}]},{"level":2,"title":"Java 并发分工工具","slug":"java-并发分工工具","link":"#java-并发分工工具","children":[{"level":3,"title":"【中等】ForkJoinPool 的工作原理是什么？","slug":"【中等】forkjoinpool-的工作原理是什么","link":"#【中等】forkjoinpool-的工作原理是什么","children":[]},{"level":3,"title":"【中等】CompleteFuture 的工作原理是什么？","slug":"【中等】completefuture-的工作原理是什么","link":"#【中等】completefuture-的工作原理是什么","children":[]},{"level":3,"title":"【中等】Timer 的工作原理是什么？","slug":"【中等】timer-的工作原理是什么","link":"#【中等】timer-的工作原理是什么","children":[]},{"level":3,"title":"【困难】时间轮（Time Wheel）的工作原理是什么？","slug":"【困难】时间轮-time-wheel-的工作原理是什么","link":"#【困难】时间轮-time-wheel-的工作原理是什么","children":[]}]},{"level":2,"title":"案例","slug":"案例","link":"#案例","children":[{"level":3,"title":"生产者消费者模式","slug":"生产者消费者模式","link":"#生产者消费者模式","children":[]}]}],"git":{"createdTime":1744760539000,"updatedTime":1745032764000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":2}]},"readingTime":{"minutes":34.9,"words":10471},"filePathRelative":"01.Java/01.JavaCore/99.面试/Java_面试_并发（三）.md","localizedDate":"2024年7月23日","excerpt":"<h1> Java 并发面试三</h1>\\n<h2> Java 线程池</h2>\\n<h3> 【简单】为什么要用线程池？</h3>\\n<p>顾名思义，线程池就是管理一系列线程的资源池。当有任务要处理时，直接从线程池中获取线程来处理，处理完之后线程并不会立即被销毁，而是等待下一个任务。</p>\\n<p>池化技术想必大家已经屡见不鲜了，线程池、数据库连接池、HTTP 连接池等等都是对这个思想的应用。池化技术的思想主要是为了减少每次获取资源的消耗，提高对资源的利用率。</p>\\n<p><strong>线程池</strong>提供了一种限制和管理资源（包括执行一个任务）的方式。 每个<strong>线程池</strong>还维护一些基本统计信息，例如已完成任务的数量。</p>","autoDesc":true}');export{e as data};
