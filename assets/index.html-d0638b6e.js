import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a as n,b as s,d as t,e}from"./app-e7b0ac47.js";const i={},u=e(`<h1 id="kafka-快速入门" tabindex="-1"><a class="header-anchor" href="#kafka-快速入门" aria-hidden="true">#</a> Kafka 快速入门</h1><h2 id="kafka-简介" tabindex="-1"><a class="header-anchor" href="#kafka-简介" aria-hidden="true">#</a> Kafka 简介</h2><p><strong>Apache Kafka 是一款开源的消息引擎系统，也是一个分布式流计算平台，此外，还可以作为数据存储</strong>。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/distributed/mq/kafka/kafka-event-system.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="kafka-的功能" tabindex="-1"><a class="header-anchor" href="#kafka-的功能" aria-hidden="true">#</a> Kafka 的功能</h3><p>Kafka 的核心功能如下：</p><ul><li><strong>消息引擎</strong> - Kafka 可以作为一个消息引擎系统。</li><li><strong>流处理</strong> - Kafka 可以作为一个分布式流处理平台。</li><li><strong>存储</strong> - Kafka 可以作为一个安全的分布式存储。</li></ul><h3 id="kafka-的特性" tabindex="-1"><a class="header-anchor" href="#kafka-的特性" aria-hidden="true">#</a> Kafka 的特性</h3><p>Kafka 的设计目标：</p><ul><li><strong>高性能</strong><ul><li><strong>分区、分段、索引</strong>：基于分区机制提供并发处理能力。分段、索引提升了数据读写的查询效率。</li><li><strong>顺序读写</strong>：使用顺序读写提升磁盘 IO 性能。</li><li><strong>零拷贝</strong>：利用零拷贝技术，提升网络 I/O 效率。</li><li><strong>页缓存</strong>：利用操作系统的 PageCache 来缓存数据（典型的利用空间换时间）</li><li><strong>批量读写</strong>：批量读写可以有效提升网络 I/O 效率。</li><li><strong>数据压缩</strong>：Kafka 支持数据压缩，可以有效提升网络 I/O 效率。</li><li><strong>pull 模式</strong>：Kafka 架构基于 pull 模式，可以自主控制消费策略，提升传输效率。</li></ul></li><li><strong>高可用</strong><ul><li><strong>持久化</strong>：Kafka 所有的消息都存储在磁盘，天然支持持久化。</li><li><strong>副本机制</strong>：Kafka 的 Broker 集群支持副本机制，可以通过冗余，来保证其整体的可用性。</li><li><strong>选举 Leader</strong>：Kafka 基于 ZooKeeper 支持选举 Leader，实现了故障转移能力。</li></ul></li><li><strong>伸缩性</strong><ul><li><strong>分区</strong>：Kafka 的分区机制使得其具有良好的伸缩性。</li></ul></li></ul><h3 id="kafka-术语" tabindex="-1"><a class="header-anchor" href="#kafka-术语" aria-hidden="true">#</a> Kafka 术语</h3><ul><li><strong>消息</strong>：Kafka 的数据单元被称为消息。消息由字节数组组成。</li><li><strong>批次</strong>：批次就是一组消息，这些消息属于同一个主题和分区。</li><li><strong>主题（Topic）</strong>：Kafka 消息通过主题进行分类。主题就类似数据库的表。 <ul><li>不同主题的消息是物理隔离的；</li><li>同一个主题的消息保存在一个或多个 Broker 上。但用户只需指定消息的 Topic 即可生产或消费数据而不必关心数据存于何处。</li><li>主题有一个或多个分区。</li></ul></li><li><strong>分区（Partition）</strong>：分区是一个有序不变的消息序列，消息以追加的方式写入分区，然后以先入先出的顺序读取。Kafka 通过分区来实现数据冗余和伸缩性。</li><li><strong>消息偏移量（Offset）</strong>：表示分区中每条消息的位置信息，是一个单调递增且不变的值。</li><li><strong>生产者（Producer）</strong>：生产者是向主题发布新消息的 Kafka 客户端。生产者可以将数据发布到所选择的主题中。生产者负责将记录分配到主题中的哪一个分区中。</li><li><strong>消费者（Consumer）</strong>：消费者是从主题订阅新消息的 Kafka 客户端。消费者通过检查消息的偏移量来区分消息是否已读。</li><li><strong>消费者群组（Consumer Group）</strong>：多个消费者共同构成的一个群组，同时消费多个分区以实现高并发。 <ul><li>每个消费者属于一个特定的消费者群组（可以为每个消费者指定消费者群组，若不指定，则属于默认的群组）。</li><li>群组中，一个消费者可以消费多个分区。</li><li>群组中，每个分区只能被指定给一个消费者。</li></ul></li><li><strong>再均衡（Rebalance）</strong>：消费者群组内某个消费者实例挂掉后，其他消费者实例自动重新分配订阅主题分区的过程。分区再均衡是 Kafka 消费者端实现高可用的重要手段。</li><li><strong>Broker</strong> - 一个独立的 Kafka 服务器被称为 Broker。Broker 接受来自生产者的消息，为消息设置偏移量，并提交消息到磁盘保存；消费者向 Broker 请求消息，Broker 负责返回已提交的消息。</li><li><strong>副本（Replica）</strong>：Kafka 中同一条消息能够被拷贝到多个地方以提供数据冗余，这些地方就是所谓的副本。副本还分为领导者副本和追随者副本，各自有不同的角色划分。副本是在分区层级下的，即每个分区可配置多个副本实现高可用。</li></ul><h3 id="kafka-发行版本" tabindex="-1"><a class="header-anchor" href="#kafka-发行版本" aria-hidden="true">#</a> Kafka 发行版本</h3><p>Kafka 主要有以下发行版本：</p><ul><li><strong>Apache Kafka</strong>：也称社区版 Kafka。优势在于迭代速度快，社区响应度高，使用它可以让你有更高的把控度；缺陷在于仅提供基础核心组件，缺失一些高级的特性。</li><li><strong>Confluent Kafka</strong>：Confluent 公司提供的 Kafka。优势在于集成了很多高级特性且由 Kafka 原班人马打造，质量上有保证；缺陷在于相关文档资料不全，普及率较低，没有太多可供参考的范例。</li><li><strong>CDH/HDP Kafka</strong>：大数据云公司提供的 Kafka，内嵌 Apache Kafka。优势在于操作简单，节省运维成本；缺陷在于把控度低，演进速度较慢。</li></ul><h3 id="kafka-重大版本" tabindex="-1"><a class="header-anchor" href="#kafka-重大版本" aria-hidden="true">#</a> Kafka 重大版本</h3><p>Kafka 有以下重大版本：</p><ul><li>0.7 - 只提供了最基础的消息队列功能</li><li>0.8 <ul><li>正式引入了副本机制</li><li>至少升级到 0.8.2.2</li></ul></li><li>0.9 <ul><li>增加了基础的安全认证 / 权限功能</li><li>用 Java 重写了新版本消费者 API</li><li>引入了 Kafka Connect 组件</li><li>新版本 Producer API 在这个版本中算比较稳定</li></ul></li><li>0.10 <ul><li>引入了 Kafka Streams，正式升级成分布式流处理平台</li><li>至少升级到 0.10.2.2</li><li>修复了一个可能导致 Producer 性能降低的 Bug</li></ul></li><li>0.11 <ul><li>提供幂等性 Producer API 以及事务</li><li>对 Kafka 消息格式做了重构</li><li>至少升级到 0.11.0.3</li></ul></li><li>1.0 和 2.0 - Kafka Streams 的改进</li></ul><h2 id="kafka-服务端使用入门" tabindex="-1"><a class="header-anchor" href="#kafka-服务端使用入门" aria-hidden="true">#</a> Kafka 服务端使用入门</h2><h3 id="步骤一、获取-kafka" tabindex="-1"><a class="header-anchor" href="#步骤一、获取-kafka" aria-hidden="true">#</a> 步骤一、获取 Kafka</h3><p>下载最新的 Kafka 版本并解压到本地。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">tar</span> <span class="token parameter variable">-xzf</span> kafka_2.13-2.7.0.tgz
$ <span class="token builtin class-name">cd</span> kafka_2.13-2.7.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="步骤二、启动-kafka-环境" tabindex="-1"><a class="header-anchor" href="#步骤二、启动-kafka-环境" aria-hidden="true">#</a> 步骤二、启动 Kafka 环境</h3><blockquote><p>注意：本地必须已安装 Java8</p></blockquote><p>执行以下指令，保证所有服务按照正确的顺序启动：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Start the ZooKeeper service</span>
<span class="token comment"># Note: Soon, ZooKeeper will no longer be required by Apache Kafka.</span>
$ bin/zookeeper-server-start.sh config/zookeeper.properties
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打开另一个终端会话，并执行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Start the Kafka broker service</span>
$ bin/kafka-server-start.sh config/server.properties
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>一旦所有服务成功启动，您就已经成功运行了一个基本的 kafka 环境。</p><h3 id="步骤三、创建一个-topic-并存储您的事件" tabindex="-1"><a class="header-anchor" href="#步骤三、创建一个-topic-并存储您的事件" aria-hidden="true">#</a> 步骤三、创建一个 TOPIC 并存储您的事件</h3>`,30),r={href:"https://kafka.apache.org/documentation/#messages",target:"_blank",rel:"noopener noreferrer"},k=n("em",null,"events",-1),d={href:"https://kafka.apache.org/documentation/#intro_concepts_and_terms",target:"_blank",rel:"noopener noreferrer"},m=n("em",null,"topics",-1),v=e(`<p>因此，在您写入第一个事件之前，您必须先创建一个 Topic。执行以下指令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ bin/kafka-topics.sh <span class="token parameter variable">--create</span> <span class="token parameter variable">--topic</span> quickstart-events --bootstrap-server localhost:9092
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>所有的 Kafka 命令行工具都有附加可选项：不加任何参数，运行 <code>kafka-topics.sh</code> 命令会显示使用信息。例如，会显示新 Topic 的分区数等细节。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ bin/kafka-topics.sh <span class="token parameter variable">--describe</span> <span class="token parameter variable">--topic</span> quickstart-events --bootstrap-server localhost:9092
Topic:quickstart-events  PartitionCount:1    ReplicationFactor:1 Configs:
    Topic: quickstart-events Partition: <span class="token number">0</span>    Leader: <span class="token number">0</span>   Replicas: <span class="token number">0</span> Isr: <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="步骤四、向-topic-写入-event" tabindex="-1"><a class="header-anchor" href="#步骤四、向-topic-写入-event" aria-hidden="true">#</a> 步骤四、向 Topic 写入 Event</h3><p>Kafka 客户端和 Kafka Broker 的通信是通过网络读写 Event。一旦收到信息，Broker 会将其以您需要的时间（甚至永久化）、容错化的方式存储。</p><p>执行 <code>kafka-console-producer.sh</code> 命令将 Event 写入 Topic。默认，您输入的任意行会作为独立 Event 写入 Topic：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ bin/kafka-console-producer.sh <span class="token parameter variable">--topic</span> quickstart-events --bootstrap-server localhost:9092
This is my first event
This is my second event
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>您可以通过 <code>Ctrl-C</code> 在任何时候中断 <code>kafka-console-producer.sh</code></p></blockquote><h3 id="步骤五、读-event" tabindex="-1"><a class="header-anchor" href="#步骤五、读-event" aria-hidden="true">#</a> 步骤五、读 Event</h3>`,10),g={href:"http://kafka-console-consumer.sh",target:"_blank",rel:"noopener noreferrer"},f=e(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ bin/kafka-console-consumer.sh <span class="token parameter variable">--topic</span> quickstart-events --from-beginning --bootstrap-server localhost:9092
This is my first event
This is my second event
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>您可以通过 <code>Ctrl-C</code> 在任何时候中断 <code>kafka-console-consumer.sh</code></p></blockquote><p>由于 Event 被持久化存储在 Kafka 中，因此您可以根据需要任意多次地读取它们。 您可以通过打开另一个终端会话并再次重新运行上一个命令来轻松地验证这一点。</p><h3 id="步骤六、通过-kafka-connect-将数据作为事件流导入-导出" tabindex="-1"><a class="header-anchor" href="#步骤六、通过-kafka-connect-将数据作为事件流导入-导出" aria-hidden="true">#</a> 步骤六、通过 KAFKA CONNECT 将数据作为事件流导入/导出</h3>`,4),h={href:"https://kafka.apache.org/documentation/#connect",target:"_blank",rel:"noopener noreferrer"},b={href:"https://kafka.apache.org/documentation/#connect",target:"_blank",rel:"noopener noreferrer"},_=n("h3",{id:"步骤七、使用-kafka-streams-处理事件",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#步骤七、使用-kafka-streams-处理事件","aria-hidden":"true"},"#"),s(" 步骤七、使用 Kafka Streams 处理事件")],-1),K={href:"https://kafka.apache.org/documentation/streams",target:"_blank",rel:"noopener noreferrer"},y=e(`<p>Kafka Streams 结合了 Kafka 客户端编写和部署标准 Java 和 Scala 应用程序的简便性，以及 Kafka 服务器集群技术的优势，使这些应用程序具有高度的可伸缩性、弹性、容错性和分布式。该库支持一次性处理，有状态的操作，以及聚合、窗口化化操作、join、基于事件时间的处理等等。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">KStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> textLines <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token string">&quot;quickstart-events&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">KTable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> wordCounts <span class="token operator">=</span> textLines
            <span class="token punctuation">.</span><span class="token function">flatMapValues</span><span class="token punctuation">(</span>line <span class="token operator">-&gt;</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token punctuation">(</span>keyIgnored<span class="token punctuation">,</span> word<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> word<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

wordCounts<span class="token punctuation">.</span><span class="token function">toStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token string">&quot;output-topic&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Produced</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token class-name">Serdes<span class="token punctuation">.</span>String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Serdes<span class="token punctuation">.</span>Long</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),q={href:"https://kafka.apache.org/25/documentation/streams/quickstart",target:"_blank",rel:"noopener noreferrer"},w={href:"https://kafka.apache.org/25/documentation/streams/tutorial",target:"_blank",rel:"noopener noreferrer"},C=e(`<h3 id="步骤八、终止-kafka-环境" tabindex="-1"><a class="header-anchor" href="#步骤八、终止-kafka-环境" aria-hidden="true">#</a> 步骤八、终止 Kafka 环境</h3><ol><li>如果尚未停止，请使用 <code>Ctrl-C</code> 停止生产者和消费者客户端。</li><li>使用 <code>Ctrl-C</code> 停止 Kafka 代理。</li><li>最后，使用 <code>Ctrl-C</code> 停止 ZooKeeper 服务器。</li></ol><p>如果您还想删除本地 Kafka 环境的所有数据，包括您在此过程中创建的所有事件，请执行以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /tmp/kafka-logs /tmp/zookeeper
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="kafka-java-客户端使用入门" tabindex="-1"><a class="header-anchor" href="#kafka-java-客户端使用入门" aria-hidden="true">#</a> Kafka Java 客户端使用入门</h2><h3 id="引入-maven-依赖" tabindex="-1"><a class="header-anchor" href="#引入-maven-依赖" aria-hidden="true">#</a> 引入 maven 依赖</h3><p>Stream API 的 maven 依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.kafka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>kafka-streams<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其他 API 的 maven 依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.kafka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>kafka-clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="kafka-核心-api" tabindex="-1"><a class="header-anchor" href="#kafka-核心-api" aria-hidden="true">#</a> Kafka 核心 API</h3><p>Kafka 有 5 个核心 API</p>`,12),S={href:"https://kafka.apache.org/documentation.html#producerapi",target:"_blank",rel:"noopener noreferrer"},x={href:"https://kafka.apache.org/documentation.html#consumerapi",target:"_blank",rel:"noopener noreferrer"},P={href:"https://kafka.apache.org/documentation/streams",target:"_blank",rel:"noopener noreferrer"},I={href:"https://kafka.apache.org/documentation.html#connect",target:"_blank",rel:"noopener noreferrer"},T={href:"https://kafka.apache.org/documentation/#adminapi",target:"_blank",rel:"noopener noreferrer"},j=e(`<h3 id="发送消息" tabindex="-1"><a class="header-anchor" href="#发送消息" aria-hidden="true">#</a> 发送消息</h3><h4 id="发送并忽略返回" tabindex="-1"><a class="header-anchor" href="#发送并忽略返回" aria-hidden="true">#</a> 发送并忽略返回</h4><p>代码如下，直接通过 <code>send</code> 方法来发送</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ProducerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> record <span class="token operator">=</span>
            <span class="token keyword">new</span> <span class="token class-name">ProducerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;CustomerCountry&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Precision Products&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;France&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
            producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="同步发送" tabindex="-1"><a class="header-anchor" href="#同步发送" aria-hidden="true">#</a> 同步发送</h4><p>代码如下，与“发送并忘记”的方式区别在于多了一个 <code>get</code> 方法，会一直阻塞等待 <code>Broker</code> 返回结果：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ProducerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> record <span class="token operator">=</span>
            <span class="token keyword">new</span> <span class="token class-name">ProducerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;CustomerCountry&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Precision Products&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;France&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
            producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="异步发送" tabindex="-1"><a class="header-anchor" href="#异步发送" aria-hidden="true">#</a> 异步发送</h4><p>代码如下，异步方式相对于“发送并忽略返回”的方式的不同在于：在异步返回时可以执行一些操作，如记录错误或者成功日志。</p><p>首先，定义一个 callback</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">DemoProducerCallback</span> <span class="token keyword">implements</span> <span class="token class-name">Callback</span> <span class="token punctuation">{</span>
      <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCompletion</span><span class="token punctuation">(</span><span class="token class-name">RecordMetadata</span> recordMetadata<span class="token punctuation">,</span> <span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，使用这个 callback</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ProducerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> record <span class="token operator">=</span>
            <span class="token keyword">new</span> <span class="token class-name">ProducerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;CustomerCountry&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Biomedical Materials&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;USA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>record<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DemoProducerCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="发送消息示例" tabindex="-1"><a class="header-anchor" href="#发送消息示例" aria-hidden="true">#</a> 发送消息示例</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">KafkaProducer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">Producer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">ProducerConfig</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">ProducerRecord</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * Kafka 生产者生产消息示例 生产者配置参考：https://kafka.apache.org/documentation/#producerconfigs
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProducerDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">HOST</span> <span class="token operator">=</span> <span class="token string">&quot;localhost:9092&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1. 指定生产者的配置</span>
        <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">BOOTSTRAP_SERVERS_CONFIG</span><span class="token punctuation">,</span> <span class="token constant">HOST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">ACKS_CONFIG</span><span class="token punctuation">,</span> <span class="token string">&quot;all&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">RETRIES_CONFIG</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">BATCH_SIZE_CONFIG</span><span class="token punctuation">,</span> <span class="token number">16384</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">LINGER_MS_CONFIG</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">BUFFER_MEMORY_CONFIG</span><span class="token punctuation">,</span> <span class="token number">33554432</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">KEY_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span>
            <span class="token string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">VALUE_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span>
            <span class="token string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 2. 使用配置初始化 Kafka 生产者</span>
        <span class="token class-name">Producer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaProducer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 3. 使用 send 方法发送异步消息</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token string">&quot;Message &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">;</span>
                producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProducerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;HelloWorld&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Sent:&quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token comment">// 4. 关闭生产者</span>
            producer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="消费消息流程" tabindex="-1"><a class="header-anchor" href="#消费消息流程" aria-hidden="true">#</a> 消费消息流程</h3><h4 id="消费流程" tabindex="-1"><a class="header-anchor" href="#消费流程" aria-hidden="true">#</a> 消费流程</h4><p>具体步骤如下：</p><ol><li>创建消费者。</li><li>订阅主题。除了订阅主题方式外还有使用指定分组的模式，但是常用方式都是订阅主题方式</li><li>轮询消息。通过 poll 方法轮询。</li><li>关闭消费者。在不用消费者之后，会执行 close 操作。close 操作会关闭 socket，并触发当前消费者群组的再均衡。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token comment">// 1.构建KafkaCustomer</span>
    <span class="token class-name">Consumer</span> consumer <span class="token operator">=</span> <span class="token function">buildCustomer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 2.设置主题</span>
    consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 3.接受消息</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">ConsumerRecords</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> records <span class="token operator">=</span> consumer<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;customer Message---&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ConsumerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> record <span class="token operator">:</span> records<span class="token punctuation">)</span>

                <span class="token comment">// print the offset,key and value for the consumer records.</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;offset = %d, key = %s, value = %s\\n&quot;</span><span class="token punctuation">,</span>
                        record<span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> record<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> record<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token comment">// 4.关闭消息</span>
            consumer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建消费者的代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Consumer</span> <span class="token function">buildCustomer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Properties</span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// bootstrap.servers是Kafka集群的IP地址。多个时,使用逗号隔开</span>
    props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;bootstrap.servers&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;localhost:9092&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 消费者群组</span>
    props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;group.id&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;enable.auto.commit&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;auto.commit.interval.ms&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;session.timeout.ms&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;30000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;key.deserializer&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;value.deserializer&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">KafkaConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaConsumer</span>
            <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> consumer<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="消费消息方式" tabindex="-1"><a class="header-anchor" href="#消费消息方式" aria-hidden="true">#</a> 消费消息方式</h4><p>分为订阅主题和指定分组两种方式：</p><ul><li>消费者分组模式。通过订阅主题方式时，消费者必须加入到消费者群组中，即消费者必须有一个自己的分组；</li><li>独立消费者模式。这种模式就是消费者是独立的不属于任何消费者分组，自己指定消费那些 <code>Partition</code>。</li></ul><p>（1）订阅主题方式</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（2）独立消费者模式</p><p>通过 consumer 的 <code>assign(Collection&lt;TopicPartition&gt; partitions)</code> 方法来为消费者指定分区。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">consumeMessageForIndependentConsumer</span><span class="token punctuation">(</span><span class="token class-name">String</span> topic<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 1.构建KafkaCustomer</span>
    <span class="token class-name">Consumer</span> consumer <span class="token operator">=</span> <span class="token function">buildCustomer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 2.指定分区</span>
    <span class="token comment">// 2.1获取可用分区</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PartitionInfo</span><span class="token punctuation">&gt;</span></span> partitionInfoList <span class="token operator">=</span> <span class="token function">buildCustomer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">partitionsFor</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2.2指定分区,这里是指定了所有分区,也可以指定个别的分区</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> partitionInfoList<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TopicPartition</span><span class="token punctuation">&gt;</span></span> partitions <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">PartitionInfo</span> partitionInfo <span class="token operator">:</span> partitionInfoList<span class="token punctuation">)</span><span class="token punctuation">{</span>
            partitions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TopicPartition</span><span class="token punctuation">(</span>partitionInfo<span class="token punctuation">.</span><span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>partitionInfo<span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        consumer<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>partitions<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 3.接受消息</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ConsumerRecords</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> records <span class="token operator">=</span> consumer<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;consume Message---&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ConsumerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> record <span class="token operator">:</span> records<span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token comment">// print the offset,key and value for the consumer records.</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;offset = %d, key = %s, value = %s\\n&quot;</span><span class="token punctuation">,</span>
                    record<span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> record<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> record<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 异步提交</span>
            consumer<span class="token punctuation">.</span><span class="token function">commitAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,31),A=n("strong",null,"官方",-1),E={href:"http://kafka.apache.org/",target:"_blank",rel:"noopener noreferrer"},R={href:"https://github.com/apache/kafka",target:"_blank",rel:"noopener noreferrer"},L={href:"https://kafka.apache.org/documentation/",target:"_blank",rel:"noopener noreferrer"},O=n("strong",null,"书籍",-1),B={href:"https://book.douban.com/subject/27665114/",target:"_blank",rel:"noopener noreferrer"},z=n("strong",null,"教程",-1),F={href:"https://github.com/apachecn/kafka-doc-zh",target:"_blank",rel:"noopener noreferrer"},N={href:"https://time.geekbang.org/column/intro/100029201",target:"_blank",rel:"noopener noreferrer"},G=n("strong",null,"文章",-1),M={href:"https://hackernoon.com/thorough-introduction-to-apache-kafka-6fbf2989bbc1",target:"_blank",rel:"noopener noreferrer"},$={href:"http://www.heartthinkdo.com/?p=2006#233",target:"_blank",rel:"noopener noreferrer"};function D(V,Z){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("Kafka 是一个分布式事件流处理平台，它可以让您通过各种机制读、写、存储并处理事件（"),n("a",r,[k,t(a)]),s("，也被称为记录或消息）")]),n("p",null,[s("示例事件包括付款交易，手机的地理位置更新，运输订单，物联网设备或医疗设备的传感器测量等等。 这些事件被组织并存储在主题中（"),n("a",d,[m,t(a)]),s("）。 简单来说，主题类似于文件系统中的文件夹，而事件是该文件夹中的文件。")]),v,n("p",null,[s("执行 "),n("a",g,[s("kafka-console-consumer.sh"),t(a)]),s(" 以读取写入 Topic 中的 Event")]),f,n("p",null,[s("您可能有大量数据，存储在传统的关系数据库或消息队列系统中，并且有许多使用这些系统的应用程序。 通过 "),n("a",h,[s("Kafka Connect"),t(a)]),s("，您可以将来自外部系统的数据持续地导入到 Kafka 中，反之亦然。 因此，将已有系统与 Kafka 集成非常容易。为了使此过程更加容易，有数百种此类连接器可供使用。")]),n("p",null,[s("需要了解有关如何将数据导入和导出 Kafka 的更多信息，可以参考："),n("a",b,[s("Kafka Connect section"),t(a)]),s(" 章节。")]),_,n("p",null,[s("一旦将数据作为 Event 存储在 Kafka 中，就可以使用 "),n("a",K,[s("Kafka Streams"),t(a)]),s(" 的 Java / Scala 客户端。它允许您实现关键任务的实时应用程序和微服务，其中输入（和/或）输出数据存储在 Kafka Topic 中。")]),y,n("p",null,[n("a",q,[s("Kafka Streams demo"),t(a)]),s(" 和 "),n("a",w,[s("app development tutorial"),t(a)]),s(" 展示了如何从头到尾的编码并运行一个流式应用。")]),C,n("ul",null,[n("li",null,[n("a",S,[s("Producer API"),t(a)]),s(" - 允许一个应用程序发布一串流式数据到一个或者多个 Kafka Topic。")]),n("li",null,[n("a",x,[s("Consumer API"),t(a)]),s(" - 允许一个应用程序订阅一个或多个 Kafka Topic，并且对发布给他们的流式数据进行处理。")]),n("li",null,[n("a",P,[s("Streams API"),t(a)]),s(" - 允许一个应用程序作为一个流处理器，消费一个或者多个 Kafka Topic 产生的输入流，然后生产一个输出流到一个或多个 Kafka Topic 中去，在输入输出流中进行有效的转换。")]),n("li",null,[n("a",I,[s("Connector API"),t(a)]),s(" - 允许构建并运行可重用的生产者或者消费者，将 Kafka Topic 连接到已存在的应用程序或数据库。例如，连接到一个关系型数据库，捕捉表的所有变更内容。")]),n("li",null,[n("a",T,[s("Admin API"),t(a)]),s(" - 支持管理和检查 Topic，Broker，ACL 和其他 Kafka 对象。")])]),j,n("ul",null,[n("li",null,[A,n("ul",null,[n("li",null,[n("a",E,[s("Kafka 官网"),t(a)])]),n("li",null,[n("a",R,[s("Kafka Github"),t(a)])]),n("li",null,[n("a",L,[s("Kafka 官方文档"),t(a)])])])]),n("li",null,[O,n("ul",null,[n("li",null,[n("a",B,[s("《Kafka 权威指南》"),t(a)])])])]),n("li",null,[z,n("ul",null,[n("li",null,[n("a",F,[s("Kafka 中文文档"),t(a)])]),n("li",null,[n("a",N,[s("Kafka 核心技术与实战"),t(a)])])])]),n("li",null,[G,n("ul",null,[n("li",null,[n("a",M,[s("Thorough Introduction to Apache Kafka"),t(a)])]),n("li",null,[n("a",$,[s("Kafka(03) Kafka 介绍"),t(a)])])])])])])}const U=p(i,[["render",D],["__file","index.html.vue"]]);export{U as default};
