import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as c,c as l,a as n,b as s,d as e,e as t}from"./app-c4d395b2.js";const i={},u=t('<h1 id="分布式锁" tabindex="-1"><a class="header-anchor" href="#分布式锁" aria-hidden="true">#</a> 分布式锁</h1><h2 id="什么是分布式锁" tabindex="-1"><a class="header-anchor" href="#什么是分布式锁" aria-hidden="true">#</a> 什么是分布式锁</h2><p>在计算机科学中，<strong>锁是在并发场景下用于强行限制资源访问的一种同步机制</strong>，即用于在并发控制中通过互斥手段来保证数据同步安全。</p><p>在 Java 进程中，可以使用 Lock、synchronized 等来支持并发锁。如果是同一台机器的不同进程，想要同时操作一个共享资源（例如修改同一个文件），可以使用操作系统提供的「文件锁」或「信号量」来做互斥。这些发生在同一台机器上的互斥操作，可以称为<strong>本地锁</strong>。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202412190814629.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>本地锁无法协同不同机器间的互斥操作。为了解决这个问题，需要引入分布式锁。</p><p><strong>分布式锁</strong>，顾名思义，应用于分布式场景下，它和单进程中的锁并没有本质上的不同，只是控制对象由一个进程中的多个线程变成了多个进程中的多个线程。此外，临界区的资源也由进程内共享资源变成了分布式系统内部共享资源。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202412190815373.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>分布式锁典型应用场景是：</p><ul><li><strong>选举 Leader</strong> - 分布式锁可用于确保：在任何指定时间内，只有一个节点成为领导者。</li><li><strong>任务调度</strong> - 在分布式任务调度器中，分布式锁确保一个调度任务仅由一个 worker 节点执行，从而防止重复执行。</li><li><strong>资源配置</strong> - 在管理共享资源（如文件系统、网络 Socket 或硬件设备）时，分布式锁可确保一次只有一个进程可以访问资源。</li><li><strong>微服务协调</strong> - 当多个微服务需要执行协同操作时，例如更新不同数据库中的相关数据，分布式锁可以确保这些操作以可控和有序的方式执行。</li><li><strong>库存管理</strong> - 在电商系统中，分布式锁可以管理库存更新，以确保当多个用户尝试同时购买相同商品时，正确增减库存，防止超卖。</li><li><strong>会话管理</strong> - 在分布式环境中处理用户会话时，分布式锁可以确保用户会话一次只能由一个服务器修改，从而防止不一致。</li></ul><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202503302119532.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',11),r={href:"https://blog.bytebytego.com/i/149472287/why-do-we-need-to-use-a-distributed-lock",target:"_blank",rel:"noopener noreferrer"},d=t('<h2 id="分布式锁的设计目标" tabindex="-1"><a class="header-anchor" href="#分布式锁的设计目标" aria-hidden="true">#</a> 分布式锁的设计目标</h2><p>分布式锁的解决方案大致有以下几种：</p><ul><li>基于数据库实现</li><li>基于缓存（Redis，Memcached 等）实现</li><li>基于 Zookeeper 实现</li></ul><p>分布式锁的实现要点大同小异，仅在实现细节上有所不同。</p><h3 id="互斥" tabindex="-1"><a class="header-anchor" href="#互斥" aria-hidden="true">#</a> 互斥</h3><p><strong>分布式锁必须是独一无二的</strong>，表现形式为：向数据存储插入一个唯一的 key，一旦有一个线程插入这个 key，其他线程就不能再插入了。</p><ul><li>保证 key 唯一性的最简单的方式是使用 UUID。</li><li>此外，可以参考 Snowflake ID（雪花算法），将机器地址（IP 地址、机器 ID、MAC 地址）、Jvm 进程 ID（应用 ID、服务 ID）、时间戳等关键信息拼接起来作为唯一标识。</li><li>应用自行保证</li></ul><h3 id="避免死锁" tabindex="-1"><a class="header-anchor" href="#避免死锁" aria-hidden="true">#</a> 避免死锁</h3><p>在分布式锁的场景中，部分失败和异步网络这两个问题是同时存在的。如果一个进程获得了锁，但是这个进程与锁服务之间的网络出现了问题，导致无法通信，那么这个情况下，如果锁服务让它一直持有锁，就会导致死锁的发生。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202412190816412.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>常见的解决思路是引入<strong>超时机制</strong>，即成功申请锁后，超过一定时间，锁失效（删除 key）。这样就不会出现锁一直不释放，导致其他线程无法获取锁的情况。Redis 分布式锁就采用了这种思路。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202412190816042.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>超时机制解锁了死锁问题，但又引入了一个新问题：如果应用加锁时，对于操作共享资源的时长估计不足，可能会出现：操作尚未执行完，但是锁没了的尴尬情况。为了解决这个问题，需要引入<strong>锁续期</strong>机制：当持有锁的线程尚未执行完操作前，不断周期性检测锁的超时时间，一旦发现快要过期，就自动为锁续期。</p><p>ZooKeeper 分布式锁避免死锁采用了另外一种思路。ZooKeeper 的存储单元叫 znode，它是以文件层级形式组织，天然就存在物理空间隔离。并且 ZooKeeper 支持临时节点 + Watch 机制，可以在客户端断连时主动删除临时节点，所以不存在死锁问题。</p><h3 id="可重入" tabindex="-1"><a class="header-anchor" href="#可重入" aria-hidden="true">#</a> 可重入</h3><p><strong>可重入</strong>指的是：<strong>同一个线程在没有释放锁之前，能否再次获得该锁</strong>。其实现方案是：只需在加锁的时候，<strong>记录好当前获取锁的节点 + 线程组合的唯一标识</strong>，然后在后续的加锁请求时，如果当前请求的节点 + 线程的唯一标识和当前持有锁的相同，那么就直接返回加锁成功；如果不相同，则按正常加锁流程处理。</p><h3 id="公平性" tabindex="-1"><a class="header-anchor" href="#公平性" aria-hidden="true">#</a> 公平性</h3><p>当多个线程请求同一锁时，它们必须按照请求的顺序来获取锁，即先来先得的原则。锁的公平性的实现也非常简单，对于被阻塞的加锁请求，我们只要先记录好它们的顺序，在锁被释放后，按顺序颁发就可以了。</p><h3 id="重试" tabindex="-1"><a class="header-anchor" href="#重试" aria-hidden="true">#</a> 重试</h3><p>有时候，加锁失败可能只是由于网络波动、请求超时等原因，稍候就可以成功获取锁。为了应对这种情况，加锁操作需要支持重试机制。常见的做法是，设置一个加锁超时时间，在该时间范围内，不断自旋重试加锁操作，超时后再判定加锁失败。</p><h3 id="容错" tabindex="-1"><a class="header-anchor" href="#容错" aria-hidden="true">#</a> 容错</h3><p>分布式锁若存储在单一节点，一旦该节点宕机或失联，就会导致锁失效。将分布式锁存储在多数据库实例中，加锁时并发写入 <code>N</code> 个节点，只要 <code>N / 2 + 1</code> 个节点写入成功即视为加锁成功。</p><h2 id="数据库分布式锁" tabindex="-1"><a class="header-anchor" href="#数据库分布式锁" aria-hidden="true">#</a> 数据库分布式锁</h2><h3 id="数据库分布式锁原理" tabindex="-1"><a class="header-anchor" href="#数据库分布式锁原理" aria-hidden="true">#</a> 数据库分布式锁原理</h3><p>基于数据库实现分布式锁的思路是：维护一张锁记录表，为用于标识分布式锁的字段增加<strong>唯一性约束</strong>。利用唯一性约束的互斥性，当且仅当成功插入记录，即表示加锁成功。</p><p>（1）创建锁表</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>distributed_lock<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>\n	<span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;主键&#39;</span><span class="token punctuation">,</span>\n	<span class="token identifier"><span class="token punctuation">`</span>resource<span class="token punctuation">`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;资源&#39;</span><span class="token punctuation">,</span>\n	<span class="token identifier"><span class="token punctuation">`</span>count<span class="token punctuation">`</span></span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;0&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;锁次数，统计可重入锁&#39;</span><span class="token punctuation">,</span>\n	<span class="token identifier"><span class="token punctuation">`</span>desc<span class="token punctuation">`</span></span> <span class="token keyword">TEXT</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;备注&#39;</span><span class="token punctuation">,</span>\n	<span class="token identifier"><span class="token punctuation">`</span>create_time<span class="token punctuation">`</span></span> <span class="token keyword">DATETIME</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;创建时间&#39;</span><span class="token punctuation">,</span>\n	<span class="token identifier"><span class="token punctuation">`</span>update_time<span class="token punctuation">`</span></span> <span class="token keyword">DATETIME</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;更新时间&#39;</span><span class="token punctuation">,</span>\n	<span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n	<span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>uniq_resource<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>resource<span class="token punctuation">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span>\n	<span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> <span class="token identifier"><span class="token punctuation">`</span>utf8mb4<span class="token punctuation">`</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）获取锁</p><p>想要锁住某个方法时，执行以下 SQL：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">insert</span> <span class="token keyword">into</span> methodLock<span class="token punctuation">(</span>method_name<span class="token punctuation">,</span><span class="token keyword">desc</span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span>‘method_name’<span class="token punctuation">,</span>‘<span class="token keyword">desc</span>’<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>因为我们对 <code>method_name</code> 做了唯一性约束，这里如果有多个请求同时提交到数据库的话，数据库会保证只有一个操作可以成功，那么我们就可以认为操作成功的那个线程获得了该方法的锁，可以执行方法体内容。</p><p>成功插入则获取锁。</p><p>（3）释放锁</p><p>当方法执行完毕之后，想要释放锁的话，需要执行以下 Sql:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">delete</span> <span class="token keyword">from</span> methodLock <span class="token keyword">where</span> method_name <span class="token operator">=</span><span class="token string">&#39;method_name&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="数据库分布式锁小结" tabindex="-1"><a class="header-anchor" href="#数据库分布式锁小结" aria-hidden="true">#</a> 数据库分布式锁小结</h3><p>数据库分布式锁的<strong>问题</strong>：</p><ul><li><strong>死锁</strong>：一旦释放锁操作失败，或持有锁的机器宕机、断连，就会导致锁记录一直存在，其他线程无法再获得锁。解决办法：为锁增加失效时间字段，启动一个定时任务，隔一段时间清除一次过期的数据。</li><li><strong>非阻塞</strong>：因为 <code>insert</code> 操作一旦失败就会报错，因此未获得锁的线程并不会进入排队队列，要想获得锁就要再次触发加锁操作。解决办法：循环重试，直到插入成功，这么做会产生一定额外开销。</li><li><strong>非重入</strong>：同一个线程在没有释放锁之前无法再次获得该锁。因为数据中数据已经存在了。解决办法：在数据库表中加个字段，记录当前获得锁的节点信息和线程信息，那么下次再获取锁的时候先查询数据库，如果当前机器的主机信息和线程信息在数据库可以查到的话，直接把锁分配给他就可以了。</li><li><strong>单点问题</strong>：如果数据库是一个单点，一旦数据库挂掉，会导致业务系统不可用。解决办法：单点问题可以用多数据库实例，同时写入 <code>N</code> 个节点，<code>N / 2 + 1</code> 个成功就加锁成功。</li></ul><p>数据库分布式锁的<strong>利弊</strong>：</p><ul><li><strong>优点</strong>：直接借助数据库，简单易懂。</li><li><strong>缺点</strong>：会有各种各样的问题，在解决问题的过程中会使整个方案变得越来越复杂。此外，数据库性能易成为瓶颈。</li></ul><h2 id="zookeeper-分布式锁" tabindex="-1"><a class="header-anchor" href="#zookeeper-分布式锁" aria-hidden="true">#</a> ZooKeeper 分布式锁</h2><h3 id="zookeeper-分布式锁原理" tabindex="-1"><a class="header-anchor" href="#zookeeper-分布式锁原理" aria-hidden="true">#</a> ZooKeeper 分布式锁原理</h3><p>ZooKeeper 分布式锁的实现基于 ZooKeeper 的两个重要特性：</p><ul><li><strong>顺序临时节点</strong>：ZooKeeper 的存储类似于 DNS 那样的具有层级的命名空间。ZooKeeper 节点类型可以分为持久节点（<code>PERSISTENT</code>）、临时节点（<code>EPHEMERAL</code>），每个节点还能被标记为有序性（<code>SEQUENTIAL</code>），一旦节点被标记为有序性，那么整个节点就具有顺序自增的特点。</li><li><strong>Watch 机制</strong>：ZooKeeper 允许用户在指定节点上注册一些 <code>Watcher</code>，并且在特定事件触发的时候，ZooKeeper 服务端会将事件通知给用户。</li></ul><p>下面是 ZooKeeper 分布式锁的工作流程：</p><ol><li>创建一个目录节点，比如叫做 <code>/locks</code>；</li><li>线程 A 想获取锁，就在 <code>/locks</code> 目录下创建临时顺序 zk 节点；</li><li>获取 <code>/locks</code>目录下所有的子节点，检查是否存在比自己顺序更小的节点：若不存在，则说明当前线程创建的节点顺序最小，获取锁成功；</li><li>此时，线程 B 试图获取锁，发现自己的节点顺序不是最小，设置监听锁号在自己前一位的节点；</li><li>线程 A 处理完，删除自己的节点。线程 B 监听到变更事件，判断自己是不是最小的节点，如果是则获得锁。</li></ol>',46),k={href:"https://curator.apache.org/docs/about/",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"InterProcessMutex",-1),v=t(`<details class="hint-container details"><summary>ZooKeeper 分布式锁实现示例</summary><p>下面是一个简单的 <code>InterProcessMutex</code> 封装示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>collection<span class="token punctuation">.</span></span><span class="token class-name">CollectionUtil</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>curator<span class="token punctuation">.</span>framework<span class="token punctuation">.</span></span><span class="token class-name">CuratorFramework</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>curator<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>recipes<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">InterProcessMutex</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CompletableFuture</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZookeeperReentrantDistributedLock</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 锁路径，即锁的唯一标识，对应 zk 的一个 PERSISTENT 节点，加锁时会在该节点下新建 EPHEMERAL 节点
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> path<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * zk 的客户端
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">CuratorFramework</span> client<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * curator 客户端提供的 zk 可重入公平锁
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">InterProcessMutex</span> mutex<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ZookeeperReentrantDistributedLock</span><span class="token punctuation">(</span><span class="token class-name">String</span> lockId<span class="token punctuation">,</span> <span class="token class-name">CuratorFramework</span> client<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>client <span class="token operator">=</span> client<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>path <span class="token operator">=</span> <span class="token string">&quot;/locks/&quot;</span> <span class="token operator">+</span> lockId<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>mutex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InterProcessMutex</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>client<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            mutex<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;lock success&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;lock exception&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">boolean</span> isOk <span class="token operator">=</span> mutex<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span>timeout<span class="token punctuation">,</span> unit<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>isOk<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;tryLock success&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> isOk<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;tryLock exception&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            mutex<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;unlock success&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;unlock exception&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token comment">// 清除根路径</span>
            <span class="token comment">// 生产环境中应指定线程池</span>
            <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtil</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        client<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;final unlock exception&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">RetryPolicy</span> retryPolicy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExponentialBackoffRetry</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">CuratorFramework</span> client <span class="token operator">=</span> <span class="token class-name">CuratorFrameworkFactory</span><span class="token punctuation">.</span><span class="token function">newClient</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1:2181&quot;</span><span class="token punctuation">,</span> retryPolicy<span class="token punctuation">)</span><span class="token punctuation">;</span>
client<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ZookeeperReentrantDistributedLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZookeeperReentrantDistributedLock</span><span class="token punctuation">(</span><span class="token string">&quot;订单流水号&quot;</span><span class="token punctuation">,</span> client<span class="token punctuation">)</span><span class="token punctuation">;</span>
lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;do something&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="zookeeper-分布式锁小结" tabindex="-1"><a class="header-anchor" href="#zookeeper-分布式锁小结" aria-hidden="true">#</a> ZooKeeper 分布式锁小结</h3><p>ZooKeeper 分布式锁的<strong>优点</strong>是较为<strong>可靠</strong>：</p><ul><li><strong>避免死锁</strong>：ZooKeeper 通过临时节点 + 监听机制，可以保证：如果持有临时节点的线程主动解锁或断连，Zk 会自动删除临时节点，这意味着锁的释放。所以，不存在锁永久不释放从而导致死锁的问题。</li><li><strong>单点问题</strong>：ZooKeeper 采用主从架构，并确保主从同步是强一致的，因此不会出现单点问题。</li></ul><p>ZooKeeper 分布式锁的<strong>缺点</strong>是：加锁、解锁操作，本质上是对 ZooKeeper 的写操作，全部由 ZooKeeper 主节点负责。如果加锁、解锁的吞吐量很大，容易出现单点写入瓶颈。</p><h2 id="redis-分布式锁" tabindex="-1"><a class="header-anchor" href="#redis-分布式锁" aria-hidden="true">#</a> Redis 分布式锁</h2><p>相比于用数据库来实现分布式锁，基于缓存实现的分布式锁的性能会更好。目前有很多成熟的分布式产品，包括 Redis、memcache、Tair 等。这里以 Redis 举例。</p><h3 id="redis-分布式锁原理" tabindex="-1"><a class="header-anchor" href="#redis-分布式锁原理" aria-hidden="true">#</a> Redis 分布式锁原理</h3><h4 id="极简版本" tabindex="-1"><a class="header-anchor" href="#极简版本" aria-hidden="true">#</a> 极简版本</h4><p>我们先来看一下，如何实现一个极简版本的 Redis 分布式锁。</p><p>（1）加锁</p><p>Redis 中的 <code>setnx</code> 命令，表示当且仅当 key 不存在时，才会写入 key。由于其互斥性，所以可以基于此来实现分布式锁。</p><p>执行 <code>setnx key val</code>，若返回 1，表示写入成功，即加锁成功；若返回 0，表示该 key 已存在，写入失败，即加锁失败。</p><p>（2）解锁</p><p>Redis 分布式锁如何解锁呢？</p><p>很简单，删除 key 就意味着释放锁，即执行 <code>del key</code> 命令。</p><h4 id="避免死锁-1" tabindex="-1"><a class="header-anchor" href="#避免死锁-1" aria-hidden="true">#</a> 避免死锁</h4><p>极简版本的解决方案有一个很大的问题：<strong>存在死锁的可能</strong>。持有锁的节点如果执行业务过程中出现异常或机器宕机，都可能导致无法释放锁。这种情况下，其他节点永远也无法再获取锁。</p><p>对于异常，在 Java 中，可以通过 <code>try...catch...finally</code> 来保证：最终一定会释放锁，其他编程语言也有相似的语法特性。</p><p>对于机器宕机这种情况，如何处理呢？通常的对策是：为锁加上<strong>超时机制，过期自动删除</strong>。</p><p>在 Redis 中，<code>expire</code> 命令可以为 key 设置一个超时时间，一旦过期，Redis 会自动删除 key。如此看来，<code>setnx</code> + <code>expire</code> 组合使用，就能解决死锁问题了。可惜，没那么简单。Redis 只能保证单一命令的原子性，不保证组合命令的原子性。</p><p>那么，Redis 中有没有一条命令可以实现 setnx + expire 的组合语义呢？还真有，可以通过下面的命令来实现：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 下面两条命令是等价的</span>
SET key val NX PX <span class="token number">30000</span>
SET key val NX EX <span class="token number">30</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数说明：</p><ul><li><code>NX</code>：该参数表示当且仅当 key 不存在，才能写入成功</li><li><code>PX</code>：超时时间，单位毫秒</li><li><code>EX</code>：超时时间，单位秒</li></ul><h4 id="超时续期" tabindex="-1"><a class="header-anchor" href="#超时续期" aria-hidden="true">#</a> 超时续期</h4><p>为了避免死锁，我们为锁添加了超时时间。但这里有一个问题，如果应用加锁时，对于操作共享资源的时长估计不足，可能会出现：操作尚未执行完，但是锁没了的尴尬情况。为了解决这个问题，很自然会想到，时间不够，就续期呗。</p>`,27),h={href:"https://github.com/redisson/redisson",target:"_blank",rel:"noopener noreferrer"},b=n("strong",null,"超时续期",-1),g=t(`<h4 id="安全解锁" tabindex="-1"><a class="header-anchor" href="#安全解锁" aria-hidden="true">#</a> 安全解锁</h4><p>前文提到了，解锁的操作，实际上就是 <code>del key</code>。这里存在一个问题：因为没有任何判断，任何节点都可以随意删除 key，换句话说，锁可能会被其他节点释放。如何避免这个问题呢？解决方法就是：为锁添加<strong>唯一性标识</strong>来进行互斥。唯一性标识可以是 UUID，可以是雪花算法 ID 等。</p><p>在 Redis 分布式锁中，唯一性标识的具体实现就是在 <code>set key val</code> 时，将唯一性标识 id 作为 <code>val</code> 写入。<strong>解锁前，先判断 key 的 value，必须和 set 时写入的 id 值保持一致，以此确认锁归属于自己</strong>。解锁的伪代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> id<span class="token punctuation">)</span>
	redis<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里依然存在一个问题，由于需要在 Redis 中，先 <code>get</code>，后 <code>del</code> 操作，所以无法保证操作的原子性。为了保证原子性，可以将这段伪代码用 lua 脚本来实现，这么做的理由是 Redis 中支持原子性的执行 lua 脚本。下面是安全解锁的 lua 脚本代码：</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">if</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span>KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">then</span>
    <span class="token keyword">return</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&quot;del&quot;</span><span class="token punctuation">,</span>KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">else</span>
    <span class="token keyword">return</span> <span class="token number">0</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="自旋重试" tabindex="-1"><a class="header-anchor" href="#自旋重试" aria-hidden="true">#</a> 自旋重试</h4><p>有时候，加锁失败可能只是由于网络波动、请求超时等原因，稍候就可以成功获取锁。为了应对这种情况，加锁操作需要支持重试机制。常见的做法是，设置一个加锁超时时间，在该时间范围内，不断自旋重试加锁操作，超时后再判定加锁失败。</p><p>下面是一个自旋重试获取锁的伪代码示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> begin <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> result <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span> uniqId<span class="token punctuation">,</span> <span class="token string">&quot;NX&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;PX&quot;</span><span class="token punctuation">,</span> expireTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;OK&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 加锁成功，执行业务操作</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">long</span> time <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> begin<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">&gt;=</span> timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 异常处理</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    <span class="token comment">// 释放锁</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="redis-分布式锁小结" tabindex="-1"><a class="header-anchor" href="#redis-分布式锁小结" aria-hidden="true">#</a> Redis 分布式锁小结</h3><p>在前文中，为了实现一个靠谱的 Redis 分布式锁，我们讨论了避免死锁、超时续期、安全解锁几个问题以及应对策略。但是，依然存在一些其他问题：</p><ul><li><strong>不可重入</strong> - 同一个线程无法多次获取同一把锁。</li><li><strong>单点问题</strong> - Redis 主从同步存在延迟，有可能导致锁冲突。举例来说：线程一在主节点加锁，如果主节点尚未同步给从节点就发生宕机；此时，Redis 集群会选举一个从节点作为新的主节点。此时，新的主节点没有锁的数据，若有其他线程试图加锁，就可以成功获取锁，即出现同时有多个线程持有锁的情况。解决这个问题，可以使用 RedLock 算法。</li></ul><h2 id="redlock-分布式锁" tabindex="-1"><a class="header-anchor" href="#redlock-分布式锁" aria-hidden="true">#</a> RedLock 分布式锁</h2><p>RedLock 分布式锁，是 Redis 的作者 Antirez 提出的一种解决方案。</p>`,15),y={href:"https://redis.io/docs/latest/develop/use/patterns/distributed-locks/",target:"_blank",rel:"noopener noreferrer"},f=t('<h3 id="redlock-分布式锁原理" tabindex="-1"><a class="header-anchor" href="#redlock-分布式锁原理" aria-hidden="true">#</a> RedLock 分布式锁原理</h3><p>RedLock 分布式锁在普通 Redis 分布式锁的基础上，进行了扩展，其要点在于：</p><ul><li>（1）加锁操作不是写入单一节点，而是同时写入多个主节点，官方推荐集群中至少有 5 个主节点。</li><li>（2）只要半数以上的主节点写入成功，即视为加锁成功。</li><li>（3）大多数节点加锁的总耗时，要小于锁设置的过期时间。</li><li>（4）解锁时，要向所有节点发起请求。</li></ul><p>下面来逐一解释以上各要点的用意：</p><blockquote><p>（1）RedLock 加锁时，为什么要同时写入多个主节点？</p></blockquote><p>这是为了避免单点问题，即使有部分实例出现异常，依然可以正常提供加锁、解锁能力。</p><blockquote><p>（2）为什么要半数以上的主节点写入成功，才视为加锁成功？</p></blockquote><p>在分布式系统中，为了达成共识，常常采用“多数派”策略来进行决策：大多数节点认可的行为，就视为整体通过。</p><blockquote><p>（3）为什么加锁成功后，还要计算加锁的累计耗时？</p></blockquote><p>因为操作的是多个节点，所以耗时肯定会比操作单个实例耗时更久。而且，网络情况是复杂的，可能存在延迟、丢包、超时等情况。网络请求越多，异常发生的概率就越大。所以，即使大多数节点加锁成功，但如果加锁的累计耗时已经<strong>超过</strong>了锁的过期时间，那此时有些实例上的锁可能已经失效了，这个锁就没有意义了。</p><blockquote><p>（4）解锁时，为什么要向所有节点发起请求？</p></blockquote><p>因为网络环境的复杂性，可能会存在这种情况：向某主节点写入锁信息，实际写入成功，但是响应超时或丢包。所以，释放锁时，不管之前有没有加锁成功，需要释放<strong>所有节点</strong>的锁，以保证清理节点上<strong>残留</strong>的锁。</p><h3 id="redlock-分布式锁小结" tabindex="-1"><a class="header-anchor" href="#redlock-分布式锁小结" aria-hidden="true">#</a> RedLock 分布式锁小结</h3><p>RedLock 分布式锁的解决方案看上去考虑的面面俱到，似乎已经万无一失了，但真的是如此吗？</p><p>分布式领域典中典著作《数据密集型应用系统设计》的作者 Martin 就曾对 RedLock 提出了质疑，他和 Redis 以及 RedLock 的作者 Antirez 掀起了一场激烈的争论。</p>',15),w=n("p",null,"二人的讨论文章如下，有兴趣可以看一下：",-1),_={href:"https://martin.kleppmann.com/2016/02/08/how-to-do-distributed-locking.html",target:"_blank",rel:"noopener noreferrer"},x={href:"https://antirez.com/news/101",target:"_blank",rel:"noopener noreferrer"},R=t('<p>Martin 的观点：</p><p>（1）<strong>RedLock 不能完全保证安全性</strong></p><p>分布式系统会遇到三座大山：<strong>NPC</strong></p><ul><li>N：Network Delay，<strong>网络延迟</strong>；</li><li>P：Process Pause，进程暂停（<strong>GC</strong>）；</li><li>C：Clock Drift，<strong>时钟漂移</strong>。</li></ul><p>RedLock 在遇到以上情况时，不能保证安全性。</p><p>（2）RedLock 加锁、解锁需要处理多个节点，代价太高</p><p>（3）提出 fencing token 的方案，保证正确性</p><p>这个模型流程如下：</p><ul><li>客户端在获取锁时，锁服务可以提供一个<strong>递增</strong>的 token</li><li>客户端拿着这个 token 去操作共享资源</li><li>共享资源可以根据 token 拒绝<strong>后来者</strong>的请求</li></ul><p>Antirez 的观点：</p><ul><li>同意时钟跳跃对 Redlock 的影响，但认为时钟跳跃是可以避免的，取决于基础设施和运维。并且如果误差不大，也是可以接受的。</li><li>Redlock 在设计时，充分考虑了 NPC 问题，在 Redlock 步骤 3 之前出现 NPC，可以保证锁的正确性，但在步骤 3 之后发生 NPC，不止是 Redlock 有问题，其它分布式锁服务同样也有问题，所以不在讨论范畴内。</li></ul><p>总结来说，<strong>已知的分布式锁，无论采用什么解决方案，在极端情况下，都无法保证百分百的安全。</strong></p><h2 id="redisson-提供的分布式锁" tabindex="-1"><a class="header-anchor" href="#redisson-提供的分布式锁" aria-hidden="true">#</a> Redisson 提供的分布式锁</h2>',13),q={href:"https://github.com/redisson/redisson",target:"_blank",rel:"noopener noreferrer"},E={href:"https://redisson.org/docs/data-and-services/counters/",target:"_blank",rel:"noopener noreferrer"},L={href:"https://redisson.org/docs/data-and-services/collections/",target:"_blank",rel:"noopener noreferrer"},N={href:"https://redisson.org/docs/data-and-services/locks-and-synchronizers/",target:"_blank",rel:"noopener noreferrer"},T=t(`<p>Redisson 支持的分布式锁有多种：Lock, FairLock, MultiLock, RedLock, ReadWriteLock, Semaphore, PermitExpirableSemaphore, CountDownLatch，可以根据场景需要去选择，非常方便。一般而言，使用 Redis 分布式锁，推荐直接使用 Redisson 提供的 API，功能全面且较为可靠。</p><p>下面是 Redisson Lock API 的一个简单示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">RLock</span> lock <span class="token operator">=</span> redisson<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span><span class="token string">&quot;myLock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// traditional lock method</span>
lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// or acquire lock and automatically unlock it after 10 seconds</span>
lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// or wait for lock aquisition up to 100 seconds</span>
<span class="token comment">// and automatically unlock it after 10 seconds</span>
<span class="token keyword">boolean</span> res <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">try</span> <span class="token punctuation">{</span>
     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
   <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
       lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Redisson 分布式锁的实现要点</strong>：</p><ul><li><strong>锁的获取</strong>：Redisson 使用 Lua 脚本，利用 <code>exists + hexists + hincrby</code> 命令来保证只有一个线程能成功设置键（表示获得锁）。同时，Redisson 会通过 <code>pexpire</code> 命令为锁设置过期时间，防止因宕机等原因导致锁无法释放（即死锁问题）。</li><li><strong>锁的续期</strong>：为了防止锁在持有过程中过期导致其他线程抢占锁，Redisson 实现了锁自动续期的功能。持有锁的线程会定期续期，即更新锁的过期时间，确保任务没有完成时锁不会失效。</li><li><strong>锁的释放</strong>：锁释放时，Redisson 也是通过 Lua 脚本保证释放操作的原子性。利用 <code>hexists + del</code> 确保只有持有锁的线程才能释放锁，防止误释放锁的情况。Lua 脚本同时利用 publish 命令，广播唤醒其它等待的线程。</li><li><strong>可重入锁</strong>：Redisson 支持可重入锁，持有锁的线程可以多次获取同一把锁而不会被阻塞。具体是利用 Redis 中的哈希结构，哈希中的 key 为线程 ID，如果重入则 value +1，如果释放则 value -1，减到 0 说明锁被释放了，则 del 锁。</li></ul><h2 id="分布式锁技术选型" tabindex="-1"><a class="header-anchor" href="#分布式锁技术选型" aria-hidden="true">#</a> 分布式锁技术选型</h2><p>下面是主流分布式锁技术方案的对比，可以在技术选型时作为参考：</p>`,7),I=n("thead",null,[n("tr",null,[n("th"),n("th",null,"数据库分布式锁"),n("th",null,"Redis 分布式锁"),n("th",null,"ZooKeeper 分布式锁")])],-1),S=n("tr",null,[n("td",null,"方案要点"),n("td",null,[s("1. 维护一张锁表，为锁的唯一标识字段添加唯一性约束。"),n("br"),s("2. 只要 insert 成功，即视为加锁成功。")]),n("td",null,[n("code",null,"set lockKey randomValue NX PX/EX time"),s(" 当且仅当 key 不存在时才可以写入，并且设定超时时间，以避免死锁。")]),n("td",null,[s("加锁本质上是在 zk 中指定目录创建"),n("strong",null,"顺序临时接节点"),s("，序号最小即加锁成功。节点删除时，有监听通知机制告知申请锁的线程。")])],-1),C=n("tr",null,[n("td",null,"方案难度"),n("td",null,"实现简单、易于理解"),n("td",null,"较为简单，但要使其更可靠，需要有一些完善策略"),n("td",null,"应用简单，但 zk 内部机制并不简单")],-1),A=n("tr",null,[n("td",null,"性能"),n("td",null,"性能最差，易成为瓶颈"),n("td",null,"性能最高"),n("td",null,"性能弱于 Redis")],-1),M=n("tr",null,[n("td",null,"可靠性"),n("td",null,"有锁表的风险"),n("td",null,"较为可靠（需要一些完善策略）"),n("td",null,"可靠性最高")],-1),P=n("tr",null,[n("td",null,"适用场景"),n("td",null,"一般不采用"),n("td",null,"适用于高并发的场景"),n("td",null,"适用于要求可靠，但并发量不高的场景")],-1),Z=n("td",null,"开源实现",-1),D=n("td",null,"无",-1),U={href:"https://github.com/redisson/redisson",target:"_blank",rel:"noopener noreferrer"},K={href:"https://curator.apache.org/docs/about/",target:"_blank",rel:"noopener noreferrer"},z=n("h2",{id:"参考资料",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考资料","aria-hidden":"true"},"#"),s(" 参考资料")],-1),j={href:"https://juejin.im/post/5a20cd8bf265da43163cdd9a",target:"_blank",rel:"noopener noreferrer"},O={href:"https://mp.weixin.qq.com/s/JzCHpIOiFVmBoAko58ZuGw",target:"_blank",rel:"noopener noreferrer"},F={href:"https://mp.weixin.qq.com/s/-N4x6EkxwAYDGdJhwvmZLw",target:"_blank",rel:"noopener noreferrer"},X={href:"https://mp.weixin.qq.com/s/yZC6VJGxt1ANZkn0SljZBg",target:"_blank",rel:"noopener noreferrer"};function B(G,V){const a=p("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("图来自："),n("a",r,[s("https://blog.bytebytego.com/i/149472287/why-do-we-need-to-use-a-distributed-lock"),e(a)])]),d,n("p",null,[n("a",k,[s("Apache Curator"),e(a)]),s(" 提供了基于 ZooKeeper 实现的可重入公平锁 "),m,s("，它正是采用了上面所述的工作流程。")]),v,n("p",null,[s("具体来说，如何续期呢？一种方案是：加锁后，启动一个定时任务，周期性检测锁是否快要过期，如果快要过期并且操作尚未结束，就对锁进行自动续期。自行实现这个方案似乎有点繁琐，好在开源 Redis 客户端 "),n("a",h,[s("Redisson"),e(a)]),s(" 中已经为锁的"),b,s("提供了一个成熟的机制——WatchDog（看门狗）。我们可以直接拿来主义即可。")]),g,n("blockquote",null,[n("p",null,[s("扩展："),n("a",y,[s("RedLock 官方文档"),e(a)])])]),f,n("blockquote",null,[w,n("ul",null,[n("li",null,[s("Martin 质疑 RedLock 的文章："),n("a",_,[s("How to do distributed locking"),e(a)])]),n("li",null,[s("Antirez 的辩驳文章："),n("a",x,[s("Is Redlock safe?"),e(a)])])])]),R,n("p",null,[n("a",q,[s("Redisson"),e(a)]),s(" 是一个流行的 Redis Java 客户端，它基于 Netty 开发，并提供了丰富的扩展功能，如："),n("a",E,[s("分布式计数器"),e(a)]),s("、"),n("a",L,[s("分布式集合"),e(a)]),s("、"),n("a",N,[s("分布式锁"),e(a)]),s(" 等。")]),T,n("table",null,[I,n("tbody",null,[S,C,A,M,P,n("tr",null,[Z,D,n("td",null,[n("a",U,[s("Redisson"),e(a)])]),n("td",null,[n("a",K,[s("Apache Curator"),e(a)])])])])]),z,n("ul",null,[n("li",null,[n("a",j,[s("分布式锁实现汇总"),e(a)])]),n("li",null,[n("a",O,[s("分布式锁实现原理与最佳实践 - 阿里云开发者"),e(a)])]),n("li",null,[n("a",F,[s("聊聊分布式锁 - 字节跳动技术团队"),e(a)])]),n("li",null,[n("a",X,[s("Redis、ZooKeeper、Etcd，谁有最好用的分布式锁？ - 腾讯云开发者"),e(a)])])])])}const Y=o(i,[["render",B],["__file","index.html.vue"]]);export{Y as default};
