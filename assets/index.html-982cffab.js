const e=JSON.parse('{"key":"v-09bf18e8","path":"/pages/05018a1e/","title":"LSM树","lang":"zh-CN","frontmatter":{"title":"LSM树","date":"2022-03-16T09:27:21.000Z","order":4,"permalink":"/pages/05018a1e/","category":["数据结构和算法"],"tag":["数据结构","树","LSM 树"],"description":"LSM 树 什么是 LSM 树 LSM 树具有以下 3 个特点： 将索引分为内存和磁盘两部分，并在内存达到阈值时启动树合并（Merge Trees）； 用批量写入代替随机写入，并且用预写日志 WAL 技术（Write AheadLog，预写日志技术）保证内存数据，在系统崩溃后可以被恢复； 数据采取类似日志追加写的方式写入（Log Structured）磁盘，以顺序写的方式提高写 入效率。 LSM 树的这些特点，使得它相对于 B+ 树，在写入性能上有大幅提升。所以，许多 NoSQL 系统都使用 LSM 树作为检索引擎，而且还对 LSM 树进行了优化以提升检索性能。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/05018a1e/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"LSM树"}],["meta",{"property":"og:description","content":"LSM 树 什么是 LSM 树 LSM 树具有以下 3 个特点： 将索引分为内存和磁盘两部分，并在内存达到阈值时启动树合并（Merge Trees）； 用批量写入代替随机写入，并且用预写日志 WAL 技术（Write AheadLog，预写日志技术）保证内存数据，在系统崩溃后可以被恢复； 数据采取类似日志追加写的方式写入（Log Structured）磁盘，以顺序写的方式提高写 入效率。 LSM 树的这些特点，使得它相对于 B+ 树，在写入性能上有大幅提升。所以，许多 NoSQL 系统都使用 LSM 树作为检索引擎，而且还对 LSM 树进行了优化以提升检索性能。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-13T09:10:08.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"数据结构"}],["meta",{"property":"article:tag","content":"树"}],["meta",{"property":"article:tag","content":"LSM 树"}],["meta",{"property":"article:published_time","content":"2022-03-16T09:27:21.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-13T09:10:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"LSM树\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-03-16T09:27:21.000Z\\",\\"dateModified\\":\\"2025-09-13T09:10:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"什么是 LSM 树","slug":"什么是-lsm-树","link":"#什么是-lsm-树","children":[{"level":3,"title":"如何将内存数据与磁盘数据合并","slug":"如何将内存数据与磁盘数据合并","link":"#如何将内存数据与磁盘数据合并","children":[]},{"level":3,"title":"LSM 树是如何检索","slug":"lsm-树是如何检索","link":"#lsm-树是如何检索","children":[]}]},{"level":2,"title":"为什么需要 LSM 树","slug":"为什么需要-lsm-树","link":"#为什么需要-lsm-树","children":[]},{"level":2,"title":"WAL 技术","slug":"wal-技术","link":"#wal-技术","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1741616420000,"updatedTime":1757754608000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":2}]},"readingTime":{"minutes":5.75,"words":1724},"filePathRelative":"11.数据结构和算法/LSM树.md","localizedDate":"2022年3月16日","excerpt":"<h1> LSM 树</h1>\\n<h2> 什么是 LSM 树</h2>\\n<p>LSM 树具有以下 3 个特点：</p>\\n<ol>\\n<li>将索引分为内存和磁盘两部分，并在内存达到阈值时启动树合并（Merge Trees）；</li>\\n<li>用批量写入代替随机写入，并且用预写日志 WAL 技术（Write AheadLog，预写日志技术）保证内存数据，在系统崩溃后可以被恢复；</li>\\n<li>数据采取类似日志追加写的方式写入（Log Structured）磁盘，以顺序写的方式提高写<br>\\n入效率。</li>\\n</ol>\\n<p>LSM 树的这些特点，使得它相对于 B+ 树，在写入性能上有大幅提升。所以，许多 NoSQL 系统都使用 LSM 树作为检索引擎，而且还对 LSM 树进行了优化以提升检索性能。</p>","autoDesc":true}');export{e as data};
