import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as r,c,f as i,a as n,b as e,d as t,e as s}from"./app-1d030542.js";const d={},p=n("h1",{id:"mongodb-面试",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#mongodb-面试","aria-hidden":"true"},"#"),e(" MongoDB 面试")],-1),u=n("h2",{id:"mongodb-简介",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#mongodb-简介","aria-hidden":"true"},"#"),e(" MongoDB 简介")],-1),g=n("p",null,"扩展阅读：",-1),h={href:"https://www.mongodb.com/zh-cn/docs/manual/introduction/",target:"_blank",rel:"noopener noreferrer"},_={href:"https://www.infoq.cn/article/3d4suwkc2fvikykemnvw",target:"_blank",rel:"noopener noreferrer"},m={href:"https://blog.csdn.net/JiekeXu/article/details/143670868",target:"_blank",rel:"noopener noreferrer"},b=n("h3",{id:"【基础】mongodb-是什么",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#【基础】mongodb-是什么","aria-hidden":"true"},"#"),e(" 【基础】MongoDB 是什么？")],-1),f={class:"hint-container details"},k=s("<summary>要点</summary><p>MongoDB 是一个<strong>面向文档</strong>的开源 NoSQL 数据库系统，由 <strong>C++</strong> 编写的。MongoDB 支持“<strong>无模式</strong>”的数据建模，可以存储比较复杂的数据类型，是一款非常流行的 <strong>文档类型数据库</strong> 。</p><p>在高负载的情况下，MongoDB 天然支持水平扩展和高可用，可以很方便地添加更多的节点/实例，以保证服务性能和可用性。在许多场景下，MongoDB 可以用于代替传统的关系型数据库或键/值存储方式，皆在为 Web 应用提供可扩展的高可用高性能数据存储解决方案。</p><p>MongoDB 提供了丰富的功能：</p>",4),w={href:"https://www.mongodb.com/zh-cn/docs/manual/crud/#std-label-crud",target:"_blank",rel:"noopener noreferrer"},y=n("strong",null,"读写操作 (CRUD)",-1),x={href:"https://www.mongodb.com/zh-cn/docs/manual/core/aggregation-pipeline/#std-label-aggregation-pipeline",target:"_blank",rel:"noopener noreferrer"},B=n("strong",null,"数据聚合",-1),v={href:"https://www.mongodb.com/zh-cn/docs/manual/text-search/#std-label-text-search",target:"_blank",rel:"noopener noreferrer"},M=n("strong",null,"文本搜索",-1),D={href:"https://www.mongodb.com/zh-cn/docs/manual/tutorial/geospatial-tutorial/",target:"_blank",rel:"noopener noreferrer"},q=n("strong",null,"地理空间搜索",-1),z=n("li",null,"...",-1),S=n("h3",{id:"【基础】mongodb-有什么特性",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#【基础】mongodb-有什么特性","aria-hidden":"true"},"#"),e(" 【基础】MongoDB 有什么特性？")],-1),C={class:"hint-container details"},$=n("summary",null,"要点",-1),R=n("p",null,"MongoDB 主要有以下特性：",-1),T=n("strong",null,"面向文档",-1),N={href:"https://www.mongodb.com/zh-cn/docs/manual/core/document/#std-label-bson-document-format",target:"_blank",rel:"noopener noreferrer"},I={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/glossary/#std-term-JSON",target:"_blank",rel:"noopener noreferrer"},L=s("<li><strong>无模式</strong> - MongoDB 中没有预定义模式（predefined schema），文档键值的类型和大小不是固定的。由于没有固定的模式，因此按需添加或删除字段变得更容易。</li><li><strong>丰富的查询方式</strong> - MongoDB 支持基本的 CRUD 以及数据聚合、文本搜索和地理空间查询。</li><li><strong>丰富的索引类型</strong> - MongoDB 支持多种类型的索引，包括单字段索引、复合索引、多键索引、哈希索引、文本索引、 地理位置索引等，每种类型的索引有不同的使用场合。</li><li><strong>支持 ACID 事务</strong> - NoSQL 通常不支持事务，但 MongoDB 支持事务，且 MongoDB 支持 ACID。 <ul><li>MongoDB 单文档支持原子性，也具备事务的特性。</li><li>MongoDB 4.0 加入了对多文档事务的支持，但只支持复制集部署模式下的事务，也就是说事务的作用域限制为一个副本集内。</li><li>MongoDB 4.2 引入了分布式事务，增加了对分片集群上多文档事务的支持，并合并了对副本集上多文档事务的现有支持。</li></ul></li><li><strong>支持压缩</strong>：存储同样的数据所需的资源更少。</li>",5),O=n("strong",null,"支持 map-reduce",-1),j={href:"https://www.mongodb.com/docs/manual/core/aggregation-pipeline/",target:"_blank",rel:"noopener noreferrer"},W=n("li",null,[n("strong",null,"支持存储大文件"),e("：MongoDB 的单文档存储空间要求不超过 16MB。对于超过 16MB 的大文件，MongoDB 提供了 GridFS 来进行存储，通过 GridFS，可以将大型数据进行分块处理，然后将这些切分后的小文档保存在数据库中。")],-1),E=n("p",null,"MongoDB 作为分布式存储，自然也具备了分布式的一般特性：",-1),A=n("strong",null,"高可用",-1),Q=n("strong",null,"复制",-1),U=n("strong",null,"高可用",-1),P=n("strong",null,"数据冗余",-1),J=n("strong",null,"自动故障转移",-1),G={href:"https://www.mongodb.com/zh-cn/docs/manual/replication/",target:"_blank",rel:"noopener noreferrer"},V=n("strong",null,"副本集",-1),H={href:"https://www.mongodb.com/zh-cn/docs/manual/replication/",target:"_blank",rel:"noopener noreferrer"},F=n("strong",null,"副本集",-1),Y=n("strong",null,"高性能",-1),K=n("strong",null,"分片",-1),X=n("strong",null,"水平扩容",-1),Z={href:"https://www.mongodb.com/zh-cn/docs/manual/core/zone-sharding/#std-label-zone-sharding",target:"_blank",rel:"noopener noreferrer"},nn=n("strong",null,"分片键",-1),en={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/glossary/#std-term-shard-key",target:"_blank",rel:"noopener noreferrer"},on=n("strong",null,"区域",-1),tn=s('<h3 id="【基础】mongodb-适合什么应用场景" tabindex="-1"><a class="header-anchor" href="#【基础】mongodb-适合什么应用场景" aria-hidden="true">#</a> 【基础】MongoDB 适合什么应用场景？</h3><details class="hint-container details"><summary>要点</summary><p><strong>MongoDB 的优势在于其数据模型和存储引擎的灵活性、架构的可扩展性以及对强大的索引支持。</strong></p><p>选用 MongoDB 应该充分考虑 MongoDB 的优势，结合实际项目的需求来决定：</p><ul><li>随着项目的发展，使用类 JSON 格式（BSON）保存数据是否满足项目需求？MongoDB 中的记录就是一个 BSON 文档，它是由键值对组成的数据结构，类似于 JSON 对象，是 MongoDB 中的基本数据单元。</li><li>是否需要大数据量的存储？是否需要快速水平扩展？MongoDB 支持分片集群，可以很方便地添加更多的节点（实例），让集群存储更多的数据，具备更强的性能。</li><li>是否需要更多类型索引来满足更多应用场景？MongoDB 支持多种类型的索引，包括单字段索引、复合索引、多键索引、哈希索引、文本索引、 地理位置索引等，每种类型的索引有不同的使用场合。</li><li>……</li></ul></details><h3 id="【基础】mongodb-vs-rdbm" tabindex="-1"><a class="header-anchor" href="#【基础】mongodb-vs-rdbm" aria-hidden="true">#</a> 【基础】MongoDB vs.RDBM？</h3><details class="hint-container details"><summary>要点</summary><p>MongoDB vs.RDBM：</p><table><thead><tr><th>特性</th><th>MongoDB</th><th>RDBMS</th></tr></thead><tbody><tr><td>数据模型</td><td>文档模型</td><td>关系型</td></tr><tr><td>CRUD 操作</td><td>MQL/SQL</td><td>SQL</td></tr><tr><td>高可用</td><td>复制集</td><td>集群模式</td></tr><tr><td>扩展性</td><td>支持分片</td><td>数据分区</td></tr><tr><td>扩繁方式</td><td>垂直扩展+水平扩展</td><td>垂直扩展</td></tr><tr><td>索引类型</td><td>B 树、全文索引、地理位置索引、多键索引、TTL 索引</td><td>B 树</td></tr><tr><td>数据容量</td><td>没有理论上限</td><td>千万、亿</td></tr></tbody></table></details><h3 id="【基础】mongodb-有哪些里程碑版本" tabindex="-1"><a class="header-anchor" href="#【基础】mongodb-有哪些里程碑版本" aria-hidden="true">#</a> 【基础】MongoDB 有哪些里程碑版本？</h3>',5),sn={class:"hint-container details"},an=s("<summary>要点</summary><p>MongoDB 是由 <strong>10gen</strong> 开发的 NoSQL 数据库，该公司由 Dwight Merriman 和 Eliot Horowitz 于 2007 年创立。2013 年，<strong>10gen 更名为 MongoDB Inc</strong>.。以更好地反映其对 MongoDB 数据库开发的关注。2017 年，MongoDB 公司上市。</p><p>里程碑版本：</p><ul><li><strong>1.0</strong> - 2009 年，MongoDB 发布第一版。</li><li><strong>1.6</strong> - 2010 年，引入分片机制（Sharding），支持水平扩展。</li><li><strong>2.2</strong> - 2012 年，引入了聚合管道（Pipeline）。</li><li><strong>2.4</strong> - 2013 年，引入了全文搜索。</li><li><strong>3.0</strong> - 2015 年，全面支持 <strong>WiredTiger</strong> 存储引擎，并支持可插拔存储引擎。</li><li><strong>4.0</strong> - 2019 年，支持 ACID 事务。</li><li><strong>4.2</strong> - 2020 年，支持分布式事务。</li></ul>",4),ln=n("p",null,"扩展阅读：",-1),rn={href:"https://www.infoq.cn/article/3d4suwkc2fvikykemnvw",target:"_blank",rel:"noopener noreferrer"},cn={href:"https://blog.csdn.net/JiekeXu/article/details/143670868",target:"_blank",rel:"noopener noreferrer"},dn=n("h2",{id:"mongodb-聚合",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#mongodb-聚合","aria-hidden":"true"},"#"),e(" MongoDB 聚合")],-1),pn={href:"https://www.mongodb.com/zh-cn/docs/manual/aggregation/",target:"_blank",rel:"noopener noreferrer"},un=n("h3",{id:"【基础】mongodb-支持哪些聚合方式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#【基础】mongodb-支持哪些聚合方式","aria-hidden":"true"},"#"),e(" 【基础】MongoDB 支持哪些聚合方式？")],-1),gn={class:"hint-container details"},hn=n("summary",null,"要点",-1),_n=n("p",null,"聚合操作处理多个文档并返回计算结果。可以使用聚合操作来：",-1),mn=n("ul",null,[n("li",null,"将多个文档中的值组合在一起。"),n("li",null,"对分组数据执行操作，返回单一结果。"),n("li",null,"分析一段时间内的数据变化。")],-1),bn=n("p",null,"若要执行聚合操作，可以使用：",-1),fn={href:"https://www.mongodb.com/zh-cn/docs/manual/aggregation/#std-label-aggregation-pipeline-intro",target:"_blank",rel:"noopener noreferrer"},kn={href:"https://www.mongodb.com/zh-cn/docs/manual/aggregation/#std-label-single-purpose-agg-methods",target:"_blank",rel:"noopener noreferrer"},wn={href:"https://www.mongodb.com/zh-cn/docs/manual/core/Map-Reduce/",target:"_blank",rel:"noopener noreferrer"},yn={href:"https://www.mongodb.com/zh-cn/docs/manual/core/Map-Reduce/#std-label-Map-Reduce",target:"_blank",rel:"noopener noreferrer"},xn=n("h3",{id:"【中级】什么是聚合管道",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#【中级】什么是聚合管道","aria-hidden":"true"},"#"),e(" 【中级】什么是聚合管道？")],-1),Bn={class:"hint-container details"},vn=n("summary",null,"要点",-1),Mn={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/operator/aggregation-pipeline/#std-label-aggregation-pipeline-operator-reference",target:"_blank",rel:"noopener noreferrer"},Dn=n("ul",null,[n("li",null,"每个阶段对输入文档执行一个操作。例如，某个阶段可以过滤文档、对文档进行分组并计算值。"),n("li",null,"从一个阶段输出的文档将传递到下一阶段。"),n("li",null,"一个聚合管道可以返回针对文档组的结果。例如，返回总值、平均值、最大值和最小值。")],-1),qn={href:"https://www.mongodb.com/zh-cn/docs/manual/tutorial/update-documents-with-aggregation-pipeline/#std-label-updates-agg-pipeline",target:"_blank",rel:"noopener noreferrer"},zn={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/method/db.collection.aggregate/#mongodb-method-db.collection.aggregate",target:"_blank",rel:"noopener noreferrer"},Sn=n("code",null,"db.collection.aggregate()",-1),Cn={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/operator/aggregation/merge/#mongodb-pipeline-pipe.-merge",target:"_blank",rel:"noopener noreferrer"},$n=n("code",null,"$merge",-1),Rn={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/operator/aggregation/out/#mongodb-pipeline-pipe.-out",target:"_blank",rel:"noopener noreferrer"},Tn=n("code",null,"$out",-1),Nn=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dunwu/images/master/snap/20200921092725.png",alt:"MongoDB 聚合",tabindex:"0",loading:"lazy"}),n("figcaption",null,"MongoDB 聚合")],-1),In={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/operator/aggregation-pipeline/#std-label-aggregation-pipeline-operator-reference",target:"_blank",rel:"noopener noreferrer"},Ln=n("li",null,"阶段不必为每个输入文档输出一个文档。例如，某些阶段可能会产生新文档或过滤掉现有文档。",-1),On={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/operator/aggregation/out/#mongodb-pipeline-pipe.-out",target:"_blank",rel:"noopener noreferrer"},jn=n("code",null,"$out",-1),Wn={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/operator/aggregation/merge/#mongodb-pipeline-pipe.-merge",target:"_blank",rel:"noopener noreferrer"},En=n("code",null,"$merge",-1),An={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/operator/aggregation/geoNear/#mongodb-pipeline-pipe.-geoNear",target:"_blank",rel:"noopener noreferrer"},Qn=n("code",null,"$geoNear",-1),Un={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/operator/aggregation/#std-label-aggregation-expressions",target:"_blank",rel:"noopener noreferrer"},Pn={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/operator/aggregation/#std-label-aggregation-expression-operators",target:"_blank",rel:"noopener noreferrer"},Jn=n("p",null,"MongoDB 聚合管道提供了许多等价于 SQL 中常见聚合语句的操作。 下表概述了常见的 SQL 聚合语句或函数和 MongoDB 聚合操作的映射表：",-1),Gn=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"RDBM 操作"),n("th",{style:{"text-align":"left"}},"MongoDB 聚合操作")])],-1),Vn=n("td",{style:{"text-align":"left"}},[n("code",null,"WHERE")],-1),Hn={style:{"text-align":"left"}},Fn={href:"https://docs.mongodb.com/manual/reference/operator/aggregation/match/#pipe._S_match",target:"_blank",rel:"noopener noreferrer"},Yn=n("code",null,"$match",-1),Kn=n("td",{style:{"text-align":"left"}},[n("code",null,"GROUP BY")],-1),Xn={style:{"text-align":"left"}},Zn={href:"https://docs.mongodb.com/manual/reference/operator/aggregation/group/#pipe._S_group",target:"_blank",rel:"noopener noreferrer"},ne=n("code",null,"$group",-1),ee=n("td",{style:{"text-align":"left"}},[n("code",null,"HAVING")],-1),oe={style:{"text-align":"left"}},te={href:"https://docs.mongodb.com/manual/reference/operator/aggregation/match/#pipe._S_match",target:"_blank",rel:"noopener noreferrer"},se=n("code",null,"$match",-1),ae=n("td",{style:{"text-align":"left"}},[n("code",null,"SELECT")],-1),le={style:{"text-align":"left"}},re={href:"https://docs.mongodb.com/manual/reference/operator/aggregation/project/#pipe._S_project",target:"_blank",rel:"noopener noreferrer"},ce=n("code",null,"$project",-1),ie=n("td",{style:{"text-align":"left"}},[n("code",null,"ORDER BY")],-1),de={style:{"text-align":"left"}},pe={href:"https://docs.mongodb.com/manual/reference/operator/aggregation/sort/#pipe._S_sort",target:"_blank",rel:"noopener noreferrer"},ue=n("code",null,"$sort",-1),ge=n("td",{style:{"text-align":"left"}},[n("code",null,"LIMIT")],-1),he={style:{"text-align":"left"}},_e={href:"https://docs.mongodb.com/manual/reference/operator/aggregation/limit/#pipe._S_limit",target:"_blank",rel:"noopener noreferrer"},me=n("code",null,"$limit",-1),be=n("td",{style:{"text-align":"left"}},[n("code",null,"SUM()")],-1),fe={style:{"text-align":"left"}},ke={href:"https://docs.mongodb.com/manual/reference/operator/aggregation/sum/#grp._S_sum",target:"_blank",rel:"noopener noreferrer"},we=n("code",null,"$sum",-1),ye=n("td",{style:{"text-align":"left"}},[n("code",null,"COUNT()")],-1),xe={style:{"text-align":"left"}},Be={href:"https://docs.mongodb.com/manual/reference/operator/aggregation/sum/#grp._S_sum",target:"_blank",rel:"noopener noreferrer"},ve=n("code",null,"$sum",-1),Me={href:"https://docs.mongodb.com/manual/reference/operator/aggregation/sortByCount/#pipe._S_sortByCount",target:"_blank",rel:"noopener noreferrer"},De=n("code",null,"$sortByCount",-1),qe=n("td",{style:{"text-align":"left"}},[n("code",null,"JOIN")],-1),ze={style:{"text-align":"left"}},Se={href:"https://docs.mongodb.com/manual/reference/operator/aggregation/lookup/#pipe._S_lookup",target:"_blank",rel:"noopener noreferrer"},Ce=n("code",null,"$lookup",-1),$e=n("td",{style:{"text-align":"left"}},[n("code",null,"SELECT INTO NEW_TABLE")],-1),Re={style:{"text-align":"left"}},Te={href:"https://docs.mongodb.com/manual/reference/operator/aggregation/out/#pipe._S_out",target:"_blank",rel:"noopener noreferrer"},Ne=n("code",null,"$out",-1),Ie=n("td",{style:{"text-align":"left"}},[n("code",null,"MERGE INTO TABLE")],-1),Le={style:{"text-align":"left"}},Oe={href:"https://docs.mongodb.com/manual/reference/operator/aggregation/merge/#pipe._S_merge",target:"_blank",rel:"noopener noreferrer"},je=n("code",null,"$merge",-1),We=n("td",{style:{"text-align":"left"}},[n("code",null,"UNION ALL")],-1),Ee={style:{"text-align":"left"}},Ae={href:"https://docs.mongodb.com/manual/reference/operator/aggregation/unionWith/#pipe._S_unionWith",target:"_blank",rel:"noopener noreferrer"},Qe=n("code",null,"$unionWith",-1),Ue=n("p",null,"下面通过一个示例来展示，如何通过 MongoDB 聚合计算总订单数量：",-1),Pe={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/operator/aggregation-pipeline/#std-label-aggregation-pipeline-operator-reference",target:"_blank",rel:"noopener noreferrer"},Je=s(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>db<span class="token punctuation">.</span>orders<span class="token punctuation">.</span><span class="token function">aggregate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token comment">// Stage 1: 根据 size 过滤订单</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">$match</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">size</span><span class="token operator">:</span> <span class="token string">&#39;medium&#39;</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// Stage 2: 按名称对剩余文档进行分组，并计算总数量</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">$group</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">_id</span><span class="token operator">:</span> <span class="token string">&#39;$name&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">totalQuantity</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">$sum</span><span class="token operator">:</span> <span class="token string">&#39;$quantity&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span>
  <span class="token comment">// 输出</span>
  <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">_id</span><span class="token operator">:</span> <span class="token string">&#39;Cheese&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">totalQuantity</span><span class="token operator">:</span> <span class="token number">50</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">_id</span><span class="token operator">:</span> <span class="token string">&#39;Vegan&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">totalQuantity</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">_id</span><span class="token operator">:</span> <span class="token string">&#39;Pepperoni&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">totalQuantity</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Ge={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/operator/aggregation/match/#mongodb-pipeline-pipe.-match",target:"_blank",rel:"noopener noreferrer"},Ve=n("code",null,"$match",-1),He=n("li",null,[e("从披萨订单文档过滤出 "),n("code",null,"size"),e(" 为 "),n("code",null,"medium"),e(" 的披萨。")],-1),Fe={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/operator/aggregation/group/#mongodb-pipeline-pipe.-group",target:"_blank",rel:"noopener noreferrer"},Ye=n("code",null,"$group",-1),Ke={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/operator/aggregation/group/#mongodb-pipeline-pipe.-group",target:"_blank",rel:"noopener noreferrer"},Xe=n("code",null,"$group",-1),Ze=n("li",null,[e("按披萨 "),n("code",null,"name"),e(" 对剩余文档进行分组。")],-1),no={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/operator/aggregation/sum/#mongodb-group-grp.-sum",target:"_blank",rel:"noopener noreferrer"},eo=n("code",null,"$sum",-1),oo=n("code",null,"name",-1),to=n("code",null,"quantity",-1),so=n("code",null,"totalQuantity",-1),ao=n("h3",{id:"【基础】rdbm-聚合-vs-mongodb-聚合",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#【基础】rdbm-聚合-vs-mongodb-聚合","aria-hidden":"true"},"#"),e(" 【基础】RDBM 聚合 vs. MongoDB 聚合？")],-1),lo={class:"hint-container details"},ro=n("summary",null,"要点",-1),co=n("p",null,"MongoDB pipeline 提供了许多等价于 SQL 中常见聚合语句的操作。 下表概述了常见的 SQL 聚合语句或函数和 MongoDB 聚合操作的映射表：",-1),io=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"RDBM 操作"),n("th",{style:{"text-align":"left"}},"MongoDB 聚合操作")])],-1),po=n("td",{style:{"text-align":"left"}},[n("code",null,"WHERE")],-1),uo={style:{"text-align":"left"}},go={href:"https://docs.mongodb.com/manual/reference/operator/aggregation/match/#pipe._S_match",target:"_blank",rel:"noopener noreferrer"},ho=n("code",null,"$match",-1),_o=n("td",{style:{"text-align":"left"}},[n("code",null,"GROUP BY")],-1),mo={style:{"text-align":"left"}},bo={href:"https://docs.mongodb.com/manual/reference/operator/aggregation/group/#pipe._S_group",target:"_blank",rel:"noopener noreferrer"},fo=n("code",null,"$group",-1),ko=n("td",{style:{"text-align":"left"}},[n("code",null,"HAVING")],-1),wo={style:{"text-align":"left"}},yo={href:"https://docs.mongodb.com/manual/reference/operator/aggregation/match/#pipe._S_match",target:"_blank",rel:"noopener noreferrer"},xo=n("code",null,"$match",-1),Bo=n("td",{style:{"text-align":"left"}},[n("code",null,"SELECT")],-1),vo={style:{"text-align":"left"}},Mo={href:"https://docs.mongodb.com/manual/reference/operator/aggregation/project/#pipe._S_project",target:"_blank",rel:"noopener noreferrer"},Do=n("code",null,"$project",-1),qo=n("td",{style:{"text-align":"left"}},[n("code",null,"ORDER BY")],-1),zo={style:{"text-align":"left"}},So={href:"https://docs.mongodb.com/manual/reference/operator/aggregation/sort/#pipe._S_sort",target:"_blank",rel:"noopener noreferrer"},Co=n("code",null,"$sort",-1),$o=n("td",{style:{"text-align":"left"}},[n("code",null,"LIMIT")],-1),Ro={style:{"text-align":"left"}},To={href:"https://docs.mongodb.com/manual/reference/operator/aggregation/limit/#pipe._S_limit",target:"_blank",rel:"noopener noreferrer"},No=n("code",null,"$limit",-1),Io=n("td",{style:{"text-align":"left"}},[n("code",null,"SUM()")],-1),Lo={style:{"text-align":"left"}},Oo={href:"https://docs.mongodb.com/manual/reference/operator/aggregation/sum/#grp._S_sum",target:"_blank",rel:"noopener noreferrer"},jo=n("code",null,"$sum",-1),Wo=n("td",{style:{"text-align":"left"}},[n("code",null,"COUNT()")],-1),Eo={style:{"text-align":"left"}},Ao={href:"https://docs.mongodb.com/manual/reference/operator/aggregation/sum/#grp._S_sum",target:"_blank",rel:"noopener noreferrer"},Qo=n("code",null,"$sum",-1),Uo={href:"https://docs.mongodb.com/manual/reference/operator/aggregation/sortByCount/#pipe._S_sortByCount",target:"_blank",rel:"noopener noreferrer"},Po=n("code",null,"$sortByCount",-1),Jo=n("td",{style:{"text-align":"left"}},[n("code",null,"JOIN")],-1),Go={style:{"text-align":"left"}},Vo={href:"https://docs.mongodb.com/manual/reference/operator/aggregation/lookup/#pipe._S_lookup",target:"_blank",rel:"noopener noreferrer"},Ho=n("code",null,"$lookup",-1),Fo=n("td",{style:{"text-align":"left"}},[n("code",null,"SELECT INTO NEW_TABLE")],-1),Yo={style:{"text-align":"left"}},Ko={href:"https://docs.mongodb.com/manual/reference/operator/aggregation/out/#pipe._S_out",target:"_blank",rel:"noopener noreferrer"},Xo=n("code",null,"$out",-1),Zo=n("td",{style:{"text-align":"left"}},[n("code",null,"MERGE INTO TABLE")],-1),nt={style:{"text-align":"left"}},et={href:"https://docs.mongodb.com/manual/reference/operator/aggregation/merge/#pipe._S_merge",target:"_blank",rel:"noopener noreferrer"},ot=n("code",null,"$merge",-1),tt=n("td",{style:{"text-align":"left"}},[n("code",null,"UNION ALL")],-1),st={style:{"text-align":"left"}},at={href:"https://docs.mongodb.com/manual/reference/operator/aggregation/unionWith/#pipe._S_unionWith",target:"_blank",rel:"noopener noreferrer"},lt=n("code",null,"$unionWith",-1),rt=n("p",null,"RDBM 聚合 vs. MongoDB 聚合：",-1),ct=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dunwu/images/master/snap/20200921200556.png",alt:"SQL 聚合 vs. MongoDB 聚合",tabindex:"0",loading:"lazy"}),n("figcaption",null,"SQL 聚合 vs. MongoDB 聚合")],-1),it=n("h3",{id:"【中级】mongodb-map-reduce-有什么用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#【中级】mongodb-map-reduce-有什么用","aria-hidden":"true"},"#"),e(" 【中级】MongoDB Map-Reduce 有什么用？")],-1),dt={class:"hint-container details"},pt=n("summary",null,"要点",-1),ut={href:"https://www.mongodb.com/zh-cn/docs/manual/core/Map-Reduce/#std-label-Map-Reduce",target:"_blank",rel:"noopener noreferrer"},gt={href:"https://docs.mongodb.com/manual/reference/command/mapReduce/#dbcmd.mapReduce",target:"_blank",rel:"noopener noreferrer"},ht=n("code",null,"mapReduce",-1),_t=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dunwu/images/master/snap/20200921155546.svg",alt:"Map-Reduce",tabindex:"0",loading:"lazy"}),n("figcaption",null,"Map-Reduce")],-1),mt=n("p",null,"在上面的操作中，MongoDB 将 map 阶段应用于每个输入 document（即 collection 中与查询条件匹配的 document）。 map 函数分发出多个键 - 值对。对于具有多个值的那些键，MongoDB 应用 reduce 阶段，该阶段收集并汇总聚合的数据。然后，MongoDB 将结果存储在 collection 中。可选地，reduce 函数的输出可以通过 finalize 函数来进一步汇总聚合结果。",-1),bt=n("p",null,"MongoDB 中的所有 Map-Reduce 函数都是 JavaScript，并在 mongod 进程中运行。 Map-Reduce 操作将单个 collection 的 document 作为输入，并且可以在开始 map 阶段之前执行任意排序和限制。 mapReduce 可以将 Map-Reduce 操作的结果作为 document 返回，也可以将结果写入 collection。",-1),ft=s('<h2 id="mongodb-存储" tabindex="-1"><a class="header-anchor" href="#mongodb-存储" aria-hidden="true">#</a> MongoDB 存储</h2><h3 id="【基础】mongodb-支持哪些数据类型" tabindex="-1"><a class="header-anchor" href="#【基础】mongodb-支持哪些数据类型" aria-hidden="true">#</a> 【基础】MongoDB 支持哪些数据类型？</h3><details class="hint-container details"><summary>要点</summary><p>Java 类似数据类型：</p><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">解析</th></tr></thead><tbody><tr><td style="text-align:left;"><code>String</code></td><td style="text-align:left;">字符串。存储数据常用的数据类型。在 <code>MongoDB</code> 中，<code>UTF-8</code> 编码的字符串才是合法的</td></tr><tr><td style="text-align:left;"><code>Integer</code></td><td style="text-align:left;">整型数值。用于存储数值。根据你所采用的服务器，可分为 32 位或 64 位</td></tr><tr><td style="text-align:left;"><code>Double</code></td><td style="text-align:left;">双精度浮点值。用于存储浮点值</td></tr><tr><td style="text-align:left;"><code>Boolean</code></td><td style="text-align:left;">布尔值。用于存储布尔值（真/假）</td></tr><tr><td style="text-align:left;"><code>Arrays</code></td><td style="text-align:left;">用于将数组或列表或多个值存储为一个键</td></tr><tr><td style="text-align:left;"><code>Datetime</code></td><td style="text-align:left;">记录文档修改或添加的具体时间</td></tr></tbody></table><p>MongoDB 特有数据类型：</p><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">解析</th></tr></thead><tbody><tr><td style="text-align:left;"><code>ObjectId</code></td><td style="text-align:left;">用于存储文档 <code>id</code>,<code>ObjectId</code>是基于分布式主键的实现<code>MongoDB</code>分片也可继续使用</td></tr><tr><td style="text-align:left;"><code>Min/Max Keys</code></td><td style="text-align:left;">将一个值与 BSON（二进制的 JSON）元素的最低值和最高值相对比</td></tr><tr><td style="text-align:left;"><code>Code</code></td><td style="text-align:left;">用于在文档中存储 <code>JavaScript</code>代码</td></tr><tr><td style="text-align:left;"><code>Regular Expression</code></td><td style="text-align:left;">用于在文档中存储正则表达式</td></tr><tr><td style="text-align:left;"><code>Binary Data</code></td><td style="text-align:left;">二进制数据。用于存储二进制数据</td></tr><tr><td style="text-align:left;"><code>Null</code></td><td style="text-align:left;">用于创建空值</td></tr><tr><td style="text-align:left;"><code>Object</code></td><td style="text-align:left;">用于内嵌文档</td></tr></tbody></table></details><h3 id="【基础】mongodb-的逻辑存储是什么" tabindex="-1"><a class="header-anchor" href="#【基础】mongodb-的逻辑存储是什么" aria-hidden="true">#</a> 【基础】MongoDB 的逻辑存储是什么？</h3>',4),kt={class:"hint-container details"},wt=n("summary",null,"要点",-1),yt={href:"https://www.mongodb.com/zh-cn/docs/manual/core/document/#std-label-bson-document-format",target:"_blank",rel:"noopener noreferrer"},xt={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/glossary/#std-term-JSON",target:"_blank",rel:"noopener noreferrer"},Bt={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/glossary/#std-term-_id",target:"_blank",rel:"noopener noreferrer"},vt=n("code",null,"_id",-1),Mt={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/glossary/#std-term-primary-key",target:"_blank",rel:"noopener noreferrer"},Dt=n("code",null,"_id",-1),qt=n("code",null,"_id",-1),zt={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/bson-types/#std-label-objectid",target:"_blank",rel:"noopener noreferrer"},St={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/glossary/#std-term-document",target:"_blank",rel:"noopener noreferrer"},Ct={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/glossary/#std-term-collection",target:"_blank",rel:"noopener noreferrer"},$t={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/glossary/#std-term-database",target:"_blank",rel:"noopener noreferrer"},Rt=n("p",null,"为了方便理解 MongoDB 概念，下面将 MongoDB 概念和 RDBM 概念进行对比：",-1),Tt=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"RDBM 概念"),n("th",{style:{"text-align":"left"}},"MongoDB 概念")])],-1),Nt=n("tr",null,[n("td",{style:{"text-align":"left"}},"database（数据库）"),n("td",{style:{"text-align":"left"}},"database（数据库）")],-1),It=n("tr",null,[n("td",{style:{"text-align":"left"}},"table（表）"),n("td",{style:{"text-align":"left"}},"collection（集合）")],-1),Lt=n("tr",null,[n("td",{style:{"text-align":"left"}},"row（行）"),n("td",{style:{"text-align":"left"}},"document（文档）")],-1),Ot=n("tr",null,[n("td",{style:{"text-align":"left"}},"column（列）"),n("td",{style:{"text-align":"left"}},"field（字段）")],-1),jt=n("tr",null,[n("td",{style:{"text-align":"left"}},"index（索引）"),n("td",{style:{"text-align":"left"}},"index（索引）")],-1),Wt=n("td",{style:{"text-align":"left"}},"primary key",-1),Et={style:{"text-align":"left"}},At={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/glossary/#std-term-_id",target:"_blank",rel:"noopener noreferrer"},Qt=n("code",null,"_id",-1),Ut=s(`<h4 id="文档" tabindex="-1"><a class="header-anchor" href="#文档" aria-hidden="true">#</a> 文档</h4><p>文档是 MongoDB 中的<strong>基本数据单元</strong>。<strong>文档是一组有序键值对（即 BSON）</strong>。MongoDB 的文档不需要设置相同的字段，并且相同的字段不需要相同的数据类型，这与关系型数据库有很大的区别，也是 MongoDB 非常突出的特点。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202503041024526.png" alt="MongoDB Document" tabindex="0" loading="lazy"><figcaption>MongoDB Document</figcaption></figure><p>需要注意的是：</p><ul><li><p><strong>文档中的键/值对是有序的</strong>。</p></li><li><p>文档的键是字符串。除了少数例外情况，<strong>键可以使用任意 UTF-8 字符</strong>。</p></li><li><p>文档中的值不仅可以是在双引号里面的字符串，还可以是其他几种数据类型（甚至可以是整个嵌入的文档）。</p></li><li><p><strong>MongoDB 区分类型和大小写</strong>。例如，下面这两对文档是不同的：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;count&quot;</span> <span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token property">&quot;count&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;5&quot;</span><span class="token punctuation">}</span>

<span class="token punctuation">{</span><span class="token property">&quot;count&quot;</span> <span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token property">&quot;Count&quot;</span> <span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>MongoDB 的文档不能有重复的键。例如，下面这个文档是不合法的</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;greeting&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;greeting&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Hello, MongoDB!&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p>文档键命名规范：</p><ul><li>键不能含有 <code>\\0</code> （空字符）。这个字符用来表示键的结尾。</li><li><code>.</code> 和 <code>$</code> 有特别的意义，只有在特定环境下才能使用。</li><li>以下划线 <code>_</code> 开头的键是保留的（不是严格要求的）。</li></ul><h4 id="集合" tabindex="-1"><a class="header-anchor" href="#集合" aria-hidden="true">#</a> 集合</h4><p>集合就是 MongoDB 文档组，类似于 RDBMS （关系数据库管理系统：Relational Database Management System) 中的表（Table）。集合存在于数据库中，集合没有固定的结构，这意味着你在对集合可以插入不同格式和类型的数据，但通常情况下我们插入集合的数据都会有一定的关联性。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202503041024137.png" alt="MongoDB Collection" tabindex="0" loading="lazy"><figcaption>MongoDB Collection</figcaption></figure><p>集合不需要事先创建，当第一个文档插入或者第一个索引创建时，如果该集合不存在，则会创建一个新的集合。使用 <code>.</code> 字符分隔不同命名空间的子集合是一种组织集合的惯例。例如，有一个具有博客功能的应用程序，可能包含名为 <code>blog.posts</code> 和名为 <code>blog.authors</code> 的集合。</p><p>合法的集合名：</p><ul><li>集合名称不能是空字符串（&quot;&quot;）。</li><li>集合名称不能含有 <code>\\0</code>（空字符），因为这个字符用于表示一个集合名称的结束。</li><li>集合名称不能以 <code>system.</code> 开头，该前缀是为内部集合保留的。例如，<code>system.users</code> 集合中保存着数据库的用户，<code>system.namespaces</code> 集合中保存着有关数据库所有集合的信息。</li><li>用户创建的集合名称中不应包含保留字符 <code>$</code>。许多驱动程序确实支持在集合名称中使用 <code>$</code>，这是因为某些由系统生成的集合会包含它，但除非你要访问的是这些集合之一，否则不应在名称中使用 <code>$</code> 字符。</li></ul><h4 id="数据库" tabindex="-1"><a class="header-anchor" href="#数据库" aria-hidden="true">#</a> 数据库</h4><p>数据库用于存储所有集合，而集合又用于存储所有文档。一个 MongoDB 中可以创建多个数据库，每一个数据库都有自己的集合和权限。MongoDB 的单个实例可以容纳多个独立的数据库，每一个都有自己的集合和权限，不同的数据库也放置在不同的文件中。</p><p>MongoDB 的默认数据库为&quot;db&quot;，该数据库存储在 data 目录中。</p><p><strong>&quot;show dbs&quot;</strong> 命令可以显示所有数据的列表。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ./mongo
MongoDBshell version: <span class="token number">3.0</span>.6
connecting to: <span class="token builtin class-name">test</span>
<span class="token operator">&gt;</span> show dbs
<span class="token builtin class-name">local</span>  <span class="token number">0</span>.078GB
<span class="token builtin class-name">test</span>   <span class="token number">0</span>.078GB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行 <strong>&quot;db&quot;</strong> 命令可以显示当前数据库对象或集合。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ./mongo
MongoDBshell version: <span class="token number">3.0</span>.6
connecting to: <span class="token builtin class-name">test</span>
<span class="token operator">&gt;</span> db
<span class="token builtin class-name">test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行&quot;use&quot;命令，可以连接到一个指定的数据库。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> use <span class="token builtin class-name">local</span>
switched to db <span class="token builtin class-name">local</span>
<span class="token operator">&gt;</span> db
<span class="token builtin class-name">local</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数据库按照名称进行标识的。数据库名称可以是任意 UTF-8 字符串，但有以下限制：</p><ul><li>数据库名称不能是空字符串（&quot;&quot;）。</li><li>数据库名称不能包含 <code>/</code>、<code>\\</code>、<code>.</code>、<code>&quot;</code>、<code>*</code>、<code>&lt;</code>、<code>&gt;</code>、<code>:</code>、<code>|</code>、<code>?</code>、<code>$</code>、单一的空格以及 <code>\\0</code>（空字符），基本上只能使用 ASCII 字母和数字。</li><li>数据库名称区分大小写。</li><li>数据库名称的长度限制为 64 字节。</li></ul><p>有一些数据库名是保留的，可以直接访问这些有特殊作用的数据库。</p><ul><li><strong>admin</strong>：admin 数据库会在身份验证和授权时被使用。此外，某些管理操作需要访问此数据库。</li><li><strong>local</strong>：这个数据永远不会被复制，可以用来存储限于本地单台服务器的任意集合</li><li><strong>config</strong>：当 Mongo 用于分片设置时，config 数据库在内部使用，用于保存分片的相关信息。</li></ul><h4 id="元数据" tabindex="-1"><a class="header-anchor" href="#元数据" aria-hidden="true">#</a> 元数据</h4><p>数据库的信息是存储在集合中。它们使用了系统的命名空间：<code>dbname.system.*</code></p><p>在 MongoDB 数据库中命名空间 <code>&lt;dbname&gt;.system.*</code> 是包含多种系统信息的特殊集合 (Collection)，如下：</p><table><thead><tr><th style="text-align:left;">集合命名空间</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>dbname.system.namespaces</code></td><td style="text-align:left;">列出所有名字空间。</td></tr><tr><td style="text-align:left;"><code>dbname.system.indexes</code></td><td style="text-align:left;">列出所有索引。</td></tr><tr><td style="text-align:left;"><code>dbname.system.profile</code></td><td style="text-align:left;">包含数据库概要 (profile) 信息。</td></tr><tr><td style="text-align:left;"><code>dbname.system.users</code></td><td style="text-align:left;">列出所有可访问数据库的用户。</td></tr><tr><td style="text-align:left;"><code>dbname.local.sources</code></td><td style="text-align:left;">包含复制对端（slave）的服务器信息和状态。</td></tr></tbody></table><p>对于修改系统集合中的对象有如下限制。</p><p>在 <code>system.indexes</code> 插入数据，可以创建索引。但除此之外该表信息是不可变的（特殊的 drop index 命令将自动更新相关信息）。<code>system.users</code> 是可修改的。<code>system.profile</code> 是可删除的。</p>`,32),Pt=n("h3",{id:"【中级】mongodb-支持哪些存储引擎",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#【中级】mongodb-支持哪些存储引擎","aria-hidden":"true"},"#"),e(" 【中级】MongoDB 支持哪些存储引擎？")],-1),Jt={class:"hint-container details"},Gt=n("summary",null,"要点",-1),Vt=n("p",null,"存储引擎（Storage Engine）是数据库的核心组件，负责管理数据在内存和磁盘中的存储方式。",-1),Ht=n("p",null,[e("与 MySQL 一样，MongoDB 采用的也是 "),n("strong",null,"插件式的存储引擎架构"),e(" ，支持不同类型的存储引擎，不同的存储引擎解决不同场景的问题。在创建数据库或集合时，可以指定存储引擎。")],-1),Ft=n("blockquote",null,[n("p",null,"插件式的存储引擎架构可以实现 Server 层和存储引擎层的解耦，可以支持多种存储引擎，如 MySQL 既可以支持 B-Tree 结构的 InnoDB 存储引擎，还可以支持 LSM 结构的 RocksDB 存储引擎。")],-1),Yt=n("p",null,"在存储引擎刚出来的时候，默认是使用 MMAPV1 存储引擎，MongoDB4.x 版本不再支持 MMAPv1 存储引擎。",-1),Kt=n("p",null,"现在主要有下面这两种存储引擎：",-1),Xt=n("strong",null,"WiredTiger 存储引擎",-1),Zt={href:"https://www.mongodb.com/docs/manual/core/wiredtiger/",target:"_blank",rel:"noopener noreferrer"},ns=n("strong",null,"In-Memory 存储引擎",-1),es={href:"https://www.mongodb.com/docs/manual/core/inmemory/",target:"_blank",rel:"noopener noreferrer"},os=n("p",null,[e("此外，MongoDB 3.0 提供了 "),n("strong",null,"可插拔的存储引擎 API"),e(" ，允许第三方为 MongoDB 开发存储引擎，这点和 MySQL 也比较类似。")],-1),ts=n("h3",{id:"【中级】mongodb-支持哪些亚索算法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#【中级】mongodb-支持哪些亚索算法","aria-hidden":"true"},"#"),e(" 【中级】MongoDB 支持哪些亚索算法？")],-1),ss={class:"hint-container details"},as=n("summary",null,"要点",-1),ls=n("p",null,"借助 WiredTiger 存储引擎（ MongoDB 3.2 后的默认存储引擎），MongoDB 支持对所有集合和索引进行压缩。压缩以额外的 CPU 为代价最大限度地减少存储使用。",-1),rs={href:"https://github.com/google/snappy",target:"_blank",rel:"noopener noreferrer"},cs=n("p",null,"除了 Snappy 之外，对于集合还有下面这些压缩算法：",-1),is={href:"https://github.com/madler/zlib",target:"_blank",rel:"noopener noreferrer"},ds={href:"https://github.com/facebook/zstd",target:"_blank",rel:"noopener noreferrer"},ps=n("p",null,"WiredTiger 日志也会被压缩，默认使用的也是 Snappy 压缩算法。如果日志记录小于或等于 128 字节，WiredTiger 不会压缩该记录。",-1),us=n("h3",{id:"【中级】wiredtiger-基于-lsm-tree-还是-b-tree",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#【中级】wiredtiger-基于-lsm-tree-还是-b-tree","aria-hidden":"true"},"#"),e(" 【中级】WiredTiger 基于 LSM Tree 还是 B+ Tree？")],-1),gs={class:"hint-container details"},hs=n("summary",null,"要点",-1),_s=n("p",null,"目前绝大部分流行的数据库存储引擎都是基于 B/B+ Tree 或者 LSM(Log Structured Merge) Tree 来实现的。对于 NoSQL 数据库来说，绝大部分（比如 HBase、Cassandra、RocksDB）都是基于 LSM 树，MongoDB 不太一样。",-1),ms=n("p",null,"上面也说了，自 MongoDB 3.2 以后，默认的存储引擎为 WiredTiger 存储引擎。在 WiredTiger 引擎官网上，我们发现 WiredTiger 使用的是 B+ 树作为其存储结构：",-1),bs=n("div",{class:"language-text line-numbers-mode","data-ext":"text"},[n("pre",{class:"language-text"},[n("code",null,`WiredTiger maintains a table's data in memory using a data structure called a B-Tree ( B+ Tree to be specific), referring to the nodes of a B-Tree as pages. Internal pages carry only keys. The leaf pages store both keys and values.
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),fs={href:"https://source.wiredtiger.com/3.1.0/lsm.html",target:"_blank",rel:"noopener noreferrer"},ks={href:"https://zhuanlan.zhihu.com/p/519658576",target:"_blank",rel:"noopener noreferrer"},ws=s('<p>使用 B+ 树时，WiredTiger 以 <strong>page</strong> 为基本单位往磁盘读写数据。B+ 树的每个节点为一个 page，共有三种类型的 page：</p><ul><li><strong>root page（根节点）</strong>：B+ 树的根节点。</li><li><strong>internal page（内部节点）</strong>：不实际存储数据的中间索引节点。</li><li><strong>leaf page（叶子节点）</strong>：真正存储数据的叶子节点，包含一个页头（page header）、块头（block header）和真正的数据（key/value），其中页头定义了页的类型、页中实际载荷数据的大小、页中记录条数等信息；块头定义了此页的 checksum、块在磁盘上的寻址位置等信息。</li></ul><p>其整体结构如下图所示：</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202503041050392.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',4),ys={href:"https://mongoing.com/archives/category/wiredtiger",target:"_blank",rel:"noopener noreferrer"},xs=n("h2",{id:"mongodb-索引",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#mongodb-索引","aria-hidden":"true"},"#"),e(" MongoDB 索引")],-1),Bs=n("p",null,"扩展阅读：",-1),vs={href:"https://www.mongodb.com/zh-cn/docs/manual/indexes/",target:"_blank",rel:"noopener noreferrer"},Ms={href:"https://zhuanlan.zhihu.com/p/77971681",target:"_blank",rel:"noopener noreferrer"},Ds=n("h3",{id:"【基础】mongodb-索引有什么用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#【基础】mongodb-索引有什么用","aria-hidden":"true"},"#"),e(" 【基础】MongoDB 索引有什么用？")],-1),qs={class:"hint-container details"},zs=n("summary",null,"要点",-1),Ss=n("p",null,[n("strong",null,"MongoDB 在 collection 数据级别上定义索引"),e("。")],-1),Cs=n("p",null,[e("索引通常能够极大的提高查询的效率。如果"),n("strong",null,"没有索引"),e("，MongoDB 在读取数据时"),n("strong",null,"必须扫描 collection 中的每个 document"),e(" 并选取那些符合查询条件的记录。这种扫描全集合的查询是非常低效的，特别是在处理大量的数据时。查询可能要花费几十秒甚至几分钟，这种性能开销是不可接受的。索引可提高查询性能，但"),n("strong",null,"添加索引会影响写入操作的性能"),e("。对于写入读取率高的集合，由于每次插入操作都必须同时更新所有索引，因此会带来较高的索引成本。")],-1),$s={href:"https://en.wikipedia.org/wiki/B-tree",target:"_blank",rel:"noopener noreferrer"},Rs=n("strong",null,"MongoDB 还可使用索引中的顺序来返回排序后的结果",-1),Ts=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dunwu/images/master/snap/20200921210621.svg",alt:"MongoDB 索引",tabindex:"0",loading:"lazy"}),n("figcaption",null,"MongoDB 索引")],-1),Ns=n("h3",{id:"【基础】mongodb-支持哪些类型的索引",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#【基础】mongodb-支持哪些类型的索引","aria-hidden":"true"},"#"),e(" 【基础】MongoDB 支持哪些类型的索引？")],-1),Is={class:"hint-container details"},Ls=n("summary",null,"要点",-1),Os=n("p",null,"MongoDB 支持多种类型的索引，适用于不同的场景。",-1),js=n("h4",{id:"单字段索引",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#单字段索引","aria-hidden":"true"},"#"),e(" 单字段索引")],-1),Ws=n("p",null,"单个字段索引收集集合内每个文档中单个字段的数据，并对其排序。",-1),Es=n("p",null,[e("下图显示了单个字段 "),n("code",null,"score"),e(" 上的一个索引：")],-1),As=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dunwu/images/master/snap/202503052211281.svg",alt:"单字段索引",tabindex:"0",loading:"lazy"}),n("figcaption",null,"单字段索引")],-1),Qs={href:"https://www.mongodb.com/zh-cn/docs/manual/core/indexes/index-types/index-single/#std-label-indexes-single-field",target:"_blank",rel:"noopener noreferrer"},Us=s('<h4 id="复合索引" tabindex="-1"><a class="header-anchor" href="#复合索引" aria-hidden="true">#</a> 复合索引</h4><p>复合索引从集合中每个文档的两个或多个字段收集数据并对其排序。数据先按索引中的第一个字段分组，再按每个后续字段分组。</p><p>例如，下图显示了一个复合索引，其中文档首先按 <code>userid</code> 分组并以升序（按字母顺序）排序。然后，每个 <code>userid</code> 的 <code>scores</code> 按降序排序：</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202503052213721.svg" alt="复合索引" tabindex="0" loading="lazy"><figcaption>复合索引</figcaption></figure>',4),Ps={href:"https://www.mongodb.com/zh-cn/docs/manual/core/indexes/index-types/index-compound/#std-label-index-type-compound",target:"_blank",rel:"noopener noreferrer"},Js=n("h4",{id:"多键索引",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#多键索引","aria-hidden":"true"},"#"),e(" 多键索引")],-1),Gs=n("p",null,"多键索引收集数组中存储的数据并进行排序。",-1),Vs=n("p",null,"无需显式指定多键类型。对包含数组值的字段创建索引时，MongoDB 会自动将该索引设为多键索引。",-1),Hs=n("p",null,[e("下图显示了 "),n("code",null,"addr.zip"),e(" 字段的多键索引：")],-1),Fs=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dunwu/images/master/snap/202503052214522.svg",alt:"多键索引",tabindex:"0",loading:"lazy"}),n("figcaption",null,"多键索引")],-1),Ys={href:"https://www.mongodb.com/zh-cn/docs/manual/core/indexes/index-types/index-multikey/#std-label-index-type-multikey",target:"_blank",rel:"noopener noreferrer"},Ks=n("h4",{id:"文本索引",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#文本索引","aria-hidden":"true"},"#"),e(" 文本索引")],-1),Xs=n("p",null,"文本索引支持对包含字符串内容的字段进行文本搜索查询。",-1),Zs={href:"https://www.mongodb.com/zh-cn/docs/manual/core/indexes/index-types/index-text/#std-label-index-type-text",target:"_blank",rel:"noopener noreferrer"},na=n("h4",{id:"地理空间索引",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#地理空间索引","aria-hidden":"true"},"#"),e(" 地理空间索引")],-1),ea=n("p",null,"地理空间索引可提高对地理空间坐标数据进行查询的性能。",-1),oa=n("p",null,"MongoDB 提供两种类型的地理空间索引：",-1),ta={href:"https://www.mongodb.com/zh-cn/docs/manual/core/indexes/index-types/geospatial/2d/#std-label-2d-index",target:"_blank",rel:"noopener noreferrer"},sa={href:"https://www.mongodb.com/zh-cn/docs/manual/core/indexes/index-types/geospatial/2dsphere/#std-label-2dsphere-index",target:"_blank",rel:"noopener noreferrer"},aa={href:"https://www.mongodb.com/zh-cn/docs/manual/core/indexes/index-types/index-geospatial/#std-label-geospatial-index",target:"_blank",rel:"noopener noreferrer"},la=n("h4",{id:"哈希索引",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#哈希索引","aria-hidden":"true"},"#"),e(" 哈希索引")],-1),ra={href:"https://www.mongodb.com/zh-cn/docs/manual/core/hashed-sharding/#std-label-sharding-hashed-sharding",target:"_blank",rel:"noopener noreferrer"},ca={href:"https://www.mongodb.com/zh-cn/docs/manual/core/indexes/index-types/index-hashed/#std-label-index-type-hashed",target:"_blank",rel:"noopener noreferrer"},ia=s(`<h3 id="【基础】复合索引中字段的顺序有影响吗" tabindex="-1"><a class="header-anchor" href="#【基础】复合索引中字段的顺序有影响吗" aria-hidden="true">#</a> 【基础】复合索引中字段的顺序有影响吗？</h3><details class="hint-container details"><summary>要点</summary><p><strong>排序键的排列顺序必须与其在索引中出现的顺序相同</strong>。例如，索引键模式 <code>{ a: 1, b: 1 }</code> 可以支持对 <code>{ a: 1, b: 1 }</code> 排序，但不支持对 <code>{ b: 1, a: 1 }</code> 排序。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202503041116883.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在复合索引中，按照何种方式排序，决定了该索引在查询中是否能被应用到。</p><p>走复合索引的排序：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>db<span class="token punctuation">.</span>s2<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort<span class="token punctuation">(</span>{<span class="token string">&quot;userid&quot;</span>: <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;score&quot;</span>: <span class="token operator">-</span><span class="token number">1</span>}<span class="token punctuation">)</span>
db<span class="token punctuation">.</span>s2<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort<span class="token punctuation">(</span>{<span class="token string">&quot;userid&quot;</span>: <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;score&quot;</span>: <span class="token number">1</span>}<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>不走复合索引的排序：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>db<span class="token punctuation">.</span>s2<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort<span class="token punctuation">(</span>{<span class="token string">&quot;userid&quot;</span>: <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;score&quot;</span>: <span class="token number">1</span>}<span class="token punctuation">)</span>
db<span class="token punctuation">.</span>s2<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort<span class="token punctuation">(</span>{<span class="token string">&quot;userid&quot;</span>: <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;score&quot;</span>: <span class="token operator">-</span><span class="token number">1</span>}<span class="token punctuation">)</span>
db<span class="token punctuation">.</span>s2<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort<span class="token punctuation">(</span>{<span class="token string">&quot;score&quot;</span>: <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;userid&quot;</span>: <span class="token operator">-</span><span class="token number">1</span>}<span class="token punctuation">)</span>
db<span class="token punctuation">.</span>s2<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort<span class="token punctuation">(</span>{<span class="token string">&quot;score&quot;</span>: <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;userid&quot;</span>: <span class="token number">1</span>}<span class="token punctuation">)</span>
db<span class="token punctuation">.</span>s2<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort<span class="token punctuation">(</span>{<span class="token string">&quot;score&quot;</span>: <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;userid&quot;</span>: <span class="token operator">-</span><span class="token number">1</span>}<span class="token punctuation">)</span>
db<span class="token punctuation">.</span>s2<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort<span class="token punctuation">(</span>{<span class="token string">&quot;score&quot;</span>: <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;userid&quot;</span>: <span class="token number">1</span>}<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以通过 explain 进行分析：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>db<span class="token punctuation">.</span>s2<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort<span class="token punctuation">(</span>{<span class="token string">&quot;score&quot;</span>: <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;userid&quot;</span>: <span class="token number">1</span>}<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">explain</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>MongoDB 的复合索引遵循左前缀原则</strong>：拥有多个键的索引，可以同时得到所有这些键的前缀组成的索引，但不包括除左前缀之外的其他子集。比如说，有一个类似 <code>{a: 1, b: 1, c: 1, ..., z: 1}</code> 这样的索引，那么实际上也等于有了 <code>{a: 1}</code>、<code>{a: 1, b: 1}</code>、<code>{a: 1, b: 1, c: 1}</code> 等一系列索引，但是不会有 <code>{b: 1}</code> 这样的非左前缀的索引。</p></details><h3 id="【中级】什么是覆盖索引查询" tabindex="-1"><a class="header-anchor" href="#【中级】什么是覆盖索引查询" aria-hidden="true">#</a> 【中级】什么是覆盖索引查询？</h3><details class="hint-container details"><summary>要点</summary><p>根据官方文档介绍，覆盖查询是以下的查询：</p><ul><li>所有的查询字段是索引的一部分。</li><li>结果中返回的所有字段都在同一索引中。</li><li>查询中没有字段等于<code>null</code>。</li></ul><p>由于所有出现在查询中的字段是索引的一部分， MongoDB 无需在整个数据文档中检索匹配查询条件和返回使用相同索引的查询结果。因为索引存在于内存中，从索引中获取数据比通过扫描文档读取数据要快得多。</p><p>举个例子：我们有如下 <code>users</code> 集合：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
   <span class="token property">&quot;_id&quot;</span><span class="token operator">:</span> ObjectId(<span class="token string">&quot;53402597d852426020000002&quot;</span>)<span class="token punctuation">,</span>
   <span class="token property">&quot;contact&quot;</span><span class="token operator">:</span> <span class="token string">&quot;987654321&quot;</span><span class="token punctuation">,</span>
   <span class="token property">&quot;dob&quot;</span><span class="token operator">:</span> <span class="token string">&quot;01-01-1991&quot;</span><span class="token punctuation">,</span>
   <span class="token property">&quot;gender&quot;</span><span class="token operator">:</span> <span class="token string">&quot;M&quot;</span><span class="token punctuation">,</span>
   <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Tom Benzamin&quot;</span><span class="token punctuation">,</span>
   <span class="token property">&quot;user_name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;tombenzamin&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在 <code>users</code> 集合中创建联合索引，字段为 <code>gender</code> 和 <code>user_name</code> :</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>db<span class="token punctuation">.</span>users<span class="token punctuation">.</span>ensureIndex<span class="token punctuation">(</span>{gender:<span class="token number">1</span><span class="token punctuation">,</span>user_name:<span class="token number">1</span>}<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在，该索引会覆盖以下查询：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>db<span class="token punctuation">.</span>users<span class="token punctuation">.</span>find<span class="token punctuation">(</span>{gender:<span class="token string">&quot;M&quot;</span>}<span class="token punctuation">,</span>{user_name:<span class="token number">1</span><span class="token punctuation">,</span>_id:<span class="token number">0</span>}<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>为了让指定的索引覆盖查询，必须显式地指定 <code>_id: 0</code> 来从结果中排除 <code>_id</code> 字段，因为索引不包括 <code>_id</code> 字段。</p></details><h2 id="mongodb-事务" tabindex="-1"><a class="header-anchor" href="#mongodb-事务" aria-hidden="true">#</a> MongoDB 事务</h2>`,5),da={href:"https://www.mongodb.com/zh-cn/docs/manual/core/transactions/",target:"_blank",rel:"noopener noreferrer"},pa=n("p",null,"扩展阅读：",-1),ua={href:"https://www.mongodb.com/zh-cn/docs/manual/core/transactions/",target:"_blank",rel:"noopener noreferrer"},ga={href:"https://mongoing.com/archives/82187",target:"_blank",rel:"noopener noreferrer"},ha={href:"https://developer.aliyun.com/article/782494",target:"_blank",rel:"noopener noreferrer"},_a=n("h3",{id:"【基础】mongodb-是否支持事务",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#【基础】mongodb-是否支持事务","aria-hidden":"true"},"#"),e(" 【基础】MongoDB 是否支持事务？")],-1),ma={class:"hint-container details"},ba=n("summary",null,"要点",-1),fa=n("p",null,[e("在 MongoDB 中，"),n("strong",null,"对单个文档的操作具有原子性"),e("。由于可以使用嵌入式文档和数组来捕获单个文档结构中数据之间的关系，而无需跨多个文档和集合进行标准化，因此这种单文档原子性消除了许多实际使用案例使用分布式事务的必要性。")],-1),ka=n("p",null,"对于需要对多文档（在单个或多个集合中）的读写操作具有原子性的情况，MongoDB 支持多文档事务。利用分布式事务，可以跨多个操作、集合、数据库、文档和分片使用事务。",-1),wa=n("p",null,"分布式事务具有原子性：",-1),ya=n("li",null,"事务要么应用所有数据更改，要么回滚更改。",-1),xa=n("li",null,"在事务进行提交前，在事务中所做的数据更改在事务外不可见。",-1),Ba={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/read-concern-local/#mongodb-readconcern-readconcern.-local-",target:"_blank",rel:"noopener noreferrer"},va=n("code",null,'"local"',-1),Ma=n("li",null,"事务中止后，在事务中所做的所有数据更改会被丢弃且不会变得可见。例如，如果事务中的任何操作失败，事务就会中止，事务中所做的所有数据更改将被丢弃且不会变得可见。",-1),Da={href:"https://www.mongodb.com/zh-cn/docs/manual/data-modeling/concepts/embedding-vs-references/#std-label-data-modeling-embedding",target:"_blank",rel:"noopener noreferrer"},qa=n("h3",{id:"【中级】mongodb-事务支持哪些操作",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#【中级】mongodb-事务支持哪些操作","aria-hidden":"true"},"#"),e(" 【中级】MongoDB 事务支持哪些操作？")],-1),za={class:"hint-container details"},Sa=n("summary",null,"要点",-1),Ca=n("p",null,"可以跨多个操作、集合、数据库、文档和分片使用分布式事务。",-1),$a=n("p",null,"对于事务：",-1),Ra=n("ul",null,[n("li",null,"可以在事务中创建集合和索引。"),n("li",null,"事务中使用的集合可以位于不同的数据库中。")],-1),Ta=n("h4",{id:"在事务中创建集合和索引",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#在事务中创建集合和索引","aria-hidden":"true"},"#"),e(" 在事务中创建集合和索引")],-1),Na={href:"https://www.mongodb.com/zh-cn/docs/manual/core/transactions/#std-label-transactions",target:"_blank",rel:"noopener noreferrer"},Ia=n("ul",null,[n("li",null,"创建集合。"),n("li",null,"在先前同一事务中创建的新空集合上创建索引。")],-1),La=n("p",null,"在事务中创建集合时：",-1),Oa={href:"https://www.mongodb.com/zh-cn/docs/manual/core/transactions-operations/#std-label-transactions-operations-ddl-implicit",target:"_blank",rel:"noopener noreferrer"},ja={href:"https://www.mongodb.com/zh-cn/docs/manual/core/transactions-operations/#std-label-transactions-operations-ddl-implicit",target:"_blank",rel:"noopener noreferrer"},Wa=n("code",null,"upsert: true",-1),Ea={href:"https://www.mongodb.com/zh-cn/docs/manual/core/transactions-operations/#std-label-transactions-operations-ddl-implicit",target:"_blank",rel:"noopener noreferrer"},Aa={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/command/create/#mongodb-dbcommand-dbcmd.create",target:"_blank",rel:"noopener noreferrer"},Qa=n("code",null,"create",-1),Ua={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/command/create/#mongodb-dbcommand-dbcmd.create",target:"_blank",rel:"noopener noreferrer"},Pa=n("code",null,"db.createCollection()",-1),Ja={href:"https://www.mongodb.com/zh-cn/docs/manual/core/transactions-operations/#std-label-transactions-operations-ddl-explicit",target:"_blank",rel:"noopener noreferrer"},Ga={href:"https://www.mongodb.com/zh-cn/docs/manual/core/transactions-operations/#std-label-transactions-operations-ddl-explicit",target:"_blank",rel:"noopener noreferrer"},Va=n("ul",null,[n("li",null,"不存在的集合。集合作为操作的一部分创建。"),n("li",null,"先前在同一事务中创建的新空集合。")],-1),Ha=n("h4",{id:"计数操作",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#计数操作","aria-hidden":"true"},"#"),e(" 计数操作")],-1),Fa={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/operator/aggregation/count/#mongodb-pipeline-pipe.-count",target:"_blank",rel:"noopener noreferrer"},Ya=n("code",null,"$count",-1),Ka={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/operator/aggregation/group/#mongodb-pipeline-pipe.-group",target:"_blank",rel:"noopener noreferrer"},Xa=n("code",null,"$group",-1),Za={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/operator/aggregation/sum/#mongodb-group-grp.-sum",target:"_blank",rel:"noopener noreferrer"},nl=n("code",null,"$sum",-1),el=n("code",null,"countDocuments(filter, options)",-1),ol={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/operator/aggregation/group/#mongodb-pipeline-pipe.-group",target:"_blank",rel:"noopener noreferrer"},tl=n("code",null,"$group",-1),sl={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/operator/aggregation/sum/#mongodb-group-grp.-sum",target:"_blank",rel:"noopener noreferrer"},al=n("code",null,"$sum",-1),ll={href:"https://www.mongodb.com/zh-cn/docs/mongodb-shell/#mongodb-binary-bin.mongosh",target:"_blank",rel:"noopener noreferrer"},rl=n("code",null,"mongosh",-1),cl={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/method/db.collection.countDocuments/#mongodb-method-db.collection.countDocuments",target:"_blank",rel:"noopener noreferrer"},il=n("code",null,"db.collection.countDocuments()",-1),dl={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/operator/aggregation/group/#mongodb-pipeline-pipe.-group",target:"_blank",rel:"noopener noreferrer"},pl=n("code",null,"$group",-1),ul={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/operator/aggregation/sum/#mongodb-group-grp.-sum",target:"_blank",rel:"noopener noreferrer"},gl=n("code",null,"$sum",-1),hl=n("h4",{id:"去重操作",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#去重操作","aria-hidden":"true"},"#"),e(" 去重操作")],-1),_l=n("p",null,"如要在事务中执行不同的操作：",-1),ml={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/method/db.collection.distinct/#mongodb-method-db.collection.distinct",target:"_blank",rel:"noopener noreferrer"},bl=n("code",null,"db.collection.distinct()",-1),fl={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/command/distinct/#mongodb-dbcommand-dbcmd.distinct",target:"_blank",rel:"noopener noreferrer"},kl=n("code",null,"distinct",-1),wl={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/operator/aggregation/group/#mongodb-pipeline-pipe.-group",target:"_blank",rel:"noopener noreferrer"},yl=n("code",null,"$group",-1),xl={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/method/db.collection.distinct/#mongodb-method-db.collection.distinct",target:"_blank",rel:"noopener noreferrer"},Bl=n("code",null,"db.collection.distinct()",-1),vl={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/command/distinct/#mongodb-dbcommand-dbcmd.distinct",target:"_blank",rel:"noopener noreferrer"},Ml=n("code",null,"distinct",-1),Dl={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/operator/aggregation/group/#mongodb-pipeline-pipe.-group",target:"_blank",rel:"noopener noreferrer"},ql=n("code",null,"$group",-1),zl=s(`<ul><li><p>不使用 <code>db.coll.distinct(&quot;x&quot;)</code>，而是使用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>db<span class="token punctuation">.</span>coll<span class="token punctuation">.</span><span class="token function">aggregate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">$group</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">_id</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token literal-property property">distinctValues</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">$addToSet</span><span class="token operator">:</span> <span class="token string">&#39;$x&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">$project</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">_id</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>不使用 <code>db.coll.distinct(&quot;x&quot;, { status: &quot;A&quot; })</code>，而是使用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>db<span class="token punctuation">.</span>coll<span class="token punctuation">.</span><span class="token function">aggregate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">$match</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token string">&#39;A&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">$group</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">_id</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token literal-property property">distinctValues</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">$addToSet</span><span class="token operator">:</span> <span class="token string">&#39;$x&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">$project</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">_id</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>管道返回一个指向文档的游标：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span> <span class="token string-property property">&quot;distinctValues&quot;</span> <span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>迭代游标以访问结果文档。</p>`,4),Sl=n("h4",{id:"信息操作",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#信息操作","aria-hidden":"true"},"#"),e(" 信息操作")],-1),Cl={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/command/hello/#mongodb-dbcommand-dbcmd.hello",target:"_blank",rel:"noopener noreferrer"},$l=n("code",null,"hello",-1),Rl={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/command/buildInfo/#mongodb-dbcommand-dbcmd.buildInfo",target:"_blank",rel:"noopener noreferrer"},Tl=n("code",null,"buildInfo",-1),Nl={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/command/connectionStatus/#mongodb-dbcommand-dbcmd.connectionStatus",target:"_blank",rel:"noopener noreferrer"},Il=n("code",null,"connectionStatus",-1),Ll=n("h4",{id:"事务操作限制",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#事务操作限制","aria-hidden":"true"},"#"),e(" 事务操作限制")],-1),Ol=n("p",null,"事务中不允许执行以下操作：",-1),jl=n("li",null,"在跨分片写事务中创建新集合。例如，如果在一个分片中写入一个现有集合，并在另一个分片中隐式创建一个集合，那么 MongoDB 将无法在同一事务中执行这两项操作。",-1),Wl={href:"https://www.mongodb.com/zh-cn/docs/manual/core/transactions-operations/#std-label-transactions-operations-ddl-explicit",target:"_blank",rel:"noopener noreferrer"},El=n("code",null,'"local"',-1),Al={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/method/db.createCollection/#mongodb-method-db.createCollection",target:"_blank",rel:"noopener noreferrer"},Ql={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/method/db.collection.createIndexes/#mongodb-method-db.collection.createIndexes",target:"_blank",rel:"noopener noreferrer"},Ul=n("code",null,"db.createCollection()",-1),Pl={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/method/db.collection.createIndex/#mongodb-method-db.collection.createIndex",target:"_blank",rel:"noopener noreferrer"},Jl=n("code",null,"db.collection.createIndexes()",-1),Gl={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/read-concern-local/#mongodb-readconcern-readconcern.-local-",target:"_blank",rel:"noopener noreferrer"},Vl=n("code",null,"db.collection.createIndex()",-1),Hl={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/command/listCollections/#mongodb-dbcommand-dbcmd.listCollections",target:"_blank",rel:"noopener noreferrer"},Fl=n("code",null,"listCollections",-1),Yl={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/command/listIndexes/#mongodb-dbcommand-dbcmd.listIndexes",target:"_blank",rel:"noopener noreferrer"},Kl=n("code",null,"listIndexes",-1),Xl={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/command/createUser/#mongodb-dbcommand-dbcmd.createUser",target:"_blank",rel:"noopener noreferrer"},Zl=n("code",null,"createUser",-1),nr={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/command/getParameter/#mongodb-dbcommand-dbcmd.getParameter",target:"_blank",rel:"noopener noreferrer"},er=n("code",null,"getParameter",-1),or={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/command/count/#mongodb-dbcommand-dbcmd.count",target:"_blank",rel:"noopener noreferrer"},tr=n("code",null,"count",-1),sr={href:"https://www.mongodb.com/zh-cn/docs/manual/reference/command/bulkWrite/#mongodb-dbcommand-dbcmd.bulkWrite",target:"_blank",rel:"noopener noreferrer"},ar=n("code",null,"bulkWrite",-1),lr=n("h2",{id:"mongodb-复制",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#mongodb-复制","aria-hidden":"true"},"#"),e(" MongoDB 复制")],-1),rr={href:"https://www.mongodb.com/zh-cn/docs/manual/core/transactions/",target:"_blank",rel:"noopener noreferrer"},cr=s('<h3 id="【中级】mongodb-的副本机制是怎样的" tabindex="-1"><a class="header-anchor" href="#【中级】mongodb-的副本机制是怎样的" aria-hidden="true">#</a> 【中级】MongoDB 的副本机制是怎样的？</h3><details class="hint-container details"><summary>要点</summary><p>MongoDB 的复制集群又称为副本集群，是一组维护相同数据集合的 mongod 进程。</p><p>客户端连接到整个 Mongodb 复制集群，主节点机负责整个复制集群的写，从节点可以进行读操作，但默认还是主节点负责整个复制集群的读。主节点发生故障时，自动从从节点中选举出一个新的主节点，确保集群的正常使用，这对于客户端来说是无感知的。</p><p>通常来说，一个复制集群包含 1 个主节点（Primary），多个从节点（Secondary）以及零个或 1 个仲裁节点（Arbiter）。</p><ul><li><strong>主节点</strong>：整个集群的写操作入口，接收所有的写操作，并将集合所有的变化记录到操作日志中，即 oplog。主节点挂掉之后会自动选出新的主节点。</li><li><strong>从节点</strong>：从主节点同步数据，在主节点挂掉之后选举新节点。不过，从节点可以配置成 0 优先级，阻止它在选举中成为主节点。</li><li><strong>仲裁节点</strong>：这个是为了节约资源或者多机房容灾用，只负责主节点选举时投票不存数据，保证能有节点获得多数赞成票。</li></ul><p>下图是一个典型的三成员副本集群：</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202503042030712.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>主节点与备节点之间是通过 <strong>oplog（操作日志）</strong> 来同步数据的。oplog 是 local 库下的一个特殊的 <strong>上限集合 (Capped Collection)</strong> ，用来保存写操作所产生的增量日志，类似于 MySQL 中 的 Binlog。</p><blockquote><p>上限集合类似于定长的循环队列，数据顺序追加到集合的尾部，当集合空间达到上限时，它会覆盖集合中最旧的文档。上限集合的数据将会被顺序写入到磁盘的固定空间内，所以，I/O 速度非常快，如果不建立索引，性能更好。</p></blockquote><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202503042030639.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当主节点上的一个写操作完成后，会向 oplog 集合写入一条对应的日志，而从节点则通过这个 oplog 不断拉取到新的日志，在本地进行回放以达到数据同步的目的。</p><p>副本集最多有一个主节点。 如果当前主节点不可用，一个选举会抉择出新的主节点。MongoDB 的节点选举规则能够保证在 Primary 挂掉之后选取的新节点一定是集群中数据最全的一个。</p><p>当主节点上的一个写操作完成后，会向 oplog 集合写入一条对应的日志，而从节点则通过这个 oplog 不断拉取到新的日志，在本地进行回放以达到数据同步的目的。</p><p>副本集最多有一个主节点。 如果当前主节点不可用，一个选举会抉择出新的主节点。MongoDB 的节点选举规则能够保证在 Primary 挂掉之后选取的新节点一定是集群中数据最全的一个。</p><p>为什么要用复制集群？</p><ul><li><strong>实现 failover</strong>：提供自动故障恢复的功能，主节点发生故障时，自动从从节点中选举出一个新的主节点，确保集群的正常使用，这对于客户端来说是无感知的。</li><li><strong>实现读写分离</strong>：我们可以设置从节点上可以读取数据，主节点负责写入数据，这样的话就实现了读写分离，减轻了主节点读写压力过大的问题。MongoDB 4.0 之前版本如果主库压力不大，不建议读写分离，因为写会阻塞读，除非业务对响应时间不是非常关注以及读取历史数据接受一定时间延迟。</li></ul></details><h2 id="mongodb-分片" tabindex="-1"><a class="header-anchor" href="#mongodb-分片" aria-hidden="true">#</a> MongoDB 分片</h2><h3 id="【中级】什么是分片集群" tabindex="-1"><a class="header-anchor" href="#【中级】什么是分片集群" aria-hidden="true">#</a> 【中级】什么是分片集群？</h3>',4),ir={class:"hint-container details"},dr=n("summary",null,"要点",-1),pr=n("p",null,"分片集群是 MongoDB 的分布式版本，相较副本集，分片集群数据被均衡的分布在不同分片中， 不仅大幅提升了整个集群的数据容量上限，也将读写的压力分散到不同分片，以解决副本集性能瓶颈的难题。",-1),ur={href:"https://www.mongodb.com/docs/manual/sharding/",target:"_blank",rel:"noopener noreferrer"},gr=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/dunwu/images/master/snap/202503042043821.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),hr=n("p",null,[n("strong",null,"Config Servers"),e("：配置服务器，本质上是一个 MongoDB 的副本集，负责存储集群的各种元数据和配置，如分片地址、Chunks 等")],-1),_r=n("p",null,[n("strong",null,"Mongos"),e("：路由服务，不存具体数据，从 Config 获取集群配置讲请求转发到特定的分片，并且整合分片结果返回给客户端。")],-1),mr=n("p",null,[n("strong",null,"Shard"),e("：每个分片是整体数据的一部分子集，从 MongoDB3.6 版本开始，每个 Shard 必须部署为副本集（replica set）架构")],-1),br=s('<h3 id="【基础】为什么要用分片集群" tabindex="-1"><a class="header-anchor" href="#【基础】为什么要用分片集群" aria-hidden="true">#</a> 【基础】为什么要用分片集群？</h3><details class="hint-container details"><summary>要点</summary><p>随着系统数据量以及吞吐量的增长，常见的解决办法有两种：垂直扩展和水平扩展。</p><p>垂直扩展通过增加单个服务器的能力来实现，比如磁盘空间、内存容量、CPU 数量等；水平扩展则通过将数据存储到多个服务器上来实现，根据需要添加额外的服务器以增加容量。</p><p>类似于 Redis Cluster，MongoDB 也可以通过分片实现 <strong>水平扩展</strong> 。水平扩展这种方式更灵活，可以满足更大数据量的存储需求，支持更高吞吐量。并且，水平扩展所需的整体成本更低，仅仅需要相对较低配置的单机服务器即可，代价是增加了部署的基础设施和维护的复杂性。</p><p>也就是说当你遇到如下问题时，可以使用分片集群解决：</p><ul><li>存储容量受单机限制，即磁盘资源遭遇瓶颈。</li><li>读写能力受单机限制，可能是 CPU、内存或者网卡等资源遭遇瓶颈，导致读写能力无法扩展。</li></ul></details><h3 id="【基础】如何选择分片键" tabindex="-1"><a class="header-anchor" href="#【基础】如何选择分片键" aria-hidden="true">#</a> 【基础】如何选择分片键？</h3>',3),fr={class:"hint-container details"},kr=n("summary",null,"要点",-1),wr={href:"https://cloud.tencent.com/document/product/240/44611",target:"_blank",rel:"noopener noreferrer"},yr=n("ul",null,[n("li",null,[n("strong",null,"取值基数"),e(" 取值基数建议尽可能大，如果用小基数的片键，因为备选值有限，那么块的总数量就有限，随着数据增多，块的大小会越来越大，导致水平扩展时移动块会非常困难。 例如：选择年龄做一个基数，范围最多只有 100 个，随着数据量增多，同一个值分布过多时，导致 chunck 的增长超出 chuncksize 的范围，引起 jumbo chunk，从而无法迁移，导致数据分布不均匀，性能瓶颈。")]),n("li",null,[n("strong",null,"取值分布"),e(" 取值分布建议尽量均匀，分布不均匀的片键会造成某些块的数据量非常大，同样有上面数据分布不均匀，性能瓶颈的问题。")]),n("li",null,[n("strong",null,"查询带分片"),e(" 查询时建议带上分片，使用分片键进行条件查询时，mongos 可以直接定位到具体分片，否则 mongos 需要将查询分发到所有分片，再等待响应返回。")]),n("li",null,[n("strong",null,"避免单调递增或递减"),e(" 单调递增的 sharding key，数据文件挪动小，但写入会集中，导致最后一篇的数据量持续增大，不断发生迁移，递减同理。")])],-1),xr=n("p",null,"综上，在选择片键时要考虑以上 4 个条件，尽可能满足更多的条件，才能降低 MoveChunks 对性能的影响，从而获得最优的性能体验。",-1),Br=n("h3",{id:"【中级】分片策略有哪些",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#【中级】分片策略有哪些","aria-hidden":"true"},"#"),e(" 【中级】分片策略有哪些？")],-1),vr={class:"hint-container details"},Mr=n("summary",null,"要点",-1),Dr={href:"https://help.aliyun.com/document_detail/64561.html?spm=a2c4g.11186623.0.0.3121565eQhUGGB#h2--shard-key-3",target:"_blank",rel:"noopener noreferrer"},qr=s('<p><strong>1、基于范围的分片</strong>：</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202503042049549.png" alt="基于范围的分片" tabindex="0" loading="lazy"><figcaption>基于范围的分片</figcaption></figure><p>MongoDB 按照分片键（Shard Key）的值的范围将数据拆分为不同的块（Chunk），每个块包含了一段范围内的数据。当分片键的基数大、频率低且值非单调变更时，范围分片更高效。</p><ul><li>优点：Mongos 可以快速定位请求需要的数据，并将请求转发到相应的 Shard 节点中。</li><li>缺点：可能导致数据在 Shard 节点上分布不均衡，容易造成读写热点，且不具备写分散性。</li><li>适用场景：分片键的值不是单调递增或单调递减、分片键的值基数大且重复的频率低、需要范围查询等业务场景。</li></ul><p><strong>2、基于 Hash 值的分片</strong></p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202503052222683.png" alt="基于 Hash 值的分片" tabindex="0" loading="lazy"><figcaption>基于 Hash 值的分片</figcaption></figure><p>MongoDB 计算单个字段的哈希值作为索引值，并以哈希值的范围将数据拆分为不同的块（Chunk）。</p><ul><li>优点：可以将数据更加均衡地分布在各 Shard 节点中，具备写分散性。</li><li>缺点：不适合进行范围查询，进行范围查询时，需要将读请求分发到所有的 Shard 节点。</li><li>适用场景：分片键的值存在单调递增或递减、片键的值基数大且重复的频率低、需要写入的数据随机分发、数据读取随机性较大等业务场景。</li></ul><p>除了上述两种分片策略，您还可以配置 <strong>复合片键</strong> ，例如由一个低基数的键和一个单调递增的键组成。</p>',9),zr=s('<h3 id="【中级】分片数据如何存储" tabindex="-1"><a class="header-anchor" href="#【中级】分片数据如何存储" aria-hidden="true">#</a> 【中级】分片数据如何存储？</h3><details class="hint-container details"><summary>要点</summary><p><strong>Chunk（块）</strong> 是 MongoDB 分片集群的一个核心概念，其本质上就是由一组 Document 组成的逻辑数据单元。每个 Chunk 包含一定范围片键的数据，互不相交且并集为全部数据，即离散数学中<strong>划分</strong>的概念。</p><p>分片集群不会记录每条数据在哪个分片上，而是记录 Chunk 在哪个分片上一级这个 Chunk 包含哪些数据。</p><p>默认情况下，一个 Chunk 的最大值默认为 64MB（可调整，取值范围为 1~1024 MB。如无特殊需求，建议保持默认值），进行数据插入、更新、删除时，如果此时 Mongos 感知到了目标 Chunk 的大小或者其中的数据量超过上限，则会触发 <strong>Chunk 分裂</strong>。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202503042053916.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>数据的增长会让 Chunk 分裂得越来越多。这个时候，各个分片上的 Chunk 数量可能会不平衡。Mongos 中的 <strong>均衡器 (Balancer)</strong> 组件就会执行自动平衡，尝试使各个 Shard 上 Chunk 的数量保持均衡，这个过程就是 <strong>再平衡（Rebalance）</strong>。默认情况下，数据库和集合的 Rebalance 是开启的。</p><p>如下图所示，随着数据插入，导致 Chunk 分裂，让 AB 两个分片有 3 个 Chunk，C 分片只有一个，这个时候就会把 B 分配的迁移一个到 C 分片实现集群数据均衡。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202503042054456.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Balancer 是 MongoDB 的一个运行在 Config Server 的 Primary 节点上（自 MongoDB 3.4 版本起）的后台进程，它监控每个分片上 Chunk 数量，并在某个分片上 Chunk 数量达到阈值进行迁移。</p></blockquote><p>Chunk 只会分裂，不会合并，即使 chunkSize 的值变大。</p><p>Rebalance 操作是比较耗费系统资源的，我们可以通过在业务低峰期执行、预分片或者设置 Rebalance 时间窗等方式来减少其对 MongoDB 正常使用所带来的影响。</p></details>',2);function Sr(Cr,$r){const o=l("ExternalLinkIcon");return r(),c("div",null,[p,i(" more "),u,n("blockquote",null,[g,n("ul",null,[n("li",null,[n("a",h,[e("MongoDB 官方文档之 MongoDB 简介"),t(o)])]),n("li",null,[n("a",_,[e("MongoDB 简史"),t(o)])]),n("li",null,[n("a",m,[e("MongoDB 发展历史及各主要版本新特性概述"),t(o)])])])]),b,n("details",f,[k,n("ul",null,[n("li",null,[n("a",w,[y,t(o)])]),n("li",null,[n("a",x,[B,t(o)])]),n("li",null,[n("a",v,[M,t(o)])]),n("li",null,[n("a",D,[q,t(o)])]),z])]),S,n("details",C,[$,R,n("ul",null,[n("li",null,[T,e(" - MongoDB 将数据记录存储为 "),n("a",N,[e("BSON 文档"),t(o)]),e("。BSON 是 "),n("a",I,[e("JSON"),t(o)]),e(" 文档的二进制表示形式，尽管它包含的数据类型比 JSON 多。最大 BSON 文档大小为 16 MB。")]),L,n("li",null,[O,e(" - 通过分治的方式完成复杂的聚合任务。不过，从 MongoDB 5.0 开始，map-reduce 已经不被官方推荐使用了，替代方案是 "),n("a",j,[e("聚合管道"),t(o)]),e("。聚合管道提供比 map-reduce 更好的性能和可用性。")]),W]),E,n("ul",null,[n("li",null,[A,e(" - 通过"),Q,e("机制实现"),U,e("，提供"),P,e("和"),J,e("能力。在 MongoDB 中，这种机制称为 "),n("a",G,[V,t(o)]),e("。"),n("a",H,[F,t(o)]),e(" 是一组 MongoDB 服务器，它们维护相同的数据集，并可提供冗余和提高数据可用性。")]),n("li",null,[Y,e(" - 通过"),K,e("机制提供"),X,e("能力，以支撑海量数据，海量并发。从 3.4 开始，MongoDB 支持基于 "),n("a",Z,[nn,t(o)]),e(" 创建数据的 "),n("a",en,[on,t(o)]),e("。在均衡的集群中，MongoDB 仅将区域覆盖的读写定向到区域内的那些分片。")])])]),tn,n("details",sn,[an,n("blockquote",null,[ln,n("ul",null,[n("li",null,[n("a",rn,[e("MongoDB 简史"),t(o)])]),n("li",null,[n("a",cn,[e("MongoDB 发展历史及各主要版本新特性概述"),t(o)])])])])]),dn,n("blockquote",null,[n("p",null,[e("扩展阅读："),n("a",pn,[e("MongoDB 官方文档之聚合"),t(o)])])]),un,n("details",gn,[hn,_n,mn,bn,n("ul",null,[n("li",null,[n("a",fn,[e("聚合管道"),t(o)]),e("，这是执行聚合的首选方法。")]),n("li",null,[n("a",kn,[e("单一目的聚合方法"),t(o)]),e("，这些方法很简单，但缺乏聚合管道的功能。")]),n("li",null,[n("a",wn,[e("Map-Reduce"),t(o)]),e("，从 MongoDB 5.0 开始，"),n("a",yn,[e("Map-Reduce"),t(o)]),e(" 已被弃用。聚合管道提供的性能和可用性比 Map-Reduce 更优越。")])])]),xn,n("details",Bn,[vn,n("p",null,[e("聚合管道由一个或多个处理文档的 "),n("a",Mn,[e("阶段"),t(o)]),e(" 组成：")]),Dn,n("p",null,[e("如使用 "),n("a",qn,[e("通过聚合管道更新"),t(o)]),e(" 中显示的阶段，则可以通过聚合管道更新文档。")]),n("blockquote",null,[n("p",null,[e("注意：使用 "),n("a",zn,[Sn,t(o)]),e(" 方法运行的聚合管道不会修改集合中的文档，除非管道包含 "),n("a",Cn,[$n,t(o)]),e(" 或 "),n("a",Rn,[Tn,t(o)]),e(" 阶段。")])]),Nn,n("p",null,[n("a",In,[e("阶段"),t(o)]),e(" 的其他要点：")]),n("ul",null,[Ln,n("li",null,[e("同一个阶段可以在管道中多次出现，但以下阶段例外："),n("a",On,[jn,t(o)]),e("、"),n("a",Wn,[En,t(o)]),e(" 和 "),n("a",An,[Qn,t(o)]),e("。")]),n("li",null,[e("要在阶段中计算平均值和执行其他计算，请使用指定 "),n("a",Un,[e("聚合操作符"),t(o)]),e(" 的 "),n("a",Pn,[e("聚合表达式"),t(o)]),e("。")])]),Jn,n("table",null,[Gn,n("tbody",null,[n("tr",null,[Vn,n("td",Hn,[n("a",Fn,[Yn,t(o)])])]),n("tr",null,[Kn,n("td",Xn,[n("a",Zn,[ne,t(o)])])]),n("tr",null,[ee,n("td",oe,[n("a",te,[se,t(o)])])]),n("tr",null,[ae,n("td",le,[n("a",re,[ce,t(o)])])]),n("tr",null,[ie,n("td",de,[n("a",pe,[ue,t(o)])])]),n("tr",null,[ge,n("td",he,[n("a",_e,[me,t(o)])])]),n("tr",null,[be,n("td",fe,[n("a",ke,[we,t(o)])])]),n("tr",null,[ye,n("td",xe,[n("a",Be,[ve,t(o)]),n("a",Me,[De,t(o)])])]),n("tr",null,[qe,n("td",ze,[n("a",Se,[Ce,t(o)])])]),n("tr",null,[$e,n("td",Re,[n("a",Te,[Ne,t(o)])])]),n("tr",null,[Ie,n("td",Le,[n("a",Oe,[je,t(o)]),e(" (Available starting in MongoDB 4.2)")])]),n("tr",null,[We,n("td",Ee,[n("a",Ae,[Qe,t(o)]),e(" (Available starting in MongoDB 4.4)")])])])]),Ue,n("p",null,[e("以下聚合管道示例包含两个 "),n("a",Pe,[e("阶段"),t(o)]),e("，并返回按披萨名称分组后，各款中号披萨的总订单数量：")]),Je,n("p",null,[n("a",Ge,[Ve,t(o)]),e(" 阶段：")]),n("ul",null,[He,n("li",null,[e("将剩余文档传递到 "),n("a",Fe,[Ye,t(o)]),e(" 阶段。")])]),n("p",null,[n("a",Ke,[Xe,t(o)]),e(" 阶段：")]),n("ul",null,[Ze,n("li",null,[e("使用 "),n("a",no,[eo,t(o)]),e(" 计算每种披萨 "),oo,e(" 的总订单 "),to,e("。总数存储在聚合管道返回的 "),so,e(" 字段中。")])])]),ao,n("details",lo,[ro,co,n("table",null,[io,n("tbody",null,[n("tr",null,[po,n("td",uo,[n("a",go,[ho,t(o)])])]),n("tr",null,[_o,n("td",mo,[n("a",bo,[fo,t(o)])])]),n("tr",null,[ko,n("td",wo,[n("a",yo,[xo,t(o)])])]),n("tr",null,[Bo,n("td",vo,[n("a",Mo,[Do,t(o)])])]),n("tr",null,[qo,n("td",zo,[n("a",So,[Co,t(o)])])]),n("tr",null,[$o,n("td",Ro,[n("a",To,[No,t(o)])])]),n("tr",null,[Io,n("td",Lo,[n("a",Oo,[jo,t(o)])])]),n("tr",null,[Wo,n("td",Eo,[n("a",Ao,[Qo,t(o)]),n("a",Uo,[Po,t(o)])])]),n("tr",null,[Jo,n("td",Go,[n("a",Vo,[Ho,t(o)])])]),n("tr",null,[Fo,n("td",Yo,[n("a",Ko,[Xo,t(o)])])]),n("tr",null,[Zo,n("td",nt,[n("a",et,[ot,t(o)]),e(" (Available starting in MongoDB 4.2)")])]),n("tr",null,[tt,n("td",st,[n("a",at,[lt,t(o)]),e(" (Available starting in MongoDB 4.4)")])])])]),rt,ct]),it,n("details",dt,[pt,n("blockquote",null,[n("p",null,[e("从 MongoDB 5.0 开始，"),n("a",ut,[e("Map-Reduce"),t(o)]),e(" 已被弃用。聚合管道提供的性能和可用性比 Map-Reduce 更优越。")])]),n("p",null,[e("Map-Reduce 是一种数据处理范式，用于将大量数据汇总为有用的聚合结果。为了执行 Map-Reduce 操作，MongoDB 提供了 "),n("a",gt,[ht,t(o)]),e(" 数据库命令。")]),_t,mt,bt]),ft,n("details",kt,[wt,n("p",null,[e("MongoDB 将数据记录存储为 "),n("a",yt,[e("BSON 文档"),t(o)]),e("。BSON 是 "),n("a",xt,[e("JSON"),t(o)]),e(" 文档的二进制表示形式，尽管它包含的数据类型比 JSON 多。最大 BSON 文档大小为 16 MB。")]),n("p",null,[e("每个 MongoDB 文档都需要一个唯一的 "),n("a",Bt,[vt,t(o)]),e(" 字段作为 "),n("a",Mt,[e("主键"),t(o)]),e("。如果插入的文档省略了 "),Dt,e(" 字段，则 MongoDB 驱动程序会自动为 "),qt,e(" 字段生成 "),n("a",zt,[e("ObjectId"),t(o)]),e("。")]),n("p",null,[e("这些 "),n("a",St,[e("MongoDB 文档"),t(o)]),e(" 收集在 "),n("a",Ct,[e("集合"),t(o)]),e(" 中。"),n("a",$t,[e("数据库"),t(o)]),e(" 存储一个或多个文档集合。")]),Rt,n("table",null,[Tt,n("tbody",null,[Nt,It,Lt,Ot,jt,n("tr",null,[Wt,n("td",Et,[n("a",At,[Qt,t(o)])])])])]),Ut]),Pt,n("details",Jt,[Gt,Vt,Ht,Ft,Yt,Kt,n("ul",null,[n("li",null,[Xt,e("：自 MongoDB 3.2 以后，默认的存储引擎为 "),n("a",Zt,[e("WiredTiger 存储引擎"),t(o)]),e(" 。非常适合大多数工作负载，建议用于新部署。WiredTiger 提供文档级并发模型、检查点和数据压缩（后文会介绍到）等功能。")]),n("li",null,[ns,e("："),n("a",es,[e("In-Memory 存储引擎"),t(o)]),e(" 在 MongoDB Enterprise 中可用。它不是将文档存储在磁盘上，而是将它们保留在内存中以获得更可预测的数据延迟。")])]),os]),ts,n("details",ss,[as,ls,n("p",null,[e("默认情况下，WiredTiger 使用 "),n("a",rs,[e("Snappy"),t(o)]),e(" 压缩算法（谷歌开源，旨在实现非常高的速度和合理的压缩，压缩比 3 ～ 5 倍）对所有集合使用块压缩，对所有索引使用前缀压缩。")]),cs,n("ul",null,[n("li",null,[n("a",is,[e("zlib"),t(o)]),e("：高度压缩算法，压缩比 5 ～ 7 倍")]),n("li",null,[n("a",ds,[e("Zstandard"),t(o)]),e("（简称 zstd）：Facebook 开源的一种快速无损压缩算法，针对 zlib 级别的实时压缩场景和更好的压缩比，提供更高的压缩率和更低的 CPU 使用率，MongoDB 4.2 开始可用。")])]),ps]),us,n("details",gs,[hs,_s,ms,bs,n("p",null,[e("此外，WiredTiger 还支持 "),n("a",fs,[e("LSM(Log Structured Merge)"),t(o)]),e(" 树作为存储结构，MongoDB 在使用 WiredTiger 作为存储引擎时，默认使用的是 B+ 树。")]),n("p",null,[e("如果想要了解 MongoDB 使用 B+ 树的原因，可以看看这篇文章："),n("a",ks,[e("【驳斥八股文系列】别瞎分析了，MongoDB 使用的是 B+ 树，不是你们以为的 B 树"),t(o)]),e("。")]),ws,n("p",null,[e("如果想要深入研究学习 WiredTiger 存储引擎，推荐阅读 MongoDB 中文社区的 [WiredTiger 存储引擎系列]("),n("a",ys,[e("https://mongoing.com/archives/category/wiredtiger"),t(o)]),e(" 存储引擎系列)。")])]),xs,n("blockquote",null,[Bs,n("ul",null,[n("li",null,[n("a",vs,[e("MongoDB 官方文档之索引"),t(o)])]),n("li",null,[n("a",Ms,[e("你真的会用索引么？[Mongo]"),t(o)])])])]),Ds,n("details",qs,[zs,Ss,Cs,n("p",null,[e("索引是一种特殊的数据结构，它以易于遍历的形式存储一小部分集合数据集。"),n("strong",null,[e("MongoDB 索引使用 "),n("a",$s,[e("B-tree"),t(o)]),e(" 数据结构")]),e("。索引可存储某个特定字段或多个字段的值，并按字段的值进行排序。索引条目的排序支持高效的相等匹配和基于范围的查询操作。此外，"),Rs,e("。")]),Ts]),Ns,n("details",Is,[Ls,Os,js,Ws,Es,As,n("blockquote",null,[n("p",null,[e("要了解详情，请参阅 "),n("a",Qs,[e("单字段索引"),t(o)]),e("。")])]),Us,n("blockquote",null,[n("p",null,[e("要了解详情，请参阅 "),n("a",Ps,[e("复合索引"),t(o)]),e("。")])]),Js,Gs,Vs,Hs,Fs,n("blockquote",null,[n("p",null,[e("要了解详情，请参阅 "),n("a",Ys,[e("多键索引"),t(o)]),e("。")])]),Ks,Xs,n("blockquote",null,[n("p",null,[e("要了解详情，请参阅 "),n("a",Zs,[e("自管理部署上的文本索引。"),t(o)])])]),na,ea,oa,n("ul",null,[n("li",null,[e("使用平面几何返回结果的 "),n("a",ta,[e("2d 索引"),t(o)]),e("。")]),n("li",null,[e("使用球面几何返回结果的 "),n("a",sa,[e("2dsphere 索引"),t(o)]),e("。")])]),n("blockquote",null,[n("p",null,[e("要了解详情，请参阅 "),n("a",aa,[e("地理空间索引"),t(o)]),e("。")])]),la,n("p",null,[e("哈希索引支持 "),n("a",ra,[e("哈希分片"),t(o)]),e("。哈希索引对字段值的哈希值进行索引。")]),n("blockquote",null,[n("p",null,[e("要了解详情，请参阅 "),n("a",ca,[e("哈希索引"),t(o)]),e("。")])])]),ia,n("blockquote",null,[n("p",null,[e("扩展阅读："),n("a",da,[e("MongoDB 官方文档之事务"),t(o)])])]),n("blockquote",null,[pa,n("ul",null,[n("li",null,[n("a",ua,[e("MongoDB 官方文档之事务"),t(o)])]),n("li",null,[n("a",ga,[e("技术干货| MongoDB 事务原理"),t(o)])]),n("li",null,[n("a",ha,[e("MongoDB 一致性模型设计与实现"),t(o)])])])]),_a,n("details",ma,[ba,fa,ka,wa,n("ul",null,[ya,n("li",null,[e("在事务提交时，事务中所做的所有数据更改都会保存，并且在事务之外可见。 "),n("ul",null,[xa,n("li",null,[e("不过，当事务写入多个分片时，并非所有外部读取操作都需等待已提交事务的结果在各个分片上可见。例如，如果事务已提交并且写入 1 在分片 A 上可见，但写入 2 在分片 B 上尚不可见，则读关注 "),n("a",Ba,[va,t(o)]),e(" 处的外部读取可以在不看到写入 2 的情况下读取写入 1 的结果。")])])]),Ma]),n("blockquote",null,[n("p",null,[e("要点：在大多数情况下，与单文档写入操作相比，分布式事务会产生更高的性能成本，并且分布式事务的可用性不应取代有效的模式设计。在许多情况下，"),n("a",Da,[e("非规范化数据模型（嵌入式文档和数组）"),t(o)]),e(" 仍然是数据和使用案例的最佳选择。换言之，对于许多场景，适当的数据建模将最大限度地减少对分布式事务的需求。")])])]),qa,n("details",za,[Sa,Ca,$a,Ra,Ta,n("p",null,[e("如果事务不是跨分片写入事务，则可以在 "),n("a",Na,[e("分布式事务"),t(o)]),e(" 中执行以下操作：")]),Ia,La,n("ul",null,[n("li",null,[e("可以 "),n("a",Oa,[e("隐式创建一个集合"),t(o)]),e("，例如： "),n("ul",null,[n("li",null,[e("对不存在的集合进行 "),n("a",ja,[e("插入操作"),t(o)])]),n("li",null,[e("对不存在的集合使用 "),Wa,e(" 进行 "),n("a",Ea,[e("update/findAndModify 操作"),t(o)]),e("。")])])]),n("li",null,[e("可以使用 "),n("a",Aa,[Qa,t(o)]),e(" 命令或其辅助程序 "),n("a",Ua,[Pa,t(o)]),n("a",Ja,[e("显式创建集合"),t(o)]),e("。")])]),n("p",null,[n("a",Ga,[e("在事务内创建索引"),t(o)]),e(" 时，要创建的索引必须位于以下位置之一：")]),Va,Ha,n("p",null,[e("要在事务内执行计数操作，请使用 "),n("a",Fa,[Ya,t(o)]),e(" 聚合阶段或 "),n("a",Ka,[Xa,t(o)]),e("（带有 "),n("a",Za,[nl,t(o)]),e(" 表达式）聚合阶段。")]),n("p",null,[e("MongoDB 驱动程序提供集合级 API "),el,e(" 作为辅助方法，该方法使用 "),n("a",ol,[tl,t(o)]),e(" 和 "),n("a",sl,[al,t(o)]),e(" 表达式来执行计数。")]),n("p",null,[n("a",ll,[rl,t(o)]),e(" 提供 "),n("a",cl,[il,t(o)]),e(" 辅助方法，该方法使用 "),n("a",dl,[pl,t(o)]),e(" 和 "),n("a",ul,[gl,t(o)]),e(" 表达式进行计数。")]),hl,_l,n("ul",null,[n("li",null,[n("p",null,[e("对于未分片的集合，可以使用 "),n("a",ml,[bl,t(o)]),e(" 方法 /"),n("a",fl,[kl,t(o)]),e(" 命令以及带有 "),n("a",wl,[yl,t(o)]),e(" 阶段的聚合管道。")])]),n("li",null,[n("p",null,[e("对于分片集合，不能使用 "),n("a",xl,[Bl,t(o)]),e(" 方法或 "),n("a",vl,[Ml,t(o)]),e(" 命令。")]),n("p",null,[e("要查找分片集合的不同值，请改用带有 "),n("a",Dl,[ql,t(o)]),e(" 阶段的 aggregation pipeline。例如：")]),zl])]),Sl,n("p",null,[e("事务中允许使用诸如 "),n("a",Cl,[$l,t(o)]),e("、"),n("a",Rl,[Tl,t(o)]),e("、"),n("a",Nl,[Il,t(o)]),e("（及其辅助方法）之类的信息命令，但它们不能是事务中的第一项操作。")]),Ll,Ol,n("ul",null,[jl,n("li",null,[e("使用 "),n("a",Wl,[El,t(o)]),e(" 以外的读关注级别时，"),n("a",Al,[e("显式创建集合"),t(o)]),e("（例如 "),n("a",Ql,[Ul,t(o)]),e(" 方法）和索引（例如 "),n("a",Pl,[Jl,t(o)]),e(" 和 "),n("a",Gl,[Vl,t(o)]),e(" 方法）。")]),n("li",null,[n("a",Hl,[Fl,t(o)]),e(" 和 "),n("a",Yl,[Kl,t(o)]),e(" 命令及其辅助方法。")]),n("li",null,[e("其他非 CRUD 和非信息性操作（例如 "),n("a",Xl,[Zl,t(o)]),e("、"),n("a",nr,[er,t(o)]),e(" 和 "),n("a",or,[tr,t(o)]),e("）及其辅助程序。")]),n("li",null,[e("并行操作。要同时更新多个命名空间，请考虑改用 "),n("a",sr,[ar,t(o)]),e(" 命令。")])])]),lr,n("blockquote",null,[n("p",null,[e("扩展阅读："),n("a",rr,[e("MongoDB 官方文档之事务"),t(o)])])]),cr,n("details",ir,[dr,pr,n("p",null,[e("MongoDB 的分片集群由如下三个部分组成（下图来源于 "),n("a",ur,[e("官方文档对分片集群的介绍"),t(o)]),e("）：")]),gr,hr,_r,mr]),br,n("details",fr,[kr,n("p",null,[e("选择合适的片键对 sharding 效率影响很大，主要基于如下四个因素（摘自 "),n("a",wr,[e("分片集群使用注意事项 - - 腾讯云文档"),t(o)]),e("）：")]),yr,xr]),Br,n("details",vr,[Mr,n("p",null,[e("MongoDB 支持两种分片算法来满足不同的查询需求（摘自 "),n("a",Dr,[e("MongoDB 分片集群介绍 - 阿里云文档"),t(o)]),e("）：")]),qr]),zr])}const Nr=a(d,[["render",Sr],["__file","index.html.vue"]]);export{Nr as default};
