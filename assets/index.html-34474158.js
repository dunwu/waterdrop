const e=JSON.parse('{"key":"v-0a074c2a","path":"/pages/d206f068/","title":"Spring 泛型处理","lang":"zh-CN","frontmatter":{"title":"Spring 泛型处理","date":"2022-12-22T20:11:52.000Z","order":27,"permalink":"/pages/d206f068/","category":["Java","框架","Spring","Spring核心"],"tag":["Java","框架","Spring"],"description":"Spring 泛型处理 Java 泛型基础 泛型类型 泛型类型是在类型上参数化的泛型类或接口 泛型使用场景 编译时强类型检查 避免类型强转 实现通用算法 泛型类型擦写 泛型被引入到 Java 语言中，以便在编译时提供更严格的类型检查并支持泛型编程。类型擦除确保不会 为参数化类型创建新类；因此，泛型不会产生运行时开销。为了实现泛型，编译器将类型擦除应用于： 将泛型类型中的所有类型参数替换为其边界，如果类型参数是无边界的，则将其替换为 “Object”。因此，生成的字节码只包含普通类、接口和方法 必要时插入类型转换以保持类型安全 生成桥方法以保留扩展泛型类型中的多态性","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/d206f068/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"Spring 泛型处理"}],["meta",{"property":"og:description","content":"Spring 泛型处理 Java 泛型基础 泛型类型 泛型类型是在类型上参数化的泛型类或接口 泛型使用场景 编译时强类型检查 避免类型强转 实现通用算法 泛型类型擦写 泛型被引入到 Java 语言中，以便在编译时提供更严格的类型检查并支持泛型编程。类型擦除确保不会 为参数化类型创建新类；因此，泛型不会产生运行时开销。为了实现泛型，编译器将类型擦除应用于： 将泛型类型中的所有类型参数替换为其边界，如果类型参数是无边界的，则将其替换为 “Object”。因此，生成的字节码只包含普通类、接口和方法 必要时插入类型转换以保持类型安全 生成桥方法以保留扩展泛型类型中的多态性"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-15T00:29:21.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"框架"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:published_time","content":"2022-12-22T20:11:52.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-15T00:29:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring 泛型处理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-12-22T20:11:52.000Z\\",\\"dateModified\\":\\"2025-09-15T00:29:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"Java 泛型基础","slug":"java-泛型基础","link":"#java-泛型基础","children":[]},{"level":2,"title":"Java 5 类型接口","slug":"java-5-类型接口","link":"#java-5-类型接口","children":[]},{"level":2,"title":"Spring 泛型类型辅助类","slug":"spring-泛型类型辅助类","link":"#spring-泛型类型辅助类","children":[]},{"level":2,"title":"Spring 泛型集合类型辅助类","slug":"spring-泛型集合类型辅助类","link":"#spring-泛型集合类型辅助类","children":[]},{"level":2,"title":"Spring 方法参数封装 - MethodParameter","slug":"spring-方法参数封装-methodparameter","link":"#spring-方法参数封装-methodparameter","children":[]},{"level":2,"title":"Spring 4.0 泛型优化实现 - ResolvableType","slug":"spring-4-0-泛型优化实现-resolvabletype","link":"#spring-4-0-泛型优化实现-resolvabletype","children":[]},{"level":2,"title":"ResolvableType 的局限性","slug":"resolvabletype-的局限性","link":"#resolvabletype-的局限性","children":[]},{"level":2,"title":"问题","slug":"问题","link":"#问题","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1757896161000,"updatedTime":1757896161000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":1}]},"readingTime":{"minutes":2.53,"words":758},"filePathRelative":"01.Java/13.框架/Spring/Spring核心/Spring泛型处理.md","localizedDate":"2022年12月22日","excerpt":"<h1> Spring 泛型处理</h1>\\n<h2> Java 泛型基础</h2>\\n<p>泛型类型</p>\\n<ul>\\n<li>泛型类型是在类型上参数化的泛型类或接口</li>\\n</ul>\\n<p>泛型使用场景</p>\\n<ul>\\n<li>编译时强类型检查</li>\\n<li>避免类型强转</li>\\n<li>实现通用算法</li>\\n</ul>\\n<p>泛型类型擦写</p>\\n<ul>\\n<li>泛型被引入到 Java 语言中，以便在编译时提供更严格的类型检查并支持泛型编程。类型擦除确保不会<br>\\n为参数化类型创建新类；因此，泛型不会产生运行时开销。为了实现泛型，编译器将类型擦除应用于：\\n<ul>\\n<li>将泛型类型中的所有类型参数替换为其边界，如果类型参数是无边界的，则将其替换为<br>\\n“Object”。因此，生成的字节码只包含普通类、接口和方法</li>\\n<li>必要时插入类型转换以保持类型安全</li>\\n<li>生成桥方法以保留扩展泛型类型中的多态性</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{e as data};
