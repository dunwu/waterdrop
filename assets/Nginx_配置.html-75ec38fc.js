const n=JSON.parse(`{"key":"v-7cf7544e","path":"/04.DevOps/%E5%B7%A5%E5%85%B7/Nginx/Nginx_%E9%85%8D%E7%BD%AE.html","title":"Nginx 配置","lang":"zh-CN","frontmatter":{"title":"Nginx 配置","icon":"logos:nginx","date":"2020-02-02T17:54:00.000Z","order":3,"category":["DevOps","工具","Nginx"],"tag":["DevOps","Nginx"],"description":"Nginx 配置 Nginx 的默认配置文件为 nginx.conf。 nginx -c xxx.conf - 以指定的文件作为配置文件，启动 Nginx。 配置文件实例 以下为一个 nginx.conf 配置文件实例： #定义 nginx 运行的用户和用户组 user www www; #nginx 进程数，建议设置为等于 CPU 总核心数。 worker_processes 8; #nginx 默认没有开启利用多核 CPU, 通过增加 worker_cpu_affinity 配置参数来充分利用多核 CPU 以下是 8 核的配置参数 worker_cpu_affinity 00000001 00000010 00000100 00001000 00010000 00100000 01000000 10000000; #全局错误日志定义类型，[ debug | info | notice | warn | error | crit ] error_log /var/log/nginx/error.log info; #进程文件 pid /var/run/nginx.pid; #一个 nginx 进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值 ulimit -n）与 nginx 进程数相除，但是 nginx 分配请求并不均匀，所以建议与 ulimit -n 的值保持一致。 worker_rlimit_nofile 65535; #工作模式与连接数上限 events { #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll 模型是 Linux 2.6 以上版本内核中的高性能网络 I/O 模型，如果跑在 FreeBSD 上面，就用 kqueue 模型。 #epoll 是多路复用 IO(I/O Multiplexing) 中的一种方式，但是仅用于 linux2.6 以上内核，可以大大提高 nginx 的性能 use epoll; ############################################################################ #单个后台 worker process 进程的最大并发链接数 #事件模块指令，定义 nginx 每个进程最大连接数，默认 1024。最大客户连接数由 worker_processes 和 worker_connections 决定 #即 max_client=worker_processes*worker_connections, 在作为反向代理时：max_client=worker_processes*worker_connections / 4 worker_connections 65535; ############################################################################ } #设定 http 服务器 http { include mime.types; #文件扩展名与文件类型映射表 default_type application/octet-stream; #默认文件类型 #charset utf-8; #默认编码 server_names_hash_bucket_size 128; #服务器名字的 hash 表大小 client_header_buffer_size 32k; #上传文件大小限制 large_client_header_buffers 4 64k; #设定请求缓 client_max_body_size 8m; #设定请求缓 sendfile on; #开启高效文件传输模式，sendfile 指令指定 nginx 是否调用 sendfile 函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘 IO 重负载应用，可设置为 off，以平衡磁盘与网络 I/O 处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成 off。 autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。 tcp_nopush on; #防止网络阻塞 tcp_nodelay on; #防止网络阻塞 ##连接客户端超时时间各种参数设置## keepalive_timeout 120; #单位是秒，客户端连接时时间，超时之后服务器端自动关闭该连接 如果 nginx 守护进程在这个等待的时间里，一直没有收到浏览发过来 http 请求，则关闭这个 http 连接 client_header_timeout 10; #客户端请求头的超时时间 client_body_timeout 10; #客户端请求主体超时时间 reset_timedout_connection on; #告诉 nginx 关闭不响应的客户端连接。这将会释放那个客户端所占有的内存空间 send_timeout 10; #客户端响应超时时间，在两次客户端读取操作之间。如果在这段时间内，客户端没有读取任何数据，nginx 就会关闭连接 ################################ #FastCGI 相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。 fastcgi_connect_timeout 300; fastcgi_send_timeout 300; fastcgi_read_timeout 300; fastcgi_buffer_size 64k; fastcgi_buffers 4 64k; fastcgi_busy_buffers_size 128k; fastcgi_temp_file_write_size 128k; ###作为代理缓存服务器设置####### ###先写到 temp 再移动到 cache #proxy_cache_path /var/tmp/nginx/proxy_cache levels=1:2 keys_zone=cache_one:512m inactive=10m max_size=64m; ###以上 proxy_temp 和 proxy_cache 需要在同一个分区中 ###levels=1:2 表示缓存级别，表示缓存目录的第一级目录是 1 个字符，第二级目录是 2 个字符 keys_zone=cache_one:128m 缓存空间起名为 cache_one 大小为 512m ###max_size=64m 表示单个文件超过 128m 就不缓存了 inactive=10m 表示缓存的数据，10 分钟内没有被访问过就删除 #########end#################### #####对传输文件压缩########### #gzip 模块设置 gzip on; #开启 gzip 压缩输出 gzip_min_length 1k; #最小压缩文件大小 gzip_buffers 4 16k; #压缩缓冲区 gzip_http_version 1.0; #压缩版本（默认 1.1，前端如果是 squid2.5 请使用 1.0） gzip_comp_level 2; #压缩等级，gzip 压缩比，1 为最小，处理最快；9 为压缩比最大，处理最慢，传输速度最快，也最消耗 CPU； gzip_types text/plain application/x-javascript text/css application/xml; #压缩类型，默认就已经包含 text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个 warn。 gzip_vary on; ############################## #limit_zone crawler $binary_remote_addr 10m; #开启限制 IP 连接数的时候需要使用 upstream blog.ha97.com { #upstream 的负载均衡，weight 是权重，可以根据机器配置定义权重。weigth 参数表示权值，权值越高被分配到的几率越大。 server 192.168.80.121:80 weight=3; server 192.168.80.122:80 weight=2; server 192.168.80.123:80 weight=3; } #虚拟主机的配置 server { #监听端口 listen 80; #############https################## #listen 443 ssl; #ssl_certificate /opt/https/xxxxxx.crt; #ssl_certificate_key /opt/https/xxxxxx.key; #ssl_protocols SSLv3 TLSv1; #ssl_ciphers HIGH:!ADH:!EXPORT57:RC4+RSA:+MEDIUM; #ssl_prefer_server_ciphers on; #ssl_session_cache shared:SSL:2m; #ssl_session_timeout 5m; ####################################end #域名可以有多个，用空格隔开 server_name www.ha97.com ha97.com; index index.html index.htm index.php; root /data/www/ha97; location ~ .*.(php|php5)?$ { fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; include fastcgi.conf; } #图片缓存时间设置 location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$ { expires 10d; } #JS 和 CSS 缓存时间设置 location ~ .*.(js|css)?$ { expires 1h; } #日志格式设定 log_format access '$remote_addr - $remote_user [$time_local] \\"$request\\" ' '$status $body_bytes_sent \\"$http_referer\\" ' '\\"$http_user_agent\\" $http_x_forwarded_for'; #定义本虚拟主机的访问日志 access_log /var/log/nginx/ha97access.log access; #对 \\"/\\" 启用反向代理 location / { proxy_pass http://127.0.0.1:88; proxy_redirect off; proxy_set_header X-Real-IP $remote_addr; #后端的 Web 服务器可以通过 X-Forwarded-For 获取用户真实 IP proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; #以下是一些反向代理的配置，可选。 proxy_set_header Host $host; client_max_body_size 10m; #允许客户端请求的最大单文件字节数 client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数， ##代理设置 以下设置是 nginx 和后端服务器之间通讯的设置## proxy_connect_timeout 90; #nginx 跟后端服务器连接超时时间（代理连接超时） proxy_send_timeout 90; #后端服务器数据回传时间（代理发送超时） proxy_read_timeout 90; #连接成功后，后端服务器响应时间（代理接收超时） proxy_buffering on; #该指令开启从后端被代理服务器的响应内容缓冲 此参数开启后 proxy_buffers 和 proxy_busy_buffers_size 参数才会起作用 proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小 proxy_buffers 4 32k; #proxy_buffers 缓冲区，网页平均在 32k 以下的设置 proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2） proxy_max_temp_file_size 2048m; #默认 1024m, 该指令用于设置当网页内容大于 proxy_buffers 时，临时文件大小的最大值。如果文件大于这个值，它将从 upstream 服务器同步地传递请求，而不是缓冲到磁盘 proxy_temp_file_write_size 512k; 这是当被代理服务器的响应过大时 nginx 一次性写入临时文件的数据量。 proxy_temp_path /var/tmp/nginx/proxy_temp; ##定义缓冲存储目录，之前必须要先手动创建此目录 proxy_headers_hash_max_size 51200; proxy_headers_hash_bucket_size 6400; ####################################################### } #设定查看 nginx 状态的地址 location /nginxStatus { stub_status on; access_log on; auth_basic \\"nginxStatus\\"; auth_basic_user_file conf/htpasswd; #htpasswd 文件的内容可以用 apache 提供的 htpasswd 工具来产生。 } #本地动静分离反向代理配置 #所有 jsp 的页面均交由 tomcat 或 resin 处理 location ~ .(jsp|jspx|do)?$ { proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://127.0.0.1:8080; } #所有静态文件由 nginx 直接读取不经过 tomcat 或 resin location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|pdf|xls|mp3|wma)$ { expires 15d; } location ~ .*.(js|css)?$ { expires 1h; } } }","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/04.DevOps/%E5%B7%A5%E5%85%B7/Nginx/Nginx_%E9%85%8D%E7%BD%AE.html"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"Nginx 配置"}],["meta",{"property":"og:description","content":"Nginx 配置 Nginx 的默认配置文件为 nginx.conf。 nginx -c xxx.conf - 以指定的文件作为配置文件，启动 Nginx。 配置文件实例 以下为一个 nginx.conf 配置文件实例： #定义 nginx 运行的用户和用户组 user www www; #nginx 进程数，建议设置为等于 CPU 总核心数。 worker_processes 8; #nginx 默认没有开启利用多核 CPU, 通过增加 worker_cpu_affinity 配置参数来充分利用多核 CPU 以下是 8 核的配置参数 worker_cpu_affinity 00000001 00000010 00000100 00001000 00010000 00100000 01000000 10000000; #全局错误日志定义类型，[ debug | info | notice | warn | error | crit ] error_log /var/log/nginx/error.log info; #进程文件 pid /var/run/nginx.pid; #一个 nginx 进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值 ulimit -n）与 nginx 进程数相除，但是 nginx 分配请求并不均匀，所以建议与 ulimit -n 的值保持一致。 worker_rlimit_nofile 65535; #工作模式与连接数上限 events { #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll 模型是 Linux 2.6 以上版本内核中的高性能网络 I/O 模型，如果跑在 FreeBSD 上面，就用 kqueue 模型。 #epoll 是多路复用 IO(I/O Multiplexing) 中的一种方式，但是仅用于 linux2.6 以上内核，可以大大提高 nginx 的性能 use epoll; ############################################################################ #单个后台 worker process 进程的最大并发链接数 #事件模块指令，定义 nginx 每个进程最大连接数，默认 1024。最大客户连接数由 worker_processes 和 worker_connections 决定 #即 max_client=worker_processes*worker_connections, 在作为反向代理时：max_client=worker_processes*worker_connections / 4 worker_connections 65535; ############################################################################ } #设定 http 服务器 http { include mime.types; #文件扩展名与文件类型映射表 default_type application/octet-stream; #默认文件类型 #charset utf-8; #默认编码 server_names_hash_bucket_size 128; #服务器名字的 hash 表大小 client_header_buffer_size 32k; #上传文件大小限制 large_client_header_buffers 4 64k; #设定请求缓 client_max_body_size 8m; #设定请求缓 sendfile on; #开启高效文件传输模式，sendfile 指令指定 nginx 是否调用 sendfile 函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘 IO 重负载应用，可设置为 off，以平衡磁盘与网络 I/O 处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成 off。 autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。 tcp_nopush on; #防止网络阻塞 tcp_nodelay on; #防止网络阻塞 ##连接客户端超时时间各种参数设置## keepalive_timeout 120; #单位是秒，客户端连接时时间，超时之后服务器端自动关闭该连接 如果 nginx 守护进程在这个等待的时间里，一直没有收到浏览发过来 http 请求，则关闭这个 http 连接 client_header_timeout 10; #客户端请求头的超时时间 client_body_timeout 10; #客户端请求主体超时时间 reset_timedout_connection on; #告诉 nginx 关闭不响应的客户端连接。这将会释放那个客户端所占有的内存空间 send_timeout 10; #客户端响应超时时间，在两次客户端读取操作之间。如果在这段时间内，客户端没有读取任何数据，nginx 就会关闭连接 ################################ #FastCGI 相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。 fastcgi_connect_timeout 300; fastcgi_send_timeout 300; fastcgi_read_timeout 300; fastcgi_buffer_size 64k; fastcgi_buffers 4 64k; fastcgi_busy_buffers_size 128k; fastcgi_temp_file_write_size 128k; ###作为代理缓存服务器设置####### ###先写到 temp 再移动到 cache #proxy_cache_path /var/tmp/nginx/proxy_cache levels=1:2 keys_zone=cache_one:512m inactive=10m max_size=64m; ###以上 proxy_temp 和 proxy_cache 需要在同一个分区中 ###levels=1:2 表示缓存级别，表示缓存目录的第一级目录是 1 个字符，第二级目录是 2 个字符 keys_zone=cache_one:128m 缓存空间起名为 cache_one 大小为 512m ###max_size=64m 表示单个文件超过 128m 就不缓存了 inactive=10m 表示缓存的数据，10 分钟内没有被访问过就删除 #########end#################### #####对传输文件压缩########### #gzip 模块设置 gzip on; #开启 gzip 压缩输出 gzip_min_length 1k; #最小压缩文件大小 gzip_buffers 4 16k; #压缩缓冲区 gzip_http_version 1.0; #压缩版本（默认 1.1，前端如果是 squid2.5 请使用 1.0） gzip_comp_level 2; #压缩等级，gzip 压缩比，1 为最小，处理最快；9 为压缩比最大，处理最慢，传输速度最快，也最消耗 CPU； gzip_types text/plain application/x-javascript text/css application/xml; #压缩类型，默认就已经包含 text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个 warn。 gzip_vary on; ############################## #limit_zone crawler $binary_remote_addr 10m; #开启限制 IP 连接数的时候需要使用 upstream blog.ha97.com { #upstream 的负载均衡，weight 是权重，可以根据机器配置定义权重。weigth 参数表示权值，权值越高被分配到的几率越大。 server 192.168.80.121:80 weight=3; server 192.168.80.122:80 weight=2; server 192.168.80.123:80 weight=3; } #虚拟主机的配置 server { #监听端口 listen 80; #############https################## #listen 443 ssl; #ssl_certificate /opt/https/xxxxxx.crt; #ssl_certificate_key /opt/https/xxxxxx.key; #ssl_protocols SSLv3 TLSv1; #ssl_ciphers HIGH:!ADH:!EXPORT57:RC4+RSA:+MEDIUM; #ssl_prefer_server_ciphers on; #ssl_session_cache shared:SSL:2m; #ssl_session_timeout 5m; ####################################end #域名可以有多个，用空格隔开 server_name www.ha97.com ha97.com; index index.html index.htm index.php; root /data/www/ha97; location ~ .*.(php|php5)?$ { fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; include fastcgi.conf; } #图片缓存时间设置 location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$ { expires 10d; } #JS 和 CSS 缓存时间设置 location ~ .*.(js|css)?$ { expires 1h; } #日志格式设定 log_format access '$remote_addr - $remote_user [$time_local] \\"$request\\" ' '$status $body_bytes_sent \\"$http_referer\\" ' '\\"$http_user_agent\\" $http_x_forwarded_for'; #定义本虚拟主机的访问日志 access_log /var/log/nginx/ha97access.log access; #对 \\"/\\" 启用反向代理 location / { proxy_pass http://127.0.0.1:88; proxy_redirect off; proxy_set_header X-Real-IP $remote_addr; #后端的 Web 服务器可以通过 X-Forwarded-For 获取用户真实 IP proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; #以下是一些反向代理的配置，可选。 proxy_set_header Host $host; client_max_body_size 10m; #允许客户端请求的最大单文件字节数 client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数， ##代理设置 以下设置是 nginx 和后端服务器之间通讯的设置## proxy_connect_timeout 90; #nginx 跟后端服务器连接超时时间（代理连接超时） proxy_send_timeout 90; #后端服务器数据回传时间（代理发送超时） proxy_read_timeout 90; #连接成功后，后端服务器响应时间（代理接收超时） proxy_buffering on; #该指令开启从后端被代理服务器的响应内容缓冲 此参数开启后 proxy_buffers 和 proxy_busy_buffers_size 参数才会起作用 proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小 proxy_buffers 4 32k; #proxy_buffers 缓冲区，网页平均在 32k 以下的设置 proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2） proxy_max_temp_file_size 2048m; #默认 1024m, 该指令用于设置当网页内容大于 proxy_buffers 时，临时文件大小的最大值。如果文件大于这个值，它将从 upstream 服务器同步地传递请求，而不是缓冲到磁盘 proxy_temp_file_write_size 512k; 这是当被代理服务器的响应过大时 nginx 一次性写入临时文件的数据量。 proxy_temp_path /var/tmp/nginx/proxy_temp; ##定义缓冲存储目录，之前必须要先手动创建此目录 proxy_headers_hash_max_size 51200; proxy_headers_hash_bucket_size 6400; ####################################################### } #设定查看 nginx 状态的地址 location /nginxStatus { stub_status on; access_log on; auth_basic \\"nginxStatus\\"; auth_basic_user_file conf/htpasswd; #htpasswd 文件的内容可以用 apache 提供的 htpasswd 工具来产生。 } #本地动静分离反向代理配置 #所有 jsp 的页面均交由 tomcat 或 resin 处理 location ~ .(jsp|jspx|do)?$ { proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://127.0.0.1:8080; } #所有静态文件由 nginx 直接读取不经过 tomcat 或 resin location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|pdf|xls|mp3|wma)$ { expires 15d; } location ~ .*.(js|css)?$ { expires 1h; } } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-24T23:49:46.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"DevOps"}],["meta",{"property":"article:tag","content":"Nginx"}],["meta",{"property":"article:published_time","content":"2020-02-02T17:54:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-24T23:49:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Nginx 配置\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-02-02T17:54:00.000Z\\",\\"dateModified\\":\\"2025-09-24T23:49:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"配置文件实例","slug":"配置文件实例","link":"#配置文件实例","children":[]},{"level":2,"title":"基本规则","slug":"基本规则","link":"#基本规则","children":[{"level":3,"title":"管理 Nginx 配置","slug":"管理-nginx-配置","link":"#管理-nginx-配置","children":[]},{"level":3,"title":"重加载 Nginx 配置","slug":"重加载-nginx-配置","link":"#重加载-nginx-配置","children":[]},{"level":3,"title":"监听 80 和 443 端口","slug":"监听-80-和-443-端口","link":"#监听-80-和-443-端口","children":[]},{"level":3,"title":"显示指定监听的地址和端口","slug":"显示指定监听的地址和端口","link":"#显示指定监听的地址和端口","children":[]},{"level":3,"title":"防止使用未定义的服务器名称处理请求","slug":"防止使用未定义的服务器名称处理请求","link":"#防止使用未定义的服务器名称处理请求","children":[]},{"level":3,"title":"不要在 listen 或 upstream 中使用 hostname","slug":"不要在-listen-或-upstream-中使用-hostname","link":"#不要在-listen-或-upstream-中使用-hostname","children":[]},{"level":3,"title":"指令中只配置一个 SSL","slug":"指令中只配置一个-ssl","link":"#指令中只配置一个-ssl","children":[]},{"level":3,"title":"使用 geo/map 模块替代 allow/deny","slug":"使用-geo-map-模块替代-allow-deny","link":"#使用-geo-map-模块替代-allow-deny","children":[]},{"level":3,"title":"Map 所有事物","slug":"map-所有事物","link":"#map-所有事物","children":[]},{"level":3,"title":"为所有未匹配的路径设置根路径","slug":"为所有未匹配的路径设置根路径","link":"#为所有未匹配的路径设置根路径","children":[]},{"level":3,"title":"使用 return 指令进行 URL 重定向（301、302）","slug":"使用-return-指令进行-url-重定向-301、302","link":"#使用-return-指令进行-url-重定向-301、302","children":[]},{"level":3,"title":"配置日志轮换策略","slug":"配置日志轮换策略","link":"#配置日志轮换策略","children":[]},{"level":3,"title":"不要重复索引指令，只能在 http 块中使用","slug":"不要重复索引指令-只能在-http-块中使用","link":"#不要重复索引指令-只能在-http-块中使用","children":[]}]},{"level":2,"title":"Debugging","slug":"debugging","link":"#debugging","children":[{"level":3,"title":"使用自定义日志格式","slug":"使用自定义日志格式","link":"#使用自定义日志格式","children":[]},{"level":3,"title":"使用调试模式来跟踪意外行为","slug":"使用调试模式来跟踪意外行为","link":"#使用调试模式来跟踪意外行为","children":[]},{"level":3,"title":"核心转储","slug":"核心转储","link":"#核心转储","children":[]}]},{"level":2,"title":"性能","slug":"性能","link":"#性能","children":[{"level":3,"title":"工作进程数","slug":"工作进程数","link":"#工作进程数","children":[]},{"level":3,"title":"最大连接数","slug":"最大连接数","link":"#最大连接数","children":[]},{"level":3,"title":"使用 HTTP/2","slug":"使用-http-2","link":"#使用-http-2","children":[]},{"level":3,"title":"维护 SSL 会话","slug":"维护-ssl-会话","link":"#维护-ssl-会话","children":[]},{"level":3,"title":"避免使用 if 检查 server_name","slug":"避免使用-if-检查-server-name","link":"#避免使用-if-检查-server-name","children":[]},{"level":3,"title":"使用 $request_uri 来避免使用正则表达式","slug":"使用-request-uri-来避免使用正则表达式","link":"#使用-request-uri-来避免使用正则表达式","children":[]},{"level":3,"title":"使用 try_files 指令确认文件是否存在","slug":"使用-try-files-指令确认文件是否存在","link":"#使用-try-files-指令确认文件是否存在","children":[]},{"level":3,"title":"使用 return 代替 rewrite 来做重定向","slug":"使用-return-代替-rewrite-来做重定向","link":"#使用-return-代替-rewrite-来做重定向","children":[]},{"level":3,"title":"开启 PCRE JIT 来加速正则表达式处理","slug":"开启-pcre-jit-来加速正则表达式处理","link":"#开启-pcre-jit-来加速正则表达式处理","children":[]}]},{"level":2,"title":"Hardening","slug":"hardening","link":"#hardening","children":[{"level":3,"title":"🔰 Always keep Nginx up-to-date","slug":"always-keep-nginx-up-to-date","link":"#always-keep-nginx-up-to-date","children":[]},{"level":3,"title":"🔰 Run as an unprivileged user","slug":"run-as-an-unprivileged-user","link":"#run-as-an-unprivileged-user","children":[]},{"level":3,"title":"🔰 Disable unnecessary modules","slug":"disable-unnecessary-modules","link":"#disable-unnecessary-modules","children":[]},{"level":3,"title":"🔰 Protect sensitive resources","slug":"protect-sensitive-resources","link":"#protect-sensitive-resources","children":[]},{"level":3,"title":"🔰 Hide Nginx version number","slug":"hide-nginx-version-number","link":"#hide-nginx-version-number","children":[]},{"level":3,"title":"🔰 Hide Nginx server signature","slug":"hide-nginx-server-signature","link":"#hide-nginx-server-signature","children":[]},{"level":3,"title":"🔰 Hide upstream proxy headers","slug":"hide-upstream-proxy-headers","link":"#hide-upstream-proxy-headers","children":[]},{"level":3,"title":"🔰 Force all connections over TLS","slug":"force-all-connections-over-tls","link":"#force-all-connections-over-tls","children":[]},{"level":3,"title":"🔰 Use only the latest supported OpenSSL version","slug":"use-only-the-latest-supported-openssl-version","link":"#use-only-the-latest-supported-openssl-version","children":[]},{"level":3,"title":"🔰 Use min. 2048-bit private keys","slug":"use-min-2048-bit-private-keys","link":"#use-min-2048-bit-private-keys","children":[]},{"level":3,"title":"🔰 Keep only TLS 1.3 and TLS 1.2","slug":"keep-only-tls-1-3-and-tls-1-2","link":"#keep-only-tls-1-3-and-tls-1-2","children":[]},{"level":3,"title":"🔰 Use only strong ciphers","slug":"use-only-strong-ciphers","link":"#use-only-strong-ciphers","children":[]},{"level":3,"title":"🔰 Use more secure ECDH Curve","slug":"use-more-secure-ecdh-curve","link":"#use-more-secure-ecdh-curve","children":[]},{"level":3,"title":"🔰 Use strong Key Exchange with Perfect Forward Secrecy","slug":"use-strong-key-exchange-with-perfect-forward-secrecy","link":"#use-strong-key-exchange-with-perfect-forward-secrecy","children":[]},{"level":3,"title":"🔰 Prevent Replay Attacks on Zero Round-Trip Time","slug":"prevent-replay-attacks-on-zero-round-trip-time","link":"#prevent-replay-attacks-on-zero-round-trip-time","children":[]},{"level":3,"title":"🔰 Defend against the BEAST attack","slug":"defend-against-the-beast-attack","link":"#defend-against-the-beast-attack","children":[]},{"level":3,"title":"🔰 Mitigation of CRIME/BREACH attacks","slug":"mitigation-of-crime-breach-attacks","link":"#mitigation-of-crime-breach-attacks","children":[]},{"level":3,"title":"🔰 HTTP Strict Transport Security","slug":"http-strict-transport-security","link":"#http-strict-transport-security","children":[]},{"level":3,"title":"🔰 Reduce XSS risks (Content-Security-Policy)","slug":"reduce-xss-risks-content-security-policy","link":"#reduce-xss-risks-content-security-policy","children":[]},{"level":3,"title":"🔰 Control the behaviour of the Referer header (Referrer-Policy)","slug":"control-the-behaviour-of-the-referer-header-referrer-policy","link":"#control-the-behaviour-of-the-referer-header-referrer-policy","children":[]},{"level":3,"title":"🔰 Provide clickjacking protection (X-Frame-Options)","slug":"provide-clickjacking-protection-x-frame-options","link":"#provide-clickjacking-protection-x-frame-options","children":[]},{"level":3,"title":"🔰 Prevent some categories of XSS attacks (X-XSS-Protection)","slug":"prevent-some-categories-of-xss-attacks-x-xss-protection","link":"#prevent-some-categories-of-xss-attacks-x-xss-protection","children":[]},{"level":3,"title":"🔰 Prevent Sniff Mimetype middleware (X-Content-Type-Options)","slug":"prevent-sniff-mimetype-middleware-x-content-type-options","link":"#prevent-sniff-mimetype-middleware-x-content-type-options","children":[]},{"level":3,"title":"🔰 Deny the use of browser features (Feature-Policy)","slug":"deny-the-use-of-browser-features-feature-policy","link":"#deny-the-use-of-browser-features-feature-policy","children":[]},{"level":3,"title":"🔰 Reject unsafe HTTP methods","slug":"reject-unsafe-http-methods","link":"#reject-unsafe-http-methods","children":[]},{"level":3,"title":"🔰 Prevent caching of sensitive data","slug":"prevent-caching-of-sensitive-data","link":"#prevent-caching-of-sensitive-data","children":[]},{"level":3,"title":"🔰 Control Buffer Overflow attacks","slug":"control-buffer-overflow-attacks","link":"#control-buffer-overflow-attacks","children":[]},{"level":3,"title":"🔰 Mitigating Slow HTTP DoS attacks (Closing Slow Connections)","slug":"mitigating-slow-http-dos-attacks-closing-slow-connections","link":"#mitigating-slow-http-dos-attacks-closing-slow-connections","children":[]}]},{"level":2,"title":"反向代理","slug":"反向代理","link":"#反向代理","children":[{"level":3,"title":"使用与后端协议兼容的 pass 指令","slug":"使用与后端协议兼容的-pass-指令","link":"#使用与后端协议兼容的-pass-指令","children":[]},{"level":3,"title":"小心 proxy_pass 指令中的斜杠","slug":"小心-proxy-pass-指令中的斜杠","link":"#小心-proxy-pass-指令中的斜杠","children":[]},{"level":3,"title":"正确设置 X-Forwarded-For 头的值","slug":"正确设置-x-forwarded-for-头的值","link":"#正确设置-x-forwarded-for-头的值","children":[]},{"level":3,"title":"不要在反向代理后面使用带有 $scheme 的 X-Forwarded-Proto","slug":"不要在反向代理后面使用带有-scheme-的-x-forwarded-proto","link":"#不要在反向代理后面使用带有-scheme-的-x-forwarded-proto","children":[]},{"level":3,"title":"prefix 使用不带 X- 前缀的自定义头","slug":"prefix-使用不带-x-前缀的自定义头","link":"#prefix-使用不带-x-前缀的自定义头","children":[]}]},{"level":2,"title":"负载均衡","slug":"负载均衡","link":"#负载均衡","children":[{"level":3,"title":"健康检查","slug":"健康检查","link":"#健康检查","children":[]},{"level":3,"title":"down 参数","slug":"down-参数","link":"#down-参数","children":[]}]},{"level":2,"title":"安全","slug":"安全","link":"#安全","children":[{"level":3,"title":"防盗链","slug":"防盗链","link":"#防盗链","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1758757786000,"updatedTime":1758757786000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":1}]},"readingTime":{"minutes":66.69,"words":20006},"filePathRelative":"04.DevOps/工具/Nginx/Nginx_配置.md","localizedDate":"2020年2月2日","excerpt":"<h1> Nginx 配置</h1>\\n<blockquote>\\n<p>Nginx 的默认配置文件为 <code>nginx.conf</code>。</p>\\n<ul>\\n<li><code>nginx -c xxx.conf</code> - 以指定的文件作为配置文件，启动 Nginx。</li>\\n</ul>\\n</blockquote>\\n<h2> 配置文件实例</h2>\\n<p>以下为一个 <code>nginx.conf</code> 配置文件实例：</p>\\n<div class=\\"language-nginx line-numbers-mode\\" data-ext=\\"nginx\\"><pre class=\\"language-nginx\\"><code><span class=\\"token comment\\">#定义 nginx 运行的用户和用户组</span>\\n<span class=\\"token directive\\"><span class=\\"token keyword\\">user</span> www www</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">#nginx 进程数，建议设置为等于 CPU 总核心数。</span>\\n<span class=\\"token directive\\"><span class=\\"token keyword\\">worker_processes</span> <span class=\\"token number\\">8</span></span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">#nginx 默认没有开启利用多核 CPU, 通过增加 worker_cpu_affinity 配置参数来充分利用多核 CPU 以下是 8 核的配置参数</span>\\n<span class=\\"token directive\\"><span class=\\"token keyword\\">worker_cpu_affinity</span> <span class=\\"token number\\">00000001</span> <span class=\\"token number\\">00000010</span> <span class=\\"token number\\">00000100</span> <span class=\\"token number\\">00001000</span> <span class=\\"token number\\">00010000</span> <span class=\\"token number\\">00100000</span> <span class=\\"token number\\">01000000</span> <span class=\\"token number\\">10000000</span></span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]</span>\\n<span class=\\"token directive\\"><span class=\\"token keyword\\">error_log</span> /var/log/nginx/error.log info</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">#进程文件</span>\\n<span class=\\"token directive\\"><span class=\\"token keyword\\">pid</span> /var/run/nginx.pid</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">#一个 nginx 进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值 ulimit -n）与 nginx 进程数相除，但是 nginx 分配请求并不均匀，所以建议与 ulimit -n 的值保持一致。</span>\\n<span class=\\"token directive\\"><span class=\\"token keyword\\">worker_rlimit_nofile</span> <span class=\\"token number\\">65535</span></span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">#工作模式与连接数上限</span>\\n<span class=\\"token directive\\"><span class=\\"token keyword\\">events</span></span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">#参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll 模型是 Linux 2.6 以上版本内核中的高性能网络 I/O 模型，如果跑在 FreeBSD 上面，就用 kqueue 模型。</span>\\n    <span class=\\"token comment\\">#epoll 是多路复用 IO(I/O Multiplexing) 中的一种方式，但是仅用于 linux2.6 以上内核，可以大大提高 nginx 的性能</span>\\n    <span class=\\"token directive\\"><span class=\\"token keyword\\">use</span> epoll</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">############################################################################</span>\\n    <span class=\\"token comment\\">#单个后台 worker process 进程的最大并发链接数</span>\\n    <span class=\\"token comment\\">#事件模块指令，定义 nginx 每个进程最大连接数，默认 1024。最大客户连接数由 worker_processes 和 worker_connections 决定</span>\\n    <span class=\\"token comment\\">#即 max_client=worker_processes*worker_connections, 在作为反向代理时：max_client=worker_processes*worker_connections / 4</span>\\n    <span class=\\"token directive\\"><span class=\\"token keyword\\">worker_connections</span> <span class=\\"token number\\">65535</span></span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">############################################################################</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">#设定 http 服务器</span>\\n<span class=\\"token directive\\"><span class=\\"token keyword\\">http</span></span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token directive\\"><span class=\\"token keyword\\">include</span> mime.types</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">#文件扩展名与文件类型映射表</span>\\n    <span class=\\"token directive\\"><span class=\\"token keyword\\">default_type</span> application/octet-stream</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">#默认文件类型</span>\\n    <span class=\\"token comment\\">#charset utf-8; #默认编码</span>\\n\\n    <span class=\\"token directive\\"><span class=\\"token keyword\\">server_names_hash_bucket_size</span> <span class=\\"token number\\">128</span></span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">#服务器名字的 hash 表大小</span>\\n    <span class=\\"token directive\\"><span class=\\"token keyword\\">client_header_buffer_size</span> <span class=\\"token number\\">32k</span></span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">#上传文件大小限制</span>\\n    <span class=\\"token directive\\"><span class=\\"token keyword\\">large_client_header_buffers</span> <span class=\\"token number\\">4</span> <span class=\\"token number\\">64k</span></span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">#设定请求缓</span>\\n    <span class=\\"token directive\\"><span class=\\"token keyword\\">client_max_body_size</span> <span class=\\"token number\\">8m</span></span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">#设定请求缓</span>\\n    <span class=\\"token directive\\"><span class=\\"token keyword\\">sendfile</span> <span class=\\"token boolean\\">on</span></span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">#开启高效文件传输模式，sendfile 指令指定 nginx 是否调用 sendfile 函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘 IO 重负载应用，可设置为 off，以平衡磁盘与网络 I/O 处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成 off。</span>\\n    <span class=\\"token directive\\"><span class=\\"token keyword\\">autoindex</span> <span class=\\"token boolean\\">on</span></span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">#开启目录列表访问，合适下载服务器，默认关闭。</span>\\n    <span class=\\"token directive\\"><span class=\\"token keyword\\">tcp_nopush</span> <span class=\\"token boolean\\">on</span></span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">#防止网络阻塞</span>\\n    <span class=\\"token directive\\"><span class=\\"token keyword\\">tcp_nodelay</span> <span class=\\"token boolean\\">on</span></span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">#防止网络阻塞</span>\\n\\n    <span class=\\"token comment\\">##连接客户端超时时间各种参数设置##</span>\\n    <span class=\\"token directive\\"><span class=\\"token keyword\\">keepalive_timeout</span>  <span class=\\"token number\\">120</span></span><span class=\\"token punctuation\\">;</span>          <span class=\\"token comment\\">#单位是秒，客户端连接时时间，超时之后服务器端自动关闭该连接 如果 nginx 守护进程在这个等待的时间里，一直没有收到浏览发过来 http 请求，则关闭这个 http 连接</span>\\n    <span class=\\"token directive\\"><span class=\\"token keyword\\">client_header_timeout</span> <span class=\\"token number\\">10</span></span><span class=\\"token punctuation\\">;</span>        <span class=\\"token comment\\">#客户端请求头的超时时间</span>\\n    <span class=\\"token directive\\"><span class=\\"token keyword\\">client_body_timeout</span> <span class=\\"token number\\">10</span></span><span class=\\"token punctuation\\">;</span>          <span class=\\"token comment\\">#客户端请求主体超时时间</span>\\n    <span class=\\"token directive\\"><span class=\\"token keyword\\">reset_timedout_connection</span> <span class=\\"token boolean\\">on</span></span><span class=\\"token punctuation\\">;</span>    <span class=\\"token comment\\">#告诉 nginx 关闭不响应的客户端连接。这将会释放那个客户端所占有的内存空间</span>\\n    <span class=\\"token directive\\"><span class=\\"token keyword\\">send_timeout</span> <span class=\\"token number\\">10</span></span><span class=\\"token punctuation\\">;</span>                 <span class=\\"token comment\\">#客户端响应超时时间，在两次客户端读取操作之间。如果在这段时间内，客户端没有读取任何数据，nginx 就会关闭连接</span>\\n    <span class=\\"token comment\\">################################</span>\\n\\n    <span class=\\"token comment\\">#FastCGI 相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。</span>\\n    <span class=\\"token directive\\"><span class=\\"token keyword\\">fastcgi_connect_timeout</span> <span class=\\"token number\\">300</span></span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token directive\\"><span class=\\"token keyword\\">fastcgi_send_timeout</span> <span class=\\"token number\\">300</span></span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token directive\\"><span class=\\"token keyword\\">fastcgi_read_timeout</span> <span class=\\"token number\\">300</span></span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token directive\\"><span class=\\"token keyword\\">fastcgi_buffer_size</span> <span class=\\"token number\\">64k</span></span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token directive\\"><span class=\\"token keyword\\">fastcgi_buffers</span> <span class=\\"token number\\">4</span> <span class=\\"token number\\">64k</span></span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token directive\\"><span class=\\"token keyword\\">fastcgi_busy_buffers_size</span> <span class=\\"token number\\">128k</span></span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token directive\\"><span class=\\"token keyword\\">fastcgi_temp_file_write_size</span> <span class=\\"token number\\">128k</span></span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">###作为代理缓存服务器设置#######</span>\\n    <span class=\\"token comment\\">###先写到 temp 再移动到 cache</span>\\n    <span class=\\"token comment\\">#proxy_cache_path /var/tmp/nginx/proxy_cache levels=1:2 keys_zone=cache_one:512m inactive=10m max_size=64m;</span>\\n    <span class=\\"token comment\\">###以上 proxy_temp 和 proxy_cache 需要在同一个分区中</span>\\n    <span class=\\"token comment\\">###levels=1:2 表示缓存级别，表示缓存目录的第一级目录是 1 个字符，第二级目录是 2 个字符 keys_zone=cache_one:128m 缓存空间起名为 cache_one 大小为 512m</span>\\n    <span class=\\"token comment\\">###max_size=64m 表示单个文件超过 128m 就不缓存了  inactive=10m 表示缓存的数据，10 分钟内没有被访问过就删除</span>\\n    <span class=\\"token comment\\">#########end####################</span>\\n\\n    <span class=\\"token comment\\">#####对传输文件压缩###########</span>\\n    <span class=\\"token comment\\">#gzip 模块设置</span>\\n    <span class=\\"token directive\\"><span class=\\"token keyword\\">gzip</span> <span class=\\"token boolean\\">on</span></span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">#开启 gzip 压缩输出</span>\\n    <span class=\\"token directive\\"><span class=\\"token keyword\\">gzip_min_length</span> <span class=\\"token number\\">1k</span></span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">#最小压缩文件大小</span>\\n    <span class=\\"token directive\\"><span class=\\"token keyword\\">gzip_buffers</span> <span class=\\"token number\\">4</span> <span class=\\"token number\\">16k</span></span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">#压缩缓冲区</span>\\n    <span class=\\"token directive\\"><span class=\\"token keyword\\">gzip_http_version</span> 1.0</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">#压缩版本（默认 1.1，前端如果是 squid2.5 请使用 1.0）</span>\\n    <span class=\\"token directive\\"><span class=\\"token keyword\\">gzip_comp_level</span> <span class=\\"token number\\">2</span></span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">#压缩等级，gzip 压缩比，1 为最小，处理最快；9 为压缩比最大，处理最慢，传输速度最快，也最消耗 CPU；</span>\\n    <span class=\\"token directive\\"><span class=\\"token keyword\\">gzip_types</span> text/plain application/x-javascript text/css application/xml</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">#压缩类型，默认就已经包含 text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个 warn。</span>\\n    <span class=\\"token directive\\"><span class=\\"token keyword\\">gzip_vary</span> <span class=\\"token boolean\\">on</span></span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">##############################</span>\\n\\n    <span class=\\"token comment\\">#limit_zone crawler $binary_remote_addr 10m; #开启限制 IP 连接数的时候需要使用</span>\\n\\n    <span class=\\"token directive\\"><span class=\\"token keyword\\">upstream</span> blog.ha97.com</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">#upstream 的负载均衡，weight 是权重，可以根据机器配置定义权重。weigth 参数表示权值，权值越高被分配到的几率越大。</span>\\n        <span class=\\"token directive\\"><span class=\\"token keyword\\">server</span> 192.168.80.121:80 weight=3</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token directive\\"><span class=\\"token keyword\\">server</span> 192.168.80.122:80 weight=2</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token directive\\"><span class=\\"token keyword\\">server</span> 192.168.80.123:80 weight=3</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token comment\\">#虚拟主机的配置</span>\\n    <span class=\\"token directive\\"><span class=\\"token keyword\\">server</span></span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">#监听端口</span>\\n        <span class=\\"token directive\\"><span class=\\"token keyword\\">listen</span> <span class=\\"token number\\">80</span></span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token comment\\">#############https##################</span>\\n        <span class=\\"token comment\\">#listen 443 ssl;</span>\\n        <span class=\\"token comment\\">#ssl_certificate /opt/https/xxxxxx.crt;</span>\\n        <span class=\\"token comment\\">#ssl_certificate_key /opt/https/xxxxxx.key;</span>\\n        <span class=\\"token comment\\">#ssl_protocols SSLv3 TLSv1;</span>\\n        <span class=\\"token comment\\">#ssl_ciphers HIGH:!ADH:!EXPORT57:RC4+RSA:+MEDIUM;</span>\\n        <span class=\\"token comment\\">#ssl_prefer_server_ciphers on;</span>\\n        <span class=\\"token comment\\">#ssl_session_cache shared:SSL:2m;</span>\\n        <span class=\\"token comment\\">#ssl_session_timeout 5m;</span>\\n        <span class=\\"token comment\\">####################################end</span>\\n\\n        <span class=\\"token comment\\">#域名可以有多个，用空格隔开</span>\\n        <span class=\\"token directive\\"><span class=\\"token keyword\\">server_name</span> www.ha97.com ha97.com</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token directive\\"><span class=\\"token keyword\\">index</span> index.html index.htm index.php</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token directive\\"><span class=\\"token keyword\\">root</span> /data/www/ha97</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token directive\\"><span class=\\"token keyword\\">location</span> ~ .*.(php|php5)?$</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token directive\\"><span class=\\"token keyword\\">fastcgi_pass</span> 127.0.0.1:9000</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token directive\\"><span class=\\"token keyword\\">fastcgi_index</span> index.php</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token directive\\"><span class=\\"token keyword\\">include</span> fastcgi.conf</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token comment\\">#图片缓存时间设置</span>\\n        <span class=\\"token directive\\"><span class=\\"token keyword\\">location</span> ~ .*.(gif|jpg|jpeg|png|bmp|swf)$</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token directive\\"><span class=\\"token keyword\\">expires</span> <span class=\\"token number\\">10d</span></span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token comment\\">#JS 和 CSS 缓存时间设置</span>\\n        <span class=\\"token directive\\"><span class=\\"token keyword\\">location</span> ~ .*.(js|css)?$</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token directive\\"><span class=\\"token keyword\\">expires</span> <span class=\\"token number\\">1h</span></span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token comment\\">#日志格式设定</span>\\n        <span class=\\"token directive\\"><span class=\\"token keyword\\">log_format</span> access <span class=\\"token string\\">'<span class=\\"token variable\\">$remote_addr</span> - <span class=\\"token variable\\">$remote_user</span> [<span class=\\"token variable\\">$time_local]</span> \\"<span class=\\"token variable\\">$request</span>\\" '</span> <span class=\\"token string\\">'<span class=\\"token variable\\">$status</span> <span class=\\"token variable\\">$body_bytes_sent</span> \\"<span class=\\"token variable\\">$http_referer</span>\\" '</span> <span class=\\"token string\\">'\\"<span class=\\"token variable\\">$http_user_agent</span>\\" <span class=\\"token variable\\">$http_x_forwarded_for</span>'</span></span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token comment\\">#定义本虚拟主机的访问日志</span>\\n        <span class=\\"token directive\\"><span class=\\"token keyword\\">access_log</span> /var/log/nginx/ha97access.log access</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token comment\\">#对 \\"/\\" 启用反向代理</span>\\n        <span class=\\"token directive\\"><span class=\\"token keyword\\">location</span> /</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token directive\\"><span class=\\"token keyword\\">proxy_pass</span> http://127.0.0.1:88</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token directive\\"><span class=\\"token keyword\\">proxy_redirect</span> <span class=\\"token boolean\\">off</span></span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token directive\\"><span class=\\"token keyword\\">proxy_set_header</span> X-Real-IP <span class=\\"token variable\\">$remote_addr</span></span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token comment\\">#后端的 Web 服务器可以通过 X-Forwarded-For 获取用户真实 IP</span>\\n            <span class=\\"token directive\\"><span class=\\"token keyword\\">proxy_set_header</span> X-Forwarded-For <span class=\\"token variable\\">$proxy_add_x_forwarded_for</span></span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token comment\\">#以下是一些反向代理的配置，可选。</span>\\n            <span class=\\"token directive\\"><span class=\\"token keyword\\">proxy_set_header</span> Host <span class=\\"token variable\\">$host</span></span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token directive\\"><span class=\\"token keyword\\">client_max_body_size</span> <span class=\\"token number\\">10m</span></span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">#允许客户端请求的最大单文件字节数</span>\\n            <span class=\\"token directive\\"><span class=\\"token keyword\\">client_body_buffer_size</span> <span class=\\"token number\\">128k</span></span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">#缓冲区代理缓冲用户端请求的最大字节数，</span>\\n\\n            <span class=\\"token comment\\">##代理设置 以下设置是 nginx 和后端服务器之间通讯的设置##</span>\\n            <span class=\\"token directive\\"><span class=\\"token keyword\\">proxy_connect_timeout</span> <span class=\\"token number\\">90</span></span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">#nginx 跟后端服务器连接超时时间（代理连接超时）</span>\\n            <span class=\\"token directive\\"><span class=\\"token keyword\\">proxy_send_timeout</span> <span class=\\"token number\\">90</span></span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">#后端服务器数据回传时间（代理发送超时）</span>\\n            <span class=\\"token directive\\"><span class=\\"token keyword\\">proxy_read_timeout</span> <span class=\\"token number\\">90</span></span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">#连接成功后，后端服务器响应时间（代理接收超时）</span>\\n            <span class=\\"token directive\\"><span class=\\"token keyword\\">proxy_buffering</span> <span class=\\"token boolean\\">on</span></span><span class=\\"token punctuation\\">;</span>    <span class=\\"token comment\\">#该指令开启从后端被代理服务器的响应内容缓冲 此参数开启后 proxy_buffers 和 proxy_busy_buffers_size 参数才会起作用</span>\\n            <span class=\\"token directive\\"><span class=\\"token keyword\\">proxy_buffer_size</span> <span class=\\"token number\\">4k</span></span><span class=\\"token punctuation\\">;</span>  <span class=\\"token comment\\">#设置代理服务器（nginx）保存用户头信息的缓冲区大小</span>\\n            <span class=\\"token directive\\"><span class=\\"token keyword\\">proxy_buffers</span> <span class=\\"token number\\">4</span> <span class=\\"token number\\">32k</span></span><span class=\\"token punctuation\\">;</span>   <span class=\\"token comment\\">#proxy_buffers 缓冲区，网页平均在 32k 以下的设置</span>\\n            <span class=\\"token directive\\"><span class=\\"token keyword\\">proxy_busy_buffers_size</span> <span class=\\"token number\\">64k</span></span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">#高负荷下缓冲大小（proxy_buffers*2）</span>\\n            <span class=\\"token directive\\"><span class=\\"token keyword\\">proxy_max_temp_file_size</span> <span class=\\"token number\\">2048m</span></span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">#默认 1024m, 该指令用于设置当网页内容大于 proxy_buffers 时，临时文件大小的最大值。如果文件大于这个值，它将从 upstream 服务器同步地传递请求，而不是缓冲到磁盘</span>\\n            <span class=\\"token directive\\"><span class=\\"token keyword\\">proxy_temp_file_write_size</span> <span class=\\"token number\\">512k</span></span><span class=\\"token punctuation\\">;</span> 这是当被代理服务器的响应过大时 <span class=\\"token directive\\"><span class=\\"token keyword\\">nginx</span> 一次性写入临时文件的数据量。\\n            proxy_temp_path  /var/tmp/nginx/proxy_temp</span><span class=\\"token punctuation\\">;</span>    <span class=\\"token comment\\">##定义缓冲存储目录，之前必须要先手动创建此目录</span>\\n            <span class=\\"token directive\\"><span class=\\"token keyword\\">proxy_headers_hash_max_size</span> <span class=\\"token number\\">51200</span></span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token directive\\"><span class=\\"token keyword\\">proxy_headers_hash_bucket_size</span> <span class=\\"token number\\">6400</span></span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token comment\\">#######################################################</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token comment\\">#设定查看 nginx 状态的地址</span>\\n        <span class=\\"token directive\\"><span class=\\"token keyword\\">location</span> /nginxStatus</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token directive\\"><span class=\\"token keyword\\">stub_status</span> <span class=\\"token boolean\\">on</span></span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token directive\\"><span class=\\"token keyword\\">access_log</span> <span class=\\"token boolean\\">on</span></span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token directive\\"><span class=\\"token keyword\\">auth_basic</span> <span class=\\"token string\\">\\"nginxStatus\\"</span></span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token directive\\"><span class=\\"token keyword\\">auth_basic_user_file</span> conf/htpasswd</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token comment\\">#htpasswd 文件的内容可以用 apache 提供的 htpasswd 工具来产生。</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token comment\\">#本地动静分离反向代理配置</span>\\n        <span class=\\"token comment\\">#所有 jsp 的页面均交由 tomcat 或 resin 处理</span>\\n        <span class=\\"token directive\\"><span class=\\"token keyword\\">location</span> ~ .(jsp|jspx|do)?$</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token directive\\"><span class=\\"token keyword\\">proxy_set_header</span> Host <span class=\\"token variable\\">$host</span></span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token directive\\"><span class=\\"token keyword\\">proxy_set_header</span> X-Real-IP <span class=\\"token variable\\">$remote_addr</span></span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token directive\\"><span class=\\"token keyword\\">proxy_set_header</span> X-Forwarded-For <span class=\\"token variable\\">$proxy_add_x_forwarded_for</span></span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token directive\\"><span class=\\"token keyword\\">proxy_pass</span> http://127.0.0.1:8080</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token comment\\">#所有静态文件由 nginx 直接读取不经过 tomcat 或 resin</span>\\n        <span class=\\"token directive\\"><span class=\\"token keyword\\">location</span> ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|pdf|xls|mp3|wma)$</span>\\n        <span class=\\"token punctuation\\">{</span> <span class=\\"token directive\\"><span class=\\"token keyword\\">expires</span> <span class=\\"token number\\">15d</span></span><span class=\\"token punctuation\\">;</span> <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token directive\\"><span class=\\"token keyword\\">location</span> ~ .*.(js|css)?$</span>\\n        <span class=\\"token punctuation\\">{</span> <span class=\\"token directive\\"><span class=\\"token keyword\\">expires</span> <span class=\\"token number\\">1h</span></span><span class=\\"token punctuation\\">;</span> <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
