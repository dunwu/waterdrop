import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as s,c as l,a as t,b as i,d,e as r}from"./app-1d030542.js";const o={},p=r(`<h1 id="《高性能-mysql》笔记" tabindex="-1"><a class="header-anchor" href="#《高性能-mysql》笔记" aria-hidden="true">#</a> 《高性能 MySQL》笔记</h1><blockquote><p>部分章节内容更偏向于 DBA 的工作，在实际的开发工作中相关性较少，直接略过。</p></blockquote><h2 id="第一章-mysql-架构与历史" tabindex="-1"><a class="header-anchor" href="#第一章-mysql-架构与历史" aria-hidden="true">#</a> 第一章 MySQL 架构与历史</h2><h3 id="mysql-逻辑架构" tabindex="-1"><a class="header-anchor" href="#mysql-逻辑架构" aria-hidden="true">#</a> MySQL 逻辑架构</h3><p>MySQL 逻辑架构分为三层：</p><ul><li>连接层 - 连接管理、认证管理</li><li>核心服务层 - 缓存、解析、优化、执行</li><li>存储引擎层 - 数据实际读写</li></ul><h3 id="并发控制" tabindex="-1"><a class="header-anchor" href="#并发控制" aria-hidden="true">#</a> 并发控制</h3><p>解决并发问题的最常见方式是加锁。</p><ul><li><p>排它锁（exclusive lock） - 也叫写锁（write lock）。<strong>锁一次只能被一个线程所持有</strong>。</p></li><li><p>共享锁（shared lock） - 也叫读锁（read lock）。<strong>锁可被多个线程所持有</strong>。</p></li></ul><p>加锁、解锁，检查锁是否已释放，都需要消耗资源，因此锁定的粒度越小，并发度越高。</p><p>MySQL 中支持多种锁粒度：</p><ul><li>表级锁（table lock） - 锁定整张表，会阻塞其他用户对该表的读写操作。</li><li>行级锁（row lock） - 可以最大程度的支持并发处理。</li></ul><h3 id="事务" tabindex="-1"><a class="header-anchor" href="#事务" aria-hidden="true">#</a> 事务</h3><p>事务就是一组原子性的 SQL 查询。事务内的语句，要么全部执行成功，要么全部执行失败。</p><h4 id="acid" tabindex="-1"><a class="header-anchor" href="#acid" aria-hidden="true">#</a> ACID</h4><p>ACID 是数据库事务正确执行的四个基本要素。</p><ul><li><strong>原子性 (Atomicity)</strong>：一个事务被视为不可分割的最小工作单元，一个事务的所有操作要么全部提交成功，要么全部失败回滚。</li><li><strong>一致性 (Consistency)</strong>：数据库总是从一个一致的状态到另一个一致的状态。事务没有提交，事务的修改就不会保存到数据库中。</li><li><strong>隔离性 (isolation)</strong>：通常来说，一个事务所作的操作在最终提交之前，对其他事务来说是不可见的。</li><li><strong>持久性 (durability)</strong>：一旦事务提交，则其所作的修改就会永久的保存到数据库中。</li></ul><h4 id="事务隔离级别" tabindex="-1"><a class="header-anchor" href="#事务隔离级别" aria-hidden="true">#</a> 事务隔离级别</h4><p>SQL 标准提出了四种“事务隔离级别”。事务隔离级别等级越高，越能保证数据的一致性和完整性，但是执行效率也越低。因此，设置数据库的事务隔离级别时需要做一下权衡。</p><p>事务隔离级别从低到高分别是：</p><ul><li><strong>“读未提交（read uncommitted）”</strong> - 是指，<strong>事务中的修改，即使没有提交，对其它事务也是可见的</strong>。 <ul><li><strong>读未提交存在脏读问题</strong>。“脏读（dirty read）”是指当前事务可以读取其他事务未提交的数据。</li></ul></li><li>**“读已提交（read committed）” ** - 是指，<strong>事务提交后，其他事务才能看到它的修改</strong>。换句话说，一个事务所做的修改在提交之前对其它事务是不可见的。 <ul><li><strong>读已提交解决了脏读的问题</strong>。</li><li><strong>读已提交存在不可重复读问题</strong>。“不可重复读（non-repeatable read）”是指一个事务内多次读取同一数据，过程中，该数据被其他事务所修改，导致当前事务多次读取的数据可能不一致。</li><li><strong>读已提交是大多数数据库的默认事务隔离级别</strong>，如 Oracle。</li></ul></li><li><strong>“可重复读（repeatable read）”</strong> - 是指：<strong>保证在同一个事务中多次读取同样数据的结果是一样的</strong>。 <ul><li><strong>可重复读解决了不可重复读问题</strong>。</li><li><strong>可重复读存在幻读问题</strong>。“幻读（phantom read）”是指一个事务内多次读取同一范围的数据过程中，其他事务在该数据范围新增了数据，导致当前事务未发现新增数据。</li><li><strong>可重复读是 InnoDB 存储引擎的默认事务隔离级别</strong>。</li></ul></li><li><strong>串行化（serializable ）</strong> - 是指，<strong>强制事务串行执行</strong>，对读取的每一行数据都加锁，一旦出现锁冲突，必须等前面的事务释放锁。 <ul><li><strong>串行化解决了幻读问题</strong>。由于强制事务串行执行，自然避免了所有的并发问题。</li><li><strong>串行化策略会在读取的每一行数据上都加锁</strong>，这可能导致大量的超时和锁竞争。这对于高并发应用基本上是不可接受的，所以一般不会采用这个级别。</li></ul></li></ul><p>事务隔离级别对并发一致性问题的解决情况：</p><table><thead><tr><th style="text-align:center;">隔离级别</th><th style="text-align:center;">丢失修改</th><th style="text-align:center;">脏读</th><th style="text-align:center;">不可重复读</th><th style="text-align:center;">幻读</th></tr></thead><tbody><tr><td style="text-align:center;">读未提交</td><td style="text-align:center;">✔️️️</td><td style="text-align:center;">❌</td><td style="text-align:center;">❌</td><td style="text-align:center;">❌</td></tr><tr><td style="text-align:center;">读已提交</td><td style="text-align:center;">✔️️️</td><td style="text-align:center;">✔️️️</td><td style="text-align:center;">❌</td><td style="text-align:center;">❌</td></tr><tr><td style="text-align:center;">可重复读</td><td style="text-align:center;">✔️️️</td><td style="text-align:center;">✔️️️</td><td style="text-align:center;">✔️️️</td><td style="text-align:center;">❌</td></tr><tr><td style="text-align:center;">可串行化</td><td style="text-align:center;">✔️️️</td><td style="text-align:center;">✔️️️</td><td style="text-align:center;">✔️️️</td><td style="text-align:center;">✔️️️</td></tr></tbody></table><h4 id="死锁" tabindex="-1"><a class="header-anchor" href="#死锁" aria-hidden="true">#</a> 死锁</h4><p>死锁是指两个或多个事务竞争同一资源，从而导致恶性循环的现象。多个事务视图以不同顺序锁定资源时，就可能会产生死锁；多个事务同时锁定同一资源时，也会产生死锁。</p><p>InnoDB 目前处理死锁的方法是<strong>将持有最少行级锁的事务进行回滚</strong>。</p><h4 id="事务日志" tabindex="-1"><a class="header-anchor" href="#事务日志" aria-hidden="true">#</a> 事务日志</h4><p>InnoDB 通过事务日志记录修改操作。事务日志的写入采用追加方式，因此是顺序 I/O，比随机 I/O 快很多。</p><p>事务日志持久化后，内存中被修改的数据由后台程序慢慢刷回磁盘，这称为预写日志（Write Ahead Logging，WAL）</p><p>如果数据修改以及记录到事务日志并持久化，此时系统崩溃，存储引擎可以在系统重启之后自动恢复数据。</p><h4 id="mysql-中的事务" tabindex="-1"><a class="header-anchor" href="#mysql-中的事务" aria-hidden="true">#</a> MySQL 中的事务</h4><p>MySQL 提供了两种事务存储引擎：InnoDB 和 NDB CLuster。</p><p>MySQL 默认采用自动提交模式（AUTOCOMMIT）。即如果不显式的声明一个事务，MySQL 会把每一个查询都当作一个事务来操作。</p><p>可以通过设置 AUTOCOMMIT 来启用或禁用自动提交模式。</p><p>可以通过执行 SET TRANSACTION ISOLATION LEVEL 来设置事务隔离级别。</p><p>InnoDB 采用两阶段锁定协议，在事务执行过程中，随时都可以执行锁定，锁只有在执行 COMMIT 或者 ROLLBACK 时才会释放，并且所有的锁都在一瞬间释放。</p><p>InnoDB 也支持通过特定语句显示加锁：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">// 先在表上加上 IS 锁，然后对读取的记录加 S 锁</span>
<span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">lock</span> <span class="token operator">in</span> <span class="token keyword">share</span> <span class="token keyword">mode</span><span class="token punctuation">;</span>

<span class="token comment">// 当前读：先在表上加上 IX 锁，然后对读取的记录加 X 锁</span>
<span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">for</span> <span class="token keyword">update</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="多版本并发控制" tabindex="-1"><a class="header-anchor" href="#多版本并发控制" aria-hidden="true">#</a> 多版本并发控制</h3><p>可以将 MVCC 视为行级锁的一个变种，它在很多情况下避免了加锁，因此开销更低。</p><p>MVCC 是通过保存数据在某个时刻的快照来实现的。也就是说，不管执行多久，每个事务看到的数据是一致的。根据事务开始时间不同， 每个事务对同一张表，同一时刻看到的数据可能是不一样的。</p><p>不同存储引擎实现 MVCC 的方式有所不同，典型的有乐观并发控制和悲观并发控制。</p><p>InnoDB 的 MVCC 是通过在每行记录后面保存两个隐藏列来实现。一个列保存了行的创建时间，一个是保存了过期时间。当然存储的不是实际的时间，而是系统版本号（system version number），每开始一个新事务，系统版本号都会自动递增。事务开始时刻的系统版本号作为事务的版本号，用来和查询到的每行记录的版本号作比较。</p><ul><li><strong>Select</strong> - InnoDB 会根据这两个条件来查询： <ul><li>只查找版本号小于或者等于当前事务的数据行，这样可以保证事务读取到的数据要么是在事务开始前就存在的，要么是自己插入或者修改的。</li><li>行的删除版本要么未定义，要么大于当前事务的版本号，这样可以保证读取到的数据在事务开始之前没有被删除。</li></ul></li><li><strong>Insert</strong> - InnoDB 为新插入的每一行数据保存当前的系统版本号为行版本号。</li><li><strong>Delete</strong> - InnoDB 为删除的每一行保存当前的版本号为行删除标识。</li><li><strong>Update</strong> - InnoDB 为插入一条新纪录，保存当前系统版本号为行版本号，同时保存当前系统的版本号到原来的行为行删除标识。</li></ul><p>MVCC 只在可重复读和读已提交两个隔离级别下工作。</p><h3 id="mysql-的存储引擎" tabindex="-1"><a class="header-anchor" href="#mysql-的存储引擎" aria-hidden="true">#</a> MySQL 的存储引擎</h3><p>Mysql 将每个数据库保存为数据目录下的一个子目录。建表时，MySQL 会在数据库子目录下创建一个和表同名的 .frm 文件保存表的定义。因为 MySQL 使用文件系统的目录和文件来保存数据库和表的定义，大小写敏感性和具体的平台密切相关：在 Windows 中，大小写不敏感；在 Linux 中，大小写敏感。</p><p>Mysql 常见存储引擎</p><ul><li>InnoDB - 默认事务引擎。</li><li>MyISAM - Mysql 5.1 及之前的默认引擎。</li><li>Archive</li><li>Memory</li><li>NDB</li></ul><h2 id="第二章-mysql-基准测试-略" tabindex="-1"><a class="header-anchor" href="#第二章-mysql-基准测试-略" aria-hidden="true">#</a> <s>第二章 MySQL 基准测试（略）</s></h2><h2 id="第三章-服务器性能剖析-略" tabindex="-1"><a class="header-anchor" href="#第三章-服务器性能剖析-略" aria-hidden="true">#</a> <s>第三章 服务器性能剖析（略）</s></h2><h2 id="第四章-schema-与数据类型优化" tabindex="-1"><a class="header-anchor" href="#第四章-schema-与数据类型优化" aria-hidden="true">#</a> 第四章 Schema 与数据类型优化</h2><h3 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h3><h4 id="整数类型" tabindex="-1"><a class="header-anchor" href="#整数类型" aria-hidden="true">#</a> 整数类型</h4><p>整数类型有可选的 <code>UNSIGNED</code> 属性，标识不允许负值，大致可以使正数的上限提高一倍。</p><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">大小</th><th style="text-align:left;">作用</th></tr></thead><tbody><tr><td style="text-align:left;"><code>TINYINT</code></td><td style="text-align:left;">1 字节</td><td style="text-align:left;">小整数值</td></tr><tr><td style="text-align:left;"><code>SMALLINT</code></td><td style="text-align:left;">2 字节</td><td style="text-align:left;">大整数值</td></tr><tr><td style="text-align:left;"><code>MEDIUMINT</code></td><td style="text-align:left;">3 字节</td><td style="text-align:left;">大整数值</td></tr><tr><td style="text-align:left;"><code>INT</code></td><td style="text-align:left;">4 字节</td><td style="text-align:left;">大整数值</td></tr><tr><td style="text-align:left;"><code>BIGINT</code></td><td style="text-align:left;">8 字节</td><td style="text-align:left;">极大整数值</td></tr></tbody></table><h4 id="浮点数类型" tabindex="-1"><a class="header-anchor" href="#浮点数类型" aria-hidden="true">#</a> 浮点数类型</h4><p><code>FLOAT</code> 和 <code>DOUBLE</code> 分别使用 4 个字节、8 个字节存储空间，它们支持使用标准的浮点运算进行近似计算，存在丢失精度的可能。</p><p><code>DECIMAL</code> 类型用于存储精确的小数，支持精确计算，但是计算代价高。只有在需要对小数进行精确计算时，才应该使用 <code>DECIMAL</code>，例如财务数据。此外，当数据量较大时，可以考虑使用 BIGINT 代替 DECIMAL，将需要存储的货币单位乘以需要精确的倍数即可。</p><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">大小</th><th style="text-align:left;">用途</th></tr></thead><tbody><tr><td style="text-align:left;"><code>FLOAT</code></td><td style="text-align:left;">4 字节</td><td style="text-align:left;">单精度浮点数值</td></tr><tr><td style="text-align:left;"><code>DOUBLE</code></td><td style="text-align:left;">8 字节</td><td style="text-align:left;">双精度浮点数值</td></tr><tr><td style="text-align:left;"><code>DECIMAL</code></td><td style="text-align:left;"></td><td style="text-align:left;">精确的小数值</td></tr></tbody></table><h4 id="字符串类型" tabindex="-1"><a class="header-anchor" href="#字符串类型" aria-hidden="true">#</a> 字符串类型</h4><p>VARCHAR 类型用于存储可变长字符串。</p><p>CHAR 类型是定长字符串。</p><p>与 CHAR 和 VARCHAR 类似的类型还有 BINARY 和 VARBINARY，它们存储的是二进制字符串。</p><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">大小</th><th style="text-align:left;">用途</th></tr></thead><tbody><tr><td style="text-align:left;"><code>CHAR</code></td><td style="text-align:left;">0-255 字节</td><td style="text-align:left;">定长字符串</td></tr><tr><td style="text-align:left;"><code>VARCHAR</code></td><td style="text-align:left;">0-65535 字节</td><td style="text-align:left;">变长字符串</td></tr></tbody></table><h4 id="blob-和-text" tabindex="-1"><a class="header-anchor" href="#blob-和-text" aria-hidden="true">#</a> BLOB 和 TEXT</h4><p><code>BLOB</code> 和 <code>TEXT</code> 都用于存储很大的数据，分别采用二进制和字符串方式存储。</p><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">大小</th><th style="text-align:left;">用途</th></tr></thead><tbody><tr><td style="text-align:left;"><code>TINYBLOB</code></td><td style="text-align:left;">0-255 字节</td><td style="text-align:left;">不超过 255 个字符的二进制字符串</td></tr><tr><td style="text-align:left;"><code>TINYTEXT</code></td><td style="text-align:left;">0-255 字节</td><td style="text-align:left;">短文本字符串</td></tr><tr><td style="text-align:left;"><code>BLOB</code></td><td style="text-align:left;">0-65 535 字节</td><td style="text-align:left;">二进制形式的长文本数据</td></tr><tr><td style="text-align:left;"><code>TEXT</code></td><td style="text-align:left;">0-65 535 字节</td><td style="text-align:left;">长文本数据</td></tr><tr><td style="text-align:left;"><code>MEDIUMBLOB</code></td><td style="text-align:left;">0-16 777 215 字节</td><td style="text-align:left;">二进制形式的中等长度文本数据</td></tr><tr><td style="text-align:left;"><code>MEDIUMTEXT</code></td><td style="text-align:left;">0-16 777 215 字节</td><td style="text-align:left;">中等长度文本数据</td></tr><tr><td style="text-align:left;"><code>LONGBLOB</code></td><td style="text-align:left;">0-4 294 967 295 字节</td><td style="text-align:left;">二进制形式的极大文本数据</td></tr><tr><td style="text-align:left;"><code>LONGTEXT</code></td><td style="text-align:left;">0-4 294 967 295 字节</td><td style="text-align:left;">极大文本数据</td></tr></tbody></table><h4 id="日期和时间类型" tabindex="-1"><a class="header-anchor" href="#日期和时间类型" aria-hidden="true">#</a> 日期和时间类型</h4><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">大小</th><th style="text-align:left;">格式</th><th style="text-align:left;">作用</th><th>备注</th></tr></thead><tbody><tr><td style="text-align:left;">DATE</td><td style="text-align:left;">3 字节</td><td style="text-align:left;">YYYY-MM-DD</td><td style="text-align:left;">日期值</td><td></td></tr><tr><td style="text-align:left;">TIME</td><td style="text-align:left;">3 字节</td><td style="text-align:left;">HH:MM:SS</td><td style="text-align:left;">时间值或持续时间</td><td></td></tr><tr><td style="text-align:left;">YEAR</td><td style="text-align:left;">1 字节</td><td style="text-align:left;">YYYY</td><td style="text-align:left;">年份值</td><td></td></tr><tr><td style="text-align:left;">DATETIME</td><td style="text-align:left;">8 字节</td><td style="text-align:left;">YYYY-MM-DD hh:mm:ss</td><td style="text-align:left;">混合日期和时间值</td><td>有效时间范围为 1000-01-01 00:00:00 到 9999-12-31 23:59:59</td></tr><tr><td style="text-align:left;">TIMESTAMP</td><td style="text-align:left;">4 字节</td><td style="text-align:left;">YYYY-MM-DD hh:mm:ss</td><td style="text-align:left;">混合日期和时间值，时间戳</td><td>有效时间范围为 1970-01-01 00:00:01 到 2038-01-19 03:14:07</td></tr></tbody></table><h4 id="特殊类型" tabindex="-1"><a class="header-anchor" href="#特殊类型" aria-hidden="true">#</a> 特殊类型</h4><ul><li><strong>ENUM</strong> - 枚举类型，用于存储单一值，可以选择一个预定义的集合。</li><li><strong>SET</strong> - 集合类型，用于存储多个值，可以选择多个预定义的集合。</li></ul><h3 id="schema-设计简单规则" tabindex="-1"><a class="header-anchor" href="#schema-设计简单规则" aria-hidden="true">#</a> Schema 设计简单规则</h3><ul><li>尽量避免过度设计，例如会导致极其复杂查询的 schema 设计，或者有很多列的表设计。</li><li>使用小而简单的合适数据类型，除非真实数据模型中有确切的需要，否则应该尽可能地避免使用 NULL 值。</li><li>尽量使用相同的数据类型存储相似或相关的值，尤其是要在关联条件中使用的列。</li><li>注意可变长字符串，其在临时表和排序时可能导致悲观的按最大长度分配内存。</li><li>尽量使用整型定义标识列。</li><li>避免使用 MySQL 已经遗弃的特性，例如制定浮点数的精度，或者整数的显示宽度。</li><li>小心使用 ENUM 和 SET，虽然它们用起来很方便，但是不要滥用，否则有时候会变成陷阱，最好避免使用 BIT。</li></ul><p>范式意味着不存储冗余数据，但往往需要多关联查询，增加了查询的复杂度；反范式意味着存储冗余数据，但是减少了关联查询。在实际应用中，范式和反范式应当混合使用。</p><p>ALTER TABLE 如果操作的是大表，需要耗费大量时间。一般的操作是：用新结构创建一张空表，从旧表查出所有数据插入新表，然后删除旧表。</p><p>有两种替代方案：</p><ul><li>在一台不提供服务的机器上执行 ALTER TABLE 操作，然后和提供服务的主库进行切换。</li><li>影子拷贝：创建一张新表，然后通过重命名和删表操作交换两张表。</li></ul><h2 id="第五章-创建高性能的索引" tabindex="-1"><a class="header-anchor" href="#第五章-创建高性能的索引" aria-hidden="true">#</a> 第五章 创建高性能的索引</h2><p>索引是存储引擎用于快速找到记录的一种数据结构。</p><p>索引优化应该是对查询性能优化最有效的手段了。</p><h3 id="索引基础" tabindex="-1"><a class="header-anchor" href="#索引基础" aria-hidden="true">#</a> 索引基础</h3><p>索引可以包含一个或多个列的值。如果索引包含多个列，那么列的顺序也十分重要，因为 MySQL 只能高效地使用索引的最左前缀列。</p><h4 id="b-tree-索引" tabindex="-1"><a class="header-anchor" href="#b-tree-索引" aria-hidden="true">#</a> B-Tree 索引</h4><p>大多数 MySQL 引擎都支持 B-Tree 索引。存储引擎以不同的方式使用 B-Tree 索引，性能也各有不同，各有优劣。例如，MyISAM 使用前缀压缩技术使得索引更小，但 InnoDB 则按照原数据格式进行存储。再如 MyISAM 索引通过数据的物理位置引用被索引的行，而 InnoDB 则根据主键引用被索引的行。</p><p>B-Tree 通常意味着所有的值都是按顺序存储的，并且每一个叶子页到根的距离相同。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202410041118763.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>B-Tree 索引从索引的根节点开始进行搜索。根节点的槽中存放了指向子节点的指针，存储引擎根据这些指针向下层查找。通过比较节点页的值和要查找的值可以找到合适的指针进入下层子节点，这些指针实际上定义了子节点页中值的上限和下限。最终存储引擎要么是找到对应的值，要么该记录不存在。</p><p>叶子节点比较特别，它们的指针指向的是被索引的数据，而不是其他的节点页。在根节点和叶子节点之间可能有很多层节点页。树的深度和表的大小直接相关。</p><p>B-Tree 对索引列是顺序组织存储的，所以很适合查找范围数据。</p><p>假设有如下数据表：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> People<span class="token punctuation">(</span>
	last_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
	first_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
	dob <span class="token keyword">date</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
	gender <span class="token keyword">enum</span><span class="token punctuation">(</span><span class="token string">&#39;m&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;f&#39;</span><span class="token punctuation">)</span><span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
	<span class="token keyword">key</span><span class="token punctuation">(</span>last_name<span class="token punctuation">,</span> first_name<span class="token punctuation">,</span> dob<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于表中的每一行数据，索引中包含了 last_name、 first_name 和 dob 列的值。</p><p>请注意，索引对多个值进行排序的依据是 CREATE TABLE 语句中定义索引时列的顺序。看一下最后两个条目，两个人的姓和名都-样，则根据他们的出生日期来排列顺序。</p><p>可以使用 B-Tree 索引的查询类型。B-Tree 索引适用于全键值、键值范围或键前缀查找。</p><p>其中键前缀查找只适用于根据最左前缀的查找生。前面所述的索引对如下类型的查询有效。</p><ul><li><em>全值匹配</em> - 全值匹配指的是和索引中的所有列进行匹配，例如前面提到的索引可用于查找姓名为 Cuba Allen、出生于 1960-01-01 的人。</li><li><em>匹配最左前缀</em> - 前面提到的索引可用于查找所有姓为 Allen 的人，即只使用索引的第一列。</li><li><em>匹配列前缀</em> - 也可以只匹配某–列的值的开头部分。例如前面提到的索引可用于查找所有以 J 开头的姓的人。这里也只使用了索引的第一列。</li><li><em>匹配范围值</em> - 例如前面提到的索引可用于查找姓在 Allen 和 Barrymore 之间的人。这里也只使用了索引的第一列。</li><li><em>精确匹配某一列并范围匹配另外一列</em> - 前面提到的索引也可用于查找所有姓为 Allen, 并且名字是字母 K 开头的人。即第一列 last_ name 全匹配，第二列 first_name 范围匹配。</li><li><em>只访问索引的查询</em> - B-Tree 通常可以支持“只访问索引的查询”，即查询只需要访问索引，而无须访问数据行。也叫做覆盖索引。</li></ul><p>因为索引树中的节点是有序的，所以除了按值查找外，索引还可以用于查询中的排序操作。</p><p>B-Tree 索引的限制：</p><ul><li><strong>如果不是按照索引的最左列开始查找，则无法使用索引</strong>。例如上面例子中的索引无法用于查找名字为 Bill 的人，也无法查找某个特定生日的人，因为这两列都不是最左数据列。类似地，也无法查找姓氏以某个字母结尾的人。</li><li><strong>不能跳过索引中的列</strong>。也就是说，前面所述的索引无法用于查找姓为 Smith 并且在某个特定日期出生的人。如果不指定名 (first_name)，则 MySQL 只能使用索引的第一列。</li><li><strong>如果查询中有某个列的范围查询，则其右边所有列都无法使用索引优化查找</strong>。例如有查询 <code>WHERE last_name=&#39; Smith&#39; AND first_name LIKE &#39;J%&#39; AND dob = &#39;1976-12-23&#39;</code> ，这个查询只能使用索引的前两列，因为这里 LIKE 是一个范围条件（但是服务器可以把其余列用于其他目的）。如果范围查询列值的数量有限，那么可以通过使用多个等于条件来代替范围条件。</li></ul><h4 id="哈希索引" tabindex="-1"><a class="header-anchor" href="#哈希索引" aria-hidden="true">#</a> 哈希索引</h4><p>哈希索引 (hashindex) 基于哈希表实现，只有精确匹配索引所有列的查询才有效。</p><p>对于每一行数据，存储引擎都会对所有的索引列计算-一个哈希码 (hash code), 哈希码是一个较小的值，并且不同键值的行计算出来的哈希码也不一样。哈希索引将所有的哈希码存储在索引中，同时在哈希表中保存指向每个数据行的指针。</p><p>如果多个列的哈希值相同，索引会以链表的方式存放多个记录指针到同一个哈希条目中。</p><p>哈希索引的限制：</p><ul><li><p>哈希索引只包含哈希值和行指针，而不存储字段值，所以<strong>不能使用索引中的值来避免读取行</strong>。不过，访问内存中的行的速度很快，所以大部分情况下这一点对性能的影响并不明显。</p></li><li><p>哈希索引数据并不是按照索引值顺序存储的，所以也就<strong>无法用于排序</strong>。</p></li><li><p>哈希索引也<strong>不支持部分索引列匹配查找</strong>，因为哈希索引始终是使用索引列的全部内容来计算哈希值的。例如，在数据列 (A,B) 上建立哈希索引，如果查询只有数据列 A, 则无法使用该索引。</p></li><li><p>哈希索引<strong>只支持等值比较查询</strong>，包括 <code>=</code>、<code>IN()</code>、 <code>&lt;=&gt;</code> （注意 <code>&lt;&gt;</code> 和 <code>&lt;=&gt;</code> 是不同的操作）。也不支持任何范围查询，例如 <code>WHERE price &gt; 100</code>。</p></li><li><p><strong>访问哈希索引的数据非常快</strong>，除非有很多哈希冲突（不同的索引列值却有相同的哈希值）。当出现哈希冲突的时候，存储引擎必须遍历链表中所有的行指针，逐行进行比较，直到找到所有符合条件的行。</p></li><li><p><strong>如果哈希冲突很多的话，一些索引维护操作的代价也会很高</strong>。例如，如果在某个选择性很低（哈希冲突很多）的列上建立哈希索引，那么当从表中删除一行时，存储引擎需要遍历对应哈希值的链表中的每一行，找到并删除对应行的引用，冲突越多，代价越大。</p></li></ul><h4 id="空间数据索引-r-tree" tabindex="-1"><a class="header-anchor" href="#空间数据索引-r-tree" aria-hidden="true">#</a> 空间数据索引 (R-Tree)</h4><p>MyISAM 表支持空间索引，可以用作地理数据存储。和 B-Tree 索引不同，这类索引无须前缀查询。空间索引会从所有维度来索引数据。</p><p>查询时，可以有效地使用任意维度来组合查询。必须使用 MySQL 的 GIS 相关函数如 MBRCONTAINS() 等来维护数据。MySQL 的 GIS 支持并不完善，所以大部分人都不会使用这个特性。开源关系数据库系统中对 GIS 的解决方案做得比较好的是 PostgreSQL 的 PostGIS</p><h4 id="全文索引" tabindex="-1"><a class="header-anchor" href="#全文索引" aria-hidden="true">#</a> 全文索引</h4><p>全文索引是一种特殊类型的索引，它查找的是文本中的关键词，而不是直接比较索引中的值。</p><p>全文搜索和其他几类索引的匹配方式完全不一样。它有许多需要注意的细节，如停用词、词干和复数、布尔搜索等。</p><p>全文索引更类似于搜索引擎做的事情，而不是简单的 WHERE 条件匹配。</p><p>在相同的列上同时创建全文索引和基于值的 B-Tree 索引不会有冲突，全文索引适用于 MATCH AGAINST 操作，而不是普通的 WHERE 条件操作。</p><h3 id="索引的优点" tabindex="-1"><a class="header-anchor" href="#索引的优点" aria-hidden="true">#</a> 索引的优点</h3><p>索引有以下优点：</p><ol><li>索引大大减少了服务器需要扫描的数据量。</li><li>索引可以帮助服务器避免排序和临时表。</li><li>索引可以将随机 I/O 变为顺序 I/O。</li></ol><p>索引是最好的解决方案吗？</p><ul><li><p>对于非常小的表，大部分情况下简单的全表扫描更高效。</p></li><li><p>对于中到大型的表，索引就非常有效。</p></li><li><p>但对于特大型的表，建立和使用索引的代价将随之增长。这种情况下，则需要一种技术可以直接区分出查询需要的一组数据，而不是一条记录一条记录地匹配。例如可以使用分区技术。</p></li><li><p>如果表的数量特别多，可以建立一个元数据信息表，用来查询需要用到的某些特性。例如执行那些需要聚合多个应用分布在多个表的数据的查询，则需要记录。哪个用户的信息存储在哪个表中”的元数据，这样在查询时就可以直接忽略那些不包含指定用户信息的表。对于大型系统，这是一个常用的技巧。</p></li></ul><h3 id="高性能的索引策略" tabindex="-1"><a class="header-anchor" href="#高性能的索引策略" aria-hidden="true">#</a> 高性能的索引策略</h3><p>正确地创建和使用索引是实现高性能查询的基础。</p><h4 id="独立的列" tabindex="-1"><a class="header-anchor" href="#独立的列" aria-hidden="true">#</a> 独立的列</h4><p><strong>独立的列</strong>是指索引列不能是表达式的一部分，也不能是函数的参数。</p><p>下面两个例子都无法使用索引：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> actor_ id <span class="token keyword">FROM</span> sakila<span class="token punctuation">.</span>actor <span class="token keyword">WHERE</span> actor_id <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">WHERE</span> TO_DAYS<span class="token punctuation">(</span><span class="token keyword">CURRENT_DATE</span><span class="token punctuation">)</span> <span class="token operator">-</span> TO_ DAYS<span class="token punctuation">(</span>date_col<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="前缀索引和索引选择性" tabindex="-1"><a class="header-anchor" href="#前缀索引和索引选择性" aria-hidden="true">#</a> 前缀索引和索引选择性</h4><p>有时候需要索引很长的字符列，这会让索引变得大且慢。一种策略是，可以索引开始的部分字符，这样可以大大节约索引空间，从而提高索引效率。但这样也会降低索引的选择性。索引的选择性是指，不重复的索引值和总记录数的比值。索引的选择性越高则查询效率越高。</p><p>对于 BLOB、TEXT 或者很长的 VARCHAR 类型的列，必须使用前缀索引，因为 MySQL <strong>不允许索引这些列的完整长度</strong>。</p><p>前缀应该足够长，以使得前缀索引的选择性接近于索引整个列。通常来说，选择性能够接近 0.03，基本上就可用了。</p><p>计算前缀索引选择性的示例</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> <span class="token keyword">LEFT</span> <span class="token punctuation">(</span>city<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> sel3<span class="token punctuation">,</span>
  <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> <span class="token keyword">LEFT</span> <span class="token punctuation">(</span>city<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> sel4<span class="token punctuation">,</span>
  <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> <span class="token keyword">LEFT</span> <span class="token punctuation">(</span>city<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> sel5<span class="token punctuation">,</span>
  <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> <span class="token keyword">LEFT</span> <span class="token punctuation">(</span>city<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> se16<span class="token punctuation">,</span>
  <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> <span class="token keyword">LEFT</span> <span class="token punctuation">(</span>city<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> sel7<span class="token punctuation">,</span>
<span class="token keyword">FROM</span> sakila<span class="token punctuation">.</span>city demo<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="多列索引" tabindex="-1"><a class="header-anchor" href="#多列索引" aria-hidden="true">#</a> 多列索引</h4><p><strong>在多个列上建立独立的单列索引大部分情况下并不能提高 MySQL 的查询性能。</strong></p><p>例如，表 film_actor 在字段 film_id 和 actor_id 上各有一个单列索引。但对于下面这个查询 WHERE 条件，这两个单列索引都不是好的选择：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> film_id<span class="token punctuation">,</span> actor_id <span class="token keyword">FROM</span> sakila<span class="token punctuation">.</span>film_actor
<span class="token keyword">WHERE</span> actor_id <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">or</span> film_id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="选择合适的索引列顺序" tabindex="-1"><a class="header-anchor" href="#选择合适的索引列顺序" aria-hidden="true">#</a> 选择合适的索引列顺序</h4><p>正确的顺序依赖于使用该索引的查询，并且同时需要考虑如何更好地满足排序和分组的需要。</p><p>如何选择索引的列顺序：</p><ul><li>将选择性最高的列放到索引最前列。</li><li>可能需要根据那些运行频率最高的查询来调整索引列的顺序，让这种情况下索引的选择性最高。</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> payment <span class="token keyword">WHERE</span> staff<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">AND</span> customer<span class="token punctuation">.</span>_id <span class="token operator">=</span> <span class="token number">584</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>是应该创建一个 (staff<em>id, customer</em> id) 索引还是应该颠倒一下顺序？</p><p>可以跑一些查询来确定在这个表中值的分布情况，并确定哪个列的选择性更高。</p><h4 id="聚簇索引" tabindex="-1"><a class="header-anchor" href="#聚簇索引" aria-hidden="true">#</a> 聚簇索引</h4><p>聚簇索引并不是一种单独的索引类型，而是一种数据存储方式。<strong>聚簇</strong>表示数据行和相邻的键值紧凑地存储在一起。因为无法同时把数据行存放在两个不同的地方，所以一个表<strong>只能有一个聚簇索引</strong>。</p><p>具体的细节依赖于其实现方式，在 InnoDB 中，数据行实际上存放在索引的<strong>叶子页 (leaf page)</strong> 中。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202410041119862.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>聚簇索引的优点：</p><ul><li><strong>可以把相关数据保存在一起</strong>，访问数据时，可以减少磁盘 I/O。</li><li><strong>数据访问更快</strong>。聚簇索引将索引和数据保存在同一个 B-Tree 中，因此从聚簇索引中获取数据通常比在非聚簇索引中查找要快。</li><li><strong>使用覆盖索引扫描的查询可以直接使用页节点中的主键值</strong>。</li></ul><p>聚簇索引的缺点：</p><ul><li><strong>聚簇数据最大限度地提高了 I/O 密集型应用的性能</strong>，但如果数据全部都放在内存中，则访问的顺序就没那么重要了，聚簇索引也就没什么优势了。</li><li><strong>插入速度严重依赖于插入顺序</strong>。按照主键的顺序插入是加载数据到 InnoDB 表中速度最快的方式。但如果不是按照主键顺序加载数据，那么在加载完成后最好使用 OPTIMIZE TABLE 命令重新组织一下表。</li><li><strong>更新聚簇索引列的代价很高</strong>，因为会强制 InnoDB 将每个被更新的行移动到新的位置。</li><li>基于聚簇索引的表在插入新行，或者主键被更新导致需要移动行的时候，<strong>可能面临页分裂 (page split) 的问题</strong>。当行的主键值要求必须将这一行插人到某个已满的页中时，存储引擎会将该页分裂成两个页面来容纳该行，这就是一次页分裂操作。页分裂会导致表占用更多的磁盘空间。</li><li><strong>聚簇索引可能导致全表扫描变慢</strong>，尤其是行比较稀疏，或者由于页分裂导致数据存储不连续的时候。</li><li><strong>二级索引 （非聚簇索引）可能比想象的要更大</strong>，因为在二级索引的叶子节点包含了引用行的主键列。</li><li><strong>二级索引访问需要两次索引查找</strong>，而不是一次。（回表）</li></ul><h4 id="innodb-和-myisam-的数据分布对比" tabindex="-1"><a class="header-anchor" href="#innodb-和-myisam-的数据分布对比" aria-hidden="true">#</a> InnoDB 和 MyISAM 的数据分布对比</h4><p>MyISAM 存储引擎采用非聚簇索引存储数据，而 InnoDB 存储引擎采用聚簇索引存储数据。</p><p>来看下 MyISAM 和 InnoDB 是如何存储下面的表：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>CREATE TABLE layout_test (
    col1 int NOT NULL,
    col2 int NOT NULL,
    PRIMARY KEY(col1),
    KEY(col2),
);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于 MyISAM，其数据分布比较简单，按照数据插入的顺序存储在磁盘上。对于每一行数据，都是一个行号，从 0 开始递增。由于行是定长的，所以 MyISAM 可以从表的开头跳过所需的字节找到需要的行（有点类似于数组）。如下图：</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202410041138948.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>MyISAM 使用主键索引查找数据时，在 B+Tree 的叶子节点除了存储索引键之外，还保存了每个键所处的行指针（可以理解为行号）。当找到某个索引键对应的行指针后，就能定位到它对应的数据。如下图：</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202410041138993.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>对于 MyISAM 的二级索引，它的存储方式跟主键索引没有什么区别，如下图：</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202410041216856.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>所以对于 MyISAM 来讲，主键索引和其它索引在存储结构上并没有什么区别。主键索引就是一个名为 PRIMARY 的惟一非空索引</strong>。</p><p>对于 InnoDB 来讲，主键索引是聚簇的，也就是主键索引就是表，所以不像 MyISAM 那样需要独立的行存储。 聚簇索引的每个叶子节点都包含了主键值、事务 ID、用于事务和 MVCC 的回滚指针以及所有剩余列（这个例子中是 col2）。对于 InnoDB 的主键索引，数据分布如下图：</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202410041216040.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>InnoDB 的二级索引和聚簇索引区别比较大，它的二级索引的叶子节点存储的不是”行指针”，而是主键值。存储主键值带来的好处是，InnoDB 在移动行时无须更新二级索引的这个指针。如下图：</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202410041217784.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>由于 InnoDB 是通过主键聚集数据，所以使用 InnoDB 时，一定要指定主键，如果没有定义主键，InnoDB 会选择一个惟一的非空索引代替，如果没有这样的索引，InnoDB 会隐式定义一个主键来作为聚簇索引。</strong></p><p><strong>由于聚簇索引插入速度严重依赖于插入顺序。按照主键的顺序插入是加载数据到 InnoDB 表中速度最快的方式，所以通常我们都使用一个递增 ID 作为主键。</strong></p><p>最后，我们使用一个比较抽象的图，对比一下聚簇和非聚簇的数据分布：</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202410041217744.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="覆盖索引" tabindex="-1"><a class="header-anchor" href="#覆盖索引" aria-hidden="true">#</a> 覆盖索引</h4><p>如果一个索引包含所有需要查询的字段的值，我们就称之为“ 覆盖索引&quot;。覆盖索引能极大地提高性能。</p><ul><li>索引条目通常远小于数据行大小，所以如果只需要读取索引，那 MySQL 就会极大地减少数据访问量。</li><li>因为索引是按照列值顺序存储的（至少在单个页内是如此），所以对于 I/O 密集型的范围查询会比随机从磁盘读取每一行数据的 I/O 要少得多。</li><li>一些存储引擎如 MyISAM 在内存中只缓存索引，数据则依赖于操作系统来缓存，因此要访问数据需要一次系统调用。</li><li>InnoDB 的二级索引在叶子节点中保存了行的主键值，所以如果二级主键能够覆盖查询，则可以避免对主键索引的二次查询。</li></ul><p>覆盖索引必须要存储索引列的值，而哈希索引、空间索引和全文索引等都不存储索引列的值，所以 MySQL 只能使用 B-Tree 索引做覆盖索引。</p><h4 id="使用索引扫描来做排序" tabindex="-1"><a class="header-anchor" href="#使用索引扫描来做排序" aria-hidden="true">#</a> 使用索引扫描来做排序</h4><p>如果 <code>EXPLAIN</code> 出来的 <code>type</code> 列的值为 <code>index</code>, 则说明 MySQL 使用了索引扫描来做排序（不要和 <code>Extra</code> 列的 <code>Using index</code> 搞混淆了）。</p><p>MySQL 可以使用同一个索引既满足排序，又用于查找行。只有当索引的列顺序和 ORDER BY 子句的顺序完全一致，并且所有列的排序方向都一样时，MySQL 才能够使用索引来对结果做排序。</p><h4 id="索引和锁" tabindex="-1"><a class="header-anchor" href="#索引和锁" aria-hidden="true">#</a> 索引和锁</h4><p>InnoDB 只有在访问行的时候才会对其加锁，而索引能够减少 InnoDB 访问的行数，从而减少锁的数量。</p><h2 id="第六章-查询性能优化" tabindex="-1"><a class="header-anchor" href="#第六章-查询性能优化" aria-hidden="true">#</a> 第六章 查询性能优化</h2><h3 id="为什么查询速度会慢" tabindex="-1"><a class="header-anchor" href="#为什么查询速度会慢" aria-hidden="true">#</a> 为什么查询速度会慢</h3><h3 id="慢查询基础-优化数据访问" tabindex="-1"><a class="header-anchor" href="#慢查询基础-优化数据访问" aria-hidden="true">#</a> 慢查询基础：优化数据访问</h3><h3 id="重构查询的方式" tabindex="-1"><a class="header-anchor" href="#重构查询的方式" aria-hidden="true">#</a> 重构查询的方式</h3><h3 id="查询执行的基础" tabindex="-1"><a class="header-anchor" href="#查询执行的基础" aria-hidden="true">#</a> 查询执行的基础</h3><h3 id="mysql-查询优化器的局限性" tabindex="-1"><a class="header-anchor" href="#mysql-查询优化器的局限性" aria-hidden="true">#</a> MySQL 查询优化器的局限性</h3><h3 id="查询优化器的提示-hint" tabindex="-1"><a class="header-anchor" href="#查询优化器的提示-hint" aria-hidden="true">#</a> 查询优化器的提示（hint)</h3><h3 id="优化特定类型的查询" tabindex="-1"><a class="header-anchor" href="#优化特定类型的查询" aria-hidden="true">#</a> 优化特定类型的查询</h3><h3 id="案例学习" tabindex="-1"><a class="header-anchor" href="#案例学习" aria-hidden="true">#</a> 案例学习</h3><h2 id="第七章-mysql-高级特性-略" tabindex="-1"><a class="header-anchor" href="#第七章-mysql-高级特性-略" aria-hidden="true">#</a> <s>第七章 MySQL 高级特性（略）</s></h2><h2 id="第八章-优化服务器设置-略" tabindex="-1"><a class="header-anchor" href="#第八章-优化服务器设置-略" aria-hidden="true">#</a> <s>第八章 优化服务器设置（略）</s></h2><h2 id="第九章-操作系统和硬件优化-略" tabindex="-1"><a class="header-anchor" href="#第九章-操作系统和硬件优化-略" aria-hidden="true">#</a> <s>第九章 操作系统和硬件优化（略）</s></h2><h2 id="第十章-复制" tabindex="-1"><a class="header-anchor" href="#第十章-复制" aria-hidden="true">#</a> 第十章 复制</h2><h3 id="复杂概述" tabindex="-1"><a class="header-anchor" href="#复杂概述" aria-hidden="true">#</a> 复杂概述</h3><h3 id="配置复制" tabindex="-1"><a class="header-anchor" href="#配置复制" aria-hidden="true">#</a> 配置复制</h3><h3 id="复制的原理" tabindex="-1"><a class="header-anchor" href="#复制的原理" aria-hidden="true">#</a> 复制的原理</h3><h3 id="复制拓扑" tabindex="-1"><a class="header-anchor" href="#复制拓扑" aria-hidden="true">#</a> 复制拓扑</h3><h3 id="复制和容量规划" tabindex="-1"><a class="header-anchor" href="#复制和容量规划" aria-hidden="true">#</a> 复制和容量规划</h3><h3 id="复制管理和维护" tabindex="-1"><a class="header-anchor" href="#复制管理和维护" aria-hidden="true">#</a> 复制管理和维护</h3><h3 id="复制的问题和解决方案" tabindex="-1"><a class="header-anchor" href="#复制的问题和解决方案" aria-hidden="true">#</a> 复制的问题和解决方案</h3><h3 id="复制有多快" tabindex="-1"><a class="header-anchor" href="#复制有多快" aria-hidden="true">#</a> 复制有多快</h3><h3 id="mysql-复制的高级特性" tabindex="-1"><a class="header-anchor" href="#mysql-复制的高级特性" aria-hidden="true">#</a> MySQL 复制的高级特性</h3><h3 id="其他复制技术" tabindex="-1"><a class="header-anchor" href="#其他复制技术" aria-hidden="true">#</a> 其他复制技术</h3><h2 id="第十一章-可扩展的-mysql-略" tabindex="-1"><a class="header-anchor" href="#第十一章-可扩展的-mysql-略" aria-hidden="true">#</a> <s>第十一章 可扩展的 MySQL（略）</s></h2><h2 id="第十二章-高可用性-略" tabindex="-1"><a class="header-anchor" href="#第十二章-高可用性-略" aria-hidden="true">#</a> <s>第十二章 高可用性（略）</s></h2><h2 id="第十三章-云端的-mysql-略" tabindex="-1"><a class="header-anchor" href="#第十三章-云端的-mysql-略" aria-hidden="true">#</a> <s>第十三章 云端的 MySQL（略）</s></h2><h2 id="第十四章-应用层优化-略" tabindex="-1"><a class="header-anchor" href="#第十四章-应用层优化-略" aria-hidden="true">#</a> <s>第十四章 应用层优化（略）</s></h2><h2 id="第十五章-备份与恢复-略" tabindex="-1"><a class="header-anchor" href="#第十五章-备份与恢复-略" aria-hidden="true">#</a> <s>第十五章 备份与恢复（略）</s></h2><h2 id="第十六章-mysql-用户工具-略" tabindex="-1"><a class="header-anchor" href="#第十六章-mysql-用户工具-略" aria-hidden="true">#</a> <s>第十六章 MySQL 用户工具（略）</s></h2><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,208),c={href:"https://book.douban.com/subject/23008813/",target:"_blank",rel:"noopener noreferrer"};function h(u,g){const a=e("ExternalLinkIcon");return s(),l("div",null,[p,t("ul",null,[t("li",null,[t("a",c,[i("《高性能 MySQL》"),d(a)])])])])}const f=n(o,[["render",h],["__file","index.html.vue"]]);export{f as default};
