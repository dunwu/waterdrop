const e=JSON.parse('{"key":"v-72339106","path":"/pages/640d44c6/","title":"Kafka 流式处理","lang":"zh-CN","frontmatter":{"icon":"logos:kafka-icon","title":"Kafka 流式处理","date":"2020-07-24T06:52:07.000Z","permalink":"/pages/640d44c6/","category":["分布式","分布式通信","mq","kafka"],"tag":["mq","kafka"],"description":"Kafka 流式处理 简介 什么是流式处理 数据流是无边界数据集的抽象表示。无边界意味着无限和持续增长。无边界数据集之所以是无限的，是因为随着时间的推移，新的记录会不断加入进来。 事件流是有序的。事件的发生总是有先后顺序。而数据库里的记录是无序的。 不可变的数据记录。事件一旦发生，就不能被改变。 事件流是可重播的。对于大多数业务来说，重播发生在几个月前（甚至几年前）的原始事件流是一个很重要的需求。可能是为了尝试使用新的分析方法纠正过去的错误，或是为了进行审计。如果没有这项能力，流式处理充其量只是数据科学实验室里的一个玩具而已。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/640d44c6/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"Kafka 流式处理"}],["meta",{"property":"og:description","content":"Kafka 流式处理 简介 什么是流式处理 数据流是无边界数据集的抽象表示。无边界意味着无限和持续增长。无边界数据集之所以是无限的，是因为随着时间的推移，新的记录会不断加入进来。 事件流是有序的。事件的发生总是有先后顺序。而数据库里的记录是无序的。 不可变的数据记录。事件一旦发生，就不能被改变。 事件流是可重播的。对于大多数业务来说，重播发生在几个月前（甚至几年前）的原始事件流是一个很重要的需求。可能是为了尝试使用新的分析方法纠正过去的错误，或是为了进行审计。如果没有这项能力，流式处理充其量只是数据科学实验室里的一个玩具而已。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-24T15:22:10.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"mq"}],["meta",{"property":"article:tag","content":"kafka"}],["meta",{"property":"article:published_time","content":"2020-07-24T06:52:07.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-24T15:22:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Kafka 流式处理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-07-24T06:52:07.000Z\\",\\"dateModified\\":\\"2025-02-24T15:22:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[{"level":3,"title":"什么是流式处理","slug":"什么是流式处理","link":"#什么是流式处理","children":[]},{"level":3,"title":"编程范式对比","slug":"编程范式对比","link":"#编程范式对比","children":[]},{"level":3,"title":"流处理的核心概念","slug":"流处理的核心概念","link":"#流处理的核心概念","children":[]}]},{"level":2,"title":"流处理的设计模式","slug":"流处理的设计模式","link":"#流处理的设计模式","children":[{"level":3,"title":"单个事件处理","slug":"单个事件处理","link":"#单个事件处理","children":[]},{"level":3,"title":"使用本地状态","slug":"使用本地状态","link":"#使用本地状态","children":[]},{"level":3,"title":"多阶段处理和重分区","slug":"多阶段处理和重分区","link":"#多阶段处理和重分区","children":[]},{"level":3,"title":"流和表的连接","slug":"流和表的连接","link":"#流和表的连接","children":[]},{"level":3,"title":"流和流的连接","slug":"流和流的连接","link":"#流和流的连接","children":[]},{"level":3,"title":"乱序的事件","slug":"乱序的事件","link":"#乱序的事件","children":[]},{"level":3,"title":"重新处理","slug":"重新处理","link":"#重新处理","children":[]}]},{"level":2,"title":"Kafka Streams 的架构","slug":"kafka-streams-的架构","link":"#kafka-streams-的架构","children":[{"level":3,"title":"分区和任务","slug":"分区和任务","link":"#分区和任务","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1738508672000,"updatedTime":1740410530000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":3}]},"readingTime":{"minutes":9.9,"words":2971},"filePathRelative":"15.分布式/21.分布式通信/02.MQ/01.Kafka/Kafka流式处理.md","localizedDate":"2020年7月24日","excerpt":"<h1> Kafka 流式处理</h1>\\n<h2> 简介</h2>\\n<h3> 什么是流式处理</h3>\\n<p><strong>数据流是无边界数据集的抽象表示</strong>。无边界意味着无限和持续增长。无边界数据集之所以是无限的，是因为随着时间的推移，新的记录会不断加入进来。</p>\\n<ul>\\n<li><strong>事件流是有序的</strong>。事件的发生总是有先后顺序。而数据库里的记录是无序的。</li>\\n<li><strong>不可变的数据记录</strong>。事件一旦发生，就不能被改变。</li>\\n<li><strong>事件流是可重播的</strong>。对于大多数业务来说，重播发生在几个月前（甚至几年前）的原始事件流是一个很重要的需求。可能是为了尝试使用新的分析方法纠正过去的错误，或是为了进行审计。如果没有这项能力，流式处理充其量只是数据科学实验室里的一个玩具而已。</li>\\n</ul>","autoDesc":true}');export{e as data};
