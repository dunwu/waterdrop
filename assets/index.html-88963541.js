import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c,a as n,b as s,d as t,e as l}from"./app-2657515e.js";const i={},u=l(`<h1 id="数组和链表" tabindex="-1"><a class="header-anchor" href="#数组和链表" aria-hidden="true">#</a> 数组和链表</h1><blockquote><p>数组和链表分别代表了连续空间和不连续空间的存储方式，它们是线性表（Linear List）的典型代表。其他所有的数据结构，比如栈、队列、二叉树、B+ 树等，实际上都是这两者的结合和变化。</p></blockquote><h2 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h2><p>数组用 <strong>连续</strong> 的内存空间来存储数据。</p><h3 id="数组的访问" tabindex="-1"><a class="header-anchor" href="#数组的访问" aria-hidden="true">#</a> 数组的访问</h3><p>数组元素的访问是以行或列索引的单一下标表示。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20220320115836.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>在上面的例子中，数组 a 中有 5 个元素。<code>也就是说</code>，a 的长度是 6 。我们可以使用 a[0] 来表示数组中的第一个元素。因此，a[0] = A 。类似地，a[1] = B，a[2] = C，依此类推。</p><h3 id="数组的插入" tabindex="-1"><a class="header-anchor" href="#数组的插入" aria-hidden="true">#</a> 数组的插入</h3><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20220320115848.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="数组的删除" tabindex="-1"><a class="header-anchor" href="#数组的删除" aria-hidden="true">#</a> 数组的删除</h3><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20220320115859.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="数组的特性" tabindex="-1"><a class="header-anchor" href="#数组的特性" aria-hidden="true">#</a> 数组的特性</h3><p>数组设计之初是在形式上依赖内存分配而成的，所以必须在使用前预先分配好空间大小。这使得数组有以下特性：</p><ol><li><strong>用连续的内存空间来存储数据</strong>。</li><li><strong>数组支持随机访问，根据下标随机访问的时间复杂度为 <code>O(1)</code></strong>。</li><li><strong>数组的插入、删除操作，平均时间复杂度为 <code>O(n)</code></strong>。</li><li><strong>空间大小固定</strong>，一旦建立，不能再改变。扩容只能采用复制数组的方式。</li><li>在旧式编程语言中（如有中阶语言之称的 C），程序不会对数组的操作做下界判断，也就有潜在的越界操作的风险。</li></ol><h3 id="多维数组" tabindex="-1"><a class="header-anchor" href="#多维数组" aria-hidden="true">#</a> 多维数组</h3><p>数组是有下标和值组成集合。</p><p>如果数组的下标有多个维度，即为多维数组。比如：二维数组可以视为“数组元素为一维数组”的一维数组；三维数组可以视为“数组元素为二维数组”的一维数组；依次类推。</p><p>下图是由 M 个行向量，N 个列向量组成的二维数组.</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20220320152607.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="链表" tabindex="-1"><a class="header-anchor" href="#链表" aria-hidden="true">#</a> 链表</h2><blockquote><p><strong>链表用不连续的内存空间来存储数据；并通过一个指针按顺序将这些空间串起来，形成一条链</strong>。</p></blockquote><p>区别于数组，链表中的元素不是存储在内存中连续的一片区域，链表中的数据存储在每一个称之为“结点”复合区域里，在每一个结点除了存储数据以外，还保存了到下一个节点的指针（Pointer）。由于不必按顺序存储，链表在插入数据的时候可以达到 <code>O(1)</code> 的复杂度，但是查找一个节点或者访问特定编号的节点则需要 <code>O(n)</code> 的时间。</p><p>链表具有以下特性：</p><ul><li>链表允许插入和移除任意位置上的节点，其时间复杂度为 <code>O(1)</code></li><li>链表没有数组的随机访问特性，<strong>链表只支持顺序访问</strong>，其时间复杂度为 <code>O(n)</code>。</li><li>数组的空间大小是固定的，而<strong>链表的空间大小可以动态增长</strong>。相比于数组，链表支持扩容，显然更为灵活，但是由于多了指针域，空间开销也更大。</li><li>链表相比于数组，多了头指针、尾指针（非必要），合理使用可以大大提高访问效率。</li></ul><p>链表有多种类型：</p><ul><li>单链表</li><li>双链表</li><li>循环链表</li></ul><h3 id="单链表" tabindex="-1"><a class="header-anchor" href="#单链表" aria-hidden="true">#</a> 单链表</h3><p>单链表中的每个结点不仅包含数据值，还包含一个指针，指向其后继节点。通过这种方式，单链表将所有结点按顺序组织起来。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20220320174829.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>与数组不同，我们无法在常量时间内访问单链表中的随机元素。 如果我们想要获得第 i 个元素，我们必须从头结点逐个遍历。 我们按 <code>索引</code> 来 <code>访问元素</code> 平均要花费 <code>O(N)</code> 时间，其中 N 是链表的长度。</p><h4 id="单链表插入" tabindex="-1"><a class="header-anchor" href="#单链表插入" aria-hidden="true">#</a> 单链表插入</h4><p>如果我们想在给定的结点 <code>prev</code> 之后添加新值，我们应该：</p><p>（1）使用给定值初始化新结点 <code>cur</code>；</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20220320174908.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>（2）将 <code>cur</code> 的 <code>next</code> 字段链接到 <code>prev</code> 的下一个结点 <code>next</code> ；</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20220320174919.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>（3）将 <code>prev</code> 中的 <code>next</code> 字段链接到 <code>cur</code> 。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20220320174932.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>与数组不同，我们不需要将所有元素移动到插入元素之后。因此，您可以在 <code>O(1)</code> 时间复杂度中将新结点插入到链表中，这非常高效。</p><h4 id="单链表删除" tabindex="-1"><a class="header-anchor" href="#单链表删除" aria-hidden="true">#</a> 单链表删除</h4><p>如果我们想从单链表中删除现有结点 <code>cur</code>，可以分两步完成：</p><p>（1）找到 <code>cur</code> 的上一个结点 <code>prev</code> 及其下一个结点 <code>next</code> ；</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20220320174953.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>（2）接下来链接 <code>prev</code> 到 <code>cur</code> 的下一个节点 <code>next</code> 。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20220320175006.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>在我们的第一步中，我们需要找出 <code>prev</code> 和 <code>next</code>。使用 <code>cur</code> 的参考字段很容易找出 <code>next</code>，但是，我们必须从头结点遍历链表，以找出 <code>prev</code>，它的平均时间是 <code>O(N)</code>，其中 <code>N</code> 是链表的长度。因此，删除结点的时间复杂度将是 <code>O(N)</code>。</p><p>空间复杂度为 <code>O(1)</code>，因为我们只需要常量空间来存储指针。</p><h3 id="双链表" tabindex="-1"><a class="header-anchor" href="#双链表" aria-hidden="true">#</a> 双链表</h3><p>双链表中的每个结点不仅包含数据值，还包含两个指针，分别指向指向其前驱节点和后继节点。</p><p>单链表的访问是单向的，而双链表的访问是双向的。显然，双链表比单链表操作更灵活，但是空间开销也更大。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20220320181150.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>双链表以类似的方式工作，但<code>还有一个引用字段</code>，称为<code>“prev”</code>字段。有了这个额外的字段，您就能够知道当前结点的前一个结点。</p><h4 id="双链表插入" tabindex="-1"><a class="header-anchor" href="#双链表插入" aria-hidden="true">#</a> 双链表插入</h4><p>如果我们想在给定的结点 <code>prev</code> 之后添加新值，我们应该：</p><p>（1）使用给定值初始化新结点 <code>cur</code>；</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20220320181208.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>（2）链接 <code>cur</code> 与 <code>prev</code> 和 <code>next</code>，其中 <code>next</code> 是 <code>prev</code> 原始的下一个节点；</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20220320181303.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>（3）用 <code>cur</code> 重新链接 <code>prev</code> 和 <code>next</code>。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20220320181504.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>与单链表类似，添加操作的时间和空间复杂度都是 <code>O(1)</code>。</p><h4 id="双链表删除" tabindex="-1"><a class="header-anchor" href="#双链表删除" aria-hidden="true">#</a> 双链表删除</h4><p>如果我们想从双链表中删除一个现有的结点 <code>cur</code>，我们可以简单地将它的前一个结点 <code>prev</code> 与下一个结点 <code>next</code> 链接起来。</p><p>与单链表不同，使用 <code>prev</code> 字段可以很容易地在常量时间内获得前一个结点。</p><p>因为我们不再需要遍历链表来获取前一个结点，所以时间和空间复杂度都是 <code>O(1)</code>。</p><h3 id="循环链表" tabindex="-1"><a class="header-anchor" href="#循环链表" aria-hidden="true">#</a> 循环链表</h3><h4 id="循环单链表" tabindex="-1"><a class="header-anchor" href="#循环单链表" aria-hidden="true">#</a> 循环单链表</h4><p><strong>循环单链表是一种特殊的单链表</strong>。它和单链表唯一的区别就在最后结点。</p><ul><li>单链表的最后一个结点的后继指针 <code>next</code> 指向空地址。</li><li>循环链表的最后一个结点的后继指针 <code>next</code> 指向第一个节点（如果有头节点，就指向头节点）。</li></ul><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20220322190534.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="循环双链表" tabindex="-1"><a class="header-anchor" href="#循环双链表" aria-hidden="true">#</a> 循环双链表</h4><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20220322190423.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="数组-vs-链表" tabindex="-1"><a class="header-anchor" href="#数组-vs-链表" aria-hidden="true">#</a> 数组 vs. 链表</h2><ul><li><strong>存储方式</strong><ul><li>数组用 <strong>连续</strong> 的内存空间来存储数据。</li><li>链表用 <strong>不连续</strong> 的内存空间来存储数据；并通过一个指针按顺序将这些空间串起来，形成一条链。</li></ul></li><li><strong>访问方式</strong><ul><li>数组<strong>支持随机访问</strong>。根据下标随机访问的时间复杂度为 <code>O(1)</code></li><li>链表<strong>不支持随机访问</strong>，只能顺序访问，时间复杂度为 <code>O(n)</code>。</li></ul></li><li><strong>空间大小</strong><ul><li>数组空间<strong>大小固定</strong>，扩容只能采用复制数组的方式。</li><li>链表空间<strong>大小不固定</strong>，扩容灵活。</li></ul></li><li><strong>效率比较</strong><ul><li>数组的 <strong>查找</strong> 效率高于链表。</li><li>链表的 <strong>添加</strong>、<strong>删除</strong> 效率高于数组。</li></ul></li></ul><h2 id="数组和链表的基本操作示例" tabindex="-1"><a class="header-anchor" href="#数组和链表的基本操作示例" aria-hidden="true">#</a> 数组和链表的基本操作示例</h2><p>关于数组和链表的基本操作，网上和各种书籍、教程中已经有大量的示例，感兴趣可以自行搜索。本文只是简单展示一下数组和链表的基本操作。</p><h3 id="一维数组的基本操作" tabindex="-1"><a class="header-anchor" href="#一维数组的基本操作" aria-hidden="true">#</a> 一维数组的基本操作</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1. Initialize</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a0 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token comment">// 2. Get Length</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;The size of a1 is: &quot;</span> <span class="token operator">+</span> a1<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 3. Access Element</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;The first element is: &quot;</span> <span class="token operator">+</span> a1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 4. Iterate all Elements</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;[Version 1] The contents of a1 are:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span> <span class="token operator">+</span> a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;[Version 2] The contents of a1 are:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> item<span class="token operator">:</span> a1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span> <span class="token operator">+</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 5. Modify Element</span>
        a1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
        <span class="token comment">// 6. Sort</span>
        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二维数组的基本操作" tabindex="-1"><a class="header-anchor" href="#二维数组的基本操作" aria-hidden="true">#</a> 二维数组的基本操作</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TwoDimensionArray</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Example I:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">printArray</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Example II:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">printArray</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Example III:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">printArray</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="单链表的基本操作" tabindex="-1"><a class="header-anchor" href="#单链表的基本操作" aria-hidden="true">#</a> 单链表的基本操作</h3><p>单链表节点的数据结构</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token class-name">E</span> value<span class="token punctuation">;</span>
    <span class="token class-name">ListNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span> <span class="token comment">// 指向后继节点</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleLinkList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">ListNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> head<span class="token punctuation">;</span> <span class="token comment">// 头节点</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（1）从头部添加节点（即头插法）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">addHead</span><span class="token punctuation">(</span><span class="token class-name">E</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ListNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    newNode<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）从尾部添加节点（即尾插法）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">addTail</span><span class="token punctuation">(</span><span class="token class-name">E</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// init new node</span>
    <span class="token class-name">ListNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// find the last node</span>
    <span class="token class-name">ListNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        node <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// add new node to tail</span>
    node<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（3）删除节点</p><p>找到要删除元素的前驱节点，将前驱节点的 next 指针指向下一个节点。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">E</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ListNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> prev <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>prev<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ListNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> curr <span class="token operator">=</span> prev<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>curr<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            prev<span class="token punctuation">.</span>next <span class="token operator">=</span> curr<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        prev <span class="token operator">=</span> prev<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（4）查找节点</p><p>从头开始查找，一旦发现有数值与查找值相等的节点，直接返回此节点。如果遍历结束，表明未找到节点，返回 null。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ListNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token class-name">E</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ListNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> node<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        node <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="双链表的基本操作" tabindex="-1"><a class="header-anchor" href="#双链表的基本操作" aria-hidden="true">#</a> 双链表的基本操作</h3><p>双链表节点的数据结构：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DListNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token class-name">E</span> value<span class="token punctuation">;</span>
    <span class="token class-name">DListNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> prev<span class="token punctuation">;</span> <span class="token comment">// 指向前驱节点</span>
    <span class="token class-name">DListNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span> <span class="token comment">// 指向后继节点</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DoubleLinkList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/** 头节点 */</span>
    <span class="token keyword">private</span> <span class="token class-name">DListNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> head<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/** 尾节点 */</span>
    <span class="token keyword">private</span> <span class="token class-name">DListNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> tail<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（1）从头部添加节点</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addHead</span><span class="token punctuation">(</span><span class="token class-name">E</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">DListNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DListNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
    newNode<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
    newNode<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）从尾部添加节点</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addTail</span><span class="token punctuation">(</span><span class="token class-name">E</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">DListNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DListNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>tail<span class="token punctuation">.</span>prev<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
    newNode<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tail<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>tail<span class="token punctuation">.</span>prev <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
    newNode<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tail<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（3）删除节点</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">E</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">DListNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> prev <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>prev<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tail<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">DListNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> curr <span class="token operator">=</span> prev<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>curr<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            prev<span class="token punctuation">.</span>next <span class="token operator">=</span> curr<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            curr<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>
            curr<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            curr<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        prev <span class="token operator">=</span> prev<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（4）查找节点</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">DListNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token class-name">E</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">DListNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tail<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> node<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        node <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="练习" tabindex="-1"><a class="header-anchor" href="#练习" aria-hidden="true">#</a> 练习</h2>`,106),d={class:"task-list-container"},r={class:"task-list-item"},k=n("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-0",checked:"checked",disabled:"disabled"},null,-1),m={class:"task-list-item-label",for:"task-item-0"},v={href:"https://leetcode-cn.com/problems/find-pivot-index/",target:"_blank",rel:"noopener noreferrer"},b={class:"task-list-item"},h=n("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-1",checked:"checked",disabled:"disabled"},null,-1),g={class:"task-list-item-label",for:"task-item-1"},f={href:"https://leetcode-cn.com/problems/search-insert-position/",target:"_blank",rel:"noopener noreferrer"},_={class:"task-list-item"},w=n("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-2",checked:"checked",disabled:"disabled"},null,-1),y={class:"task-list-item-label",for:"task-item-2"},x={href:"https://leetcode-cn.com/problems/merge-intervals/",target:"_blank",rel:"noopener noreferrer"},j={class:"task-list-container"},N={class:"task-list-item"},E=n("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-3",disabled:"disabled"},null,-1),L={class:"task-list-item-label",for:"task-item-3"},q={href:"https://leetcode-cn.com/leetbook/read/linked-list/jy291/",target:"_blank",rel:"noopener noreferrer"},z={class:"task-list-item"},S=n("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-4",disabled:"disabled"},null,-1),D={class:"task-list-item-label",for:"task-item-4"},O={href:"https://leetcode-cn.com/leetbook/read/linked-list/jbex5/",target:"_blank",rel:"noopener noreferrer"},I={class:"task-list-item"},A=n("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-5",disabled:"disabled"},null,-1),T={class:"task-list-item-label",for:"task-item-5"},V={href:"https://leetcode-cn.com/leetbook/read/linked-list/jjhf6/",target:"_blank",rel:"noopener noreferrer"},B={class:"task-list-item"},C=n("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-6",disabled:"disabled"},null,-1),M={class:"task-list-item-label",for:"task-item-6"},H={href:"https://leetcode-cn.com/leetbook/read/linked-list/jjbj2/",target:"_blank",rel:"noopener noreferrer"},G={class:"task-list-item"},P=n("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-7",disabled:"disabled"},null,-1),F={class:"task-list-item-label",for:"task-item-7"},J={href:"https://leetcode-cn.com/leetbook/read/linked-list/jf1cc/",target:"_blank",rel:"noopener noreferrer"},K={class:"task-list-item"},Q=n("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-8",disabled:"disabled"},null,-1),R={class:"task-list-item-label",for:"task-item-8"},U={href:"https://leetcode-cn.com/leetbook/read/linked-list/f58sg/",target:"_blank",rel:"noopener noreferrer"},W={class:"task-list-item"},X=n("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-9",disabled:"disabled"},null,-1),Y={class:"task-list-item-label",for:"task-item-9"},Z={href:"https://leetcode-cn.com/leetbook/read/linked-list/f9izv/",target:"_blank",rel:"noopener noreferrer"},$={class:"task-list-item"},nn=n("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-10",disabled:"disabled"},null,-1),sn={class:"task-list-item-label",for:"task-item-10"},an={href:"https://leetcode-cn.com/leetbook/read/linked-list/fe0kj/",target:"_blank",rel:"noopener noreferrer"},tn={class:"task-list-item"},en=n("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-11",disabled:"disabled"},null,-1),pn={class:"task-list-item-label",for:"task-item-11"},on={href:"https://leetcode-cn.com/leetbook/read/linked-list/fov6t/",target:"_blank",rel:"noopener noreferrer"},cn={class:"task-list-item"},ln=n("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-12",disabled:"disabled"},null,-1),un={class:"task-list-item-label",for:"task-item-12"},dn={href:"https://leetcode-cn.com/leetbook/read/linked-list/fnzd1/",target:"_blank",rel:"noopener noreferrer"},rn={class:"task-list-item"},kn=n("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-13",disabled:"disabled"},null,-1),mn={class:"task-list-item-label",for:"task-item-13"},vn={href:"https://leetcode-cn.com/leetbook/read/linked-list/fv6w7/",target:"_blank",rel:"noopener noreferrer"},bn={class:"task-list-item"},hn=n("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-14",disabled:"disabled"},null,-1),gn={class:"task-list-item-label",for:"task-item-14"},fn={href:"https://leetcode-cn.com/leetbook/read/linked-list/fw8v5/",target:"_blank",rel:"noopener noreferrer"},_n={class:"task-list-item"},wn=n("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-15",disabled:"disabled"},null,-1),yn={class:"task-list-item-label",for:"task-item-15"},xn={href:"https://leetcode-cn.com/leetbook/read/linked-list/fdi26/",target:"_blank",rel:"noopener noreferrer"},jn={class:"task-list-item"},Nn=n("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-16",disabled:"disabled"},null,-1),En={class:"task-list-item-label",for:"task-item-16"},Ln={href:"https://leetcode-cn.com/leetbook/read/linked-list/f00a2/",target:"_blank",rel:"noopener noreferrer"},qn=n("h2",{id:"参考资料",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考资料","aria-hidden":"true"},"#"),s(" 参考资料")],-1),zn={href:"https://time.geekbang.org/column/intro/100017301",target:"_blank",rel:"noopener noreferrer"},Sn={href:"https://item.jd.com/12407475.html",target:"_blank",rel:"noopener noreferrer"},Dn={href:"https://book.douban.com/subject/25859528/",target:"_blank",rel:"noopener noreferrer"},On={href:"https://leetcode-cn.com/leetbook/detail/array-and-string/",target:"_blank",rel:"noopener noreferrer"},In={href:"https://leetcode-cn.com/tag/linked-list/",target:"_blank",rel:"noopener noreferrer"};function An(Tn,Vn){const a=p("ExternalLinkIcon");return o(),c("div",null,[u,n("ul",null,[n("li",null,[s("数组 "),n("ul",d,[n("li",r,[k,n("label",m,[n("a",v,[s("724. 寻找数组的中心下标"),t(a)])])]),n("li",b,[h,n("label",g,[n("a",f,[s("35. 搜索插入位置"),t(a)])])]),n("li",_,[w,n("label",y,[n("a",x,[s("56. 合并区间"),t(a)])])])])]),n("li",null,[s("链表 "),n("ul",j,[n("li",N,[E,n("label",L,[n("a",q,[s("设计链表"),t(a)])])]),n("li",z,[S,n("label",D,[n("a",O,[s("环形链表"),t(a)])])]),n("li",I,[A,n("label",T,[n("a",V,[s("环形链表 II"),t(a)])])]),n("li",B,[C,n("label",M,[n("a",H,[s("相交链表"),t(a)])])]),n("li",G,[P,n("label",F,[n("a",J,[s("删除链表的倒数第 N 个节点"),t(a)])])]),n("li",K,[Q,n("label",R,[n("a",U,[s("反转链表"),t(a)])])]),n("li",W,[X,n("label",Y,[n("a",Z,[s("移除链表元素"),t(a)])])]),n("li",$,[nn,n("label",sn,[n("a",an,[s("奇偶链表"),t(a)])])]),n("li",tn,[en,n("label",pn,[n("a",on,[s("回文链表"),t(a)])])]),n("li",cn,[ln,n("label",un,[n("a",dn,[s("合并两个有序链表"),t(a)])])]),n("li",rn,[kn,n("label",mn,[n("a",vn,[s("两数相加"),t(a)])])]),n("li",bn,[hn,n("label",gn,[n("a",fn,[s("扁平化多级双向链表"),t(a)])])]),n("li",_n,[wn,n("label",yn,[n("a",xn,[s("复制带随机指针的链表"),t(a)])])]),n("li",jn,[Nn,n("label",En,[n("a",Ln,[s("旋转链表"),t(a)])])])])])]),qn,n("ul",null,[n("li",null,[n("a",zn,[s("数据结构与算法之美"),t(a)])]),n("li",null,[n("a",Sn,[s("数据结构（C 语言版）"),t(a)])]),n("li",null,[n("a",Dn,[s("数据结构（C++语言版）"),t(a)])]),n("li",null,[n("a",On,[s("Leetcode：数组和字符串"),t(a)])]),n("li",null,[n("a",In,[s("Leetcode：链表"),t(a)])])])])}const Mn=e(i,[["render",An],["__file","index.html.vue"]]);export{Mn as default};
