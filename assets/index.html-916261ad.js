import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as i,c as l,a as n,d as e,b as a,e as t}from"./app-f29527f5.js";const p={},r=t(`<h1 id="shiro-快速入门" tabindex="-1"><a class="header-anchor" href="#shiro-快速入门" aria-hidden="true">#</a> Shiro 快速入门</h1><blockquote><p>Shiro 是一个安全框架，具有认证、授权、加密、会话管理功能。</p></blockquote><h2 id="一、shiro-简介" tabindex="-1"><a class="header-anchor" href="#一、shiro-简介" aria-hidden="true">#</a> 一、Shiro 简介</h2><h3 id="shiro-特性" tabindex="-1"><a class="header-anchor" href="#shiro-特性" aria-hidden="true">#</a> Shiro 特性</h3><p align="center"><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/standalone/security/shiro/shiro-features.png"></p><p>核心功能：</p><ul><li><strong>Authentication</strong> - <strong>认证</strong>。验证用户是不是拥有相应的身份。</li><li><strong>Authorization</strong> - <strong>授权</strong>。验证某个已认证的用户是否拥有某个权限；即判断用户是否能做事情，常见的如：验证某个用户是否拥有某个角色。或者细粒度的验证某个用户对某个资源是否具有某个权限。</li><li><strong>Session Manager</strong> - <strong>会话管理</strong>。即用户登录后就是一次会话，在没有退出之前，它的所有信息都在会话中。会话可以是普通 JavaSE 环境的，也可以是如 Web 环境的。</li><li><strong>Cryptography</strong> - <strong>加密</strong>。保护数据的安全性，如密码加密存储到数据库，而不是明文存储。</li></ul><p>辅助功能：</p><ul><li><strong>Web Support</strong> - <strong>Web 支持</strong>。可以非常容易的集成到 Web 环境；</li><li><strong>Caching</strong> - <strong>缓存</strong>。比如用户登录后，其用户信息、拥有的角色 / 权限不必每次去查，这样可以提高效率；</li><li><strong>Concurrency</strong> - <strong>并发</strong>。Shiro 支持多线程应用的并发验证，即如在一个线程中开启另一个线程，能把权限自动传播过去；</li><li><strong>Testing</strong> - <strong>测试</strong>。提供测试支持；</li><li><strong>Run As</strong> - <strong>运行方式</strong>。允许一个用户假装为另一个用户（如果他们允许）的身份进行访问；</li><li><strong>Remember Me</strong> - <strong>记住我</strong>。即一次登录后，下次再访问免登录。</li></ul><blockquote><p>🔔 注意：Shiro 不会去维护用户、维护权限；这些需要我们自己去提供；然后通过相应的接口注入给 Shiro 即可。</p></blockquote><h3 id="shiro-架构概述" tabindex="-1"><a class="header-anchor" href="#shiro-架构概述" aria-hidden="true">#</a> Shiro 架构概述</h3><p align="center"><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/standalone/security/shiro/ShiroBasicArchitecture.png"></p><ul><li><p><strong>Subject</strong> - <strong>主题</strong>。它代表当前用户，<code>Subject</code> 可以是一个人，但也可以是第三方服务、守护进程帐户、时钟守护任务或者其它——当前和软件交互的任何事件。<code>Subject</code> 是 Shiro 的入口。</p><ul><li><code>Principals</code> 是 <code>Subject</code> 的“识别属性”。<code>Principals</code> 可以是任何可以识别 <code>Subject</code> 的东西，例如名字（姓氏），姓氏（姓氏或姓氏），用户名，社会保险号等。当然，<code>Principals</code> 在应用程序中最好是惟一的。</li><li><code>Credentials</code> 通常是仅由 <code>Subject</code> 知道的秘密值，用作他们实际上“拥有”所主张身份的佐证 凭据的一些常见示例是密码，生物特征数据（例如指纹和视网膜扫描）以及 X.509 证书。</li></ul></li><li><p><strong>SecurityManager</strong> - <strong>安全管理</strong>。它是 Shiro 的核心，所有与安全有关的操作（认证、授权、及会话、缓存的管理）都与 <code>SecurityManager</code> 交互，且它管理着所有 <code>Subject</code>。</p></li><li><p><strong>Realm</strong> - <strong>域</strong>。用于访问安全相关数据，可以视为应用自身的数据源，需要开发者自己实现。Shiro 会通过 <code>Realm</code> 获取安全数据（如用户、角色、权限），就是说 <code>SecurityManager</code> 要验证用户身份，那么它需要从 <code>Realm</code> 获取相应的用户进行比较以确定用户身份是否合法；也需要从 Realm 得到用户相应的角色/权限进行验证用户是否能进行操作；可以把 <code>Realm</code> 看成 DataSource，即安全数据源。</p></li></ul><h3 id="securitymanager" tabindex="-1"><a class="header-anchor" href="#securitymanager" aria-hidden="true">#</a> SecurityManager</h3><p><code>SecurityManager</code> 是 Shiro 框架核心中的核心，它相当于 Shiro 的总指挥，负责调度所有行为，包括：认证、授权、获取安全数据（调用 <code>Realm</code>）、会话管理等。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/standalone/security/shiro/ShiroArchitecture.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><code>SecurityManager</code> 聚合了以下组件：</p><ul><li><strong>Authenticator</strong> - 认证器，负责认证。如果用户需要定制认证策略，可以实现此接口。</li><li><strong>Authorizer</strong> - 授权器，负责权限控制。用来决定主体是否有权限进行相应的操作；即控制着用户能访问应用中的哪些功能；</li><li><strong>SessionManager</strong> - 会话管理器。Shiro 抽象了一个自己的 Session 来管理主体与应用之间交互的数据。</li><li><strong>SessionDAO</strong> - 会话 DAO 用于存储会话，需要用户自己实现。</li><li><strong>CacheManager</strong> - 缓存控制器。用于管理如用户、角色、权限等信息的缓存。</li><li><strong>Cryptography</strong> - 密码器。用于对数据加密、解密。</li></ul><h2 id="二、shiro-认证" tabindex="-1"><a class="header-anchor" href="#二、shiro-认证" aria-hidden="true">#</a> 二、Shiro 认证</h2><h3 id="认证-subject" tabindex="-1"><a class="header-anchor" href="#认证-subject" aria-hidden="true">#</a> 认证 Subject</h3><p>验证 Subject 的过程可以有效地分为三个不同的步骤：</p><p>（1）收集 <code>Subject</code> 提交的 <code>Principals</code> 和 <code>Credentials</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//Example using most common scenario of username/password pair:</span>
<span class="token class-name">UsernamePasswordToken</span> token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordToken</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//&quot;Remember Me&quot; built-in:</span>
token<span class="token punctuation">.</span><span class="token function">setRememberMe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）提交 <code>Principals</code> 和 <code>Credentials</code> 以进行身份验证。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Subject</span> currentUser <span class="token operator">=</span> <span class="token class-name">SecurityUtils</span><span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

currentUser<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（3）如果提交成功，则允许访问，否则重试身份验证或阻止访问。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    currentUser<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span> <span class="token class-name">UnknownAccountException</span> uae <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span> <span class="token class-name">IncorrectCredentialsException</span> ice <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span> <span class="token class-name">LockedAccountException</span> lae <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span> <span class="token class-name">ExcessiveAttemptsException</span> eae <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">catch</span> your own <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span> <span class="token class-name">AuthenticationException</span> ae <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//unexpected error?</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="remembered-和-authenticated" tabindex="-1"><a class="header-anchor" href="#remembered-和-authenticated" aria-hidden="true">#</a> Remembered 和 Authenticated</h3><ul><li><code>Remembered</code> - 记住我。被记住的 <code>Subject</code> 不是匿名的，并且具有已知的身份（即 <code>subject.getPrincipals()</code> 是非空的）。 但是，在先前的会话期间，通过先前的身份验证会记住此身份。 如果 <code>subject.isRemembered()</code> 返回 <code>true</code>，则认为该主题已被记住。</li><li><code>Authenticated</code> - 已认证。已认证的 <code>Subject</code> 是在当前会话期间已成功认证的 <code>Subject</code>。 如果 <code>subject.isAuthenticated()</code> 返回 <code>true</code>，则认为该 <code>Subject</code> 已通过身份验证。</li></ul><h3 id="登出" tabindex="-1"><a class="header-anchor" href="#登出" aria-hidden="true">#</a> 登出</h3><p>当 Subject 与应用程序完成交互后，可以调用 <code>subject.logout()</code> 登出，即放弃所有标识信息。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>currentUser<span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="认证流程" tabindex="-1"><a class="header-anchor" href="#认证流程" aria-hidden="true">#</a> 认证流程</h3><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20200317092427.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ol><li><p>应用程序代码调用 <code>Subject.login</code> 方法，传入构造的 <code>AuthenticationToken</code> 实例，该实例代表最终用户的 <code>Principals</code> 和 <code>Credentials</code>。</p></li><li><p><code>Subject</code> 实例（通常是 <code>DelegatingSubject</code>（或子类））通过调用 <code>securityManager.login</code>（token）委托应用程序的 <code>SecurityManager</code>，在此处开始实际的身份验证工作。</p></li><li><p><code>SecurityManager</code> 接收令牌，并通过调用 <code>authenticator.authenticate</code>（token）来简单地委派给其内部 <code>Authenticator</code> 实例。这几乎总是一个 <code>ModularRealmAuthenticator</code> 实例，它支持在身份验证期间协调一个或多个 <code>Realm</code> 实例。</p></li><li><p>如果为该应用程序配置了多个 <code>Realm</code>，则 <code>ModularRealmAuthenticator</code> 实例将利用其配置的 <code>AuthenticationStrategy</code> 发起多域验证尝试。在调用领域进行身份验证之前，期间和之后，将调用 <code>AuthenticationStrategy</code> 以使其对每个领域的结果做出反应。</p></li><li><p>请咨询每个已配置的 <code>Realm</code>，以查看其是否支持提交的 <code>AuthenticationToken</code>。 如果是这样，将使用提交的令牌调用支持 <code>Realm</code> 的 <code>getAuthenticationInfo</code> 方法。 <code>getAuthenticationInfo</code> 方法有效地表示对该特定 <code>Realm</code> 的单个身份验证尝试。</p></li></ol><h3 id="认证策略" tabindex="-1"><a class="header-anchor" href="#认证策略" aria-hidden="true">#</a> 认证策略</h3><p>当为一个应用程序配置两个或多个领域时，<code>ModularRealmAuthenticator</code> 依赖于内部 <code>AuthenticationStrategy</code> 组件来确定认证尝试成功或失败的条件。</p><p>例如，如果只有一个 Realm 成功地对 AuthenticationToken 进行身份验证，而所有其他 Realm 都失败了，那么该身份验证尝试是否被视为成功？还是必须所有领域都成功进行身份验证才能将整体尝试视为成功？或者，如果某个领域成功通过身份验证，是否有必要进一步咨询其他领域？ AuthenticationStrategy 根据应用程序的需求做出适当的决定。</p><p><code>AuthenticationStrategy</code> 是无状态组件，在尝试进行身份验证时会被查询 4 次（这 4 种交互所需的任何必要状态都将作为方法参数给出）：</p><ul><li>在任何领域被调用之前</li><li>在调用单个 <code>Realm</code> 的 <code>getAuthenticationInfo</code> 方法之前</li><li>在调用单个 <code>Realm</code> 的 <code>getAuthenticationInfo</code> 方法之后</li><li>在所有领域都被调用之后</li></ul><p><code>AuthenticationStrategy</code> 还负责汇总每个成功 <code>Realm</code> 的结果，并将它们“捆绑”成单个 <code>AuthenticationInfo</code> 表示形式。最终的聚合 <code>AuthenticationInfo</code> 实例是 <code>Authenticator</code> 实例返回的结果，也是 Shiro 用来表示主体的最终身份（也称为委托人）的东西。</p>`,41),u=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},[n("code",null,"AuthenticationStrategy")]),n("th",{style:{"text-align":"left"}},"描述")])],-1),d={style:{"text-align":"left"}},h={href:"http://shiro.apache.org/static/current/apidocs/org/apache/shiro/authc/pam/AtLeastOneSuccessfulStrategy.html",target:"_blank",rel:"noopener noreferrer"},k=n("code",null,"AtLeastOneSuccessfulStrategy",-1),m=n("td",{style:{"text-align":"left"}},[a("只要有一个 "),n("code",null,"Realm"),a(" 成功认证，则整个尝试都被视为成功。")],-1),g={style:{"text-align":"left"}},b={href:"http://shiro.apache.org/static/current/apidocs/org/apache/shiro/authc/pam/FirstSuccessfulStrategy.html",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"FirstSuccessfulStrategy",-1),f=n("td",{style:{"text-align":"left"}},[a("仅使用从第一个成功通过身份验证的 "),n("code",null,"Realm"),a(" 返回的信息，所有其他 Realm 将被忽略。")],-1),_={style:{"text-align":"left"}},S={href:"http://shiro.apache.org/static/current/apidocs/org/apache/shiro/authc/pam/AllSuccessfulStrategy.html",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"AllSuccessfulStrategy",-1),w=n("td",{style:{"text-align":"left"}},[a("只有所有 "),n("code",null,"Realm"),a(" 成功认证，则整个尝试才被视为成功。")],-1),x={href:"http://shiro.apache.org/authentication.html#apache-shiro-authentication",target:"_blank",rel:"noopener noreferrer"},j=t(`<h2 id="三、shiro-授权" tabindex="-1"><a class="header-anchor" href="#三、shiro-授权" aria-hidden="true">#</a> 三、Shiro 授权</h2><p>授权，也称为访问控制，是管理对资源的访问的过程。 换句话说，控制谁有权访问应用程序中的内容。</p><h3 id="授权元素" tabindex="-1"><a class="header-anchor" href="#授权元素" aria-hidden="true">#</a> 授权元素</h3><p>授权有三个核心要素：权限、角色和用户。</p><h4 id="权限" tabindex="-1"><a class="header-anchor" href="#权限" aria-hidden="true">#</a> 权限</h4><p>权限示例：</p><ul><li>打开一个文件</li><li>查看 <code>/user/list</code> web 页面</li><li>查询记录</li><li>删除一条记录</li><li>...</li></ul><p>大多数资源都支持一般的 CRUD 操作。除此以外，对于一些特定的资源，任何有意义的行为都是可以的。基本的设计思路是：权限控制，至少是基于资源和行为。</p><h4 id="角色" tabindex="-1"><a class="header-anchor" href="#角色" aria-hidden="true">#</a> 角色</h4><p>角色是一个命名实体，通常代表一组行为或职责。这些行为会转化为：谁可以在应用程序中执行哪些行为？谁不可以在程序中执行哪些行为？</p><p>角色通常是分配给用户帐户的，因此通过关联，用户可以获得自身角色所赋予的权限。</p><h4 id="用户" tabindex="-1"><a class="header-anchor" href="#用户" aria-hidden="true">#</a> 用户</h4><p>用户本质上是应用程序的“用户”。</p><p>用户（即 Shiro 的 <code>Subject</code>）通过与角色或直接权限的关联在应用程序中执行某些行为。</p><h3 id="基于角色的授权" tabindex="-1"><a class="header-anchor" href="#基于角色的授权" aria-hidden="true">#</a> 基于角色的授权</h3><p>如果授权是基于角色赋予权限的数据模型，编程模式如下：</p><p>【示例一】</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Subject currentUser = SecurityUtils.getSubject();

if (currentUser.hasRole(&quot;administrator&quot;)) {
    //show the admin button
} else {
    //don&#39;t show the button?  Grey it out?
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【示例二】</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Subject currentUser = SecurityUtils.getSubject();

// 检查当前 Subject 是否有某种权限
// 如果有，直接跳过；如果没有，Shiro 会抛出 AuthorizationException
currentUser.checkRole(&quot;bankTeller&quot;);
openBankAccount();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>提示：方式二相比方式一，代码更简洁</p></blockquote><h3 id="基于权限的授权" tabindex="-1"><a class="header-anchor" href="#基于权限的授权" aria-hidden="true">#</a> 基于权限的授权</h3><p><strong>更好的授权策略通常是基于权限的授权</strong>。基于权限的授权，由于它和应用程序的原始功能（针对具体资源上的行为）紧密相关，所以基于权限的授权源代码会在功能更改时同步更改（而不是在安全策略发生更改时）。 这意味着与类似的基于角色的授权代码相比，修改代码的影响面要小得多。</p><p>【示例】基于对象的权限检查</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Permission</span> printPermission <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrinterPermission</span><span class="token punctuation">(</span><span class="token string">&quot;laserjet4400n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;print&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Subject</span> currentUser <span class="token operator">=</span> <span class="token class-name">SecurityUtils</span><span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>currentUser<span class="token punctuation">.</span><span class="token function">isPermitted</span><span class="token punctuation">(</span>printPermission<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//show the Print button</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">//don&#39;t show the button?  Grey it out?</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在对象中存储权限控制信息，但这种方式较为繁重</p><p>【示例】字符串定义权限控制信息</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Subject</span> currentUser <span class="token operator">=</span> <span class="token class-name">SecurityUtils</span><span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>currentUser<span class="token punctuation">.</span><span class="token function">isPermitted</span><span class="token punctuation">(</span><span class="token string">&quot;printer:print:laserjet4400n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//show the Print button</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">//don&#39;t show the button?  Grey it out?</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 : 分隔，表示资源类型、行为、资源 ID，Shiro 提供了默认实现： <code>org.apache.shiro.authz.permission.WildcardPermission</code>。</p><p>这种权限控制方式的好处在于：轻量、灵活。</p><h3 id="基于注解的授权" tabindex="-1"><a class="header-anchor" href="#基于注解的授权" aria-hidden="true">#</a> 基于注解的授权</h3><p>Shiro 提供了一些用于授权的注解，来进一步简化授权代码。</p><h4 id="requiresauthentication" tabindex="-1"><a class="header-anchor" href="#requiresauthentication" aria-hidden="true">#</a> <code>@RequiresAuthentication</code></h4><p><code>@RequiresAuthentication</code> 注解要求当前 <code>Subject</code> 必须是已认证用户才可以访问被修饰的方法。</p><p>【示例】</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequiresAuthentication</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateAccount</span><span class="token punctuation">(</span><span class="token class-name">Account</span> userAccount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//this method will only be invoked by a</span>
    <span class="token comment">//Subject that is guaranteed authenticated</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="requiresguest" tabindex="-1"><a class="header-anchor" href="#requiresguest" aria-hidden="true">#</a> <code>@RequiresGuest</code></h4><p><code>@RequiresGuest</code> 注解要求当前 <code>Subject</code> 的角色是 <code>guest</code> 才可以访问被修饰的方法。</p><h3 id="授权流程" tabindex="-1"><a class="header-anchor" href="#授权流程" aria-hidden="true">#</a> 授权流程</h3><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20200317092618.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>`,40),A=n("li",null,[n("p",null,[a("应用程序或框架代码调用任何 "),n("code",null,"Subject"),a(" 的 "),n("code",null,"hasRole*"),a("，"),n("code",null,"checkRole*"),a("，"),n("code",null,"isPermitted*"),a(" 或 "),n("code",null,"checkPermission*"),a(" 方法，并传入所需的权限或角色。")])],-1),R=n("code",null,"Subject",-1),P=n("code",null,"DelegatingSubject",-1),q=n("code",null,"securityManager",-1),z=n("code",null,"hasRole*",-1),U=n("code",null,"checkRole*",-1),M=n("code",null,"isPermitted*",-1),F=n("code",null,"checkPermission*",-1),C=n("code",null,"SecurityManager",-1),B={href:"http://shiro.apache.org/static/current/apidocs/org/apache/shiro/authz/Authorizer.html",target:"_blank",rel:"noopener noreferrer"},N=n("code",null,"org.apache.shiro.authz.Authorizer",-1),T=t("<li><p><code>SecurityManager</code> 通过调用授权者各自的 <code>hasRole*</code>，<code>checkRole*</code>，<code>isPermitted*</code> 或 <code>checkPermission*</code> 方法来中继/委托其内部的 <code>org.apache.shiro.authz.Authorizer</code> 实例。默认情况下，<code>authorizer</code> 实例是 <code>ModularRealmAuthorizer</code> 实例，该实例支持在任何授权操作期间协调一个或多个 <code>Realm</code> 实例。</p></li><li><p>检查每个已配置的 <code>Realm</code>，以查看其是否实现相同的 <code>Authorizer</code> 接口。如果是这样，则将调用 <code>Realm</code> 各自的 <code>hasRole*</code>，<code>checkRole*</code>，<code>isPermitted*</code> 或 <code>checkPermission*</code> 方法。</p></li>",2),E={href:"http://shiro.apache.org/authorization.html#apache-shiro-authorization",target:"_blank",rel:"noopener noreferrer"},I=n("h2",{id:"四、shiro-会话管理",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#四、shiro-会话管理","aria-hidden":"true"},"#"),a(" 四、Shiro 会话管理")],-1),G=n("p",null,"Shiro 提供了一套独特的会话管理方案：其 Session 可以使用 Java SE 程序，也可以使用于 Java Web 程序。",-1),L={href:"http://shiro.apache.org/session-management.html#the-sessionmanager",target:"_blank",rel:"noopener noreferrer"},D=n("code",null,"Subject",-1),O=t(`<p>【示例】会话使用示例</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Subject</span> currentUser <span class="token operator">=</span> <span class="token class-name">SecurityUtils</span><span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Session</span> session <span class="token operator">=</span> currentUser<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span> <span class="token string">&quot;someKey&quot;</span><span class="token punctuation">,</span> someValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="会话超时" tabindex="-1"><a class="header-anchor" href="#会话超时" aria-hidden="true">#</a> 会话超时</h3><p>默认情况下，Shiro 中的会话有效期为 30 分钟，超时后，该会话将被 Shiro 视为无效。</p><p>可以通过 <code>globalSessionTimeout</code> 方法设置 Shiro 会话超时时间。</p><h3 id="会话监听" tabindex="-1"><a class="header-anchor" href="#会话监听" aria-hidden="true">#</a> 会话监听</h3><p>Shiro 提供了 <code>SessionListener</code> 接口（或 <code>SessionListenerAdapter</code> 接口），用于监听重要的会话事件，并允许使用者在事件触发时做定制化处理。</p><p>【示例】</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShiroSessionListener</span> <span class="token keyword">implements</span> <span class="token class-name">SessionListener</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> sessionCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token class-name">Session</span> session<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sessionCount<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStop</span><span class="token punctuation">(</span><span class="token class-name">Session</span> session<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sessionCount<span class="token punctuation">.</span><span class="token function">decrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onExpiration</span><span class="token punctuation">(</span><span class="token class-name">Session</span> session<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sessionCount<span class="token punctuation">.</span><span class="token function">decrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="会话存储" tabindex="-1"><a class="header-anchor" href="#会话存储" aria-hidden="true">#</a> 会话存储</h3><p>大多数情况下，应用需要保存会话信息，以便在稍后可以使用它。</p><p>Shiro 提供了 <code>SessionManager</code> 接口，负责将针对会话的 CRUD 操作委派给内部组件 <code>SessionDAO</code>，该组件反映了数据访问对象（DAO）设计模式。</p><blockquote><p>🔔 注意：由于会话通常具有时效性，所以一般会话天然适合存储于缓存中。存储于 Redis 中是一个不错的选择。</p></blockquote><h2 id="五、realm" tabindex="-1"><a class="header-anchor" href="#五、realm" aria-hidden="true">#</a> 五、Realm</h2><p><code>Realm</code> 是 Shiro 访问程序安全相关数据（如：用户、角色、权限）的接口。</p><p><code>Realm</code> 是有开发者自己实现的，开发者可以通过实现 Realm 接口，接入应用的数据源，如：JDBC、文件、Nosql 等等。</p><h3 id="认证令牌" tabindex="-1"><a class="header-anchor" href="#认证令牌" aria-hidden="true">#</a> 认证令牌</h3>`,17),H={href:"http://shiro.apache.org/static/current/apidocs/org/apache/shiro/realm/Realm.html#getAuthenticationInfo-org.apache.shiro.authc.AuthenticationToken-",target:"_blank",rel:"noopener noreferrer"},W=t(`<p>令牌认证处理流程如下：</p><ol><li>检查用于标识 principal 的令牌（帐户标识信息）。</li><li>根据 principal，在数据源中查找相应的帐户数据。</li><li>确保令牌提供的凭证与数据存储中存储的凭证匹配。</li><li>如果 credentials 匹配，则返回 <code>AuthenticationInfo</code> 实例。</li><li>如果 credentials 不匹配，则抛出 <code>AuthenticationException</code> 异常。</li></ol><h3 id="加密" tabindex="-1"><a class="header-anchor" href="#加密" aria-hidden="true">#</a> 加密</h3><p>通过前文，可以了解：Shiro 需要通过一对 principal 和 credentials 来确认身份是否匹配（即认证）。</p><p>一般来说，成熟软件是不允许存储账户、密码这些敏感数据时，使用明文存储。所以，通常要将密码加密后存储。</p><p>Shiro 提供了一些加密器，其思想就是用 MD5、SHA 这种数字签名算法，加 Salt，然后转为 Base64 字符串。为了避免被暴力破解，Shiro 使用多次加密的方式获得最终的 credentials 字符串。</p><p>【示例】Shiro 加密密码示例</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>hash<span class="token punctuation">.</span></span><span class="token class-name">Sha256Hash</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span></span><span class="token class-name">RandomNumberGenerator</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span></span><span class="token class-name">SecureRandomNumberGenerator</span></span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token comment">//We&#39;ll use a Random Number Generator to generate salts.  This</span>
<span class="token comment">//is much more secure than using a username as a salt or not</span>
<span class="token comment">//having a salt at all.  Shiro makes this easy.</span>
<span class="token comment">//</span>
<span class="token comment">//Note that a normal app would reference an attribute rather</span>
<span class="token comment">//than create a new RNG every time:</span>
<span class="token class-name">RandomNumberGenerator</span> rng <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecureRandomNumberGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Object</span> salt <span class="token operator">=</span> rng<span class="token punctuation">.</span><span class="token function">nextBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//Now hash the plain-text password with the random salt and multiple</span>
<span class="token comment">//iterations and then Base64-encode the value (requires less space than Hex):</span>
<span class="token class-name">String</span> hashedPasswordBase64 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sha256Hash</span><span class="token punctuation">(</span>plainTextPassword<span class="token punctuation">,</span> salt<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBase64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> hashedPasswordBase64<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//save the salt with the new account.  The HashedCredentialsMatcher</span>
<span class="token comment">//will need it later when handling login attempts:</span>
user<span class="token punctuation">.</span><span class="token function">setPasswordSalt</span><span class="token punctuation">(</span>salt<span class="token punctuation">)</span><span class="token punctuation">;</span>
userDAO<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="六、配置" tabindex="-1"><a class="header-anchor" href="#六、配置" aria-hidden="true">#</a> 六、配置</h2><h3 id="过滤链" tabindex="-1"><a class="header-anchor" href="#过滤链" aria-hidden="true">#</a> 过滤链</h3><p>运行 Web 应用程序时，Shiro 将创建一些有用的默认 Filter 实例。</p>`,11),V=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"Filter Name"),n("th",{style:{"text-align":"left"}},"Class")])],-1),J=n("td",{style:{"text-align":"left"}},"anon",-1),K={style:{"text-align":"left"}},X={href:"http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authc/AnonymousFilter.html",target:"_blank",rel:"noopener noreferrer"},Q=n("td",{style:{"text-align":"left"}},"authc",-1),Y={style:{"text-align":"left"}},Z={href:"http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authc/FormAuthenticationFilter.html",target:"_blank",rel:"noopener noreferrer"},$=n("td",{style:{"text-align":"left"}},"authcBasic",-1),nn={style:{"text-align":"left"}},an={href:"http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authc/BasicHttpAuthenticationFilter.html",target:"_blank",rel:"noopener noreferrer"},sn=n("td",{style:{"text-align":"left"}},"logout",-1),en={style:{"text-align":"left"}},tn={href:"http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authc/LogoutFilter.html",target:"_blank",rel:"noopener noreferrer"},on=n("td",{style:{"text-align":"left"}},"noSessionCreation",-1),cn={style:{"text-align":"left"}},ln={href:"http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/session/NoSessionCreationFilter.html",target:"_blank",rel:"noopener noreferrer"},pn=n("td",{style:{"text-align":"left"}},"perms",-1),rn={style:{"text-align":"left"}},un={href:"http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authz/PermissionsAuthorizationFilter.html",target:"_blank",rel:"noopener noreferrer"},dn=n("td",{style:{"text-align":"left"}},"port",-1),hn={style:{"text-align":"left"}},kn={href:"http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authz/PortFilter.html",target:"_blank",rel:"noopener noreferrer"},mn=n("td",{style:{"text-align":"left"}},"rest",-1),gn={style:{"text-align":"left"}},bn={href:"http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authz/HttpMethodPermissionFilter.html",target:"_blank",rel:"noopener noreferrer"},vn=n("td",{style:{"text-align":"left"}},"roles",-1),fn={style:{"text-align":"left"}},_n={href:"http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authz/RolesAuthorizationFilter.html",target:"_blank",rel:"noopener noreferrer"},Sn=n("td",{style:{"text-align":"left"}},"ssl",-1),yn={style:{"text-align":"left"}},wn={href:"http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authz/SslFilter.html",target:"_blank",rel:"noopener noreferrer"},xn=n("td",{style:{"text-align":"left"}},"user",-1),jn={style:{"text-align":"left"}},An={href:"http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authc/UserFilter.html",target:"_blank",rel:"noopener noreferrer"},Rn=t(`<h3 id="rememberme" tabindex="-1"><a class="header-anchor" href="#rememberme" aria-hidden="true">#</a> RememberMe</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">UsernamePasswordToken</span> token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordToken</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
token<span class="token punctuation">.</span><span class="token function">setRememberMe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">SecurityUtils</span><span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,3),Pn={href:"http://shiro.apache.org/reference.html",target:"_blank",rel:"noopener noreferrer"},qn={href:"http://jinnianshilongnian.iteye.com/category/305053",target:"_blank",rel:"noopener noreferrer"},zn={href:"https://stormpath.com/blog/new-rbac-resource-based-access-control",target:"_blank",rel:"noopener noreferrer"};function Un(Mn,Fn){const s=c("ExternalLinkIcon");return i(),l("div",null,[r,n("table",null,[u,n("tbody",null,[n("tr",null,[n("td",d,[n("a",h,[k,e(s)])]),m]),n("tr",null,[n("td",g,[n("a",b,[v,e(s)])]),f]),n("tr",null,[n("td",_,[n("a",S,[y,e(s)])]),w])])]),n("blockquote",null,[n("p",null,[a("🔗 更多认证细节可以参考："),n("a",x,[a("Apache Shiro Authentication"),e(s)])])]),j,n("ol",null,[A,n("li",null,[n("p",null,[R,a(" 实例，通常是 "),P,a("（或子类），通过调用 "),q,a(" 几乎相同的各自 "),z,a("，"),U,a("，"),M,a(" 或 "),F,a(" 方法来委托 "),C,a(" （实现了 "),n("a",B,[N,e(s)]),a(" 接口）处理授权。")])]),T]),n("blockquote",null,[n("p",null,[a("🔗 更多授权细节可以参考："),n("a",E,[a("Apache Shiro Authorization"),e(s)])])]),I,G,n("p",null,[a("在 Shiro 中，"),n("a",L,[a("SessionManager"),e(s)]),a(" 负责管理应用所有 "),D,a(" 的会话，如：创建、删除、失效、验证等。")]),O,n("p",null,[a("Shiro 支持身份验证令牌。在咨询 Realm 进行认证尝试之前，将调用其支持方法。 如果返回值为 true，则仅会调用其 "),n("a",H,[a("getAuthenticationInfo(token)"),e(s)]),a(" 方法。通常，Realm 会检查所提交令牌的类型（接口或类），以查看其是否可以处理它。")]),W,n("table",null,[V,n("tbody",null,[n("tr",null,[J,n("td",K,[n("a",X,[a("org.apache.shiro.web.filter.authc.AnonymousFilter"),e(s)])])]),n("tr",null,[Q,n("td",Y,[n("a",Z,[a("org.apache.shiro.web.filter.authc.FormAuthenticationFilter"),e(s)])])]),n("tr",null,[$,n("td",nn,[n("a",an,[a("org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter"),e(s)])])]),n("tr",null,[sn,n("td",en,[n("a",tn,[a("org.apache.shiro.web.filter.authc.LogoutFilter"),e(s)])])]),n("tr",null,[on,n("td",cn,[n("a",ln,[a("org.apache.shiro.web.filter.session.NoSessionCreationFilter"),e(s)])])]),n("tr",null,[pn,n("td",rn,[n("a",un,[a("org.apache.shiro.web.filter.authz.PermissionsAuthorizationFilter"),e(s)])])]),n("tr",null,[dn,n("td",hn,[n("a",kn,[a("org.apache.shiro.web.filter.authz.PortFilter"),e(s)])])]),n("tr",null,[mn,n("td",gn,[n("a",bn,[a("org.apache.shiro.web.filter.authz.HttpMethodPermissionFilter"),e(s)])])]),n("tr",null,[vn,n("td",fn,[n("a",_n,[a("org.apache.shiro.web.filter.authz.RolesAuthorizationFilter"),e(s)])])]),n("tr",null,[Sn,n("td",yn,[n("a",wn,[a("org.apache.shiro.web.filter.authz.SslFilter"),e(s)])])]),n("tr",null,[xn,n("td",jn,[n("a",An,[a("org.apache.shiro.web.filter.authc.UserFilter"),e(s)])])])])]),Rn,n("ul",null,[n("li",null,[n("a",Pn,[a("Shiro 官方文档"),e(s)])]),n("li",null,[n("a",qn,[a("跟我学 Shiro"),e(s)])]),n("li",null,[n("a",zn,[a("The New RBAC: Resource-Based Access Control"),e(s)])])])])}const Nn=o(p,[["render",Un],["__file","index.html.vue"]]);export{Nn as default};
