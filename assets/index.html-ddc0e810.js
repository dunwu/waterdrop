import{_ as u}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as r,c as k,a as n,d as o,b as s,w as a,e as l}from"./app-2ef6c758.js";const v={},g=l('<h1 id="java-基础面试一" tabindex="-1"><a class="header-anchor" href="#java-基础面试一" aria-hidden="true">#</a> Java 基础面试一</h1><h2 id="java-常识" tabindex="-1"><a class="header-anchor" href="#java-常识" aria-hidden="true">#</a> Java 常识</h2><h3 id="【简单】java-语言有什么优势" tabindex="-1"><a class="header-anchor" href="#【简单】java-语言有什么优势" aria-hidden="true">#</a> 【简单】Java 语言有什么优势？</h3><ul><li><strong>跨平台</strong>：【<strong>一次编写，到处执行（Write Once, Run Anywhere）</strong>】——JVM 执行字节码。</li><li><strong>自动垃圾回收</strong>：垃圾回收（GC）减少内存泄漏风险。</li><li><strong>强大生态</strong>：Spring、Hadoop、Android 等广泛支持。</li><li><strong>面向对象</strong>：支持封装、继承、多态，代码结构清晰易维护。</li><li><strong>高性能</strong>：JIT 编译优化，多线程支持高并发。</li><li><strong>健壮安全</strong>：强类型检查、异常处理、JVM 安全机制。</li></ul><h3 id="【简单】oracle-jdk-和-open-jdk-有什么区别" tabindex="-1"><a class="header-anchor" href="#【简单】oracle-jdk-和-open-jdk-有什么区别" aria-hidden="true">#</a> 【简单】Oracle JDK 和 Open JDK 有什么区别？</h3><table><thead><tr><th></th><th>OpenJDK</th><th>Oracle JDK</th></tr></thead><tbody><tr><td>是否开源</td><td>完全开源</td><td>闭源</td></tr><tr><td>是否免费</td><td>完全免费</td><td>JDK8u221 之后存在限制</td></tr><tr><td>更新频率</td><td>一般每 3 个月发布一个版本；不提供 LTS 服务</td><td>一般每 6 个月发布一个版本；大概每三年推出一个 LTS 版本</td></tr><tr><td>功能性</td><td>Java 11 之后，OracleJDK 和 OpenJDK 的功能基本一致</td><td></td></tr><tr><td>协议</td><td>GPL v2</td><td>BCL/OTN</td></tr></tbody></table><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202504030804687.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="【简单】java-se-和-java-ee-有什么区别" tabindex="-1"><a class="header-anchor" href="#【简单】java-se-和-java-ee-有什么区别" aria-hidden="true">#</a> 【简单】Java SE 和 Java EE 有什么区别？</h3><p>Java 技术既是一种编程语言，又是一种平台。Java 编程语言是一种具有特定语法和风格的高级面向对象语言。Java 平台是 Java 编程语言应用程序运行的特定环境。</p><ul><li><strong>Java SE</strong>（Java Platform, Standard Edition） - <strong>Java 平台标准版</strong>。Java SE 的 API 提供了 Java 编程语言的核心功能。它定义了从 Java 编程语言的基本类型和对象到用于网络、安全、数据库访问、图形用户界面 (GUI) 开发和 XML 解析的高级类的所有内容。除了核心 API 之外，Java SE 平台还包括虚拟机、开发工具、部署技术以及 Java 技术应用程序中常用的其他类库和工具包。</li><li><strong>Java EE</strong>（Java Platform, Enterprise Edition） - <strong>Java 平台企业版</strong>。Java EE 构建在 Java SE 基础之上。 Java EE 定义了企业级应用程序开发和部署的标准和规范，如：Servlet、JSP、EJB、JDBC、JPA、JTA、JavaMail、JMS。</li></ul>',10),m={class:"hint-container tip"},b=n("p",{class:"hint-container-title"},"扩展",-1),h={href:"https://docs.oracle.com/javaee/6/firstcup/doc/gkhoy.html",target:"_blank",rel:"noopener noreferrer"},y=n("strong",null,"Your First Cup",-1),f=l(`<h3 id="【简单】jdk、jre、jvm-之间有什么关系" tabindex="-1"><a class="header-anchor" href="#【简单】jdk、jre、jvm-之间有什么关系" aria-hidden="true">#</a> 【简单】JDK、JRE、JVM 之间有什么关系？</h3><p>JDK、JRE、JVM 的定义和简介：</p><ul><li><strong>JVM</strong> - Java Virtual Machine 的缩写，即 Java 虚拟机。JVM 是运行 Java 字节码的虚拟机。JVM 不理解 Java 源代码，这就是为什么要将 <code>*.java</code> 文件编译为 JVM 可理解的 <code>*.class</code> 文件（字节码）。Java 有一句著名的口号：“<strong>Write Once, Run Anywhere（一次编写，随处运行）</strong>”，JVM 正是其核心所在。实际上，JVM 针对不同的系统（Windows、Linux、MacOS）有不同的实现，目的在于用相同的字节码执行同样的结果。</li><li><strong>JRE</strong> - Java Runtime Environment 的缩写，即 Java 运行时环境。它是运行已编译 Java 程序所需的一切的软件包，主要包括 JVM、Java 类库（Class Library）、Java 命令和其他基础结构。但是，它不能用于创建新程序。</li><li><strong>JDK</strong> - Java Development Kit 的缩写，即 Java SDK。它不仅包含 JRE 的所有功能，还包含编译器 (javac) 和工具（如 javadoc 和 jdb）。它能够创建和编译程序。</li></ul><p>总结来说，JDK、JRE、JVM 三者的关系是：JDK &gt; JRE &gt; JVM</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>JDK = JRE + 开发/调试工具
JRE = JVM + Java 类库 + Java 运行库
JVM = 类加载系统 + 运行时内存区域 + 执行引擎
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202504030804019.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,6),w={class:"hint-container tip"},x=n("p",{class:"hint-container-title"},"扩展",-1),j={href:"https://stackoverflow.com/questions/1906445/what-is-the-difference-between-jdk-and-jre",target:"_blank",rel:"noopener noreferrer"},_=n("h3",{id:"【中等】java-如何调用外部可执行程序或系统命令",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#【中等】java-如何调用外部可执行程序或系统命令","aria-hidden":"true"},"#"),s(" 【中等】Java 如何调用外部可执行程序或系统命令？")],-1),J=n("p",null,"Java 提供了两种调用外部可执行程序或系统命令的方式：",-1),E=n("ul",null,[n("li",null,[n("code",null,"ProcessBuilder")]),n("li",null,[n("code",null,"Runtime.exec()")])],-1),S={class:"hint-container tip"},C=n("p",{class:"hint-container-title"},"扩展",-1),A={href:"https://blog.csdn.net/m0_46487331/article/details/128827908",target:"_blank",rel:"noopener noreferrer"},I=l(`<h3 id="【中等】java-和-c-、go-语言的区别-各自的优缺点" tabindex="-1"><a class="header-anchor" href="#【中等】java-和-c-、go-语言的区别-各自的优缺点" aria-hidden="true">#</a> 【中等】Java 和 C++、Go 语言的区别，各自的优缺点？</h3><ul><li>Java 跨平台支持好、生态完善、支持 GC</li><li>C++ 性能高、手动创建释放内存</li><li>Go 并发能力强（轻量级线程）</li></ul><h3 id="【中等】java-里程碑版本中的核心特性有哪些" tabindex="-1"><a class="header-anchor" href="#【中等】java-里程碑版本中的核心特性有哪些" aria-hidden="true">#</a> 【中等】Java 里程碑版本中的核心特性有哪些？</h3><ul><li><strong>Java 8（2014）</strong><ul><li><strong>Lambda 表达式</strong>：函数式编程支持（<code>(a, b) -&gt; a + b</code>）</li><li><strong>Stream API</strong>：链式数据流操作（<code>filter/map/reduce</code>）</li><li><strong>默认方法</strong>：接口支持默认实现（<code>default void foo() {}</code>）</li><li><strong>新的日期时间 API</strong>：<code>java.time</code>（<code>LocalDate</code>、<code>ZonedDateTime</code>）</li><li><strong>Optional</strong>：优雅处理 <code>null</code>（<code>Optional.ofNullable(x)</code>）</li><li><strong>默认 GC 设为 G1</strong></li></ul></li><li><strong>Java 11（2018）</strong><ul><li><strong>局部变量类型推断</strong>：<code>var list = new ArrayList&lt;String&gt;()</code></li><li><strong>HTTP Client API</strong>：标准化的异步 HTTP 客户端（<code>HttpClient</code>）</li><li><strong>字符串 API 增强</strong>：<code>isBlank()</code>、<code>lines()</code>、<code>repeat()</code></li><li><strong>新垃圾收集器</strong>：<strong>ZGC</strong>（低延迟）和 <strong>Shenandoah</strong>（并发回收）成为标准功能</li></ul></li><li><strong>Java 17（2021）</strong><ul><li><strong>密封类（Sealed Classes）</strong>：限制类继承（permits 子类）</li><li><strong>模式匹配增强</strong>：<code>instanceof</code> 直接类型转换（<code>if (obj instanceof String s)</code>）</li><li><strong>文本块（正式版）</strong>：多行字符串（&quot;&quot;&quot;...&quot;&quot;&quot;）</li><li><strong>移除实验性 AOT/JIT</strong>：删除 <strong>GraalVM</strong> 相关实验性特性</li></ul></li><li><strong>Java 21（2023）</strong><ul><li><strong>虚拟线程（Virtual Threads）</strong>：轻量级线程（<code>Thread.startVirtualThread()</code>）</li><li><strong>结构化并发</strong>：简化多线程任务管理（<code>StructuredTaskScope</code>）</li><li><strong>记录模式（Record Patterns）</strong>：解构记录类（<code>if (obj instanceof Point(int x, int y))</code>）</li><li><strong>分代 ZGC</strong>：针对年轻代优化的 ZGC，减少垃圾回收开销</li><li><strong>弃用 Windows 32-bit</strong>：正式放弃对 32 位 Windows 的支持</li></ul></li></ul><h2 id="java-基础语法" tabindex="-1"><a class="header-anchor" href="#java-基础语法" aria-hidden="true">#</a> Java 基础语法</h2><h3 id="【简单】java-有几种注释形式" tabindex="-1"><a class="header-anchor" href="#【简单】java-有几种注释形式" aria-hidden="true">#</a> 【简单】Java 有几种注释形式？</h3><p>注释用于在源代码中解释代码的作用，可以增强程序的可读性，可维护性。 空白行，或者注释的内容，都会被 Java 编译器忽略掉。</p><p>Java 注释主要有三种类型：</p><ul><li>单行注释</li><li>多行注释</li><li>文档注释（JavaDoc）</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 文档注释
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 单行注释</span>
        <span class="token comment">/*
        多行注释
        */</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="【简单】java-有哪些标识符命名规则" tabindex="-1"><a class="header-anchor" href="#【简单】java-有哪些标识符命名规则" aria-hidden="true">#</a> 【简单】Java 有哪些标识符命名规则？</h3><p>Java 所有的组成部分都需要名字。类名、变量名以及方法名都被称为标识符。</p><p><strong>标识符基本规则</strong></p><ul><li><strong>组成元素</strong>：类名、变量名、方法名等统称为标识符</li><li><strong>允许字符</strong>：可包含字母、数字、<code>$</code>、<code>_</code></li><li><strong>首字符要求</strong>：不能以数字开头</li><li><strong>禁止关键字</strong>：如 <code>class</code>、<code>public</code> 等保留字不可作为标识符</li><li><strong>大小写敏感</strong>：<code>age</code> 和 <code>Age</code> 被视为不同标识符</li></ul><p><strong>命名规范</strong></p>`,15),q={href:"https://zh.wikipedia.org/wiki/%E9%A7%9D%E5%B3%B0%E5%BC%8F%E5%A4%A7%E5%B0%8F%E5%AF%AB",target:"_blank",rel:"noopener noreferrer"},D=l('<table><thead><tr><th style="text-align:left;"><strong>类型</strong></th><th style="text-align:left;"><strong>命名法</strong></th><th style="text-align:left;"><strong>示例</strong></th></tr></thead><tbody><tr><td style="text-align:left;"><strong>类/接口名</strong></td><td style="text-align:left;">大驼峰（Upper CamelCase）</td><td style="text-align:left;"><code>StudentInfo</code>、<code>UserService</code></td></tr><tr><td style="text-align:left;"><strong>方法/变量名</strong></td><td style="text-align:left;">小驼峰（Lower CamelCase）</td><td style="text-align:left;"><code>getUserName()</code>、<code>studentAge</code></td></tr><tr><td style="text-align:left;"><strong>常量名</strong></td><td style="text-align:left;">全大写蛇形（SNAKE_CASE）</td><td style="text-align:left;"><code>MAX_SIZE</code>、<code>DEFAULT_TIMEOUT</code></td></tr></tbody></table><p><strong>注意事项</strong></p><ul><li><strong>避免使用 <code>$</code></strong>：虽然合法，但通常用于编译器生成代码</li><li><strong>无长度限制</strong>：但应保持简洁且语义明确（如用 <code>count</code> 而非 <code>c</code>）</li><li><strong>Unicode 支持</strong>：可使用中文等字符（但不推荐）</li></ul><h3 id="【简单】java-中有哪些关键字" tabindex="-1"><a class="header-anchor" href="#【简单】java-中有哪些关键字" aria-hidden="true">#</a> 【简单】Java 中有哪些关键字？</h3><p>下面列出了 Java 保留字，这些保留字不能用于常量、变量、和任何标识符的名称。</p><table><thead><tr><th>分类</th><th>关键字</th></tr></thead><tbody><tr><td>访问级别修饰符</td><td>private、protected、public、default</td></tr><tr><td>类，方法和变量修饰符</td><td>abstract、class、extends、final、implements、interface、native、new、static、strictfp、synchronized、transient、volatile、enum</td></tr><tr><td>程序控制语句</td><td>break、continue、return、do、while、if、else、for、instanceof、switch、case</td></tr><tr><td>错误处理</td><td>assert、try、catch、throw、throws、finally</td></tr><tr><td>包相关</td><td>import、package</td></tr><tr><td>数据类型</td><td>boolean、byte、char、short、int、long、float、double、enum</td></tr><tr><td>变量引用</td><td>super、this、void</td></tr><tr><td>其他保留字</td><td>goto、const</td></tr></tbody></table>',6),L={class:"hint-container warning"},T=n("p",{class:"hint-container-title"},"注意",-1),B=n("p",null,[s("Java 的 "),n("code",null,"null"),s(" 不是关键字，类似于 "),n("code",null,"true"),s(" 和 "),n("code",null,"false"),s("，它是一个字面常量，不允许作为标识符使用。")],-1),O=n("strong",null,"官方文档",-1),V={href:"https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html",target:"_blank",rel:"noopener noreferrer"},M=l(`<h3 id="【中等】如果移位操作位数超限会怎样" tabindex="-1"><a class="header-anchor" href="#【中等】如果移位操作位数超限会怎样" aria-hidden="true">#</a> 【中等】如果移位操作位数超限会怎样？</h3><p><strong>移位位数处理机制</strong></p><p>Java 对移位位数超限的处理采用<strong>隐式取模运算</strong>：</p><ul><li><strong><code>int</code> 类型（32 位）</strong>：实际移位位数 = <code>指定位数 % 32</code><ul><li>例如：<code>x &lt;&lt; 42</code> → 实际左移 <code>42 % 32 = 10</code> 位</li></ul></li><li><strong><code>long</code> 类型（64 位）</strong>：实际移位位数 = <code>指定位数 % 64</code><ul><li>例如：<code>x &lt;&lt; 100</code> → 实际左移 <code>100 % 64 = 36</code> 位</li></ul></li></ul><p><strong>位操作统一规则</strong></p><table><thead><tr><th style="text-align:left;"><strong>操作符</strong></th><th style="text-align:left;"><strong>示例</strong></th><th style="text-align:left;"><strong>等效操作</strong></th><th style="text-align:left;"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:left;"><code>&lt;&lt;</code></td><td style="text-align:left;"><code>x &lt;&lt; 35</code></td><td style="text-align:left;"><code>x &lt;&lt; 3</code> (35%32=3)</td><td style="text-align:left;">左移，低位补 0</td></tr><tr><td style="text-align:left;"><code>&gt;&gt;</code></td><td style="text-align:left;"><code>x &gt;&gt; 35</code></td><td style="text-align:left;"><code>x &gt;&gt; 3</code> (35%32=3)</td><td style="text-align:left;">右移，高位补符号位（算术右移）</td></tr><tr><td style="text-align:left;"><code>&gt;&gt;&gt;</code></td><td style="text-align:left;"><code>x &gt;&gt;&gt; 35</code></td><td style="text-align:left;"><code>x &gt;&gt;&gt; 3</code> (35%32=3)</td><td style="text-align:left;">无符号右移，高位补 0</td></tr></tbody></table><p><strong>底层原理</strong></p><ul><li><strong>硬件优化</strong>：CPU 执行移位指令时，实际只使用指定位数的低 5 位（int）或低 6 位（long），与 Java 的取模规则一致。</li><li><strong>安全设计</strong>：避免无效的大位数移位（如 <code>x &lt;&lt; 1000</code>）导致不可预测行为。</li></ul><p><strong>示例</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 二进制全 1（32 个 1）</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 左移 10 位，输出 -1024</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">&lt;&lt;</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 等效左移 10 位（42%32=10），同样输出 -1024</span>

<span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l <span class="token operator">&lt;&lt;</span> <span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 等效左移 6 位（70%64=6），输出 -64</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>特殊情况</strong></p><ul><li><strong>移位 0 位</strong>：任何 <code>x &lt;&lt; 32</code> 或 <code>x &gt;&gt; 64</code> 等效不移位（因 <code>32%32=0</code>，<code>64%64=0</code>）。</li><li><strong>负数移位</strong>：移位位数可为负数，但会通过取模转为正数（如 <code>x &lt;&lt; -6</code> → <code>x &lt;&lt; 26</code>，因 <code>-6 % 32 = 26</code>）。</li></ul><div class="hint-container info"><p class="hint-container-title">为什么这样设计？</p></div><ul><li><strong>兼容性</strong>：与 C/C++的移位行为一致。</li><li><strong>性能</strong>：直接映射到 CPU 指令，无需额外检查。</li><li><strong>确定性</strong>：保证结果可预测，避免未定义行为。</li></ul><h2 id="java-数据类型" tabindex="-1"><a class="header-anchor" href="#java-数据类型" aria-hidden="true">#</a> Java 数据类型</h2><h3 id="【简单】java-是否只支持值传递" tabindex="-1"><a class="header-anchor" href="#【简单】java-是否只支持值传递" aria-hidden="true">#</a> 【简单】Java 是否只支持值传递？</h3><p><strong>Java 只支持值传递</strong>。</p><ul><li><strong>值传递</strong>：方法参数传递的是实参的副本</li><li><strong>引用传递</strong>：方法参数传递的是实参的地址；因此，修改形参会同步影响实参</li></ul><h3 id="【简单】java-有哪些值类型" tabindex="-1"><a class="header-anchor" href="#【简单】java-有哪些值类型" aria-hidden="true">#</a> 【简单】Java 有哪些值类型？</h3><p>Java 中的数据类型有两类：</p><ul><li>值类型（又叫内置数据类型，基本数据类型）</li><li>引用类型（除值类型以外，都是引用类型，包括 <code>String</code>、数组等）</li></ul><p>Java 语言提供了 <strong>8</strong> 种基本类型，大致分为 <strong>4</strong> 类：布尔型、字符型、整数型、浮点型。</p><table><thead><tr><th>基本数据类型</th><th>分类</th><th>大小</th><th>默认值</th><th>取值范围</th><th>包装类</th><th>说明</th></tr></thead><tbody><tr><td><code>boolean</code></td><td><strong>布尔型</strong></td><td>-</td><td><code>false</code></td><td><code>false, true</code></td><td>Boolean</td><td><code>boolean</code> 的大小，是由具体的 JVM 实现来决定的</td></tr><tr><td><code>char</code></td><td><strong>字符型</strong></td><td>16 bit</td><td><code>&#39;u0000&#39;</code></td><td><code>[0, 2^16 - 1]</code></td><td>Character</td><td>存储 Unicode 码，用单引号赋值</td></tr><tr><td><code>byte</code></td><td><strong>整数型</strong></td><td>8 bit</td><td><code>0</code></td><td><code>[-2^7, 2^7 - 1]</code></td><td>Byte</td><td></td></tr><tr><td><code>short</code></td><td><strong>整数型</strong></td><td>16 bit</td><td><code>0</code></td><td><code>[-2^15, 2^15 - 1]</code></td><td>Short</td><td></td></tr><tr><td><code>int</code></td><td><strong>整数型</strong></td><td>32 bit</td><td><code>0</code></td><td><code>[-2^31, 2^31 - 1]</code></td><td>Integer</td><td></td></tr><tr><td><code>long</code></td><td><strong>整数型</strong></td><td>64 bit</td><td><code>0L</code></td><td><code>[-2^63, 2^63 - 1]</code></td><td>Long</td><td>赋值时一般在数字后加上 <code>l</code> 或 <code>L</code></td></tr><tr><td><code>float</code></td><td><strong>浮点型</strong></td><td>32 bit</td><td><code>0.0f</code></td><td><code>[2^-149, 2^128 - 1]</code></td><td>Float</td><td>赋值时必须在数字后加上 <code>f</code> 或 <code>F</code></td></tr><tr><td><code>double</code></td><td><strong>浮点型</strong></td><td>64 bit</td><td><code>0.0d</code></td><td><code>[2^-1074, 2^1024 - 1]</code></td><td>Double</td><td>赋值时一般在数字后加 <code>d</code> 或 <code>D</code></td></tr></tbody></table>`,23),F={class:"hint-container tip"},N=n("p",{class:"hint-container-title"},"扩展",-1),U={href:"https://www.runoob.com/java/java-basic-datatypes.html",target:"_blank",rel:"noopener noreferrer"},R=l(`<h3 id="【简单】什么是装箱、拆箱" tabindex="-1"><a class="header-anchor" href="#【简单】什么是装箱、拆箱" aria-hidden="true">#</a> 【简单】什么是装箱、拆箱？</h3><div class="hint-container info"><p class="hint-container-title">什么是装箱、拆箱？</p></div><p>Java 中为每一种基本数据类型提供了相应的包装类，如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Byte</span> <span class="token operator">&lt;</span><span class="token operator">-&gt;</span> <span class="token keyword">byte</span>
<span class="token class-name">Short</span> <span class="token operator">&lt;</span><span class="token operator">-&gt;</span> <span class="token keyword">short</span>
<span class="token class-name">Integer</span> <span class="token operator">&lt;</span><span class="token operator">-&gt;</span> <span class="token keyword">int</span>
<span class="token class-name">Long</span> <span class="token operator">&lt;</span><span class="token operator">-&gt;</span> <span class="token keyword">long</span>
<span class="token class-name">Float</span> <span class="token operator">&lt;</span><span class="token operator">-&gt;</span> <span class="token keyword">float</span>
<span class="token class-name">Double</span> <span class="token operator">&lt;</span><span class="token operator">-&gt;</span> <span class="token keyword">double</span>
<span class="token class-name">Character</span> <span class="token operator">&lt;</span><span class="token operator">-&gt;</span> <span class="token keyword">char</span>
<span class="token class-name">Boolean</span> <span class="token operator">&lt;</span><span class="token operator">-&gt;</span> <span class="token keyword">boolean</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>引入包装类的目的</strong>就是：提供一种机制，使得<strong>基本数据类型可以与引用类型互相转换</strong>。</p><p>基本数据类型与包装类的转换被称为装箱和拆箱。</p><ul><li><strong>装箱（boxing）是将值类型转换为引用类型</strong>。例如：<code>int</code> 转 <code>Integer</code><ul><li><strong>装箱过程是通过调用包装类的 <code>valueOf</code> 方法实现的</strong>。</li></ul></li><li><strong>拆箱（unboxing）是将引用类型转换为值类型</strong>。例如：<code>Integer</code> 转 <code>int</code><ul><li><strong>拆箱过程是通过调用包装类的 <code>xxxValue</code> 方法实现的</strong>。（xxx 代表对应的基本数据类型）。</li></ul></li></ul><div class="hint-container info"><p class="hint-container-title">什么是自动装箱与拆箱？</p></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment">//装箱</span>
<span class="token keyword">int</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>   <span class="token comment">//拆箱</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这两行代码对应的字节码为：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>   <span class="token constant">L1</span>

    <span class="token constant">LINENUMBER</span> <span class="token number">8</span> <span class="token constant">L1</span>

    <span class="token constant">ALOAD</span> <span class="token number">0</span>

    <span class="token constant">BIPUSH</span> <span class="token number">10</span>

    <span class="token constant">INVOKESTATIC</span> java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Integer</span><span class="token punctuation">.</span>valueOf <span class="token punctuation">(</span><span class="token class-name">I</span><span class="token punctuation">)</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Integer</span><span class="token punctuation">;</span>

    <span class="token constant">PUTFIELD</span> <span class="token class-name">AutoBoxTest</span><span class="token punctuation">.</span>i <span class="token operator">:</span> <span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Integer</span><span class="token punctuation">;</span>

   <span class="token constant">L2</span>

    <span class="token constant">LINENUMBER</span> <span class="token number">9</span> <span class="token constant">L2</span>

    <span class="token constant">ALOAD</span> <span class="token number">0</span>

    <span class="token constant">ALOAD</span> <span class="token number">0</span>

    <span class="token constant">GETFIELD</span> <span class="token class-name">AutoBoxTest</span><span class="token punctuation">.</span>i <span class="token operator">:</span> <span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Integer</span><span class="token punctuation">;</span>

    <span class="token constant">INVOKEVIRTUAL</span> java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Integer</span><span class="token punctuation">.</span>intValue <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">I</span>

    <span class="token constant">PUTFIELD</span> <span class="token class-name">AutoBoxTest</span><span class="token punctuation">.</span>n <span class="token operator">:</span> <span class="token class-name">I</span>

    <span class="token constant">RETURN</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过字节码代码，不难发现，装箱其实就是调用了 包装类的 <code>valueOf()</code> 方法；而拆箱其实就是调用了 <code>xxxValue()</code> 方法。再次印证前文的内容：</p><ul><li><strong>装箱过程是通过调用包装类的 <code>valueOf</code> 方法实现的</strong>。</li><li><strong>拆箱过程是通过调用包装类的 <code>xxxValue</code> 方法实现的</strong>。</li></ul><p>因此，</p><ul><li><code>Integer a = 10</code> 等价于 <code>Integer a = Integer.valueOf(10)</code></li><li><code>int b = a</code> 等价于 <code>int b = a.intValue()</code>;</li></ul>`,15),P={class:"hint-container tip"},K=n("p",{class:"hint-container-title"},"扩展",-1),z={href:"https://www.cnblogs.com/dolphin0520/p/3780005.html",target:"_blank",rel:"noopener noreferrer"},G=l('<h3 id="【中等】包装类型的缓存机制了解么" tabindex="-1"><a class="header-anchor" href="#【中等】包装类型的缓存机制了解么" aria-hidden="true">#</a> 【中等】包装类型的缓存机制了解么？</h3><p>Java 基本数据类型的包装类型的大部分都用到了缓存机制来提升性能。</p><p><code>Byte</code>,<code>Short</code>,<code>Integer</code>,<code>Long</code> 这 4 种包装类默认创建了数值 <strong>[-128，127]</strong> 的相应类型的缓存数据，<code>Character</code> 创建了数值在 <strong>[0,127]</strong> 范围的缓存数据，<code>Boolean</code> 直接返回 <code>True</code> or <code>False</code>。</p><p>如果超出对应范围仍然会去创建新的对象，缓存的范围区间的大小只是在性能和资源之间的权衡。</p>',4),W=n("strong",null,[n("code",null,"Integer"),s(" 缓存")],-1),H=n("strong",null,[n("code",null,"Character"),s(" 缓存")],-1),Z=n("strong",null,[n("code",null,"Boolean"),s(" 缓存")],-1),X=n("code",null,"Float",-1),$=n("code",null,"Double",-1),Q=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token class-name"},"Integer"),s(),n("span",{class:"token function"},"valueOf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" i"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("i "),n("span",{class:"token operator"},">="),s(),n("span",{class:"token class-name"},"IntegerCache"),n("span",{class:"token punctuation"},"."),s("low "),n("span",{class:"token operator"},"&&"),s(" i "),n("span",{class:"token operator"},"<="),s(),n("span",{class:"token class-name"},"IntegerCache"),n("span",{class:"token punctuation"},"."),s("high"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token class-name"},"IntegerCache"),n("span",{class:"token punctuation"},"."),s("cache"),n("span",{class:"token punctuation"},"["),s("i "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"-"),n("span",{class:"token class-name"},"IntegerCache"),n("span",{class:"token punctuation"},"."),s("low"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Integer"),n("span",{class:"token punctuation"},"("),s("i"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"IntegerCache"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"final"),s(),n("span",{class:"token keyword"},"int"),s(" low "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"128"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"final"),s(),n("span",{class:"token keyword"},"int"),s(" high"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// high value may be configured by property"),s(`
        `),n("span",{class:"token keyword"},"int"),s(" h "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"127"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Y=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token class-name"},"Character"),s(),n("span",{class:"token function"},"valueOf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"char"),s(" c"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("c "),n("span",{class:"token operator"},"<="),s(),n("span",{class:"token number"},"127"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token comment"},"// must cache"),s(`
      `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token class-name"},"CharacterCache"),n("span",{class:"token punctuation"},"."),s("cache"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},")"),s("c"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Character"),n("span",{class:"token punctuation"},"("),s("c"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"CharacterCache"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"CharacterCache"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"final"),s(),n("span",{class:"token class-name"},"Character"),s(" cache"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Character"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"127"),s(),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" cache"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(`
            cache`),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Character"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"char"),n("span",{class:"token punctuation"},")"),s("i"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),nn=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token class-name"},"Boolean"),s(),n("span",{class:"token function"},"valueOf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"boolean"),s(" b"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"("),s("b "),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token constant"},"TRUE"),s(),n("span",{class:"token operator"},":"),s(),n("span",{class:"token constant"},"FALSE"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),sn=n("p",null,[s("两种浮点数类型的包装类 "),n("code",null,"Float"),s(","),n("code",null,"Double"),s(" 并没有实现缓存机制。")],-1),an=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token class-name"},"Integer"),s(" i1 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"33"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token class-name"},"Integer"),s(" i2 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"33"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),s("i1 "),n("span",{class:"token operator"},"=="),s(" i2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),n("span",{class:"token comment"},"// 输出 true"),s(`

`),n("span",{class:"token class-name"},"Float"),s(" i11 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"333f"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token class-name"},"Float"),s(" i22 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"333f"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),s("i11 "),n("span",{class:"token operator"},"=="),s(" i22"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),n("span",{class:"token comment"},"// 输出 false"),s(`

`),n("span",{class:"token class-name"},"Double"),s(" i3 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1.2"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token class-name"},"Double"),s(" i4 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1.2"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),s("i3 "),n("span",{class:"token operator"},"=="),s(" i4"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),n("span",{class:"token comment"},"// 输出 false"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),tn=l(`<p>下面我们来看一个问题：下面的代码的输出结果是 <code>true</code> 还是 <code>false</code> 呢？</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span> i1 <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> i2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1<span class="token operator">==</span>i2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Integer i1=40</code> 这一行代码会发生装箱，也就是说这行代码等价于 <code>Integer i1=Integer.valueOf(40)</code> 。因此，<code>i1</code> 直接使用的是缓存中的对象。而<code>Integer i2 = new Integer(40)</code> 会直接创建新的对象。</p><p>因此，答案是 <code>false</code> 。你答对了吗？</p><p>值得一提的是，包装类通过缓存一定范围的常用数值，避免重复创建对象，以减少内存使用的思想，正是采用了<strong>享元模式</strong>（设计模式之一）。</p><p>记住：<strong>所有整型包装类对象之间值的比较，全部使用 equals 方法比较</strong>。</p><h3 id="【简单】比较包装类型为什么不能用" tabindex="-1"><a class="header-anchor" href="#【简单】比较包装类型为什么不能用" aria-hidden="true">#</a> 【简单】比较包装类型为什么不能用 ==？</h3><p>Java 值类型的包装类大部分都使用了缓存机制来提升性能：</p><ul><li><code>Byte</code>、<code>Short</code>、<code>Integer</code>、<code>Long</code> 这 4 种包装类，默认都创建了数值在 <strong>[-128，127]</strong> 范围之间的相应类型缓存数据；</li><li><code>Character</code> 创建了数值在 <strong>[0,127]</strong> 范围之间的缓存数据；</li><li><code>Boolean</code> 直接返回 <code>True</code> or <code>False</code>；</li></ul><p>试图装箱的数值，如果超出缓存范围，则会创建新的对象。</p><p>以 <code>Long.valueOf</code> 方法为例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Long</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">long</span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> offset <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;=</span> <span class="token operator">-</span><span class="token number">128</span> <span class="token operator">&amp;&amp;</span> l <span class="token operator">&lt;=</span> <span class="token number">127</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// will cache</span>
        <span class="token keyword">return</span> <span class="token class-name">LongCache</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>l <span class="token operator">+</span> offset<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Long</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="【中等】为什么浮点数运算的时候会有精度丢失的风险" tabindex="-1"><a class="header-anchor" href="#【中等】为什么浮点数运算的时候会有精度丢失的风险" aria-hidden="true">#</a> 【中等】为什么浮点数运算的时候会有精度丢失的风险？</h3><p>浮点数运算精度丢失代码演示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">float</span> a <span class="token operator">=</span> <span class="token number">2.0f</span> <span class="token operator">-</span> <span class="token number">1.9f</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> b <span class="token operator">=</span> <span class="token number">1.8f</span> <span class="token operator">-</span> <span class="token number">1.7f</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0.100000024</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0.099999905</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么会出现这个问题呢？</p><p>这个和计算机保存浮点数的机制有很大关系。我们知道计算机是二进制的，而且计算机在表示一个数字时，宽度是有限的，无限循环的小数存储在计算机时，只能被截断，所以就会导致小数精度发生损失的情况。这也就是解释了为什么浮点数没有办法用二进制精确表示。</p><p>就比如说十进制下的 0.2 就没办法精确转换成二进制小数：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 0.2 转换为二进制数的过程为，不断乘以 2，直到不存在小数为止，</span>
<span class="token comment">// 在这个计算过程中，得到的整数部分从上到下排列就是二进制的结果。</span>
<span class="token number">0.2</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">0.4</span> <span class="token operator">-&gt;</span> <span class="token number">0</span>
<span class="token number">0.4</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">0.8</span> <span class="token operator">-&gt;</span> <span class="token number">0</span>
<span class="token number">0.8</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">1.6</span> <span class="token operator">-&gt;</span> <span class="token number">1</span>
<span class="token number">0.6</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">1.2</span> <span class="token operator">-&gt;</span> <span class="token number">1</span>
<span class="token number">0.2</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">0.4</span> <span class="token operator">-&gt;</span> <span class="token number">0</span>（发生循环）
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="【简单】如何解决浮点数运算的精度丢失问题" tabindex="-1"><a class="header-anchor" href="#【简单】如何解决浮点数运算的精度丢失问题" aria-hidden="true">#</a> 【简单】如何解决浮点数运算的精度丢失问题？</h3><p><code>BigDecimal</code> 直接使用字符串初始化（如 <code>new BigDecimal(&quot;0.1&quot;)</code>）可完全避免二进制浮点误差。通常情况下，大部分需要浮点数精确运算结果的业务场景（比如涉及到钱的场景）可以通过 <code>BigDecimal</code> 来处理。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">BigDecimal</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">&quot;1.0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BigDecimal</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">&quot;0.9&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BigDecimal</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">&quot;0.8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">BigDecimal</span> x <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BigDecimal</span> y <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 0.1 */</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 0.1 */</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* true */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="【简单】超过-long-整型的数据应该如何表示" tabindex="-1"><a class="header-anchor" href="#【简单】超过-long-整型的数据应该如何表示" aria-hidden="true">#</a> 【简单】超过 long 整型的数据应该如何表示？</h3><p>基本数值类型都有一个表达范围，如果超过这个范围就会有数值溢出的风险。</p><p>在 Java 中，64 位 long 整型是最大的整数类型。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -9223372036854775808</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>BigInteger</code> 内部使用 <code>int[]</code> 数组来存储任意大小的整形数据。</p><p>相对于常规整数类型的运算来说，<code>BigInteger</code> 运算的效率会相对较低。</p><h2 id="java-变量" tabindex="-1"><a class="header-anchor" href="#java-变量" aria-hidden="true">#</a> Java 变量</h2><h3 id="【简单】静态变量、成员变量、局部变量的区别" tabindex="-1"><a class="header-anchor" href="#【简单】静态变量、成员变量、局部变量的区别" aria-hidden="true">#</a> 【简单】静态变量、成员变量、局部变量的区别？</h3><p><strong>静态变量、成员变量、局部变量的主要区别</strong></p><table><thead><tr><th><strong>特性</strong></th><th><strong>静态变量（static）</strong></th><th><strong>成员变量（非 static）</strong></th><th><strong>局部变量</strong></th></tr></thead><tbody><tr><td><strong>所属</strong></td><td>类（所有实例共享）</td><td>对象（每个实例独立）</td><td>方法/代码块内</td></tr><tr><td><strong>生命周期</strong></td><td>类加载时创建，程序结束时销毁</td><td>对象创建时存在，垃圾回收时销毁</td><td>方法调用时创建，执行完销毁</td></tr><tr><td><strong>存储位置</strong></td><td>方法区（JDK8+在元空间/堆）</td><td>堆（对象内部）</td><td>栈（方法栈帧）</td></tr><tr><td><strong>默认值</strong></td><td>有（如<code>int</code>默认为 0）</td><td>有（同静态变量）</td><td><strong>无</strong>（必须手动初始化）</td></tr><tr><td><strong>访问方式</strong></td><td><code>类名.变量名</code> 或 <code>对象.变量名</code></td><td><code>对象.变量名</code></td><td>只能在声明的方法/块内使用</td></tr></tbody></table><p><strong>一句话总结</strong>：</p><ul><li><strong>静态变量</strong>：全局唯一，类共享。</li><li><strong>成员变量</strong>：对象私有，每个实例独立。</li><li><strong>局部变量</strong>：临时使用，方法内有效。</li></ul><h3 id="【简单】为什么成员变量有默认值" tabindex="-1"><a class="header-anchor" href="#【简单】为什么成员变量有默认值" aria-hidden="true">#</a> 【简单】为什么成员变量有默认值？</h3><p><strong>成员变量有默认值的核心原因是：防止随机值风险</strong>。</p><ul><li><strong>内存安全</strong>：未初始化的变量会指向内存中的随机值，可能导致程序行为异常或崩溃。</li><li><strong>稳定运行</strong>：自动赋默认值（如 <code>int</code>→<code>0</code>，<code>boolean</code>→<code>false</code>）确保程序逻辑可预测。</li></ul><p><strong>编译器设计的权衡</strong></p><ul><li><strong>成员变量</strong>：<strong>自动赋默认值是内存安全与灵活性的平衡</strong>。 <ul><li>运行时可能通过反射、构造器等动态赋值，编译器无法完全静态检测。</li><li>为避免误报错误，统一自动赋默认值。</li></ul></li><li><strong>局部变量</strong>：<strong>严格编译检查确保代码可靠性</strong>。 <ul><li>作用域限于方法内，编译器可严格检查是否赋值。</li><li>强制手动初始化以规避潜在风险。</li></ul></li></ul><h3 id="【简单】字符型常量和字符串常量的区别" tabindex="-1"><a class="header-anchor" href="#【简单】字符型常量和字符串常量的区别" aria-hidden="true">#</a> 【简单】字符型常量和字符串常量的区别？</h3><table><thead><tr><th style="text-align:left;"><strong>场景</strong></th><th style="text-align:left;"><strong>字符常量</strong></th><th style="text-align:left;"><strong>字符串常量</strong></th></tr></thead><tbody><tr><td style="text-align:left;"><strong>表示形式</strong></td><td style="text-align:left;">单引号括起的<strong>单个字符</strong>（<code>&#39;A&#39;</code>）</td><td style="text-align:left;">双引号括起的<strong>字符序列</strong>（<code>&quot;ABC&quot;</code>）</td></tr><tr><td style="text-align:left;"><strong>数据类型</strong></td><td style="text-align:left;"><code>char</code>（基本类型）</td><td style="text-align:left;"><code>String</code>（引用类型）</td></tr><tr><td style="text-align:left;"><strong>内存占用</strong></td><td style="text-align:left;">2 字节（Unicode 字符，如 <code>&#39;中&#39;</code>、<code>&#39;\\n&#39;</code>）</td><td style="text-align:left;">对象开销+字符数据（可变长度）</td></tr><tr><td style="text-align:left;"><strong>转义字符</strong></td><td style="text-align:left;">支持（<code>&#39;\\t&#39;</code>、<code>&#39;\\\\&#39;</code>）</td><td style="text-align:left;">同样支持（<code>&quot;\\t&quot;</code>、<code>&quot;\\\\&quot;</code>）</td></tr><tr><td style="text-align:left;"><strong>空值表示</strong></td><td style="text-align:left;">不可为空（至少 1 字符）</td><td style="text-align:left;">可为空（<code>&quot;&quot;</code>）</td></tr><tr><td style="text-align:left;"><strong>运算行为</strong></td><td style="text-align:left;">按 Unicode 值运算</td><td style="text-align:left;">重载<code>+</code>为拼接</td></tr></tbody></table><h2 id="java-方法" tabindex="-1"><a class="header-anchor" href="#java-方法" aria-hidden="true">#</a> Java 方法</h2><h3 id="【简单】java-方法有哪些类型" tabindex="-1"><a class="header-anchor" href="#【简单】java-方法有哪些类型" aria-hidden="true">#</a> 【简单】Java 方法有哪些类型？</h3><p>Java 方法的类型可以从不同维度分类。</p>`,44),en=n("strong",null,"按从属划分",-1),on=n("strong",null,[s("按能否 "),n("code",null,"override"),s(" 划分")],-1),ln=n("strong",null,"按参数与返回值划分",-1),cn=n("strong",null,"特殊方法",-1),pn=n("strong",null,"接口中的方法",-1),dn=n("table",null,[n("thead",null,[n("tr",null,[n("th",null,[n("strong",null,"类型")]),n("th",null,[n("strong",null,"关键字")]),n("th",null,[n("strong",null,"调用方式")]),n("th",null,[n("strong",null,"特点")]),n("th",null,[n("strong",null,"示例")])])]),n("tbody",null,[n("tr",null,[n("td",null,[n("strong",null,"实例方法")]),n("td",null,"无"),n("td",null,[n("code",null,"对象名.方法名 ()")]),n("td",null,"依赖对象实例，可访问实例成员"),n("td",null,[n("code",null,'list.add("item")')])]),n("tr",null,[n("td",null,[n("strong",null,"静态方法")]),n("td",null,[n("code",null,"static")]),n("td",null,[n("code",null,"类名.方法名 ()")]),n("td",null,"不依赖实例，只能访问静态成员"),n("td",null,[n("code",null,"Math.abs(-1)")])]),n("tr",null,[n("td",null,[n("strong",null,"构造方法")]),n("td",null,"无"),n("td",null,[n("code",null,"new 类名 ()")]),n("td",null,"用于对象初始化，无返回值类型"),n("td",null,[n("code",null,'new String("hello")')])])])],-1),un=n("table",null,[n("thead",null,[n("tr",null,[n("th",null,[n("strong",null,"类型")]),n("th",null,[n("strong",null,"关键字")]),n("th",null,[n("strong",null,"特点")]),n("th",null,[n("strong",null,"示例")])])]),n("tbody",null,[n("tr",null,[n("td",null,[n("strong",null,"普通方法")]),n("td",null,"无"),n("td",null,[s("可被重写（除非"),n("code",null,"final"),s("修饰）")]),n("td",null,[n("code",null,"public void show()")])]),n("tr",null,[n("td",null,[n("strong",null,"final 方法")]),n("td",null,[n("code",null,"final")]),n("td",null,"禁止子类重写"),n("td",null,[n("code",null,"public final void lock()")])]),n("tr",null,[n("td",null,[n("strong",null,"抽象方法")]),n("td",null,[n("code",null,"abstract")]),n("td",null,"无实现，需子类重写"),n("td",null,[n("code",null,"abstract void draw();")])]),n("tr",null,[n("td",null,[n("strong",null,"默认方法")]),n("td",null,[n("code",null,"default")]),n("td",null,"Java 8 接口中的默认实现"),n("td",null,[n("code",null,"default void log()")])])])],-1),rn=n("table",null,[n("thead",null,[n("tr",null,[n("th",null,[n("strong",null,"类型")]),n("th",null,[n("strong",null,"特点")]),n("th",null,[n("strong",null,"示例")])])]),n("tbody",null,[n("tr",null,[n("td",null,[n("strong",null,"无参方法")]),n("td",null,"不需要参数"),n("td",null,[n("code",null,"String getName()")])]),n("tr",null,[n("td",null,[n("strong",null,"有参方法")]),n("td",null,"可接受基本类型/对象参数"),n("td",null,[n("code",null,"void setAge(int age)")])]),n("tr",null,[n("td",null,[n("strong",null,"可变参方法")]),n("td",null,[s("参数数量可变（"),n("code",null,"..."),s("语法）")]),n("td",null,[n("code",null,"void print(String... strs)")])]),n("tr",null,[n("td",null,[n("strong",null,"无返回值方法")]),n("td",null,[s("返回类型为"),n("code",null,"void")]),n("td",null,[n("code",null,"void shutdown()")])]),n("tr",null,[n("td",null,[n("strong",null,"有返回值方法")]),n("td",null,"必须返回指定类型值"),n("td",null,[n("code",null,"int calculate()")])])])],-1),kn=n("table",null,[n("thead",null,[n("tr",null,[n("th",null,[n("strong",null,"类型")]),n("th",null,[n("strong",null,"特点")]),n("th",null,[n("strong",null,"示例")])])]),n("tbody",null,[n("tr",null,[n("td",null,[n("strong",null,"native 方法")]),n("td",null,[s("用"),n("code",null,"native"),s("声明，由本地代码实现")]),n("td",null,[n("code",null,"public native void start()")])]),n("tr",null,[n("td",null,[n("strong",null,"synchronized 方法")]),n("td",null,[s("用"),n("code",null,"synchronized"),s("修饰，线程安全")]),n("td",null,[n("code",null,"public synchronized void save()")])]),n("tr",null,[n("td",null,[n("strong",null,"递归方法")]),n("td",null,"方法内部调用自身"),n("td",null,[n("code",null,"int factorial(int n)")])]),n("tr",null,[n("td",null,[n("strong",null,"泛型方法")]),n("td",null,"声明类型参数"),n("td",null,[n("code",null,"<T> T getData()")])])])],-1),vn=n("table",null,[n("thead",null,[n("tr",null,[n("th",null,[n("strong",null,"类型")]),n("th",null,[n("strong",null,"关键字")]),n("th",null,[n("strong",null,"特点")])])]),n("tbody",null,[n("tr",null,[n("td",null,[n("strong",null,"抽象方法")]),n("td",null,"无"),n("td",null,[s("默认"),n("code",null,"public abstract")])]),n("tr",null,[n("td",null,[n("strong",null,"默认方法")]),n("td",null,[n("code",null,"default")]),n("td",null,"Java 8 引入，提供默认实现")]),n("tr",null,[n("td",null,[n("strong",null,"静态方法")]),n("td",null,[n("code",null,"static")]),n("td",null,"Java 8 引入，接口直接调用")]),n("tr",null,[n("td",null,[n("strong",null,"私有方法")]),n("td",null,[n("code",null,"private")]),n("td",null,"Java 9 引入，仅供接口内部使用")])])],-1),gn=l(`<p><strong>代码示例</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 实例方法 vs 静态方法</span>
<span class="token keyword">class</span> <span class="token class-name">Calculator</span> <span class="token punctuation">{</span>
    <span class="token comment">// 实例方法</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token comment">// 静态方法</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">staticAdd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 抽象方法</span>
<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>
    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 必须由子类实现</span>
<span class="token punctuation">}</span>

<span class="token comment">// 默认方法</span>
<span class="token keyword">interface</span> <span class="token class-name">Logger</span> <span class="token punctuation">{</span>
    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 泛型方法</span>
<span class="token keyword">class</span> <span class="token class-name">Box</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">wrap</span><span class="token punctuation">(</span><span class="token class-name">T</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> item<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">如何选择方法类型？</p></div><ul><li><strong>需要操作对象状态</strong> → 实例方法（如<code>user.getName()</code>）</li><li><strong>工具类操作</strong> → 静态方法（如<code>Collections.sort()</code>）</li><li><strong>强制子类实现</strong> → 抽象方法（如<code>Animal.eat()</code>）</li><li><strong>接口功能扩展</strong> → 默认方法（Java 8+）</li><li><strong>线程安全控制</strong> → <code>synchronized</code>方法</li></ul><h3 id="【简单】静态方法和实例方法有何不同" tabindex="-1"><a class="header-anchor" href="#【简单】静态方法和实例方法有何不同" aria-hidden="true">#</a> 【简单】静态方法和实例方法有何不同？</h3><p><strong>静态方法和实例方法主要区别</strong>：</p><table><thead><tr><th><strong>维度</strong></th><th><strong>静态方法 (Static Method)</strong></th><th><strong>实例方法 (Instance Method)</strong></th></tr></thead><tbody><tr><td><strong>归属</strong></td><td>属于类</td><td>属于对象实例</td></tr><tr><td><strong>关键字</strong></td><td>使用 <code>static</code> 修饰</td><td>无 <code>static</code> 修饰</td></tr><tr><td><strong>调用方式</strong></td><td><code>类名.方法名 ()</code></td><td><code>对象名.方法名 ()</code></td></tr><tr><td><strong>内存分配</strong></td><td>类加载时分配，永久代（JDK8 前）/元空间（JDK8+）</td><td>对象实例化时分配，堆内存</td></tr><tr><td><strong>生命周期</strong></td><td>与类相同（从类加载到 JVM 退出）</td><td>与对象相同（从对象创建到被 GC 回收）</td></tr></tbody></table><p><strong>访问权限对比</strong>：</p><table><thead><tr><th><strong>维度</strong></th><th><strong>静态方法</strong></th><th><strong>实例方法</strong></th></tr></thead><tbody><tr><td><strong>访问静态成员</strong></td><td>✅ 可直接访问</td><td>✅ 可直接访问</td></tr><tr><td><strong>访问实例成员</strong></td><td>❌ 不能直接访问（需先创建对象）</td><td>✅ 可直接访问</td></tr><tr><td><strong>this/super</strong></td><td>❌ 不可使用</td><td>✅ 可使用</td></tr></tbody></table><p><strong>代码示例</strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Calculator</span> <span class="token punctuation">{</span>
    <span class="token comment">// 静态方法</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>  <span class="token comment">// 不依赖对象状态</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 实例方法</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> base<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBase</span><span class="token punctuation">(</span><span class="token keyword">int</span> base<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>base <span class="token operator">=</span> base<span class="token punctuation">;</span>  <span class="token comment">// 依赖对象状态</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> base <span class="token operator">+</span> x<span class="token punctuation">;</span>  <span class="token comment">// 访问实例变量</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 调用示例</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 静态方法调用</span>
        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token class-name">Calculator</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 无需创建对象</span>

        <span class="token comment">// 实例方法调用</span>
        <span class="token class-name">Calculator</span> calc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        calc<span class="token punctuation">.</span><span class="token function">setBase</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> result <span class="token operator">=</span> calc<span class="token punctuation">.</span><span class="token function">calculate</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 需要对象实例</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="【简单】重载和重写有什么区别" tabindex="-1"><a class="header-anchor" href="#【简单】重载和重写有什么区别" aria-hidden="true">#</a> 【简单】重载和重写有什么区别？</h3><p><strong>Java 重载（Overload）与重写（Override）的核心区别</strong>：</p><table><thead><tr><th><strong>特性</strong></th><th><strong>重载（Overload）</strong></th><th><strong>重写（Override）</strong></th></tr></thead><tbody><tr><td><strong>定义</strong></td><td>同一类中方法名相同但参数不同</td><td>子类重新实现父类的方法</td></tr><tr><td><strong>目的</strong></td><td>处理不同类型/数量的参数</td><td>修改或扩展父类方法的行为</td></tr><tr><td><strong>多态类型</strong></td><td>编译时多态（静态绑定）</td><td>运行时多态（动态绑定）</td></tr><tr><td><strong>作用范围</strong></td><td>同一类中（或父子类间）</td><td>子类与父类之间</td></tr><tr><td><strong>方法签名</strong></td><td><strong>必须不同参数</strong>（类型/数量/顺序）</td><td><strong>必须完全相同</strong>（方法名+参数）</td></tr><tr><td><strong>返回值</strong></td><td>可自由修改</td><td>基本类型/void：必须相同；引用类型：可协变（子类更具体）</td></tr><tr><td><strong>异常</strong></td><td>可自由声明</td><td>子类异常 ≤ 父类异常范围</td></tr><tr><td><strong>访问权限</strong></td><td>可自由修改</td><td>子类权限 ≥ 父类（不能更严格）</td></tr><tr><td><strong>限制方法</strong></td><td>无</td><td>不能重写 <code>private</code>/<code>final</code>/<code>static</code> 方法</td></tr></tbody></table>`,14),mn=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Calculator"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// 参数类型不同"),s(`
    `),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" a"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"int"),s(" b"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token keyword"},"return"),s(" a "),n("span",{class:"token operator"},"+"),s(" b"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"double"),s(),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"double"),s(" a"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"double"),s(" b"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token keyword"},"return"),s(" a "),n("span",{class:"token operator"},"+"),s(" b"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token comment"},"// 参数数量不同"),s(`
    `),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" a"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"int"),s(" b"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"int"),s(" c"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token keyword"},"return"),s(" a "),n("span",{class:"token operator"},"+"),s(" b "),n("span",{class:"token operator"},"+"),s(" c"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),bn=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Animal"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"protected"),s(),n("span",{class:"token class-name"},"String"),s(),n("span",{class:"token function"},"sound"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token string"},'"Unknown sound"'),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Cat"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token class-name"},"Animal"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token annotation punctuation"},"@Override"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"String"),s(),n("span",{class:"token function"},"sound"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s("  "),n("span",{class:"token comment"},"// 访问权限扩大，返回值相同"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token string"},'"Meow"'),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),hn=l(`<div class="hint-container note"><p class="hint-container-title">关键区别总结</p><ul><li><strong>绑定时机</strong><ul><li>重载：编译时根据参数决定调用的方法（<code>Calculator.add(int)</code> vs <code>Calculator.add(double)</code>）</li><li>重写：运行时根据对象实际类型决定方法（<code>Animal.sound()</code> 实际调用 <code>Cat.sound()</code>）</li></ul></li><li><strong>设计目的</strong><ul><li>重载：<strong>横向扩展</strong>（同一功能的不同参数版本）</li><li>重写：<strong>纵向覆盖</strong>（子类定制父类行为）</li></ul></li><li><strong>验证阶段</strong><ul><li>重载：编译器检查参数差异</li><li>重写：编译器检查方法签名 + JVM 运行时验证</li></ul></li></ul></div><h3 id="【简单】什么是可变长参数" tabindex="-1"><a class="header-anchor" href="#【简单】什么是可变长参数" aria-hidden="true">#</a> 【简单】什么是可变长参数？</h3><p>从 Java5 开始，Java 支持定义可变长参数，所谓可变长参数就是允许在调用方法时传入不定长度的参数。就比如下面这个方法就可以接受 0 个或者多个参数。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">//......</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，可变参数只能作为函数的最后一个参数，但其前面可以有也可以没有任何其他参数。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token class-name">String</span> arg1<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">//......</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>遇到方法重载的情况怎么办呢？会优先匹配固定参数还是可变参数的方法呢？</strong></p><p>答案是会优先匹配固定参数的方法，因为固定参数的方法匹配度更高。</p><p>我们通过下面这个例子来证明一下。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VariableLengthArgument</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printVariable</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printVariable</span><span class="token punctuation">(</span><span class="token class-name">String</span> arg1<span class="token punctuation">,</span> <span class="token class-name">String</span> arg2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arg1 <span class="token operator">+</span> arg2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printVariable</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printVariable</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ab
a
b
c
d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，Java 的可变参数编译后实际会被转换成一个数组，我们看编译后生成的 <code>class</code>文件就可以看出来了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VariableLengthArgument</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printVariable</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> var1 <span class="token operator">=</span> args<span class="token punctuation">;</span>
        <span class="token keyword">int</span> var2 <span class="token operator">=</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span>

        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> var3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> var3 <span class="token operator">&lt;</span> var2<span class="token punctuation">;</span> <span class="token operator">++</span>var3<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> s <span class="token operator">=</span> var1<span class="token punctuation">[</span>var3<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
    <span class="token comment">// ......</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="java-异常" tabindex="-1"><a class="header-anchor" href="#java-异常" aria-hidden="true">#</a> Java 异常</h2><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202504030805467.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="【简单】exception-和-error-有什么区别" tabindex="-1"><a class="header-anchor" href="#【简单】exception-和-error-有什么区别" aria-hidden="true">#</a> 【简单】Exception 和 Error 有什么区别？</h3><p>在 Java 中，所有的异常都有一个共同的祖先 <code>java.lang</code> 包中的 <code>Throwable</code> 类。<code>Throwable</code> 类有两个重要的子类：</p><ul><li><strong><code>Exception</code></strong> - 程序本身可以处理的异常，可以通过 <code>catch</code> 来进行捕获。<code>Exception</code> 又分为<strong>检查</strong>（checked）异常和<strong>非检查</strong>（unchecked）异常，检查异常在源代码里必须显式地进行捕获处理，这是编译期检查的一部分。</li><li><strong><code>Error</code></strong> - <code>Error</code> 属于程序无法处理的错误。例如 Java 虚拟机运行错误（<code>Virtual MachineError</code>）、虚拟机内存不够错误（<code>OutOfMemoryError</code>）、类定义错误（<code>NoClassDefFoundError</code>）等 。这些异常发生时，Java 虚拟机（JVM）一般会选择线程终止。</li></ul><h3 id="【简单】checked-exception-和-unchecked-exception-有什么区别" tabindex="-1"><a class="header-anchor" href="#【简单】checked-exception-和-unchecked-exception-有什么区别" aria-hidden="true">#</a> 【简单】Checked Exception 和 Unchecked Exception 有什么区别？</h3><p><strong>差异对比</strong>：</p><table><thead><tr><th><strong>特性</strong></th><th><strong>Checked Exception</strong></th><th><strong>Unchecked Exception</strong></th></tr></thead><tbody><tr><td><strong>编译检查</strong></td><td>必须显式处理（<code>catch</code>/<code>throws</code>），否则编译失败</td><td>不强制处理，编译可通过</td></tr><tr><td><strong>继承体系</strong></td><td>继承自 <code>Exception</code>（非 <code>RuntimeException</code> 分支）</td><td>继承自 <code>RuntimeException</code></td></tr><tr><td><strong>设计目的</strong></td><td>处理<strong>可预见的、可恢复的</strong>异常情况（如文件不存在）</td><td>处理<strong>程序逻辑错误</strong>（如空指针）</td></tr></tbody></table>`,22),yn=n("strong",null,"Checked Exception 示例",-1),fn=n("strong",null,"Unchecked Exception 示例",-1),wn=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token comment"},"// 必须处理 IOException（受检异常）"),s(`
`),n("span",{class:"token keyword"},"try"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token class-name"},"Files"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"readAllBytes"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Paths"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"file.txt"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"catch"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"IOException"),s(" e"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s("  "),n("span",{class:"token comment"},"// 或声明 throws IOException"),s(`
    `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("err"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"文件读取失败："'),s(),n("span",{class:"token operator"},"+"),s(" e"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getMessage"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),xn=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token comment"},"// 可不处理 NullPointerException（非受检异常）"),s(`
`),n("span",{class:"token class-name"},"String"),s(" str "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),s("str"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"length"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("  "),n("span",{class:"token comment"},"// 运行时抛出 NullPointerException"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),jn=l(`<p><strong>常见异常类型</strong></p><table><thead><tr><th><strong>Checked Exception</strong></th><th><strong>Unchecked Exception</strong></th></tr></thead><tbody><tr><td><code>IOException</code></td><td><code>NullPointerException</code></td></tr><tr><td><code>SQLException</code></td><td><code>IllegalArgumentException</code></td></tr><tr><td><code>ClassNotFoundException</code></td><td><code>ArrayIndexOutOfBoundsException</code></td></tr><tr><td><code>InterruptedException</code></td><td><code>ClassCastException</code></td></tr></tbody></table><p><strong>选择原则</strong></p><ul><li><p><strong>用 Checked Exception</strong>：</p><ul><li>调用方<strong>必须处理</strong>该异常（如文件不存在、网络断开）</li><li>异常是业务逻辑的<strong>合法流程</strong>（如用户输入校验）</li></ul></li><li><p><strong>用 Unchecked Exception</strong>：</p><ul><li>表示<strong>程序错误</strong>（如参数为 null、数组越界）</li><li>调用方<strong>无法合理恢复</strong>（如内存溢出）</li></ul></li></ul><h3 id="【简单】throwable-类常用方法有哪些" tabindex="-1"><a class="header-anchor" href="#【简单】throwable-类常用方法有哪些" aria-hidden="true">#</a> 【简单】Throwable 类常用方法有哪些？</h3><ul><li><code>String getMessage()</code>: 返回异常发生时的简要描述</li><li><code>String toString()</code>: 返回异常发生时的详细信息</li><li><code>String getLocalizedMessage()</code>: 返回异常对象的本地化信息。使用 <code>Throwable</code> 的子类覆盖这个方法，可以生成本地化信息。如果子类没有覆盖该方法，则该方法返回的信息与 <code>getMessage()</code>返回的结果相同</li><li><code>void printStackTrace()</code>: 在控制台上打印 <code>Throwable</code> 对象封装的异常信息</li></ul><h3 id="【简单】try-catch-finally-如何使用" tabindex="-1"><a class="header-anchor" href="#【简单】try-catch-finally-如何使用" aria-hidden="true">#</a> 【简单】try-catch-finally 如何使用？</h3><ul><li><code>try</code>块：用于捕获异常。其后可接零个或多个 <code>catch</code> 块，如果没有 <code>catch</code> 块，则必须跟一个 <code>finally</code> 块。</li><li><code>catch</code>块：用于处理 try 捕获到的异常。</li><li><code>finally</code> 块：无论是否捕获或处理异常，<code>finally</code> 块里的语句都会被执行。当在 <code>try</code> 块或 <code>catch</code> 块中遇到 <code>return</code> 语句时，<code>finally</code> 语句块将在方法返回之前被执行。</li></ul><p>代码示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Try to do something&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;RuntimeException&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Catch Exception -&gt; &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Finally&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Try</span> <span class="token keyword">to</span> <span class="token keyword">do</span> something
<span class="token class-name">Catch</span> <span class="token class-name">Exception</span> <span class="token operator">-&gt;</span> <span class="token class-name">RuntimeException</span>
<span class="token class-name">Finally</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：不要在 finally 语句块中使用 return!</strong> 当 try 语句和 finally 语句中都有 return 语句时，try 语句块中的 return 语句会被忽略。这是因为 try 语句中的 return 返回值会先被暂存在一个本地变量中，当执行到 finally 语句中的 return 之后，这个本地变量的值就变为了 finally 语句中的 return 返回值。</p>`,13),_n={href:"https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.10.2.5",target:"_blank",rel:"noopener noreferrer"},Jn=l(`<blockquote><p>If the <code>try</code> clause executes a <em>return</em>, the compiled code does the following:</p><ol><li>Saves the return value (if any) in a local variable.</li><li>Executes a <em>jsr</em> to the code for the <code>finally</code> clause.</li><li>Upon return from the <code>finally</code> clause, returns the value saved in the local variable.</li></ol></blockquote><p>代码示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> value <span class="token operator">*</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="【简单】finally-中的代码一定会执行吗" tabindex="-1"><a class="header-anchor" href="#【简单】finally-中的代码一定会执行吗" aria-hidden="true">#</a> 【简单】finally 中的代码一定会执行吗？</h3><p>不一定的！在某些情况下，finally 中的代码不会被执行。</p><p>就比如说 finally 之前虚拟机被终止运行的话，finally 中的代码就不会被执行。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Try to do something&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;RuntimeException&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Catch Exception -&gt; &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 终止当前正在运行的 Java 虚拟机</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Finally&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Try to do something
Catch Exception -&gt; RuntimeException
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，在以下 2 种特殊情况下，<code>finally</code> 块的代码也不会被执行：</p><ol><li>程序所在的线程死亡。</li><li>关闭 CPU。</li></ol><h3 id="【简单】如何使用-try-with-resources-代替try-catch-finally" tabindex="-1"><a class="header-anchor" href="#【简单】如何使用-try-with-resources-代替try-catch-finally" aria-hidden="true">#</a> 【简单】如何使用 <code>try-with-resources</code> 代替<code>try-catch-finally</code>？</h3><ol><li><strong>适用范围（资源的定义）：</strong> 任何实现 <code>java.lang.AutoCloseable</code>或者 <code>java.io.Closeable</code> 的对象</li><li><strong>关闭资源和 finally 块的执行顺序：</strong> 在 <code>try-with-resources</code> 语句中，任何 catch 或 finally 块在声明的资源关闭后运行</li></ol><p>《Effective Java》中明确指出：</p><blockquote><p>面对必须要关闭的资源，我们总是应该优先使用 <code>try-with-resources</code> 而不是<code>try-finally</code>。随之产生的代码更简短，更清晰，产生的异常对我们也更有用。<code>try-with-resources</code>语句让我们更容易编写必须要关闭的资源的代码，若采用<code>try-finally</code>则几乎做不到这点。</p></blockquote><p>Java 中类似于<code>InputStream</code>、<code>OutputStream</code>、<code>Scanner</code>、<code>PrintWriter</code>等的资源都需要我们调用<code>close()</code>方法来手动关闭，一般情况下我们都是通过<code>try-catch-finally</code>语句来实现这个需求，如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//读取文本文件的内容</span>
<span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D://read.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>scanner <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 Java 7 之后的 <code>try-with-resources</code> 语句改造上面的代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> fnfe<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    fnfe<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然多个资源需要关闭的时候，使用 <code>try-with-resources</code> 实现起来也非常简单，如果你还是用<code>try-catch-finally</code>可能会带来很多问题。</p><p>通过使用分号分隔，可以在<code>try-with-resources</code>块中声明多个资源。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">BufferedInputStream</span> bin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token class-name">BufferedOutputStream</span> bout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;out.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> b<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">=</span> bin<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        bout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="【简单】noclassdeffounderror-和-classnotfoundexception-有什么区别" tabindex="-1"><a class="header-anchor" href="#【简单】noclassdeffounderror-和-classnotfoundexception-有什么区别" aria-hidden="true">#</a> 【简单】NoClassDefFoundError 和 ClassNotFoundException 有什么区别</h3><p><code>NoClassDefFoundError</code>是一个 Error，而 <code>ClassNotFoundException</code> 是一个 Exception。</p><p><code>ClassNotFoundException</code> 产生的原因：</p><ul><li>使用 <code>Class.forName</code>、<code>ClassLoader.loadClass</code>、<code>ClassLOader.findSystemClass</code> 方法动态加载类，如果这个类没有被找到，那么就会在运行时抛出 <code>ClassNotFoundException</code> 异常；</li><li>当一个类已经被某个类加载器加载到内存中了，此时另一个类加载器又尝试着动态地从同一个包中加载这个类。</li></ul><p><code>NoClassDefFoundError</code> 产生的原因：当 JVM 或 <code>ClassLoader</code> 试图加载类，却找不到类的定义时（编译时存在，运行时找不到），抛出异常。</p><h3 id="【简单】异常使用有哪些需要注意的地方" tabindex="-1"><a class="header-anchor" href="#【简单】异常使用有哪些需要注意的地方" aria-hidden="true">#</a> 【简单】异常使用有哪些需要注意的地方？</h3><ul><li>不要把异常定义为静态变量，因为这样会导致异常栈信息错乱。每次手动抛出异常，我们都需要手动 new 一个异常对象抛出。</li><li>抛出的异常信息一定要有意义。</li><li>建议抛出更加具体的异常比如字符串转换为数字格式错误的时候应该抛出<code>NumberFormatException</code>而不是其父类<code>IllegalArgumentException</code>。</li><li>避免重复记录日志：如果在捕获异常的地方已经记录了足够的信息（包括异常类型、错误信息和堆栈跟踪等），那么在业务代码中再次抛出这个异常时，就不应该再次记录相同的错误信息。重复记录日志会使得日志文件膨胀，并且可能会掩盖问题的实际原因，使得问题更难以追踪和解决。</li><li>……</li></ul><h3 id="【中等】java-中-final、finally-和-finalize-有什么区别" tabindex="-1"><a class="header-anchor" href="#【中等】java-中-final、finally-和-finalize-有什么区别" aria-hidden="true">#</a> 【中等】Java 中 final、finally 和 finalize 有什么区别？</h3><table><thead><tr><th style="text-align:left;">特性</th><th style="text-align:left;">final</th><th style="text-align:left;">finally</th><th style="text-align:left;">finalize</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>类型</strong></td><td style="text-align:left;">关键字</td><td style="text-align:left;">代码块</td><td style="text-align:left;">方法</td></tr><tr><td style="text-align:left;"><strong>作用域</strong></td><td style="text-align:left;">变量/方法/类</td><td style="text-align:left;">异常处理块</td><td style="text-align:left;">Object 类方法</td></tr><tr><td style="text-align:left;"><strong>作用</strong></td><td style="text-align:left;">声明不可变性</td><td style="text-align:left;">即使有异常也必然执行，确保资源释放</td><td style="text-align:left;">对象回收前的清理（已废弃）</td></tr><tr><td style="text-align:left;"><strong>特点</strong></td><td style="text-align:left;">可修饰变量（常量）、方法（不可重写）、类（不可继承）</td><td style="text-align:left;">与<code>try-catch</code>搭配，<strong>必然执行</strong>（除非 JVM 退出）</td><td style="text-align:left;">不推荐用，执行时机不可控</td></tr><tr><td style="text-align:left;"><strong>使用场景</strong></td><td style="text-align:left;">定义常量/限制继承</td><td style="text-align:left;">资源清理</td><td style="text-align:left;">历史遗留的清理逻辑</td></tr></tbody></table><p><strong>一句话总结</strong>：<code>final</code>管<strong>不变性</strong>，<code>finally</code>管<strong>必执行</strong>，<code>finalize</code>是<strong>过时的清理机制</strong>。</p><p>（注：现代 Java 开发用<code>try-with-resources</code>替代<code>finalize</code>）</p>`,35);function En(Sn,Cn){const c=i("ExternalLinkIcon"),p=i("Tabs"),d=i("CodeTabs");return r(),k("div",null,[g,n("div",m,[b,n("p",null,[n("a",h,[y,o(c)])])]),f,n("div",w,[x,n("p",null,[n("a",j,[s("stackoverflow 高票问题 - What is the difference between JDK and JRE?"),o(c)])])]),_,J,E,n("div",S,[C,n("p",null,[n("a",A,[s("https://blog.csdn.net/m0_46487331/article/details/128827908"),o(c)])])]),I,n("p",null,[s("在 Java 中，标识符通常遵循 "),n("a",q,[s("驼峰命名法"),o(c)]),s("。")]),D,n("div",L,[T,B,n("p",null,[O,s("："),n("a",V,[s("https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html"),o(c)])])]),M,n("div",F,[N,n("p",null,[n("a",U,[s("菜鸟教程 - Java 基本数据类型"),o(c)])])]),R,n("div",P,[K,n("p",null,[n("a",z,[s("深入剖析 Java 中的装箱和拆箱"),o(c)])])]),G,o(p,{id:"1090",data:[{id:"<strong><code v-pre>Integer</code> 缓存</strong>"},{id:"<strong><code v-pre>Character</code> 缓存</strong>"},{id:"<strong><code v-pre>Boolean</code> 缓存</strong>"},{id:"<code v-pre>Float</code> 和 <code v-pre>Double</code> 无缓存"}]},{title0:a(({value:t,isActive:e})=>[W]),title1:a(({value:t,isActive:e})=>[H]),title2:a(({value:t,isActive:e})=>[Z]),title3:a(({value:t,isActive:e})=>[X,s(" 和 "),$,s(" 无缓存")]),tab0:a(({value:t,isActive:e})=>[Q]),tab1:a(({value:t,isActive:e})=>[Y]),tab2:a(({value:t,isActive:e})=>[nn]),tab3:a(({value:t,isActive:e})=>[sn,an]),_:1}),tn,o(p,{id:"1464",data:[{id:"<strong>按从属划分</strong>"},{id:"<strong>按能否 <code v-pre>override</code> 划分</strong>"},{id:"<strong>按参数与返回值划分</strong>"},{id:"<strong>特殊方法</strong>"},{id:"<strong>接口中的方法</strong>"}]},{title0:a(({value:t,isActive:e})=>[en]),title1:a(({value:t,isActive:e})=>[on]),title2:a(({value:t,isActive:e})=>[ln]),title3:a(({value:t,isActive:e})=>[cn]),title4:a(({value:t,isActive:e})=>[pn]),tab0:a(({value:t,isActive:e})=>[dn]),tab1:a(({value:t,isActive:e})=>[un]),tab2:a(({value:t,isActive:e})=>[rn]),tab3:a(({value:t,isActive:e})=>[kn]),tab4:a(({value:t,isActive:e})=>[vn]),_:1}),gn,o(d,{id:"2110",data:[{id:"重载示例"},{id:"重写示例"}],"tab-id":"重载和重写的示例"},{title0:a(({value:t,isActive:e})=>[s("重载示例")]),title1:a(({value:t,isActive:e})=>[s("重写示例")]),tab0:a(({value:t,isActive:e})=>[mn]),tab1:a(({value:t,isActive:e})=>[bn]),_:1}),hn,o(p,{id:"2282",data:[{id:"<strong>Checked Exception 示例</strong>"},{id:"<strong>Unchecked Exception 示例</strong>"}],"tab-id":"Checked Exception 和 Unchecked Exception 示例对比"},{title0:a(({value:t,isActive:e})=>[yn]),title1:a(({value:t,isActive:e})=>[fn]),tab0:a(({value:t,isActive:e})=>[wn]),tab1:a(({value:t,isActive:e})=>[xn]),_:1}),jn,n("p",null,[n("a",_n,[s("jvm 官方文档"),o(c)]),s(" 中有明确提到：")]),Jn])}const qn=u(v,[["render",En],["__file","index.html.vue"]]);export{qn as default};
