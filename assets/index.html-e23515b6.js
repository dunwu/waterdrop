import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as d,c as i,a as e,b as s,d as a,e as o}from"./app-f29527f5.js";const l={},r=o('<h1 id="dockerfile-最佳实践" tabindex="-1"><a class="header-anchor" href="#dockerfile-最佳实践" aria-hidden="true">#</a> Dockerfile 最佳实践</h1><h2 id="一、dockerfile-简介" tabindex="-1"><a class="header-anchor" href="#一、dockerfile-简介" aria-hidden="true">#</a> 一、Dockerfile 简介</h2><p>Docker 镜像的定制实际上就是定制每一层所添加的配置、文件。如果我们可以把每一层修改、安装、构建、操作的命令都写入一个脚本，用这个脚本来构建、定制镜像，那么之前提及的无法重复的问题、镜像构建透明性的问题、体积的问题就都会解决。这个脚本就是 Dockerfile。</p><p>Dockerfile 是一个文本文件，其内包含了一条条的 <strong>指令(Instruction)</strong>，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。</p><h3 id="使用-dockerfile-构建镜像" tabindex="-1"><a class="header-anchor" href="#使用-dockerfile-构建镜像" aria-hidden="true">#</a> 使用 Dockerfile 构建镜像</h3><h2 id="二、dockerfile-指令详解" tabindex="-1"><a class="header-anchor" href="#二、dockerfile-指令详解" aria-hidden="true">#</a> 二、Dockerfile 指令详解</h2><h3 id="from-指定基础镜像" tabindex="-1"><a class="header-anchor" href="#from-指定基础镜像" aria-hidden="true">#</a> FROM(指定基础镜像)</h3><blockquote><p>作用：<strong><code>FROM</code> 指令用于指定基础镜像</strong>。</p></blockquote><p>所谓定制镜像，那一定是以一个镜像为基础，在其上进行定制。就像我们之前运行了一个 <code>nginx</code> 镜像的容器，再进行修改一样，基础镜像是必须指定的。而 <code>FROM</code> 就是指定<strong>基础镜像</strong>，因此一个 <code>Dockerfile</code> 中 <code>FROM</code> 是必备的指令，并且必须是第一条指令。</p>',9),p={href:"https://store.docker.com/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://store.docker.com/images/nginx/",target:"_blank",rel:"noopener noreferrer"},k=e("code",null,"nginx",-1),v={href:"https://store.docker.com/images/redis/",target:"_blank",rel:"noopener noreferrer"},m=e("code",null,"redis",-1),g={href:"https://store.docker.com/images/mongo/",target:"_blank",rel:"noopener noreferrer"},b=e("code",null,"mongo",-1),h={href:"https://store.docker.com/images/mysql/",target:"_blank",rel:"noopener noreferrer"},f=e("code",null,"mysql",-1),y={href:"https://store.docker.com/images/httpd/",target:"_blank",rel:"noopener noreferrer"},q=e("code",null,"httpd",-1),D={href:"https://store.docker.com/images/php/",target:"_blank",rel:"noopener noreferrer"},_=e("code",null,"php",-1),x={href:"https://store.docker.com/images/tomcat/",target:"_blank",rel:"noopener noreferrer"},N=e("code",null,"tomcat",-1),R={href:"https://store.docker.com/images/node",target:"_blank",rel:"noopener noreferrer"},O=e("code",null,"node",-1),E={href:"https://store.docker.com/images/openjdk/",target:"_blank",rel:"noopener noreferrer"},w=e("code",null,"openjdk",-1),C={href:"https://store.docker.com/images/python/",target:"_blank",rel:"noopener noreferrer"},M=e("code",null,"python",-1),U={href:"https://store.docker.com/images/ruby/",target:"_blank",rel:"noopener noreferrer"},T=e("code",null,"ruby",-1),I={href:"https://store.docker.com/images/golang/",target:"_blank",rel:"noopener noreferrer"},S=e("code",null,"golang",-1),A={href:"https://store.docker.com/images/ubuntu/",target:"_blank",rel:"noopener noreferrer"},P=e("code",null,"ubuntu",-1),L={href:"https://store.docker.com/images/debian/",target:"_blank",rel:"noopener noreferrer"},H=e("code",null,"debian",-1),Y={href:"https://store.docker.com/images/centos/",target:"_blank",rel:"noopener noreferrer"},V=e("code",null,"centos",-1),$={href:"https://store.docker.com/images/fedora/",target:"_blank",rel:"noopener noreferrer"},B=e("code",null,"fedora",-1),K={href:"https://store.docker.com/images/alpine/",target:"_blank",rel:"noopener noreferrer"},F=e("code",null,"alpine",-1),j=o(`<p>除了选择现有镜像为基础镜像外，Docker 还存在一个特殊的镜像，名为 <code>scratch</code>。这个镜像是虚拟的概念，并不实际存在，它表示一个空白的镜像。</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> scratch</span>
...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你以 <code>scratch</code> 为基础镜像的话，意味着你不以任何镜像为基础，接下来所写的指令将作为镜像第一层开始存在。</p>`,3),W={href:"https://hub.docker.com/_/swarm/",target:"_blank",rel:"noopener noreferrer"},z=e("code",null,"swarm",-1),G={href:"https://quay.io/repository/coreos/etcd",target:"_blank",rel:"noopener noreferrer"},X=e("code",null,"coreos/etcd",-1),J=e("code",null,"FROM scratch",-1),Z={href:"https://golang.org/",target:"_blank",rel:"noopener noreferrer"},Q=o(`<h3 id="run-执行命令" tabindex="-1"><a class="header-anchor" href="#run-执行命令" aria-hidden="true">#</a> RUN(执行命令)</h3><blockquote><p><strong><code>RUN</code> 指令是用来执行命令行命令的</strong>。由于命令行的强大能力，<code>RUN</code> 指令在定制镜像时是最常用的指令之一。其格式有两种：</p><ul><li><em>shell</em> 格式：<code>RUN &lt;命令&gt;</code>，就像直接在命令行中输入的命令一样。刚才写的 Dockerfile 中的 <code>RUN</code> 指令就是这种格式。</li></ul><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">RUN</span> echo <span class="token string">&#39;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&#39;</span> &gt; /usr/share/nginx/html/index.html</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><em>exec</em> 格式：<code>RUN [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;]</code>，这更像是函数调用中的格式。</li></ul></blockquote><p>既然 <code>RUN</code> 就像 Shell 脚本一样可以执行命令，那么我们是否就可以像 Shell 脚本一样把每个命令对应一个 RUN 呢？比如这样：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> debian:jessie</span>

<span class="token instruction"><span class="token keyword">RUN</span> apt-get update</span>
<span class="token instruction"><span class="token keyword">RUN</span> apt-get install -y gcc libc6-dev make</span>
<span class="token instruction"><span class="token keyword">RUN</span> wget -O redis.tar.gz <span class="token string">&quot;http://download.redis.io/releases/redis-3.2.5.tar.gz&quot;</span></span>
<span class="token instruction"><span class="token keyword">RUN</span> mkdir -p /usr/src/redis</span>
<span class="token instruction"><span class="token keyword">RUN</span> tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1</span>
<span class="token instruction"><span class="token keyword">RUN</span> make -C /usr/src/redis</span>
<span class="token instruction"><span class="token keyword">RUN</span> make -C /usr/src/redis install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之前说过，Dockerfile 中每一个指令都会建立一层，<code>RUN</code> 也不例外。每一个 <code>RUN</code> 的行为，就和刚才我们手工建立镜像的过程一样：新建立一层，在其上执行这些命令，执行结束后，<code>commit</code> 这一层的修改，构成新的镜像。</p><p>而上面的这种写法，创建了 7 层镜像。这是完全没有意义的，而且很多运行时不需要的东西，都被装进了镜像里，比如编译环境、更新的软件包等等。结果就是产生非常臃肿、非常多层的镜像，不仅仅增加了构建部署的时间，也很容易出错。 这是很多初学 Docker 的人常犯的一个错误。</p><p><em>Union FS 是有最大层数限制的，比如 AUFS，曾经是最大不得超过 42 层，现在是不得超过 127 层。</em></p><p>上面的 <code>Dockerfile</code> 正确的写法应该是这样：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> debian:jessie</span>

<span class="token instruction"><span class="token keyword">RUN</span> buildDeps=<span class="token string">&#39;gcc libc6-dev make&#39;</span> <span class="token operator">\\</span>
    &amp;&amp; apt-get update <span class="token operator">\\</span>
    &amp;&amp; apt-get install -y <span class="token variable">$buildDeps</span> <span class="token operator">\\</span>
    &amp;&amp; wget -O redis.tar.gz <span class="token string">&quot;http://download.redis.io/releases/redis-3.2.5.tar.gz&quot;</span> <span class="token operator">\\</span>
    &amp;&amp; mkdir -p /usr/src/redis <span class="token operator">\\</span>
    &amp;&amp; tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 <span class="token operator">\\</span>
    &amp;&amp; make -C /usr/src/redis <span class="token operator">\\</span>
    &amp;&amp; make -C /usr/src/redis install <span class="token operator">\\</span>
    &amp;&amp; rm -rf /var/lib/apt/lists/* <span class="token operator">\\</span>
    &amp;&amp; rm redis.tar.gz <span class="token operator">\\</span>
    &amp;&amp; rm -r /usr/src/redis <span class="token operator">\\</span>
    &amp;&amp; apt-get purge -y --auto-remove <span class="token variable">$buildDeps</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，之前所有的命令只有一个目的，就是编译、安装 redis 可执行文件。因此没有必要建立很多层，这只是一层的事情。因此，这里没有使用很多个 <code>RUN</code> 对一一对应不同的命令，而是仅仅使用一个 <code>RUN</code> 指令，并使用 <code>&amp;&amp;</code> 将各个所需命令串联起来。将之前的 7 层，简化为了 1 层。在撰写 Dockerfile 的时候，要经常提醒自己，这并不是在写 Shell 脚本，而是在定义每一层该如何构建。</p><p>并且，这里为了格式化还进行了换行。Dockerfile 支持 Shell 类的行尾添加 <code>\\</code> 的命令换行方式，以及行首 <code>#</code> 进行注释的格式。良好的格式，比如换行、缩进、注释等，会让维护、排障更为容易，这是一个比较好的习惯。</p><p>此外，还可以看到这一组命令的最后添加了清理工作的命令，删除了为了编译构建所需要的软件，清理了所有下载、展开的文件，并且还清理了 <code>apt</code> 缓存文件。这是很重要的一步，我们之前说过，镜像是多层存储，每一层的东西并不会在下一层被删除，会一直跟随着镜像。因此镜像构建时，一定要确保每一层只添加真正需要添加的东西，任何无关的东西都应该清理掉。</p><p>很多人初学 Docker 制作出了很臃肿的镜像的原因之一，就是忘记了每一层构建的最后一定要清理掉无关文件。</p><h3 id="copy-复制文件" tabindex="-1"><a class="header-anchor" href="#copy-复制文件" aria-hidden="true">#</a> COPY(复制文件)</h3><blockquote><p><strong><code>COPY</code> 指令将从构建上下文目录中 <code>&lt;源路径&gt;</code> 的文件/目录复制到新的一层的镜像内的 <code>&lt;目标路径&gt;</code> 位置。</strong></p></blockquote><p>格式：</p><ul><li><code>COPY [--chown=&lt;user&gt;:&lt;group&gt;] &lt;源路径&gt;... &lt;目标路径&gt;</code></li><li><code>COPY [--chown=&lt;user&gt;:&lt;group&gt;] [&quot;&lt;源路径1&gt;&quot;,... &quot;&lt;目标路径&gt;&quot;]</code></li></ul><p>示例：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">COPY</span> package.json /usr/src/app/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,19),ee=e("code",null,"<源路径>",-1),se={href:"https://golang.org/pkg/path/filepath/#Match",target:"_blank",rel:"noopener noreferrer"},ne=e("code",null,"filepath.Match",-1),ae=o(`<div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">COPY</span> hom* /mydir/</span>
<span class="token instruction"><span class="token keyword">COPY</span> hom?.txt /mydir/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>&lt;目标路径&gt;</code> 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工作目录可以用 <code>WORKDIR</code> 指令来指定）。目标路径不需要事先创建，如果目录不存在会在复制文件前先行创建缺失目录。</p><p>此外，还需要注意一点，使用 <code>COPY</code> 指令，源文件的各种元数据都会保留。比如读、写、执行权限、文件变更时间等。这个特性对于镜像定制很有用。特别是构建相关文件都在使用 Git 进行管理的时候。</p><p>在使用该指令的时候还可以加上 <code>--chown=&lt;user&gt;:&lt;group&gt;</code> 选项来改变文件的所属用户及所属组。</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--chown</span><span class="token punctuation">=</span><span class="token string">55:mygroup</span></span> files* /mydir/</span>
<span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--chown</span><span class="token punctuation">=</span><span class="token string">bin</span></span> files* /mydir/</span>
<span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--chown</span><span class="token punctuation">=</span><span class="token string">1</span></span> files* /mydir/</span>
<span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--chown</span><span class="token punctuation">=</span><span class="token string">10:11</span></span> files* /mydir/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="add-更高级的复制文件" tabindex="-1"><a class="header-anchor" href="#add-更高级的复制文件" aria-hidden="true">#</a> ADD(更高级的复制文件)</h3><blockquote><p><code>ADD</code> 指令和 <code>COPY</code> 的格式和性质基本一致。但是在 <code>COPY</code> 基础上增加了一些功能。</p><p>比如 <code>&lt;源路径&gt;</code> 可以是一个 <code>URL</code>，这种情况下，Docker 引擎会试图去下载这个链接的文件放到 <code>&lt;目标路径&gt;</code>去。下载后的文件权限自动设置为 <code>600</code>，如果这并不是想要的权限，那么还需要增加额外的一层 <code>RUN</code> 进行权限调整，另外，如果下载的是个压缩包，需要解压缩，也一样还需要额外的一层 <code>RUN</code> 指令进行解压缩。所以不如直接使用 <code>RUN</code> 指令，然后使用 <code>wget</code> 或者 <code>curl</code> 工具下载，处理权限、解压缩、然后清理无用文件更合理。因此，这个功能其实并不实用，而且不推荐使用。</p><p>如果 <code>&lt;源路径&gt;</code> 为一个 <code>tar</code> 压缩文件的话，压缩格式为 <code>gzip</code>, <code>bzip2</code> 以及 <code>xz</code> 的情况下，<code>ADD</code> 指令将会自动解压缩这个压缩文件到 <code>&lt;目标路径&gt;</code> 去。</p></blockquote><p>在某些情况下，这个自动解压缩的功能非常有用，比如官方镜像 <code>ubuntu</code> 中：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> scratch</span>
<span class="token instruction"><span class="token keyword">ADD</span> ubuntu-xenial-core-cloudimg-amd64-root.tar.gz /</span>
...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但在某些情况下，如果我们真的是希望复制个压缩文件进去，而不解压缩，这时就不可以使用 <code>ADD</code> 命令了。</p>`,10),oe={href:"https://yeasy.gitbooks.io/docker_practice/content/appendix/best_practices.html",target:"_blank",rel:"noopener noreferrer"},te=e("code",null,"COPY",-1),ce=e("code",null,"COPY",-1),de=e("code",null,"ADD",-1),ie=e("code",null,"ADD",-1),le=o(`<p>另外需要注意的是，<code>ADD</code> 指令会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。</p><p>因此在 <code>COPY</code> 和 <code>ADD</code> 指令中选择的时候，可以遵循这样的原则，所有的文件复制均使用 <code>COPY</code> 指令，仅在需要自动解压缩的场合使用 <code>ADD</code>。</p><p>在使用该指令的时候还可以加上 <code>--chown=&lt;user&gt;:&lt;group&gt;</code> 选项来改变文件的所属用户及所属组。</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">ADD</span> <span class="token options"><span class="token property">--chown</span><span class="token punctuation">=</span><span class="token string">55:mygroup</span></span> files* /mydir/</span>
<span class="token instruction"><span class="token keyword">ADD</span> <span class="token options"><span class="token property">--chown</span><span class="token punctuation">=</span><span class="token string">bin</span></span> files* /mydir/</span>
<span class="token instruction"><span class="token keyword">ADD</span> <span class="token options"><span class="token property">--chown</span><span class="token punctuation">=</span><span class="token string">1</span></span> files* /mydir/</span>
<span class="token instruction"><span class="token keyword">ADD</span> <span class="token options"><span class="token property">--chown</span><span class="token punctuation">=</span><span class="token string">10:11</span></span> files* /mydir/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="cmd-容器启动命令" tabindex="-1"><a class="header-anchor" href="#cmd-容器启动命令" aria-hidden="true">#</a> CMD(容器启动命令)</h3><blockquote><p>之前介绍容器的时候曾经说过，Docker 不是虚拟机，容器就是进程。既然是进程，那么在启动容器的时候，需要指定所运行的程序及参数。<code>CMD</code> 指令就是用于指定默认的容器主进程的启动命令的。</p></blockquote><p><code>CMD</code> 指令的格式和 <code>RUN</code> 相似，也是两种格式：</p><ul><li><code>shell</code> 格式：<code>CMD &lt;命令&gt;</code></li><li><code>exec</code> 格式：<code>CMD [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;...]</code></li><li>参数列表格式：<code>CMD [&quot;参数1&quot;, &quot;参数2&quot;...]</code>。在指定了 <code>ENTRYPOINT</code> 指令后，用 <code>CMD</code> 指定具体的参数。</li></ul><p>在运行时可以指定新的命令来替代镜像设置中的这个默认命令，比如，<code>ubuntu</code> 镜像默认的 <code>CMD</code> 是 <code>/bin/bash</code>，如果我们直接 <code>docker run -it ubuntu</code> 的话，会直接进入 <code>bash</code>。我们也可以在运行时指定运行别的命令，如 <code>docker run -it ubuntu cat /etc/os-release</code>。这就是用 <code>cat /etc/os-release</code> 命令替换了默认的 <code>/bin/bash</code> 命令了，输出了系统版本信息。</p><p>在指令格式上，一般推荐使用 <code>exec</code> 格式，这类格式在解析时会被解析为 JSON 数组，因此一定要使用双引号 <code>&quot;</code>，而不要使用单引号。</p><p>如果使用 <code>shell</code> 格式的话，实际的命令会被包装为 <code>sh -c</code> 的参数的形式进行执行。比如：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">CMD</span> echo <span class="token variable">$HOME</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在实际执行中，会将其变更为：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">CMD</span> [ <span class="token string">&quot;sh&quot;</span>, <span class="token string">&quot;-c&quot;</span>, <span class="token string">&quot;echo $HOME&quot;</span> ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这就是为什么我们可以使用环境变量的原因，因为这些环境变量会被 shell 进行解析处理。</p><p>提到 <code>CMD</code> 就不得不提容器中应用在前台执行和后台执行的问题。这是初学者常出现的一个混淆。</p><p>Docker 不是虚拟机，容器中的应用都应该以前台执行，而不是像虚拟机、物理机里面那样，用 upstart/systemd 去启动后台服务，容器内没有后台服务的概念。</p><p>一些初学者将 <code>CMD</code> 写为：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">CMD</span> service nginx start</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后发现容器执行后就立即退出了。甚至在容器内去使用 <code>systemctl</code> 命令结果却发现根本执行不了。这就是因为没有搞明白前台、后台的概念，没有区分容器和虚拟机的差异，依旧在以传统虚拟机的角度去理解容器。</p><p>对于容器而言，其启动程序就是容器应用进程，容器就是为了主进程而存在的，主进程退出，容器就失去了存在的意义，从而退出，其它辅助进程不是它需要关心的东西。</p><p>而使用 <code>service nginx start</code> 命令，则是希望 upstart 来以后台守护进程形式启动 <code>nginx</code> 服务。而刚才说了 <code>CMD service nginx start</code> 会被理解为 <code>CMD [ &quot;sh&quot;, &quot;-c&quot;, &quot;service nginx start&quot;]</code>，因此主进程实际上是 <code>sh</code>。那么当 <code>service nginx start</code> 命令结束后，<code>sh</code> 也就结束了，<code>sh</code> 作为主进程退出了，自然就会令容器退出。</p><p>正确的做法是直接执行 <code>nginx</code> 可执行文件，并且要求以前台形式运行。比如：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;nginx&quot;</span>, <span class="token string">&quot;-g&quot;</span>, <span class="token string">&quot;daemon off;&quot;</span>]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="entrypoint-入口点" tabindex="-1"><a class="header-anchor" href="#entrypoint-入口点" aria-hidden="true">#</a> ENTRYPOINT(入口点)</h3><p><code>ENTRYPOINT</code> 的格式和 <code>RUN</code> 指令格式一样，分为 <code>exec</code> 格式和 <code>shell</code> 格式。</p><p><code>ENTRYPOINT</code> 的目的和 <code>CMD</code> 一样，都是在指定容器启动程序及参数。<code>ENTRYPOINT</code> 在运行时也可以替代，不过比 <code>CMD</code> 要略显繁琐，需要通过 <code>docker run</code> 的参数 <code>--entrypoint</code> 来指定。</p><p>当指定了 <code>ENTRYPOINT</code> 后，<code>CMD</code> 的含义就发生了改变，不再是直接的运行其命令，而是将 <code>CMD</code> 的内容作为参数传给 <code>ENTRYPOINT</code> 指令，换句话说实际执行时，将变为：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&lt;</span>ENTRYPOINT<span class="token operator">&gt;</span> <span class="token string">&quot;&lt;CMD&gt;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>那么有了 <code>CMD</code> 后，为什么还要有 <code>ENTRYPOINT</code> 呢？这种 <code>&lt;ENTRYPOINT&gt; &quot;&lt;CMD&gt;&quot;</code> 有什么好处么？让我们来看几个场景。</p><h4 id="场景一-让镜像变成像命令一样使用" tabindex="-1"><a class="header-anchor" href="#场景一-让镜像变成像命令一样使用" aria-hidden="true">#</a> 场景一：让镜像变成像命令一样使用</h4><p>假设我们需要一个得知自己当前公网 IP 的镜像，那么可以先用 <code>CMD</code> 来实现：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> ubuntu:18.04</span>
<span class="token instruction"><span class="token keyword">RUN</span> apt-get update <span class="token operator">\\</span>
    &amp;&amp; apt-get install -y curl <span class="token operator">\\</span>
    &amp;&amp; rm -rf /var/lib/apt/lists/*</span>
<span class="token instruction"><span class="token keyword">CMD</span> [ <span class="token string">&quot;curl&quot;</span>, <span class="token string">&quot;-s&quot;</span>, <span class="token string">&quot;https://ip.cn&quot;</span> ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假如我们使用 <code>docker build -t myip .</code> 来构建镜像的话，如果我们需要查询当前公网 IP，只需要执行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run myip
当前 IP：61.148.226.66 来自：北京市 联通
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>嗯，这么看起来好像可以直接把镜像当做命令使用了，不过命令总有参数，如果我们希望加参数呢？比如从上面的 <code>CMD</code> 中可以看到实质的命令是 <code>curl</code>，那么如果我们希望显示 HTTP 头信息，就需要加上 <code>-i</code> 参数。那么我们可以直接加 <code>-i</code> 参数给 <code>docker run myip</code> 么？</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run myip <span class="token parameter variable">-i</span>
docker: Error response from daemon: invalid header field value <span class="token string">&quot;oci runtime error: container_linux.go:247: starting container process caused <span class="token entity" title="\\&quot;">\\&quot;</span>exec: <span class="token entity" title="\\\\">\\\\</span><span class="token entity" title="\\&quot;">\\&quot;</span>-i<span class="token entity" title="\\\\">\\\\</span><span class="token entity" title="\\&quot;">\\&quot;</span>: executable file not found in <span class="token environment constant">$PATH</span><span class="token entity" title="\\&quot;">\\&quot;</span><span class="token entity" title="\\n">\\n</span>&quot;</span><span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到可执行文件找不到的报错，<code>executable file not found</code>。之前我们说过，跟在镜像名后面的是 <code>command</code>，运行时会替换 <code>CMD</code> 的默认值。因此这里的 <code>-i</code> 替换了原来的 <code>CMD</code>，而不是添加在原来的 <code>curl -s https://ip.cn</code> 后面。而 <code>-i</code> 根本不是命令，所以自然找不到。</p><p>那么如果我们希望加入 <code>-i</code> 这参数，我们就必须重新完整的输入这个命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run myip <span class="token function">curl</span> <span class="token parameter variable">-s</span> https://ip.cn <span class="token parameter variable">-i</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这显然不是很好的解决方案，而使用 <code>ENTRYPOINT</code> 就可以解决这个问题。现在我们重新用 <code>ENTRYPOINT</code> 来实现这个镜像：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> ubuntu:18.04</span>
<span class="token instruction"><span class="token keyword">RUN</span> apt-get update <span class="token operator">\\</span>
    &amp;&amp; apt-get install -y curl <span class="token operator">\\</span>
    &amp;&amp; rm -rf /var/lib/apt/lists/*</span>
<span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [ <span class="token string">&quot;curl&quot;</span>, <span class="token string">&quot;-s&quot;</span>, <span class="token string">&quot;https://ip.cn&quot;</span> ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这次我们再来尝试直接使用 <code>docker run myip -i</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run myip
当前 IP：61.148.226.66 来自：北京市 联通

$ <span class="token function">docker</span> run myip <span class="token parameter variable">-i</span>
HTTP/1.1 <span class="token number">200</span> OK
Server: nginx/1.8.0
Date: Tue, <span class="token number">22</span> Nov <span class="token number">2016</span> 05:12:40 GMT
Content-Type: text/html<span class="token punctuation">;</span> <span class="token assign-left variable">charset</span><span class="token operator">=</span>UTF-8
Vary: Accept-Encoding
X-Powered-By: PHP/5.6.24-1~dotdeb+7.1
X-Cache: MISS from cache-2
X-Cache-Lookup: MISS from cache-2:80
X-Cache: MISS from proxy-2_6
Transfer-Encoding: chunked
Via: <span class="token number">1.1</span> cache-2:80, <span class="token number">1.1</span> proxy-2_6:8006
Connection: keep-alive

当前 IP：61.148.226.66 来自：北京市 联通
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，这次成功了。这是因为当存在 <code>ENTRYPOINT</code> 后，<code>CMD</code> 的内容将会作为参数传给 <code>ENTRYPOINT</code>，而这里 <code>-i</code> 就是新的 <code>CMD</code>，因此会作为参数传给 <code>curl</code>，从而达到了我们预期的效果。</p><h4 id="场景二-应用运行前的准备工作" tabindex="-1"><a class="header-anchor" href="#场景二-应用运行前的准备工作" aria-hidden="true">#</a> 场景二：应用运行前的准备工作</h4><p>启动容器就是启动主进程，但有些时候，启动主进程前，需要一些准备工作。</p><p>比如 <code>mysql</code> 类的数据库，可能需要一些数据库配置、初始化的工作，这些工作要在最终的 mysql 服务器运行之前解决。</p><p>此外，可能希望避免使用 <code>root</code> 用户去启动服务，从而提高安全性，而在启动服务前还需要以 <code>root</code> 身份执行一些必要的准备工作，最后切换到服务用户身份启动服务。或者除了服务外，其它命令依旧可以使用 <code>root</code> 身份执行，方便调试等。</p><p>这些准备工作是和容器 <code>CMD</code> 无关的，无论 <code>CMD</code> 为什么，都需要事先进行一个预处理的工作。这种情况下，可以写一个脚本，然后放入 <code>ENTRYPOINT</code> 中去执行，而这个脚本会将接到的参数（也就是 <code>&lt;CMD&gt;</code>）作为命令，在脚本最后执行。比如官方镜像 <code>redis</code> 中就是这么做的：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> alpine:3.4</span>
...
<span class="token instruction"><span class="token keyword">RUN</span> addgroup -S redis &amp;&amp; adduser -S -G redis redis</span>
...
<span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">&quot;docker-entrypoint.sh&quot;</span>]</span>

<span class="token instruction"><span class="token keyword">EXPOSE</span> 6379</span>
<span class="token instruction"><span class="token keyword">CMD</span> [ <span class="token string">&quot;redis-server&quot;</span> ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到其中为了 redis 服务创建了 redis 用户，并在最后指定了 <code>ENTRYPOINT</code> 为 <code>docker-entrypoint.sh</code> 脚本。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/sh</span>
<span class="token punctuation">..</span>.
<span class="token comment"># allow the container to be started with \`--user\`</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">&quot;<span class="token variable">$1</span>&quot;</span> <span class="token operator">=</span> <span class="token string">&#39;redis-server&#39;</span> <span class="token parameter variable">-a</span> <span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> <span class="token parameter variable">-u</span><span class="token variable">)</span></span>&quot;</span> <span class="token operator">=</span> <span class="token string">&#39;0&#39;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token function">chown</span> <span class="token parameter variable">-R</span> redis <span class="token builtin class-name">.</span>
    <span class="token builtin class-name">exec</span> su-exec redis <span class="token string">&quot;<span class="token variable">$0</span>&quot;</span> <span class="token string">&quot;<span class="token variable">$@</span>&quot;</span>
<span class="token keyword">fi</span>

<span class="token builtin class-name">exec</span> <span class="token string">&quot;<span class="token variable">$@</span>&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该脚本的内容就是根据 <code>CMD</code> 的内容来判断，如果是 <code>redis-server</code> 的话，则切换到 <code>redis</code> 用户身份启动服务器，否则依旧使用 <code>root</code> 身份执行。比如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token parameter variable">-it</span> redis <span class="token function">id</span>
<span class="token assign-left variable">uid</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token assign-left variable">gid</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token assign-left variable">groups</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="env-设置环境变量" tabindex="-1"><a class="header-anchor" href="#env-设置环境变量" aria-hidden="true">#</a> ENV(设置环境变量)</h3><blockquote><p><code>ENV</code> 指令用于设置环境变量。无论是后面的其它指令，如 <code>RUN</code>，还是运行时的应用，都可以直接使用这里定义的环境变量。</p></blockquote><p>格式：</p><ul><li><code>ENV &lt;key&gt; &lt;value&gt;</code></li><li><code>ENV &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</code></li></ul><p>示例 1：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">ENV</span> VERSION=1.0 DEBUG=on <span class="token operator">\\</span>
    NAME=<span class="token string">&quot;Happy Feet&quot;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子中演示了如何换行，以及对含有空格的值用双引号括起来的办法，这和 Shell 下的行为是一致的。</p><p>示例 2：</p><p>定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。比如在官方 <code>node</code> 镜像 <code>Dockerfile</code> 中，就有类似这样的代码：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">ENV</span> NODE_VERSION 7.2.0</span>

<span class="token instruction"><span class="token keyword">RUN</span> curl -SLO <span class="token string">&quot;https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz&quot;</span> <span class="token operator">\\</span>
  &amp;&amp; curl -SLO <span class="token string">&quot;https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc&quot;</span> <span class="token operator">\\</span>
  &amp;&amp; gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc <span class="token operator">\\</span>
  &amp;&amp; grep <span class="token string">&quot; node-v$NODE_VERSION-linux-x64.tar.xz\\$&quot;</span> SHASUMS256.txt | sha256sum -c - <span class="token operator">\\</span>
  &amp;&amp; tar -xJf <span class="token string">&quot;node-v$NODE_VERSION-linux-x64.tar.xz&quot;</span> -C /usr/local --strip-components=1 <span class="token operator">\\</span>
  &amp;&amp; rm <span class="token string">&quot;node-v$NODE_VERSION-linux-x64.tar.xz&quot;</span> SHASUMS256.txt.asc SHASUMS256.txt <span class="token operator">\\</span>
  &amp;&amp; ln -s /usr/local/bin/node /usr/local/bin/nodejs</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里先定义了环境变量 <code>NODE_VERSION</code>，其后的 <code>RUN</code> 这层里，多次使用 <code>$NODE_VERSION</code> 来进行操作定制。可以看到，将来升级镜像构建版本的时候，只需要更新 <code>7.2.0</code> 即可，<code>Dockerfile</code> 构建维护变得更轻松了。</p><p>下列指令可以支持环境变量展开： <code>ADD</code>、<code>COPY</code>、<code>ENV</code>、<code>EXPOSE</code>、<code>LABEL</code>、<code>USER</code>、<code>WORKDIR</code>、<code>VOLUME</code>、<code>STOPSIGNAL</code>、<code>ONBUILD</code>。</p><p>可以从这个指令列表里感觉到，环境变量可以使用的地方很多，很强大。通过环境变量，我们可以让一份 <code>Dockerfile</code> 制作更多的镜像，只需使用不同的环境变量即可。</p><h3 id="arg-构建参数" tabindex="-1"><a class="header-anchor" href="#arg-构建参数" aria-hidden="true">#</a> ARG(构建参数)</h3><blockquote><p><code>Dockerfile</code> 中的 <code>ARG</code> 指令是定义参数名称，以及定义其默认值。该默认值可以在构建命令 <code>docker build</code> 中用 <code>--build-arg &lt;参数名&gt;=&lt;值&gt;</code> 来覆盖。</p><p>构建参数和 <code>ENV</code> 的效果一样，都是设置环境变量。所不同的是，<code>ARG</code> 所设置的构建环境的环境变量，在将来容器运行时是不会存在这些环境变量的。但是不要因此就使用 <code>ARG</code> 保存密码之类的信息，因为 <code>docker history</code> 还是可以看到所有值的。</p></blockquote><p>格式：<code>ARG &lt;参数名&gt;[=&lt;默认值&gt;]</code></p><p>在 1.13 之前的版本，要求 <code>--build-arg</code> 中的参数名，必须在 <code>Dockerfile</code> 中用 <code>ARG</code> 定义过了，换句话说，就是 <code>--build-arg</code> 指定的参数，必须在 <code>Dockerfile</code> 中使用了。如果对应参数没有被使用，则会报错退出构建。从 1.13 开始，这种严格的限制被放开，不再报错退出，而是显示警告信息，并继续构建。这对于使用 CI 系统，用同样的构建流程构建不同的 <code>Dockerfile</code> 的时候比较有帮助，避免构建命令必须根据每个 Dockerfile 的内容修改。</p><h3 id="volume-定义匿名卷" tabindex="-1"><a class="header-anchor" href="#volume-定义匿名卷" aria-hidden="true">#</a> VOLUME(定义匿名卷)</h3><p>格式：</p><ul><li><code>VOLUME [&quot;&lt;路径1&gt;&quot;, &quot;&lt;路径2&gt;&quot;...]</code></li><li><code>VOLUME &lt;路径&gt;</code></li></ul><p>之前我们说过，容器运行时应该尽量保持容器存储层不发生写操作，对于数据库类需要保存动态数据的应用，其数据库文件应该保存于卷(volume)中，后面的章节我们会进一步介绍 Docker 卷的概念。为了防止运行时用户忘记将动态文件所保存目录挂载为卷，在 <code>Dockerfile</code> 中，我们可以事先指定某些目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运行，不会向容器存储层写入大量数据。</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">VOLUME</span> /data</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里的 <code>/data</code> 目录就会在运行时自动挂载为匿名卷，任何向 <code>/data</code> 中写入的信息都不会记录进容器存储层，从而保证了容器存储层的无状态化。当然，运行时可以覆盖这个挂载设置。比如：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code>docker run -d -v mydata:/data xxxx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在这行命令中，就使用了 <code>mydata</code> 这个命名卷挂载到了 <code>/data</code> 这个位置，替代了 <code>Dockerfile</code> 中定义的匿名卷的挂载配置。</p><h3 id="expose-暴露端口" tabindex="-1"><a class="header-anchor" href="#expose-暴露端口" aria-hidden="true">#</a> EXPOSE(暴露端口)</h3><blockquote><p><code>EXPOSE</code> 指令是声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务。在 Dockerfile 中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射时，也就是 <code>docker run -P</code> 时，会自动随机映射 <code>EXPOSE</code> 的端口。</p><p>要将 <code>EXPOSE</code> 和在运行时使用 <code>-p &lt;宿主端口&gt;:&lt;容器端口&gt;</code> 区分开来。<code>-p</code>，是映射宿主端口和容器端口，换句话说，就是将容器的对应端口服务公开给外界访问，而 <code>EXPOSE</code> 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。</p></blockquote><p>格式：<code>EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...]</code>。</p><h3 id="workdir-指定工作目录" tabindex="-1"><a class="header-anchor" href="#workdir-指定工作目录" aria-hidden="true">#</a> WORKDIR(指定工作目录)</h3><blockquote><p>使用 <code>WORKDIR</code> 指令可以来指定工作目录（或者称为当前目录），以后各层的当前目录就被改为指定的目录，如该目录不存在，<code>WORKDIR</code> 会帮你建立目录。</p></blockquote><p>格式：<code>WORKDIR &lt;工作目录路径&gt;</code>。</p><p>示例 1：</p><p>之前提到一些初学者常犯的错误是把 <code>Dockerfile</code> 等同于 Shell 脚本来书写，这种错误的理解还可能会导致出现下面这样的错误：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">RUN</span> cd /app</span>
<span class="token instruction"><span class="token keyword">RUN</span> echo <span class="token string">&quot;hello&quot;</span> &gt; world.txt</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果将这个 <code>Dockerfile</code> 进行构建镜像运行后，会发现找不到 <code>/app/world.txt</code> 文件，或者其内容不是 <code>hello</code>。原因其实很简单，在 Shell 中，连续两行是同一个进程执行环境，因此前一个命令修改的内存状态，会直接影响后一个命令；而在 <code>Dockerfile</code> 中，这两行 <code>RUN</code> 命令的执行环境根本不同，是两个完全不同的容器。这就是对 <code>Dockerfile</code> 构建分层存储的概念不了解所导致的错误。</p><p>之前说过每一个 <code>RUN</code> 都是启动一个容器、执行命令、然后提交存储层文件变更。第一层 <code>RUN cd /app</code> 的执行仅仅是当前进程的工作目录变更，一个内存上的变化而已，其结果不会造成任何文件变更。而到第二层的时候，启动的是一个全新的容器，跟第一层的容器更完全没关系，自然不可能继承前一层构建过程中的内存变化。</p><p>因此如果需要改变以后各层的工作目录的位置，那么应该使用 <code>WORKDIR</code> 指令。</p><h3 id="label" tabindex="-1"><a class="header-anchor" href="#label" aria-hidden="true">#</a> LABEL</h3><p><code>LABEL</code>用于为镜像添加元数据，元数以键值对的形式指定：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>LABEL &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; ...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用<code>LABEL</code>指定元数据时，一条<code>LABEL</code>指定可以指定一或多条元数据，指定多条元数据时不同元数据之间通过空格分隔。推荐将所有的元数据通过一条<code>LABEL</code>指令指定，以免生成过多的中间镜像。</p><p>如，通过<code>LABEL</code>指定一些元数据：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>LABEL version=&quot;1.0&quot; description=&quot;这是一个Web服务器&quot; by=&quot;IT笔录&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>指定后可以通过<code>docker inspect</code>查看：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$sudo docker inspect itbilu/test
&quot;Labels&quot;: {
    &quot;version&quot;: &quot;1.0&quot;,
    &quot;description&quot;: &quot;这是一个Web服务器&quot;,
    &quot;by&quot;: &quot;IT笔录&quot;
},
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>注意；</em><code>Dockerfile</code>中还有个<code>MAINTAINER</code>命令，该命令用于指定镜像作者。但<code>MAINTAINER</code>并不推荐使用，更推荐使用<code>LABEL</code>来指定镜像作者。如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>LABEL maintainer=&quot;itbilu.com&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="user-指定当前用户" tabindex="-1"><a class="header-anchor" href="#user-指定当前用户" aria-hidden="true">#</a> USER(指定当前用户)</h3><blockquote><p><code>USER</code> 指令和 <code>WORKDIR</code> 相似，都是改变环境状态并影响以后的层。<code>WORKDIR</code> 是改变工作目录，<code>USER</code> 则是改变之后层的执行 <code>RUN</code>, <code>CMD</code> 以及 <code>ENTRYPOINT</code> 这类命令的身份。</p><p>当然，和 <code>WORKDIR</code> 一样，<code>USER</code> 只是帮助你切换到指定用户而已，这个用户必须是事先建立好的，否则无法切换。</p></blockquote><p>格式：<code>USER &lt;用户名&gt;[:&lt;用户组&gt;]</code></p><p>示例 1：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">RUN</span> groupadd -r redis &amp;&amp; useradd -r -g redis redis</span>
<span class="token instruction"><span class="token keyword">USER</span> redis</span>
<span class="token instruction"><span class="token keyword">RUN</span> [ <span class="token string">&quot;redis-server&quot;</span> ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,107),re=e("code",null,"root",-1),pe=e("code",null,"su",-1),ue=e("code",null,"sudo",-1),ke={href:"https://github.com/tianon/gosu",target:"_blank",rel:"noopener noreferrer"},ve=e("code",null,"gosu",-1),me=o(`<div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token comment"># 建立 redis 用户，并使用 gosu 换另一个用户执行命令</span>
<span class="token instruction"><span class="token keyword">RUN</span> groupadd -r redis &amp;&amp; useradd -r -g redis redis</span>
<span class="token comment"># 下载 gosu</span>
<span class="token instruction"><span class="token keyword">RUN</span> wget -O /usr/local/bin/gosu <span class="token string">&quot;https://github.com/tianon/gosu/releases/download/1.7/gosu-amd64&quot;</span> <span class="token operator">\\</span>
    &amp;&amp; chmod +x /usr/local/bin/gosu <span class="token operator">\\</span>
    &amp;&amp; gosu nobody true</span>
<span class="token comment"># 设置 CMD，并以另外的用户执行</span>
<span class="token instruction"><span class="token keyword">CMD</span> [ <span class="token string">&quot;exec&quot;</span>, <span class="token string">&quot;gosu&quot;</span>, <span class="token string">&quot;redis&quot;</span>, <span class="token string">&quot;redis-server&quot;</span> ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="healthcheck-健康检查" tabindex="-1"><a class="header-anchor" href="#healthcheck-健康检查" aria-hidden="true">#</a> HEALTHCHECK(健康检查)</h3><p>格式：</p><ul><li><code>HEALTHCHECK [选项] CMD &lt;命令&gt;</code>：设置检查容器健康状况的命令</li><li><code>HEALTHCHECK NONE</code>：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令</li></ul><p><code>HEALTHCHECK</code> 指令是告诉 Docker 应该如何进行判断容器的状态是否正常，这是 Docker 1.12 引入的新指令。</p><p>在没有 <code>HEALTHCHECK</code> 指令前，Docker 引擎只可以通过容器内主进程是否退出来判断容器是否状态异常。很多情况下这没问题，但是如果程序进入死锁状态，或者死循环状态，应用进程并不退出，但是该容器已经无法提供服务了。在 1.12 以前，Docker 不会检测到容器的这种状态，从而不会重新调度，导致可能会有部分容器已经无法提供服务了却还在接受用户请求。</p><p>而自 1.12 之后，Docker 提供了 <code>HEALTHCHECK</code> 指令，通过该指令指定一行命令，用这行命令来判断容器主进程的服务状态是否还正常，从而比较真实的反应容器实际状态。</p><p>当在一个镜像指定了 <code>HEALTHCHECK</code> 指令后，用其启动容器，初始状态会为 <code>starting</code>，在 <code>HEALTHCHECK</code> 指令检查成功后变为 <code>healthy</code>，如果连续一定次数失败，则会变为 <code>unhealthy</code>。</p><p><code>HEALTHCHECK</code> 支持下列选项：</p><ul><li><code>--interval=&lt;间隔&gt;</code>：两次健康检查的间隔，默认为 30 秒；</li><li><code>--timeout=&lt;时长&gt;</code>：健康检查命令运行超时时间，如果超过这个时间，本次健康检查就被视为失败，默认 30 秒；</li><li><code>--retries=&lt;次数&gt;</code>：当连续失败指定次数后，则将容器状态视为 <code>unhealthy</code>，默认 3 次。</li></ul><p>和 <code>CMD</code>, <code>ENTRYPOINT</code> 一样，<code>HEALTHCHECK</code> 只可以出现一次，如果写了多个，只有最后一个生效。</p><p>在 <code>HEALTHCHECK [选项] CMD</code> 后面的命令，格式和 <code>ENTRYPOINT</code> 一样，分为 <code>shell</code> 格式，和 <code>exec</code> 格式。命令的返回值决定了该次健康检查的成功与否：<code>0</code>：成功；<code>1</code>：失败；<code>2</code>：保留，不要使用这个值。</p><p>假设我们有个镜像是个最简单的 Web 服务，我们希望增加健康检查来判断其 Web 服务是否在正常工作，我们可以用 <code>curl</code> 来帮助判断，其 <code>Dockerfile</code> 的 <code>HEALTHCHECK</code> 可以这么写：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> nginx</span>
<span class="token instruction"><span class="token keyword">RUN</span> apt-get update &amp;&amp; apt-get install -y curl &amp;&amp; rm -rf /var/lib/apt/lists/*</span>
<span class="token instruction"><span class="token keyword">HEALTHCHECK</span> <span class="token options"><span class="token property">--interval</span><span class="token punctuation">=</span><span class="token string">5s</span> <span class="token property">--timeout</span><span class="token punctuation">=</span><span class="token string">3s</span></span> <span class="token operator">\\</span>
  <span class="token keyword">CMD</span> curl -fs http://localhost/ || exit 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们设置了每 5 秒检查一次（这里为了试验所以间隔非常短，实际应该相对较长），如果健康检查命令超过 3 秒没响应就视为失败，并且使用 <code>curl -fs http://localhost/ || exit 1</code> 作为健康检查命令。</p><p>使用 <code>docker build</code> 来构建这个镜像：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> build <span class="token parameter variable">-t</span> myweb:v1 <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>构建好了后，我们启动一个容器：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> web <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 myweb:v1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当运行该镜像后，可以通过 <code>docker container ls</code> 看到最初的状态为 <code>(health: starting)</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> container <span class="token function">ls</span>
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                            PORTS               NAMES
03e28eb00bd0        myweb:v1            <span class="token string">&quot;nginx -g &#39;daemon off&quot;</span>   <span class="token number">3</span> seconds ago       Up <span class="token number">2</span> seconds <span class="token punctuation">(</span>health: starting<span class="token punctuation">)</span>   <span class="token number">80</span>/tcp, <span class="token number">443</span>/tcp     web
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在等待几秒钟后，再次 <code>docker container ls</code>，就会看到健康状态变化为了 <code>(healthy)</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> container <span class="token function">ls</span>
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                    PORTS               NAMES
03e28eb00bd0        myweb:v1            <span class="token string">&quot;nginx -g &#39;daemon off&quot;</span>   <span class="token number">18</span> seconds ago      Up <span class="token number">16</span> seconds <span class="token punctuation">(</span>healthy<span class="token punctuation">)</span>   <span class="token number">80</span>/tcp, <span class="token number">443</span>/tcp     web
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果健康检查连续失败超过了重试次数，状态就会变为 <code>(unhealthy)</code>。</p><p>为了帮助排障，健康检查命令的输出（包括 <code>stdout</code> 以及 <code>stderr</code>）都会被存储于健康状态里，可以用 <code>docker inspect</code> 来查看。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> inspect <span class="token parameter variable">--format</span> <span class="token string">&#39;{{json .State.Health}}&#39;</span> web <span class="token operator">|</span> python <span class="token parameter variable">-m</span> json.tool
<span class="token punctuation">{</span>
    <span class="token string">&quot;FailingStreak&quot;</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,
    <span class="token string">&quot;Log&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            <span class="token string">&quot;End&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;2016-11-25T14:35:37.940957051Z&quot;</span>,
            <span class="token string">&quot;ExitCode&quot;</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,
            <span class="token string">&quot;Output&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;&lt;!DOCTYPE html&gt;<span class="token entity" title="\\n">\\n</span>&lt;html&gt;<span class="token entity" title="\\n">\\n</span>&lt;head&gt;<span class="token entity" title="\\n">\\n</span>&lt;title&gt;Welcome to nginx!&lt;/title&gt;<span class="token entity" title="\\n">\\n</span>&lt;style&gt;<span class="token entity" title="\\n">\\n</span>    body {<span class="token entity" title="\\n">\\n</span>        width: 35em;<span class="token entity" title="\\n">\\n</span>        margin: 0 auto;<span class="token entity" title="\\n">\\n</span>        font-family: Tahoma, Verdana, Arial, sans-serif;<span class="token entity" title="\\n">\\n</span>    }<span class="token entity" title="\\n">\\n</span>&lt;/style&gt;<span class="token entity" title="\\n">\\n</span>&lt;/head&gt;<span class="token entity" title="\\n">\\n</span>&lt;body&gt;<span class="token entity" title="\\n">\\n</span>&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;<span class="token entity" title="\\n">\\n</span>&lt;p&gt;If you see this page, the nginx web server is successfully installed and<span class="token entity" title="\\n">\\n</span>working. Further configuration is required.&lt;/p&gt;<span class="token entity" title="\\n">\\n</span><span class="token entity" title="\\n">\\n</span>&lt;p&gt;For online documentation and support please refer to<span class="token entity" title="\\n">\\n</span>&lt;a href=<span class="token entity" title="\\&quot;">\\&quot;</span>http://nginx.org/<span class="token entity" title="\\&quot;">\\&quot;</span>&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;<span class="token entity" title="\\n">\\n</span>Commercial support is available at<span class="token entity" title="\\n">\\n</span>&lt;a href=<span class="token entity" title="\\&quot;">\\&quot;</span>http://nginx.com/<span class="token entity" title="\\&quot;">\\&quot;</span>&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;<span class="token entity" title="\\n">\\n</span><span class="token entity" title="\\n">\\n</span>&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;<span class="token entity" title="\\n">\\n</span>&lt;/body&gt;<span class="token entity" title="\\n">\\n</span>&lt;/html&gt;<span class="token entity" title="\\n">\\n</span>&quot;</span>,
            <span class="token string">&quot;Start&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;2016-11-25T14:35:37.780192565Z&quot;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>,
    <span class="token string">&quot;Status&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;healthy&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="onbuild-为他人作嫁衣裳" tabindex="-1"><a class="header-anchor" href="#onbuild-为他人作嫁衣裳" aria-hidden="true">#</a> ONBUILD(为他人作嫁衣裳)</h3><p>格式：<code>ONBUILD &lt;其它指令&gt;</code>。</p><p><code>ONBUILD</code> 是一个特殊的指令，它后面跟的是其它指令，比如 <code>RUN</code>, <code>COPY</code> 等，而这些指令，在当前镜像构建时并不会被执行。只有当以当前镜像为基础镜像，去构建下一级镜像的时候才会被执行。</p><p><code>Dockerfile</code> 中的其它指令都是为了定制当前镜像而准备的，唯有 <code>ONBUILD</code> 是为了帮助别人定制自己而准备的。</p><p>假设我们要制作 Node.js 所写的应用的镜像。我们都知道 Node.js 使用 <code>npm</code> 进行包管理，所有依赖、配置、启动信息等会放到 <code>package.json</code> 文件里。在拿到程序代码后，需要先进行 <code>npm install</code> 才可以获得所有需要的依赖。然后就可以通过 <code>npm start</code>来启动应用。因此，一般来说会这样写 <code>Dockerfile</code>：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> node:slim</span>
<span class="token instruction"><span class="token keyword">RUN</span> mkdir /app</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span>
<span class="token instruction"><span class="token keyword">COPY</span> ./package.json /app</span>
<span class="token instruction"><span class="token keyword">RUN</span> [ <span class="token string">&quot;npm&quot;</span>, <span class="token string">&quot;install&quot;</span> ]</span>
<span class="token instruction"><span class="token keyword">COPY</span> . /app/</span>
<span class="token instruction"><span class="token keyword">CMD</span> [ <span class="token string">&quot;npm&quot;</span>, <span class="token string">&quot;start&quot;</span> ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>把这个 <code>Dockerfile</code> 放到 Node.js 项目的根目录，构建好镜像后，就可以直接拿来启动容器运行。但是如果我们还有第二个 Node.js 项目也差不多呢？好吧，那就再把这个 <code>Dockerfile</code> 复制到第二个项目里。那如果有第三个项目呢？再复制么？文件的副本越多，版本控制就越困难，让我们继续看这样的场景维护的问题。</p><p>如果第一个 Node.js 项目在开发过程中，发现这个 <code>Dockerfile</code> 里存在问题，比如敲错字了、或者需要安装额外的包，然后开发人员修复了这个 <code>Dockerfile</code>，再次构建，问题解决。第一个项目没问题了，但是第二个项目呢？虽然最初 <code>Dockerfile</code> 是复制、粘贴自第一个项目的，但是并不会因为第一个项目修复了他们的 <code>Dockerfile</code>，而第二个项目的 <code>Dockerfile</code> 就会被自动修复。</p><p>那么我们可不可以做一个基础镜像，然后各个项目使用这个基础镜像呢？这样基础镜像更新，各个项目不用同步 <code>Dockerfile</code>的变化，重新构建后就继承了基础镜像的更新？好吧，可以，让我们看看这样的结果。那么上面的这个 <code>Dockerfile</code> 就会变为：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> node:slim</span>
<span class="token instruction"><span class="token keyword">RUN</span> mkdir /app</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span>
<span class="token instruction"><span class="token keyword">CMD</span> [ <span class="token string">&quot;npm&quot;</span>, <span class="token string">&quot;start&quot;</span> ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们把项目相关的构建指令拿出来，放到子项目里去。假设这个基础镜像的名字为 <code>my-node</code> 的话，各个项目内的自己的 <code>Dockerfile</code> 就变为：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> my-node</span>
<span class="token instruction"><span class="token keyword">COPY</span> ./package.json /app</span>
<span class="token instruction"><span class="token keyword">RUN</span> [ <span class="token string">&quot;npm&quot;</span>, <span class="token string">&quot;install&quot;</span> ]</span>
<span class="token instruction"><span class="token keyword">COPY</span> . /app/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基础镜像变化后，各个项目都用这个 <code>Dockerfile</code> 重新构建镜像，会继承基础镜像的更新。</p><p>那么，问题解决了么？没有。准确说，只解决了一半。如果这个 <code>Dockerfile</code> 里面有些东西需要调整呢？比如 <code>npm install</code> 都需要加一些参数，那怎么办？这一行 <code>RUN</code> 是不可能放入基础镜像的，因为涉及到了当前项目的 <code>./package.json</code>，难道又要一个个修改么？所以说，这样制作基础镜像，只解决了原来的 <code>Dockerfile</code> 的前 4 条指令的变化问题，而后面三条指令的变化则完全没办法处理。</p><p><code>ONBUILD</code> 可以解决这个问题。让我们用 <code>ONBUILD</code> 重新写一下基础镜像的 <code>Dockerfile</code>:</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> node:slim</span>
<span class="token instruction"><span class="token keyword">RUN</span> mkdir /app</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span>
<span class="token instruction"><span class="token keyword">ONBUILD</span> <span class="token keyword">COPY</span> ./package.json /app</span>
<span class="token instruction"><span class="token keyword">ONBUILD</span> <span class="token keyword">RUN</span> [ <span class="token string">&quot;npm&quot;</span>, <span class="token string">&quot;install&quot;</span> ]</span>
<span class="token instruction"><span class="token keyword">ONBUILD</span> <span class="token keyword">COPY</span> . /app/</span>
<span class="token instruction"><span class="token keyword">CMD</span> [ <span class="token string">&quot;npm&quot;</span>, <span class="token string">&quot;start&quot;</span> ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这次我们回到原始的 <code>Dockerfile</code>，但是这次将项目相关的指令加上 <code>ONBUILD</code>，这样在构建基础镜像的时候，这三行并不会被执行。然后各个项目的 <code>Dockerfile</code> 就变成了简单地：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> my-node</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>是的，只有这么一行。当在各个项目目录中，用这个只有一行的 <code>Dockerfile</code> 构建镜像时，之前基础镜像的那三行 <code>ONBUILD</code> 就会开始执行，成功的将当前项目的代码复制进镜像、并且针对本项目执行 <code>npm install</code>，生成应用镜像。</p><h2 id="二、最佳实践" tabindex="-1"><a class="header-anchor" href="#二、最佳实践" aria-hidden="true">#</a> 二、最佳实践</h2><p>有任何的问题或建议，欢迎给我留言 😆</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,48),ge={href:"https://docs.docker.com/engine/reference/builder/",target:"_blank",rel:"noopener noreferrer"},be={href:"https://docs.docker.com/develop/develop-images/dockerfile_best-practices/",target:"_blank",rel:"noopener noreferrer"},he={href:"https://github.com/docker-library/docs",target:"_blank",rel:"noopener noreferrer"},fe={href:"https://yeasy.gitbooks.io/docker_practice/content/image/dockerfile/",target:"_blank",rel:"noopener noreferrer"};function ye(qe,De){const n=c("ExternalLinkIcon");return d(),i("div",null,[r,e("p",null,[s("在 "),e("a",p,[s("Docker Store"),a(n)]),s(" 上有非常多的高质量的官方镜像，有可以直接拿来使用的服务类的镜像，如 "),e("a",u,[k,a(n)]),s("、"),e("a",v,[m,a(n)]),s("、"),e("a",g,[b,a(n)]),s("、"),e("a",h,[f,a(n)]),s("、"),e("a",y,[q,a(n)]),s("、"),e("a",D,[_,a(n)]),s("、"),e("a",x,[N,a(n)]),s(" 等；也有一些方便开发、构建、运行各种语言应用的镜像，如 "),e("a",R,[O,a(n)]),s("、"),e("a",E,[w,a(n)]),s("、"),e("a",C,[M,a(n)]),s("、"),e("a",U,[T,a(n)]),s("、"),e("a",I,[S,a(n)]),s(" 等。可以在其中寻找一个最符合我们最终目标的镜像为基础镜像进行定制。")]),e("p",null,[s("如果没有找到对应服务的镜像，官方镜像中还提供了一些更为基础的操作系统镜像，如 "),e("a",A,[P,a(n)]),s("、"),e("a",L,[H,a(n)]),s("、"),e("a",Y,[V,a(n)]),s("、"),e("a",$,[B,a(n)]),s("、"),e("a",K,[F,a(n)]),s(" 等，这些操作系统的软件库为我们提供了更广阔的扩展空间。")]),j,e("p",null,[s("不以任何系统为基础，直接将可执行文件复制进镜像的做法并不罕见，比如 "),e("a",W,[z,a(n)]),s("、"),e("a",G,[X,a(n)]),s("。对于 Linux 下静态编译的程序来说，并不需要有操作系统提供运行时支持，所需的一切库都已经在可执行文件里了，因此直接 "),J,s(" 会让镜像体积更加小巧。使用 "),e("a",Z,[s("Go 语言"),a(n)]),s(" 开发的应用很多会使用这种方式来制作镜像，这也是为什么有人认为 Go 是特别适合容器微服务架构的语言的原因之一。")]),Q,e("p",null,[ee,s(" 可以是多个，甚至可以是通配符，其通配符规则要满足 Go 的 "),e("a",se,[ne,a(n)]),s(" 规则，如：")]),ae,e("p",null,[s("在 Docker 官方的 "),e("a",oe,[s("Dockerfile 最佳实践文档"),a(n)]),s(" 中要求，尽可能的使用 "),te,s("，因为 "),ce,s(" 的语义很明确，就是复制文件而已，而 "),de,s(" 则包含了更复杂的功能，其行为也不一定很清晰。最适合使用 "),ie,s(" 的场合，就是所提及的需要自动解压缩的场合。")]),le,e("p",null,[s("如果以 "),re,s(" 执行的脚本，在执行期间希望改变身份，比如希望以某个已经建立好的用户来运行某个服务进程，不要使用 "),pe,s("或者 "),ue,s("，这些都需要比较麻烦的配置，而且在 TTY 缺失的环境下经常出错。建议使用 "),e("a",ke,[ve,a(n)]),s("。")]),me,e("ul",null,[e("li",null,[e("a",ge,[s("Dockerfie 官方文档"),a(n)])]),e("li",null,[e("a",be,[s("Best practices for writing Dockerfiles"),a(n)])]),e("li",null,[e("a",he,[s("Docker 官方镜像 Dockerfile"),a(n)])]),e("li",null,[e("a",fe,[s("Dockerfile 指令详解"),a(n)])])])])}const Ne=t(l,[["render",ye],["__file","index.html.vue"]]);export{Ne as default};
