const t=JSON.parse('{"key":"v-4782699f","path":"/pages/a626f515/","title":"Java 容器面试三","lang":"zh-CN","frontmatter":{"title":"Java 容器面试三","date":"2024-07-03T07:44:02.000Z","permalink":"/pages/a626f515/","category":["Java","JavaCore","面试"],"tag":["Java","JavaCore","面试","容器"],"description":"Java 容器面试三 Java 容器工具类 Collections 工具类常用方法: 排序 查找，替换操作 同步控制（不推荐，需要线程安全的集合类型时请考虑使用 JUC 包下的并发集合） 排序操作 void reverse(List list)//反转 void shuffle(List list)//随机排序 void sort(List list)//按自然排序的升序排序 void sort(List list, Comparator c)//定制排序，由 Comparator 控制排序逻辑 void swap(List list, int i , int j)//交换两个索引位置的元素 void rotate(List list, int distance)//旋转。当 distance 为正数时，将 list 后 distance 个元素整体移到前面。当 distance 为负数时，将 list 的前 distance 个元素整体移到后面","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/a626f515/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"Java 容器面试三"}],["meta",{"property":"og:description","content":"Java 容器面试三 Java 容器工具类 Collections 工具类常用方法: 排序 查找，替换操作 同步控制（不推荐，需要线程安全的集合类型时请考虑使用 JUC 包下的并发集合） 排序操作 void reverse(List list)//反转 void shuffle(List list)//随机排序 void sort(List list)//按自然排序的升序排序 void sort(List list, Comparator c)//定制排序，由 Comparator 控制排序逻辑 void swap(List list, int i , int j)//交换两个索引位置的元素 void rotate(List list, int distance)//旋转。当 distance 为正数时，将 list 后 distance 个元素整体移到前面。当 distance 为负数时，将 list 的前 distance 个元素整体移到后面"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-13T09:10:08.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"JavaCore"}],["meta",{"property":"article:tag","content":"面试"}],["meta",{"property":"article:tag","content":"容器"}],["meta",{"property":"article:published_time","content":"2024-07-03T07:44:02.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-13T09:10:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 容器面试三\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-03T07:44:02.000Z\\",\\"dateModified\\":\\"2025-09-13T09:10:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"Java 容器工具类","slug":"java-容器工具类","link":"#java-容器工具类","children":[{"level":3,"title":"排序操作","slug":"排序操作","link":"#排序操作","children":[]},{"level":3,"title":"查找，替换操作","slug":"查找-替换操作","link":"#查找-替换操作","children":[]},{"level":3,"title":"同步控制","slug":"同步控制","link":"#同步控制","children":[]}]},{"level":2,"title":"集合判空","slug":"集合判空","link":"#集合判空","children":[]},{"level":2,"title":"集合转 Map","slug":"集合转-map","link":"#集合转-map","children":[]},{"level":2,"title":"集合遍历","slug":"集合遍历","link":"#集合遍历","children":[]},{"level":2,"title":"集合去重","slug":"集合去重","link":"#集合去重","children":[]},{"level":2,"title":"集合转数组","slug":"集合转数组","link":"#集合转数组","children":[]},{"level":2,"title":"数组转集合","slug":"数组转集合","link":"#数组转集合","children":[]},{"level":2,"title":"使用 List.subList 进行切片操作居然会导致 OOM","slug":"使用-list-sublist-进行切片操作居然会导致-oom","link":"#使用-list-sublist-进行切片操作居然会导致-oom","children":[]}],"git":{"createdTime":1743948422000,"updatedTime":1757754608000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":4}]},"readingTime":{"minutes":10.78,"words":3235},"filePathRelative":"01.Java/01.JavaCore/99.面试/Java_面试_容器（三）.md","localizedDate":"2024年7月3日","excerpt":"<h1> Java 容器面试三</h1>\\n<h2> Java 容器工具类</h2>\\n<p><strong><code>Collections</code> 工具类常用方法</strong>:</p>\\n<ul>\\n<li>排序</li>\\n<li>查找，替换操作</li>\\n<li>同步控制（不推荐，需要线程安全的集合类型时请考虑使用 JUC 包下的并发集合）</li>\\n</ul>\\n<h3> 排序操作</h3>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>void reverse(List list)//反转\\nvoid shuffle(List list)//随机排序\\nvoid sort(List list)//按自然排序的升序排序\\nvoid sort(List list, Comparator c)//定制排序，由 Comparator 控制排序逻辑\\nvoid swap(List list, int i , int j)//交换两个索引位置的元素\\nvoid rotate(List list, int distance)//旋转。当 distance 为正数时，将 list 后 distance 个元素整体移到前面。当 distance 为负数时，将 list 的前 distance 个元素整体移到后面\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{t as data};
