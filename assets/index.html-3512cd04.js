import{_ as d}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as u,c as p,a as e,b as a,d as n,w as t,e as o}from"./app-55986131.js";const h={},m=o('<h1 id="java-虚拟机之工具" tabindex="-1"><a class="header-anchor" href="#java-虚拟机之工具" aria-hidden="true">#</a> Java 虚拟机之工具</h1><h2 id="jvm-命令行工具" tabindex="-1"><a class="header-anchor" href="#jvm-命令行工具" aria-hidden="true">#</a> JVM 命令行工具</h2><blockquote><p>Java 程序员免不了故障排查工作，所以经常需要使用一些 JVM 工具。</p><p>JDK 自带了一些实用的命令行工具来监控、分析 JVM 信息，掌握它们，非常有助于 TroubleShooting。</p></blockquote><p>以下是较常用的 JDK 命令行工具：</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>jps</code></td><td>虚拟机进程状况工具。显示系统内的所有 JVM 进程。</td></tr><tr><td><code>jstat</code></td><td>JVM 统计监控工具。监控虚拟机运行时状态信息，它可以显示出 JVM 进程中的类装载、内存、GC、JIT 编译等运行数据。</td></tr><tr><td><code>jmap</code></td><td>JVM 堆内存分析工具。用于打印 JVM 进程对象直方图、类加载统计。并且可以生成堆转储快照（一般称为 heapdump 或 dump 文件）。</td></tr><tr><td><code>jstack</code></td><td>JVM 栈查看工具。用于打印 JVM 进程的线程和锁的情况。并且可以生成线程快照（一般称为 threaddump 或 javacore 文件）。</td></tr><tr><td><code>jhat</code></td><td>用来分析 jmap 生成的 dump 文件。</td></tr><tr><td><code>jinfo</code></td><td>JVM 信息查看工具。用于实时查看和调整 JVM 进程参数。</td></tr><tr><td><code>jcmd</code></td><td>JVM 命令行调试 工具。用于向 JVM 进程发送调试命令。</td></tr></tbody></table><h3 id="jps-虚拟机进程状况工具" tabindex="-1"><a class="header-anchor" href="#jps-虚拟机进程状况工具" aria-hidden="true">#</a> jps：虚拟机进程状况工具</h3>',6),b={href:"https://docs.oracle.com/en/java/javase/11/tools/jps.html#GUID-6EB65B96-F9DD-4356-B825-6146E9EEC81E",target:"_blank",rel:"noopener noreferrer"},v=o(`<p>jps 命令格式：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>jps <span class="token punctuation">[</span>option<span class="token punctuation">]</span> <span class="token punctuation">[</span>hostid<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>jps 还可以通过 RMI 协议查询开启了 RMI 服务的远程虚拟机进程状态，参数 hostid 为 RMI 注册表中 注册的主机名。</p><ul><li><code>option</code> - 选项参数 <ul><li><code>-m</code> - 输出 JVM 启动时传递给 main() 的参数。</li><li><code>-l</code> - 输出主类的全名，如果进程执行的是 jar 包，输出 jar 路径。</li><li><code>-v</code> - 显示传递给 JVM 的参数。</li><li><code>-q</code> - 仅输出本地 JVM 进程 ID。</li><li><code>-V</code> - 仅输出本地 JVM 标识符。</li></ul></li><li><code>hostid</code> - RMI 注册表中注册的主机名。如果不指定 hostid 就默认为当前主机或服务器。</li></ul><p>其中 <code>option</code>、<code>hostid</code> 参数也可以不写。</p><p>jps 使用示例：</p>`,6),k=e("p",null,"【示例】列出本地 Java 进程",-1),g=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[a(`$ jps
`),e("span",{class:"token number"},"18027"),a(` Java2Demo.JAR
`),e("span",{class:"token number"},"18032"),a(` jps
`),e("span",{class:"token number"},"18005"),a(` jstat
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),f=e("p",null,"【示例】列出本地 Java 进程 ID",-1),_=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[a("$ jps "),e("span",{class:"token parameter variable"},"-q"),a(`
`),e("span",{class:"token number"},"8841"),a(`
`),e("span",{class:"token number"},"1292"),a(`
`),e("span",{class:"token number"},"5398"),a(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),j=e("p",null,"【示例】列出本地 Java 进程 ID，并输出主类的全名",-1),x=e("p",null,"如果进程执行的是 jar 包，输出 jar 路径",-1),M=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[a("$ jps "),e("span",{class:"token parameter variable"},"-l"),a(` remote.domain
`),e("span",{class:"token number"},"3002"),a(` /opt/jdk1.7.0/demo/jfc/Java2D/Java2Demo.JAR
`),e("span",{class:"token number"},"2857"),a(` sun.tools.jstatd.jstatd
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),T=e("h3",{id:"jstat-虚拟机统计信息监视工具",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#jstat-虚拟机统计信息监视工具","aria-hidden":"true"},"#"),a(" jstat：虚拟机统计信息监视工具")],-1),S={href:"https://docs.oracle.com/en/java/javase/11/tools/jstat.html",target:"_blank",rel:"noopener noreferrer"},J=o(`<p>jstat 命令格式：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>jstat <span class="token punctuation">[</span>option<span class="token punctuation">]</span> VMID <span class="token punctuation">[</span>interval<span class="token punctuation">]</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对于命令格式中的 VMID 与 LVMID 需要特别说明一下：如果是本地虚拟机进程，VMID 与 LVMID 是一致的；如果是远程虚拟机进程，那 VMID 的格式应当是：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[protocol:][//]lvmid[@hostname[:port]/servername]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>常用参数：</p><ul><li><code>option</code> - 选项参数，用于指定用户需要查询的虚拟机信息 <ul><li><code>-class</code> - 监视类装载、卸载数量、总空间以及类装载所耗费的时间</li><li><code>-compiler</code>：显示 JIT 编译的相关信息；</li><li><code>-gc</code>：监视 Java 堆状况，包括 Eden 区、两个 survivor 区、老年代、永久代等区的容量、已用空间、GC 时间合计等信息。</li><li><code>-gccapacity</code>：显示各个代的容量以及使用情况；</li><li><code>-gcmetacapacity</code>：显示 Metaspace 的大小；</li><li><code>-gcnew</code>：显示新生代信息；</li><li><code>-gcnewcapacity</code>：显示新生代大小和使用情况；</li><li><code>-gcold</code>：显示老年代和永久代的信息；</li><li><code>-gcoldcapacity</code>：显示老年代的大小；</li><li><code>-gcutil</code>：显示垃圾回收统计信息；</li><li><code>-gccause</code>：显示垃圾回收的相关信息（通 -gcutil），同时显示最后一次或当前正在发生的垃圾回收的诱因；</li><li><code>-printcompilation</code>：输出 JIT 编译的方法信息。</li></ul></li><li><code>VMID</code> - 如果是本地虚拟机进程，则 VMID 与 LVMID 是一致的；如果是远程虚拟机进程，那 VMID 的格式应当是：<code>[protocol:][//]lvmid[@hostname[:port]/servername]</code></li><li><code>interval</code> - 查询间隔</li><li><code>count</code> - 查询次数</li></ul>`,6),C={href:"https://www.cnblogs.com/yjd_hycf_space/p/7755633.html",target:"_blank",rel:"noopener noreferrer"},w=e("p",null,"jstat 使用示例：",-1),y=e("h4",{id:"类加载统计",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#类加载统计","aria-hidden":"true"},"#"),a(" 类加载统计")],-1),q=e("p",null,[a("使用 "),e("code",null,"jstat -class pid"),a(" 命令可以查看编译统计信息。")],-1),D=e("p",null,"【参数】",-1),V=e("ul",null,[e("li",null,"Loaded - 加载 class 的数量"),e("li",null,"Bytes - 所占用空间大小"),e("li",null,"Unloaded - 未加载数量"),e("li",null,"Bytes - 未加载占用空间"),e("li",null,"Time - 时间")],-1),L=e("p",null,"【示例】查看类加载信息",-1),A=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[a("$ jstat "),e("span",{class:"token parameter variable"},"-class"),a(),e("span",{class:"token number"},"7129"),a(`
Loaded  Bytes  Unloaded  Bytes     Time
 `),e("span",{class:"token number"},"26749"),a(),e("span",{class:"token number"},"50405.3"),a("      "),e("span",{class:"token number"},"873"),a("  "),e("span",{class:"token number"},"1216.8"),a("      "),e("span",{class:"token number"},"19.75"),a(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),I=e("h4",{id:"编译统计",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#编译统计","aria-hidden":"true"},"#"),a(" 编译统计")],-1),B=e("p",null,[a("使用 "),e("code",null,"jstat -compiler pid"),a(" 命令可以查看编译统计信息。")],-1),G=e("p",null,"【示例】",-1),E=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[a("$ jstat "),e("span",{class:"token parameter variable"},"-compiler"),a(),e("span",{class:"token number"},"7129"),a(`
Compiled Failed Invalid   Time   FailedType FailedMethod
   `),e("span",{class:"token number"},"42030"),a("      "),e("span",{class:"token number"},"2"),a("       "),e("span",{class:"token number"},"0"),a("   "),e("span",{class:"token number"},"302.53"),a("          "),e("span",{class:"token number"},"1"),a(" org/apache/felix/framework/BundleWiringImpl"),e("span",{class:"token variable"},"$BundleClassLoader"),a(` findClass
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),R=e("p",null,"【参数】",-1),z=e("ul",null,[e("li",null,"Compiled - 编译数量"),e("li",null,"Failed - 失败数量"),e("li",null,"Invalid - 不可用数量"),e("li",null,"Time - 时间"),e("li",null,"FailedType - 失败类型"),e("li",null,"FailedMethod - 失败的方法")],-1),P=e("h4",{id:"gc-统计",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#gc-统计","aria-hidden":"true"},"#"),a(" GC 统计")],-1),O=e("p",null,[a("使用 "),e("code",null,"jstat -gc pid time"),a(" 命令可以查看 GC 统计信息。")],-1),U=e("p",null,"【示例】以 250 毫秒的间隔进行 7 次采样，并显示-gcutil 选项指定的输出。",-1),H=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[a("$ jstat "),e("span",{class:"token parameter variable"},"-gcutil"),a(),e("span",{class:"token number"},"21891"),a(),e("span",{class:"token number"},"250"),a(),e("span",{class:"token number"},"7"),a(`
  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT
  `),e("span",{class:"token number"},"0.00"),a("  "),e("span",{class:"token number"},"97.02"),a("  "),e("span",{class:"token number"},"70.31"),a("  "),e("span",{class:"token number"},"66.80"),a("  "),e("span",{class:"token number"},"95.52"),a("  "),e("span",{class:"token number"},"89.14"),a("      "),e("span",{class:"token number"},"7"),a("    "),e("span",{class:"token number"},"0.300"),a("     "),e("span",{class:"token number"},"0"),a("    "),e("span",{class:"token number"},"0.000"),a("    "),e("span",{class:"token number"},"0.300"),a(`
  `),e("span",{class:"token number"},"0.00"),a("  "),e("span",{class:"token number"},"97.02"),a("  "),e("span",{class:"token number"},"86.23"),a("  "),e("span",{class:"token number"},"66.80"),a("  "),e("span",{class:"token number"},"95.52"),a("  "),e("span",{class:"token number"},"89.14"),a("      "),e("span",{class:"token number"},"7"),a("    "),e("span",{class:"token number"},"0.300"),a("     "),e("span",{class:"token number"},"0"),a("    "),e("span",{class:"token number"},"0.000"),a("    "),e("span",{class:"token number"},"0.300"),a(`
  `),e("span",{class:"token number"},"0.00"),a("  "),e("span",{class:"token number"},"97.02"),a("  "),e("span",{class:"token number"},"96.53"),a("  "),e("span",{class:"token number"},"66.80"),a("  "),e("span",{class:"token number"},"95.52"),a("  "),e("span",{class:"token number"},"89.14"),a("      "),e("span",{class:"token number"},"7"),a("    "),e("span",{class:"token number"},"0.300"),a("     "),e("span",{class:"token number"},"0"),a("    "),e("span",{class:"token number"},"0.000"),a("    "),e("span",{class:"token number"},"0.300"),a(`
 `),e("span",{class:"token number"},"91.03"),a("   "),e("span",{class:"token number"},"0.00"),a("   "),e("span",{class:"token number"},"1.98"),a("  "),e("span",{class:"token number"},"68.19"),a("  "),e("span",{class:"token number"},"95.89"),a("  "),e("span",{class:"token number"},"91.24"),a("      "),e("span",{class:"token number"},"8"),a("    "),e("span",{class:"token number"},"0.378"),a("     "),e("span",{class:"token number"},"0"),a("    "),e("span",{class:"token number"},"0.000"),a("    "),e("span",{class:"token number"},"0.378"),a(`
 `),e("span",{class:"token number"},"91.03"),a("   "),e("span",{class:"token number"},"0.00"),a("  "),e("span",{class:"token number"},"15.82"),a("  "),e("span",{class:"token number"},"68.19"),a("  "),e("span",{class:"token number"},"95.89"),a("  "),e("span",{class:"token number"},"91.24"),a("      "),e("span",{class:"token number"},"8"),a("    "),e("span",{class:"token number"},"0.378"),a("     "),e("span",{class:"token number"},"0"),a("    "),e("span",{class:"token number"},"0.000"),a("    "),e("span",{class:"token number"},"0.378"),a(`
 `),e("span",{class:"token number"},"91.03"),a("   "),e("span",{class:"token number"},"0.00"),a("  "),e("span",{class:"token number"},"17.80"),a("  "),e("span",{class:"token number"},"68.19"),a("  "),e("span",{class:"token number"},"95.89"),a("  "),e("span",{class:"token number"},"91.24"),a("      "),e("span",{class:"token number"},"8"),a("    "),e("span",{class:"token number"},"0.378"),a("     "),e("span",{class:"token number"},"0"),a("    "),e("span",{class:"token number"},"0.000"),a("    "),e("span",{class:"token number"},"0.378"),a(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),$=e("p",null,"【示例】以 1 秒的间隔进行 4 次采样，并显示-gc 选项指定的输出。",-1),N=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[a("$ jstat "),e("span",{class:"token parameter variable"},"-gc"),a(),e("span",{class:"token number"},"25196"),a(" 1s "),e("span",{class:"token number"},"4"),a(`
 S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT
`),e("span",{class:"token number"},"20928.0"),a(),e("span",{class:"token number"},"20928.0"),a("  "),e("span",{class:"token number"},"0.0"),a("    "),e("span",{class:"token number"},"0.0"),a("   "),e("span",{class:"token number"},"167936.0"),a("  "),e("span",{class:"token number"},"8880.5"),a("   "),e("span",{class:"token number"},"838912.0"),a("   "),e("span",{class:"token number"},"80291.2"),a("   "),e("span",{class:"token number"},"106668.0"),a(),e("span",{class:"token number"},"100032.1"),a(),e("span",{class:"token number"},"12772.0"),a(),e("span",{class:"token number"},"11602.2"),a("    "),e("span",{class:"token number"},"760"),a("   "),e("span",{class:"token number"},"14.332"),a("  "),e("span",{class:"token number"},"580"),a("   "),e("span",{class:"token number"},"656.218"),a("  "),e("span",{class:"token number"},"670.550"),a(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),F=e("p",null,"参数说明：",-1),W=e("ul",null,[e("li",null,[e("code",null,"S0C"),a("：年轻代中 To Survivor 的容量（单位 KB）；")]),e("li",null,[e("code",null,"S1C"),a("：年轻代中 From Survivor 的容量（单位 KB）；")]),e("li",null,[e("code",null,"S0U"),a("：年轻代中 To Survivor 目前已使用空间（单位 KB）；")]),e("li",null,[e("code",null,"S1U"),a("：年轻代中 From Survivor 目前已使用空间（单位 KB）；")]),e("li",null,[e("code",null,"EC"),a("：年轻代中 Eden 的容量（单位 KB）；")]),e("li",null,[e("code",null,"EU"),a("：年轻代中 Eden 目前已使用空间（单位 KB）；")]),e("li",null,[e("code",null,"OC"),a("：Old 代的容量（单位 KB）；")]),e("li",null,[e("code",null,"OU"),a("：Old 代目前已使用空间（单位 KB）；")]),e("li",null,[e("code",null,"MC"),a("：Metaspace 的容量（单位 KB）；")]),e("li",null,[e("code",null,"MU"),a("：Metaspace 目前已使用空间（单位 KB）；")]),e("li",null,[e("code",null,"YGC"),a("：从应用程序启动到采样时年轻代中 gc 次数；")]),e("li",null,[e("code",null,"YGCT"),a("：从应用程序启动到采样时年轻代中 gc 所用时间 (s)；")]),e("li",null,[e("code",null,"FGC"),a("：从应用程序启动到采样时 old 代（全 gc）gc 次数；")]),e("li",null,[e("code",null,"FGCT"),a("：从应用程序启动到采样时 old 代（全 gc）gc 所用时间 (s)；")]),e("li",null,[e("code",null,"GCT"),a("：从应用程序启动到采样时 gc 用的总时间 (s)。")])],-1),K={href:"http://docs.oracle.com/javase/8/docs/technotes/tools/unix/jstat.html",target:"_blank",rel:"noopener noreferrer"},X=e("h3",{id:"jinfo-java-配置信息工具",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#jinfo-java-配置信息工具","aria-hidden":"true"},"#"),a(" jinfo：Java 配置信息工具")],-1),Q={href:"https://docs.oracle.com/en/java/javase/11/tools/jinfo.html",target:"_blank",rel:"noopener noreferrer"},Y=e("code",null,"-X",-1),Z=e("code",null,"-XX",-1),ee=e("code",null,"System.getProperty",-1),ae=e("code",null,"-D",-1),ne=o(`<p>之前的 <code>jps -v</code> 口令只能查看到显示指定的参数，如果想要查看未被显示指定的参数的值就要使用 jinfo 口令。</p><p>jinfo 命令格式：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>jinfo <span class="token punctuation">[</span>option<span class="token punctuation">]</span> pid
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>option</code> 选项参数：</p><ul><li><code>-flag</code> - 输出指定 args 参数的值</li><li><code>-sysprops</code> - 输出系统属性，等同于 <code>System.getProperties()</code></li></ul><p>【示例】jinfo 使用示例</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ jinfo <span class="token parameter variable">-sysprops</span> <span class="token number">29527</span>
Attaching to process ID <span class="token number">29527</span>, please wait<span class="token punctuation">..</span>.
Debugger attached successfully.
Server compiler detected.
JVM version is <span class="token number">25.222</span>-b10
<span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="jmap-java-内存映像工具" tabindex="-1"><a class="header-anchor" href="#jmap-java-内存映像工具" aria-hidden="true">#</a> jmap：Java 内存映像工具</h3>`,8),se={href:"https://docs.oracle.com/en/java/javase/11/tools/jmap.html",target:"_blank",rel:"noopener noreferrer"},te=e("code",null,"finalize",-1),ie=o(`<p>如果不使用这个命令，还可以使用 <code>-XX:+HeapDumpOnOutOfMemoryError</code> 参数来让虚拟机出现 OOM 的时候，自动生成 dump 文件。</p><p>jmap 命令格式：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>jmap [option] pid
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>option</code> 选项参数：</p><ul><li><code>-dump</code> - 生成堆转储快照。<code>-dump:live</code> 只保存堆中的存活对象。</li><li><code>-finalizerinfo</code> - 显示在 F-Queue 队列等待执行 <code>finalizer</code> 方法的对象</li><li><code>-heap</code> - 显示 Java 堆详细信息。</li><li><code>-histo</code> - 显示堆中对象的统计信息，包括类、实例数量、合计容量。<code>-histo:live</code> 只统计堆中的存活对象。</li><li><code>-permstat</code> - to print permanent generation statistics</li><li><code>-F</code> - 当-dump 没有响应时，强制生成 dump 快照</li></ul>`,5),le=e("h4",{id:"生成-heapdump-快照",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#生成-heapdump-快照","aria-hidden":"true"},"#"),a(" 生成 heapdump 快照")],-1),oe=e("p",null,"dump 堆到文件，format 指定输出格式，live 指明是活着的对象，file 指定文件名",-1),re=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[a("$ jmap -dump:live,format"),e("span",{class:"token operator"},"="),a("b,file"),e("span",{class:"token operator"},"="),a("dump.hprof "),e("span",{class:"token number"},"28920"),a(`
Dumping heap to /home/xxx/dump.hprof `),e("span",{class:"token punctuation"},".."),a(`.
Heap dump `),e("span",{class:"token function"},"file"),a(` created
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),ce=e("p",null,"dump.hprof 这个后缀是为了后续可以直接用 MAT(Memory Anlysis Tool) 等工具打开。",-1),de=e("h4",{id:"查看实例数最多的类",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#查看实例数最多的类","aria-hidden":"true"},"#"),a(" 查看实例数最多的类")],-1),ue=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[a("$ jmap "),e("span",{class:"token parameter variable"},"-histo"),a(),e("span",{class:"token number"},"29527"),a(),e("span",{class:"token operator"},"|"),a(),e("span",{class:"token function"},"head"),a(),e("span",{class:"token parameter variable"},"-n"),a(),e("span",{class:"token number"},"6"),a(`

 num     `),e("span",{class:"token comment"},"#instances         #bytes  class name"),a(`
----------------------------------------------
   `),e("span",{class:"token number"},"1"),a(":      "),e("span",{class:"token number"},"13673280"),a("     "),e("span",{class:"token number"},"1438961864"),a("  "),e("span",{class:"token punctuation"},"["),a(`C
   `),e("span",{class:"token number"},"2"),a(":       "),e("span",{class:"token number"},"1207166"),a("      "),e("span",{class:"token number"},"411277184"),a("  "),e("span",{class:"token punctuation"},"["),a(`I
   `),e("span",{class:"token number"},"3"),a(":       "),e("span",{class:"token number"},"7382322"),a("      "),e("span",{class:"token number"},"347307096"),a("  "),e("span",{class:"token punctuation"},"["),a("Ljava.lang.Object"),e("span",{class:"token punctuation"},";"),a(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),pe=e("h4",{id:"查看指定进程的堆信息",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#查看指定进程的堆信息","aria-hidden":"true"},"#"),a(" 查看指定进程的堆信息")],-1),he=e("p",null,[a("注意：使用 CMS GC 情况下，"),e("code",null,"jmap -heap PID"),a(" 的执行有可能会导致 java 进程挂起。")],-1),me=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[a("$ jmap "),e("span",{class:"token parameter variable"},"-heap"),a(),e("span",{class:"token number"},"12379"),a(`
Attaching to process ID `),e("span",{class:"token number"},"12379"),a(", please wait"),e("span",{class:"token punctuation"},".."),a(`.
Debugger attached successfully.
Server compiler detected.
JVM version is `),e("span",{class:"token number"},"17.0"),a(`-b16

using thread-local object allocation.
Parallel GC with `),e("span",{class:"token number"},"6"),a(" thread"),e("span",{class:"token punctuation"},"("),a("s"),e("span",{class:"token punctuation"},")"),a(`

Heap Configuration:
   MinHeapFreeRatio `),e("span",{class:"token operator"},"="),a(),e("span",{class:"token number"},"40"),a(`
   MaxHeapFreeRatio `),e("span",{class:"token operator"},"="),a(),e("span",{class:"token number"},"70"),a(`
   MaxHeapSize      `),e("span",{class:"token operator"},"="),a(),e("span",{class:"token number"},"83886080"),a(),e("span",{class:"token punctuation"},"("),e("span",{class:"token number"},"80"),a(".0MB"),e("span",{class:"token punctuation"},")"),a(`
   NewSize          `),e("span",{class:"token operator"},"="),a(),e("span",{class:"token number"},"1310720"),a(),e("span",{class:"token punctuation"},"("),e("span",{class:"token number"},"1"),a(".25MB"),e("span",{class:"token punctuation"},")"),a(`
   MaxNewSize       `),e("span",{class:"token operator"},"="),a(),e("span",{class:"token number"},"17592186044415"),a(` MB
   OldSize          `),e("span",{class:"token operator"},"="),a(),e("span",{class:"token number"},"5439488"),a(),e("span",{class:"token punctuation"},"("),e("span",{class:"token number"},"5"),a(".1875MB"),e("span",{class:"token punctuation"},")"),a(`
   NewRatio         `),e("span",{class:"token operator"},"="),a(),e("span",{class:"token number"},"2"),a(`
   SurvivorRatio    `),e("span",{class:"token operator"},"="),a(),e("span",{class:"token number"},"8"),a(`
   PermSize         `),e("span",{class:"token operator"},"="),a(),e("span",{class:"token number"},"20971520"),a(),e("span",{class:"token punctuation"},"("),e("span",{class:"token number"},"20"),a(".0MB"),e("span",{class:"token punctuation"},")"),a(`
   MaxPermSize      `),e("span",{class:"token operator"},"="),a(),e("span",{class:"token number"},"88080384"),a(),e("span",{class:"token punctuation"},"("),e("span",{class:"token number"},"84"),a(".0MB"),e("span",{class:"token punctuation"},")"),a(`

Heap Usage:
PS Young Generation
Eden Space:
   capacity `),e("span",{class:"token operator"},"="),a(),e("span",{class:"token number"},"9306112"),a(),e("span",{class:"token punctuation"},"("),e("span",{class:"token number"},"8"),a(".875MB"),e("span",{class:"token punctuation"},")"),a(`
   used     `),e("span",{class:"token operator"},"="),a(),e("span",{class:"token number"},"5375360"),a(),e("span",{class:"token punctuation"},"("),e("span",{class:"token number"},"5"),a(".1263427734375MB"),e("span",{class:"token punctuation"},")"),a(`
   `),e("span",{class:"token function"},"free"),a("     "),e("span",{class:"token operator"},"="),a(),e("span",{class:"token number"},"3930752"),a(),e("span",{class:"token punctuation"},"("),e("span",{class:"token number"},"3"),a(".7486572265625MB"),e("span",{class:"token punctuation"},")"),a(`
   `),e("span",{class:"token number"},"57.761608714788736"),a(`% used
From Space:
   capacity `),e("span",{class:"token operator"},"="),a(),e("span",{class:"token number"},"9306112"),a(),e("span",{class:"token punctuation"},"("),e("span",{class:"token number"},"8"),a(".875MB"),e("span",{class:"token punctuation"},")"),a(`
   used     `),e("span",{class:"token operator"},"="),a(),e("span",{class:"token number"},"3425240"),a(),e("span",{class:"token punctuation"},"("),e("span",{class:"token number"},"3"),a(".2665634155273438MB"),e("span",{class:"token punctuation"},")"),a(`
   `),e("span",{class:"token function"},"free"),a("     "),e("span",{class:"token operator"},"="),a(),e("span",{class:"token number"},"5880872"),a(),e("span",{class:"token punctuation"},"("),e("span",{class:"token number"},"5"),a(".608436584472656MB"),e("span",{class:"token punctuation"},")"),a(`
   `),e("span",{class:"token number"},"36.80634834397007"),a(`% used
To Space:
   capacity `),e("span",{class:"token operator"},"="),a(),e("span",{class:"token number"},"9306112"),a(),e("span",{class:"token punctuation"},"("),e("span",{class:"token number"},"8"),a(".875MB"),e("span",{class:"token punctuation"},")"),a(`
   used     `),e("span",{class:"token operator"},"="),a(),e("span",{class:"token number"},"0"),a(),e("span",{class:"token punctuation"},"("),e("span",{class:"token number"},"0"),a(".0MB"),e("span",{class:"token punctuation"},")"),a(`
   `),e("span",{class:"token function"},"free"),a("     "),e("span",{class:"token operator"},"="),a(),e("span",{class:"token number"},"9306112"),a(),e("span",{class:"token punctuation"},"("),e("span",{class:"token number"},"8"),a(".875MB"),e("span",{class:"token punctuation"},")"),a(`
   `),e("span",{class:"token number"},"0.0"),a(`% used
PS Old Generation
   capacity `),e("span",{class:"token operator"},"="),a(),e("span",{class:"token number"},"55967744"),a(),e("span",{class:"token punctuation"},"("),e("span",{class:"token number"},"53"),a(".375MB"),e("span",{class:"token punctuation"},")"),a(`
   used     `),e("span",{class:"token operator"},"="),a(),e("span",{class:"token number"},"48354640"),a(),e("span",{class:"token punctuation"},"("),e("span",{class:"token number"},"46"),a(".11457824707031MB"),e("span",{class:"token punctuation"},")"),a(`
   `),e("span",{class:"token function"},"free"),a("     "),e("span",{class:"token operator"},"="),a(),e("span",{class:"token number"},"7613104"),a(),e("span",{class:"token punctuation"},"("),e("span",{class:"token number"},"7"),a(".2604217529296875MB"),e("span",{class:"token punctuation"},")"),a(`
   `),e("span",{class:"token number"},"86.39733629427693"),a(`% used
PS Perm Generation
   capacity `),e("span",{class:"token operator"},"="),a(),e("span",{class:"token number"},"62062592"),a(),e("span",{class:"token punctuation"},"("),e("span",{class:"token number"},"59"),a(".1875MB"),e("span",{class:"token punctuation"},")"),a(`
   used     `),e("span",{class:"token operator"},"="),a(),e("span",{class:"token number"},"60243112"),a(),e("span",{class:"token punctuation"},"("),e("span",{class:"token number"},"57"),a(".452308654785156MB"),e("span",{class:"token punctuation"},")"),a(`
   `),e("span",{class:"token function"},"free"),a("     "),e("span",{class:"token operator"},"="),a(),e("span",{class:"token number"},"1819480"),a(),e("span",{class:"token punctuation"},"("),e("span",{class:"token number"},"1"),a(".7351913452148438MB"),e("span",{class:"token punctuation"},")"),a(`
   `),e("span",{class:"token number"},"97.06831451706046"),a(`% used
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),be=o(`<h3 id="jhat-虚拟机堆转储快照分析工具" tabindex="-1"><a class="header-anchor" href="#jhat-虚拟机堆转储快照分析工具" aria-hidden="true">#</a> jhat：虚拟机堆转储快照分析工具</h3><p><strong>jhat(JVM Heap Analysis Tool) 是虚拟机堆转储快照分析工具</strong>。jhat 与 jmap 搭配使用，用来分析 jmap 生成的 dump 文件。jhat 内置了一个微型的 HTTP/HTML 服务器，生成 dump 的分析结果后，可以在浏览器中查看。</p><p>提示：一般来说，使用 jhat 分析 dump 快照不是一个好的选择。因为 jhat 是一个耗时并且耗费硬件资源的过程。而在其他服务器上分析快照，不如使用 VisualVM、Eclipse Memory Analyzer、IBM HeapAnalyzer 等 UI 工具来分析，分析功能更加强大。</p><p>jhat 命令格式：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>jhat <span class="token punctuation">[</span>dumpfile<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>【示例】使用 jhat 分析 dump 文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>jhat eclipse.bin
Reading from eclipse.bin<span class="token punctuation">..</span>.
Dump <span class="token function">file</span> created Fri Nov <span class="token number">19</span> <span class="token number">22</span>:07:21 CST <span class="token number">2010</span>
Snapshot read, resolving<span class="token punctuation">..</span>.
Resolving <span class="token number">1225951</span> objects<span class="token punctuation">..</span>.
Chasing references, <span class="token function">expect</span> <span class="token number">245</span> dots<span class="token punctuation">..</span><span class="token punctuation">..</span>
Eliminating duplicate references<span class="token punctuation">..</span>.
Snapshot resolved.
Started HTTP server on port <span class="token number">7000</span>
Server is ready.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),ve={href:"http://localhost:7000/",target:"_blank",rel:"noopener noreferrer"},ke=e("h3",{id:"jstack-java-堆栈跟踪工具",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#jstack-java-堆栈跟踪工具","aria-hidden":"true"},"#"),a(" jstack：Java 堆栈跟踪工具")],-1),ge={href:"https://docs.oracle.com/en/java/javase/11/tools/jstack.html",target:"_blank",rel:"noopener noreferrer"},fe=o(`<p><strong>线程快照</strong>就是当前虚拟机内每一条线程正在执行的方法堆栈的集合，生成线程快照的 目的通常是定位线程出现长时间停顿的原因，如线程间死锁、死循环、请求外部资源导致的长时间挂 起等，都是导致线程长时间停顿的常见原因。</p><p><code>jstack</code> 通常会结合 <code>top -Hp pid</code> 或 <code>pidstat -p pid -t</code> 一起查看具体线程的状态，也经常用来排查一些死锁的异常。</p><p>jstack 命令格式：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>jstack <span class="token punctuation">[</span>option<span class="token punctuation">]</span> pid
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>option</code> 选项参数</p><ul><li><code>-F</code> - 当正常输出请求不被响应时，强制输出线程堆栈</li><li><code>-l</code> - 除堆栈外，显示关于锁的附加信息</li><li><code>-m</code> - 打印 java 和 jni 框架的所有栈信息</li></ul>`,6),_e=e("h4",{id:"找出某-java-进程中最耗费-cpu-的-java-线程",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#找出某-java-进程中最耗费-cpu-的-java-线程","aria-hidden":"true"},"#"),a(" 找出某 Java 进程中最耗费 CPU 的 Java 线程")],-1),je=e("p",null,"（1）找出 Java 进程",-1),xe=e("p",null,"假设应用名称为 myapp：",-1),Me=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[a("$ jps "),e("span",{class:"token operator"},"|"),a(),e("span",{class:"token function"},"grep"),a(` myapp
`),e("span",{class:"token number"},"29527"),a(` myapp.jar
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),Te=e("p",null,"得到进程 ID 为 21711",-1),Se=e("p",null,[a("（2）找出该进程内最耗费 CPU 的线程，可以使用 "),e("code",null,"ps -Lfp pid"),a(" 或者 "),e("code",null,"ps -mp pid -o THREAD, tid, time"),a(" 或者 "),e("code",null,"top -Hp pid")],-1),Je=e("figure",null,[e("img",{src:"http://static.oschina.net/uploads/space/2014/0128/170402_A57i_111708.png",alt:"img",tabindex:"0",loading:"lazy"}),e("figcaption",null,"img")],-1),Ce=e("p",null,"TIME 列就是各个 Java 线程耗费的 CPU 时间，CPU 时间最长的是线程 ID 为 21742 的线程，用",-1),we=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token builtin class-name"},"printf"),a(),e("span",{class:"token string"},[a('"%x'),e("span",{class:"token entity",title:"\\n"},"\\n"),a('"')]),a(),e("span",{class:"token number"},"21742"),a(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),ye=e("p",null,"得到 21742 的十六进制值为 54ee，下面会用到。",-1),qe=e("p",null,"（3）使用 jstack 打印线程堆栈信息",-1),De=e("p",null,"下一步终于轮到 jstack 上场了，它用来输出进程 21711 的堆栈信息，然后根据线程 ID 的十六进制值 grep，如下：",-1),Ve=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[a("$ jstack "),e("span",{class:"token number"},"21711"),a(),e("span",{class:"token operator"},"|"),a(),e("span",{class:"token function"},"grep"),a(` 54ee
`),e("span",{class:"token string"},'"PollIntervalRetrySchedulerThread"'),a(),e("span",{class:"token assign-left variable"},"prio"),e("span",{class:"token operator"},"="),e("span",{class:"token number"},"10"),a(),e("span",{class:"token assign-left variable"},"tid"),e("span",{class:"token operator"},"="),a("0x00007f950043e000 "),e("span",{class:"token assign-left variable"},"nid"),e("span",{class:"token operator"},"="),a("0x54ee "),e("span",{class:"token keyword"},"in"),a(" Object.wait"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},")"),a(),e("span",{class:"token punctuation"},"["),a("0x00007f94c6eda000"),e("span",{class:"token punctuation"},"]"),a(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),Le=e("p",null,[a("可以看到 CPU 消耗在 "),e("code",null,"PollIntervalRetrySchedulerThread"),a(" 这个类的 "),e("code",null,"Object.wait()"),a("。")],-1),Ae=e("blockquote",null,[e("p",null,[a("注：上面的例子中，默认只显示了一行信息，但很多时候我们希望查看更详细的调用栈。可以通过指定 "),e("code",null,"-A <num>"),a(" 的方式来显示行数。例如："),e("code",null,"jstack -l <pid> | grep <thread-hex-id> -A 10")])],-1),Ie=e("p",null,"（4）分析代码",-1),Be=e("p",null,"我找了下我的代码，定位到下面的代码：",-1),Ge=e("div",{class:"language-java line-numbers-mode","data-ext":"java"},[e("pre",{class:"language-java"},[e("code",null,[e("span",{class:"token comment"},"// Idle wait"),a(`
`),e("span",{class:"token function"},"getLog"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"info"),e("span",{class:"token punctuation"},"("),e("span",{class:"token string"},'"Thread ["'),a(),e("span",{class:"token operator"},"+"),a(),e("span",{class:"token function"},"getName"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},")"),a(),e("span",{class:"token operator"},"+"),a(),e("span",{class:"token string"},'"] is idle waiting..."'),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),a(`
schedulerThreadState `),e("span",{class:"token operator"},"="),a(),e("span",{class:"token class-name"},[a("PollTaskSchedulerThreadState"),e("span",{class:"token punctuation"},"."),a("IdleWaiting")]),e("span",{class:"token punctuation"},";"),a(`
`),e("span",{class:"token keyword"},"long"),a(" now "),e("span",{class:"token operator"},"="),a(),e("span",{class:"token class-name"},"System"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"currentTimeMillis"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),a(`
`),e("span",{class:"token keyword"},"long"),a(" waitTime "),e("span",{class:"token operator"},"="),a(" now "),e("span",{class:"token operator"},"+"),a(),e("span",{class:"token function"},"getIdleWaitTime"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),a(`
`),e("span",{class:"token keyword"},"long"),a(" timeUntilContinue "),e("span",{class:"token operator"},"="),a(" waitTime "),e("span",{class:"token operator"},"-"),a(" now"),e("span",{class:"token punctuation"},";"),a(`
`),e("span",{class:"token keyword"},"synchronized"),e("span",{class:"token punctuation"},"("),a("sigLock"),e("span",{class:"token punctuation"},")"),a(),e("span",{class:"token punctuation"},"{"),a(`
	`),e("span",{class:"token keyword"},"try"),a(),e("span",{class:"token punctuation"},"{"),a(`
    	`),e("span",{class:"token keyword"},"if"),e("span",{class:"token punctuation"},"("),e("span",{class:"token operator"},"!"),a("halted"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"get"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},")"),a(),e("span",{class:"token punctuation"},"{"),a(`
    		sigLock`),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"wait"),e("span",{class:"token punctuation"},"("),a("timeUntilContinue"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),a(`
    	`),e("span",{class:"token punctuation"},"}"),a(`
    `),e("span",{class:"token punctuation"},"}"),a(`
	`),e("span",{class:"token keyword"},"catch"),a(),e("span",{class:"token punctuation"},"("),e("span",{class:"token class-name"},"InterruptedException"),a(" ignore"),e("span",{class:"token punctuation"},")"),a(),e("span",{class:"token punctuation"},"{"),a(`
    `),e("span",{class:"token punctuation"},"}"),a(`
`),e("span",{class:"token punctuation"},"}"),a(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),Ee=e("p",null,[a("它是轮询任务的空闲等待代码，上面的 "),e("code",null,"sigLock.wait(timeUntilContinue)"),a(" 就对应了前面的 "),e("code",null,"Object.wait()"),a("。")],-1),Re=e("h4",{id:"生成-threaddump-文件",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#生成-threaddump-文件","aria-hidden":"true"},"#"),a(" 生成 threaddump 文件")],-1),ze=e("p",null,[a("可以使用 "),e("code",null,"jstack -l <pid> > <file-path>"),a(" 命令生成 threaddump 文件")],-1),Pe=e("p",null,"【示例】生成进程 ID 为 8841 的 Java 进程的 threaddump 文件。",-1),Oe=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[a("jstack "),e("span",{class:"token parameter variable"},"-l"),a(),e("span",{class:"token number"},"8841"),a(),e("span",{class:"token operator"},">"),a(` /home/threaddump.txt
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),Ue=o(`<h2 id="jvm-gui-工具" tabindex="-1"><a class="header-anchor" href="#jvm-gui-工具" aria-hidden="true">#</a> JVM GUI 工具</h2><p>Java 程序员免不了故障排查工作，所以经常需要使用一些 JVM 工具。</p><p>JDK 中除了附带大量的命令行工具外，还提供了几个功能集成度更高的可视化工具，用户可以使 用这些可视化工具以更加便捷的方式进行进程故障诊断和调试工作。这类工具主要包括 JConsole、JHSDB、VisualVM 和 JMC 四个。</p><h3 id="jhsdb-基于服务性代理的调试工具" tabindex="-1"><a class="header-anchor" href="#jhsdb-基于服务性代理的调试工具" aria-hidden="true">#</a> JHSDB：基于服务性代理的调试工具</h3><p>JDK 中提供了 JCMD 和 JHSDB 两个集成式的多功能工具箱。</p><p>JHSDB 是一款基于服务性代理（Serviceability Agent，SA）实现的进程外调试工具。服务性代理是 HotSpot 虚拟机中一组用于映射 Java 虚拟机运行信息的、主要基于 Java 语言（含少量 JNI 代码）实现的 API 集合。通过服务性代理的 API，可以在一个独立的 Java 虚拟 机的进程里分析其他 HotSpot 虚拟机的内部数据，或者从 HotSpot 虚拟机进程内存中 dump 出来的转储快 照里还原出它的运行状态细节。</p><h3 id="jconsole-基于-jmx-的可视化监视与管理工具" tabindex="-1"><a class="header-anchor" href="#jconsole-基于-jmx-的可视化监视与管理工具" aria-hidden="true">#</a> JConsole：基于 JMX 的可视化监视与管理工具</h3><p><strong>JConsole(Java Monitoring and Management Console) 是一种基于 JMX 的可视化监视与管理工具</strong>。它的主要功能是通过JMX的MBean（Managed Bean）对系统进行信息收集和参数动态调整。由于 MBean 可以使用代码、中间件服务器的管理控制台或所有符合 JMX 规范的软件进行访问。</p><p>注意：使用 jconsole 的前提是 Java 应用开启 JMX。</p><h4 id="开启-jmx" tabindex="-1"><a class="header-anchor" href="#开启-jmx" aria-hidden="true">#</a> 开启 JMX</h4><p>Java 应用开启 JMX 后，可以使用 <code>jconsole</code> 或 <code>jvisualvm</code> 进行监控 Java 程序的基本信息和运行情况。</p><p>开启方法是，在 java 指令后，添加以下参数：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">-</span><span class="token class-name">Dcom</span><span class="token punctuation">.</span>sun<span class="token punctuation">.</span>management<span class="token punctuation">.</span>jmxremote<span class="token operator">=</span><span class="token boolean">true</span>
<span class="token operator">-</span><span class="token class-name">Dcom</span><span class="token punctuation">.</span>sun<span class="token punctuation">.</span>management<span class="token punctuation">.</span>jmxremote<span class="token punctuation">.</span>ssl<span class="token operator">=</span><span class="token boolean">false</span>
<span class="token operator">-</span><span class="token class-name">Dcom</span><span class="token punctuation">.</span>sun<span class="token punctuation">.</span>management<span class="token punctuation">.</span>jmxremote<span class="token punctuation">.</span>authenticate<span class="token operator">=</span><span class="token boolean">false</span>
<span class="token operator">-</span><span class="token class-name">Djava</span><span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>server<span class="token punctuation">.</span>hostname<span class="token operator">=</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span>
<span class="token operator">-</span><span class="token class-name">Dcom</span><span class="token punctuation">.</span>sun<span class="token punctuation">.</span>management<span class="token punctuation">.</span>jmxremote<span class="token punctuation">.</span>port<span class="token operator">=</span><span class="token number">18888</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>-Djava.rmi.server.hostname</code> - 指定 Java 程序运行的服务器</li><li><code>-Dcom.sun.management.jmxremote.port</code> - 指定 JMX 服务监听端口</li></ul><h4 id="连接-jconsole" tabindex="-1"><a class="header-anchor" href="#连接-jconsole" aria-hidden="true">#</a> 连接 jconsole</h4><p>如果是本地 Java 进程，jconsole 可以直接绑定连接。</p><p>如果是远程 Java 进程，需要连接 Java 进程的 JMX 端口。</p><figure><img src="https://docs.oracle.com/javase/8/docs/technotes/guides/management/figures/connectadv.gif" alt="Connecting to a JMX Agent Using the JMX Service URL" tabindex="0" loading="lazy"><figcaption>Connecting to a JMX Agent Using the JMX Service URL</figcaption></figure><h4 id="jconsole-界面" tabindex="-1"><a class="header-anchor" href="#jconsole-界面" aria-hidden="true">#</a> jconsole 界面</h4><p>进入 jconsole 应用后，可以看到以下 tab 页面。</p><ul><li><code>概述</code> - 显示有关 Java VM 和监视值的概述信息。</li><li><code>内存</code> - 显示有关内存使用的信息。内存页相当于可视化的 <code>jstat</code> 命令。</li><li><code>线程</code> - 显示有关线程使用的信息。</li><li><code>类</code> - 显示有关类加载的信息。</li><li><code>VM 摘要</code> - 显示有关 Java VM 的信息。</li><li><code>MBean</code> - 显示有关 MBean 的信息。</li></ul><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20200730151422.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="visualvm" tabindex="-1"><a class="header-anchor" href="#visualvm" aria-hidden="true">#</a> VisualVM</h3><blockquote><p>jvisualvm 是 JDK 自带的 GUI 工具。<strong>jvisualvm(All-In-One Java Troubleshooting Tool) 是多合一故障处理工具</strong>。它支持运行监视、故障处理、性能分析等功能。</p></blockquote><p>个人觉得 jvisualvm 比 jconsole 好用。</p><h4 id="jvisualvm-概述页面" tabindex="-1"><a class="header-anchor" href="#jvisualvm-概述页面" aria-hidden="true">#</a> jvisualvm 概述页面</h4><p>jvisualvm 概述页面可以查看当前 Java 进程的基本信息，如：JDK 版本、Java 进程、JVM 参数等。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20200730150147.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="jvisualvm-监控页面" tabindex="-1"><a class="header-anchor" href="#jvisualvm-监控页面" aria-hidden="true">#</a> jvisualvm 监控页面</h4><p>在 jvisualvm 监控页面，可以看到 Java 进程的 CPU、内存、类加载、线程的实时变化。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20200730150254.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="jvisualvm-线程页面" tabindex="-1"><a class="header-anchor" href="#jvisualvm-线程页面" aria-hidden="true">#</a> jvisualvm 线程页面</h4><p>jvisualvm 线程页面展示了当前的线程状态。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20200730150416.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>jvisualvm 还可以生成线程 Dump 文件，帮助进一步分析线程栈信息。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20200730150830.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="jvisualvm-抽样器页面" tabindex="-1"><a class="header-anchor" href="#jvisualvm-抽样器页面" aria-hidden="true">#</a> jvisualvm 抽样器页面</h4><p>jvisualvm 可以对 CPU、内存进行抽样，帮助我们进行性能分析。</p><h3 id="mat" tabindex="-1"><a class="header-anchor" href="#mat" aria-hidden="true">#</a> MAT</h3>`,39),He={href:"https://www.eclipse.org/mat/",target:"_blank",rel:"noopener noreferrer"},$e=e("p",null,[a("MAT 本身也能够获取堆的二进制快照。该功能将借助 "),e("code",null,"jps"),a(" 列出当前正在运行的 Java 进程，以供选择并获取快照。由于 "),e("code",null,"jps"),a(" 会将自己列入其中，因此你会在列表中发现一个已经结束运行的 "),e("code",null,"jps"),a(" 进程。")],-1),Ne={href:"http://www.eclipse.org/mat/downloads.php",target:"_blank",rel:"noopener noreferrer"},Fe=o(`<h4 id="mat-配置" tabindex="-1"><a class="header-anchor" href="#mat-配置" aria-hidden="true">#</a> MAT 配置</h4><p>MAT 解压后，安装目录下有个 <code>MemoryAnalyzer.ini</code> 文件。</p><p><code>MemoryAnalyzer.ini</code> 中有个重要的参数 <code>Xmx</code> 表示最大内存，默认为：<code>-vmargs -Xmx1024m</code></p><p>如果试图用 MAT 导入的 dump 文件超过 1024 M，会报错：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>An internal error occurred during: <span class="token string">&quot;Parsing heap dump from XXX&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时，可以适当调整 <code>Xmx</code> 大小。如果设置的 <code>Xmx</code> 数值过大，本机内存不足以支撑，启动 MAT 会报错：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Failed to create the Java Virtual Machine
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="mat-分析" tabindex="-1"><a class="header-anchor" href="#mat-分析" aria-hidden="true">#</a> MAT 分析</h4><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20200308092746.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>点击 Leak Suspects 可以进入内存泄漏页面。</p><p>（1）首先，可以查看饼图了解内存的整体消耗情况</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20200308150556.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>（2）缩小范围，寻找问题疑似点</p><figure><img src="https://img-blog.csdn.net/20160223202154818" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>可以点击进入详情页面，在详情页面 Shortest Paths To the Accumulation Point 表示 GC root 到内存消耗聚集点的最短路径，如果某个内存消耗聚集点有路径到达 GC root，则该内存消耗聚集点不会被当做垃圾被回收。</p><p>为了找到内存泄露，我获取了两个堆转储文件，两个文件获取时间间隔是一天（因为内存只是小幅度增长，短时间很难发现问题）。对比两个文件的对象，通过对比后的结果可以很方便定位内存泄露。</p><p>MAT 同时打开两个堆转储文件，分别打开 Histogram，如下图。在下图中方框 1 按钮用于对比两个 Histogram，对比后在方框 2 处选择 Group By package，然后对比各对象的变化。不难发现 heap3.hprof 比 heap6.hprof 少了 64 个 eventInfo 对象，如果对代码比较熟悉的话想必这样一个结果是能够给程序员一定的启示的。而我也是根据这个启示差找到了最终内存泄露的位置。<br><img src="https://img-blog.csdn.net/20160223203226362" alt="img" loading="lazy"></p><h3 id="jprofile" tabindex="-1"><a class="header-anchor" href="#jprofile" aria-hidden="true">#</a> JProfile</h3>`,18),We={href:"https://www.ej-technologies.com/products/jprofiler/overview.html",target:"_blank",rel:"noopener noreferrer"},Ke=e("p",null,"由于它是收费的，所以我本人使用较少。但是，它确实功能强大，且方便使用，还可以和 Intellij Idea 集成。",-1),Xe=e("h3",{id:"arthas",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#arthas","aria-hidden":"true"},"#"),a(" Arthas")],-1),Qe={href:"https://github.com/alibaba/arthas",target:"_blank",rel:"noopener noreferrer"},Ye=e("p",null,[a("Arthas 支持 JDK 6+，支持 Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 "),e("code",null,"Tab"),a(" 自动补全功能，进一步方便进行问题的定位和诊断。")],-1),Ze=e("figure",null,[e("img",{src:"https://raw.githubusercontent.com/dunwu/images/master/snap/20200730145030.png",alt:"img",tabindex:"0",loading:"lazy"}),e("figcaption",null,"img")],-1),ea=e("h4",{id:"arthas-基础命令",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#arthas-基础命令","aria-hidden":"true"},"#"),a(" Arthas 基础命令")],-1),aa=e("li",null,"help——查看命令帮助信息",-1),na={href:"https://alibaba.github.io/arthas/cat.html",target:"_blank",rel:"noopener noreferrer"},sa={href:"https://alibaba.github.io/arthas/echo.html",target:"_blank",rel:"noopener noreferrer"},ta={href:"https://alibaba.github.io/arthas/grep.html",target:"_blank",rel:"noopener noreferrer"},ia={href:"https://alibaba.github.io/arthas/tee.html",target:"_blank",rel:"noopener noreferrer"},la={href:"https://alibaba.github.io/arthas/pwd.html",target:"_blank",rel:"noopener noreferrer"},oa=e("li",null,"cls——清空当前屏幕区域",-1),ra=e("li",null,"session——查看当前会话的信息",-1),ca={href:"https://alibaba.github.io/arthas/reset.html",target:"_blank",rel:"noopener noreferrer"},da=e("li",null,"version——输出当前目标 Java 进程所加载的 Arthas 版本号",-1),ua=e("li",null,"history——打印命令历史",-1),pa=e("li",null,"quit——退出当前 Arthas 客户端，其他 Arthas 客户端不受影响",-1),ha=e("li",null,"stop——关闭 Arthas 服务端，所有 Arthas 客户端全部退出",-1),ma={href:"https://alibaba.github.io/arthas/keymap.html",target:"_blank",rel:"noopener noreferrer"},ba=e("h4",{id:"arthas-jvm-相关命令",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#arthas-jvm-相关命令","aria-hidden":"true"},"#"),a(" Arthas jvm 相关命令")],-1),va={href:"https://alibaba.github.io/arthas/dashboard.html",target:"_blank",rel:"noopener noreferrer"},ka={href:"https://alibaba.github.io/arthas/thread.html",target:"_blank",rel:"noopener noreferrer"},ga={href:"https://alibaba.github.io/arthas/jvm.html",target:"_blank",rel:"noopener noreferrer"},fa={href:"https://alibaba.github.io/arthas/sysprop.html",target:"_blank",rel:"noopener noreferrer"},_a={href:"https://alibaba.github.io/arthas/sysenv.html",target:"_blank",rel:"noopener noreferrer"},ja={href:"https://alibaba.github.io/arthas/vmoption.html",target:"_blank",rel:"noopener noreferrer"},xa={href:"https://alibaba.github.io/arthas/perfcounter.html",target:"_blank",rel:"noopener noreferrer"},Ma={href:"https://alibaba.github.io/arthas/logger.html",target:"_blank",rel:"noopener noreferrer"},Ta={href:"https://alibaba.github.io/arthas/getstatic.html",target:"_blank",rel:"noopener noreferrer"},Sa={href:"https://alibaba.github.io/arthas/ognl.html",target:"_blank",rel:"noopener noreferrer"},Ja={href:"https://alibaba.github.io/arthas/mbean.html",target:"_blank",rel:"noopener noreferrer"},Ca={href:"https://alibaba.github.io/arthas/heapdump.html",target:"_blank",rel:"noopener noreferrer"},wa=e("h4",{id:"arthas-class-classloader-相关命令",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#arthas-class-classloader-相关命令","aria-hidden":"true"},"#"),a(" Arthas class/classloader 相关命令")],-1),ya={href:"https://alibaba.github.io/arthas/sc.html",target:"_blank",rel:"noopener noreferrer"},qa={href:"https://alibaba.github.io/arthas/sm.html",target:"_blank",rel:"noopener noreferrer"},Da={href:"https://alibaba.github.io/arthas/jad.html",target:"_blank",rel:"noopener noreferrer"},Va={href:"https://alibaba.github.io/arthas/mc.html",target:"_blank",rel:"noopener noreferrer"},La=e("code",null,".java",-1),Aa=e("code",null,".class",-1),Ia={href:"https://alibaba.github.io/arthas/redefine.html",target:"_blank",rel:"noopener noreferrer"},Ba=e("code",null,".class",-1),Ga={href:"https://alibaba.github.io/arthas/dump.html",target:"_blank",rel:"noopener noreferrer"},Ea={href:"https://alibaba.github.io/arthas/classloader.html",target:"_blank",rel:"noopener noreferrer"},Ra=e("h4",{id:"arthas-monitor-watch-trace-相关命令",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#arthas-monitor-watch-trace-相关命令","aria-hidden":"true"},"#"),a(" Arthas monitor/watch/trace 相关命令")],-1),za=e("blockquote",null,[e("p",null,[a("请注意，这些命令，都通过字节码增强技术来实现的，会在指定类的方法中插入一些切面来实现数据统计和观测，因此在线上、预发使用时，请尽量明确需要观测的类、方法以及条件，诊断结束要执行 "),e("code",null,"stop"),a(" 或将增强过的类执行 "),e("code",null,"reset"),a(" 命令。")])],-1),Pa={href:"https://alibaba.github.io/arthas/monitor.html",target:"_blank",rel:"noopener noreferrer"},Oa={href:"https://alibaba.github.io/arthas/watch.html",target:"_blank",rel:"noopener noreferrer"},Ua={href:"https://alibaba.github.io/arthas/trace.html",target:"_blank",rel:"noopener noreferrer"},Ha={href:"https://alibaba.github.io/arthas/stack.html",target:"_blank",rel:"noopener noreferrer"},$a={href:"https://alibaba.github.io/arthas/tt.html",target:"_blank",rel:"noopener noreferrer"},Na=o(`<h2 id="thread-dump-文件" tabindex="-1"><a class="header-anchor" href="#thread-dump-文件" aria-hidden="true">#</a> thread dump 文件</h2><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20200730112431.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>一个 Thread Dump 文件大致可以分为五个部分。</p><h3 id="第一部分-full-thread-dump-identifier" tabindex="-1"><a class="header-anchor" href="#第一部分-full-thread-dump-identifier" aria-hidden="true">#</a> 第一部分：Full thread dump identifier</h3><p>这一部分是内容最开始的部分，展示了快照文件的生成时间和 JVM 的版本信息。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2017-10-19 10:46:44
Full thread dump Java HotSpot(TM) 64-Bit Server VM (24.79-b02 mixed mode):
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="第二部分-java-ee-middleware-third-party-custom-application-threads" tabindex="-1"><a class="header-anchor" href="#第二部分-java-ee-middleware-third-party-custom-application-threads" aria-hidden="true">#</a> 第二部分：Java EE middleware, third party &amp; custom application Threads</h3><p>这是整个文件的核心部分，里面展示了 JavaEE 容器（如 tomcat、resin 等）、自己的程序中所使用的线程信息。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot;resin-22129&quot; daemon prio=10 tid=0x00007fbe5c34e000 nid=0x4cb1 waiting on condition [0x00007fbe4ff7c000]
   java.lang.Thread.State: WAITING (parking)
    at sun.misc.Unsafe.park(Native Method)
    at java.util.concurrent.locks.LockSupport.park(LockSupport.java:315)
    at com.caucho.env.thread2.ResinThread2.park(ResinThread2.java:196)
    at com.caucho.env.thread2.ResinThread2.runTasks(ResinThread2.java:147)
    at com.caucho.env.thread2.ResinThread2.run(ResinThread2.java:118)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数说明：</p><ul><li><code>&quot;resin-22129&quot;</code> **线程名称：**如果使用 java.lang.Thread 类生成一个线程的时候，线程名称为 Thread-（数字） 的形式，这里是 resin 生成的线程；</li><li><code>daemon</code> **线程类型：**线程分为守护线程 (daemon) 和非守护线程 (non-daemon) 两种，通常都是守护线程；</li><li><code>prio=10</code> **线程优先级：**默认为 5，数字越大优先级越高；</li><li><code>tid=0x00007fbe5c34e000</code> **JVM 线程的 id：**JVM 内部线程的唯一标识，通过 java.lang.Thread.getId() 获取，通常用自增的方式实现；</li><li><code>nid=0x4cb1</code> **系统线程 id：**对应的系统线程 id（Native Thread ID)，可以通过 top 命令进行查看，现场 id 是十六进制的形式；</li><li><code>waiting on condition</code> **系统线程状态：**这里是系统的线程状态；</li><li><code>[0x00007fbe4ff7c000]</code> **起始栈地址：**线程堆栈调用的其实内存地址；</li><li><code>java.lang.Thread.State: WAITING (parking)</code> **JVM 线程状态：**这里标明了线程在代码级别的状态。</li><li>**线程调用栈信息：**下面就是当前线程调用的详细栈信息，用于代码的分析。堆栈信息应该从下向上解读，因为程序调用的顺序是从下向上的。</li></ul><h3 id="第三部分-hotspot-vm-thread" tabindex="-1"><a class="header-anchor" href="#第三部分-hotspot-vm-thread" aria-hidden="true">#</a> 第三部分：HotSpot VM Thread</h3><p>这一部分展示了 JVM 内部线程的信息，用于执行内部的原生操作。下面常见的集中内置线程：</p><h4 id="attach-listener" tabindex="-1"><a class="header-anchor" href="#attach-listener" aria-hidden="true">#</a> &quot;Attach Listener&quot;</h4><p>该线程负责接收外部命令，执行该命令并把结果返回给调用者，此种类型的线程通常在桌面程序中出现。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot;Attach Listener&quot; daemon prio=5 tid=0x00007fc6b6800800 nid=0x3b07 waiting on condition [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="destroyjavavm" tabindex="-1"><a class="header-anchor" href="#destroyjavavm" aria-hidden="true">#</a> &quot;DestroyJavaVM&quot;</h4><p>执行 <code>main()</code> 的线程在执行完之后调用 JNI 中的 <code>jni_DestroyJavaVM()</code> 方法会唤起 <code>DestroyJavaVM</code> 线程，处于等待状态，等待其它线程（java 线程和 native 线程）退出时通知它卸载 JVM。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot;DestroyJavaVM&quot; prio=5 tid=0x00007fc6b3001000 nid=0x1903 waiting on condition [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="service-thread" tabindex="-1"><a class="header-anchor" href="#service-thread" aria-hidden="true">#</a> &quot;Service Thread&quot;</h4><p>用于启动服务的线程</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot;Service Thread&quot; daemon prio=10 tid=0x00007fbea81b3000 nid=0x5f2 runnable [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="compilerthread" tabindex="-1"><a class="header-anchor" href="#compilerthread" aria-hidden="true">#</a> &quot;CompilerThread&quot;</h4><p>用来调用 JITing，实时编译装卸类。通常 JVM 会启动多个线程来处理这部分工作，线程名称后面的数字也会累加，比如 CompilerThread1。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot;C2 CompilerThread1&quot; daemon prio=10 tid=0x00007fbea814b000 nid=0x5f1 waiting on condition [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE

&quot;C2 CompilerThread0&quot; daemon prio=10 tid=0x00007fbea8142000 nid=0x5f0 waiting on condition [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="signal-dispatcher" tabindex="-1"><a class="header-anchor" href="#signal-dispatcher" aria-hidden="true">#</a> &quot;Signal Dispatcher&quot;</h4><p>Attach Listener 线程的职责是接收外部 jvm 命令，当命令接收成功后，会交给 signal dispather 线程去进行分发到各个不同的模块处理命令，并且返回处理结果。<br> signal dispather 线程也是在第一次接收外部 jvm 命令时，进行初始化工作。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot;Signal Dispatcher&quot; daemon prio=10 tid=0x00007fbea81bf800 nid=0x5ef runnable [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="finalizer" tabindex="-1"><a class="header-anchor" href="#finalizer" aria-hidden="true">#</a> &quot;Finalizer&quot;</h4><p>这个线程也是在 main 线程之后创建的，其优先级为 10，主要用于在垃圾收集前，调用对象的 <code>finalize()</code> 方法；关于 Finalizer 线程的几点：</p><ul><li>只有当开始一轮垃圾收集时，才会开始调用 finalize() 方法；因此并不是所有对象的 finalize() 方法都会被执行；</li><li>该线程也是 daemon 线程，因此如果虚拟机中没有其他非 daemon 线程，不管该线程有没有执行完 finalize() 方法，JVM 也会退出；</li><li>JVM 在垃圾收集时会将失去引用的对象包装成 Finalizer 对象（Reference 的实现），并放入 ReferenceQueue，由 Finalizer 线程来处理；最后将该 Finalizer 对象的引用置为 null，由垃圾收集器来回收；</li></ul><p>JVM 为什么要单独用一个线程来执行 <code>finalize()</code> 方法呢？</p><p>如果 JVM 的垃圾收集线程自己来做，很有可能由于在 finalize() 方法中误操作导致 GC 线程停止或不可控，这对 GC 线程来说是一种灾难。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot;Finalizer&quot; daemon prio=10 tid=0x00007fbea80da000 nid=0x5eb in Object.wait() [0x00007fbeac044000]
   java.lang.Thread.State: WAITING (on object monitor)
    at java.lang.Object.wait(Native Method)
    at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:135)
    - locked &lt;0x00000006d173c1a8&gt; (a java.lang.ref.ReferenceQueue$Lock)
    at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:151)
    at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:209)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="reference-handler" tabindex="-1"><a class="header-anchor" href="#reference-handler" aria-hidden="true">#</a> &quot;Reference Handler&quot;</h4><p>JVM 在创建 main 线程后就创建 Reference Handler 线程，其优先级最高，为 10，它主要用于处理引用对象本身（软引用、弱引用、虚引用）的垃圾回收问题 。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot;Reference Handler&quot; daemon prio=10 tid=0x00007fbea80d8000 nid=0x5ea in Object.wait() [0x00007fbeac085000]
   java.lang.Thread.State: WAITING (on object monitor)
    at java.lang.Object.wait(Native Method)
    at java.lang.Object.wait(Object.java:503)
    at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:133)
    - locked &lt;0x00000006d173c1f0&gt; (a java.lang.ref.Reference$Lock)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="vm-thread" tabindex="-1"><a class="header-anchor" href="#vm-thread" aria-hidden="true">#</a> &quot;VM Thread&quot;</h4><p>JVM 中线程的母体，根据 HotSpot 源码中关于 vmThread.hpp 里面的注释，它是一个单例的对象（最原始的线程）会产生或触发所有其他的线程，这个单例的 VM 线程是会被其他线程所使用来做一些 VM 操作（如清扫垃圾等）。<br> 在 VM Thread 的结构体里有一个 VMOperationQueue 列队，所有的 VM 线程操作 (vm_operation) 都会被保存到这个列队当中，VMThread 本身就是一个线程，它的线程负责执行一个自轮询的 loop 函数（具体可以参考：VMThread.cpp 里面的 void VMThread::loop()) ，该 loop 函数从 VMOperationQueue 列队中按照优先级取出当前需要执行的操作对象 (VM_Operation)，并且调用 VM_Operation-&gt;evaluate 函数去执行该操作类型本身的业务逻辑。<br> VM 操作类型被定义在 vm_operations.hpp 文件内，列举几个：ThreadStop、ThreadDump、PrintThreads、GenCollectFull、GenCollectFullConcurrent、CMS_Initial_Mark、CMS_Final_Remark….. 有兴趣的同学，可以自己去查看源文件。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot;VM Thread&quot; prio=10 tid=0x00007fbea80d3800 nid=0x5e9 runnable
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="第四部分-hotspot-gc-thread" tabindex="-1"><a class="header-anchor" href="#第四部分-hotspot-gc-thread" aria-hidden="true">#</a> 第四部分：HotSpot GC Thread</h3><p>JVM 中用于进行资源回收的线程，包括以下几种类型的线程：</p><h4 id="vm-periodic-task-thread" tabindex="-1"><a class="header-anchor" href="#vm-periodic-task-thread" aria-hidden="true">#</a> &quot;VM Periodic Task Thread&quot;</h4><p>该线程是 JVM 周期性任务调度的线程，它由 WatcherThread 创建，是一个单例对象。该线程在 JVM 内使用得比较频繁，比如：定期的内存监控、JVM 运行状况监控。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot;VM Periodic Task Thread&quot; prio=10 tid=0x00007fbea82ae800 nid=0x5fa waiting on condition
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以使用 jstat 命令查看 GC 的情况，比如查看某个进程没有存活必要的引用可以使用命令 <code>jstat -gcutil 250 7</code> 参数中 pid 是进程 id，后面的 250 和 7 表示每 250 毫秒打印一次，总共打印 7 次。<br> 这对于防止因为应用代码中直接使用 native 库或者第三方的一些监控工具的内存泄漏有非常大的帮助。</p><h4 id="gc-task-thread-0-parallelgc" tabindex="-1"><a class="header-anchor" href="#gc-task-thread-0-parallelgc" aria-hidden="true">#</a> &quot;GC task thread#0 (ParallelGC)&quot;</h4><p>垃圾回收线程，该线程会负责进行垃圾回收。通常 JVM 会启动多个线程来处理这个工作，线程名称中#后面的数字也会累加。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot;GC task thread#0 (ParallelGC)&quot; prio=5 tid=0x00007fc6b480d000 nid=0x2503 runnable

&quot;GC task thread#1 (ParallelGC)&quot; prio=5 tid=0x00007fc6b2812000 nid=0x2703 runnable

&quot;GC task thread#2 (ParallelGC)&quot; prio=5 tid=0x00007fc6b2812800 nid=0x2903 runnable

&quot;GC task thread#3 (ParallelGC)&quot; prio=5 tid=0x00007fc6b2813000 nid=0x2b03 runnable
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果在 JVM 中增加了 <code>-XX:+UseConcMarkSweepGC</code> 参数将会启用 CMS （Concurrent Mark-Sweep）GC Thread 方式，以下是该模式下的线程类型：</p><h4 id="gang-worker-0-parallel-gc-threads" tabindex="-1"><a class="header-anchor" href="#gang-worker-0-parallel-gc-threads" aria-hidden="true">#</a> &quot;Gang worker#0 (Parallel GC Threads)&quot;</h4><p>原来垃圾回收线程 GC task thread#0 (ParallelGC) 被替换为 Gang worker#0 (Parallel GC Threads)。Gang worker 是 JVM 用于年轻代垃圾回收 (minor gc) 的线程。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot;Gang worker#0 (Parallel GC Threads)&quot; prio=10 tid=0x00007fbea801b800 nid=0x5e4 runnable

&quot;Gang worker#1 (Parallel GC Threads)&quot; prio=10 tid=0x00007fbea801d800 nid=0x5e7 runnable
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="concurrent-mark-sweep-gc-thread" tabindex="-1"><a class="header-anchor" href="#concurrent-mark-sweep-gc-thread" aria-hidden="true">#</a> &quot;Concurrent Mark-Sweep GC Thread&quot;</h4><p>并发标记清除垃圾回收器（就是通常所说的 CMS GC）线程， 该线程主要针对于年老代垃圾回收。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot;Concurrent Mark-Sweep GC Thread&quot; prio=10 tid=0x00007fbea8073800 nid=0x5e8 runnable
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="surrogate-locker-thread-concurrent-gc" tabindex="-1"><a class="header-anchor" href="#surrogate-locker-thread-concurrent-gc" aria-hidden="true">#</a> &quot;Surrogate Locker Thread (Concurrent GC)&quot;</h4><p>此线程主要配合 CMS 垃圾回收器来使用，是一个守护线程，主要负责处理 GC 过程中 Java 层的 Reference（指软引用、弱引用等等）与 jvm 内部层面的对象状态同步。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot;Surrogate Locker Thread (Concurrent GC)&quot; daemon prio=10 tid=0x00007fbea8158800 nid=0x5ee waiting on condition [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里以 WeakHashMap 为例进行说明，首先是一个关键点：</p><ul><li>WeakHashMap 和 HashMap 一样，内部有一个 Entry[] 数组；</li><li>WeakHashMap 的 Entry 比较特殊，它的继承体系结构为 Entry-&gt;WeakReference-&gt;Reference;</li><li>Reference 里面有一个全局锁对象：Lock，它也被称为 pending_lock，注意：它是静态对象；</li><li>Reference 里面有一个静态变量：pending；</li><li>Reference 里面有一个静态内部类：ReferenceHandler 的线程，它在 static 块里面被初始化并且启动，启动完成后处于 wait 状态，它在一个 Lock 同步锁模块中等待；</li><li>WeakHashMap 里面还实例化了一个 ReferenceQueue 列队</li></ul><p>假设，WeakHashMap 对象里面已经保存了很多对象的引用，JVM 在进行 CMS GC 的时候会创建一个 ConcurrentMarkSweepThread（简称 CMST）线程去进行 GC。ConcurrentMarkSweepThread 线程被创建的同时会创建一个 SurrogateLockerThread（简称 SLT）线程并且启动它，SLT 启动之后，处于等待阶段。<br> CMST 开始 GC 时，会发一个消息给 SLT 让它去获取 Java 层 Reference 对象的全局锁：Lock。直到 CMS GC 完毕之后，JVM 会将 WeakHashMap 中所有被回收的对象所属的 WeakReference 容器对象放入到 Reference 的 pending 属性当中（每次 GC 完毕之后，pending 属性基本上都不会为 null 了），然后通知 SLT 释放并且 notify 全局锁：Lock。此时激活了 ReferenceHandler 线程的 run 方法，使其脱离 wait 状态，开始工作了。<br> ReferenceHandler 这个线程会将 pending 中的所有 WeakReference 对象都移动到它们各自的列队当中，比如当前这个 WeakReference 属于某个 WeakHashMap 对象，那么它就会被放入相应的 ReferenceQueue 列队里面（该列队是链表结构）。 当我们下次从 WeakHashMap 对象里面 get、put 数据或者调用 size 方法的时候，WeakHashMap 就会将 ReferenceQueue 列队中的 WeakReference 依依 poll 出来去和 Entry[] 数据做比较，如果发现相同的，则说明这个 Entry 所保存的对象已经被 GC 掉了，那么将 Entry[] 内的 Entry 对象剔除掉。</p><h3 id="第五部分-jni-global-references-count" tabindex="-1"><a class="header-anchor" href="#第五部分-jni-global-references-count" aria-hidden="true">#</a> 第五部分：JNI global references count</h3><p>这一部分主要回收那些在 native 代码上被引用，但在 java 代码中却没有存活必要的引用，对于防止因为应用代码中直接使用 native 库或第三方的一些监控工具的内存泄漏有非常大的帮助。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>JNI global references: 830
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="系统线程状态" tabindex="-1"><a class="header-anchor" href="#系统线程状态" aria-hidden="true">#</a> 系统线程状态</h2><p>系统线程有如下状态：</p><h3 id="deadlock" tabindex="-1"><a class="header-anchor" href="#deadlock" aria-hidden="true">#</a> deadlock</h3><p>死锁线程，一般指多个线程调用期间进入了相互资源占用，导致一直等待无法释放的情况。</p><p>【示例】deadlock 示例</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot;DEADLOCK_TEST-1&quot; daemon prio=6 tid=0x000000000690f800 nid=0x1820 waiting for monitor entry [0x000000000805f000]
   java.lang.Thread.State: BLOCKED (on object monitor)
                at com.nbp.theplatform.threaddump.ThreadDeadLockState$DeadlockThread.goMonitorDeadlock(ThreadDeadLockState.java:197)
                - waiting to lock &lt;0x00000007d58f5e60&gt; (a com.nbp.theplatform.threaddump.ThreadDeadLockState$Monitor)
                at com.nbp.theplatform.threaddump.ThreadDeadLockState$DeadlockThread.monitorOurLock(ThreadDeadLockState.java:182)
                - locked &lt;0x00000007d58f5e48&gt; (a com.nbp.theplatform.threaddump.ThreadDeadLockState$Monitor)
                at com.nbp.theplatform.threaddump.ThreadDeadLockState$DeadlockThread.run(ThreadDeadLockState.java:135)

   Locked ownable synchronizers:
                - None

&quot;DEADLOCK_TEST-2&quot; daemon prio=6 tid=0x0000000006858800 nid=0x17b8 waiting for monitor entry [0x000000000815f000]
   java.lang.Thread.State: BLOCKED (on object monitor)
                at com.nbp.theplatform.threaddump.ThreadDeadLockState$DeadlockThread.goMonitorDeadlock(ThreadDeadLockState.java:197)
                - waiting to lock &lt;0x00000007d58f5e78&gt; (a com.nbp.theplatform.threaddump.ThreadDeadLockState$Monitor)
                at com.nbp.theplatform.threaddump.ThreadDeadLockState$DeadlockThread.monitorOurLock(ThreadDeadLockState.java:182)
                - locked &lt;0x00000007d58f5e60&gt; (a com.nbp.theplatform.threaddump.ThreadDeadLockState$Monitor)
                at com.nbp.theplatform.threaddump.ThreadDeadLockState$DeadlockThread.run(ThreadDeadLockState.java:135)

   Locked ownable synchronizers:
                - None

&quot;DEADLOCK_TEST-3&quot; daemon prio=6 tid=0x0000000006859000 nid=0x25dc waiting for monitor entry [0x000000000825f000]
   java.lang.Thread.State: BLOCKED (on object monitor)
                at com.nbp.theplatform.threaddump.ThreadDeadLockState$DeadlockThread.goMonitorDeadlock(ThreadDeadLockState.java:197)
                - waiting to lock &lt;0x00000007d58f5e48&gt; (a com.nbp.theplatform.threaddump.ThreadDeadLockState$Monitor)
                at com.nbp.theplatform.threaddump.ThreadDeadLockState$DeadlockThread.monitorOurLock(ThreadDeadLockState.java:182)
                - locked &lt;0x00000007d58f5e78&gt; (a com.nbp.theplatform.threaddump.ThreadDeadLockState$Monitor)
                at com.nbp.theplatform.threaddump.ThreadDeadLockState$DeadlockThread.run(ThreadDeadLockState.java:135)

   Locked ownable synchronizers:
                - None
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="runnable" tabindex="-1"><a class="header-anchor" href="#runnable" aria-hidden="true">#</a> runnable</h3><p>一般指该线程正在执行状态中，该线程占用了资源，正在处理某个操作，如通过 SQL 语句查询数据库、对某个文件进行写入等。</p><h3 id="blocked" tabindex="-1"><a class="header-anchor" href="#blocked" aria-hidden="true">#</a> blocked</h3><p>线程正处于阻塞状态，指当前线程执行过程中，所需要的资源长时间等待却一直未能获取到，被容器的线程管理器标识为阻塞状态，可以理解为等待资源超时的线程。</p><p>【示例】blocked 示例</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot;BLOCKED_TEST pool-1-thread-2&quot; prio=6 tid=0x0000000007673800 nid=0x260c waiting for monitor entry [0x0000000008abf000]
   java.lang.Thread.State: BLOCKED (on object monitor)
                at com.nbp.theplatform.threaddump.ThreadBlockedState.monitorLock(ThreadBlockedState.java:43)
                - waiting to lock &lt;0x0000000780a000b0&gt; (a com.nbp.theplatform.threaddump.ThreadBlockedState)
                at com.nbp.theplatform.threaddump.ThreadBlockedState$2.run(ThreadBlockedState.java:26)
                at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
                at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
                at java.lang.Thread.run(Thread.java:662)
   Locked ownable synchronizers:
                - &lt;0x0000000780b0c6a0&gt; (a java.util.concurrent.locks.ReentrantLock$NonfairSync)
&quot;BLOCKED_TEST pool-1-thread-3&quot; prio=6 tid=0x00000000074f5800 nid=0x1994 waiting for monitor entry [0x0000000008bbf000]
   java.lang.Thread.State: BLOCKED (on object monitor)
                at com.nbp.theplatform.threaddump.ThreadBlockedState.monitorLock(ThreadBlockedState.java:42)
                - waiting to lock &lt;0x0000000780a000b0&gt; (a com.nbp.theplatform.threaddump.ThreadBlockedState)
                at com.nbp.theplatform.threaddump.ThreadBlockedState$3.run(ThreadBlockedState.java:34)
                at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886
                at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
                at java.lang.Thread.run(Thread.java:662)
   Locked ownable synchronizers:
                - &lt;0x0000000780b0e1b8&gt; (a java.util.concurrent.locks.ReentrantLock$NonfairSync)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="waiting-on-condition" tabindex="-1"><a class="header-anchor" href="#waiting-on-condition" aria-hidden="true">#</a> waiting on condition</h3><p>线程正处于等待资源或等待某个条件的发生，具体的原因需要结合下面堆栈信息进行分析。</p><p>（1）如果堆栈信息明确是应用代码，则证明该线程正在等待资源，一般是大量读取某种资源且该资源采用了资源锁的情况下，线程进入等待状态，等待资源的读取，或者正在等待其他线程的执行等。</p><p>（2）如果发现有大量的线程都正处于这种状态，并且堆栈信息中得知正等待网络读写，这是因为网络阻塞导致线程无法执行，很有可能是一个网络瓶颈的征兆：</p><ul><li><p>网络非常繁忙，几乎消耗了所有的带宽，仍然有大量数据等待网络读写；</p></li><li><p>网络可能是空闲的，但由于路由或防火墙等原因，导致包无法正常到达；</p></li></ul><p>所以一定要结合系统的一些性能观察工具进行综合分析，比如 netstat 统计单位时间的发送包的数量，看是否很明显超过了所在网络带宽的限制；观察 CPU 的利用率，看系统态的 CPU 时间是否明显大于用户态的 CPU 时间。这些都指向由于网络带宽所限导致的网络瓶颈。</p><p>（3）还有一种常见的情况是该线程在 sleep，等待 sleep 的时间到了，将被唤醒。</p><p>【示例】等待状态样例</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> &quot;IoWaitThread&quot; prio=6 tid=0x0000000007334800 nid=0x2b3c waiting on condition [0x000000000893f000]
   java.lang.Thread.State: WAITING (parking)
                at sun.misc.Unsafe.park(Native Method)
                - parking to wait for  &lt;0x00000007d5c45850&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
                at java.util.concurrent.locks.LockSupport.park(LockSupport.java:156)
                at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1987)
                at java.util.concurrent.LinkedBlockingDeque.takeFirst(LinkedBlockingDeque.java:440)
                at java.util.concurrent.LinkedBlockingDeque.take(LinkedBlockingDeque.java:629)
                at com.nbp.theplatform.threaddump.ThreadIoWaitState$IoWaitHandler2.run(ThreadIoWaitState.java:89)
                at java.lang.Thread.run(Thread.java:662)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="waiting-for-monitor-entry-或-in-object-wait" tabindex="-1"><a class="header-anchor" href="#waiting-for-monitor-entry-或-in-object-wait" aria-hidden="true">#</a> waiting for monitor entry 或 in Object.wait()</h3><p>Moniter 是 Java 中用以实现线程之间的互斥与协作的主要手段，它可以看成是对象或者 class 的锁，每个对象都有，也仅有一个 Monitor。</p><figure><img src="https://www.javatang.com/wp-content/uploads/2017/10/java-monitor.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>从上图可以看出，每个 Monitor 在某个时刻只能被一个线程拥有，该线程就是 &quot;Active Thread&quot;，而其他线程都是 &quot;Waiting Thread&quot;，分别在两个队列 &quot;Entry Set&quot;和&quot;Waint Set&quot;里面等待。其中在 &quot;Entry Set&quot; 中等待的线程状态是 <code>waiting for monitor entry</code>，在 &quot;Wait Set&quot; 中等待的线程状态是 <code>in Object.wait()</code>。</p><p>（1）&quot;Entry Set&quot;里面的线程。</p><p>我们称被 <code>synchronized</code> 保护起来的代码段为临界区，对应的代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">synchronized</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当一个线程申请进入临界区时，它就进入了 &quot;Entry Set&quot; 队列中，这时候有两种可能性：</p><ul><li>该 Monitor 不被其他线程拥有，&quot;Entry Set&quot;里面也没有其他等待的线程。本线程即成为相应类或者对象的 Monitor 的 Owner，执行临界区里面的代码；此时在 Thread Dump 中显示线程处于 &quot;Runnable&quot; 状态。</li><li>该 Monitor 被其他线程拥有，本线程在 &quot;Entry Set&quot; 队列中等待。此时在 Thread Dump 中显示线程处于 &quot;waiting for monity entry&quot; 状态。</li></ul><p>临界区的设置是为了保证其内部的代码执行的原子性和完整性，但因为临界区在任何时间只允许线程串行通过，这和我们使用多线程的初衷是相反的。如果在多线程程序中大量使用 synchronized，或者不适当的使用它，会造成大量线程在临界区的入口等待，造成系统的性能大幅下降。如果在 Thread Dump 中发现这个情况，应该审视源码并对其进行改进。</p><p>（2）&quot;Wait Set&quot;里面的线程</p><p>当线程获得了 Monitor，进入了临界区之后，如果发现线程继续运行的条件没有满足，它则调用对象（通常是被 synchronized 的对象）的 wait() 方法，放弃 Monitor，进入 &quot;Wait Set&quot;队列。只有当别的线程在该对象上调用了 notify() 或者 notifyAll() 方法，&quot;Wait Set&quot;队列中的线程才得到机会去竞争，但是只有一个线程获得对象的 Monitor，恢复到运行态。&quot;Wait Set&quot;中的线程在 Thread Dump 中显示的状态为 in Object.wait()。通常来说，当 CPU 很忙的时候关注 Runnable 状态的线程，反之则关注 waiting for monitor entry 状态的线程。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,99),Fa={href:"https://book.douban.com/subject/34907497/",target:"_blank",rel:"noopener noreferrer"},Wa={href:"https://time.geekbang.org/column/intro/100028001",target:"_blank",rel:"noopener noreferrer"},Ka={href:"https://my.oschina.net/feichexia/blog/196575",target:"_blank",rel:"noopener noreferrer"},Xa={href:"https://www.javatang.com/archives/2017/10/19/33151873.html",target:"_blank",rel:"noopener noreferrer"},Qa={href:"https://www.cnblogs.com/yjd_hycf_space/p/7755633.html",target:"_blank",rel:"noopener noreferrer"},Ya={href:"https://docs.oracle.com/javase/8/docs/technotes/guides/management/jconsole.html",target:"_blank",rel:"noopener noreferrer"},Za={href:"https://www.cnblogs.com/kongzhongqijing/articles/3621441.html",target:"_blank",rel:"noopener noreferrer"},en={href:"https://docs.oracle.com/javase/8/docs/technotes/guides/visualvm/index.html",target:"_blank",rel:"noopener noreferrer"},an={href:"https://blog.csdn.net/a19881029/article/details/8432368",target:"_blank",rel:"noopener noreferrer"},nn={href:"https://blog.csdn.net/wanghuiqi2008/article/details/50724676",target:"_blank",rel:"noopener noreferrer"};function sn(tn,ln){const s=c("ExternalLinkIcon"),r=c("Tabs");return u(),p("div",null,[m,e("p",null,[e("strong",null,[e("a",b,[a("jps(JVM Process Status Tool)"),n(s)]),a(" 是虚拟机进程状态工具")]),a("。它可以列出正在运行的虚拟机进程，并显示虚拟机执行主类（Main Class，main() 函数所在的类）名称以及这些进程的本地虚拟机唯一 ID（LVMID，Local Virtual Machine Identifier）。对于本地虚拟机进程来说，LVMID 与操作系统的进程 ID（PID，Process Identifier）是一致的。")]),v,n(r,{id:"145",data:[{id:"列出本地 Java 进程"},{id:"列出本地 Java 进程 ID"},{id:"列出本地 Java 进程 ID，并输出主类的全名"}],"tab-id":"jps 使用示例"},{title0:t(({value:i,isActive:l})=>[a("列出本地 Java 进程")]),title1:t(({value:i,isActive:l})=>[a("列出本地 Java 进程 ID")]),title2:t(({value:i,isActive:l})=>[a("列出本地 Java 进程 ID，并输出主类的全名")]),tab0:t(({value:i,isActive:l})=>[k,g]),tab1:t(({value:i,isActive:l})=>[f,_]),tab2:t(({value:i,isActive:l})=>[j,x,M]),_:1}),T,e("p",null,[e("strong",null,[e("a",S,[a("jstat(JVM statistics Monitoring)"),n(s)]),a(" 是虚拟机统计信息监视工具")]),a("。jstat 用于监视虚拟机各种运行状态信息的命令行工具。它可以显示本地或者远程虚拟机进程中的类加载、内存、垃圾收集、即时编译等运行时数据。")]),J,e("blockquote",null,[e("p",null,[a("【参考】更详细说明可以参考："),e("a",C,[a("jstat 命令查看 jvm 的 GC 情况"),n(s)])])]),w,n(r,{id:"277",data:[{id:"类加载统计"},{id:"编译统计"},{id:"GC 统计"}],"tab-id":"jstat 使用示例"},{title0:t(({value:i,isActive:l})=>[a("类加载统计")]),title1:t(({value:i,isActive:l})=>[a("编译统计")]),title2:t(({value:i,isActive:l})=>[a("GC 统计")]),tab0:t(({value:i,isActive:l})=>[y,q,D,V,L,A]),tab1:t(({value:i,isActive:l})=>[I,B,G,E,R,z]),tab2:t(({value:i,isActive:l})=>[P,O,U,H,$,N,F,W,e("blockquote",null,[e("p",null,[a("注：更详细的参数含义可以参考官方文档："),e("a",K,[a("http://docs.oracle.com/javase/8/docs/technotes/tools/unix/jstat.html"),n(s)])])])]),_:1}),X,e("p",null,[e("strong",null,[e("a",Q,[a("jinfo(JVM Configuration info)"),n(s)]),a(" 是 Java 配置信息工具")]),a("。jinfo 用于实时查看和调整虚拟机运行参数。如传递给 Java 虚拟机的"),Y,a("（即输出中的 jvm_args）、"),Z,a("参数（即输出中的 VM Flags），以及可在 Java 层面通过"),ee,a("获取的"),ae,a("参数（即输出中的 System Properties）。")]),ne,e("p",null,[e("strong",null,[e("a",se,[a("jmap(JVM Memory Map)"),n(s)]),a(" 是 Java 内存映像工具")]),a("。jmap 用于生成堆转储快照（一般称为 heapdump 或 dump 文件）。jmap 不仅能生成 dump 文件，还可以查询 "),te,a(" 执行队列、Java 堆和永久代的详细信息，如当前使用率、当前使用的是哪种收集器等。")]),ie,n(r,{id:"549",data:[{id:"生成 heapdump 快照"},{id:"查看实例数最多的类"},{id:"查看指定进程的堆信息"}],"tab-id":"jstat 使用示例"},{title0:t(({value:i,isActive:l})=>[a("生成 heapdump 快照")]),title1:t(({value:i,isActive:l})=>[a("查看实例数最多的类")]),title2:t(({value:i,isActive:l})=>[a("查看指定进程的堆信息")]),tab0:t(({value:i,isActive:l})=>[le,oe,re,ce]),tab1:t(({value:i,isActive:l})=>[de,ue]),tab2:t(({value:i,isActive:l})=>[pe,he,me]),_:1}),be,e("p",null,[a("显示“Server is ready.”的提示后，用户在浏览器中输入 "),e("a",ve,[a("http://localhost:7000/"),n(s)]),a(" 可以看到分析结果。")]),ke,e("p",null,[e("strong",null,[e("a",ge,[a("jstack(Stack Trace for java)"),n(s)]),a(" 是 Java 堆栈跟踪工具")]),a("。jstack 用于生成虚拟机当前时刻的线程快照（一般称为 threaddump 或者 javacore 文件）。")]),fe,n(r,{id:"634",data:[{id:"找出某 Java 进程中最耗费 CPU 的 Java 线程"},{id:"生成 threaddump 文件"}],"tab-id":"jstack 使用示例"},{title0:t(({value:i,isActive:l})=>[a("找出某 Java 进程中最耗费 CPU 的 Java 线程")]),title1:t(({value:i,isActive:l})=>[a("生成 threaddump 文件")]),tab0:t(({value:i,isActive:l})=>[_e,je,xe,Me,Te,Se,Je,Ce,we,ye,qe,De,Ve,Le,Ae,Ie,Be,Ge,Ee]),tab1:t(({value:i,isActive:l})=>[Re,ze,Pe,Oe]),_:1}),Ue,e("p",null,[e("a",He,[a("MAT"),n(s)]),a(" 即 Eclipse Memory Analyzer Tool 的缩写。")]),$e,e("p",null,[a("MAT 可以独立安装（"),e("a",Ne,[a("官方下载地址"),n(s)]),a("），也可以作为 Eclipse IDE 的插件安装。")]),Fe,e("p",null,[e("a",We,[a("JProfiler"),n(s)]),a(" 是一款性能分析工具。")]),Ke,Xe,e("p",null,[e("a",Qe,[a("Arthas"),n(s)]),a(" 是 Alibaba 开源的 Java 诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪 Java 代码；实时监控 JVM 状态。")]),Ye,Ze,ea,e("ul",null,[aa,e("li",null,[e("a",na,[a("cat"),n(s)]),a("——打印文件内容，和 linux 里的 cat 命令类似")]),e("li",null,[e("a",sa,[a("echo"),n(s)]),a("–打印参数，和 linux 里的 echo 命令类似")]),e("li",null,[e("a",ta,[a("grep"),n(s)]),a("——匹配查找，和 linux 里的 grep 命令类似")]),e("li",null,[e("a",ia,[a("tee"),n(s)]),a("——复制标准输入到标准输出和指定的文件，和 linux 里的 tee 命令类似")]),e("li",null,[e("a",la,[a("pwd"),n(s)]),a("——返回当前的工作目录，和 linux 命令类似")]),oa,ra,e("li",null,[e("a",ca,[a("reset"),n(s)]),a("——重置增强类，将被 Arthas 增强过的类全部还原，Arthas 服务端关闭时会重置所有增强过的类")]),da,ua,pa,ha,e("li",null,[e("a",ma,[a("keymap"),n(s)]),a("——Arthas 快捷键列表及自定义快捷键")])]),ba,e("ul",null,[e("li",null,[e("a",va,[a("dashboard"),n(s)]),a("——当前系统的实时数据面板")]),e("li",null,[e("a",ka,[a("thread"),n(s)]),a("——查看当前 JVM 的线程堆栈信息")]),e("li",null,[e("a",ga,[a("jvm"),n(s)]),a("——查看当前 JVM 的信息")]),e("li",null,[e("a",fa,[a("sysprop"),n(s)]),a("——查看和修改 JVM 的系统属性")]),e("li",null,[e("a",_a,[a("sysenv"),n(s)]),a("——查看 JVM 的环境变量")]),e("li",null,[e("a",ja,[a("vmoption"),n(s)]),a("——查看和修改 JVM 里诊断相关的 option")]),e("li",null,[e("a",xa,[a("perfcounter"),n(s)]),a("——查看当前 JVM 的 Perf Counter 信息")]),e("li",null,[e("a",Ma,[a("logger"),n(s)]),a("——查看和修改 logger")]),e("li",null,[e("a",Ta,[a("getstatic"),n(s)]),a("——查看类的静态属性")]),e("li",null,[e("a",Sa,[a("ognl"),n(s)]),a("——执行 ognl 表达式")]),e("li",null,[e("a",Ja,[a("mbean"),n(s)]),a("——查看 Mbean 的信息")]),e("li",null,[e("a",Ca,[a("heapdump"),n(s)]),a("——dump java heap, 类似 jmap 命令的 heap dump 功能")])]),wa,e("ul",null,[e("li",null,[e("a",ya,[a("sc"),n(s)]),a("——查看 JVM 已加载的类信息")]),e("li",null,[e("a",qa,[a("sm"),n(s)]),a("——查看已加载类的方法信息")]),e("li",null,[e("a",Da,[a("jad"),n(s)]),a("——反编译指定已加载类的源码")]),e("li",null,[e("a",Va,[a("mc"),n(s)]),a("——内存编译器，内存编译"),La,a("文件为"),Aa,a("文件")]),e("li",null,[e("a",Ia,[a("redefine"),n(s)]),a("——加载外部的"),Ba,a("文件，redefine 到 JVM 里")]),e("li",null,[e("a",Ga,[a("dump"),n(s)]),a("——dump 已加载类的 byte code 到特定目录")]),e("li",null,[e("a",Ea,[a("classloader"),n(s)]),a("——查看 classloader 的继承树，urls，类加载信息，使用 classloader 去 getResource")])]),Ra,za,e("ul",null,[e("li",null,[e("a",Pa,[a("monitor"),n(s)]),a("——方法执行监控")]),e("li",null,[e("a",Oa,[a("watch"),n(s)]),a("——方法执行数据观测")]),e("li",null,[e("a",Ua,[a("trace"),n(s)]),a("——方法内部调用路径，并输出方法路径上的每个节点上耗时")]),e("li",null,[e("a",Ha,[a("stack"),n(s)]),a("——输出当前方法被调用的调用路径")]),e("li",null,[e("a",$a,[a("tt"),n(s)]),a("——方法执行数据的时空隧道，记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测")])]),Na,e("ul",null,[e("li",null,[e("a",Fa,[a("《深入理解 Java 虚拟机》"),n(s)])]),e("li",null,[e("a",Wa,[a("极客时间教程 - Java 性能调优实战"),n(s)])]),e("li",null,[e("a",Ka,[a("JVM 性能调优监控工具 jps、jstack、jmap、jhat、jstat、hprof 使用详解"),n(s)])]),e("li",null,[e("a",Xa,[a("JVM 故障分析及性能优化系列之一：使用 jstack 定位线程堆栈信息"),n(s)])]),e("li",null,[e("a",Qa,[a("jstat 命令查看 jvm 的 GC 情况"),n(s)])]),e("li",null,[e("a",Ya,[a("jconsole 官方文档"),n(s)])]),e("li",null,[e("a",Za,[a("jconsole 工具使用"),n(s)])]),e("li",null,[e("a",en,[a("jvisualvm 官方文档"),n(s)])]),e("li",null,[e("a",an,[a("Java jvisualvm 简要说明"),n(s)])]),e("li",null,[e("a",nn,[a("利用内存分析工具（Memory Analyzer Tool，MAT）分析 java 项目内存泄露"),n(s)])])])])}const cn=d(h,[["render",sn],["__file","index.html.vue"]]);export{cn as default};
