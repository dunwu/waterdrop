const t=JSON.parse('{"key":"v-4210c11d","path":"/pages/fc674dbb/","title":"SpringBoot 面试","lang":"zh-CN","frontmatter":{"title":"SpringBoot 面试","date":"2025-09-19T08:22:21.000Z","permalink":"/pages/fc674dbb/","category":["Java","框架","Spring"],"tag":["Java","框架","Spring","SpringBoot","面试"],"description":"SpringBoot 面试 SpringBoot 简介 【简单】什么是 SpringBoot？ Spring Boot 是一个基于 Spring 框架的“开箱即用”的脚手架框架，它基于约定优于配置的原则，极大地简化了 Spring 应用的搭建和开发过程。 SpringBoot 的核心特性： 自动配置：根据项目依赖自动推断并配置所需的 Bean（如引入 Web 依赖则自动配置 Tomcat + Spring MVC）。 starter 依赖：将功能相关的依赖打包成一个整体（如 spring-boot-starter-web），解决版本兼容问题。 内嵌服务器：内嵌服务器 Tomcat/Jetty，无需外部容器，打包成可执行 JAR 后一键运行 (java -jar)。 监控：提供 Actuator 模块，轻松监控应用健康、性能等指标（通过 /actuator/health 等端点）。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/fc674dbb/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"SpringBoot 面试"}],["meta",{"property":"og:description","content":"SpringBoot 面试 SpringBoot 简介 【简单】什么是 SpringBoot？ Spring Boot 是一个基于 Spring 框架的“开箱即用”的脚手架框架，它基于约定优于配置的原则，极大地简化了 Spring 应用的搭建和开发过程。 SpringBoot 的核心特性： 自动配置：根据项目依赖自动推断并配置所需的 Bean（如引入 Web 依赖则自动配置 Tomcat + Spring MVC）。 starter 依赖：将功能相关的依赖打包成一个整体（如 spring-boot-starter-web），解决版本兼容问题。 内嵌服务器：内嵌服务器 Tomcat/Jetty，无需外部容器，打包成可执行 JAR 后一键运行 (java -jar)。 监控：提供 Actuator 模块，轻松监控应用健康、性能等指标（通过 /actuator/health 等端点）。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-19T00:24:17.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"框架"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:tag","content":"SpringBoot"}],["meta",{"property":"article:tag","content":"面试"}],["meta",{"property":"article:published_time","content":"2025-09-19T08:22:21.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-19T00:24:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringBoot 面试\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-09-19T08:22:21.000Z\\",\\"dateModified\\":\\"2025-09-19T00:24:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"SpringBoot 简介","slug":"springboot-简介","link":"#springboot-简介","children":[{"level":3,"title":"【简单】什么是 SpringBoot？","slug":"【简单】什么是-springboot","link":"#【简单】什么是-springboot","children":[]}]},{"level":2,"title":"SpringBoot 架构","slug":"springboot-架构","link":"#springboot-架构","children":[{"level":3,"title":"【中等】SpringBoot 是如何实现自动配置的？🌟🌟🌟","slug":"【中等】springboot-是如何实现自动配置的-🌟🌟🌟","link":"#【中等】springboot-是如何实现自动配置的-🌟🌟🌟","children":[]},{"level":3,"title":"【中等】SpringBoot 是如何通过 main 方法启动 web 项目的？🌟","slug":"【中等】springboot-是如何通过-main-方法启动-web-项目的-🌟","link":"#【中等】springboot-是如何通过-main-方法启动-web-项目的-🌟","children":[]},{"level":3,"title":"【困难】SpringBoot 的启动流程是如何设计的？🌟🌟🌟","slug":"【困难】springboot-的启动流程是如何设计的-🌟🌟🌟","link":"#【困难】springboot-的启动流程是如何设计的-🌟🌟🌟","children":[]},{"level":3,"title":"【困难】如何自定义一个 starter 包？🌟🌟🌟","slug":"【困难】如何自定义一个-starter-包-🌟🌟🌟","link":"#【困难】如何自定义一个-starter-包-🌟🌟🌟","children":[]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1758241457000,"updatedTime":1758241457000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":1}]},"readingTime":{"minutes":8.04,"words":2413},"filePathRelative":"01.Java/框架/Spring/SpringBoot面试.md","localizedDate":"2025年9月19日","excerpt":"<h1> SpringBoot 面试</h1>\\n<h2> SpringBoot 简介</h2>\\n<h3> 【简单】什么是 SpringBoot？</h3>\\n<p>Spring Boot 是一个基于 Spring 框架的“开箱即用”的脚手架框架，它基于<strong>约定优于配置</strong>的原则，极大地简化了 Spring 应用的搭建和开发过程。</p>\\n<p>SpringBoot 的核心特性：</p>\\n<ul>\\n<li><strong>自动配置</strong>：根据项目依赖<strong>自动推断并配置</strong>所需的 Bean（如引入 Web 依赖则自动配置 Tomcat + Spring MVC）。</li>\\n<li><strong>starter 依赖</strong>：将功能相关的依赖<strong>打包成一个整体</strong>（如 <code>spring-boot-starter-web</code>），解决版本兼容问题。</li>\\n<li><strong>内嵌服务器</strong>：内嵌服务器 Tomcat/Jetty，无需外部容器，打包成可执行 JAR 后一键运行 (<code>java -jar</code>)。</li>\\n<li><strong>监控</strong>：提供 <strong>Actuator</strong> 模块，轻松监控应用健康、性能等指标（通过 <code>/actuator/health</code> 等端点）。</li>\\n</ul>","autoDesc":true}');export{t as data};
