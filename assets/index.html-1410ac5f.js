import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as d,c as a,a as e,b as o,d as s,e as l}from"./app-a70a1432.js";const i={},r=e("h1",{id:"linux-命令-cheat-sheet",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#linux-命令-cheat-sheet","aria-hidden":"true"},"#"),o(" Linux 命令 Cheat Sheet")],-1),p=e("h2",{id:"常见命令分类",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#常见命令分类","aria-hidden":"true"},"#"),o(" 常见命令分类")],-1),u={href:"https://dunwu.github.io/linux-tutorial/linux/cli/linux-cli-help.html",target:"_blank",rel:"noopener noreferrer"},h=e("code",null,"help",-1),_=e("code",null,"whatis",-1),m=e("code",null,"info",-1),g=e("code",null,"which",-1),b=e("code",null,"whereis",-1),f=e("code",null,"man",-1),k={href:"https://dunwu.github.io/linux-tutorial/linux/cli/linux-cli-dir.html",target:"_blank",rel:"noopener noreferrer"},v=e("code",null,"cd",-1),w=e("code",null,"ls",-1),x=e("code",null,"pwd",-1),y=e("code",null,"mkdir",-1),S=e("code",null,"rmdir",-1),C=e("code",null,"tree",-1),L=e("code",null,"touch",-1),A=e("code",null,"ln",-1),W=e("code",null,"rename",-1),B=e("code",null,"stat",-1),P=e("code",null,"file",-1),U=e("code",null,"chmod",-1),M=e("code",null,"chown",-1),z=e("code",null,"locate",-1),E=e("code",null,"find",-1),O=e("code",null,"cp",-1),T=e("code",null,"mv",-1),I=e("code",null,"rm",-1),N={href:"https://dunwu.github.io/linux-tutorial/linux/cli/linux-cli-file.html",target:"_blank",rel:"noopener noreferrer"},j=e("code",null,"cat",-1),q=e("code",null,"head",-1),$=e("code",null,"tail",-1),D=e("code",null,"more",-1),G=e("code",null,"less",-1),R=e("code",null,"sed",-1),X=e("code",null,"vi",-1),F=e("code",null,"grep",-1),V={href:"https://dunwu.github.io/linux-tutorial/linux/cli/linux-cli-file-compress.html",target:"_blank",rel:"noopener noreferrer"},H=e("code",null,"tar",-1),J=e("code",null,"gzip",-1),Y=e("code",null,"zip",-1),K=e("code",null,"unzip",-1),Z={href:"https://dunwu.github.io/linux-tutorial/linux/cli/linux-cli-user.html",target:"_blank",rel:"noopener noreferrer"},Q=e("code",null,"groupadd",-1),ee=e("code",null,"groupdel",-1),oe=e("code",null,"groupmod",-1),ne=e("code",null,"useradd",-1),se=e("code",null,"userdel",-1),le=e("code",null,"usermod",-1),te=e("code",null,"passwd",-1),ce=e("code",null,"su",-1),de=e("code",null,"sudo",-1),ae={href:"https://dunwu.github.io/linux-tutorial/linux/cli/linux-cli-system.html",target:"_blank",rel:"noopener noreferrer"},ie=e("code",null,"reboot",-1),re=e("code",null,"exit",-1),pe=e("code",null,"shutdown",-1),ue=e("code",null,"date",-1),he=e("code",null,"mount",-1),_e=e("code",null,"umount",-1),me=e("code",null,"ps",-1),ge=e("code",null,"kill",-1),be=e("code",null,"systemctl",-1),fe=e("code",null,"service",-1),ke=e("code",null,"crontab",-1),ve={href:"https://dunwu.github.io/linux-tutorial/linux/cli/linux-cli-net.html",target:"_blank",rel:"noopener noreferrer"},we=e("code",null,"curl",-1),xe=e("code",null,"wget",-1),ye=e("code",null,"telnet",-1),Se=e("code",null,"ip",-1),Ce=e("code",null,"hostname",-1),Le=e("code",null,"ifconfig",-1),Ae=e("code",null,"route",-1),We=e("code",null,"ssh",-1),Be=e("code",null,"ssh-keygen",-1),Pe=e("code",null,"firewalld",-1),Ue=e("code",null,"iptables",-1),Me=e("code",null,"host",-1),ze=e("code",null,"nslookup",-1),Ee=e("code",null,"nc",-1),Oe=e("code",null,"netcat",-1),Te=e("code",null,"ping",-1),Ie=e("code",null,"traceroute",-1),Ne=e("code",null,"netstat",-1),je={href:"https://dunwu.github.io/linux-tutorial/linux/cli/linux-cli-hardware.html",target:"_blank",rel:"noopener noreferrer"},qe=e("code",null,"df",-1),$e=e("code",null,"du",-1),De=e("code",null,"top",-1),Ge=e("code",null,"free",-1),Re=e("code",null,"iotop",-1),Xe={href:"https://dunwu.github.io/linux-tutorial/linux/cli/linux-cli-software.html",target:"_blank",rel:"noopener noreferrer"},Fe=e("code",null,"rpm",-1),Ve=e("code",null,"yum",-1),He=e("code",null,"apt-get",-1),Je=l(`<h2 id="基础" tabindex="-1"><a class="header-anchor" href="#基础" aria-hidden="true">#</a> 基础</h2><ul><li><p>学习 Bash 的基础知识。具体地，在命令行中输入 <code>man bash</code> 并至少全文浏览一遍; 它理解起来很简单并且不冗长。其他的 shell 可能很好用，但 Bash 的功能已经足够强大并且到几乎总是可用的（ 如果你<em>只</em>学习 zsh，fish 或其他的 shell 的话，在你自己的设备上会显得很方便，但过度依赖这些功能会给您带来不便，例如当你需要在服务器上工作时）。</p></li><li><p>熟悉至少一个基于文本的编辑器。通常而言 Vim （<code>vi</code>） 会是你最好的选择，毕竟在终端中编辑文本时 Vim 是最好用的工具（甚至大部分情况下 Vim 要比 Emacs、大型 IDE 或是炫酷的编辑器更好用）。</p></li><li><p>学会如何使用 <code>man</code> 命令去阅读文档。学会使用 <code>apropos</code> 去查找文档。知道有些命令并不对应可执行文件，而是在 Bash 内置好的，此时可以使用 <code>help</code> 和 <code>help -d</code> 命令获取帮助信息。你可以用 <code>type 命令</code> 来判断这个命令到底是可执行文件、shell 内置命令还是别名。</p></li><li><p>学会使用 <code>&gt;</code> 和 <code>&lt;</code> 来重定向输出和输入，学会使用 <code>|</code> 来重定向管道。明白 <code>&gt;</code> 会覆盖了输出文件而 <code>&gt;&gt;</code> 是在文件末添加。了解标准输出 stdout 和标准错误 stderr。</p></li><li><p>学会使用通配符 <code>*</code> （或许再算上 <code>?</code> 和 <code>[</code>...<code>]</code>） 和引用以及引用中 <code>&#39;</code> 和 <code>&quot;</code> 的区别（后文中有一些具体的例子）。</p></li><li><p>熟悉 Bash 中的任务管理工具：<code>&amp;</code>，<strong>ctrl-z</strong>，<strong>ctrl-c</strong>，<code>jobs</code>，<code>fg</code>，<code>bg</code>，<code>kill</code> 等。</p></li><li><p>学会使用 <code>ssh</code> 进行远程命令行登录，最好知道如何使用 <code>ssh-agent</code>，<code>ssh-add</code> 等命令来实现基础的无密码认证登录。</p></li><li><p>学会基本的文件管理工具：<code>ls</code> 和 <code>ls -l</code> （了解 <code>ls -l</code> 中每一列代表的意义），<code>less</code>，<code>head</code>，<code>tail</code> 和 <code>tail -f</code> （甚至 <code>less +F</code>），<code>ln</code> 和 <code>ln -s</code> （了解硬链接与软链接的区别），<code>chown</code>，<code>chmod</code>，<code>du</code> （硬盘使用情况概述：<code>du -hs *</code>）。 关于文件系统的管理，学习 <code>df</code>，<code>mount</code>，<code>fdisk</code>，<code>mkfs</code>，<code>lsblk</code>。知道 inode 是什么（与 <code>ls -i</code> 和 <code>df -i</code> 等命令相关）。</p></li><li><p>学习基本的网络管理工具：<code>ip</code> 或 <code>ifconfig</code>，<code>dig</code>。</p></li><li><p>学习并使用一种版本控制管理系统，例如 <code>git</code>。</p></li><li><p>熟悉正则表达式，学会使用 <code>grep</code>／<code>egrep</code>，它们的参数中 <code>-i</code>，<code>-o</code>，<code>-v</code>，<code>-A</code>，<code>-B</code> 和 <code>-C</code> 这些是很常用并值得认真学习的。</p></li><li><p>学会使用 <code>apt-get</code>，<code>yum</code>，<code>dnf</code> 或 <code>pacman</code> （具体使用哪个取决于你使用的 Linux 发行版）来查找和安装软件包。并确保你的环境中有 <code>pip</code> 来安装基于 Python 的命令行工具 （接下来提到的部分程序使用 <code>pip</code> 来安装会很方便）。</p></li></ul><h2 id="日常使用" tabindex="-1"><a class="header-anchor" href="#日常使用" aria-hidden="true">#</a> 日常使用</h2><ul><li><p>在 Bash 中，可以通过按 <strong>Tab</strong> 键实现自动补全参数，使用 <strong>ctrl-r</strong> 搜索命令行历史记录（按下按键之后，输入关键字便可以搜索，重复按下 <strong>ctrl-r</strong> 会向后查找匹配项，按下 <strong>Enter</strong> 键会执行当前匹配的命令，而按下右方向键会将匹配项放入当前行中，不会直接执行，以便做出修改）。</p></li><li><p>在 Bash 中，可以按下 <strong>ctrl-w</strong> 删除你键入的最后一个单词，<strong>ctrl-u</strong> 可以删除行内光标所在位置之前的内容，<strong>alt-b</strong> 和 <strong>alt-f</strong> 可以以单词为单位移动光标，<strong>ctrl-a</strong> 可以将光标移至行首，<strong>ctrl-e</strong> 可以将光标移至行尾，<strong>ctrl-k</strong> 可以删除光标至行尾的所有内容，<strong>ctrl-l</strong> 可以清屏。键入 <code>man readline</code> 可以查看 Bash 中的默认快捷键。内容有很多，例如 <strong>alt-.</strong> 循环地移向前一个参数，而 <strong>alt-*</strong> 可以展开通配符。</p></li></ul><ul><li><p>你喜欢的话，可以执行 <code>set -o vi</code> 来使用 vi 风格的快捷键，而执行 <code>set -o emacs</code> 可以把它改回来。</p></li><li><p>为了便于编辑长命令，在设置你的默认编辑器后（例如 <code>export EDITOR=vim</code>），<strong>ctrl-x</strong> <strong>ctrl-e</strong> 会打开一个编辑器来编辑当前输入的命令。在 vi 风格下快捷键则是 <strong>escape-v</strong>。</p></li><li><p>键入 <code>history</code> 查看命令行历史记录，再用 <code>!n</code>（<code>n</code> 是命令编号）就可以再次执行。其中有许多缩写，最有用的大概就是 <code>!$</code>， 它用于指代上次键入的参数，而 <code>!!</code> 可以指代上次键入的命令了（参考 man 页面中的“HISTORY EXPANSION”）。不过这些功能，你也可以通过快捷键 <strong>ctrl-r</strong> 和 <strong>alt-.</strong> 来实现。</p></li><li><p><code>cd</code> 命令可以切换工作路径，输入 <code>cd \\~</code> 可以进入 home 目录。要访问你的 home 目录中的文件，可以使用前缀 <code>\\~</code>（例如 <code>\\~/.bashrc</code>）。在 <code>sh</code> 脚本里则用环境变量 <code>$HOME</code> 指代 home 目录的路径。</p></li><li><p>回到前一个工作路径：<code>cd -</code>。</p></li><li><p>如果你输入命令的时候中途改了主意，按下 <strong>alt-#</strong> 在行首添加 <code>#</code> 把它当做注释再按下回车执行（或者依次按下 <strong>ctrl-a</strong>， <strong>#</strong>， <strong>enter</strong>）。这样做的话，之后借助命令行历史记录，你可以很方便恢复你刚才输入到一半的命令。</p></li><li><p>使用 <code>xargs</code> （ 或 <code>parallel</code>）。他们非常给力。注意到你可以控制每行参数个数（<code>-L</code>）和最大并行数（<code>-P</code>）。如果你不确定它们是否会按你想的那样工作，先使用 <code>xargs echo</code> 查看一下。此外，使用 <code>-I{}</code> 会很方便。例如：</p></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>      <span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-name</span> <span class="token string">&#39;*.py&#39;</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">grep</span> some_function
      <span class="token function">cat</span> hosts <span class="token operator">|</span> <span class="token function">xargs</span> -I<span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token function">ssh</span> root@<span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token function">hostname</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,6),Ye=l("<li><p><code>pstree -p</code> 以一种优雅的方式展示进程树。</p></li><li><p>使用 <code>pgrep</code> 和 <code>pkill</code> 根据名字查找进程或发送信号（<code>-f</code> 参数通常有用）。</p></li><li><p>了解你可以发往进程的信号的种类。比如，使用 <code>kill -STOP [pid]</code> 停止一个进程。使用 <code>man 7 signal</code> 查看详细列表。</p></li><li><p>使用 <code>nohup</code> 或 <code>disown</code> 使一个后台进程持续运行。</p></li><li><p>使用 <code>netstat -lntp</code> 或 <code>ss -plat</code> 检查哪些进程在监听端口（默认是检查 TCP 端口; 添加参数 <code>-u</code> 则检查 UDP 端口）或者 <code>lsof -iTCP -sTCP:LISTEN -P -n</code> (这也可以在 OS X 上运行)。</p></li><li><p><code>lsof</code> 来查看开启的套接字和文件。</p></li><li><p>使用 <code>uptime</code> 或 <code>w</code> 来查看系统已经运行多长时间。</p></li><li><p>使用 <code>alias</code> 来创建常用命令的快捷形式。例如：<code>alias ll=&#39;ls -latr&#39;</code> 创建了一个新的命令别名 <code>ll</code>。</p></li>",8),Ke=e("code",null,"\\~/.bashrc",-1),Ze={href:"http://superuser.com/a/183980/7106",target:"_blank",rel:"noopener noreferrer"},Qe=l("<li><p>把环境变量的设定以及登陆时要执行的命令保存在 <code>\\~/.bash_profile</code>。而对于从图形界面启动的 shell 和 <code>cron</code> 启动的 shell，则需要单独配置文件。</p></li><li><p>要想在几台电脑中同步你的配置文件（例如 <code>.bashrc</code> 和 <code>.bash_profile</code>），可以借助 Git。</p></li><li><p>当变量和文件名中包含空格的时候要格外小心。Bash 变量要用引号括起来，比如 <code>&quot;$FOO&quot;</code>。尽量使用 <code>-0</code> 或 <code>-print0</code> 选项以便用 NULL 来分隔文件名，例如 <code>locate -0 pattern | xargs -0 ls -al</code> 或 <code>find / -print0 -type d | xargs -0 ls -al</code>。如果 for 循环中循环访问的文件名含有空字符（空格、tab 等字符），只需用 <code>IFS=$&#39;\\n&#39;</code> 把内部字段分隔符设为换行符。</p></li><li><p>在 Bash 脚本中，使用 <code>set -x</code> 去调试输出（或者使用它的变体 <code>set -v</code>，它会记录原始输入，包括多余的参数和注释）。尽可能地使用严格模式：使用 <code>set -e</code> 令脚本在发生错误时退出而不是继续运行；使用 <code>set -u</code> 来检查是否使用了未赋值的变量；试试 <code>set -o pipefail</code>，它可以监测管道中的错误。当牵扯到很多脚本时，使用 <code>trap</code> 来检测 ERR 和 EXIT。一个好的习惯是在脚本文件开头这样写，这会使它能够检测一些错误，并在错误发生时中断程序并输出信息：</p></li>",4),eo=l(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>      <span class="token builtin class-name">set</span> <span class="token parameter variable">-euo</span> pipefail
      <span class="token builtin class-name">trap</span> <span class="token string">&quot;echo &#39;error: Script failed: see failed command above&#39;&quot;</span> ERR
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在 Bash 脚本中，子 shell（使用括号 <code>(...)</code>）是一种组织参数的便捷方式。一个常见的例子是临时地移动工作路径，代码如下：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>      <span class="token comment"># do something in current dir</span>
      <span class="token punctuation">(</span>cd /some/other/dir <span class="token operator">&amp;&amp;</span> other-command<span class="token punctuation">)</span>
      <span class="token comment"># continue in original dir</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>在 Bash 中，变量有许多的扩展方式。<code>\${name:?error message}</code> 用于检查变量是否存在。此外，当 Bash 脚本只需要一个参数时，可以使用这样的代码 <code>input_file=\${1:?usage: $0 input_file}</code>。在变量为空时使用默认值：<code>\${name:-default}</code>。如果你要在之前的例子中再加一个（可选的）参数，可以使用类似这样的代码 <code>output_file=\${2:-logfile}</code>，如果省略了 $2，它的值就为空，于是 <code>output_file</code> 就会被设为 <code>logfile</code>。数学表达式：<code>i=$(( (i + 1) % 5 ))</code>。序列：<code>{1..10}</code>。截断字符串：<code>\${var%suffix}</code> 和 <code>\${var#prefix}</code>。例如，假设 <code>var=foo.pdf</code>，那么 <code>echo \${var%.pdf}.txt</code> 将输出 <code>foo.txt</code>。</p></li><li><p>使用括号扩展（<code>{</code>...<code>}</code>）来减少输入相似文本，并自动化文本组合。这在某些情况下会很有用，例如 <code>mv foo.{txt,pdf} some-dir</code>（同时移动两个文件），<code>cp somefile{,.bak}</code>（会被扩展成 <code>cp somefile somefile.bak</code>）或者 <code>mkdir -p test-{a,b,c}/subtest-{1,2,3}</code>（会被扩展成所有可能的组合，并创建一个目录树）。</p></li><li><p>通过使用 <code>&lt;(some command)</code> 可以将输出视为文件。例如，对比本地文件 <code>/etc/hosts</code> 和一个远程文件：</p></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>      <span class="token function">diff</span> /etc/hosts <span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token function">ssh</span> somehost <span class="token function">cat</span> /etc/hosts<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>编写脚本时，你可能会想要把代码都放在大括号里。缺少右括号的话，代码就会因为语法错误而无法执行。如果你的脚本是要放在网上分享供他人使用的，这样的写法就体现出它的好处了，因为这样可以防止下载不完全代码被执行。</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">{</span>
      <span class="token comment"># 在这里写代码</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),oo=l("<li><p>了解 Bash 中的“here documents”，例如 <code>cat &lt;&lt;EOF ...</code>。</p></li><li><p>在 Bash 中，同时重定向标准输出和标准错误：<code>some-command &gt;logfile 2&gt;&amp;1</code> 或者 <code>some-command &amp;&gt;logfile</code>。通常，为了保证命令不会在标准输入里残留一个未关闭的文件句柄捆绑在你当前所在的终端上，在命令后添加 <code>&lt;/dev/null</code> 是一个好习惯。</p></li><li><p>使用 <code>man ascii</code> 查看具有十六进制和十进制值的 ASCII 表。<code>man unicode</code>，<code>man utf-8</code>，以及 <code>man latin1</code> 有助于你去了解通用的编码信息。</p></li>",3),no=e("code",null,"screen",-1),so={href:"https://tmux.github.io/",target:"_blank",rel:"noopener noreferrer"},lo=e("code",null,"tmux",-1),to=e("code",null,"byobu",-1),co={href:"https://github.com/bogner/dtach",target:"_blank",rel:"noopener noreferrer"},ao=e("code",null,"dtach",-1),io=e("li",null,[e("p",null,[o("ssh 中，了解如何使用 "),e("code",null,"-L"),o(" 或 "),e("code",null,"-D"),o("（偶尔需要用 "),e("code",null,"-R"),o("）开启隧道是非常有用的，比如当你需要从一台远程服务器上访问 web 页面。")])],-1),ro=e("li",null,[e("p",null,[o("对 ssh 设置做一些小优化可能是很有用的，例如这个 "),e("code",null,"\\~/.ssh/config"),o(" 文件包含了防止特定网络环境下连接断开、压缩数据、多通道等选项：")])],-1),po=l(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>      TCPKeepAlive=yes
      ServerAliveInterval=15
      ServerAliveCountMax=6
      Compression=yes
      ControlMaster auto
      ControlPath /tmp/%r@%h:%p
      ControlPersist yes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),uo=e("li",null,[e("p",null,[o("一些其他的关于 ssh 的选项是与安全相关的，应当小心翼翼的使用。例如你应当只能在可信任的网络中启用 "),e("code",null,"StrictHostKeyChecking=no"),o("，"),e("code",null,"ForwardAgent=yes"),o("。")])],-1),ho={href:"https://mosh.mit.edu/",target:"_blank",rel:"noopener noreferrer"},_o=e("code",null,"mosh",-1),mo=e("li",null,[e("p",null,[o("获取八进制形式的文件访问权限（修改系统设置时通常需要，但 "),e("code",null,"ls"),o(" 的功能不那么好用并且通常会搞砸），可以使用类似如下的代码：")])],-1),go=l(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>      <span class="token function">stat</span> <span class="token parameter variable">-c</span> <span class="token string">&#39;%A %a %n&#39;</span> /etc/timezone
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),bo={href:"https://github.com/mooz/percol",target:"_blank",rel:"noopener noreferrer"},fo=e("code",null,"percol",-1),ko={href:"https://github.com/junegunn/fzf",target:"_blank",rel:"noopener noreferrer"},vo=e("code",null,"fzf",-1),wo=e("code",null,"fpp",-1),xo={href:"https://github.com/facebook/PathPicker",target:"_blank",rel:"noopener noreferrer"},yo=e("code",null,"git",-1),So=l("<li><p>将 web 服务器上当前目录下所有的文件（以及子目录）暴露给你所处网络的所有用户，使用：<br><code>python -m SimpleHTTPServer 7777</code> （使用端口 7777 和 Python 2）或<code>python -m http.server 7777</code> （使用端口 7777 和 Python 3）。</p></li><li><p>以其他用户的身份执行命令，使用 <code>sudo</code>。默认以 root 用户的身份执行；使用 <code>-u</code> 来指定其他用户。使用 <code>-i</code> 来以该用户登录（需要输入<em>你自己的</em>密码）。</p></li><li><p>将 shell 切换为其他用户，使用 <code>su username</code> 或者 <code>sudo - username</code>。加入 <code>-</code> 会使得切换后的环境与使用该用户登录后的环境相同。省略用户名则默认为 root。切换到哪个用户，就需要输入<em>哪个用户的</em>密码。</p></li>",3),Co={href:"https://wiki.debian.org/CommonErrorMessages/ArgumentListTooLong",target:"_blank",rel:"noopener noreferrer"},Lo=e("code",null,"find",-1),Ao=e("code",null,"xargs",-1),Wo=e("li",null,[e("p",null,[o("当你需要一个基本的计算器时，可以使用 "),e("code",null,"python"),o(" 解释器（当然你要用 python 的时候也是这样）。例如：")])],-1),Bo=l(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&gt;&gt;&gt; 2+3
5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="文件及数据处理" tabindex="-1"><a class="header-anchor" href="#文件及数据处理" aria-hidden="true">#</a> 文件及数据处理</h2>`,2),Po=e("li",null,[e("p",null,[o("在当前目录下通过文件名查找一个文件，使用类似于这样的命令："),e("code",null,"find . -iname '*something*'"),o("。在所有路径下通过文件名查找文件，使用 "),e("code",null,"locate something"),o(" （但注意到 "),e("code",null,"updatedb"),o(" 可能没有对最近新建的文件建立索引，所以你可能无法定位到这些未被索引的文件）。")])],-1),Uo={href:"https://github.com/ggreer/the_silver_searcher",target:"_blank",rel:"noopener noreferrer"},Mo=e("code",null,"ag",-1),zo=e("code",null,"grep -r",-1),Eo=e("code",null,"ag",-1),Oo=e("li",null,[e("p",null,[o("将 HTML 转为文本："),e("code",null,"lynx -dump -stdin"),o("。")])],-1),To={href:"http://pandoc.org/",target:"_blank",rel:"noopener noreferrer"},Io=e("code",null,"pandoc",-1),No=e("li",null,[e("p",null,[o("当你要处理棘手的 XML 时候，"),e("code",null,"xmlstarlet"),o(" 算是上古时代流传下来的神器。")])],-1),jo={href:"http://stedolan.github.io/jq/",target:"_blank",rel:"noopener noreferrer"},qo=e("code",null,"jq",-1),$o={href:"https://github.com/0k/shyaml",target:"_blank",rel:"noopener noreferrer"},Do=e("code",null,"shyaml",-1),Go={href:"https://github.com/onyxfish/csvkit",target:"_blank",rel:"noopener noreferrer"},Ro=e("code",null,"in2csv",-1),Xo=e("code",null,"csvcut",-1),Fo=e("code",null,"csvjoin",-1),Vo=e("code",null,"csvgrep",-1),Ho={href:"https://github.com/s3tools/s3cmd",target:"_blank",rel:"noopener noreferrer"},Jo=e("code",null,"s3cmd",-1),Yo={href:"https://github.com/bloomreach/s4cmd",target:"_blank",rel:"noopener noreferrer"},Ko=e("code",null,"s4cmd",-1),Zo={href:"https://github.com/aws/aws-cli",target:"_blank",rel:"noopener noreferrer"},Qo=e("code",null,"aws",-1),en={href:"https://github.com/donnemartin/saws",target:"_blank",rel:"noopener noreferrer"},on=e("code",null,"saws",-1),nn=l("<li><p>了解如何使用 <code>sort</code> 和 <code>uniq</code>，包括 uniq 的 <code>-u</code> 参数和 <code>-d</code> 参数，具体内容在后文单行脚本节中。另外可以了解一下 <code>comm</code>。</p></li><li><p>了解如何使用 <code>cut</code>，<code>paste</code> 和 <code>join</code> 来更改文件。很多人都会使用 <code>cut</code>，但遗忘了 <code>join</code>。</p></li><li><p>了解如何运用 <code>wc</code> 去计算新行数（<code>-l</code>），字符数（<code>-m</code>），单词数（<code>-w</code>）以及字节数（<code>-c</code>）。</p></li><li><p>了解如何使用 <code>tee</code> 将标准输入复制到文件甚至标准输出，例如 <code>ls -al | tee file.txt</code>。</p></li>",4),sn={href:"https://www.gnu.org/software/datamash/",target:"_blank",rel:"noopener noreferrer"},ln=e("code",null,"datamash",-1),tn=l('<li><p>注意到语言设置（中文或英文等）对许多命令行工具有一些微妙的影响，比如排序的顺序和性能。大多数 Linux 的安装过程会将 <code>LANG</code> 或其他有关的变量设置为符合本地的设置。要意识到当你改变语言设置时，排序的结果可能会改变。明白国际化可能会使 sort 或其他命令运行效率下降<em>许多倍</em>。某些情况下（例如集合运算）你可以放心的使用 <code>export LC_ALL=C</code> 来忽略掉国际化并按照字节来判断顺序。</p></li><li><p>你可以单独指定某一条命令的环境，只需在调用时把环境变量设定放在命令的前面，例如 <code>TZ=Pacific/Fiji date</code> 可以获取斐济的时间。</p></li><li><p>了解如何使用 <code>awk</code> 和 <code>sed</code> 来进行简单的数据处理。 参阅 <a href="#one-liners">One-liners</a> 获取示例。</p></li><li><p>替换一个或多个文件中出现的字符串：</p></li>',4),cn=l(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>      perl <span class="token parameter variable">-pi.bak</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;s/old-string/new-string/g&#39;</span> my-files-*.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),dn={href:"https://github.com/jlevy/repren",target:"_blank",rel:"noopener noreferrer"},an=e("code",null,"repren",-1),rn=e("code",null,"rename",-1),pn=l(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>      <span class="token comment"># 将文件、目录和内容全部重命名 foo -&gt; bar:</span>
      repren <span class="token parameter variable">--full</span> --preserve-case <span class="token parameter variable">--from</span> foo <span class="token parameter variable">--to</span> bar <span class="token builtin class-name">.</span>
      <span class="token comment"># 还原所有备份文件 whatever.bak -&gt; whatever:</span>
      repren <span class="token parameter variable">--renames</span> <span class="token parameter variable">--from</span> <span class="token string">&#39;(.*)\\.bak&#39;</span> <span class="token parameter variable">--to</span> <span class="token string">&#39;\\1&#39;</span> *.bak
      <span class="token comment"># 用 rename 实现上述功能（若可用）:</span>
      <span class="token function">rename</span> <span class="token string">&#39;s/\\.bak$//&#39;</span> *.bak
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),un=e("code",null,"rsync",-1),hn=e("code",null,"rsync",-1),_n=e("code",null,"scp",-1),mn={href:"https://web.archive.org/web/20130929001850/http://linuxnote.net/jianingy/en/linux/a-fast-way-to-remove-huge-number-of-files.html",target:"_blank",rel:"noopener noreferrer"},gn=l(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> empty <span class="token operator">&amp;&amp;</span> <span class="token function">rsync</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">--delete</span> empty/ some-dir <span class="token operator">&amp;&amp;</span> <span class="token function">rmdir</span> some-dir
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),bn=e("code",null,"pv",-1),fn={href:"https://github.com/dmerejkowsky/pycp",target:"_blank",rel:"noopener noreferrer"},kn=e("code",null,"pycp",-1),vn={href:"https://github.com/Xfennec/progress",target:"_blank",rel:"noopener noreferrer"},wn=e("code",null,"progress",-1),xn=e("code",null,"rsync --progress",-1),yn=e("code",null,"dd status=progress",-1),Sn=l("<li><p>使用 <code>shuf</code> 可以以行为单位来打乱文件的内容或从一个文件中随机选取多行。</p></li><li><p>了解 <code>sort</code> 的参数。显示数字时，使用 <code>-n</code> 或者 <code>-h</code> 来显示更易读的数（例如 <code>du -h</code> 的输出）。明白排序时关键字的工作原理（<code>-t</code> 和 <code>-k</code>）。例如，注意到你需要 <code>-k1，1</code> 来仅按第一个域来排序，而 <code>-k1</code> 意味着按整行排序。稳定排序（<code>sort -s</code>）在某些情况下很有用。例如，以第二个域为主关键字，第一个域为次关键字进行排序，你可以使用 <code>sort -k1，1 | sort -s -k2，2</code>。</p></li><li><p>如果你想在 Bash 命令行中写 tab 制表符，按下 <strong>ctrl-v</strong> <strong>[Tab]</strong> 或键入 <code>$&#39;\\t&#39;</code> （后者可能更好，因为你可以复制粘贴它）。</p></li><li><p>标准的源代码对比及合并工具是 <code>diff</code> 和 <code>patch</code>。使用 <code>diffstat</code> 查看变更总览数据。注意到 <code>diff -r</code> 对整个文件夹有效。使用 <code>diff -r tree1 tree2 | diffstat</code> 查看变更的统计数据。<code>vimdiff</code> 用于比对并编辑文件。</p></li><li><p>对于二进制文件，使用 <code>hd</code>，<code>hexdump</code> 或者 <code>xxd</code> 使其以十六进制显示，使用 <code>bvi</code>，<code>hexedit</code> 或者 <code>biew</code> 来进行二进制编辑。</p></li><li><p>同样对于二进制文件，<code>strings</code>（包括 <code>grep</code> 等工具）可以帮助在二进制文件中查找特定比特。</p></li><li><p>制作二进制差分文件（Delta 压缩），使用 <code>xdelta3</code>。</p></li><li><p>使用 <code>iconv</code> 更改文本编码。需要更高级的功能，可以使用 <code>uconv</code>，它支持一些高级的 Unicode 功能。例如，这条命令移除了所有重音符号：</p></li>",8),Cn=l(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>      uconv <span class="token parameter variable">-f</span> utf-8 <span class="token parameter variable">-t</span> utf-8 <span class="token parameter variable">-x</span> <span class="token string">&#39;::Any-Lower; ::Any-NFD; [:Nonspacing Mark:] &gt;; ::Any-NFC; &#39;</span> <span class="token operator">&lt;</span> input.txt <span class="token operator">&gt;</span> output.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),Ln=e("li",null,[e("p",null,[o("拆分文件可以使用 "),e("code",null,"split"),o("（按大小拆分）和 "),e("code",null,"csplit"),o("（按模式拆分）。")])],-1),An={href:"http://www.fresse.org/dateutils/",target:"_blank",rel:"noopener noreferrer"},Wn=e("code",null,"dateutils",-1),Bn=e("code",null,"dateadd",-1),Pn=e("code",null,"datediff",-1),Un=e("code",null,"strptime",-1),Mn=l("<li><p>使用 <code>zless</code>、<code>zmore</code>、<code>zcat</code> 和 <code>zgrep</code> 对压缩过的文件进行操作。</p></li><li><p>文件属性可以通过 <code>chattr</code> 进行设置，它比文件权限更加底层。例如，为了保护文件不被意外删除，可以使用不可修改标记：<code>sudo chattr +i /critical/directory/or/file</code></p></li><li><p>使用 <code>getfacl</code> 和 <code>setfacl</code> 以保存和恢复文件权限。例如：</p></li>",3),zn=l(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>   getfacl <span class="token parameter variable">-R</span> /some/path <span class="token operator">&gt;</span> permissions.txt
   setfacl <span class="token parameter variable">--restore</span><span class="token operator">=</span>permissions.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),En=e("code",null,"truncate",-1),On={href:"https://zh.wikipedia.org/wiki/%E7%A8%80%E7%96%8F%E6%96%87%E4%BB%B6",target:"_blank",rel:"noopener noreferrer"},Tn=e("code",null,"fallocate",-1),In=e("code",null,"xfs_mkfile",-1),Nn=e("code",null,"mkfile",-1),jn=e("h2",{id:"系统调试",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#系统调试","aria-hidden":"true"},"#"),o(" 系统调试")],-1),qn=e("code",null,"curl",-1),$n=e("code",null,"curl -I",-1),Dn=e("code",null,"wget",-1),Gn={href:"https://github.com/jkbrzt/httpie",target:"_blank",rel:"noopener noreferrer"},Rn=e("code",null,"httpie",-1),Xn=l("<li><p>获取 CPU 和硬盘的使用状态，通常使用使用 <code>top</code>（<code>htop</code> 更佳），<code>iostat</code> 和 <code>iotop</code>。而 <code>iostat -mxz 15</code> 可以让你获悉 CPU 和每个硬盘分区的基本信息和性能表现。</p></li><li><p>使用 <code>netstat</code> 和 <code>ss</code> 查看网络连接的细节。</p></li>",2),Fn=e("code",null,"dstat",-1),Vn={href:"https://github.com/nicolargo/glances",target:"_blank",rel:"noopener noreferrer"},Hn=e("code",null,"glances",-1),Jn=e("li",null,[e("p",null,[o("若要了解内存状态，运行并理解 "),e("code",null,"free"),o(" 和 "),e("code",null,"vmstat"),o(" 的输出。值得留意的是“cached”的值，它指的是 Linux 内核用来作为文件缓存的内存大小，而与空闲内存无关。")])],-1),Yn=e("code",null,"kill -3 <pid>",-1),Kn=e("code",null,"jps",-1),Zn=e("code",null,"jstat",-1),Qn=e("code",null,"jstack",-1),es=e("code",null,"jmap",-1),os={href:"https://github.com/aragozin/jvm-tools",target:"_blank",rel:"noopener noreferrer"},ns={href:"http://www.bitwizard.nl/mtr/",target:"_blank",rel:"noopener noreferrer"},ss=e("code",null,"mtr",-1),ls={href:"https://dev.yorhel.nl/ncdu",target:"_blank",rel:"noopener noreferrer"},ts=e("code",null,"ncdu",-1),cs=e("code",null,"du -sh *",-1),ds={href:"http://www.ex-parrot.com/~pdw/iftop/",target:"_blank",rel:"noopener noreferrer"},as=e("code",null,"iftop",-1),is={href:"https://github.com/raboof/nethogs",target:"_blank",rel:"noopener noreferrer"},rs=e("code",null,"nethogs",-1),ps=e("li",null,[e("p",null,[e("code",null,"ab"),o(" 工具（Apache 中自带）可以简单粗暴地检查 web 服务器的性能。对于更复杂的负载测试，使用 "),e("code",null,"siege"),o("。")])],-1),us={href:"https://wireshark.org/",target:"_blank",rel:"noopener noreferrer"},hs=e("code",null,"wireshark",-1),_s={href:"https://www.wireshark.org/docs/wsug_html_chunked/AppToolstshark.html",target:"_blank",rel:"noopener noreferrer"},ms=e("code",null,"tshark",-1),gs={href:"http://ngrep.sourceforge.net/",target:"_blank",rel:"noopener noreferrer"},bs=e("code",null,"ngrep",-1),fs=e("li",null,[e("p",null,[o("了解 "),e("code",null,"strace"),o(" 和 "),e("code",null,"ltrace"),o("。这俩工具在你的程序运行失败、挂起甚至崩溃，而你却不知道为什么或你想对性能有个总体的认识的时候是非常有用的。注意 profile 参数（"),e("code",null,"-c"),o("）和附加到一个运行的进程参数 （"),e("code",null,"-p"),o("）。")])],-1),ks=e("code",null,"ldd",-1),vs={href:"http://www.catonmat.net/blog/ldd-arbitrary-code-execution/",target:"_blank",rel:"noopener noreferrer"},ws=l("<li><p>了解如何运用 <code>gdb</code> 连接到一个运行着的进程并获取它的堆栈轨迹。</p></li><li><p>学会使用 <code>/proc</code>。它在调试正在出现的问题的时候有时会效果惊人。比如：<code>/proc/cpuinfo</code>，<code>/proc/meminfo</code>，<code>/proc/cmdline</code>，<code>/proc/xxx/cwd</code>，<code>/proc/xxx/exe</code>，<code>/proc/xxx/fd/</code>，<code>/proc/xxx/smaps</code>（这里的 <code>xxx</code> 表示进程的 id 或 pid）。</p></li>",2),xs={href:"http://sebastien.godard.pagesperso-orange.fr/",target:"_blank",rel:"noopener noreferrer"},ys=e("code",null,"sar",-1),Ss=e("code",null,"stap",-1),Cs={href:"https://sourceware.org/systemtap/wiki",target:"_blank",rel:"noopener noreferrer"},Ls={href:"https://en.wikipedia.org/wiki/Perf_(Linux)",target:"_blank",rel:"noopener noreferrer"},As=e("code",null,"perf",-1),Ws={href:"https://github.com/draios/sysdig",target:"_blank",rel:"noopener noreferrer"},Bs=e("code",null,"sysdig",-1),Ps=l("<li><p>查看你当前使用的系统，使用 <code>uname</code>，<code>uname -a</code>（Unix／kernel 信息）或者 <code>lsb_release -a</code>（Linux 发行版信息）。</p></li><li><p>无论什么东西工作得很欢乐（可能是硬件或驱动问题）时可以试试 <code>dmesg</code>。</p></li><li><p>如果你删除了一个文件，但通过 <code>du</code> 发现没有释放预期的磁盘空间，请检查文件是否被进程占用：<br><code>lsof | grep deleted | grep &quot;filename-of-my-big-file&quot;</code></p></li>",3),Us=l(`<h2 id="单行脚本" tabindex="-1"><a class="header-anchor" href="#单行脚本" aria-hidden="true">#</a> 单行脚本</h2><p>一些命令组合的例子：</p><ul><li>当你需要对文本文件做集合交、并、差运算时，<code>sort</code> 和 <code>uniq</code> 会是你的好帮手。具体例子请参照代码后面的，此处假设 <code>a</code> 与 <code>b</code> 是两内容不同的文件。这种方式效率很高，并且在小文件和上 G 的文件上都能运用（注意尽管在 <code>/tmp</code> 在一个小的根分区上时你可能需要 <code>-T</code> 参数，但是实际上 <code>sort</code> 并不被内存大小约束），参阅前文中关于 <code>LC_ALL</code> 和 <code>sort</code> 的 <code>-u</code> 参数的部分。</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>      <span class="token function">sort</span> a b <span class="token operator">|</span> <span class="token function">uniq</span> <span class="token operator">&gt;</span> c   <span class="token comment"># c 是 a 并 b</span>
      <span class="token function">sort</span> a b <span class="token operator">|</span> <span class="token function">uniq</span> <span class="token parameter variable">-d</span> <span class="token operator">&gt;</span> c   <span class="token comment"># c 是 a 交 b</span>
      <span class="token function">sort</span> a b b <span class="token operator">|</span> <span class="token function">uniq</span> <span class="token parameter variable">-u</span> <span class="token operator">&gt;</span> c   <span class="token comment"># c 是 a - b</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用 <code>grep . *</code>（每行都会附上文件名）或者 <code>head -100 *</code>（每个文件有一个标题）来阅读检查目录下所有文件的内容。这在检查一个充满配置文件的目录（如 <code>/sys</code>、<code>/proc</code>、<code>/etc</code>）时特别好用。</li></ul><ul><li>计算文本文件第三列中所有数的和（可能比同等作用的 Python 代码快三倍且代码量少三倍）：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>      <span class="token function">awk</span> <span class="token string">&#39;{ x += $3 } END { print x }&#39;</span> myfile
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>如果你想在文件树上查看大小/日期，这可能看起来像递归版的 <code>ls -l</code> 但比 <code>ls -lR</code> 更易于理解：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>      <span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-type</span> f <span class="token parameter variable">-ls</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>假设你有一个类似于 web 服务器日志文件的文本文件，并且一个确定的值只会出现在某些行上，假设一个 <code>acct_id</code> 参数在 URI 中。如果你想计算出每个 <code>acct_id</code> 值有多少次请求，使用如下代码：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>      <span class="token function">egrep</span> <span class="token parameter variable">-o</span> <span class="token string">&#39;acct_id=[0-9]+&#39;</span> access.log <span class="token operator">|</span> <span class="token function">cut</span> <span class="token parameter variable">-d</span><span class="token operator">=</span> <span class="token parameter variable">-f2</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token operator">|</span> <span class="token function">uniq</span> <span class="token parameter variable">-c</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-rn</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>要持续监测文件改动，可以使用 <code>watch</code>，例如检查某个文件夹中文件的改变，可以用 <code>watch -d -n 2 &#39;ls -rtlh | tail&#39;</code>；或者在排查 WiFi 设置故障时要监测网络设置的更改，可以用 <code>watch -d -n 2 ifconfig</code>。</p></li><li><p>运行这个函数从这篇文档中随机获取一条技巧（解析 Markdown 文件并抽取项目）：</p></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>      <span class="token keyword">function</span> <span class="token function-name function">taocl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">curl</span> <span class="token parameter variable">-s</span> https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README-zh.md<span class="token operator">|</span>
          pandoc <span class="token parameter variable">-f</span> markdown <span class="token parameter variable">-t</span> html <span class="token operator">|</span>
          <span class="token function">iconv</span> <span class="token parameter variable">-f</span> <span class="token string">&#39;utf-8&#39;</span> <span class="token parameter variable">-t</span> <span class="token string">&#39;unicode&#39;</span> <span class="token operator">|</span>
          xmlstarlet fo <span class="token parameter variable">--html</span> <span class="token parameter variable">--dropdtd</span> <span class="token operator">|</span>
          xmlstarlet sel <span class="token parameter variable">-t</span> <span class="token parameter variable">-v</span> <span class="token string">&quot;(html/body/ul/li[count(p)&gt;0])[<span class="token environment constant">$RANDOM</span> mod last()+1]&quot;</span> <span class="token operator">|</span>
          xmlstarlet unesc <span class="token operator">|</span> <span class="token function">fmt</span> <span class="token parameter variable">-80</span>
      <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="冷门但有用" tabindex="-1"><a class="header-anchor" href="#冷门但有用" aria-hidden="true">#</a> 冷门但有用</h2>`,14),Ms=l("<li><p><code>expr</code>：计算表达式或正则匹配</p></li><li><p><code>m4</code>：简单的宏处理器</p></li><li><p><code>yes</code>：多次打印字符串</p></li><li><p><code>cal</code>：漂亮的日历</p></li><li><p><code>env</code>：执行一个命令（脚本文件中很有用）</p></li><li><p><code>printenv</code>：打印环境变量（调试时或在写脚本文件时很有用）</p></li><li><p><code>look</code>：查找以特定字符串开头的单词或行</p></li><li><p><code>cut</code>，<code>paste</code> 和 <code>join</code>：数据修改</p></li><li><p><code>fmt</code>：格式化文本段落</p></li><li><p><code>pr</code>：将文本格式化成页／列形式</p></li><li><p><code>fold</code>：包裹文本中的几行</p></li><li><p><code>column</code>：将文本格式化成多个对齐、定宽的列或表格</p></li><li><p><code>expand</code> 和 <code>unexpand</code>：制表符与空格之间转换</p></li><li><p><code>nl</code>：添加行号</p></li><li><p><code>seq</code>：打印数字</p></li><li><p><code>bc</code>：计算器</p></li><li><p><code>factor</code>：分解因数</p></li>",17),zs={href:"https://gnupg.org/",target:"_blank",rel:"noopener noreferrer"},Es=e("code",null,"gpg",-1),Os=e("li",null,[e("p",null,[e("code",null,"toe"),o("：terminfo 入口列表")])],-1),Ts=e("li",null,[e("p",null,[e("code",null,"nc"),o("：网络调试及数据传输")])],-1),Is=e("li",null,[e("p",null,[e("code",null,"socat"),o("：套接字代理，与 "),e("code",null,"netcat"),o(" 类似")])],-1),Ns={href:"https://github.com/mattthias/slurm",target:"_blank",rel:"noopener noreferrer"},js=e("code",null,"slurm",-1),qs=l("<li><p><code>dd</code>：文件或设备间传输数据</p></li><li><p><code>file</code>：确定文件类型</p></li><li><p><code>tree</code>：以树的形式显示路径和文件，类似于递归的 <code>ls</code></p></li><li><p><code>stat</code>：文件信息</p></li><li><p><code>time</code>：执行命令，并计算执行时间</p></li><li><p><code>timeout</code>：在指定时长范围内执行命令，并在规定时间结束后停止进程</p></li><li><p><code>lockfile</code>：使文件只能通过 <code>rm -f</code> 移除</p></li><li><p><code>logrotate</code>： 切换、压缩以及发送日志文件</p></li><li><p><code>watch</code>：重复运行同一个命令，展示结果并／或高亮有更改的部分</p></li>",9),$s={href:"https://github.com/joh/when-changed",target:"_blank",rel:"noopener noreferrer"},Ds=e("code",null,"when-changed",-1),Gs=e("code",null,"inotifywait",-1),Rs=e("code",null,"entr",-1),Xs=l("<li><p><code>tac</code>：反向输出文件</p></li><li><p><code>shuf</code>：文件中随机选取几行</p></li><li><p><code>comm</code>：一行一行的比较排序过的文件</p></li><li><p><code>strings</code>：从二进制文件中抽取文本</p></li><li><p><code>tr</code>：转换字母</p></li><li><p><code>iconv</code> 或 <code>uconv</code>：文本编码转换</p></li><li><p><code>split</code> 和 <code>csplit</code>：分割文件</p></li><li><p><code>sponge</code>：在写入前读取所有输入，在读取文件后再向同一文件写入时比较有用，例如 <code>grep -v something some-file | sponge some-file</code></p></li><li><p><code>units</code>：将一种计量单位转换为另一种等效的计量单位（参阅 <code>/usr/share/units/definitions.units</code>）</p></li><li><p><code>apg</code>：随机生成密码</p></li><li><p><code>xz</code>：高比例的文件压缩</p></li><li><p><code>ldd</code>：动态库信息</p></li><li><p><code>nm</code>：提取 obj 文件中的符号</p></li>",13),Fs=e("code",null,"ab",-1),Vs={href:"https://github.com/wg/wrk",target:"_blank",rel:"noopener noreferrer"},Hs=e("code",null,"wrk",-1),Js=e("li",null,[e("p",null,[e("code",null,"strace"),o("：调试系统调用")])],-1),Ys={href:"http://www.bitwizard.nl/mtr/",target:"_blank",rel:"noopener noreferrer"},Ks=e("code",null,"mtr",-1),Zs=e("li",null,[e("p",null,[e("code",null,"cssh"),o("：可视化的并发 shell")])],-1),Qs=e("li",null,[e("p",null,[e("code",null,"rsync"),o("：通过 ssh 或本地文件系统同步文件和文件夹")])],-1),el={href:"https://wireshark.org/",target:"_blank",rel:"noopener noreferrer"},ol=e("code",null,"wireshark",-1),nl={href:"https://www.wireshark.org/docs/wsug_html_chunked/AppToolstshark.html",target:"_blank",rel:"noopener noreferrer"},sl=e("code",null,"tshark",-1),ll={href:"http://ngrep.sourceforge.net/",target:"_blank",rel:"noopener noreferrer"},tl=e("code",null,"ngrep",-1),cl=e("li",null,[e("p",null,[e("code",null,"host"),o(" 和 "),e("code",null,"dig"),o("：DNS 查找")])],-1),dl=e("li",null,[e("p",null,[e("code",null,"lsof"),o("：列出当前系统打开文件的工具以及查看端口信息")])],-1),al=e("li",null,[e("p",null,[e("code",null,"dstat"),o("：系统状态查看")])],-1),il={href:"https://github.com/nicolargo/glances",target:"_blank",rel:"noopener noreferrer"},rl=e("code",null,"glances",-1),pl=l("<li><p><code>iostat</code>：硬盘使用状态</p></li><li><p><code>mpstat</code>： CPU 使用状态</p></li><li><p><code>vmstat</code>： 内存使用状态</p></li><li><p><code>htop</code>：top 的加强版</p></li><li><p><code>last</code>：登入记录</p></li><li><p><code>w</code>：查看处于登录状态的用户</p></li><li><p><code>id</code>：用户/组 ID 信息</p></li>",7),ul={href:"http://sebastien.godard.pagesperso-orange.fr/",target:"_blank",rel:"noopener noreferrer"},hl=e("code",null,"sar",-1),_l={href:"http://www.ex-parrot.com/~pdw/iftop/",target:"_blank",rel:"noopener noreferrer"},ml=e("code",null,"iftop",-1),gl={href:"https://github.com/raboof/nethogs",target:"_blank",rel:"noopener noreferrer"},bl=e("code",null,"nethogs",-1),fl=l("<li><p><code>ss</code>：套接字数据</p></li><li><p><code>dmesg</code>：引导及系统错误信息</p></li><li><p><code>sysctl</code>： 在内核运行时动态地查看和修改内核的运行参数</p></li><li><p><code>hdparm</code>：SATA/ATA 磁盘更改及性能分析</p></li><li><p><code>lsblk</code>：列出块设备信息：以树形展示你的磁盘以及磁盘分区信息</p></li><li><p><code>lshw</code>，<code>lscpu</code>，<code>lspci</code>，<code>lsusb</code> 和 <code>dmidecode</code>：查看硬件信息，包括 CPU、BIOS、RAID、显卡、USB 设备等</p></li><li><p><code>lsmod</code> 和 <code>modinfo</code>：列出内核模块，并显示其细节</p></li><li><p><code>fortune</code>，<code>ddate</code> 和 <code>sl</code>：额，这主要取决于你是否认为蒸汽火车和莫名其妙的名人名言是否“有用”</p></li>",8),kl=l('<h2 id="仅限-os-x-系统" tabindex="-1"><a class="header-anchor" href="#仅限-os-x-系统" aria-hidden="true">#</a> 仅限 OS X 系统</h2><p>以下是<em>仅限于</em> OS X 系统的技巧。</p><ul><li><p>用 <code>brew</code> （Homebrew）或者 <code>port</code> （MacPorts）进行包管理。这些可以用来在 OS X 系统上安装以上的大多数命令。</p></li><li><p>用 <code>pbcopy</code> 复制任何命令的输出到桌面应用，用 <code>pbpaste</code> 粘贴输入。</p></li><li><p>若要在 OS X 终端中将 Option 键视为 alt 键（例如在上面介绍的 <strong>alt-b</strong>、<strong>alt-f</strong> 等命令中用到），打开 偏好设置 -&gt; 描述文件 -&gt; 键盘 并勾选“使用 Option 键作为 Meta 键”。</p></li><li><p>用 <code>open</code> 或者 <code>open -a /Applications/Whatever.app</code> 使用桌面应用打开文件。</p></li><li><p>Spotlight：用 <code>mdfind</code> 搜索文件，用 <code>mdls</code> 列出元数据（例如照片的 EXIF 信息）。</p></li><li><p>注意 OS X 系统是基于 BSD UNIX 的，许多命令（例如 <code>ps</code>，<code>ls</code>，<code>tail</code>，<code>awk</code>，<code>sed</code>）都和 Linux 中有微妙的不同（ Linux 很大程度上受到了 System V-style Unix 和 GNU 工具影响）。你可以通过标题为 &quot;BSD General Commands Manual&quot; 的 man 页面发现这些不同。在有些情况下 GNU 版本的命令也可能被安装（例如 <code>gawk</code> 和 <code>gsed</code> 对应 GNU 中的 awk 和 sed ）。如果要写跨平台的 Bash 脚本，避免使用这些命令（例如，考虑 Python 或者 <code>perl</code> ）或者经过仔细的测试。</p></li><li><p>用 <code>sw_vers</code> 获取 OS X 的版本信息。</p></li></ul><h2 id="仅限-windows-系统" tabindex="-1"><a class="header-anchor" href="#仅限-windows-系统" aria-hidden="true">#</a> 仅限 Windows 系统</h2><p>以下是<em>仅限于</em> Windows 系统的技巧。</p><h3 id="在-winodws-下获取-unix-工具" tabindex="-1"><a class="header-anchor" href="#在-winodws-下获取-unix-工具" aria-hidden="true">#</a> 在 Winodws 下获取 Unix 工具</h3>',6),vl={href:"https://cygwin.com/",target:"_blank",rel:"noopener noreferrer"},wl={href:"https://msdn.microsoft.com/commandline/wsl/about",target:"_blank",rel:"noopener noreferrer"},xl={href:"http://www.mingw.org/",target:"_blank",rel:"noopener noreferrer"},yl={href:"http://www.mingw.org/wiki/msys",target:"_blank",rel:"noopener noreferrer"},Sl={href:"https://github.com/dthree/cash",target:"_blank",rel:"noopener noreferrer"},Cl=e("h3",{id:"实用-windows-命令行工具",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#实用-windows-命令行工具","aria-hidden":"true"},"#"),o(" 实用 Windows 命令行工具")],-1),Ll=l("<li><p>可以使用 <code>wmic</code> 在命令行环境下给大部分 Windows 系统管理任务编写脚本以及执行这些任务。</p></li><li><p>Windows 实用的原生命令行网络工具包括 <code>ping</code>，<code>ipconfig</code>，<code>tracert</code>，和 <code>netstat</code>。</p></li>",2),Al=e("code",null,"Rundll32",-1),Wl={href:"http://www.thewindowsclub.com/rundll32-shortcut-commands-windows",target:"_blank",rel:"noopener noreferrer"},Bl=e("h3",{id:"cygwin-技巧",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#cygwin-技巧","aria-hidden":"true"},"#"),o(" Cygwin 技巧")],-1),Pl=l("<li><p>通过 Cygwin 的包管理器来安装额外的 Unix 程序。</p></li><li><p>使用 <code>mintty</code> 作为你的命令行窗口。</p></li><li><p>要访问 Windows 剪贴板，可以通过 <code>/dev/clipboard</code>。</p></li><li><p>运行 <code>cygstart</code> 以通过默认程序打开一个文件。</p></li><li><p>要访问 Windows 注册表，可以使用 <code>regtool</code>。</p></li><li><p>注意 Windows 驱动器路径 <code>C:\\</code> 在 Cygwin 中用 <code>/cygdrive/c</code> 代表，而 Cygwin 的 <code>/</code> 代表 Windows 中的 <code>C:\\cygwin</code>。要转换 Cygwin 和 Windows 风格的路径可以用 <code>cygpath</code>。这在需要调用 Windows 程序的脚本里很有用。</p></li><li><p>学会使用 <code>wmic</code>，你就可以从命令行执行大多数 Windows 系统管理任务，并编成脚本。</p></li>",7),Ul={href:"https://github.com/dthree/cash",target:"_blank",rel:"noopener noreferrer"},Ml={href:"http://www.mingw.org/",target:"_blank",rel:"noopener noreferrer"},zl={href:"http://www.mingw.org/wiki/msys",target:"_blank",rel:"noopener noreferrer"},El=e("h2",{id:"更多资源",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#更多资源","aria-hidden":"true"},"#"),o(" 更多资源")],-1),Ol={href:"https://github.com/alebcay/awesome-shell",target:"_blank",rel:"noopener noreferrer"},Tl={href:"https://github.com/herrbischoff/awesome-osx-command-line",target:"_blank",rel:"noopener noreferrer"},Il={href:"http://redsymbol.net/articles/unofficial-bash-strict-mode/",target:"_blank",rel:"noopener noreferrer"},Nl={href:"https://github.com/koalaman/shellcheck",target:"_blank",rel:"noopener noreferrer"},jl={href:"http://www.dwheeler.com/essays/filenames-in-shell.html",target:"_blank",rel:"noopener noreferrer"},ql={href:"http://datascienceatthecommandline.com/#tools",target:"_blank",rel:"noopener noreferrer"},$l=l('<h2 id="免责声明" tabindex="-1"><a class="header-anchor" href="#免责声明" aria-hidden="true">#</a> 免责声明</h2><p>除去特别小的工作，你编写的代码应当方便他人阅读。能力往往伴随着责任，你 <em>有能力</em> 在 Bash 中玩一些奇技淫巧并不意味着你应该去做！😉</p><h2 id="授权条款" tabindex="-1"><a class="header-anchor" href="#授权条款" aria-hidden="true">#</a> 授权条款</h2><figure><img src="http://creativecommons.org/licenses/by-sa/4.0/" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>',4),Dl={href:"http://creativecommons.org/licenses/by-sa/4.0/",target:"_blank",rel:"noopener noreferrer"};function Gl(Rl,Xl){const n=c("ExternalLinkIcon");return d(),a("div",null,[r,p,e("ul",null,[e("li",null,[e("a",u,[o("查看 Linux 命令帮助信息"),s(n)]),o(" - 关键词："),h,o(", "),_,o(", "),m,o(", "),g,o(", "),b,o(", "),f]),e("li",null,[e("a",k,[o("Linux 文件目录管理"),s(n)]),o(" - 关键词："),v,o(", "),w,o(", "),x,o(", "),y,o(", "),S,o(", "),C,o(", "),L,o(", "),A,o(", "),W,o(", "),B,o(", "),P,o(", "),U,o(", "),M,o(", "),z,o(", "),E,o(", "),O,o(", "),T,o(", "),I]),e("li",null,[e("a",N,[o("Linux 文件内容查看命令"),s(n)]),o(" - 关键词："),j,o(", "),q,o(", "),$,o(", "),D,o(", "),G,o(", "),R,o(", "),X,o(", "),F]),e("li",null,[e("a",V,[o("Linux 文件压缩和解压"),s(n)]),o(" - 关键词："),H,o(", "),J,o(", "),Y,o(", "),K]),e("li",null,[e("a",Z,[o("Linux 用户管理"),s(n)]),o(" - 关键词："),Q,o(", "),ee,o(", "),oe,o(", "),ne,o(", "),se,o(", "),le,o(", "),te,o(", "),ce,o(", "),de]),e("li",null,[e("a",ae,[o("Linux 系统管理"),s(n)]),o(" - 关键词："),ie,o(", "),re,o(", "),pe,o(", "),ue,o(", "),he,o(", "),_e,o(", "),me,o(", "),ge,o(", "),be,o(", "),fe,o(", "),ke]),e("li",null,[e("a",ve,[o("Linux 网络管理"),s(n)]),o(" - 关键词：关键词："),we,o(", "),xe,o(", "),ye,o(", "),Se,o(", "),Ce,o(", "),Le,o(", "),Ae,o(", "),We,o(", "),Be,o(", "),Pe,o(", "),Ue,o(", "),Me,o(", "),ze,o(", "),Ee,o("/"),Oe,o(", "),Te,o(", "),Ie,o(", "),Ne]),e("li",null,[e("a",je,[o("Linux 硬件管理"),s(n)]),o(" - 关键词："),qe,o(", "),$e,o(", "),De,o(", "),Ge,o(", "),Re]),e("li",null,[e("a",Xe,[o("Linux 软件管理"),s(n)]),o(" - 关键词："),Fe,o(", "),Ve,o(", "),He])]),Je,e("ul",null,[Ye,e("li",null,[e("p",null,[o("可以把别名、shell 选项和常用函数保存在 "),Ke,o("，具体看下这篇"),e("a",Ze,[o("文章"),s(n)]),o("。这样做的话你就可以在所有 shell 会话中使用你的设定。")])]),Qe]),eo,e("ul",null,[oo,e("li",null,[e("p",null,[o("使用 "),no,o(" 或 "),e("a",so,[lo,s(n)]),o(" 来使用多份屏幕，当你在使用 ssh 时（保存 session 信息）将尤为有用。而 "),to,o(" 可以为它们提供更多的信息和易用的管理工具。另一个轻量级的 session 持久化解决方案是 "),e("a",co,[ao,s(n)]),o("。")])]),io,ro]),po,e("ul",null,[uo,e("li",null,[e("p",null,[o("考虑使用 "),e("a",ho,[_o,s(n)]),o(" 作为 ssh 的替代品，它使用 UDP 协议。它可以避免连接被中断并且对带宽需求更小，但它需要在服务端做相应的配置。")])]),mo]),go,e("ul",null,[e("li",null,[e("p",null,[o("使用 "),e("a",bo,[fo,s(n)]),o(" 或者 "),e("a",ko,[vo,s(n)]),o(" 可以交互式地从另一个命令输出中选取值。")])]),e("li",null,[e("p",null,[o("使用 "),wo,o("（"),e("a",xo,[o("PathPicker"),s(n)]),o("）可以与基于另一个命令(例如 "),yo,o("）输出的文件交互。")])]),So,e("li",null,[e("p",null,[o("了解命令行的 "),e("a",Co,[o("128K 限制"),s(n)]),o("。使用通配符匹配大量文件名时，常会遇到“Argument list too long”的错误信息。（这种情况下换用 "),Lo,o(" 或 "),Ao,o(" 通常可以解决。）")])]),Wo]),Bo,e("ul",null,[Po,e("li",null,[e("p",null,[o("使用 "),e("a",Uo,[Mo,s(n)]),o(" 在源代码或数据文件里检索（"),zo,o(" 同样可以做到，但相比之下 "),Eo,o(" 更加先进）。")])]),Oo,e("li",null,[e("p",null,[o("Markdown，HTML，以及所有文档格式之间的转换，试试 "),e("a",To,[Io,s(n)]),o("。")])]),No,e("li",null,[e("p",null,[o("使用 "),e("a",jo,[qo,s(n)]),o(" 处理 JSON。")])]),e("li",null,[e("p",null,[o("使用 "),e("a",$o,[Do,s(n)]),o(" 处理 YAML。")])]),e("li",null,[e("p",null,[o("要处理 Excel 或 CSV 文件的话，"),e("a",Go,[o("csvkit"),s(n)]),o(" 提供了 "),Ro,o("，"),Xo,o("，"),Fo,o("，"),Vo,o(" 等方便易用的工具。")])]),e("li",null,[e("p",null,[o("当你要处理 Amazon S3 相关的工作的时候，"),e("a",Ho,[Jo,s(n)]),o(" 是一个很方便的工具而 "),e("a",Yo,[Ko,s(n)]),o(" 的效率更高。Amazon 官方提供的 "),e("a",Zo,[Qo,s(n)]),o(" 以及 "),e("a",en,[on,s(n)]),o(" 是其他 AWS 相关工作的基础，值得学习。")])]),nn,e("li",null,[e("p",null,[o("要进行一些复杂的计算，比如分组、逆序和一些其他的统计分析，可以考虑使用 "),e("a",sn,[ln,s(n)]),o("。")])]),tn]),cn,e("ul",null,[e("li",null,[o("使用 "),e("a",dn,[an,s(n)]),o(" 来批量重命名文件，或是在多个文件中搜索替换内容。（有些时候 "),rn,o(" 命令也可以批量重命名，但要注意，它在不同 Linux 发行版中的功能并不完全一样。）")])]),pn,e("ul",null,[e("li",null,[o("根据 man 页面的描述，"),un,o(" 是一个快速且非常灵活的文件复制工具。它闻名于设备之间的文件同步，但其实它在本地情况下也同样有用。在安全设置允许下，用 "),hn,o(" 代替 "),_n,o(" 可以实现文件续传，而不用重新从头开始。它同时也是删除大量文件的"),e("a",mn,[o("最快方法"),s(n)]),o("之一：")])]),gn,e("ul",null,[e("li",null,[e("p",null,[o("若要在复制文件时获取当前进度，可使用 "),bn,o("，"),e("a",fn,[kn,s(n)]),o("，"),e("a",vn,[wn,s(n)]),o("，"),xn,o("。若所执行的复制为 block 块拷贝，可以使用 "),yn,o("。")])]),Sn]),Cn,e("ul",null,[Ln,e("li",null,[e("p",null,[o("操作日期和时间表达式，可以用 "),e("a",An,[Wn,s(n)]),o(" 中的 "),Bn,o("、"),Pn,o("、"),Un,o(" 等工具。")])]),Mn]),zn,e("ul",null,[e("li",null,[o("为了高效地创建空文件，请使用 "),En,o("（创建"),e("a",On,[o("稀疏文件"),s(n)]),o("），"),Tn,o("（用于 ext4，xfs，btrf 和 ocfs2 文件系统），"),In,o("（适用于几乎所有的文件系统，包含在 xfsprogs 包中），"),Nn,o("（用于类 Unix 操作系统，比如 Solaris 和 Mac OS）。")])]),jn,e("ul",null,[e("li",null,[e("p",null,[qn,o(" 和 "),$n,o(" 可以被轻松地应用于 web 调试中，它们的好兄弟 "),Dn,o(" 也是如此，或者也可以试试更潮的 "),e("a",Gn,[Rn,s(n)]),o("。")])]),Xn,e("li",null,[e("p",null,[Fn,o(" 在你想要对系统的现状有一个粗略的认识时是非常有用的。然而若要对系统有一个深度的总体认识，使用 "),e("a",Vn,[Hn,s(n)]),o("，它会在一个终端窗口中向你提供一些系统级的数据。")])]),Jn,e("li",null,[e("p",null,[o("Java 系统调试则是一件截然不同的事，一个可以用于 Oracle 的 JVM 或其他 JVM 上的调试的技巧是你可以运行 "),Yn,o(" 同时一个完整的栈轨迹和堆概述（包括 GC 的细节）会被保存到标准错误或是日志文件。JDK 中的 "),Kn,o("，"),Zn,o("，"),Qn,o("，"),es,o(" 很有用。"),e("a",os,[o("SJK tools"),s(n)]),o(" 更高级。")])]),e("li",null,[e("p",null,[o("使用 "),e("a",ns,[ss,s(n)]),o(" 去跟踪路由，用于确定网络问题。")])]),e("li",null,[e("p",null,[o("用 "),e("a",ls,[ts,s(n)]),o(" 来查看磁盘使用情况，它比寻常的命令，如 "),cs,o("，更节省时间。")])]),e("li",null,[e("p",null,[o("查找正在使用带宽的套接字连接或进程，使用 "),e("a",ds,[as,s(n)]),o(" 或 "),e("a",is,[rs,s(n)]),o("。")])]),ps,e("li",null,[e("p",null,[e("a",us,[hs,s(n)]),o("，"),e("a",_s,[ms,s(n)]),o(" 和 "),e("a",gs,[bs,s(n)]),o(" 可用于复杂的网络调试。")])]),fs,e("li",null,[e("p",null,[o("了解使用 "),ks,o(" 来检查共享库。但是"),e("a",vs,[o("永远不要在不信任的文件上运行"),s(n)]),o("。")])]),ws,e("li",null,[e("p",null,[o("当调试一些之前出现的问题的时候，"),e("a",xs,[ys,s(n)]),o(" 非常有用。它展示了 cpu、内存以及网络等的历史数据。")])]),e("li",null,[e("p",null,[o("关于更深层次的系统分析以及性能分析，看看 "),Ss,o("（"),e("a",Cs,[o("SystemTap"),s(n)]),o("），"),e("a",Ls,[As,s(n)]),o("，以及"),e("a",Ws,[Bs,s(n)]),o("。")])]),Ps]),Us,e("ul",null,[Ms,e("li",null,[e("p",null,[e("a",zs,[Es,s(n)]),o("：加密并签名文件")])]),Os,Ts,Is,e("li",null,[e("p",null,[e("a",Ns,[js,s(n)]),o("：网络流量可视化")])]),qs,e("li",null,[e("p",null,[e("a",$s,[Ds,s(n)]),o("：当检测到文件更改时执行指定命令。参阅 "),Gs,o(" 和 "),Rs,o("。")])]),Xs,e("li",null,[e("p",null,[Fs,o(" 或 "),e("a",Vs,[Hs,s(n)]),o("：web 服务器性能分析")])]),Js,e("li",null,[e("p",null,[e("a",Ys,[Ks,s(n)]),o("：更好的网络调试跟踪工具")])]),Zs,Qs,e("li",null,[e("p",null,[e("a",el,[ol,s(n)]),o(" 和 "),e("a",nl,[sl,s(n)]),o("：抓包和网络调试工具")])]),e("li",null,[e("p",null,[e("a",ll,[tl,s(n)]),o("：网络层的 grep")])]),cl,dl,al,e("li",null,[e("p",null,[e("a",il,[rl,s(n)]),o("：高层次的多子系统总览")])]),pl,e("li",null,[e("p",null,[e("a",ul,[hl,s(n)]),o("：系统历史数据")])]),e("li",null,[e("p",null,[e("a",_l,[ml,s(n)]),o(" 或 "),e("a",gl,[bl,s(n)]),o("：套接字及进程的网络利用情况")])]),fl]),kl,e("ul",null,[e("li",null,[e("p",null,[o("可以安装 "),e("a",vl,[o("Cygwin"),s(n)]),o(" 允许你在 Microsoft Windows 中体验 Unix shell 的威力。这样的话，本文中介绍的大多数内容都将适用。")])]),e("li",null,[e("p",null,[o("在 Windows 10 上，你可以使用 "),e("a",wl,[o("Bash on Ubuntu on Windows"),s(n)]),o("，它提供了一个熟悉的 Bash 环境，包含了不少 Unix 命令行工具。好处是它允许 Linux 上编写的程序在 Windows 上运行，而另一方面，Windows 上编写的程序却无法在 Bash 命令行中运行。")])]),e("li",null,[e("p",null,[o("如果你在 Windows 上主要想用 GNU 开发者工具（例如 GCC），可以考虑 "),e("a",xl,[o("MinGW"),s(n)]),o(" 以及它的 "),e("a",yl,[o("MSYS"),s(n)]),o(" 包，这个包提供了例如 bash，gawk，make 和 grep 的工具。MSYS 并不包含所有可以与 Cygwin 媲美的特性。当制作 Unix 工具的原生 Windows 端口时 MinGW 将特别地有用。")])]),e("li",null,[e("p",null,[o("另一个在 Windows 下实现接近 Unix 环境外观效果的选项是 "),e("a",Sl,[o("Cash"),s(n)]),o("。注意在此环境下只有很少的 Unix 命令和命令行可用。")])])]),Cl,e("ul",null,[Ll,e("li",null,[e("p",null,[o("可以使用 "),Al,o(" 命令来实现"),e("a",Wl,[o("许多有用的 Windows 任务"),s(n)]),o(" 。")])])]),Bl,e("ul",null,[Pl,e("li",null,[e("p",null,[o("要在 Windows 下获得 Unix 的界面和体验，另一个办法是使用 "),e("a",Ul,[o("Cash"),s(n)]),o("。需要注意的是，这个环境支持的 Unix 命令和命令行参数非常少。")])]),e("li",null,[e("p",null,[o("要在 Windows 上获取 GNU 开发者工具（比如 GCC）的另一个办法是使用 "),e("a",Ml,[o("MinGW"),s(n)]),o(" 以及它的 "),e("a",zl,[o("MSYS"),s(n)]),o(" 软件包，该软件包提供了 bash、gawk、make、grep 等工具。然而 MSYS 提供的功能没有 Cygwin 完善。MinGW 在创建 Unix 工具的 Windows 原生移植方面非常有用。")])])]),El,e("ul",null,[e("li",null,[e("a",Ol,[o("awesome-shell"),s(n)]),o("：一份精心组织的命令行工具及资源的列表。")]),e("li",null,[e("a",Tl,[o("awesome-osx-command-line"),s(n)]),o("：一份针对 OS X 命令行的更深入的指南。")]),e("li",null,[e("a",Il,[o("Strict mode"),s(n)]),o("：为了编写更好的脚本文件。")]),e("li",null,[e("a",Nl,[o("shellcheck"),s(n)]),o("：一个静态 shell 脚本分析工具，本质上是 bash／sh／zsh 的 lint。")]),e("li",null,[e("a",jl,[o("Filenames and Pathnames in Shell"),s(n)]),o("：有关如何在 shell 脚本里正确处理文件名的细枝末节。")]),e("li",null,[e("a",ql,[o("Data Science at the Command Line"),s(n)]),o("：用于数据科学的一些命令和工具，摘自同名书籍。")])]),$l,e("p",null,[o("本文使用授权协议 "),e("a",Dl,[o("Creative Commons Attribution-ShareAlike 4.0 International License"),s(n)]),o("。")])])}const Hl=t(i,[["render",Gl],["__file","index.html.vue"]]);export{Hl as default};
