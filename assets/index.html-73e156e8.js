import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a as n,b as s,d as t,e as p}from"./app-ebb8ae7c.js";const i={},u=p('<h1 id="java-二进制序列化" tabindex="-1"><a class="header-anchor" href="#java-二进制序列化" aria-hidden="true">#</a> Java 二进制序列化</h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><h3 id="为什么需要二进制序列化库" tabindex="-1"><a class="header-anchor" href="#为什么需要二进制序列化库" aria-hidden="true">#</a> 为什么需要二进制序列化库</h3><p>原因很简单，就是 Java 默认的序列化机制（<code>ObjectInputStream</code> 和 <code>ObjectOutputStream</code>）具有很多缺点。</p>',4),r={href:"https://dunwu.github.io/waterdrop/pages/ce9efc62/",target:"_blank",rel:"noopener noreferrer"},k=p('<p>Java 自身的序列化方式具有以下缺点：</p><ul><li><strong>无法跨语言使用</strong>。这点最为致命，对于很多需要跨语言通信的异构系统来说，不能跨语言序列化，即意味着完全无法通信（彼此数据不能识别，当然无法交互了）。</li><li><strong>序列化的性能不高</strong>。序列化后的数据体积较大，这大大影响存储和传输的效率。</li><li>序列化一定需要实现 <code>Serializable</code> 接口。</li><li>需要关注 <code>serialVersionUID</code>。</li></ul><p>引入二进制序列化库就是为了解决这些问题，这在 RPC 应用中尤为常见。</p><h3 id="主流序列化库简介" tabindex="-1"><a class="header-anchor" href="#主流序列化库简介" aria-hidden="true">#</a> 主流序列化库简介</h3><h4 id="protobuf" tabindex="-1"><a class="header-anchor" href="#protobuf" aria-hidden="true">#</a> Protobuf</h4>',5),d={href:"https://developers.google.com/protocol-buffers/",target:"_blank",rel:"noopener noreferrer"},m=n("br",null,null,-1),v=n("br",null,null,-1),b=n("br",null,null,-1),y=p('<p>优点：</p><ul><li>序列化后体积相比 JSON、Hessian 小很多</li><li>序列化反序列化速度很快，不需要通过反射获取类型</li><li>语言和平台无关（基于 IDL），IDL 能清晰地描述语义，所以足以帮助并保证应用程序之间的类型不会丢失，无需类似 XML 解析器</li><li>消息格式升级和兼容性不错，可以做到后向兼容</li><li>支持 Java, C++, Python 三种语言</li></ul><p>缺点：</p><ul><li>Protobuf 对于具有反射和动态能力的语言来说，用起来很费劲。</li></ul><h4 id="thrift" tabindex="-1"><a class="header-anchor" href="#thrift" aria-hidden="true">#</a> Thrift</h4>',5),h={href:"https://github.com/apache/thrift",target:"_blank",rel:"noopener noreferrer"},g=n("p",null,"它具有以下特性：",-1),f=n("ul",null,[n("li",null,"支持多种语言（目前支持 28 种语言，如：C++、go、Java、Php、Python、Ruby 等等）。"),n("li",null,"使用了组建大型数据交换及存储工具，对于大型系统中的内部数据传输，相对于 Json 和 xml 在性能上和传输大小上都有明显的优势。"),n("li",null,"支持三种比较典型的编码方式（通用二进制编码，压缩二进制编码，优化的可选字段压缩编解码）。")],-1),w=n("h4",{id:"hessian",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#hessian","aria-hidden":"true"},"#"),s(" Hessian")],-1),_={href:"http://hessian.caucho.com/",target:"_blank",rel:"noopener noreferrer"},S=n("br",null,null,-1),T=n("br",null,null,-1),B=p('<p>RPC 框架 Dubbo 就支持 Thrift 和 Hession。</p><p>它具有以下特性：</p><ul><li>支持多种语言。如：Java、Python、C++、C#、PHP、Ruby 等。</li><li>相对其他二进制序列化库较慢。</li></ul><p>Hessian 本身也有问题，官方版本对 Java 里面一些常见对象的类型不支持：</p><ul><li>Linked 系列，LinkedHashMap、LinkedHashSet 等，但是可以通过扩展 CollectionDeserializer 类修复；</li><li>Locale 类，可以通过扩展 ContextSerializerFactory 类修复；</li><li>Byte/Short 反序列化的时候变成 Integer。</li></ul><h4 id="kryo" tabindex="-1"><a class="header-anchor" href="#kryo" aria-hidden="true">#</a> Kryo</h4>',6),I={href:"https://github.com/EsotericSoftware/kryo",target:"_blank",rel:"noopener noreferrer"},j=n("p",null,"它具有以下特性：",-1),x=n("ul",null,[n("li",null,"速度快，序列化体积小"),n("li",null,"官方不支持 Java 以外的其他语言")],-1),F=n("h4",{id:"fst",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#fst","aria-hidden":"true"},"#"),s(" FST")],-1),z={href:"https://github.com/RuedigerMoeller/fast-serialization",target:"_blank",rel:"noopener noreferrer"},C=p('<p>它具有以下特性：</p><ul><li>近乎于 100% 兼容 JDK 序列化，且比 JDK 原序列化方式快 10 倍</li><li>2.17 开始与 Android 兼容</li><li>（可选）2.29 开始支持将任何可序列化的对象图编码/解码为 JSON（包括共享引用）</li></ul><h4 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h4><p>了解了以上这些常见的二进制序列化库的特性。在技术选型时，我们就可以做到有的放矢。</p><p><strong>（1）选型参考依据</strong></p><p>对于二进制序列化库，我们的选型考量一般有以下几点：</p><ul><li><strong>是否支持跨语言</strong><ul><li>根据业务实际需求来决定。一般来说，支持跨语言，为了兼容，使用复杂度上一般会更高一些。</li></ul></li><li><strong>序列化、反序列化的性能</strong></li><li><strong>类库是否轻量化，API 是否简单易懂</strong></li></ul><p><strong>（2）选型建议</strong></p>',8),O=n("p",null,"如果需要跨语言通信，那么可以考虑：Protobuf、Thrift、Hession。",-1),A={href:"https://github.com/apache/thrift",target:"_blank",rel:"noopener noreferrer"},D={href:"https://github.com/protocolbuffers/protobuf",target:"_blank",rel:"noopener noreferrer"},J={href:"http://hessian.caucho.com/doc/hessian-overview.xtp",target:"_blank",rel:"noopener noreferrer"},K={href:"https://github.com/EsotericSoftware/kryo",target:"_blank",rel:"noopener noreferrer"},P={href:"https://github.com/RuedigerMoeller/fast-serialization",target:"_blank",rel:"noopener noreferrer"},E=p(`<h2 id="fst-应用" tabindex="-1"><a class="header-anchor" href="#fst-应用" aria-hidden="true">#</a> FST 应用</h2><h3 id="引入依赖" tabindex="-1"><a class="header-anchor" href="#引入依赖" aria-hidden="true">#</a> 引入依赖</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>de.ruedigermoeller<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>fst<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.56<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="fst-api" tabindex="-1"><a class="header-anchor" href="#fst-api" aria-hidden="true">#</a> FST API</h3><p>示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>nustaq<span class="token punctuation">.</span>serialization<span class="token punctuation">.</span></span><span class="token class-name">FSTConfiguration</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">StandardCharsets</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Base64</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FstDemo</span> <span class="token punctuation">{</span>

 <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">FSTConfiguration</span> <span class="token constant">DEFAULT_CONFIG</span> <span class="token operator">=</span> <span class="token class-name">FSTConfiguration</span><span class="token punctuation">.</span><span class="token function">createDefaultConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token doc-comment comment">/**
  * 将对象序列化为 byte 数组
  *
  * <span class="token keyword">@param</span> <span class="token parameter">obj</span> 任意对象
  * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> 对象的类型
  * <span class="token keyword">@return</span> 序列化后的 byte 数组
  */</span>
 <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">writeToBytes</span><span class="token punctuation">(</span><span class="token class-name">T</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token constant">DEFAULT_CONFIG</span><span class="token punctuation">.</span><span class="token function">asByteArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>

 <span class="token doc-comment comment">/**
  * 将对象序列化为 byte 数组后，再使用 Base64 编码
  *
  * <span class="token keyword">@param</span> <span class="token parameter">obj</span> 任意对象
  * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> 对象的类型
  * <span class="token keyword">@return</span> 序列化后的字符串
  */</span>
 <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">String</span> <span class="token function">writeToString</span><span class="token punctuation">(</span><span class="token class-name">T</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token function">writeToBytes</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>

 <span class="token doc-comment comment">/**
  * 将 byte 数组反序列化为原对象
  *
  * <span class="token keyword">@param</span> <span class="token parameter">bytes</span> <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">writeToBytes</span></span><span class="token punctuation">}</span> 方法序列化后的 byte 数组
  * <span class="token keyword">@param</span> <span class="token parameter">clazz</span> 原对象的类型
  * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span>   原对象的类型
  * <span class="token keyword">@return</span> 原对象
  */</span>
 <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">readFromBytes</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
  <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token constant">DEFAULT_CONFIG</span><span class="token punctuation">.</span><span class="token function">asObject</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">isInstance</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
   <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">&quot;derialize failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>

 <span class="token doc-comment comment">/**
  * 将字符串反序列化为原对象，先使用 Base64 解码
  *
  * <span class="token keyword">@param</span> <span class="token parameter">str</span>   <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">writeToString</span></span><span class="token punctuation">}</span> 方法序列化后的字符串
  * <span class="token keyword">@param</span> <span class="token parameter">clazz</span> 原对象的类型
  * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span>   原对象的类型
  * <span class="token keyword">@return</span> 原对象
  */</span>
 <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">readFromString</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
  <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">readFromBytes</span><span class="token punctuation">(</span><span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">long</span> begin <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">BATCH_SIZE</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">TestBean</span> oldBean <span class="token operator">=</span> <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">initJdk8Bean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token class-name">FstDemo</span><span class="token punctuation">.</span><span class="token function">writeToBytes</span><span class="token punctuation">(</span>oldBean<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">TestBean</span> newBean <span class="token operator">=</span> <span class="token class-name">FstDemo</span><span class="token punctuation">.</span><span class="token function">readFromBytes</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token class-name">TestBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;FST 序列化/反序列化耗时：%s&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> begin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="kryo-应用" tabindex="-1"><a class="header-anchor" href="#kryo-应用" aria-hidden="true">#</a> Kryo 应用</h2><h3 id="引入依赖-1" tabindex="-1"><a class="header-anchor" href="#引入依赖-1" aria-hidden="true">#</a> 引入依赖</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.esotericsoftware<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>kryo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.0.0-RC4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="kryo-api" tabindex="-1"><a class="header-anchor" href="#kryo-api" aria-hidden="true">#</a> Kryo API</h3><p>示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>esotericsoftware<span class="token punctuation">.</span>kryo<span class="token punctuation">.</span></span><span class="token class-name">Kryo</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>esotericsoftware<span class="token punctuation">.</span>kryo<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Input</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>esotericsoftware<span class="token punctuation">.</span>kryo<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Output</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>esotericsoftware<span class="token punctuation">.</span>kryo<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">DefaultInstantiatorStrategy</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>objenesis<span class="token punctuation">.</span>strategy<span class="token punctuation">.</span></span><span class="token class-name">StdInstantiatorStrategy</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayInputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayOutputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">StandardCharsets</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Base64</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KryoDemo</span> <span class="token punctuation">{</span>

 <span class="token comment">// 每个线程的 Kryo 实例</span>
 <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Kryo</span><span class="token punctuation">&gt;</span></span> kryoLocal <span class="token operator">=</span> <span class="token class-name">ThreadLocal</span><span class="token punctuation">.</span><span class="token function">withInitial</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
  <span class="token class-name">Kryo</span> kryo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Kryo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token doc-comment comment">/**
   * 不要轻易改变这里的配置！更改之后，序列化的格式就会发生变化，
   * 上线的同时就必须清除 Redis 里的所有缓存，
   * 否则那些缓存再回来反序列化的时候，就会报错
   */</span>
  <span class="token comment">//支持对象循环引用（否则会栈溢出）</span>
  kryo<span class="token punctuation">.</span><span class="token function">setReferences</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//默认值就是 true，添加此行的目的是为了提醒维护者，不要改变这个配置</span>

  <span class="token comment">//不强制要求注册类（注册行为无法保证多个 JVM 内同一个类的注册编号相同；而且业务系统中大量的 Class 也难以一一注册）</span>
  kryo<span class="token punctuation">.</span><span class="token function">setRegistrationRequired</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//默认值就是 false，添加此行的目的是为了提醒维护者，不要改变这个配置</span>

  <span class="token comment">//Fix the NPE bug when deserializing Collections.</span>
  <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">DefaultInstantiatorStrategy</span><span class="token punctuation">)</span> kryo<span class="token punctuation">.</span><span class="token function">getInstantiatorStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
   <span class="token punctuation">.</span><span class="token function">setFallbackInstantiatorStrategy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StdInstantiatorStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> kryo<span class="token punctuation">;</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token doc-comment comment">/**
  * 获得当前线程的 Kryo 实例
  *
  * <span class="token keyword">@return</span> 当前线程的 Kryo 实例
  */</span>
 <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Kryo</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> kryoLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>

 <span class="token doc-comment comment">/**
  * 将对象序列化为 byte 数组
  *
  * <span class="token keyword">@param</span> <span class="token parameter">obj</span> 任意对象
  * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> 对象的类型
  * <span class="token keyword">@return</span> 序列化后的 byte 数组
  */</span>
 <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">writeToBytes</span><span class="token punctuation">(</span><span class="token class-name">T</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">ByteArrayOutputStream</span> byteArrayOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Output</span> output <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Output</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">Kryo</span> kryo <span class="token operator">=</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  kryo<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  output<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> byteArrayOutputStream<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>

 <span class="token doc-comment comment">/**
  * 将对象序列化为 byte 数组后，再使用 Base64 编码
  *
  * <span class="token keyword">@param</span> <span class="token parameter">obj</span> 任意对象
  * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> 对象的类型
  * <span class="token keyword">@return</span> 序列化后的字符串
  */</span>
 <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">String</span> <span class="token function">writeToString</span><span class="token punctuation">(</span><span class="token class-name">T</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token function">writeToBytes</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>

 <span class="token doc-comment comment">/**
  * 将 byte 数组反序列化为原对象
  *
  * <span class="token keyword">@param</span> <span class="token parameter">bytes</span> <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">writeToBytes</span></span><span class="token punctuation">}</span> 方法序列化后的 byte 数组
  * <span class="token keyword">@param</span> <span class="token parameter">clazz</span> 原对象的类型
  * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span>   原对象的类型
  * <span class="token keyword">@return</span> 原对象
  */</span>
 <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;unchecked&quot;</span><span class="token punctuation">)</span>
 <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">readFromBytes</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">ByteArrayInputStream</span> byteArrayInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Input</span> input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Input</span><span class="token punctuation">(</span>byteArrayInputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">Kryo</span> kryo <span class="token operator">=</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> kryo<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>

 <span class="token doc-comment comment">/**
  * 将字符串反序列化为原对象，先使用 Base64 解码
  *
  * <span class="token keyword">@param</span> <span class="token parameter">str</span>   <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">writeToString</span></span><span class="token punctuation">}</span> 方法序列化后的字符串
  * <span class="token keyword">@param</span> <span class="token parameter">clazz</span> 原对象的类型
  * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span>   原对象的类型
  * <span class="token keyword">@return</span> 原对象
  */</span>
 <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">readFromString</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">readFromBytes</span><span class="token punctuation">(</span><span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">long</span> begin <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">BATCH_SIZE</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">TestBean</span> oldBean <span class="token operator">=</span> <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">initJdk8Bean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token class-name">KryoDemo</span><span class="token punctuation">.</span><span class="token function">writeToBytes</span><span class="token punctuation">(</span>oldBean<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">TestBean</span> newBean <span class="token operator">=</span> <span class="token class-name">KryoDemo</span><span class="token punctuation">.</span><span class="token function">readFromBytes</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token class-name">TestBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Kryo 序列化/反序列化耗时：%s&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> begin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Hessian 应用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
student<span class="token punctuation">.</span><span class="token function">setNo</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
student<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;HESSIAN&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//把student对象转化为byte数组</span>
<span class="token class-name">ByteArrayOutputStream</span> bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Hessian2Output</span> output <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hessian2Output</span><span class="token punctuation">(</span>bos<span class="token punctuation">)</span><span class="token punctuation">;</span>
output<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>
output<span class="token punctuation">.</span><span class="token function">flushBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> bos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//把刚才序列化出来的byte数组转化为student对象</span>
<span class="token class-name">ByteArrayInputStream</span> bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Hessian2Input</span> input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hessian2Input</span><span class="token punctuation">(</span>bis<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Student</span> deStudent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> input<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>deStudent<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,19),H=n("strong",null,"官方",-1),L={href:"https://developers.google.com/protocol-buffers/",target:"_blank",rel:"noopener noreferrer"},q={href:"https://github.com/protocolbuffers/protobuf",target:"_blank",rel:"noopener noreferrer"},N={href:"https://github.com/apache/thrift",target:"_blank",rel:"noopener noreferrer"},R={href:"https://github.com/EsotericSoftware/kryo",target:"_blank",rel:"noopener noreferrer"},M={href:"http://hessian.caucho.com/",target:"_blank",rel:"noopener noreferrer"},U={href:"https://github.com/RuedigerMoeller/fast-serialization",target:"_blank",rel:"noopener noreferrer"},G=n("strong",null,"文章",-1),V={href:"https://www.jianshu.com/p/937883b6b2e5",target:"_blank",rel:"noopener noreferrer"};function Z(W,X){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("blockquote",null,[n("p",null,[s("不了解 Java 默认的序列化机制，可以参考："),n("a",r,[s("Java 序列化"),t(a)])])]),k,n("p",null,[n("a",d,[s("Protobuf"),t(a)]),s(" 是 Google 公司内部的混合语言数据标准，是一种轻便、高效的结构化数据存储"),m,s(" 格式，可以用于结构化数据序列化，支持 Java、Python、C++、Go 等语言。Protobuf"),v,s(" 使用的时候需要定义 IDL（Interface description language），然后使用不同语言的 IDL"),b,s(" 编译器，生成序列化工具类。")]),y,n("blockquote",null,[n("p",null,[n("a",h,[s("Thrift"),t(a)]),s(" 是 apache 开源项目，是一个点对点的 RPC 实现。")])]),g,f,w,n("p",null,[n("a",_,[s("Hessian"),t(a)]),s(" 是动态类型、二进制、紧凑的，并且可跨语言移植的一种序列化框架。Hessian 协"),S,s(" 议要比 JDK、JSON 更加紧凑，性能上要比 JDK、JSON 序列化高效很多，而且生成的字节"),T,s(" 数也更小。")]),B,n("blockquote",null,[n("p",null,[n("a",I,[s("Kryo"),t(a)]),s(" 是用于 Java 的快速高效的二进制对象图序列化框架。Kryo 还可以执行自动的深拷贝和浅拷贝。 这是从对象到对象的直接复制，而不是从对象到字节的复制。")])]),j,x,F,n("blockquote",null,[n("p",null,[n("a",z,[s("FST"),t(a)]),s(" 是一个 Java 实现二进制序列化库。")])]),C,n("ul",null,[n("li",null,[O,n("ul",null,[n("li",null,[n("a",A,[s("thrift"),t(a)]),s("、"),n("a",D,[s("protobuf"),t(a)]),s(" - 适用于对性能敏感，对开发体验要求不高的内部系统。")]),n("li",null,[n("a",J,[s("hessian"),t(a)]),s(" - 适用于对开发体验敏感，性能有要求的内外部系统。")])])]),n("li",null,[n("p",null,[s("如果不需要跨语言通信，可以考虑："),n("a",K,[s("Kryo"),t(a)]),s(" 和 "),n("a",P,[s("FST"),t(a)]),s("，性能不错，且 API 十分简单。")])])]),E,n("ul",null,[n("li",null,[H,n("ul",null,[n("li",null,[n("a",L,[s("Protobuf 官网"),t(a)])]),n("li",null,[n("a",q,[s("Protobuf Github"),t(a)])]),n("li",null,[n("a",N,[s("Thrift Github"),t(a)])]),n("li",null,[n("a",R,[s("Kryo Github"),t(a)])]),n("li",null,[n("a",M,[s("Hessian 官网"),t(a)])]),n("li",null,[n("a",U,[s("FST Github"),t(a)])])])]),n("li",null,[G,n("ul",null,[n("li",null,[n("a",V,[s("java 序列化框架对比"),t(a)])])])])])])}const $=e(i,[["render",Z],["__file","index.html.vue"]]);export{$ as default};
