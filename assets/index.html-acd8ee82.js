import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as d,o as p,c as g,d as l,w as s,a as t,b as n,e}from"./app-f29527f5.js";const u={},h=e('<h1 id="java-基础面试二" tabindex="-1"><a class="header-anchor" href="#java-基础面试二" aria-hidden="true">#</a> Java 基础面试二</h1><h2 id="java-面向对象" tabindex="-1"><a class="header-anchor" href="#java-面向对象" aria-hidden="true">#</a> Java 面向对象</h2><h3 id="【简单】public、private、protected-以及无修饰符有什么区别" tabindex="-1"><a class="header-anchor" href="#【简单】public、private、protected-以及无修饰符有什么区别" aria-hidden="true">#</a> 【简单】public、private、protected，以及无修饰符有什么区别？</h3><ul><li><code>private</code> 只允许当前类可以访问。</li><li>无修饰只允许同一个包中的类访问。</li><li><code>protected</code> 只允许当前类、子类和同一个包中的类访问。</li><li><code>public</code> 允许任意类和对象访问。</li></ul><h3 id="【简单】对象实体与对象引用有何不同" tabindex="-1"><a class="header-anchor" href="#【简单】对象实体与对象引用有何不同" aria-hidden="true">#</a> 【简单】对象实体与对象引用有何不同？</h3><p>（1）<strong>对象是用来描述客观事物的一个抽象</strong>。一个对象由一组属性和对这组属性进行操作的一组服务组成。</p><p>（2）<strong>类是具有相同属性和方法的一组对象的集合</strong>，它为属于该类的所有对象提供了统一的抽象描述，其内部包括属性和方法两个主要部分。</p><p>（3）对象实体与对象引用的不同之处在于：</p><ul><li><code>new</code> 创建对象实例（对象实例在堆内存中），对象引用指向对象实例（对象引用存放在栈内存中）</li><li>一个对象引用可以指向 0 个或 1 个对象（一根绳子可以不系气球，也可以系一个气球）；</li><li>一个对象可以有 n 个引用指向它（可以用 n 条绳子系住一个气球）。</li></ul><h3 id="【简单】接口和抽象类有什么区别" tabindex="-1"><a class="header-anchor" href="#【简单】接口和抽象类有什么区别" aria-hidden="true">#</a> 【简单】接口和抽象类有什么区别？</h3><p>（1）接口是对行为的抽象，它是抽象方法的集合，利用接口可以达到 API 定义和实现分离的目的。</p><p>接口的主要特性有：</p><ul><li>接口不能实例化。</li><li>接口不能包含任何非常量成员，任何字段都隐式的被 <code>public static final</code> 修饰。</li><li>接口中没有非静态方法，也就是说要么是抽象方法，要么是静态方法。</li><li>从 Java8 开始，接口增加了 <code>default</code> 方法特性，可以定义方法的默认实现；Java 9 以后，甚至可以定义私有的 <code>default</code> 方法。</li></ul><p>（2）抽象类是不能实例化的类，用 abstract 关键字修饰 class，其目的主要是代码重用。除了不能实例化，形式上和一般的 Java 类并没有太大区别，可以有一个或者多个抽象方法，也可以没有抽象方法。抽象类大多用于抽取相关 Java 类的共用方法实现或者是共同成员变量，然后通过继承的方式达到代码复用的目的。</p><p>（3）接口和抽象类有什么相同点和不同点？</p><p>Java 中的类可以实现多个接口。</p><p>（4）与 C++ 等语言不一样，Java 类不支持多继承。这意味着，Java 不能通过继承多个抽象类来重用逻辑。那么，如何来实现重用呢？Java 的解决方案是：接口支持多继承，准确的说，接口支持扩展多个接口，而接口也支持实现多个接口。</p><h3 id="【中等】什么是-java-内部类-内部类有什么作用" tabindex="-1"><a class="header-anchor" href="#【中等】什么是-java-内部类-内部类有什么作用" aria-hidden="true">#</a> 【中等】什么是 Java 内部类？内部类有什么作用？</h3><div class="hint-container info"><p class="hint-container-title">什么是内部类？</p></div><p>内部类 (Inner Class) 是定义在另一个类内部的类。Java 中有四种类型的内部类：</p><ul><li><strong>成员内部类</strong>：作为外部类的成员存在</li><li><strong>局部内部类</strong>：定义在方法或作用域内的类</li><li><strong>匿名内部类</strong>：没有名字的局部内部类</li><li><strong>静态嵌套类</strong>：用 static 修饰的嵌套类</li></ul><div class="hint-container info"><p class="hint-container-title">内部类有什么作用？</p></div><ul><li><strong>逻辑分组</strong>：当某个类只对另一个类有用时，可以将其嵌入使用它的类中，保持代码在一起</li><li><strong>增强封装性</strong>：内部类可以访问外部类的私有成员，同时自身也可以对外部完全隐藏</li><li><strong>实现多重继承</strong>：通过内部类可以间接实现多重继承的效果</li><li><strong>回调机制</strong>：常用于事件处理和监听器实现</li><li><strong>代码简洁</strong>：特别是匿名内部类可以减少代码量</li></ul><div class="hint-container info"><p class="hint-container-title">内部类有哪些特点？</p></div><ul><li>内部类可以访问外部类的所有成员（包括 private)</li><li>外部类需要通过实例化内部类来访问其成员</li><li>内部类编译后会生成独立的。class 文件（格式：<code>OuterClass$InnerClass.class</code>)</li><li>非静态内部类不能有静态成员（静态内部类可以）</li><li>内部类可以继承其他类或实现接口</li></ul><h3 id="【简单】为什么-java-不支持多重继承" tabindex="-1"><a class="header-anchor" href="#【简单】为什么-java-不支持多重继承" aria-hidden="true">#</a> 【简单】为什么 Java 不支持多重继承？</h3><p>Java 不支持多重继承的核心原因是<strong>为了避免【菱形继承问题（Diamond Problem）】</strong>。</p><div class="hint-container info"><p class="hint-container-title">什么是菱形继承问题？</p></div><p>菱形继承存在歧义性：</p><ul><li>如果类 C 继承自类 A 和类 B，而 A 和 B 都有同名方法 <code>method()</code></li><li>调用 <code>C.method()</code> 时无法确定应该调用 A 还是 B 的版本</li></ul><p>由于菱形继承歧义性而引发的复杂性增加问题：</p><ul><li>多重继承会显著增加编译器和 JVM 的实现复杂度</li><li>方法调用、构造函数调用顺序变得难以确定</li></ul><div class="hint-container info"><p class="hint-container-title">Java 如何解决多重继承？</p></div><p>在 Java 中，类可以实现多个接口。接口提供多重继承的行为规范，但不包含具体实现。</p><p>JDK8 之后，接口支持默认方法（default），是不是又出现了菱形继承问题？</p><p>为了规避这个问题，Java 强制规定，如果多个接口存在相同的默认方法，子类必须重写这个方法。否则，编译器会报错。</p><h3 id="【中等】深拷贝和浅拷贝有什么区别" tabindex="-1"><a class="header-anchor" href="#【中等】深拷贝和浅拷贝有什么区别" aria-hidden="true">#</a> 【中等】深拷贝和浅拷贝有什么区别？</h3><div class="hint-container info"><p class="hint-container-title">深拷贝和浅拷贝有什么区别？</p></div><table><thead><tr><th style="text-align:left;"><strong>关键点</strong></th><th style="text-align:left;"><strong>浅拷贝</strong></th><th style="text-align:left;"><strong>深拷贝</strong></th></tr></thead><tbody><tr><td style="text-align:left;"><strong>复制对象</strong></td><td style="text-align:left;">只复制对象本身（基本类型值拷贝）</td><td style="text-align:left;">递归复制对象及其引用的所有子对象</td></tr><tr><td style="text-align:left;"><strong>引用类型字段</strong></td><td style="text-align:left;">新旧对象共享同一引用（修改相互影响）</td><td style="text-align:left;">创建全新引用对象（修改完全隔离）</td></tr><tr><td style="text-align:left;"><strong>内存开销</strong></td><td style="text-align:left;">小（仅复制一层）</td><td style="text-align:left;">大（递归复制所有关联对象）</td></tr><tr><td style="text-align:left;"><strong>实现方式</strong></td><td style="text-align:left;">默认<code>Object.clone()</code></td><td style="text-align:left;">需手动实现递归克隆/序列化/工具类</td></tr><tr><td style="text-align:left;"><strong>适用场景</strong></td><td style="text-align:left;">对象无可变引用字段</td><td style="text-align:left;">对象含可变引用字段且需完全独立</td></tr></tbody></table><p><strong>本质区别</strong>：浅拷贝是&quot;复制钥匙&quot;，深拷贝是&quot;复制钥匙+保险箱&quot;。</p><p><strong>注意事项</strong>：</p><ul><li>深拷贝需处理循环引用问题</li><li>推荐使用<code>SerializationUtils.clone()</code>或 JSON 序列化实现深拷贝</li><li>不可变对象（如 String）的浅拷贝是安全的</li></ul><div class="hint-container info"><p class="hint-container-title">深拷贝和浅拷贝实现方式有什么区别？</p></div><p><strong>实现方式对比</strong></p><table><thead><tr><th style="text-align:left;"><strong>方法</strong></th><th style="text-align:left;"><strong>浅拷贝</strong></th><th style="text-align:left;"><strong>深拷贝</strong></th><th style="text-align:left;"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:left;"><code>Object.clone()</code></td><td style="text-align:left;">✓</td><td style="text-align:left;">✗</td><td style="text-align:left;">默认浅拷贝</td></tr><tr><td style="text-align:left;"><strong>手动递归克隆</strong></td><td style="text-align:left;">✗</td><td style="text-align:left;">✓</td><td style="text-align:left;">需所有引用类型实现<code>Cloneable</code></td></tr><tr><td style="text-align:left;"><strong>序列化反序列化</strong></td><td style="text-align:left;">✗</td><td style="text-align:left;">✓</td><td style="text-align:left;">通过<code>ObjectOutputStream</code>实现</td></tr><tr><td style="text-align:left;"><strong>工具类（Apache Commons）</strong></td><td style="text-align:left;">✗</td><td style="text-align:left;">✓</td><td style="text-align:left;"><code>SerializationUtils.clone()</code></td></tr></tbody></table>',45),k=t("div",{class:"language-java line-numbers-mode","data-ext":"java"},[t("pre",{class:"language-java"},[t("code",null,[t("span",{class:"token keyword"},"class"),n(),t("span",{class:"token class-name"},"Person"),n(),t("span",{class:"token keyword"},"implements"),n(),t("span",{class:"token class-name"},"Cloneable"),n(),t("span",{class:"token punctuation"},"{"),n(`
    `),t("span",{class:"token class-name"},"String"),n(" name"),t("span",{class:"token punctuation"},";"),n(`
    `),t("span",{class:"token class-name"},"Address"),n(" address"),t("span",{class:"token punctuation"},";"),n(),t("span",{class:"token comment"},"// 引用类型字段"),n(`

    `),t("span",{class:"token annotation punctuation"},"@Override"),n(`
    `),t("span",{class:"token keyword"},"protected"),n(),t("span",{class:"token class-name"},"Object"),n(),t("span",{class:"token function"},"clone"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),n(),t("span",{class:"token keyword"},"throws"),n(),t("span",{class:"token class-name"},"CloneNotSupportedException"),n(),t("span",{class:"token punctuation"},"{"),n(`
        `),t("span",{class:"token keyword"},"return"),n(),t("span",{class:"token keyword"},"super"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"clone"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),n(),t("span",{class:"token comment"},"// 默认浅拷贝"),n(`
    `),t("span",{class:"token punctuation"},"}"),n(`
`),t("span",{class:"token punctuation"},"}"),n(`

`),t("span",{class:"token comment"},"// 测试"),n(`
`),t("span",{class:"token class-name"},"Person"),n(" p1 "),t("span",{class:"token operator"},"="),n(),t("span",{class:"token keyword"},"new"),n(),t("span",{class:"token class-name"},"Person"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"Alice"'),t("span",{class:"token punctuation"},","),n(),t("span",{class:"token keyword"},"new"),n(),t("span",{class:"token class-name"},"Address"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"北京"'),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),n(`
`),t("span",{class:"token class-name"},"Person"),n(" p2 "),t("span",{class:"token operator"},"="),n(),t("span",{class:"token punctuation"},"("),t("span",{class:"token class-name"},"Person"),t("span",{class:"token punctuation"},")"),n("p1"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"clone"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),n(`
p2`),t("span",{class:"token punctuation"},"."),n("address"),t("span",{class:"token punctuation"},"."),n("city "),t("span",{class:"token operator"},"="),n(),t("span",{class:"token string"},'"上海"'),t("span",{class:"token punctuation"},";"),n(),t("span",{class:"token comment"},'// p1.address.city 也会变成"上海"'),n(`
`)])]),t("div",{class:"line-numbers","aria-hidden":"true"},[t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"})])],-1),f=t("div",{class:"language-java line-numbers-mode","data-ext":"java"},[t("pre",{class:"language-java"},[t("code",null,[t("span",{class:"token annotation punctuation"},"@Override"),n(`
`),t("span",{class:"token keyword"},"protected"),n(),t("span",{class:"token class-name"},"Object"),n(),t("span",{class:"token function"},"clone"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),n(),t("span",{class:"token keyword"},"throws"),n(),t("span",{class:"token class-name"},"CloneNotSupportedException"),n(),t("span",{class:"token punctuation"},"{"),n(`
    `),t("span",{class:"token class-name"},"Person"),n(" cloned "),t("span",{class:"token operator"},"="),n(),t("span",{class:"token punctuation"},"("),t("span",{class:"token class-name"},"Person"),t("span",{class:"token punctuation"},")"),t("span",{class:"token keyword"},"super"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"clone"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),n(`
    cloned`),t("span",{class:"token punctuation"},"."),n("address "),t("span",{class:"token operator"},"="),n(),t("span",{class:"token punctuation"},"("),t("span",{class:"token class-name"},"Address"),t("span",{class:"token punctuation"},")"),n("address"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"clone"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),n(),t("span",{class:"token comment"},"// 手动复制引用对象"),n(`
    `),t("span",{class:"token keyword"},"return"),n(" cloned"),t("span",{class:"token punctuation"},";"),n(`
`),t("span",{class:"token punctuation"},"}"),n(`

`),t("span",{class:"token comment"},"// Address 类也需实现 Cloneable"),n(`
`),t("span",{class:"token keyword"},"class"),n(),t("span",{class:"token class-name"},"Address"),n(),t("span",{class:"token keyword"},"implements"),n(),t("span",{class:"token class-name"},"Cloneable"),n(),t("span",{class:"token punctuation"},"{"),n(`
    `),t("span",{class:"token class-name"},"String"),n(" city"),t("span",{class:"token punctuation"},";"),n(`
    `),t("span",{class:"token annotation punctuation"},"@Override"),n(`
    `),t("span",{class:"token keyword"},"protected"),n(),t("span",{class:"token class-name"},"Object"),n(),t("span",{class:"token function"},"clone"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),n(),t("span",{class:"token keyword"},"throws"),n(),t("span",{class:"token class-name"},"CloneNotSupportedException"),n(),t("span",{class:"token punctuation"},"{"),n(`
        `),t("span",{class:"token keyword"},"return"),n(),t("span",{class:"token keyword"},"super"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"clone"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),n(`
    `),t("span",{class:"token punctuation"},"}"),n(`
`),t("span",{class:"token punctuation"},"}"),n(`
`)])]),t("div",{class:"line-numbers","aria-hidden":"true"},[t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"})])],-1),b=e('<h3 id="【简单】面向对象和面向过程有什么区别" tabindex="-1"><a class="header-anchor" href="#【简单】面向对象和面向过程有什么区别" aria-hidden="true">#</a> 【简单】面向对象和面向过程有什么区别？</h3><p>面向对象和面向过程的主要区别：</p><table><thead><tr><th>维度</th><th>面向对象（OOP）</th><th>面向过程（POP）</th></tr></thead><tbody><tr><td><strong>核心思想</strong></td><td>以<strong>对象</strong>为中心</td><td>以<strong>步骤</strong>为中心</td></tr><tr><td><strong>代码组织</strong></td><td>按<strong>现实实体</strong>抽象为类</td><td>按<strong>功能流程</strong>拆分为函数</td></tr><tr><td><strong>数据管理</strong></td><td>数据与行为封装在对象中</td><td>数据与函数独立</td></tr><tr><td><strong>扩展方式</strong></td><td>通过继承/多态扩展（开闭原则）</td><td>需修改函数逻辑</td></tr><tr><td><strong>典型特性</strong></td><td>封装、继承、多态三大特性</td><td>无三大特性</td></tr><tr><td><strong>典型语言</strong></td><td>Java, Python, C++</td><td>C, Pascal</td></tr></tbody></table><h3 id="【中等】面向对象三大特征和五大原则是什么" tabindex="-1"><a class="header-anchor" href="#【中等】面向对象三大特征和五大原则是什么" aria-hidden="true">#</a> 【中等】面向对象三大特征和五大原则是什么？</h3><div class="hint-container info"><p class="hint-container-title">面向对象三大特征是什么？</p></div><p><strong>面向对象三大特征：</strong></p><ul><li><p><strong>封装（Encapsulation）</strong> ：<strong>隐藏内部细节，暴露安全接口</strong>。</p><ul><li>用 <code>private</code> 保护数据，通过 <code>getter/setter</code> 控制访问</li><li>示例：<code>BankAccount</code> 类隐藏余额，提供 <code>deposit()</code>/<code>withdraw()</code> 方法</li></ul></li><li><p><strong>继承（Inheritance）</strong> ：<strong>子类复用父类属性和方法</strong>。</p><ul><li>通过 <code>extends</code> 实现（如 <code>Dog extends Animal</code>）</li><li>注意：Java 是单继承（一个子类只能有一个父类）</li></ul></li><li><p><strong>多态（Polymorphism）</strong> ：<strong>同一行为的不同实现方式</strong>。</p><ul><li><strong>编译时多态</strong>：方法重载（<code>Overload</code>）</li><li><strong>运行时多态</strong>：方法重写（<code>Override</code>）+ 向上转型（子类对象转为父类对象，如 <code>Animal a = new Dog(); a.sound();</code>）</li></ul></li></ul><p><strong>一言以概之</strong>：<strong>封装保证安全性，继承提高复用性，多态增强扩展性</strong>。</p><div class="hint-container info"><p class="hint-container-title">面向对象的五大原则是什么？</p></div><p>面向对象的五大原则是 <strong>SOLID</strong> 原则：</p><ul><li><strong>单一职责原则 (SRP)</strong>：<strong>一个类只负责一个功能</strong>，避免职责过多导致代码臃肿。</li><li><strong>开闭原则 (OCP)</strong>：<strong>对扩展开放，对修改关闭</strong>。通过抽象和继承扩展功能，而非直接修改原有代码。</li><li><strong>里氏替换原则 (LSP)</strong>：<strong>子类必须能替换父类</strong>，确保继承关系不会破坏程序逻辑。</li><li><strong>接口隔离原则 (ISP)</strong>：<strong>接口应当小而专</strong>，避免臃肿接口强制实现不必要的方法。</li><li><strong>依赖倒置原则 (DIP)</strong>：<strong>依赖抽象而非具体</strong>，高层模块不直接依赖低层模块，而是通过接口或抽象类交互。</li></ul><p><strong>一言以概之</strong>：SOLID 原则让代码更灵活、可维护、易扩展。</p><h3 id="【简单】java-中-final-关键字有什么用" tabindex="-1"><a class="header-anchor" href="#【简单】java-中-final-关键字有什么用" aria-hidden="true">#</a> 【简单】Java 中 final 关键字有什么用？</h3><ul><li>修饰类：不能被继承</li><li>修饰方法：不能被子类覆写</li><li>修饰变量：只能被赋值一次</li></ul><h2 id="object" tabindex="-1"><a class="header-anchor" href="#object" aria-hidden="true">#</a> Object</h2><h3 id="【简单】object-类的常见方法有哪些" tabindex="-1"><a class="header-anchor" href="#【简单】object-类的常见方法有哪些" aria-hidden="true">#</a> 【简单】Object 类的常见方法有哪些？</h3><p>Object 类是一个特殊的类，是所有类的父类。它主要提供了以下 11 个方法：</p><table><thead><tr><th style="text-align:left;"><strong>方法签名</strong></th><th style="text-align:left;"><strong>作用</strong></th><th style="text-align:left;"><strong>默认行为</strong></th></tr></thead><tbody><tr><td style="text-align:left;"><code>String toString()</code></td><td style="text-align:left;">返回对象的字符串表示</td><td style="text-align:left;"><code>类名@十六进制哈希码</code>（如 <code>Person@1b6d3586</code>）</td></tr><tr><td style="text-align:left;"><code>boolean equals(Object obj)</code></td><td style="text-align:left;">比较两个对象是否逻辑相等</td><td style="text-align:left;">比较内存地址（<code>==</code>）</td></tr><tr><td style="text-align:left;"><code>int hashCode()</code></td><td style="text-align:left;">返回对象的哈希码</td><td style="text-align:left;">基于内存地址生成</td></tr><tr><td style="text-align:left;"><code>Class&lt;?&gt; getClass()</code></td><td style="text-align:left;">返回对象的运行时类（<code>Class</code> 对象）</td><td style="text-align:left;">由 JVM 提供</td></tr><tr><td style="text-align:left;"><code>protected Object clone()</code></td><td style="text-align:left;">创建并返回对象的副本</td><td style="text-align:left;">浅拷贝（需实现 <code>Cloneable</code> 接口）</td></tr><tr><td style="text-align:left;"><code>protected void finalize()</code></td><td style="text-align:left;">已废弃，对象被 GC 回收前调用</td><td style="text-align:left;">空实现（不推荐使用）</td></tr><tr><td style="text-align:left;"><code>void notify()</code></td><td style="text-align:left;">唤醒一个等待该对象监视器的线程</td><td style="text-align:left;">依赖 JVM 实现</td></tr><tr><td style="text-align:left;"><code>void notifyAll()</code></td><td style="text-align:left;">唤醒所有等待该对象监视器的线程</td><td style="text-align:left;">依赖 JVM 实现</td></tr><tr><td style="text-align:left;"><code>void wait()</code></td><td style="text-align:left;">让当前线程等待，直到被唤醒</td><td style="text-align:left;">必须在同步代码块中调用</td></tr><tr><td style="text-align:left;"><code>void wait(long timeout)</code></td><td style="text-align:left;">让线程等待，最多 <code>timeout</code> 毫秒</td><td style="text-align:left;">超时后自动唤醒</td></tr><tr><td style="text-align:left;"><code>void wait(long timeout, int nanos)</code></td><td style="text-align:left;">更精确的等待（纳秒级）</td><td style="text-align:left;">实际精度依赖系统</td></tr></tbody></table><h3 id="【简单】-和-equals-有什么区别" tabindex="-1"><a class="header-anchor" href="#【简单】-和-equals-有什么区别" aria-hidden="true">#</a> 【简单】== 和 equals() 有什么区别？</h3><table><thead><tr><th style="text-align:left;"><strong>对比项</strong></th><th style="text-align:left;"><strong><code>==</code></strong></th><th style="text-align:left;"><strong><code>equals()</code></strong></th></tr></thead><tbody><tr><td style="text-align:left;"><strong>基本类型比较</strong></td><td style="text-align:left;">比较<strong>值</strong></td><td style="text-align:left;">不能比较</td></tr><tr><td style="text-align:left;"><strong>引用类型比较</strong></td><td style="text-align:left;">比较<strong>内存地址</strong></td><td style="text-align:left;">默认比较<strong>内存地址</strong>（同 <code>==</code>），但可重写为逻辑比较（如内容是否相同）</td></tr><tr><td style="text-align:left;"><strong>是否可重写</strong></td><td style="text-align:left;">否（运算符，行为固定）</td><td style="text-align:left;">是（可自定义比较逻辑）</td></tr><tr><td style="text-align:left;"><strong>用途</strong></td><td style="text-align:left;">快速判断基本类型值相等或引用是否指向同一对象</td><td style="text-align:left;">判断对象逻辑是否相等（如内容、属性等）</td></tr></tbody></table><h3 id="【简单】为什么重写-equals-时必须重写-hashcode-方法" tabindex="-1"><a class="header-anchor" href="#【简单】为什么重写-equals-时必须重写-hashcode-方法" aria-hidden="true">#</a> 【简单】为什么重写 equals() 时必须重写 hashCode() 方法？</h3><ul><li><code>hashCode()</code> 方法返回对象的哈希值，常用于存储结构中快速比较对象是否相同。</li><li><code>equals()</code> 方法比较对象内容是否相同，需自行实现逻辑。</li></ul><p>Java 规定：<strong>两个对象若<code>equals()</code>相等，它们的<code>hashCode()</code>必须相同</strong>。如果违背，则哈希集合（如 <code>HashMap</code>、<code>HashSet</code>）无法正确去重或查找。</p><ul><li><code>HashMap</code>/<code>HashSet</code> 先通过 <code>hashCode()</code> 快速定位数据，再用 <code>equals()</code> 精确匹配。</li><li>若 <code>hashCode()</code> 不一致，即使 <code>equals()</code> 为 <code>true</code>，集合会误判为不同对象。</li></ul><div class="hint-container info"><p class="hint-container-title">如何正确重写 `hashCode()`？</p></div><ul><li><strong><code>equals()</code></strong>：比较所有关键字段（如 <code>name</code>、<code>age</code>）。</li><li><strong><code>hashCode()</code></strong>：用 <code>Objects.hash(字段1, 字段2)</code> 生成（确保与 <code>equals()</code> 字段一致）。</li></ul>',26),v={class:"hint-container tip"},y=t("p",{class:"hint-container-title"},"扩展",-1),x={href:"https://www.cnblogs.com/skywang12345/p/3324958.html",target:"_blank",rel:"noopener noreferrer"},m=e(`<h3 id="【简单】finalize-有什么用" tabindex="-1"><a class="header-anchor" href="#【简单】finalize-有什么用" aria-hidden="true">#</a> 【简单】finalize 有什么用？</h3><p>一言以概之，<strong><code>finalize</code> 可用于对象销毁前的清理，但不可靠且性能差，现代 Java 开发应避免使用，改用 <code>AutoCloseable</code> 或 <code>Cleaner</code>。</strong></p><p><strong>Java 9+ 已弃用 <code>finalize</code></strong>，推荐使用：</p><ul><li><code>try-with-resources</code>（实现 <code>AutoCloseable</code> 接口）</li><li><code>Cleaner</code> 或 <code>PhantomReference</code>（更可控的清理机制）。</li></ul><p><strong><code>finalize</code> 的作用（Java）</strong> ：</p><ul><li><strong>对象被垃圾回收前的清理</strong>：在对象被 GC 回收前，<code>finalize()</code> 会被调用，可用于释放非内存资源（如文件句柄、数据库连接等）。</li><li><strong>最后的补救机会</strong>：如果对象未被正确关闭，<code>finalize</code> 提供最后一次资源释放的机会。</li></ul><p><strong><code>finalize</code> 的问题</strong> ：</p><ul><li><strong>不保证执行</strong>：JVM 不保证 <code>finalize</code> 一定会执行（如程序突然终止时）。即使对象可达性失效，GC 可能延迟回收，导致 <code>finalize</code> 延迟调用。</li><li><strong>性能开销</strong>：覆写 <code>finalize</code> 的对象会被 JVM 放入特殊队列，垃圾回收变慢。可能引发内存泄漏（如果 <code>finalize</code> 阻塞或执行过久）。</li><li><strong>安全问题</strong>：在 <code>finalize</code> 中抛出异常会导致清理中断，且异常被忽略。可能被恶意代码利用（如通过重写 <code>finalize</code> 复活对象，干扰 GC）。</li></ul><h2 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> String</h2><h3 id="【简单】string、stringbuffer、stringbuilder-有什么区别" tabindex="-1"><a class="header-anchor" href="#【简单】string、stringbuffer、stringbuilder-有什么区别" aria-hidden="true">#</a> 【简单】String、StringBuffer、StringBuilder 有什么区别？</h3><table><thead><tr><th style="text-align:left;"><strong>特性</strong></th><th style="text-align:left;"><strong>String</strong></th><th style="text-align:left;"><strong>StringBuffer</strong></th><th style="text-align:left;"><strong>StringBuilder</strong></th></tr></thead><tbody><tr><td style="text-align:left;"><strong>可变性</strong></td><td style="text-align:left;">❌ 不可变</td><td style="text-align:left;">✅ 可变</td><td style="text-align:left;">✅ 可变</td></tr><tr><td style="text-align:left;"><strong>线程安全</strong></td><td style="text-align:left;">✅（由于不可变）</td><td style="text-align:left;">✅（同步方法）</td><td style="text-align:left;">❌（非线程安全）</td></tr><tr><td style="text-align:left;"><strong>性能</strong></td><td style="text-align:left;">⚠️ 最差（频繁创建新对象）</td><td style="text-align:left;">⚠️ 中等（同步开销）</td><td style="text-align:left;">✅ 最高（无同步开销）</td></tr><tr><td style="text-align:left;"><strong>适用场景</strong></td><td style="text-align:left;">常量、少量拼接</td><td style="text-align:left;">多线程字符串操作</td><td style="text-align:left;"><strong>单线程字符串操作（推荐）</strong></td></tr></tbody></table><p><strong>概括</strong></p><ul><li><strong>用 <code>String</code> 存储常量</strong>，<strong>用 <code>StringBuilder</code> 高效拼接（单线程）</strong>，<strong>用 <code>StringBuffer</code> 保证线程安全（多线程）</strong>。</li><li><strong>优先选 <code>StringBuilder</code></strong>（90%场景适用）。</li></ul><h3 id="【简单】string-为什么是不可变的" tabindex="-1"><a class="header-anchor" href="#【简单】string-为什么是不可变的" aria-hidden="true">#</a> 【简单】String 为什么是不可变的？</h3><p><code>String</code> 的不可变性是 Java 为安全、性能、线程安全做的核心设计。</p><p><strong>String 不可变的核心原因</strong>：</p><ul><li><strong><code>final</code> 修饰的 <code>char[]</code> 数组</strong>：Java 中 <code>String</code> 内部用 <code>private final char[]</code>（JDK 9+ 改为 <code>byte[]</code>）存储数据，数组引用和内容均不可修改。</li><li><strong>无修改内部状态的方法</strong>：所有看似“修改”的方法（如 <code>concat()</code>、<code>substring()</code>）都返回<strong>新 <code>String</code> 对象</strong>，原对象不变。</li></ul><p><strong>为什么 String 被设计为 final？</strong></p><ul><li><strong>安全</strong><ul><li><strong>并发安全</strong>：不可变天然线程安全，无需同步；</li><li><strong>类加载安全</strong>：类加载时通常按类的全限定名字符串进行加载，不可变保证了其安全性。</li></ul></li><li><strong>性能</strong><ul><li><strong>hashCode 缓存</strong>：<code>String</code> 的 <code>hashCode()</code> 计算结果可缓存（因内容不变），提升性能（如 <code>HashMap</code> 的键）。</li><li><strong>常量池</strong>：如 <code>String s = &quot;abc&quot;</code> 会复用常量池中的相同字符串，减少内存开销。</li></ul></li><li><strong>避免混淆</strong>：避免子类覆写父类方法，导致意想不到的结果。</li></ul><p><strong>示例验证不可变性</strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">&quot; World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 &quot;Hello&quot;（原字符串未变）</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 &quot;Hello World&quot;（新对象）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="【简单】字符串拼接用-还是-stringbuilder" tabindex="-1"><a class="header-anchor" href="#【简单】字符串拼接用-还是-stringbuilder" aria-hidden="true">#</a> 【简单】字符串拼接用“+” 还是 StringBuilder?</h3><p><strong>循环/动态拼接 → <code>StringBuilder</code>；简单常量拼接 → &quot;+&quot;；多线程 → <code>StringBuffer</code>（极少用）。</strong><br><strong><code>StringBuilder</code> 是默认推荐选择！</strong></p><p><strong>优先用 <code>StringBuilder</code>（大多数场景）</strong></p><ul><li><strong>适用情况</strong>：循环、动态拼接、大量字符串操作。</li><li><strong>原因</strong>： <ul><li><strong>高性能</strong>：直接修改缓冲区，避免 <code>+</code> 频繁创建新对象。</li><li><strong>低内存开销</strong>：减少临时对象和 GC 压力。</li></ul></li></ul><p><strong>简单拼接可用 &quot;+&quot;（编译期优化）</strong></p><ul><li><strong>适用情况</strong>：少量<strong>固定字符串</strong>拼接（如 <code>&quot;a&quot; + &quot;b&quot;</code>）。</li><li><strong>原因</strong>： <ul><li><strong>代码简洁</strong>：可读性更好。</li><li><strong>编译器优化</strong>：JVM 自动合并为常量（如 <code>&quot;ab&quot;</code>），无性能损失。</li><li>通过“+”的字符串拼接方式，实际上是通过 <code>StringBuilder</code> 调用 <code>append()</code> 方法实现的。</li><li>在循环内使用“+”，会导致创建过多的 <code>StringBuilder</code> 对象。JDK9 中，优化了这个问题，字符串相加 “+” 改为了用动态方法 <code>makeConcatWithConstants()</code> 来实现，而不是大量的 <code>StringBuilder</code> 了。</li></ul></li></ul><p><strong>多线程拼接用 <code>StringBuffer</code>（极少需要）</strong></p><ul><li><strong>适用情况</strong>：多线程环境且需线程安全（通常局部变量仍可用 <code>StringBuilder</code>）。</li></ul>`,29),q={class:"hint-container tip"},S=t("p",{class:"hint-container-title"},"扩展",-1),w={href:"https://juejin.cn/post/7182872058743750715",target:"_blank",rel:"noopener noreferrer"},j=e(`<h3 id="【简单】string-equals-和-object-equals-有何区别" tabindex="-1"><a class="header-anchor" href="#【简单】string-equals-和-object-equals-有何区别" aria-hidden="true">#</a> 【简单】String#equals() 和 Object#equals() 有何区别？</h3><table><thead><tr><th style="text-align:left;"><strong>对比项</strong></th><th style="text-align:left;"><strong><code>Object#equals()</code></strong></th><th style="text-align:left;"><strong><code>String#equals()</code></strong></th></tr></thead><tbody><tr><td style="text-align:left;"><strong>默认行为</strong></td><td style="text-align:left;">比较<strong>内存地址</strong>（<code>==</code>）</td><td style="text-align:left;">比较<strong>字符串内容</strong>（逐字符对比）</td></tr><tr><td style="text-align:left;"><strong>重写目的</strong></td><td style="text-align:left;">需子类自行重写以实现逻辑相等</td><td style="text-align:left;">已优化为内容比较，满足字符串业务需求</td></tr><tr><td style="text-align:left;"><strong>性能影响</strong></td><td style="text-align:left;">无额外开销</td><td style="text-align:left;">需遍历字符数组，但优先检查地址和长度</td></tr><tr><td style="text-align:left;"><strong>使用场景</strong></td><td style="text-align:left;">通用对象比较（默认不满足内容相等）</td><td style="text-align:left;">字符串内容对比（如 <code>&quot;abc&quot;.equals(&quot;abc&quot;)</code>）</td></tr></tbody></table><h3 id="【简单】字符串常量池有什么用" tabindex="-1"><a class="header-anchor" href="#【简单】字符串常量池有什么用" aria-hidden="true">#</a> 【简单】字符串常量池有什么用？</h3><p>字符串常量池是 JVM 的特殊内存区域，用于存储字符串字面量（如 <code>&quot;abc&quot;</code>），确保相同内容的字符串只存一份。</p><p><strong>字符串常量池通过复用相同字符串，节省内存并提升性能，直接赋值（<code>&quot;abc&quot;</code>）优先使用池，<code>new String()</code> 强制创建新对象。</strong></p><p>字符串常量池的作用有：</p><p><strong>节省内存</strong>：相同字符串复用，避免重复创建（如 <code>String s1 = &quot;hello&quot;</code> 和 <code>String s2 = &quot;hello&quot;</code> 指向同一对象）。</p><p><strong>提升性能</strong>：</p><ul><li><strong>快速比较</strong>：直接通过 <code>==</code> 判断地址是否相同（比 <code>equals()</code> 更快）。</li><li><strong>哈希优化</strong>：如 <code>HashMap</code> 的键可复用缓存的 <code>hashCode</code>。</li></ul><p><strong>实现规则</strong></p><ul><li><strong>直接赋值</strong>（<code>String s = &quot;abc&quot;</code>）→ <strong>优先从常量池引用</strong>。</li><li><strong><code>new String(&quot;abc&quot;)</code></strong> → <strong>强制在堆中创建新对象</strong>（不推荐，除非需隔离实例）。</li><li><strong><code>intern()</code> 方法</strong> → 将堆中的字符串对象添加到常量池（若池中不存在）。</li></ul><p><strong>注意事项</strong></p><ul><li><strong>避免滥用 <code>new String()</code></strong>：无特殊需求时，直接用字面量赋值。</li><li><strong><code>intern()</code> 慎用</strong>：可能增加常量池内存压力，需权衡性能。</li></ul><h3 id="【简单】string-s-new-string-abc-创建了几个字符串对象" tabindex="-1"><a class="header-anchor" href="#【简单】string-s-new-string-abc-创建了几个字符串对象" aria-hidden="true">#</a> 【简单】<code>String s = new String(&quot;abc&quot;)</code> 创建了几个字符串对象？</h3><p><code>new String(&quot;abc&quot;)</code> 可能创建 1~2 个对象（取决于常量池是否已存在&quot;abc&quot;），但堆中的新对象必定创建。</p><ul><li><strong>常量池已存在&quot;abc&quot;</strong>：<strong>1 个对象</strong>（仅堆中的 <code>new String</code>）</li><li><strong>常量池不存在&quot;abc&quot;</strong>：<strong>2 个对象</strong>（常量池的&quot;abc&quot; + 堆中的 <code>new String</code>）</li></ul><h3 id="【简单】string-intern-方法有什么用" tabindex="-1"><a class="header-anchor" href="#【简单】string-intern-方法有什么用" aria-hidden="true">#</a> 【简单】String#intern 方法有什么用？</h3><p>String#intern 方法的<strong>作用</strong>有：</p><ul><li><strong>强制字符串入池</strong>：将堆中的 <code>String</code> 对象添加到字符串常量池（若池中不存在）</li><li><strong>返回池中引用</strong>：保证相同内容的字符串始终返回同一内存地址</li></ul><p><strong>注意</strong></p><ul><li><strong>JDK7+ 优化</strong>：常量池从方法区移至堆内存，减少内存溢出风险。</li><li><strong>慎用场景</strong>： <ul><li>避免对动态生成的短生命周期字符串使用（可能导致池膨胀）</li><li>优先用于高频使用的静态字符串（如配置键值）</li></ul></li></ul><h3 id="【简单】string-类型的变量和常量做-运算时会发生什么" tabindex="-1"><a class="header-anchor" href="#【简单】string-类型的变量和常量做-运算时会发生什么" aria-hidden="true">#</a> 【简单】String 类型的变量和常量做“+”运算时会发生什么？</h3><p><strong>常量相加编译期优化，变量相加隐式转 <code>StringBuilder</code>，循环拼接必须显式使用 <code>StringBuilder</code> 避免性能损耗。</strong></p><p><strong>常量折叠（编译期优化）</strong></p><ul><li><strong>纯常量运算</strong>（如 <code>&quot;a&quot;+&quot;b&quot;</code>）→ 直接合并为 <code>&quot;ab&quot;</code>，仅存于常量池</li><li><strong>final 变量</strong> 视为常量，同样触发优化</li></ul><p><strong>变量拼接（运行时行为）</strong></p><ul><li><strong>含变量的运算</strong>（如 <code>str + &quot;b&quot;</code>）→ 隐式转换为 <code>StringBuilder</code> 操作<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 实际执行逻辑</span>
<span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>每次运算</strong> 生成临时 <code>StringBuilder</code> 和最终 <code>String</code> 对象</li></ul><p><strong>性能关键差异</strong></p><table><thead><tr><th>场景</th><th>内存/性能表现</th><th>优化建议</th></tr></thead><tbody><tr><td>常量+常量</td><td>零运行时开销</td><td>无需处理</td></tr><tr><td>单次变量+常量</td><td>1 次 <code>StringBuilder</code> 创建</td><td>可接受</td></tr><tr><td><strong>循环内拼接</strong></td><td>多次创建 <code>StringBuilder</code>（性能陷阱）</td><td><strong>必须显式用 <code>StringBuilder</code></strong></td></tr></tbody></table><p><strong>最佳实践</strong></p><ul><li><p><strong>简单拼接</strong>：直接使用 <code>+</code>（可读性优先）</p></li><li><p><strong>循环/批量拼接</strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// ✅ 正确写法</span>
<span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> str <span class="token operator">:</span> list<span class="token punctuation">)</span> sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> result <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ❌ 错误写法（低效）</span>
<span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> str <span class="token operator">:</span> list<span class="token punctuation">)</span> s <span class="token operator">+=</span> str<span class="token punctuation">;</span> <span class="token comment">// 每次循环隐式新建 StringBuilder</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,31);function C(_,J){const r=d("CodeTabs"),i=d("ExternalLinkIcon");return p(),g("div",null,[h,l(r,{id:"421",data:[{id:"浅拷贝实现"},{id:"深拷贝实现"}],"tab-id":"深拷贝和浅拷贝实现示例"},{title0:s(({value:a,isActive:o})=>[n("浅拷贝实现")]),title1:s(({value:a,isActive:o})=>[n("深拷贝实现")]),tab0:s(({value:a,isActive:o})=>[k]),tab1:s(({value:a,isActive:o})=>[f]),_:1}),b,t("div",v,[y,t("p",null,[t("a",x,[n("Java hashCode() 和 equals() 的若干问题解答"),l(i)])])]),m,t("div",q,[S,t("p",null,[t("a",w,[n("StringBuilder？来重温一下字符串拼接吧"),l(i)]),n(" 。")])]),j])}const P=c(u,[["render",C],["__file","index.html.vue"]]);export{P as default};
