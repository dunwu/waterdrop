import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as r,c as u,d as o,w as a,a as s,b as n,e as c}from"./app-36bf0b1d.js";const k={},v=c(`<h1 id="sql" tabindex="-1"><a class="header-anchor" href="#sql" aria-hidden="true">#</a> SQL</h1><div class="hint-container info"><p class="hint-container-title">概述</p><p><strong>SQL（Structured Query Language，结构化查询语言）</strong> 是一种高级的非过程化编程语言，用于管理 <strong>RDBMS（Relational Database Management System，关系数据库管理系统）</strong>。</p><p>本文主要介绍关系型数据库的基本语法，限于篇幅，本文侧重说明用法，不会展开讲解特性、原理。</p><blockquote><p>注：本文语法主要针对 Mysql，但大部分的语法对其他关系型数据库也适用。</p></blockquote></div><h2 id="sql-简介" tabindex="-1"><a class="header-anchor" href="#sql-简介" aria-hidden="true">#</a> SQL 简介</h2><h3 id="数据库术语" tabindex="-1"><a class="header-anchor" href="#数据库术语" aria-hidden="true">#</a> 数据库术语</h3><ul><li><strong>数据库（database）</strong> - 保存有组织的数据的容器（通常是一个文件或一组文件）。</li><li><strong>数据表（table）</strong> - 某种特定类型数据的结构化清单。</li><li><strong>模式（schema）</strong> - 关于数据库和表的布局及特性的信息。模式定义了数据在表中如何存储，包含存储什么样的数据，数据如何分解，各部分信息如何命名等信息。数据库和表都有模式。</li><li><strong>行（row）</strong> - 表中的一条记录。</li><li><strong>列（column）</strong> - 表中的一个字段。所有表都是由一个或多个列组成的。</li><li><strong>主键（primary key）</strong> - 一列（或一组列），其值能够唯一标识表中每一行。</li></ul><h3 id="sql-语法" tabindex="-1"><a class="header-anchor" href="#sql-语法" aria-hidden="true">#</a> SQL 语法</h3><p>SQL（Structured Query Language)，标准 SQL 由 ANSI 标准委员会管理，从而称为 ANSI SQL。各个 DBMS 都有自己的实现，如 PL/SQL、Transact-SQL 等。</p><h4 id="sql-语法结构" tabindex="-1"><a class="header-anchor" href="#sql-语法结构" aria-hidden="true">#</a> SQL 语法结构</h4><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/database/mysql/sql-syntax.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>SQL 语法结构包括：</p><ul><li><strong>子句</strong> - 是语句和查询的组成成分（在某些情况下，这些都是可选的）。</li><li><strong>表达式</strong> - 可以产生任何标量值，或由列和行的数据库表。</li><li><strong>谓词</strong> - 给需要评估的 SQL 三值逻辑（3VL）（<code>true</code>/<code>false</code>/<code>unknown</code>）或布尔真值指定条件，并限制语句和查询的效果，或改变程序流程。</li><li><strong>查询</strong> - 基于特定条件检索数据。这是 SQL 的一个重要组成部分。</li><li><strong>语句</strong> - 可以持久地影响纲要和数据，也可以控制数据库事务、程序流程、连接、会话或诊断。</li></ul><h4 id="sql-语法要点" tabindex="-1"><a class="header-anchor" href="#sql-语法要点" aria-hidden="true">#</a> SQL 语法要点</h4><ul><li><strong>SQL 语句不区分大小写</strong>，但是数据库表名、列名和值是否区分，依赖于具体的 DBMS 以及配置。</li></ul><p>例如：<code>SELECT</code> 与 <code>select</code> 、<code>Select</code> 是相同的。</p><ul><li><p><strong>多条 SQL 语句必须以分号（<code>;</code>）分隔</strong>。</p></li><li><p>处理 SQL 语句时，<strong>所有空格都被忽略</strong>。SQL 语句可以写成一行，也可以分写为多行。</p></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 一行 SQL 语句</span>
<span class="token keyword">UPDATE</span> <span class="token keyword">user</span> <span class="token keyword">SET</span> username<span class="token operator">=</span><span class="token string">&#39;robot&#39;</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">&#39;robot&#39;</span> <span class="token keyword">WHERE</span> username <span class="token operator">=</span> <span class="token string">&#39;root&#39;</span><span class="token punctuation">;</span>

<span class="token comment">-- 多行 SQL 语句</span>
<span class="token keyword">UPDATE</span> <span class="token keyword">user</span>
<span class="token keyword">SET</span> username<span class="token operator">=</span><span class="token string">&#39;robot&#39;</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">&#39;robot&#39;</span>
<span class="token keyword">WHERE</span> username <span class="token operator">=</span> <span class="token string">&#39;root&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>SQL 支持三种注释</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> prod_name <span class="token comment">-- 这是一条注释</span>
<span class="token keyword">FROM</span> Products<span class="token punctuation">;</span>

<span class="token comment"># 这是一条注释</span>
<span class="token keyword">SELECT</span> prod_name
<span class="token keyword">FROM</span> Products<span class="token punctuation">;</span>

<span class="token comment">/* SELECT prod_name, vend_id
FROM Products; */</span>
<span class="token keyword">SELECT</span> prod_name
<span class="token keyword">FROM</span> Products<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="sql-分类" tabindex="-1"><a class="header-anchor" href="#sql-分类" aria-hidden="true">#</a> SQL 分类</h4><ul><li>DDL - <strong>DDL</strong>，英文叫做 Data Definition Language，即**“数据定义语言”**。 <ul><li><strong>DDL 用于定义数据库对象</strong>。</li><li>DDL 定义操作包括创建（<code>CREATE</code>）、删除（<code>DROP</code>）、修改（<code>ALTER</code>）；而被操作的对象包括：数据库、数据表和列、视图、索引。</li></ul></li><li>DML - <strong>DML</strong>，英文叫做 Data Manipulation Language，即**“数据操作语言”**。 <ul><li><strong>DML 用于访问数据库的数据</strong>。</li><li>DML 访问操作包括插入（<code>INSERT</code>）、删除（<code>DELETE</code>）、修改（<code>UPDATE</code>）、查询（<code>SELECT</code>）。这四个指令合称 <strong>CRUD</strong>，英文单词为 Create, Read, Update, Delete，即增删改查。</li></ul></li><li>TCL - <strong>TCL</strong>，英文叫做 Transaction Control Language，即**“事务控制语言”**。 <ul><li><strong>TCL 用于管理数据库中的事务</strong>，实际上就是用于管理由 DML 语句所产生的数据变更，它还允许将语句分组为逻辑事务。</li><li>TCL 的核心指令是 <code>COMMIT</code>、<code>ROLLBACK</code>。</li></ul></li><li>DCL - <strong>DCL</strong>，英文叫做 Data Control Language，即**“数据控制语言”**。 <ul><li><strong>DCL 用于对数据访问权限进行控制</strong>，它可以控制特定用户账户对数据表、查看表、预存程序、用户自定义函数等数据库对象的控制权。</li><li>DCL 的核心指令是 <code>GRANT</code>、<code>REVOKE</code>。</li><li>DCL 以<strong>控制用户的访问权限</strong>为主，因此其指令作法并不复杂，可利用 DCL 控制的权限有：<code>CONNECT</code>、<code>SELECT</code>、<code>INSERT</code>、<code>UPDATE</code>、<code>DELETE</code>、<code>EXECUTE</code>、<code>USAGE</code>、<code>REFERENCES</code>。</li><li>根据不同的 DBMS 以及不同的安全性实体，其支持的权限控制也有所不同。</li></ul></li></ul><h2 id="数据定义-create、alter、drop" tabindex="-1"><a class="header-anchor" href="#数据定义-create、alter、drop" aria-hidden="true">#</a> 数据定义（CREATE、ALTER、DROP）</h2><p>DDL 的主要功能是定义数据库对象（如：数据库、数据表、视图、索引等）。</p><h3 id="数据库-database" tabindex="-1"><a class="header-anchor" href="#数据库-database" aria-hidden="true">#</a> 数据库（DATABASE）</h3><p>以下为数据库定义示例：</p>`,24),m=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"CREATE"),n(),s("span",{class:"token keyword"},"DATABASE"),n(),s("span",{class:"token keyword"},"IF"),n(),s("span",{class:"token operator"},"NOT"),n(),s("span",{class:"token keyword"},"EXISTS"),n(" db_tutorial"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),b=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"DROP"),n(),s("span",{class:"token keyword"},"DATABASE"),n(),s("span",{class:"token keyword"},"IF"),n(),s("span",{class:"token keyword"},"EXISTS"),n(" db_tutorial"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),E=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"USE"),n(" db_tutorial"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),y=s("h3",{id:"数据表-table",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#数据表-table","aria-hidden":"true"},"#"),n(" 数据表（TABLE）")],-1),g=s("p",null,"以下为数据表定义示例：",-1),w=s("p",null,[n("利用 "),s("code",null,"CREATE TABLE"),n(" 创建表，必须给出下列信息：")],-1),h=s("ul",null,[s("li",null,[n("新表的名字，在关键字 "),s("code",null,"CREATE TABLE"),n(" 之后给出；")]),s("li",null,"表列的名字和定义，用逗号分隔；"),s("li",null,"有的 DBMS 还要求指定表的位置。")],-1),_=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"CREATE"),n(),s("span",{class:"token keyword"},"TABLE"),n(),s("span",{class:"token keyword"},"user"),n(),s("span",{class:"token punctuation"},"("),n(`
    id       `),s("span",{class:"token keyword"},"INT"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"10"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"UNSIGNED"),n(),s("span",{class:"token operator"},"NOT"),n(),s("span",{class:"token boolean"},"NULL"),n(),s("span",{class:"token keyword"},"COMMENT"),n(),s("span",{class:"token string"},"'Id'"),s("span",{class:"token punctuation"},","),n(`
    username `),s("span",{class:"token keyword"},"VARCHAR"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"64"),s("span",{class:"token punctuation"},")"),n("      "),s("span",{class:"token operator"},"NOT"),n(),s("span",{class:"token boolean"},"NULL"),n(),s("span",{class:"token keyword"},"DEFAULT"),n(),s("span",{class:"token string"},"'default'"),n(),s("span",{class:"token keyword"},"COMMENT"),n(),s("span",{class:"token string"},"'用户名'"),s("span",{class:"token punctuation"},","),n(`
    password `),s("span",{class:"token keyword"},"VARCHAR"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"64"),s("span",{class:"token punctuation"},")"),n("      "),s("span",{class:"token operator"},"NOT"),n(),s("span",{class:"token boolean"},"NULL"),n(),s("span",{class:"token keyword"},"DEFAULT"),n(),s("span",{class:"token string"},"'default'"),n(),s("span",{class:"token keyword"},"COMMENT"),n(),s("span",{class:"token string"},"'密码'"),s("span",{class:"token punctuation"},","),n(`
    email    `),s("span",{class:"token keyword"},"VARCHAR"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"64"),s("span",{class:"token punctuation"},")"),n("      "),s("span",{class:"token operator"},"NOT"),n(),s("span",{class:"token boolean"},"NULL"),n(),s("span",{class:"token keyword"},"DEFAULT"),n(),s("span",{class:"token string"},"'default'"),n(),s("span",{class:"token keyword"},"COMMENT"),n(),s("span",{class:"token string"},"'邮箱'"),n(`
`),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"COMMENT"),n(),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'用户表'"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),R=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"DROP"),n(),s("span",{class:"token keyword"},"TABLE"),n(),s("span",{class:"token keyword"},"IF"),n(),s("span",{class:"token keyword"},"EXISTS"),n(),s("span",{class:"token keyword"},"user"),s("span",{class:"token punctuation"},";"),n(`
`),s("span",{class:"token keyword"},"DROP"),n(),s("span",{class:"token keyword"},"TABLE"),n(" CustCopy"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),T=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"CREATE"),n(),s("span",{class:"token keyword"},"TABLE"),n(" vip_user "),s("span",{class:"token keyword"},"AS"),n(`
`),s("span",{class:"token keyword"},"SELECT"),n(),s("span",{class:"token operator"},"*"),n(),s("span",{class:"token keyword"},"FROM"),n(),s("span",{class:"token keyword"},"user"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),L=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"ALTER"),n(),s("span",{class:"token keyword"},"TABLE"),n(),s("span",{class:"token keyword"},"user"),n(`
`),s("span",{class:"token keyword"},"ADD"),n(" age "),s("span",{class:"token keyword"},"int"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"3"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),A=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"ALTER"),n(),s("span",{class:"token keyword"},"TABLE"),n(),s("span",{class:"token keyword"},"user"),n(`
`),s("span",{class:"token keyword"},"DROP"),n(),s("span",{class:"token keyword"},"COLUMN"),n(" age"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),O=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"ALTER"),n(),s("span",{class:"token keyword"},"TABLE"),n(),s("span",{class:"token keyword"},"user"),n(`
`),s("span",{class:"token keyword"},"MODIFY"),n(),s("span",{class:"token keyword"},"COLUMN"),n(" age "),s("span",{class:"token keyword"},"tinyint"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),N=s("p",null,"utf8mb4 编码是 utf8 编码的超集，兼容 utf8，并且能存储 4 字节的表情字符。如果表的编码指定为 utf8，在保存 emoji 字段时会报错。",-1),q=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"ALTER"),n(),s("span",{class:"token keyword"},"TABLE"),n(),s("span",{class:"token keyword"},"user"),n(),s("span",{class:"token keyword"},"CONVERT"),n(),s("span",{class:"token keyword"},"TO"),n(),s("span",{class:"token keyword"},"CHARACTER"),n(),s("span",{class:"token keyword"},"SET"),n(" utf8mb4 "),s("span",{class:"token keyword"},"COLLATE"),n(" utf8mb4_general_ci"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),S=s("p",null,"以下为数据表信息查看示例：",-1),C=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"SELECT"),n(),s("span",{class:"token operator"},"*"),n(),s("span",{class:"token keyword"},"FROM"),n(" information_schema"),s("span",{class:"token punctuation"},"."),s("span",{class:"token keyword"},"tables"),n(`
`),s("span",{class:"token keyword"},"WHERE"),n(" table_schema "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},"'test'"),n(),s("span",{class:"token operator"},"AND"),n(" table_name "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},"'user'"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),I=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"SELECT"),n(),s("span",{class:"token operator"},"*"),n(),s("span",{class:"token keyword"},"FROM"),n(" information_schema"),s("span",{class:"token punctuation"},"."),s("span",{class:"token keyword"},"columns"),n(`
`),s("span",{class:"token keyword"},"WHERE"),n(" table_schema "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},"'test'"),n(),s("span",{class:"token operator"},"AND"),n(" table_name "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},"'user'"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),x=c('<h3 id="视图-view" tabindex="-1"><a class="header-anchor" href="#视图-view" aria-hidden="true">#</a> 视图（VIEW）</h3><p><strong>“视图”是基于 SQL 语句的结果集的可视化的表</strong>。视图是虚拟的表，本身不存储数据，也就不能对其进行索引操作。对视图的操作和对普通表的操作一样。</p><p>视图的作用：</p><ul><li>简化复杂的 SQL 操作，比如复杂的连接。</li><li>只使用实际表的一部分数据。</li><li>通过只给用户访问视图的权限，保证数据的安全性。</li><li>更改数据格式和表示。</li></ul><p>以下为视图定义示例：</p>',5),D=s("p",null,"创建一个名为 ProductCustomers 的视图，它联结三个表，返回已订购了任意产品的所有顾客的列表。",-1),M=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"CREATE"),n(),s("span",{class:"token keyword"},"VIEW"),n(" ProductCustomers "),s("span",{class:"token keyword"},"AS"),n(`
`),s("span",{class:"token keyword"},"SELECT"),n(" cust_name"),s("span",{class:"token punctuation"},","),n(" cust_contact"),s("span",{class:"token punctuation"},","),n(` prod_id
`),s("span",{class:"token keyword"},"FROM"),n(" Customers"),s("span",{class:"token punctuation"},","),n(" Orders"),s("span",{class:"token punctuation"},","),n(` OrderItems
`),s("span",{class:"token keyword"},"WHERE"),n(" Customers"),s("span",{class:"token punctuation"},"."),n("cust_id "),s("span",{class:"token operator"},"="),n(" Orders"),s("span",{class:"token punctuation"},"."),n(`cust_id
`),s("span",{class:"token operator"},"AND"),n(" OrderItems"),s("span",{class:"token punctuation"},"."),n("order_num "),s("span",{class:"token operator"},"="),n(" Orders"),s("span",{class:"token punctuation"},"."),n("order_num"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),U=s("p",null,"检索订购了产品 RGAN01 的顾客",-1),F=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"SELECT"),n(" cust_name"),s("span",{class:"token punctuation"},","),n(` cust_contact
`),s("span",{class:"token keyword"},"FROM"),n(` ProductCustomers
`),s("span",{class:"token keyword"},"WHERE"),n(" prod_id "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},"'RGAN01'"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),f=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"DROP"),n(),s("span",{class:"token keyword"},"VIEW"),n(" top_10_user_view"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),H=s("h3",{id:"索引-index",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#索引-index","aria-hidden":"true"},"#"),n(" 索引（INDEX）")],-1),P=s("p",null,[s("strong",null,"“索引”是数据库为了提高查找效率的一种数据结构"),n("。")],-1),B=s("p",null,[n("日常生活中，我们可以通过检索目录，来快速定位书本中的内容。索引和数据表，就好比目录和书，想要高效查询数据表，索引至关重要。在数据量小且负载较低时，不恰当的索引对于性能的影响可能还不明显；但随着数据量逐渐增大，性能则会急剧下降。因此，"),s("strong",null,"设置合理的索引是数据库查询性能优化的最有效手段"),n("。")],-1),W=s("p",null,"更新一个包含索引的表需要比更新一个没有索引的表花费更多的时间，这是由于索引本身也需要更新。因此，理想的做法是仅仅在常常被搜索的列（以及表）上面创建索引。",-1),Y=s("p",null,"“唯一索引”表明此索引的每一个索引值只对应唯一的数据记录。",-1),G=s("p",null,"以下为视图定义示例：",-1),Q=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"CREATE"),n(),s("span",{class:"token keyword"},"INDEX"),n(" idx_email "),s("span",{class:"token keyword"},"ON"),n(),s("span",{class:"token keyword"},"user"),s("span",{class:"token punctuation"},"("),n("email"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),V=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"CREATE"),n(),s("span",{class:"token keyword"},"UNIQUE"),n(),s("span",{class:"token keyword"},"INDEX"),n(" uniq_name "),s("span",{class:"token keyword"},"ON"),n(),s("span",{class:"token keyword"},"user"),s("span",{class:"token punctuation"},"("),n("name"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),K=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"ALTER"),n(),s("span",{class:"token keyword"},"TABLE"),n(),s("span",{class:"token keyword"},"user"),n(),s("span",{class:"token keyword"},"DROP"),n(),s("span",{class:"token keyword"},"INDEX"),n(" idx_email"),s("span",{class:"token punctuation"},";"),n(`
`),s("span",{class:"token keyword"},"ALTER"),n(),s("span",{class:"token keyword"},"TABLE"),n(),s("span",{class:"token keyword"},"user"),n(),s("span",{class:"token keyword"},"DROP"),n(),s("span",{class:"token keyword"},"INDEX"),n(" uniq_name"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),J=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"ALTER"),n(),s("span",{class:"token keyword"},"TABLE"),n(),s("span",{class:"token keyword"},"user"),n(),s("span",{class:"token keyword"},"ADD"),n(),s("span",{class:"token keyword"},"PRIMARY"),n(),s("span",{class:"token keyword"},"KEY"),n(),s("span",{class:"token punctuation"},"("),n("id"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),X=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"ALTER"),n(),s("span",{class:"token keyword"},"TABLE"),n(),s("span",{class:"token keyword"},"user"),n(),s("span",{class:"token keyword"},"DROP"),n(),s("span",{class:"token keyword"},"PRIMARY"),n(),s("span",{class:"token keyword"},"KEY"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),j=c(`<h3 id="约束-constraint" tabindex="-1"><a class="header-anchor" href="#约束-constraint" aria-hidden="true">#</a> 约束（CONSTRAINT）</h3><p>约束（constraint）管理如何插入或处理数据库数据的规则。</p><p>如果存在违反约束的数据行为，行为会被约束终止。约束可以在创建表时规定（通过 <code>CREATE TABLE</code> 语句），或者在表创建之后规定（通过 <code>ALTER TABLE</code> 语句）。</p><p>定义约束的语法：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> table_name <span class="token punctuation">(</span>
    column_name1 data_type<span class="token punctuation">(</span>size<span class="token punctuation">)</span> constraint_name<span class="token punctuation">,</span>
    column_name2 data_type<span class="token punctuation">(</span>size<span class="token punctuation">)</span> constraint_name<span class="token punctuation">,</span>
    column_name3 data_type<span class="token punctuation">(</span>size<span class="token punctuation">)</span> constraint_name<span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>约束类型</p><ul><li><code>NOT NULL</code> - 指示字段不能存储 <code>NULL</code> 值。</li><li><code>UNIQUE KEY</code> - 保证字段的每行必须有唯一的值。</li><li><code>PRIMARY KEY</code> - PRIMARY KEY 的作用是唯一标识一条记录，不能重复，不能为空，即相当于 <code>NOT NULL</code> + <code>UNIQUE</code>。确保字段（或两个列多个列的结合）有唯一标识，有助于更容易更快速地找到表中的一个特定的记录。</li><li><code>FOREIGN KEY</code> - 保证一个表中的数据匹配另一个表中的值的参照完整性。</li><li><code>CHECK</code> - 用于检查字段取值范围的有效性。</li><li><code>DEFAULT</code> - 表明字段的默认值。如果插入数据时，该字段没有赋值，就会被设置为默认值。</li></ul><p>以下为约束定义示例：</p>`,8),z=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"CREATE"),n(),s("span",{class:"token keyword"},"TABLE"),n(" demo "),s("span",{class:"token punctuation"},"("),n(`
	id `),s("span",{class:"token keyword"},"INT"),n(),s("span",{class:"token keyword"},"UNSIGNED"),n(),s("span",{class:"token operator"},"NOT"),n(),s("span",{class:"token boolean"},"NULL"),n(`
`),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),$=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"CREATE"),n(),s("span",{class:"token keyword"},"TABLE"),n(" demo2 "),s("span",{class:"token punctuation"},"("),n(`
	id `),s("span",{class:"token keyword"},"INT"),n(),s("span",{class:"token keyword"},"UNSIGNED"),n(),s("span",{class:"token operator"},"NOT"),n(),s("span",{class:"token boolean"},"NULL"),s("span",{class:"token punctuation"},","),n(`
	name `),s("span",{class:"token keyword"},"VARCHAR"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"50"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"NOT"),n(),s("span",{class:"token boolean"},"NULL"),n(),s("span",{class:"token keyword"},"UNIQUE"),n(),s("span",{class:"token keyword"},"KEY"),n(`
`),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Z=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"CREATE"),n(),s("span",{class:"token keyword"},"TABLE"),n(" demo3 "),s("span",{class:"token punctuation"},"("),n(`
	id `),s("span",{class:"token keyword"},"INT"),n(),s("span",{class:"token keyword"},"UNSIGNED"),n(),s("span",{class:"token operator"},"NOT"),n(),s("span",{class:"token boolean"},"NULL"),n(),s("span",{class:"token keyword"},"PRIMARY"),n(),s("span",{class:"token keyword"},"KEY"),s("span",{class:"token punctuation"},","),n(`
	name `),s("span",{class:"token keyword"},"VARCHAR"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"50"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"NOT"),n(),s("span",{class:"token boolean"},"NULL"),n(),s("span",{class:"token keyword"},"UNIQUE"),n(),s("span",{class:"token keyword"},"KEY"),n(`
`),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ss=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"CREATE"),n(),s("span",{class:"token keyword"},"TABLE"),n(" demo4 "),s("span",{class:"token punctuation"},"("),n(`
	id `),s("span",{class:"token keyword"},"INT"),n(),s("span",{class:"token keyword"},"UNSIGNED"),n(),s("span",{class:"token operator"},"NOT"),n(),s("span",{class:"token boolean"},"NULL"),n(),s("span",{class:"token keyword"},"PRIMARY"),n(),s("span",{class:"token keyword"},"KEY"),s("span",{class:"token punctuation"},","),n(`
	name `),s("span",{class:"token keyword"},"VARCHAR"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"50"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"NOT"),n(),s("span",{class:"token boolean"},"NULL"),n(),s("span",{class:"token keyword"},"UNIQUE"),n(),s("span",{class:"token keyword"},"KEY"),s("span",{class:"token punctuation"},","),n(`
	fid `),s("span",{class:"token keyword"},"INT"),n(),s("span",{class:"token keyword"},"UNSIGNED"),s("span",{class:"token punctuation"},","),n(`
	`),s("span",{class:"token keyword"},"FOREIGN"),n(),s("span",{class:"token keyword"},"KEY"),n(),s("span",{class:"token punctuation"},"("),n("fid"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"REFERENCES"),n(" demo3"),s("span",{class:"token punctuation"},"("),n("id"),s("span",{class:"token punctuation"},")"),n(`
`),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ns=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"CREATE"),n(),s("span",{class:"token keyword"},"TABLE"),n(" demo5 "),s("span",{class:"token punctuation"},"("),n(`
	id `),s("span",{class:"token keyword"},"INT"),n(),s("span",{class:"token keyword"},"UNSIGNED"),n(),s("span",{class:"token operator"},"NOT"),n(),s("span",{class:"token boolean"},"NULL"),n(),s("span",{class:"token keyword"},"PRIMARY"),n(),s("span",{class:"token keyword"},"KEY"),s("span",{class:"token punctuation"},","),n(`
	name `),s("span",{class:"token keyword"},"VARCHAR"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"50"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"NOT"),n(),s("span",{class:"token boolean"},"NULL"),n(),s("span",{class:"token keyword"},"UNIQUE"),n(),s("span",{class:"token keyword"},"KEY"),s("span",{class:"token punctuation"},","),n(`
	age `),s("span",{class:"token keyword"},"INT"),n(),s("span",{class:"token keyword"},"CHECK"),n(),s("span",{class:"token punctuation"},"("),n("age "),s("span",{class:"token operator"},">"),n(),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},")"),n(`
`),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),as=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"CREATE"),n(),s("span",{class:"token keyword"},"TABLE"),n(" demo6 "),s("span",{class:"token punctuation"},"("),n(`
	id `),s("span",{class:"token keyword"},"INT"),n(),s("span",{class:"token keyword"},"UNSIGNED"),n(),s("span",{class:"token operator"},"NOT"),n(),s("span",{class:"token boolean"},"NULL"),n(),s("span",{class:"token keyword"},"PRIMARY"),n(),s("span",{class:"token keyword"},"KEY"),s("span",{class:"token punctuation"},","),n(`
	name `),s("span",{class:"token keyword"},"VARCHAR"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"50"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"NOT"),n(),s("span",{class:"token boolean"},"NULL"),n(),s("span",{class:"token keyword"},"UNIQUE"),n(),s("span",{class:"token keyword"},"KEY"),s("span",{class:"token punctuation"},","),n(`
	age `),s("span",{class:"token keyword"},"INT"),n(),s("span",{class:"token keyword"},"DEFAULT"),n(),s("span",{class:"token number"},"0"),n(`
`),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),es=c('<h2 id="增删改查-crud" tabindex="-1"><a class="header-anchor" href="#增删改查-crud" aria-hidden="true">#</a> 增删改查（CRUD）</h2><p>增删改查，又称为 <strong><code>CRUD</code></strong>，是数据库基本操作中的基本操作。</p><h3 id="插入数据-insert" tabindex="-1"><a class="header-anchor" href="#插入数据-insert" aria-hidden="true">#</a> 插入数据（INSERT）</h3><p><code>INSERT INTO</code> 语句用于向表中插入新记录。</p><p>以下为插入数据示例：</p>',5),ts=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token comment"},"-- 下面两条 SQL 等价"),n(`
`),s("span",{class:"token keyword"},"INSERT"),n(),s("span",{class:"token keyword"},"INTO"),n(` Customers
`),s("span",{class:"token keyword"},"VALUES"),n(),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},"'1000000006'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'Toy Land'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'123 Any Street'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'New York'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'NY'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'11111'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'USA'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token boolean"},"NULL"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token boolean"},"NULL"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`

`),s("span",{class:"token keyword"},"INSERT"),n(),s("span",{class:"token keyword"},"INTO"),n(" Customers"),s("span",{class:"token punctuation"},"("),n("cust_id"),s("span",{class:"token punctuation"},","),n(" cust_name"),s("span",{class:"token punctuation"},","),n(" cust_address"),s("span",{class:"token punctuation"},","),n(" cust_city"),s("span",{class:"token punctuation"},","),n(" cust_state"),s("span",{class:"token punctuation"},","),n(" cust_zip"),s("span",{class:"token punctuation"},","),n(" cust_country"),s("span",{class:"token punctuation"},","),n(" cust_contact"),s("span",{class:"token punctuation"},","),n(" cust_email"),s("span",{class:"token punctuation"},")"),n(`
`),s("span",{class:"token keyword"},"VALUES"),n(),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},"'1000000006'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'Toy Land'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'123 Any Street'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'New York'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'NY'"),s("span",{class:"token punctuation"},","),s("span",{class:"token string"},"'11111'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'USA'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token boolean"},"NULL"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token boolean"},"NULL"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),os=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"INSERT"),n(),s("span",{class:"token keyword"},"INTO"),n(" customers"),s("span",{class:"token punctuation"},"("),n("cust_id"),s("span",{class:"token punctuation"},","),n(" cust_name"),s("span",{class:"token punctuation"},","),n(" cust_address"),s("span",{class:"token punctuation"},","),n(" cust_city"),s("span",{class:"token punctuation"},","),n(" cust_state"),s("span",{class:"token punctuation"},","),n(" cust_zip"),s("span",{class:"token punctuation"},","),n(" cust_country"),s("span",{class:"token punctuation"},")"),n(`
`),s("span",{class:"token keyword"},"VALUES"),n(),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},"'1000000006'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'Toy Land'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'123 Any Street'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'New York'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'NY'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'11111'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'USA'"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ls=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"INSERT"),n(),s("span",{class:"token keyword"},"INTO"),n(" Customers"),s("span",{class:"token punctuation"},"("),n("cust_id"),s("span",{class:"token punctuation"},","),n(" cust_contact"),s("span",{class:"token punctuation"},","),n(" cust_email"),s("span",{class:"token punctuation"},","),n(" cust_name"),s("span",{class:"token punctuation"},","),n(" cust_address"),s("span",{class:"token punctuation"},","),n(" cust_city"),s("span",{class:"token punctuation"},","),n(" cust_state"),s("span",{class:"token punctuation"},","),n(" cust_zip"),s("span",{class:"token punctuation"},","),n(" cust_country"),s("span",{class:"token punctuation"},")"),n(`
`),s("span",{class:"token keyword"},"SELECT"),n(" cust_id"),s("span",{class:"token punctuation"},","),n(" cust_contact"),s("span",{class:"token punctuation"},","),n(" cust_email"),s("span",{class:"token punctuation"},","),n(" cust_name"),s("span",{class:"token punctuation"},","),n(" cust_address"),s("span",{class:"token punctuation"},","),n(" cust_city"),s("span",{class:"token punctuation"},","),n(" cust_state"),s("span",{class:"token punctuation"},","),n(" cust_zip"),s("span",{class:"token punctuation"},","),n(` cust_country
`),s("span",{class:"token keyword"},"FROM"),n(" CustNew"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),cs=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"SELECT"),n(),s("span",{class:"token operator"},"*"),n(`
`),s("span",{class:"token keyword"},"INTO"),n(` CustCopy
`),s("span",{class:"token keyword"},"FROM"),n(" Customers"),s("span",{class:"token punctuation"},";"),n(`

`),s("span",{class:"token comment"},"-- MariaDB、MySQL、Oracle、PostgreSQL 和 SQLite"),n(`
`),s("span",{class:"token keyword"},"CREATE"),n(),s("span",{class:"token keyword"},"TABLE"),n(" CustCopy "),s("span",{class:"token keyword"},"AS"),n(`
`),s("span",{class:"token keyword"},"SELECT"),n(),s("span",{class:"token operator"},"*"),n(),s("span",{class:"token keyword"},"FROM"),n(" Customers"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ds=s("h3",{id:"更新数据-update",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#更新数据-update","aria-hidden":"true"},"#"),n(" 更新数据（UPDATE）")],-1),is=s("p",null,[s("code",null,"UPDATE"),n(" 语句用于更新表中的记录。")],-1),ps=s("p",null,"更新客户 1000000005 的电子邮件地址",-1),rs=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"UPDATE"),n(` Customers
`),s("span",{class:"token keyword"},"SET"),n(" cust_email "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},"'kim@thetoystore.com'"),n(`
`),s("span",{class:"token keyword"},"WHERE"),n(" cust_id "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},"'1000000005'"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),us=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"UPDATE"),n(` customers
`),s("span",{class:"token keyword"},"SET"),n(" cust_contact "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},"'Sam Roberts'"),s("span",{class:"token punctuation"},","),n(" cust_email "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},"'sam@toyland.com'"),n(`
`),s("span",{class:"token keyword"},"WHERE"),n(" cust_id "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},"'1000000006'"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ks=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"DELETE"),n(),s("span",{class:"token keyword"},"FROM"),n(` Customers
`),s("span",{class:"token keyword"},"WHERE"),n(" cust_id "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},"'1000000006'"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),vs=s("h3",{id:"删除数据-delete",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#删除数据-delete","aria-hidden":"true"},"#"),n(" 删除数据（DELETE）")],-1),ms=s("ul",null,[s("li",null,[s("code",null,"DELETE"),n(" 语句用于删除表中的记录。")]),s("li",null,[s("code",null,"TRUNCATE TABLE"),n(" 可以清空表，也就是删除所有行。")])],-1),bs=s("p",null,"以下为删除数据示例：",-1),Es=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"DELETE"),n(),s("span",{class:"token keyword"},"FROM"),n(),s("span",{class:"token keyword"},"user"),n(),s("span",{class:"token keyword"},"WHERE"),n(" username "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},"'robot'"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),ys=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"TRUNCATE"),n(),s("span",{class:"token keyword"},"TABLE"),n(),s("span",{class:"token keyword"},"user"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),gs=s("p",null,"如果要根据时间范围批量删除大量数据，最简单的语句如下：",-1),ws=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"DELETE"),n(),s("span",{class:"token keyword"},"FROM"),n(),s("span",{class:"token keyword"},"order"),n(`
`),s("span",{class:"token keyword"},"WHERE"),n(),s("span",{class:"token keyword"},"timestamp"),n(),s("span",{class:"token operator"},"<"),n(" SUBDATE"),s("span",{class:"token punctuation"},"("),n("CURDATE"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token keyword"},"INTERVAL"),n(),s("span",{class:"token number"},"3"),n(),s("span",{class:"token keyword"},"MONTH"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),hs=s("p",null,"上面的语句，大概率执行会报错，提示删除失败，因为需要删除的数据量太大了，所以需要分批删除。",-1),_s=s("p",null,"可以先通过一次查询，找到符合条件的历史订单中最大的那个订单 ID，然后在删除语句中把删除的条件转换成按主键删除。",-1),Rs=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"SELECT"),n(),s("span",{class:"token function"},"max"),s("span",{class:"token punctuation"},"("),n("id"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"FROM"),n(),s("span",{class:"token keyword"},"order"),n(`
`),s("span",{class:"token keyword"},"WHERE"),n(),s("span",{class:"token keyword"},"timestamp"),n(),s("span",{class:"token operator"},"<"),n(" SUBDATE"),s("span",{class:"token punctuation"},"("),n("CURDATE"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token keyword"},"INTERVAL"),n(),s("span",{class:"token number"},"3"),n(),s("span",{class:"token keyword"},"MONTH"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`

`),s("span",{class:"token comment"},"-- 分批删除，? 填上一条语句查到的最大 ID"),n(`
`),s("span",{class:"token keyword"},"DELETE"),n(),s("span",{class:"token keyword"},"FROM"),n(),s("span",{class:"token keyword"},"order"),n(`
`),s("span",{class:"token keyword"},"WHERE"),n(" id "),s("span",{class:"token operator"},"<="),n(" ? "),s("span",{class:"token keyword"},"ORDER"),n(),s("span",{class:"token keyword"},"BY"),n(" id "),s("span",{class:"token keyword"},"LIMIT"),n(),s("span",{class:"token number"},"1000"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Ts=c('<h3 id="查询数据-select" tabindex="-1"><a class="header-anchor" href="#查询数据-select" aria-hidden="true">#</a> 查询数据（SELECT）</h3><ul><li><code>SELECT</code> 语句用于从数据库中查询数据。</li><li><code>DISTINCT</code> 用于返回唯一不同的值。它作用于所有列，也就是说所有列的值都相同才算相同。</li><li><code>LIMIT</code> 限制返回的行数。可以有两个参数，第一个参数为起始行，从 0 开始；第二个参数为返回的总行数。 <ul><li><code>ASC</code> ：升序（默认）</li><li><code>DESC</code> ：降序</li></ul></li></ul><h4 id="select-的用法" tabindex="-1"><a class="header-anchor" href="#select-的用法" aria-hidden="true">#</a> SELECT 的用法</h4><p>以下为查询数据示例：</p>',4),Ls=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"SELECT"),n(` prod_name
`),s("span",{class:"token keyword"},"FROM"),n(" Products"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),As=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"SELECT"),n(" prod_id"),s("span",{class:"token punctuation"},","),n(" prod_name"),s("span",{class:"token punctuation"},","),n(` prod_price
`),s("span",{class:"token keyword"},"FROM"),n(" Products"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Os=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"SELECT"),n(),s("span",{class:"token operator"},"*"),n(`
`),s("span",{class:"token keyword"},"FROM"),n(" Products"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Ns=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"SELECT"),n(),s("span",{class:"token keyword"},"DISTINCT"),n(` vend_id
`),s("span",{class:"token keyword"},"FROM"),n(" Products"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),qs=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token comment"},"-- SQL Server 和 Access"),n(`
`),s("span",{class:"token keyword"},"SELECT"),n(),s("span",{class:"token keyword"},"TOP"),n(),s("span",{class:"token number"},"5"),n(` prod_name
`),s("span",{class:"token keyword"},"FROM"),n(" Products"),s("span",{class:"token punctuation"},";"),n(`

`),s("span",{class:"token comment"},"-- DB2"),n(`
`),s("span",{class:"token keyword"},"SELECT"),n(` prod_name
`),s("span",{class:"token keyword"},"FROM"),n(` Products
`),s("span",{class:"token keyword"},"FETCH"),n(),s("span",{class:"token keyword"},"FIRST"),n(),s("span",{class:"token number"},"5"),n(),s("span",{class:"token keyword"},"ROWS"),n(" ONLY"),s("span",{class:"token punctuation"},";"),n(`

`),s("span",{class:"token comment"},"-- Oracle"),n(`
`),s("span",{class:"token keyword"},"SELECT"),n(` prod_name
`),s("span",{class:"token keyword"},"FROM"),n(` Products
`),s("span",{class:"token keyword"},"WHERE"),n(" ROWNUM "),s("span",{class:"token operator"},"<="),s("span",{class:"token number"},"5"),s("span",{class:"token punctuation"},";"),n(`

`),s("span",{class:"token comment"},"-- MySQL、MariaDB、PostgreSQL 或者 SQLite"),n(`
`),s("span",{class:"token keyword"},"SELECT"),n(` prod_name
`),s("span",{class:"token keyword"},"FROM"),n(` Products
`),s("span",{class:"token keyword"},"LIMIT"),n(),s("span",{class:"token number"},"5"),s("span",{class:"token punctuation"},";"),n(`
`),s("span",{class:"token comment"},"-- 检索从第 5 行起的 5 行数据"),n(`
`),s("span",{class:"token keyword"},"SELECT"),n(` prod_name
`),s("span",{class:"token keyword"},"FROM"),n(` Products
`),s("span",{class:"token keyword"},"LIMIT"),n(),s("span",{class:"token number"},"5"),n(),s("span",{class:"token keyword"},"OFFSET"),n(),s("span",{class:"token number"},"5"),s("span",{class:"token punctuation"},";"),n(`
`),s("span",{class:"token comment"},"-- MySQL 和 MariaDB 中，上面的示例可以简化如下"),n(`
`),s("span",{class:"token keyword"},"SELECT"),n(` prod_name
`),s("span",{class:"token keyword"},"FROM"),n(` Products
`),s("span",{class:"token keyword"},"LIMIT"),n(),s("span",{class:"token number"},"5"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"5"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Ss=c(`<h4 id="select-的执行顺序" tabindex="-1"><a class="header-anchor" href="#select-的执行顺序" aria-hidden="true">#</a> SELECT 的执行顺序</h4><p>关键字的顺序是不能颠倒的：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FROM</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">WHERE</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">HAVING</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>SELECT 语句的执行顺序（在 MySQL 和 Oracle 中，SELECT 执行顺序基本相同）：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">FROM</span> <span class="token operator">&gt;</span> <span class="token keyword">WHERE</span> <span class="token operator">&gt;</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token operator">&gt;</span> <span class="token keyword">HAVING</span> <span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> 的字段 <span class="token operator">&gt;</span> <span class="token keyword">DISTINCT</span> <span class="token operator">&gt;</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token operator">&gt;</span> <span class="token keyword">LIMIT</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>比如你写了一个 SQL 语句，那么它的关键字顺序和执行顺序是下面这样的：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> player_id<span class="token punctuation">,</span> player_name<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> num <span class="token comment">-- 顺序 5</span>
<span class="token keyword">FROM</span> player <span class="token keyword">JOIN</span> team <span class="token keyword">ON</span> player<span class="token punctuation">.</span>team_id <span class="token operator">=</span> team<span class="token punctuation">.</span>team_id <span class="token comment">-- 顺序 1</span>
<span class="token keyword">WHERE</span> height <span class="token operator">&gt;</span> <span class="token number">1.80</span> <span class="token comment">-- 顺序 2</span>
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> player<span class="token punctuation">.</span>team_id <span class="token comment">-- 顺序 3</span>
<span class="token keyword">HAVING</span> num <span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token comment">-- 顺序 4</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> num <span class="token keyword">DESC</span> <span class="token comment">-- 顺序 6</span>
<span class="token keyword">LIMIT</span> <span class="token number">2</span> <span class="token comment">-- 顺序 7</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="过滤数据-where" tabindex="-1"><a class="header-anchor" href="#过滤数据-where" aria-hidden="true">#</a> 过滤数据（WHERE）</h2><p>数据库表一般包含大量的数据，很少需要检索表中的所有行。通常只会根据特定操作或报告的需要提取表数据的子集。只检索所需数据需要指 定搜索条件（search criteria），搜索条件也称为过滤条件（filter condition）。</p><h3 id="where" tabindex="-1"><a class="header-anchor" href="#where" aria-hidden="true">#</a> WHERE</h3><p>在 SQL 语句中，数据根据 <code>WHERE</code> 子句中指定的搜索条件进行过滤。</p><p><code>WHERE</code> 子句的基本格式如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> ……（列名） <span class="token keyword">FROM</span> ……（表名） <span class="token keyword">WHERE</span> ……（子句条件）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>WHERE</code> 的常见用法：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2 <span class="token keyword">FROM</span> table_name <span class="token keyword">WHERE</span> condition<span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> table_name <span class="token keyword">WHERE</span> condition1 <span class="token operator">AND</span> condition2<span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> table_name <span class="token keyword">WHERE</span> condition1 <span class="token operator">OR</span> condition2<span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> table_name <span class="token keyword">WHERE</span> <span class="token operator">NOT</span> condition<span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> table_name <span class="token keyword">WHERE</span> condition1 <span class="token operator">AND</span> <span class="token punctuation">(</span>condition2 <span class="token operator">OR</span> condition3<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> table_name <span class="token keyword">WHERE</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> column_name <span class="token keyword">FROM</span> table_name <span class="token keyword">WHERE</span> condition<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>WHERE</code> 可以与 <code>SELECT</code>，<code>UPDATE</code> 和 <code>DELETE</code> 一起使用。</p>`,16),Cs=s("code",null,"SELECT",-1),Is=s("code",null,"WHERE",-1),xs=s("code",null,"UPDATE",-1),Ds=s("code",null,"WHERE",-1),Ms=s("code",null,"DELETE",-1),Us=s("code",null,"WHERE",-1),Fs=s("p",null,"检索所有价格小于 10 美元的产品。",-1),fs=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"SELECT"),n(" prod_name"),s("span",{class:"token punctuation"},","),n(` prod_price
`),s("span",{class:"token keyword"},"FROM"),n(` Products
`),s("span",{class:"token keyword"},"WHERE"),n(" prod_price "),s("span",{class:"token operator"},"<"),n(),s("span",{class:"token number"},"10"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Hs=s("p",null,"检索所有不是供应商 DLL01 制造的产品",-1),Ps=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token comment"},"-- 下面两条查询语句作用相同"),n(`

`),s("span",{class:"token keyword"},"SELECT"),n(" vend_id"),s("span",{class:"token punctuation"},","),n(` prod_name
`),s("span",{class:"token keyword"},"FROM"),n(` Products
`),s("span",{class:"token keyword"},"WHERE"),n(" vend_id "),s("span",{class:"token operator"},"<>"),n(),s("span",{class:"token string"},"'DLL01'"),s("span",{class:"token punctuation"},";"),n(`

`),s("span",{class:"token keyword"},"SELECT"),n(" vend_id"),s("span",{class:"token punctuation"},","),n(` prod_name
`),s("span",{class:"token keyword"},"FROM"),n(` Products
`),s("span",{class:"token keyword"},"WHERE"),n(" vend_id "),s("span",{class:"token operator"},"!="),n(),s("span",{class:"token string"},"'DLL01'"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Bs=s("p",null,"检索价格在 5 美元和 10 美元之间的所有产品",-1),Ws=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"SELECT"),n(" prod_name"),s("span",{class:"token punctuation"},","),n(` prod_price
`),s("span",{class:"token keyword"},"FROM"),n(` Products
`),s("span",{class:"token keyword"},"WHERE"),n(" prod_price "),s("span",{class:"token operator"},"BETWEEN"),n(),s("span",{class:"token number"},"5"),n(),s("span",{class:"token operator"},"AND"),n(),s("span",{class:"token number"},"10"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Ys=s("p",null,"检索所有没有邮件地址的顾客",-1),Gs=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"SELECT"),n(` cust_name
`),s("span",{class:"token keyword"},"FROM"),n(` CUSTOMERS
`),s("span",{class:"token keyword"},"WHERE"),n(" cust_email "),s("span",{class:"token operator"},"IS"),n(),s("span",{class:"token boolean"},"NULL"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Qs=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"UPDATE"),n(` Customers
`),s("span",{class:"token keyword"},"SET"),n(" cust_name "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},"'Jack Jones'"),n(`
`),s("span",{class:"token keyword"},"WHERE"),n(" cust_name "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},"'Kids Place'"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Vs=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"DELETE"),n(),s("span",{class:"token keyword"},"FROM"),n(` Customers
`),s("span",{class:"token keyword"},"WHERE"),n(" cust_name "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},"'Kids Place'"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Ks=c(`<h3 id="比较操作符" tabindex="-1"><a class="header-anchor" href="#比较操作符" aria-hidden="true">#</a> 比较操作符</h3><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td><code>=</code></td><td>等于</td></tr><tr><td><code>&lt;&gt;</code></td><td>不等于。注释：在 SQL 的一些版本中，该操作符可被写成 !=</td></tr><tr><td><code>&gt;</code></td><td>大于</td></tr><tr><td><code>&lt;</code></td><td>小于</td></tr><tr><td><code>&gt;=</code></td><td>大于等于</td></tr><tr><td><code>&lt;=</code></td><td>小于等于</td></tr><tr><td>IS NULL</td><td>是否为空</td></tr></tbody></table><p>【示例】查询所有价格小于 10 美元的产品</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> prod_name<span class="token punctuation">,</span> prod_price
<span class="token keyword">FROM</span> Products
<span class="token keyword">WHERE</span> prod_price <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【示例】查询所有不是供应商 DLL01 制造的产品</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> vend_id<span class="token punctuation">,</span> prod_name
<span class="token keyword">FROM</span> Products
<span class="token keyword">WHERE</span> vend_id <span class="token operator">!=</span> <span class="token string">&#39;DLL01&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【示例】查询邮件地址为空的客户</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> cust_name
<span class="token keyword">FROM</span> CUSTOMERS
<span class="token keyword">WHERE</span> cust_email <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="范围操作符" tabindex="-1"><a class="header-anchor" href="#范围操作符" aria-hidden="true">#</a> 范围操作符</h3><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td><code>BETWEEN</code></td><td>在某个范围内</td></tr><tr><td><code>IN</code></td><td>指定针对某个列的多个可能值</td></tr></tbody></table><p><code>BETWEEN</code> 操作符在 <code>WHERE</code> 子句中使用，作用是选取介于某个范围内的值。</p><p><code>IN</code> 操作符用来指定条件范围，范围中的每个条件都可以进行匹配。<code>IN</code> 取一组由逗号分隔、括在圆括号中的合法值。</p><p>为什么要使用 IN 操作符？其优点如下。</p><ul><li>在有很多合法选项时，IN 操作符的语法更清楚，更直观。</li><li>在与其他 AND 和 OR 操作符组合使用 IN 时，求值顺序更容易管理。</li><li>IN 操作符一般比一组 OR 操作符执行得更快（在上面这个合法选项很 少的例子中，你看不出性能差异）。</li><li>IN 的最大优点是可以包含其他 SELECT 语句，能够更动态地建立 WHERE 子句。</li></ul><p>以下为范围操作符使用示例：</p>`,15),Js=s("p",null,"下面两条 SQL 的语义等价：",-1),Xs=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"SELECT"),n(" prod_name"),s("span",{class:"token punctuation"},","),n(` prod_price
`),s("span",{class:"token keyword"},"FROM"),n(` Products
`),s("span",{class:"token keyword"},"WHERE"),n(" vend_id "),s("span",{class:"token operator"},"IN"),n(),s("span",{class:"token punctuation"},"("),n(),s("span",{class:"token string"},"'DLL01'"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},"'BRS01'"),n(),s("span",{class:"token punctuation"},")"),n(`
`),s("span",{class:"token keyword"},"ORDER"),n(),s("span",{class:"token keyword"},"BY"),n(" prod_name"),s("span",{class:"token punctuation"},";"),n(`

`),s("span",{class:"token keyword"},"SELECT"),n(" prod_name"),s("span",{class:"token punctuation"},","),n(` prod_price
`),s("span",{class:"token keyword"},"FROM"),n(` Products
`),s("span",{class:"token keyword"},"WHERE"),n(" vend_id "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},"'DLL01'"),n(),s("span",{class:"token operator"},"OR"),n(" vend_id "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},"'BRS01'"),n(`
`),s("span",{class:"token keyword"},"ORDER"),n(),s("span",{class:"token keyword"},"BY"),n(" prod_name"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),js=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"SELECT"),n(" prod_name"),s("span",{class:"token punctuation"},","),n(` prod_price
`),s("span",{class:"token keyword"},"FROM"),n(` Products
`),s("span",{class:"token keyword"},"WHERE"),n(" prod_price "),s("span",{class:"token operator"},"BETWEEN"),n(),s("span",{class:"token number"},"5"),n(),s("span",{class:"token operator"},"AND"),n(),s("span",{class:"token number"},"10"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),zs=c('<h3 id="逻辑操作符" tabindex="-1"><a class="header-anchor" href="#逻辑操作符" aria-hidden="true">#</a> 逻辑操作符</h3><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td><code>AND</code></td><td>并且（与）</td></tr><tr><td><code>OR</code></td><td>或者（或）</td></tr><tr><td><code>NOT</code></td><td>否定（非）</td></tr></tbody></table><p><code>AND</code>、<code>OR</code>、<code>NOT</code> 是用于对过滤条件的逻辑处理指令。</p><ul><li><p><code>AND</code> 优先级高于 <code>OR</code>，为了明确处理顺序，可以使用 <code>()</code>。<code>AND</code> 操作符表示左右条件都要满足。</p></li><li><p><code>OR</code> 操作符表示左右条件满足任意一个即可。</p></li><li><p><code>NOT</code> 操作符用于否定其后条件。</p></li></ul><p>以下为逻辑操作符使用示例：</p>',5),$s=s("code",null,"AND",-1),Zs=s("code",null,"OR",-1),sn=s("code",null,"AND",-1),nn=s("code",null,"OR",-1),an=s("p",null,"检索由供应商 DLL01 制造且价格小于等于 4 美元的所有产品的名称和价格",-1),en=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"SELECT"),n(" prod_id"),s("span",{class:"token punctuation"},","),n(" prod_price"),s("span",{class:"token punctuation"},","),n(` prod_name
`),s("span",{class:"token keyword"},"FROM"),n(` Products
`),s("span",{class:"token keyword"},"WHERE"),n(" vend_id "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},"'DLL01'"),n(),s("span",{class:"token operator"},"AND"),n(" prod_price "),s("span",{class:"token operator"},"<="),n(),s("span",{class:"token number"},"4"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),tn=s("p",null,"检索由供应商 DLL01 或供应商 BRS01 制造的所有产品的名称和价格",-1),on=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"SELECT"),n(" prod_id"),s("span",{class:"token punctuation"},","),n(" prod_price"),s("span",{class:"token punctuation"},","),n(` prod_name
`),s("span",{class:"token keyword"},"FROM"),n(` Products
`),s("span",{class:"token keyword"},"WHERE"),n(" vend_id "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},"'DLL01'"),n(),s("span",{class:"token operator"},"OR"),n(" vend_id "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},"'BRS01'"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ln=s("p",null,"检索除 DLL01 之外的所有供应商制造的产品",-1),cn=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"SELECT"),n(` prod_name
`),s("span",{class:"token keyword"},"FROM"),n(` Products
`),s("span",{class:"token keyword"},"WHERE"),n(),s("span",{class:"token operator"},"NOT"),n(" vend_id "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},"'DLL01'"),n(`
`),s("span",{class:"token keyword"},"ORDER"),n(),s("span",{class:"token keyword"},"BY"),n(" prod_name"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),dn=s("p",null,"和下面的示例作用相同",-1),pn=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"SELECT"),n(` prod_name
`),s("span",{class:"token keyword"},"FROM"),n(` Products
`),s("span",{class:"token keyword"},"WHERE"),n(" vend_id "),s("span",{class:"token operator"},"<>"),n(),s("span",{class:"token string"},"'DLL01'"),n(`
`),s("span",{class:"token keyword"},"ORDER"),n(),s("span",{class:"token keyword"},"BY"),n(" prod_name"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),rn=s("p",null,[n("SQL 在处理 "),s("code",null,"OR"),n(" 操作符前，优先处理 "),s("code",null,"AND"),n(" 操作符。")],-1),un=s("p",null,"下面的示例中，SQL 会理解为由供应商 BRS01 制造的价格为 10 美元以上的所有产品，以及由供应商 DLL01 制造的所有产品，而不管其价格如何。",-1),kn=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"SELECT"),n(" prod_name"),s("span",{class:"token punctuation"},","),n(` prod_price
`),s("span",{class:"token keyword"},"FROM"),n(` Products
`),s("span",{class:"token keyword"},"WHERE"),n(" vend_id "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},"'DLL01'"),n(),s("span",{class:"token operator"},"OR"),n(" vend_id "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},"'BRS01'"),n(`
`),s("span",{class:"token operator"},"AND"),n(" prod_price "),s("span",{class:"token operator"},">="),n(),s("span",{class:"token number"},"10"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),vn=s("p",null,"任何时候使用具有 AND 和 OR 操作符的 WHERE 子句，都应该使用圆括号明确地分组操作符。",-1),mn=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"SELECT"),n(" prod_name"),s("span",{class:"token punctuation"},","),n(` prod_price
`),s("span",{class:"token keyword"},"FROM"),n(` Products
`),s("span",{class:"token keyword"},"WHERE"),n(),s("span",{class:"token punctuation"},"("),n("vend_id "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},"'DLL01'"),n(),s("span",{class:"token operator"},"OR"),n(" vend_id "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},"'BRS01'"),s("span",{class:"token punctuation"},")"),n(`
`),s("span",{class:"token operator"},"AND"),n(" prod_price "),s("span",{class:"token operator"},">="),n(),s("span",{class:"token number"},"10"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),bn=c('<h3 id="通配符" tabindex="-1"><a class="header-anchor" href="#通配符" aria-hidden="true">#</a> 通配符</h3><p><code>LIKE</code> 操作符在 <code>WHERE</code> 子句中使用，作用是确定字符串是否匹配模式。只有字段是文本值时才使用 <code>LIKE</code>。<strong>不要滥用通配符，通配符位于开头处匹配会非常慢</strong>。</p><p><code>LIKE</code> 支持以下通配符匹配选项：</p><ul><li><code>%</code> 表示任何字符出现任意次数。</li><li><code>_</code> 表示任何字符出现一次。</li><li><code>[]</code> 必须匹配指定位置的一个字符。</li></ul><blockquote><p>说明：并不是所有 DBMS 都支持 <code>[]</code>。只有微软的 Access 和 SQL Server 支持 <code>[]</code>。</p></blockquote><p>以下为通配符使用示例：</p>',6),En=s("code",null,"%",-1),yn=s("code",null,"_",-1),gn=s("code",null,"[]",-1),wn=s("p",null,"检索所有产品名以 Fish 开头的产品",-1),hn=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"SELECT"),n(" prod_id"),s("span",{class:"token punctuation"},","),n(` prod_name
`),s("span",{class:"token keyword"},"FROM"),n(` Products
`),s("span",{class:"token keyword"},"WHERE"),n(" prod_name "),s("span",{class:"token operator"},"LIKE"),n(),s("span",{class:"token string"},"'Fish%'"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),_n=s("p",null,"检索产品名中包含 bean bag 的产品",-1),Rn=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"SELECT"),n(" prod_id"),s("span",{class:"token punctuation"},","),n(` prod_name
`),s("span",{class:"token keyword"},"FROM"),n(` Products
`),s("span",{class:"token keyword"},"WHERE"),n(" prod_name "),s("span",{class:"token operator"},"LIKE"),n(),s("span",{class:"token string"},"'%bean bag%'"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Tn=s("p",null,"检索产品名中以 F 开头，y 结尾的产品",-1),Ln=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"SELECT"),n(` prod_name
`),s("span",{class:"token keyword"},"FROM"),n(` Products
`),s("span",{class:"token keyword"},"WHERE"),n(" prod_name "),s("span",{class:"token operator"},"LIKE"),n(),s("span",{class:"token string"},"'F%y'"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),An=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"SELECT"),n(),s("span",{class:"token operator"},"*"),n(),s("span",{class:"token keyword"},"FROM"),n(` Products
`),s("span",{class:"token keyword"},"WHERE"),n(" prod_name "),s("span",{class:"token operator"},"LIKE"),n(),s("span",{class:"token string"},"'__ inch teddy bear'"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),On=s("p",null,"找出所有名字以 J 或 M 开头的联系人：",-1),Nn=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"SELECT"),n(` cust_contact
`),s("span",{class:"token keyword"},"FROM"),n(` Customers
`),s("span",{class:"token keyword"},"WHERE"),n(" cust_contact "),s("span",{class:"token operator"},"LIKE"),n(),s("span",{class:"token string"},"'[JM]%'"),n(`
`),s("span",{class:"token keyword"},"ORDER"),n(),s("span",{class:"token keyword"},"BY"),n(" cust_contact"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),qn=c(`<h3 id="子查询" tabindex="-1"><a class="header-anchor" href="#子查询" aria-hidden="true">#</a> 子查询</h3><p>子查询（subquery），即嵌套在其他查询中的查询。</p><p>子查询可以分为关联子查询和非关联子查询。</p><ul><li><p>子查询从数据表中查询了数据结果，如果这个数据结果只执行一次，然后这个数据结果作为主查询的条件进行执行，那么这样的子查询叫做<strong>非关联子查询</strong>。</p></li><li><p>如果子查询需要执行多次，即采用循环的方式，先从外部查询开始，每次都传入子查询进行查询，然后再将结果反馈给外部，这种嵌套的执行方式就称为<strong>关联子查询</strong>。</p></li></ul><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/database/mysql/sql-subqueries.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>假如需要列出订购物品 RGAN01 的所有顾客，应该怎样检索？下面列出具体的步骤。</p><p>(1) 检索包含物品 RGAN01 的所有订单的编号。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> order_num
<span class="token keyword">FROM</span> OrderItems
<span class="token keyword">WHERE</span> prod_id <span class="token operator">=</span> <span class="token string">&#39;RGAN01&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>order_num
-----------
20007
20008
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>(2) 检索具有前一步骤列出的订单编号的所有顾客的 ID。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> cust_id
<span class="token keyword">FROM</span> Orders
<span class="token keyword">WHERE</span> order_num <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">20007</span><span class="token punctuation">,</span><span class="token number">20008</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>cust_id
----------
1000000004
1000000005
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>(3) 检索前一步骤返回的所有顾客 ID 的顾客信息。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> cust_name<span class="token punctuation">,</span> cust_contact
<span class="token keyword">FROM</span> Customers
<span class="token keyword">WHERE</span> cust_id <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">&#39;1000000004&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;1000000005&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，结合这两个查询，把第一个查询（返回订单号的那一个）变为子查询。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> cust_id
<span class="token keyword">FROM</span> orders
<span class="token keyword">WHERE</span> order_num <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> order_num
                    <span class="token keyword">FROM</span> orderitems
                    <span class="token keyword">WHERE</span> prod_id <span class="token operator">=</span> <span class="token string">&#39;RGAN01&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再进一步结合第三个查询</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> cust_name<span class="token punctuation">,</span> cust_contact
<span class="token keyword">FROM</span> customers
<span class="token keyword">WHERE</span> cust_id <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> cust_id
                  <span class="token keyword">FROM</span> orders
                  <span class="token keyword">WHERE</span> order_num <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> order_num
                                      <span class="token keyword">FROM</span> orderitems
                                      <span class="token keyword">WHERE</span> prod_id <span class="token operator">=</span> <span class="token string">&#39;RGAN01&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="联结和组合" tabindex="-1"><a class="header-anchor" href="#联结和组合" aria-hidden="true">#</a> 联结和组合</h2><h3 id="联结-join" tabindex="-1"><a class="header-anchor" href="#联结-join" aria-hidden="true">#</a> 联结（JOIN）</h3><p><strong>在 SELECT, UPDATE 和 DELETE 语句中，“联结”可以用于联合多表查询。联结使用 <code>JOIN</code> 关键字，并且条件语句使用 <code>ON</code> 而不是 <code>WHERE</code></strong>。</p><p><strong>联结可以替换子查询，并且一般比子查询的效率更快</strong>。</p><p><code>JOIN</code> 有以下类型：</p><ul><li><strong>内联结</strong> - 内联结又称等值联结，用于获取两个表中字段匹配关系的记录，<strong>使用 <code>INNER JOIN</code> 关键字</strong>。在没有条件语句的情况下<strong>返回笛卡尔积</strong>。 <ul><li><strong>笛卡尔积</strong> - “笛卡尔积”也称为交叉联结（<code>CROSS JOIN</code>）。由没有联结条件的表关系返回的结果为笛卡儿积。检索出的行的数目将是第一个表中的行数乘以第二个表中的行数。</li><li><strong>自联结（=）</strong> - “自联结（=）”可以看成内联结的一种，只是联结的表是自身而已。</li><li><strong>自然联结（NATURAL JOIN）</strong> - “自然联结”会自动联结所有同名列。自然联结使用 <code>NATURAL JOIN</code> 关键字。</li></ul></li><li><strong>外联结</strong><ul><li><strong>左联结（LEFT JOIN）</strong> - “左外联结”会获取左表所有记录，即使右表没有对应匹配的记录。左外联结使用 <code>LEFT JOIN</code> 关键字。</li><li><strong>右联结（RIGHT JOIN）</strong> - “右外联结”会获取右表所有记录，即使左表没有对应匹配的记录。右外联结使用 <code>RIGHT JOIN</code> 关键字。</li></ul></li></ul><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/database/mysql/sql-join.png" alt="SQL JOIN" tabindex="0" loading="lazy"><figcaption>SQL JOIN</figcaption></figure><h4 id="内联结-inner-join" tabindex="-1"><a class="header-anchor" href="#内联结-inner-join" aria-hidden="true">#</a> 内联结（INNER JOIN）</h4><p>内联结又称等值联结，用于获取两个表中字段匹配关系的记录，<strong>使用 <code>INNER JOIN</code> 关键字</strong>。在没有条件语句的情况下<strong>返回笛卡尔积</strong>。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> vend_name<span class="token punctuation">,</span> prod_name<span class="token punctuation">,</span> prod_price
<span class="token keyword">FROM</span> vendors <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> products
<span class="token keyword">ON</span> vendors<span class="token punctuation">.</span>vend_id <span class="token operator">=</span> products<span class="token punctuation">.</span>vend_id<span class="token punctuation">;</span>

<span class="token comment">-- 也可以省略 INNER 使用 JOIN，与上面一句效果一样</span>
<span class="token keyword">SELECT</span> vend_name<span class="token punctuation">,</span> prod_name<span class="token punctuation">,</span> prod_price
<span class="token keyword">FROM</span> vendors <span class="token keyword">JOIN</span> products
<span class="token keyword">ON</span> vendors<span class="token punctuation">.</span>vend_id <span class="token operator">=</span> products<span class="token punctuation">.</span>vend_id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="笛卡尔积" tabindex="-1"><a class="header-anchor" href="#笛卡尔积" aria-hidden="true">#</a> 笛卡尔积</h5><p><strong>“笛卡尔积”也称为交叉联结（<code>CROSS JOIN</code>），它的作用就是可以把任意表进行联结，即使这两张表不相关</strong>。但通常进行联结还是需要筛选的，因此需要在联结后面加上 <code>WHERE</code> 子句，也就是作为过滤条件对联结数据进行筛选。</p><p>笛卡尔积是一个数学运算。假设我有两个集合 X 和 Y，那么 X 和 Y 的笛卡尔积就是 X 和 Y 的所有可能组合，也就是第一个对象来自于 X，第二个对象来自于 Y 的所有可能。</p><p>【示例】求 t1 和 t2 两张表的笛卡尔积</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 以下两条 SQL，执行结果相同</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t1<span class="token punctuation">,</span> t2<span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t1 <span class="token keyword">CROSS</span> <span class="token keyword">JOIN</span> t2<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="自联结" tabindex="-1"><a class="header-anchor" href="#自联结" aria-hidden="true">#</a> 自联结（=）</h5><p><strong>“自联结”可以看成内联结的一种，只是联结的表是自身而已</strong>。</p><p>给与 Jim Jones 同一公司的所有顾客发送一封信件：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 子查询方式</span>
<span class="token keyword">SELECT</span> cust_id<span class="token punctuation">,</span> cust_name<span class="token punctuation">,</span> cust_contact
<span class="token keyword">FROM</span> customers
<span class="token keyword">WHERE</span> cust_name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> cust_name
                   <span class="token keyword">FROM</span> customers
                   <span class="token keyword">WHERE</span> cust_contact <span class="token operator">=</span> <span class="token string">&#39;Jim Jones&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 自联结方式</span>
<span class="token keyword">SELECT</span> c1<span class="token punctuation">.</span>cust_id<span class="token punctuation">,</span> c1<span class="token punctuation">.</span>cust_name<span class="token punctuation">,</span> c1<span class="token punctuation">.</span>cust_contact
<span class="token keyword">FROM</span> customers <span class="token keyword">AS</span> c1<span class="token punctuation">,</span> customers <span class="token keyword">AS</span> c2
<span class="token keyword">WHERE</span> c1<span class="token punctuation">.</span>cust_name <span class="token operator">=</span> c2<span class="token punctuation">.</span>cust_name <span class="token operator">AND</span> c2<span class="token punctuation">.</span>cust_contact <span class="token operator">=</span> <span class="token string">&#39;Jim Jones&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="自然联结-natural-join" tabindex="-1"><a class="header-anchor" href="#自然联结-natural-join" aria-hidden="true">#</a> 自然联结（NATURAL JOIN）</h5><p><strong>“自然联结”会自动联结所有同名列</strong>。自然联结使用 <code>NATURAL JOIN</code> 关键字。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> Products
<span class="token keyword">NATURAL</span> <span class="token keyword">JOIN</span> Customers<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="外联结-outer-join" tabindex="-1"><a class="header-anchor" href="#外联结-outer-join" aria-hidden="true">#</a> 外联结（OUTER JOIN）</h4><p>外联结返回一个表中的所有行，并且仅返回来自此表中满足联结条件的那些行，即两个表中的列是相等的。外联结分为左外联结、右外联结、全外联结（Mysql 不支持）。</p><h5 id="左联结-left-join" tabindex="-1"><a class="header-anchor" href="#左联结-left-join" aria-hidden="true">#</a> 左联结（LEFT JOIN）</h5><p><strong>“左外联结”会获取左表所有记录，即使右表没有对应匹配的记录</strong>。左外联结使用 <code>LEFT JOIN</code> 关键字。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> customers<span class="token punctuation">.</span>cust_id<span class="token punctuation">,</span> orders<span class="token punctuation">.</span>order_num
<span class="token keyword">FROM</span> customers <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> orders
<span class="token keyword">ON</span> customers<span class="token punctuation">.</span>cust_id <span class="token operator">=</span> orders<span class="token punctuation">.</span>cust_id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="右联结-right-join" tabindex="-1"><a class="header-anchor" href="#右联结-right-join" aria-hidden="true">#</a> 右联结（RIGHT JOIN）</h5><p><strong>“右外联结”会获取右表所有记录，即使左表没有对应匹配的记录</strong>。右外联结使用 <code>RIGHT JOIN</code> 关键字。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> customers<span class="token punctuation">.</span>cust_id<span class="token punctuation">,</span> orders<span class="token punctuation">.</span>order_num
<span class="token keyword">FROM</span> customers <span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> orders
<span class="token keyword">ON</span> customers<span class="token punctuation">.</span>cust_id <span class="token operator">=</span> orders<span class="token punctuation">.</span>cust_id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="组合-union" tabindex="-1"><a class="header-anchor" href="#组合-union" aria-hidden="true">#</a> 组合（UNION）</h3><p><code>UNION</code> 运算符<strong>将两个或更多查询的结果组合起来，并生成一个结果集</strong>，其中包含来自 <code>UNION</code> 中参与查询的提取行。</p><p><code>UNION</code> 基本规则：</p><ul><li>所有查询的列数和列顺序必须相同。</li><li>每个查询中涉及表的列的数据类型必须相同或兼容。</li><li>通常返回的列名取自第一个查询。</li></ul><p>主要有两种情况需要使用组合查询：</p><ul><li>在一个查询中从不同的表返回结构数据；</li><li>对一个表执行多个查询，按一个查询返回数据。</li></ul><p>把 Illinois、Indiana、Michigan 等州的缩写传递给 <code>IN</code> 子句，检索出这些州的所有行</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> cust_name<span class="token punctuation">,</span> cust_contact<span class="token punctuation">,</span> cust_email
<span class="token keyword">FROM</span> Customers
<span class="token keyword">WHERE</span> cust_state <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">&#39;IL&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;IN&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;MI&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>找出所有 Fun4All</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> cust_name<span class="token punctuation">,</span> cust_contact<span class="token punctuation">,</span> cust_email
<span class="token keyword">FROM</span> Customers
<span class="token keyword">WHERE</span> cust_name <span class="token operator">=</span> <span class="token string">&#39;Fun4All&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>组合这两条语句</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> cust_name<span class="token punctuation">,</span> cust_contact<span class="token punctuation">,</span> cust_email
<span class="token keyword">FROM</span> customers
<span class="token keyword">WHERE</span> cust_state <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">&#39;IL&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;IN&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;MI&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">UNION</span>
<span class="token keyword">SELECT</span> cust_name<span class="token punctuation">,</span> cust_contact<span class="token punctuation">,</span> cust_email
<span class="token keyword">FROM</span> customers
<span class="token keyword">WHERE</span> cust_name <span class="token operator">=</span> <span class="token string">&#39;Fun4All&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>UNION</code> 默认从查询结果集中自动去除了重复的行；如果想返回所有的匹配行，可使用 <code>UNION ALL</code>。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> cust_name<span class="token punctuation">,</span> cust_contact<span class="token punctuation">,</span> cust_email
<span class="token keyword">FROM</span> customers
<span class="token keyword">WHERE</span> cust_state <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">&#39;IL&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;IN&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;MI&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">UNION</span> <span class="token keyword">ALL</span>
<span class="token keyword">SELECT</span> cust_name<span class="token punctuation">,</span> cust_contact<span class="token punctuation">,</span> cust_email
<span class="token keyword">FROM</span> customers
<span class="token keyword">WHERE</span> cust_name <span class="token operator">=</span> <span class="token string">&#39;Fun4All&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="join-vs-union" tabindex="-1"><a class="header-anchor" href="#join-vs-union" aria-hidden="true">#</a> JOIN vs UNION</h3><ul><li><code>JOIN</code> 中联结表的列可能不同，但在 <code>UNION</code> 中，所有查询的列数和列顺序必须相同。</li><li><code>UNION</code> 将查询之后的行放在一起（垂直放置），但 <code>JOIN</code> 将查询之后的列放在一起（水平放置），即它构成一个笛卡尔积。</li></ul><h2 id="排序和分组" tabindex="-1"><a class="header-anchor" href="#排序和分组" aria-hidden="true">#</a> 排序和分组</h2><h3 id="order-by" tabindex="-1"><a class="header-anchor" href="#order-by" aria-hidden="true">#</a> ORDER BY</h3><p><code>ORDER BY</code> 用于对结果集进行排序。<code>ORDER BY</code> 子句取一个或多个列的名字，据此对输出进行排序。<code>ORDER BY</code> 支持两种排序方式：</p><ul><li><code>ASC</code> ：升序（默认）</li><li><code>DESC</code> ：降序</li></ul><p>单列排序示例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> prod_name
<span class="token keyword">FROM</span> Products
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> prod_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以按多个列进行排序，并且为每个列指定不同的排序方式。</p><p>多列排序示例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Products
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> prod_price <span class="token keyword">DESC</span><span class="token punctuation">,</span> prod_name <span class="token keyword">ASC</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>按列位置排序（不推荐）：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_price<span class="token punctuation">,</span> prod_name
<span class="token keyword">FROM</span> Products
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="group-by" tabindex="-1"><a class="header-anchor" href="#group-by" aria-hidden="true">#</a> GROUP BY</h3><p><code>GROUP BY</code> 子句将记录分组到汇总行中，<code>GROUP BY</code> 为每个组返回一个记录。</p><p><code>GROUP BY</code> 要点：</p><ul><li><code>GROUP BY</code> 子句可以包含任意数目的列，因而可以对分组进行嵌套，更细致地进行数据分组。</li><li>如果在 <code>GROUP BY</code> 子句中嵌套了分组，数据将在最后指定的分组上进行汇总。换句话说，在建立分组时，指定的所有列都一起计算（所以不能从个别的列取回数据）。</li><li><code>GROUP BY</code> 子句中列出的每一列都必须是检索列或有效的表达式（但不能是聚集函数）。如果在 <code>SELECT</code> 中使用表达式，则必须在 <code>GROUP BY</code> 子句中指定相同的表达式。不能使用别名。</li><li>大多数 SQL 实现不允许 <code>GROUP BY</code> 列带有长度可变的数据类型（如文本或备注型字段）。</li><li>除聚集计算语句外，<code>SELECT</code> 语句中的每一列都必须在 <code>GROUP BY</code> 子句中给出。</li><li>如果分组列中包含具有 <code>NULL</code> 值的行，则 <code>NULL</code> 将作为一个分组返回。如果列中有多行 <code>NULL</code> 值，它们将分为一组。</li><li><code>GROUP BY</code> 子句必须出现在 <code>WHERE</code> 子句之后，<code>ORDER BY</code> 子句之前。</li></ul><p>分组示例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> cust_name<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>cust_address<span class="token punctuation">)</span> <span class="token keyword">AS</span> addr_num
<span class="token keyword">FROM</span> Customers <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> cust_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>分组后排序示例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> cust_name<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>cust_address<span class="token punctuation">)</span> <span class="token keyword">AS</span> addr_num
<span class="token keyword">FROM</span> Customers <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> cust_name
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> cust_name <span class="token keyword">DESC</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="having" tabindex="-1"><a class="header-anchor" href="#having" aria-hidden="true">#</a> HAVING</h3><p><code>HAVING</code> 用于对汇总的 <code>GROUP BY</code> 结果进行过滤。<code>HAVING</code> 要求存在一个 <code>GROUP BY</code> 子句。</p><p><code>WHERE</code> 和 <code>HAVING</code> 可以在相同的查询中。</p><p><code>HAVING</code> vs <code>WHERE</code>：</p><ul><li><code>HAVING</code> 非常类似于 <code>WHERE</code>。<code>WHERE</code> 和 <code>HAVING</code> 都是用于过滤。</li><li><code>WHERE</code> 过滤行，而 <code>HAVING</code> 过滤分组。</li></ul><p>使用 <code>WHERE</code> 和 <code>HAVING</code> 过滤数据示例：</p><p>过滤两个以上订单的分组</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> cust_id<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> orders
<span class="token keyword">FROM</span> Orders
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> cust_id
<span class="token keyword">HAVING</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>列出具有两个以上产品且其价格大于等于 4 的供应商：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> vend_id<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> num_prods
<span class="token keyword">FROM</span> Products
<span class="token keyword">WHERE</span> prod_price <span class="token operator">&gt;=</span> <span class="token number">4</span>
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> vend_id
<span class="token keyword">HAVING</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>检索包含三个或更多物品的订单号和订购物品的数目：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> order_num<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> items
<span class="token keyword">FROM</span> orderitems
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> order_num
<span class="token keyword">HAVING</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">3</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要按订购物品的数目排序输出，需要添加 ORDER BY 子句</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> order_num<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> items
<span class="token keyword">FROM</span> orderitems
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> order_num
<span class="token keyword">HAVING</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">3</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> items<span class="token punctuation">,</span> order_num<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h2><blockquote><p>🔔 注意：不同数据库的函数往往各不相同，因此不可移植。本节主要以 Mysql 的函数为例。</p></blockquote><h3 id="字符串函数" tabindex="-1"><a class="header-anchor" href="#字符串函数" aria-hidden="true">#</a> 字符串函数</h3><table><thead><tr><th style="text-align:center;">函数</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>CONCAT()</code></td><td style="text-align:center;">合并字符串</td></tr><tr><td style="text-align:center;"><code>LEFT()</code>、<code>RIGHT()</code></td><td style="text-align:center;">左边或者右边的字符</td></tr><tr><td style="text-align:center;"><code>LOWER()</code>、<code>UPPER()</code></td><td style="text-align:center;">转换为小写或者大写</td></tr><tr><td style="text-align:center;"><code>LTRIM()</code>、<code>RTIM()</code></td><td style="text-align:center;">去除左边或者右边的空格</td></tr><tr><td style="text-align:center;"><code>LENGTH()</code></td><td style="text-align:center;">长度</td></tr><tr><td style="text-align:center;"><code>SOUNDEX()</code></td><td style="text-align:center;">转换为语音值</td></tr></tbody></table><p>其中， <strong>SOUNDEX()</strong> 可以将一个字符串转换为描述其语音表示的字母数字模式。</p><p>以下为部分字符串函数的使用示例</p><p>拼接字符串值：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- Access 和 SQL Server</span>
<span class="token keyword">SELECT</span> vend_name <span class="token operator">+</span> <span class="token string">&#39; (&#39;</span> <span class="token operator">+</span> vend_country <span class="token operator">+</span> <span class="token string">&#39;)&#39;</span>
<span class="token keyword">FROM</span> Vendors
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> vend_name<span class="token punctuation">;</span>

<span class="token comment">-- DB2、Oracle、PostgreSQL、SQLite 和 Open Office Base</span>
<span class="token keyword">SELECT</span> vend_name <span class="token operator">||</span> <span class="token string">&#39; (&#39;</span> <span class="token operator">||</span> vend_country <span class="token operator">||</span> <span class="token string">&#39;)&#39;</span>
<span class="token keyword">FROM</span> Vendors
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> vend_name<span class="token punctuation">;</span>

<span class="token comment">-- MySQL 或 MariaDB</span>
<span class="token keyword">SELECT</span> Concat<span class="token punctuation">(</span>vend_name<span class="token punctuation">,</span> <span class="token string">&#39; (&#39;</span><span class="token punctuation">,</span> vend_country<span class="token punctuation">,</span> <span class="token string">&#39;)&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">FROM</span> Vendors
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> vend_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>去除字符串中的空格：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- Access 和 SQL Server</span>
<span class="token keyword">SELECT</span> RTRIM<span class="token punctuation">(</span>vend_name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39; (&#39;</span> <span class="token operator">+</span> RTRIM<span class="token punctuation">(</span>vend_country<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;)&#39;</span>
<span class="token keyword">FROM</span> Vendors
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> vend_name<span class="token punctuation">;</span>

<span class="token comment">-- DB2、Oracle、PostgreSQL、SQLite 和 Open Office Base</span>
<span class="token keyword">SELECT</span> RTRIM<span class="token punctuation">(</span>vend_name<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39; (&#39;</span> <span class="token operator">||</span> RTRIM<span class="token punctuation">(</span>vend_country<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;)&#39;</span>
<span class="token keyword">FROM</span> Vendors
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> vend_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="时间函数" tabindex="-1"><a class="header-anchor" href="#时间函数" aria-hidden="true">#</a> 时间函数</h3><ul><li>日期格式：<code>YYYY-MM-DD</code></li><li>时间格式：<code>HH:MM:SS</code></li></ul><table><thead><tr><th style="text-align:center;">函 数</th><th style="text-align:center;">说 明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ADDDATE()</code></td><td style="text-align:center;">增加一个日期（天、周等）</td></tr><tr><td style="text-align:center;"><code>ADDTIME()</code></td><td style="text-align:center;">增加一个时间（时、分等）</td></tr><tr><td style="text-align:center;"><code>CURRENT_DATE()</code></td><td style="text-align:center;">返回当前日期</td></tr><tr><td style="text-align:center;"><code>CURRENT_TIME()</code></td><td style="text-align:center;">返回当前时间</td></tr><tr><td style="text-align:center;"><code>DATE()</code></td><td style="text-align:center;">返回日期时间的日期部分</td></tr><tr><td style="text-align:center;"><code>DATEDIFF()</code></td><td style="text-align:center;">计算两个日期之差</td></tr><tr><td style="text-align:center;"><code>DATE_ADD()</code></td><td style="text-align:center;">高度灵活的日期运算函数</td></tr><tr><td style="text-align:center;"><code>DATE_FORMAT()</code></td><td style="text-align:center;">返回一个格式化的日期或时间串</td></tr><tr><td style="text-align:center;"><code>DAY()</code></td><td style="text-align:center;">返回一个日期的天数部分</td></tr><tr><td style="text-align:center;"><code>DAYOFWEEK()</code></td><td style="text-align:center;">对于一个日期，返回对应的星期几</td></tr><tr><td style="text-align:center;"><code>HOUR()</code></td><td style="text-align:center;">返回一个时间的小时部分</td></tr><tr><td style="text-align:center;"><code>MINUTE()</code></td><td style="text-align:center;">返回一个时间的分钟部分</td></tr><tr><td style="text-align:center;"><code>MONTH()</code></td><td style="text-align:center;">返回一个日期的月份部分</td></tr><tr><td style="text-align:center;"><code>NOW()</code></td><td style="text-align:center;">返回当前日期和时间</td></tr><tr><td style="text-align:center;"><code>SECOND()</code></td><td style="text-align:center;">返回一个时间的秒部分</td></tr><tr><td style="text-align:center;"><code>TIME()</code></td><td style="text-align:center;">返回一个日期时间的时间部分</td></tr><tr><td style="text-align:center;"><code>YEAR()</code></td><td style="text-align:center;">返回一个日期的年份部分</td></tr></tbody></table><p>部分日期和时间处理函数使用示例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- SQL Server</span>
<span class="token keyword">SELECT</span> order_num
<span class="token keyword">FROM</span> Orders
<span class="token keyword">WHERE</span> DATEPART<span class="token punctuation">(</span>yy<span class="token punctuation">,</span> order_date<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2012</span><span class="token punctuation">;</span>

<span class="token comment">-- Access</span>
<span class="token keyword">SELECT</span> order_num
<span class="token keyword">FROM</span> Orders
<span class="token keyword">WHERE</span> DATEPART<span class="token punctuation">(</span><span class="token string">&#39;yyyy&#39;</span><span class="token punctuation">,</span> order_date<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2012</span><span class="token punctuation">;</span>

<span class="token comment">-- PostgreSQL</span>
<span class="token keyword">SELECT</span> order_num
<span class="token keyword">FROM</span> Orders
<span class="token keyword">WHERE</span> DATE_PART<span class="token punctuation">(</span><span class="token string">&#39;year&#39;</span><span class="token punctuation">,</span> order_date<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2012</span><span class="token punctuation">;</span>

<span class="token comment">-- Oracle</span>
<span class="token keyword">SELECT</span> order_num
<span class="token keyword">FROM</span> Orders
<span class="token keyword">WHERE</span> to_number<span class="token punctuation">(</span>to_char<span class="token punctuation">(</span>order_date<span class="token punctuation">,</span> <span class="token string">&#39;YYYY&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2012</span><span class="token punctuation">;</span>

<span class="token comment">-- MySQL 和 MariaDB</span>
<span class="token keyword">SELECT</span> order_num
<span class="token keyword">FROM</span> Orders
<span class="token keyword">WHERE</span> <span class="token keyword">YEAR</span><span class="token punctuation">(</span>order_date<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2012</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数学函数" tabindex="-1"><a class="header-anchor" href="#数学函数" aria-hidden="true">#</a> 数学函数</h3><p>常见 Mysql 数学函数：</p><table><thead><tr><th style="text-align:center;">函数</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ABS()</code></td><td>返回一个数的绝对值</td></tr><tr><td style="text-align:center;"><code>COS()</code></td><td>返回一个角度的余弦</td></tr><tr><td style="text-align:center;"><code>EXP()</code></td><td>返回一个数的指数值</td></tr><tr><td style="text-align:center;"><code>PI()</code></td><td>返回圆周率</td></tr><tr><td style="text-align:center;"><code>SIN()</code></td><td>返回一个角度的正弦</td></tr><tr><td style="text-align:center;"><code>SQRT()</code></td><td>返回一个数的平方根</td></tr><tr><td style="text-align:center;"><code>TAN()</code></td><td>返回一个角度的正切</td></tr></tbody></table><h3 id="聚合函数" tabindex="-1"><a class="header-anchor" href="#聚合函数" aria-hidden="true">#</a> 聚合函数</h3><table><thead><tr><th style="text-align:center;">函 数</th><th style="text-align:center;">说 明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>AVG()</code></td><td style="text-align:center;">返回某列的平均值</td></tr><tr><td style="text-align:center;"><code>COUNT()</code></td><td style="text-align:center;">返回某列的行数</td></tr><tr><td style="text-align:center;"><code>MAX()</code></td><td style="text-align:center;">返回某列的最大值</td></tr><tr><td style="text-align:center;"><code>MIN()</code></td><td style="text-align:center;">返回某列的最小值</td></tr><tr><td style="text-align:center;"><code>SUM()</code></td><td style="text-align:center;">返回某列值之和</td></tr></tbody></table><p><code>AVG()</code> 通过对表中行数计数并计算其列值之和，求得该列的平均值。</p><p>使用 DISTINCT 可以让汇总函数值汇总不同的值。</p>`,121),Sn=s("code",null,"AVG()",-1),Cn=s("code",null,"COUNT()",-1),In=s("code",null,"MAX()",-1),xn=s("code",null,"MIN()",-1),Dn=s("code",null,"SUM()",-1),Mn=s("p",null,[n("使用 "),s("code",null,"AVG()"),n(" 返回 Products 表中所有产品的平均价格：")],-1),Un=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"SELECT"),n(),s("span",{class:"token function"},"AVG"),s("span",{class:"token punctuation"},"("),n("prod_price"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"AS"),n(` avg_price
`),s("span",{class:"token keyword"},"FROM"),n(" Products"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Fn=s("p",null,[s("code",null,"COUNT()"),n(" 函数进行计数。可利用 "),s("code",null,"COUNT()"),n(" 确定表中行的数目或符合特定条件的行的数目。")],-1),fn=s("p",null,"返回 Customers 表中顾客的总数：",-1),Hn=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"SELECT"),n(),s("span",{class:"token function"},"COUNT"),s("span",{class:"token punctuation"},"("),s("span",{class:"token operator"},"*"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"AS"),n(` num_cust
`),s("span",{class:"token keyword"},"FROM"),n(" Customers"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Pn=s("p",null,"只对具有电子邮件地址的客户计数：",-1),Bn=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"SELECT"),n(),s("span",{class:"token function"},"COUNT"),s("span",{class:"token punctuation"},"("),n("cust_email"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"AS"),n(` num_cust
`),s("span",{class:"token keyword"},"FROM"),n(" Customers"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Wn=s("p",null,"返回 Products 表中最贵物品的价格：",-1),Yn=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"SELECT"),n(),s("span",{class:"token function"},"MAX"),s("span",{class:"token punctuation"},"("),n("prod_price"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"AS"),n(` max_price
`),s("span",{class:"token keyword"},"FROM"),n(" Products"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Gn=s("p",null,"返回 Products 表中最便宜物品的价格",-1),Qn=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"SELECT"),n(),s("span",{class:"token function"},"MIN"),s("span",{class:"token punctuation"},"("),n("prod_price"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"AS"),n(` min_price
`),s("span",{class:"token keyword"},"FROM"),n(" Products"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Vn=s("p",null,"返回订单中所有物品数量之和",-1),Kn=s("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[s("span",{class:"token keyword"},"SELECT"),n(),s("span",{class:"token function"},"SUM"),s("span",{class:"token punctuation"},"("),n("quantity"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"AS"),n(` items_ordered
`),s("span",{class:"token keyword"},"FROM"),n(` OrderItems
`),s("span",{class:"token keyword"},"WHERE"),n(" order_num "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"20005"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Jn=c(`<h3 id="转换函数" tabindex="-1"><a class="header-anchor" href="#转换函数" aria-hidden="true">#</a> 转换函数</h3><table><thead><tr><th style="text-align:center;">函 数</th><th style="text-align:center;">说 明</th><th>示例</th></tr></thead><tbody><tr><td style="text-align:center;"><code>CAST()</code></td><td style="text-align:center;">转换数据类型</td><td><code>SELECT CAST(&quot;2017-08-29&quot; AS DATE); -&gt; 2017-08-29</code></td></tr></tbody></table><h2 id="事务" tabindex="-1"><a class="header-anchor" href="#事务" aria-hidden="true">#</a> 事务</h2><p>不能回退 <code>SELECT</code> 语句，回退 <code>SELECT</code> 语句也没意义；也不能回退 <code>CREATE</code> 和 <code>DROP</code> 语句。</p><p><strong>MySQL 默认采用隐式提交策略（<code>autocommit</code>）</strong>，每执行一条语句就把这条语句当成一个事务然后进行提交。当出现 <code>START TRANSACTION</code> 语句时，会关闭隐式提交；当 <code>COMMIT</code> 或 <code>ROLLBACK</code> 语句执行后，事务会自动关闭，重新恢复隐式提交。</p><p>通过 <code>set autocommit=0</code> 可以取消自动提交，直到 <code>set autocommit=1</code> 才会提交；<code>autocommit</code> 标记是针对每个连接而不是针对服务器的。</p><p>事务处理指令：</p><ul><li><code>START TRANSACTION</code> - 指令用于标记事务的起始点。</li><li><code>SAVEPOINT</code> - 指令用于创建保留点。</li><li><code>ROLLBACK TO</code> - 指令用于回滚到指定的保留点；如果没有设置保留点，则回退到 <code>START TRANSACTION</code> 语句处。</li><li><code>COMMIT</code> - 提交事务。</li><li><code>RELEASE SAVEPOINT</code>：删除某个保存点。</li><li><code>SET TRANSACTION</code>：设置事务的隔离级别。</li></ul><p>事务处理示例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 开始事务</span>
<span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span>

<span class="token comment">-- 插入操作 A</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">\`</span>user<span class="token punctuation">\`</span></span>
<span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;root1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;root1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;xxxx@163.com&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 创建保留点 updateA</span>
<span class="token keyword">SAVEPOINT</span> updateA<span class="token punctuation">;</span>

<span class="token comment">-- 插入操作 B</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">\`</span>user<span class="token punctuation">\`</span></span>
<span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;root2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;root2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;xxxx@163.com&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 回滚到保留点 updateA</span>
<span class="token keyword">ROLLBACK</span> <span class="token keyword">TO</span> updateA<span class="token punctuation">;</span>

<span class="token comment">-- 提交事务，只有操作 A 生效</span>
<span class="token keyword">COMMIT</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>（以下为 DCL 语句用法）</strong></p><h2 id="权限控制" tabindex="-1"><a class="header-anchor" href="#权限控制" aria-hidden="true">#</a> 权限控制</h2><p><code>GRANT</code> 和 <code>REVOKE</code> 可在几个层次上控制访问权限：</p><ul><li>整个服务器，使用 <code>GRANT ALL</code> 和 <code>REVOKE ALL</code>；</li><li>整个数据库，使用 ON database.*；</li><li>特定的表，使用 ON database.table；</li><li>特定的列；</li><li>特定的存储过程。</li></ul><p>新创建的账户没有任何权限。</p><p>账户用 <code>username@host</code> 的形式定义，<code>username@%</code> 使用的是默认主机名。</p><p>MySQL 的账户信息保存在 mysql 这个数据库中。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">USE</span> mysql<span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> <span class="token keyword">user</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建账户" tabindex="-1"><a class="header-anchor" href="#创建账户" aria-hidden="true">#</a> 创建账户</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> myuser IDENTIFIED <span class="token keyword">BY</span> <span class="token string">&#39;mypassword&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="修改账户名" tabindex="-1"><a class="header-anchor" href="#修改账户名" aria-hidden="true">#</a> 修改账户名</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">UPDATE</span> <span class="token keyword">user</span> <span class="token keyword">SET</span> <span class="token keyword">user</span><span class="token operator">=</span><span class="token string">&#39;newuser&#39;</span> <span class="token keyword">WHERE</span> <span class="token keyword">user</span><span class="token operator">=</span><span class="token string">&#39;myuser&#39;</span><span class="token punctuation">;</span>
FLUSH <span class="token keyword">PRIVILEGES</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="删除账户" tabindex="-1"><a class="header-anchor" href="#删除账户" aria-hidden="true">#</a> 删除账户</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">USER</span> myuser<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="查看权限" tabindex="-1"><a class="header-anchor" href="#查看权限" aria-hidden="true">#</a> 查看权限</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SHOW</span> GRANTS <span class="token keyword">FOR</span> myuser<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="授予权限" tabindex="-1"><a class="header-anchor" href="#授予权限" aria-hidden="true">#</a> 授予权限</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">GRANT</span> <span class="token keyword">SELECT</span><span class="token punctuation">,</span> <span class="token keyword">INSERT</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> myuser<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="删除权限" tabindex="-1"><a class="header-anchor" href="#删除权限" aria-hidden="true">#</a> 删除权限</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">REVOKE</span> <span class="token keyword">SELECT</span><span class="token punctuation">,</span> <span class="token keyword">INSERT</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">FROM</span> myuser<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="更改密码" tabindex="-1"><a class="header-anchor" href="#更改密码" aria-hidden="true">#</a> 更改密码</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SET</span> PASSWORD <span class="token keyword">FOR</span> myuser <span class="token operator">=</span> <span class="token string">&#39;mypass&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="存储过程" tabindex="-1"><a class="header-anchor" href="#存储过程" aria-hidden="true">#</a> 存储过程</h2><p>存储过程的英文是 Stored Procedure。它可以视为一组 SQL 语句的批处理。一旦存储过程被创建出来，使用它就像使用函数一样简单，我们直接通过调用存储过程名即可。</p><p>定义存储过程的语法格式：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> 存储过程名称 <span class="token punctuation">(</span><span class="token punctuation">[</span>参数列表<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span>
    需要执行的语句
<span class="token keyword">END</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>存储过程定义语句类型：</p><ul><li><code>CREATE PROCEDURE</code> 用于创建存储过程</li><li><code>DROP PROCEDURE</code> 用于删除存储过程</li><li><code>ALTER PROCEDURE</code> 用于修改存储过程</li></ul><h3 id="使用存储过程" tabindex="-1"><a class="header-anchor" href="#使用存储过程" aria-hidden="true">#</a> 使用存储过程</h3><p>创建存储过程的要点：</p><ul><li><code>DELIMITER</code> 用于定义语句的结束符</li><li>存储过程的 3 种参数类型： <ul><li><code>IN</code>：存储过程的入参</li><li><code>OUT</code>：存储过程的出参</li><li><code>INPUT</code>：既是存储过程的入参，也是存储过程的出参</li></ul></li><li>流控制语句： <ul><li><code>BEGIN…END</code>：<code>BEGIN…END</code> 中间包含了多个语句，每个语句都以（<code>;</code>）号为结束符。</li><li><code>DECLARE</code>：<code>DECLARE</code> 用来声明变量，使用的位置在于 <code>BEGIN…END</code> 语句中间，而且需要在其他语句使用之前进行变量的声明。</li><li><code>SET</code>：赋值语句，用于对变量进行赋值。</li><li><code>SELECT…INTO</code>：把从数据表中查询的结果存放到变量中，也就是为变量赋值。每次只能给一个变量赋值，不支持集合的操作。</li><li><code>IF…THEN…ENDIF</code>：条件判断语句，可以在 <code>IF…THEN…ENDIF</code> 中使用 <code>ELSE</code> 和 <code>ELSEIF</code> 来进行条件判断。</li><li><code>CASE</code>：<code>CASE</code> 语句用于多条件的分支判断。</li></ul></li></ul><p>创建存储过程示例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">PROCEDURE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">\`</span>proc_adder<span class="token punctuation">\`</span></span><span class="token punctuation">;</span>
<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">DEFINER</span><span class="token operator">=</span><span class="token identifier"><span class="token punctuation">\`</span>root<span class="token punctuation">\`</span></span><span class="token variable">@\`localhost\`</span> <span class="token keyword">PROCEDURE</span> <span class="token identifier"><span class="token punctuation">\`</span>proc_adder<span class="token punctuation">\`</span></span><span class="token punctuation">(</span><span class="token operator">IN</span> a <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token operator">IN</span> b <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">OUT</span> sum <span class="token keyword">int</span><span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span>
    <span class="token keyword">DECLARE</span> c <span class="token keyword">int</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> a <span class="token operator">is</span> <span class="token boolean">null</span> <span class="token keyword">then</span> <span class="token keyword">set</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> b <span class="token operator">is</span> <span class="token boolean">null</span> <span class="token keyword">then</span> <span class="token keyword">set</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>

    <span class="token keyword">set</span> sum  <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token keyword">END</span>
<span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用存储过程示例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">set</span> <span class="token variable">@b</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">call</span> proc_adder<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token variable">@b</span><span class="token punctuation">,</span><span class="token variable">@s</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token variable">@s</span> <span class="token keyword">as</span> sum<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="存储过程的利弊" tabindex="-1"><a class="header-anchor" href="#存储过程的利弊" aria-hidden="true">#</a> 存储过程的利弊</h3><p>存储过程的优点：</p><ul><li><strong>执行效率高</strong>：一次编译多次使用。</li><li><strong>安全性强</strong>：在设定存储过程的时候可以设置对用户的使用权限，这样就和视图一样具有较强的安全性。</li><li><strong>可复用</strong>：将代码封装，可以提高代码复用。</li><li><strong>性能好</strong><ul><li>由于是预先编译，因此具有很高的性能。</li><li>一个存储过程替代大量 T_SQL 语句 ，可以降低网络通信量，提高通信速率。</li></ul></li></ul><p>存储过程的缺点：</p><ul><li><strong>可移植性差</strong>：存储过程不能跨数据库移植。由于不同数据库的存储过程语法几乎都不一样，十分难以维护（不通用）。</li><li><strong>调试困难</strong>：只有少数 DBMS 支持存储过程的调试。对于复杂的存储过程来说，开发和维护都不容易。</li><li><strong>版本管理困难</strong>：比如数据表索引发生变化了，可能会导致存储过程失效。我们在开发软件的时候往往需要进行版本管理，但是存储过程本身没有版本控制，版本迭代更新的时候很麻烦。</li><li><strong>不适合高并发的场景</strong>：高并发的场景需要减少数据库的压力，有时数据库会采用分库分表的方式，而且对可扩展性要求很高，在这种情况下，存储过程会变得难以维护，增加数据库的压力，显然就不适用了。</li></ul><blockquote><p><em>综上，存储过程的优缺点都非常突出，是否使用一定要慎重，需要根据具体应用场景来权衡</em>。</p></blockquote><h3 id="触发器" tabindex="-1"><a class="header-anchor" href="#触发器" aria-hidden="true">#</a> 触发器</h3><p>触发器是特殊的存储过程，它在特定的数据库活动发生时自动执行。触发器可以与特定表上的 INSERT、UPDATE 和 DELETE 操作（或组合）相关联。</p><p>触发器是一种与表操作有关的数据库对象，当触发器所在表上出现指定事件时，将调用该对象，即表的操作事件触发表上的触发器的执行。</p><p>触发器的一些常见用途</p><ul><li>保证数据一致。例如，在 INSERT 或 UPDATE 操作中将所有州名转换为大写。</li><li>基于某个表的变动在其他表上执行活动。例如，每当更新或删除一行时将审计跟踪记录写入某个日志表。</li><li>进行额外的验证并根据需要回退数据。例如，保证某个顾客的可用资金不超限定，如果已经超出，则阻塞插入。</li><li>计算计算列的值或更新时间戳。</li></ul><h4 id="触发器特性" tabindex="-1"><a class="header-anchor" href="#触发器特性" aria-hidden="true">#</a> 触发器特性</h4><p>可以使用触发器来进行审计跟踪，把修改记录到另外一张表中。</p><p>MySQL 不允许在触发器中使用 <code>CALL</code> 语句 ，也就是不能调用存储过程。</p><p><strong><code>BEGIN</code> 和 <code>END</code></strong></p><p>当触发器的触发条件满足时，将会执行 <code>BEGIN</code> 和 <code>END</code> 之间的触发器执行动作。</p><blockquote><p>🔔 注意：在 MySQL 中，分号 <code>;</code> 是语句结束的标识符，遇到分号表示该段语句已经结束，MySQL 可以开始执行了。因此，解释器遇到触发器执行动作中的分号后就开始执行，然后会报错，因为没有找到和 BEGIN 匹配的 END。</p><p>这时就会用到 <code>DELIMITER</code> 命令（<code>DELIMITER</code> 是定界符，分隔符的意思）。它是一条命令，不需要语句结束标识，语法为：<code>DELIMITER new_delemiter</code>。<code>new_delemiter</code> 可以设为 1 个或多个长度的符号，默认的是分号 <code>;</code>，我们可以把它修改为其他符号，如 <code>$</code> - <code>DELIMITER $</code> 。在这之后的语句，以分号结束，解释器不会有什么反应，只有遇到了 <code>$</code>，才认为是语句结束。注意，使用完之后，我们还应该记得把它给修改回来。</p></blockquote><p><strong><code>NEW</code> 和 <code>OLD</code></strong></p><ul><li>MySQL 中定义了 <code>NEW</code> 和 <code>OLD</code> 关键字，用来表示触发器的所在表中，触发了触发器的那一行数据。</li><li>在 <code>INSERT</code> 型触发器中，<code>NEW</code> 用来表示将要（<code>BEFORE</code>）或已经（<code>AFTER</code>）插入的新数据；</li><li>在 <code>UPDATE</code> 型触发器中，<code>OLD</code> 用来表示将要或已经被修改的原数据，<code>NEW</code> 用来表示将要或已经修改为的新数据；</li><li>在 <code>DELETE</code> 型触发器中，<code>OLD</code> 用来表示将要或已经被删除的原数据；</li><li>使用方法： <code>NEW.columnName</code> （columnName 为相应数据表某一列名）</li></ul><h4 id="触发器指令" tabindex="-1"><a class="header-anchor" href="#触发器指令" aria-hidden="true">#</a> 触发器指令</h4><blockquote><p>提示：为了理解触发器的要点，有必要先了解一下创建触发器的指令。</p></blockquote><p><code>CREATE TRIGGER</code> 指令用于创建触发器。</p><p>语法：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> trigger_name
trigger_time
trigger_event
<span class="token keyword">ON</span> table_name
<span class="token keyword">FOR EACH ROW</span>
<span class="token keyword">BEGIN</span>
  trigger_statements
<span class="token keyword">END</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：</p><ul><li>trigger_name：触发器名</li><li>trigger_time: 触发器的触发时机。取值为 <code>BEFORE</code> 或 <code>AFTER</code>。</li><li>trigger_event: 触发器的监听事件。取值为 <code>INSERT</code>、<code>UPDATE</code> 或 <code>DELETE</code>。</li><li>table_name: 触发器的监听目标。指定在哪张表上建立触发器。</li><li>FOR EACH ROW: 行级监视，Mysql 固定写法，其他 DBMS 不同。</li><li>trigger_statements: 触发器执行动作。是一条或多条 SQL 语句的列表，列表内的每条语句都必须用分号 <code>;</code> 来结尾。</li></ul><p>创建触发器示例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- SQL Server</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> customer_state
<span class="token keyword">ON</span> Customers
<span class="token keyword">FOR</span> <span class="token keyword">INSERT</span><span class="token punctuation">,</span> <span class="token keyword">UPDATE</span>
<span class="token keyword">AS</span>
<span class="token keyword">UPDATE</span> Customers
<span class="token keyword">SET</span> cust_state <span class="token operator">=</span> Upper<span class="token punctuation">(</span>cust_state<span class="token punctuation">)</span>
<span class="token keyword">WHERE</span> Customers<span class="token punctuation">.</span>cust_id <span class="token operator">=</span> inserted<span class="token punctuation">.</span>cust_id<span class="token punctuation">;</span>

<span class="token comment">-- Oracle 和 PostgreSQL</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> customer_state
<span class="token keyword">AFTER</span> <span class="token keyword">INSERT</span> <span class="token operator">OR</span> <span class="token keyword">UPDATE</span>
<span class="token keyword">FOR EACH ROW</span>
<span class="token keyword">BEGIN</span>
<span class="token keyword">UPDATE</span> Customers
<span class="token keyword">SET</span> cust_state <span class="token operator">=</span> Upper<span class="token punctuation">(</span>cust_state<span class="token punctuation">)</span>
<span class="token keyword">WHERE</span> Customers<span class="token punctuation">.</span>cust_id <span class="token operator">=</span> :OLD<span class="token punctuation">.</span>cust_id
<span class="token keyword">END</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看触发器示例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SHOW</span> TRIGGERS<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>删除触发器示例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">TRIGGER</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> trigger_insert_user<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="游标" tabindex="-1"><a class="header-anchor" href="#游标" aria-hidden="true">#</a> 游标</h2><p>游标（CURSOR）是一个存储在 DBMS 服务器上的数据库查询，它不是一条 <code>SELECT</code> 语句，而是被该语句检索出来的结果集。在存储过程中使用游标可以对一个结果集进行移动遍历。</p><p>游标主要用于交互式应用，其中用户需要对数据集中的任意行进行浏览和修改。</p><p>游标要点</p><ul><li>能够标记游标为只读，使数据能读取，但不能更新和删除。</li><li>能控制可以执行的定向操作（向前、向后、第一、最后、绝对位置、相对位置等）。</li><li>能标记某些列为可编辑的，某些列为不可编辑的。</li><li>规定范围，使游标对创建它的特定请求（如存储过程）或对所有请求可访问。</li><li>指示 DBMS 对检索出的数据（而不是指出表中活动数据）进行复制，使数据在游标打开和访问期间不变化。</li></ul><p>使用游标的步骤：</p><ol><li><strong>定义游标</strong>：通过 <code>DECLARE cursor_name CURSOR FOR &lt;语句&gt;</code> 定义游标。这个过程没有实际检索出数据。</li><li><strong>打开游标</strong>：通过 <code>OPEN cursor_name</code> 打开游标。</li><li><strong>取出数据</strong>：通过 <code>FETCH cursor_name INTO var_name ...</code> 获取数据。</li><li><strong>关闭游标</strong>：通过 <code>CLOSE cursor_name</code> 关闭游标。</li><li><strong>释放游标</strong>：通过 <code>DEALLOCATE PREPARE</code> 释放游标。</li></ol><p>游标使用示例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DELIMITER</span> $
<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> getTotal<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span>
    <span class="token keyword">DECLARE</span> total <span class="token keyword">INT</span><span class="token punctuation">;</span>
    <span class="token comment">-- 创建接收游标数据的变量</span>
    <span class="token keyword">DECLARE</span> sid <span class="token keyword">INT</span><span class="token punctuation">;</span>
    <span class="token keyword">DECLARE</span> sname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">-- 创建总数变量</span>
    <span class="token keyword">DECLARE</span> sage <span class="token keyword">INT</span><span class="token punctuation">;</span>
    <span class="token comment">-- 创建结束标志变量</span>
    <span class="token keyword">DECLARE</span> done <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token comment">-- 创建游标</span>
    <span class="token keyword">DECLARE</span> cur <span class="token keyword">CURSOR</span> <span class="token keyword">FOR</span> <span class="token keyword">SELECT</span> id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age <span class="token keyword">from</span> cursor_table <span class="token keyword">where</span> age<span class="token operator">&gt;</span><span class="token number">30</span><span class="token punctuation">;</span>
    <span class="token comment">-- 指定游标循环结束时的返回值</span>
    <span class="token keyword">DECLARE</span> <span class="token keyword">CONTINUE</span> <span class="token keyword">HANDLER</span> <span class="token keyword">FOR</span> <span class="token operator">NOT</span> FOUND <span class="token keyword">SET</span> done <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">SET</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">-- 打开游标</span>
    <span class="token keyword">OPEN</span> cur<span class="token punctuation">;</span>
    <span class="token keyword">FETCH</span> cur <span class="token keyword">INTO</span> sid<span class="token punctuation">,</span> sname<span class="token punctuation">,</span> sage<span class="token punctuation">;</span>
    <span class="token keyword">WHILE</span><span class="token punctuation">(</span><span class="token operator">NOT</span> done<span class="token punctuation">)</span>
    <span class="token keyword">DO</span>
        <span class="token keyword">SET</span> total <span class="token operator">=</span> total <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">FETCH</span> cur <span class="token keyword">INTO</span> sid<span class="token punctuation">,</span> sname<span class="token punctuation">,</span> sage<span class="token punctuation">;</span>
    <span class="token keyword">END</span> <span class="token keyword">WHILE</span><span class="token punctuation">;</span>
    <span class="token comment">-- 关闭游标</span>
    <span class="token keyword">CLOSE</span> cur<span class="token punctuation">;</span>
    <span class="token keyword">SELECT</span> total<span class="token punctuation">;</span>
<span class="token keyword">END</span> $
<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span>

<span class="token comment">-- 调用存储过程</span>
<span class="token keyword">call</span> getTotal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,88),Xn={href:"https://book.douban.com/subject/35167240/",target:"_blank",rel:"noopener noreferrer"},jn={href:"https://draveness.me/mysql-transaction",target:"_blank",rel:"noopener noreferrer"},zn={href:"https://www.cnblogs.com/CraryPrimitiveMan/p/4206942.html",target:"_blank",rel:"noopener noreferrer"},$n={href:"https://zh.wikipedia.org/wiki/SQL",target:"_blank",rel:"noopener noreferrer"},Zn={href:"https://www.sitesbay.com/sql/index",target:"_blank",rel:"noopener noreferrer"},sa={href:"https://www.w3resource.com/sql/subqueries/understanding-sql-subqueries.php",target:"_blank",rel:"noopener noreferrer"},na={href:"https://stackoverflow.com/questions/6294778/mysql-quick-breakdown-of-the-types-of-joins",target:"_blank",rel:"noopener noreferrer"},aa={href:"https://www.w3resource.com/sql/sql-union.php",target:"_blank",rel:"noopener noreferrer"},ea={href:"https://www.w3resource.com/sql/database-security/create-users.php",target:"_blank",rel:"noopener noreferrer"},ta={href:"https://www.cnblogs.com/chenpi/p/5136483.html",target:"_blank",rel:"noopener noreferrer"};function oa(la,ca){const l=i("Tabs"),d=i("ExternalLinkIcon");return r(),u("div",null,[v,o(l,{id:"225",data:[{id:"创建数据库"},{id:"删除数据库"},{id:"选择数据库"}],"tab-id":"数据库定义"},{title0:a(({value:e,isActive:t})=>[n("创建数据库")]),title1:a(({value:e,isActive:t})=>[n("删除数据库")]),title2:a(({value:e,isActive:t})=>[n("选择数据库")]),tab0:a(({value:e,isActive:t})=>[m]),tab1:a(({value:e,isActive:t})=>[b]),tab2:a(({value:e,isActive:t})=>[E]),_:1}),y,g,o(l,{id:"242",data:[{id:"创建数据表"},{id:"删除数据表"},{id:"复制表"},{id:"数据表添加列"},{id:"数据表删除列"},{id:"数据表修改列"},{id:"修改表的编码格式"}],"tab-id":"数据表定义"},{title0:a(({value:e,isActive:t})=>[n("创建数据表")]),title1:a(({value:e,isActive:t})=>[n("删除数据表")]),title2:a(({value:e,isActive:t})=>[n("复制表")]),title3:a(({value:e,isActive:t})=>[n("数据表添加列")]),title4:a(({value:e,isActive:t})=>[n("数据表删除列")]),title5:a(({value:e,isActive:t})=>[n("数据表修改列")]),title6:a(({value:e,isActive:t})=>[n("修改表的编码格式")]),tab0:a(({value:e,isActive:t})=>[w,h,_]),tab1:a(({value:e,isActive:t})=>[R]),tab2:a(({value:e,isActive:t})=>[T]),tab3:a(({value:e,isActive:t})=>[L]),tab4:a(({value:e,isActive:t})=>[A]),tab5:a(({value:e,isActive:t})=>[O]),tab6:a(({value:e,isActive:t})=>[N,q]),_:1}),S,o(l,{id:"291",data:[{id:"查看表的基本信息"},{id:"查看表的列信息"}],"tab-id":"数据表查看"},{title0:a(({value:e,isActive:t})=>[n("查看表的基本信息")]),title1:a(({value:e,isActive:t})=>[n("查看表的列信息")]),tab0:a(({value:e,isActive:t})=>[C]),tab1:a(({value:e,isActive:t})=>[I]),_:1}),x,o(l,{id:"333",data:[{id:"创建视图"},{id:"删除视图"}],"tab-id":"视图定义"},{title0:a(({value:e,isActive:t})=>[n("创建视图")]),title1:a(({value:e,isActive:t})=>[n("删除视图")]),tab0:a(({value:e,isActive:t})=>[D,M,U,F]),tab1:a(({value:e,isActive:t})=>[f]),_:1}),H,P,B,W,Y,G,o(l,{id:"366",data:[{id:"创建索引"},{id:"创建唯一索引"},{id:"删除索引"},{id:"添加主键"},{id:"删除主键"}],"tab-id":"索引定义"},{title0:a(({value:e,isActive:t})=>[n("创建索引")]),title1:a(({value:e,isActive:t})=>[n("创建唯一索引")]),title2:a(({value:e,isActive:t})=>[n("删除索引")]),title3:a(({value:e,isActive:t})=>[n("添加主键")]),title4:a(({value:e,isActive:t})=>[n("删除主键")]),tab0:a(({value:e,isActive:t})=>[Q]),tab1:a(({value:e,isActive:t})=>[V]),tab2:a(({value:e,isActive:t})=>[K]),tab3:a(({value:e,isActive:t})=>[J]),tab4:a(({value:e,isActive:t})=>[X]),_:1}),j,o(l,{id:"434",data:[{id:"NOT NULL"},{id:"UNIQUE KEY"},{id:"PRIMARY KEY"},{id:"FOREIGN KEY"},{id:"CHECK"},{id:"DEFAULT"}],"tab-id":"约束定义"},{title0:a(({value:e,isActive:t})=>[n("NOT NULL")]),title1:a(({value:e,isActive:t})=>[n("UNIQUE KEY")]),title2:a(({value:e,isActive:t})=>[n("PRIMARY KEY")]),title3:a(({value:e,isActive:t})=>[n("FOREIGN KEY")]),title4:a(({value:e,isActive:t})=>[n("CHECK")]),title5:a(({value:e,isActive:t})=>[n("DEFAULT")]),tab0:a(({value:e,isActive:t})=>[z]),tab1:a(({value:e,isActive:t})=>[$]),tab2:a(({value:e,isActive:t})=>[Z]),tab3:a(({value:e,isActive:t})=>[ss]),tab4:a(({value:e,isActive:t})=>[ns]),tab5:a(({value:e,isActive:t})=>[as]),_:1}),es,o(l,{id:"469",data:[{id:"插入完整的行"},{id:"插入行的一部分"},{id:"插入查询出来的数据"},{id:"从一个表复制到另一个表"}],"tab-id":"插入数据"},{title0:a(({value:e,isActive:t})=>[n("插入完整的行")]),title1:a(({value:e,isActive:t})=>[n("插入行的一部分")]),title2:a(({value:e,isActive:t})=>[n("插入查询出来的数据")]),title3:a(({value:e,isActive:t})=>[n("从一个表复制到另一个表")]),tab0:a(({value:e,isActive:t})=>[ts]),tab1:a(({value:e,isActive:t})=>[os]),tab2:a(({value:e,isActive:t})=>[ls]),tab3:a(({value:e,isActive:t})=>[cs]),_:1}),ds,is,o(l,{id:"489",data:[{id:"更新单列"},{id:"更新多列"},{id:"从表中删除特定的行"}],"tab-id":"更新数据"},{title0:a(({value:e,isActive:t})=>[n("更新单列")]),title1:a(({value:e,isActive:t})=>[n("更新多列")]),title2:a(({value:e,isActive:t})=>[n("从表中删除特定的行")]),tab0:a(({value:e,isActive:t})=>[ps,rs]),tab1:a(({value:e,isActive:t})=>[us]),tab2:a(({value:e,isActive:t})=>[ks]),_:1}),vs,ms,bs,o(l,{id:"521",data:[{id:"删除表中的指定数据"},{id:"清空表中的数据"},{id:"批量删除大量数据"}],"tab-id":"删除数据"},{title0:a(({value:e,isActive:t})=>[n("删除表中的指定数据")]),title1:a(({value:e,isActive:t})=>[n("清空表中的数据")]),title2:a(({value:e,isActive:t})=>[n("批量删除大量数据")]),tab0:a(({value:e,isActive:t})=>[Es]),tab1:a(({value:e,isActive:t})=>[ys]),tab2:a(({value:e,isActive:t})=>[gs,ws,hs,_s,Rs]),_:1}),Ts,o(l,{id:"580",data:[{id:"查询单列"},{id:"查询多列"},{id:"查询所有列"},{id:"查询去重"},{id:"限制查询数量"}],"tab-id":"删除数据"},{title0:a(({value:e,isActive:t})=>[n("查询单列")]),title1:a(({value:e,isActive:t})=>[n("查询多列")]),title2:a(({value:e,isActive:t})=>[n("查询所有列")]),title3:a(({value:e,isActive:t})=>[n("查询去重")]),title4:a(({value:e,isActive:t})=>[n("限制查询数量")]),tab0:a(({value:e,isActive:t})=>[Ls]),tab1:a(({value:e,isActive:t})=>[As]),tab2:a(({value:e,isActive:t})=>[Os]),tab3:a(({value:e,isActive:t})=>[Ns]),tab4:a(({value:e,isActive:t})=>[qs]),_:1}),Ss,o(l,{id:"635",data:[{id:"<code v-pre>SELECT</code> 语句中的 <code v-pre>WHERE</code> 子句"},{id:"<code v-pre>UPDATE</code> 语句中的 <code v-pre>WHERE</code> 子句"},{id:"<code v-pre>DELETE</code> 语句中的 <code v-pre>WHERE</code> 子句"}],"tab-id":"WHERE 示例"},{title0:a(({value:e,isActive:t})=>[Cs,n(" 语句中的 "),Is,n(" 子句")]),title1:a(({value:e,isActive:t})=>[xs,n(" 语句中的 "),Ds,n(" 子句")]),title2:a(({value:e,isActive:t})=>[Ms,n(" 语句中的 "),Us,n(" 子句")]),tab0:a(({value:e,isActive:t})=>[Fs,fs,Hs,Ps,Bs,Ws,Ys,Gs]),tab1:a(({value:e,isActive:t})=>[Qs]),tab2:a(({value:e,isActive:t})=>[Vs]),_:1}),Ks,o(l,{id:"813",data:[{id:"IN 示例"},{id:"BETWEEN 示例"}],"tab-id":"范围操作符"},{title0:a(({value:e,isActive:t})=>[n("IN 示例")]),title1:a(({value:e,isActive:t})=>[n("BETWEEN 示例")]),tab0:a(({value:e,isActive:t})=>[Js,Xs]),tab1:a(({value:e,isActive:t})=>[js]),_:1}),zs,o(l,{id:"888",data:[{id:"<code v-pre>AND</code> 示例"},{id:"<code v-pre>OR</code> 示例"},{id:"NOT 示例"},{id:"<code v-pre>AND</code> 和 <code v-pre>OR</code> 优先级示例"}],"tab-id":"逻辑操作符"},{title0:a(({value:e,isActive:t})=>[$s,n(" 示例")]),title1:a(({value:e,isActive:t})=>[Zs,n(" 示例")]),title2:a(({value:e,isActive:t})=>[n("NOT 示例")]),title3:a(({value:e,isActive:t})=>[sn,n(" 和 "),nn,n(" 优先级示例")]),tab0:a(({value:e,isActive:t})=>[an,en]),tab1:a(({value:e,isActive:t})=>[tn,on]),tab2:a(({value:e,isActive:t})=>[ln,cn,dn,pn]),tab3:a(({value:e,isActive:t})=>[rn,un,kn,vn,mn]),_:1}),bn,o(l,{id:"959",data:[{id:"<code v-pre>%</code> 示例"},{id:"<code v-pre>_</code> 示例"},{id:"<code v-pre>[]</code> 示例"}],"tab-id":"逻辑操作符"},{title0:a(({value:e,isActive:t})=>[En,n(" 示例")]),title1:a(({value:e,isActive:t})=>[yn,n(" 示例")]),title2:a(({value:e,isActive:t})=>[gn,n(" 示例")]),tab0:a(({value:e,isActive:t})=>[wn,hn,_n,Rn,Tn,Ln]),tab1:a(({value:e,isActive:t})=>[An]),tab2:a(({value:e,isActive:t})=>[On,Nn]),_:1}),qn,o(l,{id:"1755",data:[{id:"<code v-pre>AVG()</code> 示例"},{id:"<code v-pre>COUNT()</code> 示例"},{id:"<code v-pre>MAX()</code> 示例"},{id:"<code v-pre>MIN()</code> 示例"},{id:"<code v-pre>SUM()</code> 示例"}],"tab-id":"聚合函数示例"},{title0:a(({value:e,isActive:t})=>[Sn,n(" 示例")]),title1:a(({value:e,isActive:t})=>[Cn,n(" 示例")]),title2:a(({value:e,isActive:t})=>[In,n(" 示例")]),title3:a(({value:e,isActive:t})=>[xn,n(" 示例")]),title4:a(({value:e,isActive:t})=>[Dn,n(" 示例")]),tab0:a(({value:e,isActive:t})=>[Mn,Un]),tab1:a(({value:e,isActive:t})=>[Fn,fn,Hn,Pn,Bn]),tab2:a(({value:e,isActive:t})=>[Wn,Yn]),tab3:a(({value:e,isActive:t})=>[Gn,Qn]),tab4:a(({value:e,isActive:t})=>[Vn,Kn]),_:1},8,["data"]),Jn,s("ul",null,[s("li",null,[s("a",Xn,[n("《SQL 必知必会》"),o(d)])]),s("li",null,[s("a",jn,[n("“浅入深出”MySQL 中事务的实现"),o(d)])]),s("li",null,[s("a",zn,[n("MySQL 的学习--触发器"),o(d)])]),s("li",null,[s("a",$n,[n("维基百科词条 - SQL"),o(d)])]),s("li",null,[s("a",Zn,[n("https://www.sitesbay.com/sql/index"),o(d)])]),s("li",null,[s("a",sa,[n("SQL Subqueries"),o(d)])]),s("li",null,[s("a",na,[n("Quick breakdown of the types of joins"),o(d)])]),s("li",null,[s("a",aa,[n("SQL UNION"),o(d)])]),s("li",null,[s("a",ea,[n("SQL database security"),o(d)])]),s("li",null,[s("a",ta,[n("Mysql 中的存储过程"),o(d)])])])])}const pa=p(k,[["render",oa],["__file","index.html.vue"]]);export{pa as default};
