import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as d,c as i,d as p,w as s,e as o,a as n,b as t}from"./app-6a91f8e9.js";const u={},g=o(`<h1 id="java-容器面试一" tabindex="-1"><a class="header-anchor" href="#java-容器面试一" aria-hidden="true">#</a> Java 容器面试一</h1><h2 id="java-容器简介" tabindex="-1"><a class="header-anchor" href="#java-容器简介" aria-hidden="true">#</a> Java 容器简介</h2><h3 id="【简单】java-中有哪些集合类" tabindex="-1"><a class="header-anchor" href="#【简单】java-中有哪些集合类" aria-hidden="true">#</a> 【简单】Java 中有哪些集合类？</h3><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/java/javacore/container/java-container-structure.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>Java 容器类主要位于 <code>java.util</code> 包，分为 <strong>Collection</strong> 和 <strong>Map</strong> 两大类：</p><ul><li><strong>Collection（存储独立元素）</strong><ul><li><strong>List（有序、可重复）</strong><ul><li><strong>ArrayList</strong>：基于 <code>Object[]</code> 动态数组，查询快，增删慢</li><li><strong>LinkedList</strong>：基于<strong>双链表</strong>（JDK1.6 前是循环链表，1.7 取消循环），增删快，查询慢</li><li><strong>Vector</strong>：线程安全的 <code>Object[]</code> 动态数组（已过时，推荐 <code>ArrayList</code> + <code>Collections.synchronizedList</code>）</li></ul></li><li><strong>Set（无序、不可重复）</strong><ul><li><strong>HashSet</strong>：基于 <code>HashMap</code> 实现，不保证顺序</li><li><strong>LinkedHashSet</strong>：基于 <code>LinkedHashMap</code>，维护<strong>插入顺序</strong></li><li><strong>TreeSet</strong>：基于 <code>TreeMap</code>，支持<strong>自然排序</strong>或<strong>自定义 <code>Comparator</code></strong></li></ul></li><li><strong>Queue（队列，FIFO 或优先级）</strong><ul><li><strong>ArrayDeque</strong>：基于动态数组，实现<strong>栈和队列</strong></li><li><strong>PriorityQueue</strong>：基于堆，<strong>优先级队列</strong>（按 <code>Comparator</code> 排序）</li><li><strong>LinkedList</strong>：也可作为队列/双端队列</li></ul></li></ul></li><li><strong>Map（键值对存储）</strong><ul><li><strong>HashMap</strong>：基于哈希表，<strong>无序</strong>，查找高效（最常用）</li><li><strong>LinkedHashMap</strong>：继承 <code>HashMap</code>，额外维护<strong>双向链表</strong>，保持<strong>插入顺序</strong>或<strong>访问顺序</strong></li><li><strong>TreeMap</strong>：基于红黑树，<strong>键有序</strong>（自然排序或 <code>Comparator</code>）</li><li><strong>Hashtable</strong>：线程安全（<code>synchronized</code> 修饰方法），但性能差，已被 <code>ConcurrentHashMap</code> 取代</li><li><strong>ConcurrentHashMap</strong>：分段锁（JDK7）或 CAS + <code>synchronized</code>（JDK8+），高并发优化</li></ul></li><li><strong>工具类</strong><ul><li><strong>Collections</strong>：提供集合操作（排序、查找、同步化等）</li><li><strong>Arrays</strong>：提供数组操作（排序、二分查找等）</li><li><strong>Stream（Java 8+）</strong>：支持函数式编程的流式处理</li></ul></li></ul><p><strong>关键区别</strong>：</p><table><thead><tr><th>类型</th><th>特点</th><th>主要实现类</th></tr></thead><tbody><tr><td><strong>List</strong></td><td>有序、可重复</td><td><code>ArrayList</code>、<code>LinkedList</code></td></tr><tr><td><strong>Set</strong></td><td>无序、不可重复</td><td><code>HashSet</code>、<code>LinkedHashSet</code>、<code>TreeSet</code></td></tr><tr><td><strong>Queue</strong></td><td>队列/栈</td><td><code>ArrayDeque</code>、<code>PriorityQueue</code></td></tr><tr><td><strong>Map</strong></td><td>键值对</td><td><code>HashMap</code>、<code>LinkedHashMap</code>、<code>TreeMap</code></td></tr></tbody></table><p><strong>线程安全</strong>：</p><ul><li>单线程：<code>ArrayList</code>、<code>HashMap</code></li><li>多线程：<code>ConcurrentHashMap</code>、<code>CopyOnWriteArrayList</code></li></ul><h3 id="【简单】comparable-和-comparator-有什么区别" tabindex="-1"><a class="header-anchor" href="#【简单】comparable-和-comparator-有什么区别" aria-hidden="true">#</a> 【简单】Comparable 和 Comparator 有什么区别？</h3><p><code>Comparable</code> 接口和 <code>Comparator</code> 接口都是 Java 中用于排序的接口，它们在实现类对象之间比较大小、排序等方面发挥了重要作用。</p><ul><li><strong>Comparable</strong> → &quot;我能比较&quot;（类自己实现的比较能力）</li><li><strong>Comparator</strong> → &quot;比较器&quot;（外部提供的比较工具）</li></ul><p>两者通常一起使用，为Java对象提供灵活多样的排序能力。</p><p><strong>Comparable vs. Comparator</strong>：</p><table><thead><tr><th>特性</th><th>Comparable</th><th>Comparator</th></tr></thead><tbody><tr><td><strong>包位置</strong></td><td>java.lang</td><td>java.util</td></tr><tr><td><strong>接口方法</strong></td><td>compareTo(T o)</td><td>compare(T o1, T o2)</td></tr><tr><td><strong>排序逻辑位置</strong></td><td>定义在要排序的类内部</td><td>定义在单独的类或匿名类中</td></tr><tr><td><strong>使用场景</strong></td><td>类的&quot;自然排序&quot;</td><td>多种排序方式或无法修改类时的排序</td></tr><tr><td><strong>调用方式</strong></td><td><code>Collections.sort(list)</code></td><td><code>Collections.sort(list, comparator)</code></td></tr><tr><td><strong>影响范围</strong></td><td>修改类的原始定义</td><td>不修改原有类</td></tr></tbody></table><p><strong>设计目的不同</strong></p><ul><li><code>Comparable</code>：定义对象的<strong>自然排序</strong>（如String按字母顺序，Integer按数值大小）</li><li><code>Comparator</code>：定义<strong>多种排序策略</strong>或为无法修改源代码的类提供排序</li></ul><p><strong>实现方式不同</strong></p><ul><li><code>Comparable</code>：需要修改类本身，实现<code>compareTo()</code>方法</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Person</span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">-</span> other<span class="token punctuation">.</span>age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Comparator</code>：独立实现，通常使用匿名类或lambda表达式</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> byName <span class="token operator">=</span> <span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> p1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>使用场景选择</strong></p><ul><li>用<code>Comparable</code>当： <ul><li>类有明确的自然排序标准</li><li>你能修改类的源代码</li><li>只需要一种主要排序方式</li></ul></li><li>用<code>Comparator</code>当： <ul><li>需要多种排序方式（如按姓名、年龄、工资等）</li><li>不能修改类的源代码（如第三方库的类）</li><li>需要临时或特殊的排序规则</li></ul></li></ul><p><strong>Java 8+的便利支持</strong></p><ul><li>Comparator提供了许多方便的静态方法：</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 多级排序</span>
<span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> comparator <span class="token operator">=</span>
    <span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getLastName</span><span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">thenComparing</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getFirstName</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 逆序排序</span>
<span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> reverseAge <span class="token operator">=</span>
    <span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparingInt</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="list" tabindex="-1"><a class="header-anchor" href="#list" aria-hidden="true">#</a> List</h2><h3 id="【简单】arraylist-和-array-数组-的区别" tabindex="-1"><a class="header-anchor" href="#【简单】arraylist-和-array-数组-的区别" aria-hidden="true">#</a> 【简单】ArrayList 和 Array（数组）的区别？</h3><p><strong>ArrayList vs. 数组</strong></p><table><thead><tr><th><strong>对比点</strong></th><th><strong>数组 (Array)</strong></th><th><strong>ArrayList</strong></th></tr></thead><tbody><tr><td><strong>长度可变性</strong></td><td>固定长度，创建后无法调整大小</td><td>动态扩容（默认扩容1.5倍）</td></tr><tr><td><strong>存储类型</strong></td><td>支持基本类型（<code>int[]</code>）和对象类型</td><td>仅支持引用类型（基本类型需装箱，如 <code>Integer</code>）</td></tr><tr><td><strong>内存占用</strong></td><td>更紧凑（无额外对象开销）</td><td>有额外内存开销（记录大小、扩容预留空间等）</td></tr><tr><td><strong>访问方式</strong></td><td>通过索引直接访问（<code>arr[0]</code>）</td><td>通过 <code>get(index)</code>/<code>set(index)</code> 方法访问</td></tr><tr><td><strong>操作效率</strong></td><td>- 查询：O(1)（极快）<br>- 增删：O(n)（需移动元素）</td><td>- 查询：O(1)（底层是数组）<br>- 增删：<br> - 尾部操作：O(1)<br> - 中间操作：O(n)（需移动元素）</td></tr><tr><td><strong>功能方法</strong></td><td>功能简单（依赖 <code>Arrays</code> 工具类）</td><td>提供丰富方法（<code>add()</code>、<code>remove()</code>、<code>contains()</code> 等）</td></tr><tr><td><strong>线程安全</strong></td><td>非线程安全</td><td>非线程安全（需用 <code>Collections.synchronizedList</code> 包装）</td></tr><tr><td><strong>泛型支持</strong></td><td>不支持泛型（类型检查在运行时）</td><td>支持泛型（编译时类型安全）</td></tr></tbody></table><p><strong>小结</strong>：</p><ul><li><strong>动态性</strong>：<code>ArrayList</code> 自动扩容，数组长度固定。</li><li><strong>类型支持</strong>：数组可直接存基本类型，<code>ArrayList</code> 需包装类。</li><li><strong>性能</strong>： <ul><li>数组的随机访问稍快（少一次方法调用）。</li><li><code>ArrayList</code> 的尾部插入高效，但中间插入/删除需移动元素。</li></ul></li><li><strong>功能</strong>：<code>ArrayList</code> 提供更多便捷方法（如迭代、搜索）。</li><li><strong>内存</strong>：数组更节省内存，<code>ArrayList</code> 有额外结构开销。</li></ul><p><strong>应用</strong>：</p><ul><li><strong>选数组</strong>：需极致性能、固定长度或存储基本类型时（如数学计算）。</li><li><strong>选ArrayList</strong>：需要动态大小、便捷操作或泛型安全时（大多数业务场景）。</li></ul><h3 id="【简单】arraylist-可以添加-null-值吗" tabindex="-1"><a class="header-anchor" href="#【简单】arraylist-可以添加-null-值吗" aria-hidden="true">#</a> 【简单】ArrayList 可以添加 null 值吗？</h3><p><code>ArrayList</code> <strong>可以添加任意数量的 <code>null</code> 值</strong>，包括重复 <code>null</code>，但需谨慎处理潜在的空指针问题。</p><p><code>ArrayList</code>底层基于 <code>Object[]</code> 数组实现，天然支持 <code>null</code>。</p><p><strong>注意</strong>：</p><ul><li><strong>可能引发 <code>NullPointerException</code></strong>： <ul><li>直接调用 <code>null</code> 的方法（如 <code>list.get(0).length()</code>）会报错。</li><li>使用 <code>contains(null)</code> 或遍历时需判空。</li></ul></li><li><strong>慎用于特定场景</strong>：如数据库映射、JSON 序列化工具可能对 <code>null</code> 有特殊限制。</li></ul><p><strong>与其他容器对比</strong>：</p><ul><li><strong>HashSet</strong>：允许一个 <code>null</code>。</li><li><strong>TreeSet</strong>：若用自然排序，添加 <code>null</code> 会抛 <code>NullPointerException</code>。</li><li><strong>HashMap</strong>：允许 <code>null</code> 键和值。</li><li><strong>Hashtable</strong>：禁止 <code>null</code> 键和值。</li></ul><p><strong>建议</strong>：</p><ul><li>明确是否需要 <code>null</code>，避免滥用导致代码健壮性问题。</li><li>必要时用 <code>Optional</code> 或默认值替代 <code>null</code>。</li></ul><h3 id="【简单】对比一下-arraylist-和-linkedlist" tabindex="-1"><a class="header-anchor" href="#【简单】对比一下-arraylist-和-linkedlist" aria-hidden="true">#</a> 【简单】对比一下 ArrayList 和 LinkedList？</h3><p><strong><code>ArrayList</code> vs. <code>LinkedList</code></strong></p><table><thead><tr><th><strong>对比维度</strong></th><th><strong>ArrayList</strong></th><th><strong>LinkedList</strong></th></tr></thead><tbody><tr><td><strong>底层数据结构</strong></td><td>动态数组（<code>Object[]</code>）</td><td>双向链表（<code>Node</code> 节点）</td></tr><tr><td><strong>内存占用</strong></td><td>更紧凑（连续内存）</td><td>更高（每个元素需额外存储前后节点指针）</td></tr><tr><td><strong>随机访问性能</strong></td><td>⚡ <strong>O(1)</strong>（通过索引直接访问）</td><td>🐢 <strong>O(n)</strong>（需遍历链表）</td></tr><tr><td><strong>插入/删除性能</strong></td><td>- 尾部操作：⚡ <strong>O(1)</strong><br>- 中间/头部操作：🐢 <strong>O(n)</strong>（需移动元素）</td><td>- 头尾操作：⚡ <strong>O(1)</strong><br>- 中间操作：🐢 <strong>O(n)</strong>（需遍历定位）</td></tr><tr><td><strong>适用场景</strong></td><td>- 频繁随机访问<br>- 数据量稳定或尾部操作多</td><td>- 频繁头尾插入/删除<br>- 数据动态性强</td></tr><tr><td><strong>额外功能</strong></td><td>仅基础列表操作</td><td>实现了 <code>Deque</code> 接口（可作队列/栈使用）</td></tr><tr><td><strong>空间局部性</strong></td><td>✅ 更好（CPU 缓存友好）</td><td>❌ 较差（节点分散存储）</td></tr></tbody></table><p><strong>对比小结</strong>：</p><ol><li><strong>访问速度</strong>：<code>ArrayList</code> 随机访问极快（数组索引），<code>LinkedList</code> 需遍历链表。</li><li><strong>增删效率</strong>：<code>ArrayList</code> 尾部插入快，中间/头部插入慢；<code>LinkedList</code> 头尾插入快，中间插入仍需遍历。</li><li><strong>内存开销</strong>：<code>LinkedList</code> 每个元素多消耗 2 个指针空间（前驱+后继）。</li><li><strong>功能扩展</strong>：<code>LinkedList</code> 支持队列/栈操作（如 <code>addFirst()</code>, <code>pollLast()</code>）。</li></ol><p><strong>选型建议</strong>：</p><ul><li>优先用 <strong><code>ArrayList</code></strong>（大多数场景性能更优）。</li><li>仅当需要频繁在 <strong>头部/中间插入删除</strong>，或需要 <strong>队列/栈功能</strong> 时选 <code>LinkedList</code>。</li></ul><blockquote><p>💡 <strong>Java 实践提示</strong>：</p><ul><li>默认情况下，<code>Collections.synchronizedList</code> 包装的 <code>ArrayList</code> 比 <code>LinkedList</code> 线程安全开销更低。</li><li>Java 8+ 的 <code>Stream</code> 操作在 <code>ArrayList</code> 上效率更高。</li></ul></blockquote><h2 id="set" tabindex="-1"><a class="header-anchor" href="#set" aria-hidden="true">#</a> Set</h2><h3 id="【简单】比较-hashset、linkedhashset-和-treeset-三者的异同" tabindex="-1"><a class="header-anchor" href="#【简单】比较-hashset、linkedhashset-和-treeset-三者的异同" aria-hidden="true">#</a> 【简单】比较 HashSet、LinkedHashSet 和 TreeSet 三者的异同？</h3><table><thead><tr><th>特性</th><th>HashSet</th><th>LinkedHashSet</th><th>TreeSet</th></tr></thead><tbody><tr><td><strong>底层实现</strong></td><td>哈希表 (HashMap)</td><td>哈希表 + 链表</td><td>红黑树</td></tr><tr><td><strong>排序保证</strong></td><td>无顺序</td><td>插入顺序</td><td>自然顺序/自定义排序</td></tr><tr><td><strong>时间复杂度</strong></td><td>添加/删除/查找: O(1)</td><td>添加/删除/查找: O(1)</td><td>添加/删除/查找: O(log n)</td></tr><tr><td><strong>允许null元素</strong></td><td>允许1个null</td><td>允许1个null</td><td>不允许(除非自定义Comparator允许)</td></tr><tr><td><strong>线程安全</strong></td><td>非线程安全</td><td>非线程安全</td><td>非线程安全</td></tr><tr><td><strong>性能特点</strong></td><td>最快的基础操作</td><td>比HashSet稍慢但保持顺序</td><td>最慢但自动排序</td></tr><tr><td><strong>使用场景</strong></td><td>只需唯一性不关心顺序</td><td>需要保持插入顺序</td><td>需要排序的集合</td></tr></tbody></table><p><strong>顺序特性</strong></p><ul><li><code>HashSet</code>：完全不保证任何顺序（基于哈希值存储）</li><li><code>LinkedHashSet</code>：维护元素<strong>插入顺序</strong>（迭代时按插入顺序返回）</li><li><code>TreeSet</code>：根据元素的<strong>自然顺序</strong>或<strong>Comparator</strong>进行排序</li></ul><p><strong>性能比较</strong></p><ul><li><strong>操作速度</strong>：HashSet ≈ LinkedHashSet &gt; TreeSet</li><li><strong>内存占用</strong>：LinkedHashSet &gt; HashSet &gt; TreeSet</li><li><strong>迭代性能</strong>：LinkedHashSet最优（顺序访问快）</li></ul><p><strong>实现原理</strong></p><ul><li><code>HashSet</code>：基于HashMap实现，只使用键</li><li><code>LinkedHashSet</code>：继承HashSet，通过链表维护插入顺序</li><li><code>TreeSet</code>：基于TreeMap实现（红黑树结构）</li></ul><p><strong>构造方式</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// HashSet</span>
<span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> hashSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// LinkedHashSet</span>
<span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> linkedHashSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// TreeSet - 自然排序</span>
<span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> treeSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// TreeSet - 自定义排序</span>
<span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> customTreeSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">reverseOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用场景建议</strong></p><ul><li>需要<strong>最快查询</strong>且不关心顺序 → HashSet</li><li>需要<strong>保持插入顺序</strong> → LinkedHashSet</li><li>需要<strong>自动排序</strong>或<strong>范围查询</strong> → TreeSet</li><li>需要<strong>频繁迭代</strong> → LinkedHashSet</li></ul><p><strong>特殊注意事项</strong></p><ul><li><p><strong>相等性判断</strong>：</p><ul><li>三者都使用<code>equals()</code>方法判断元素是否相同</li><li>TreeSet同时会使用<code>compareTo()</code>或<code>compare()</code>方法（必须与equals逻辑一致）</li></ul></li><li><p><strong>TreeSet排序规则</strong>：</p><ul><li>元素必须实现<code>Comparable</code>接口，或在构造时提供<code>Comparator</code></li><li>否则会抛出<code>ClassCastException</code></li></ul></li><li><p><strong>线程安全替代方案</strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> syncSet <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">synchronizedSet</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> syncTreeSet <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">synchronizedSet</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>选择哪种Set实现取决于你的具体需求：要速度（HashSet）、要插入顺序（LinkedHashSet）还是要自动排序（TreeSet）。</p><h2 id="queue" tabindex="-1"><a class="header-anchor" href="#queue" aria-hidden="true">#</a> Queue</h2><h3 id="【简单】queue-与-deque-的区别" tabindex="-1"><a class="header-anchor" href="#【简单】queue-与-deque-的区别" aria-hidden="true">#</a> 【简单】Queue 与 Deque 的区别</h3><div class="hint-container info"><p class="hint-container-title">Queue vs. Deque</p></div><table><thead><tr><th>特性</th><th>Queue (队列)</th><th>Deque (双端队列)</th></tr></thead><tbody><tr><td><strong>进出原则</strong></td><td>先进先出 (FIFO)</td><td>两端都可进出 (FIFO + LIFO)</td></tr><tr><td><strong>主要操作</strong></td><td>队尾入队(add/offer)，队首出队(remove/poll)</td><td>支持队首/队尾的入队和出队操作</td></tr><tr><td><strong>继承关系</strong></td><td>基础接口</td><td>继承自 Queue 接口</td></tr><tr><td><strong>代表子类</strong></td><td>LinkedList, PriorityQueue</td><td>ArrayDeque, LinkedList</td></tr><tr><td><strong>特殊功能</strong></td><td>-</td><td>支持栈操作(push/pop/peek)</td></tr></tbody></table><p><strong>基本操作对比</strong></p>`,74),k=n("strong",null,"Queue 操作",-1),h=n("strong",null,"Deque 扩展操作",-1),m=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[t("queue"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"offer"),n("span",{class:"token punctuation"},"("),t("e"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t("  "),n("span",{class:"token comment"},"// 队尾添加（推荐）"),t(`
queue`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),t("e"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t("    "),n("span",{class:"token comment"},"// 队尾添加（可能抛异常）"),t(`
queue`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"poll"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t("    "),n("span",{class:"token comment"},"// 队首移除并返回（推荐）"),t(`
queue`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"remove"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t("  "),n("span",{class:"token comment"},"// 队首移除并返回（可能抛异常）"),t(`
queue`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"peek"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t("    "),n("span",{class:"token comment"},"// 查看队首（不移除）"),t(`
queue`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"element"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(),n("span",{class:"token comment"},"// 查看队首（可能抛异常）"),t(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),v=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token comment"},"// 队首操作"),t(`
deque`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"offerFirst"),n("span",{class:"token punctuation"},"("),t("e"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t("  deque"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"addFirst"),n("span",{class:"token punctuation"},"("),t("e"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
deque`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pollFirst"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t("    deque"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"removeFirst"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
deque`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"peekFirst"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t("    deque"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getFirst"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`

`),n("span",{class:"token comment"},"// 队尾操作"),t(`
deque`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"offerLast"),n("span",{class:"token punctuation"},"("),t("e"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t("   deque"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"addLast"),n("span",{class:"token punctuation"},"("),t("e"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
deque`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pollLast"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t("     deque"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"removeLast"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
deque`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"peekLast"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t("     deque"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getLast"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`

`),n("span",{class:"token comment"},"// 栈操作"),t(`
deque`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),t("e"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t("        "),n("span",{class:"token comment"},"// = addFirst(e)"),t(`
deque`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t("          "),n("span",{class:"token comment"},"// = removeFirst()"),t(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),b=o(`<p><strong>使用场景差异</strong></p><ul><li><strong>Queue 适用场景（标准的先进先出场景）</strong>： <ul><li>任务调度系统（先来先服务）</li><li>消息队列（生产者-消费者模型）</li><li>广度优先搜索（BFS）</li></ul></li><li><strong>Deque 适用场景（需要两端操作的场景）</strong>： <ul><li>撤销操作历史（两端添加，一端移除）</li><li>滑动窗口算法</li><li>可同时作为队列和栈使用</li><li>工作窃取算法（如ForkJoinPool使用Deque）</li><li>实现高效的头尾操作（ArrayDeque比LinkedList更高效）</li></ul></li></ul><blockquote><p>小结：</p><ul><li>需要<strong>标准队列行为</strong> → 选择 Queue</li><li>需要<strong>两端操作</strong>或<strong>栈功能</strong> → 选择 Deque</li><li>需要<strong>优先级排序</strong> → 使用 PriorityQueue（Queue实现）</li><li>追求<strong>高性能</strong> → 优先考虑 ArrayDeque（优于 LinkedList）</li></ul></blockquote><p><strong>性能特点</strong></p><ul><li><code>ArrayDeque</code>（Deque实现）比<code>LinkedList</code>： <ul><li>内存更紧凑（数组实现）</li><li>大多数操作更高效（O(1)时间）</li><li>但不适合频繁的中间插入/删除</li></ul></li><li><code>PriorityQueue</code>（Queue实现）： <ul><li>基于堆结构</li><li>保证每次取出的都是优先级最高的元素（O(log n)时间）</li></ul></li></ul><p><strong>线程安全注意</strong></p><ul><li>两者主要实现类（LinkedList/ArrayDeque）都<strong>非线程安全</strong></li><li>线程安全替代方案：<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> safeQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentLinkedQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> safeDeque <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentLinkedDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="【简单】arraydeque-与-linkedlist-的区别" tabindex="-1"><a class="header-anchor" href="#【简单】arraydeque-与-linkedlist-的区别" aria-hidden="true">#</a> 【简单】ArrayDeque 与 LinkedList 的区别？</h3><ul><li><strong>性能优先选 <code>ArrayDeque</code></strong>：队列/栈场景，追求更高吞吐和更低内存。</li><li><strong>功能灵活选 <code>LinkedList</code></strong>：需要中间操作、随机访问或混合数据结构时。</li></ul><p>以下是 <strong>ArrayDeque</strong> 和 <strong>LinkedList</strong> 的对比表格，清晰概括两者的核心差异：</p><table><thead><tr><th><strong>对比项</strong></th><th><strong>ArrayDeque</strong></th><th><strong>LinkedList</strong></th></tr></thead><tbody><tr><td><strong>底层数据结构</strong></td><td>动态数组（循环数组）</td><td>双向链表</td></tr><tr><td><strong>内存占用</strong></td><td>更低（连续存储，无节点开销）</td><td>更高（每个元素需存储前后节点引用）</td></tr><tr><td><strong>头部/尾部操作</strong></td><td><code>O(1)</code>，常数时间更优</td><td><code>O(1)</code>，但实际更慢（需操作节点）</td></tr><tr><td><strong>中间插入/删除</strong></td><td><code>O(n)</code>（需移动元素）</td><td><code>O(1)</code>（已知位置时）</td></tr><tr><td><strong>随机访问</strong></td><td>理论上 <code>O(1)</code>，但通常不支持直接索引操作</td><td><code>O(n)</code>（需遍历链表）</td></tr><tr><td><strong>扩容机制</strong></td><td>动态扩容（默认翻倍），扩容时有开销</td><td>无扩容概念，按需分配节点</td></tr><tr><td><strong>功能支持</strong></td><td>仅双端队列操作（<code>Deque</code>）</td><td>同时实现 <code>List</code> 和 <code>Deque</code>，支持索引和中间操作</td></tr><tr><td><strong>线程安全</strong></td><td>非线程安全</td><td>非线程安全</td></tr><tr><td><strong>迭代效率</strong></td><td>更高（连续内存访问）</td><td>较低（非连续内存访问）</td></tr><tr><td><strong>适用场景</strong></td><td>高频双端操作（如栈、队列）</td><td>需要中间操作或混合 <code>List/Deque</code> 需求的场景</td></tr></tbody></table><h3 id="【简单】priorityqueue-有什么用" tabindex="-1"><a class="header-anchor" href="#【简单】priorityqueue-有什么用" aria-hidden="true">#</a> 【简单】PriorityQueue 有什么用？</h3><p>PriorityQueue 是自动排序的堆结构队列，默认小顶堆，适用优先级调度，但线程不安全。</p><p><strong>基本特性</strong></p><ul><li><strong>基于堆（默认小顶堆）</strong>，元素按优先级出队（最小/最大值先出）。</li><li><strong>无界队列</strong>（自动扩容），但初始容量为 <code>11</code>。</li><li><strong>不允许 <code>null</code></strong>，且元素需实现 <code>Comparable</code> 或提供 <code>Comparator</code>。</li></ul><p><strong>关键操作</strong></p><table><thead><tr><th>方法</th><th>时间复杂度</th><th>说明</th></tr></thead><tbody><tr><td><code>add(E e)</code> / <code>offer(E e)</code></td><td>O(log n)</td><td>插入元素，触发堆调整。</td></tr><tr><td><code>poll()</code></td><td>O(log n)</td><td>移除并返回队首（优先级最高）。</td></tr><tr><td><code>peek()</code></td><td>O(1)</td><td>查看队首但不移除。</td></tr><tr><td><code>remove(Object o)</code></td><td>O(n)</td><td>删除指定元素（需遍历堆）。</td></tr></tbody></table><p><strong>排序规则</strong></p><ul><li><strong>默认自然排序</strong>（元素需实现 <code>Comparable</code>）。</li><li><strong>自定义排序</strong>：通过 <code>Comparator</code> 指定（如大顶堆）。<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> maxHeap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> b <span class="token operator">-</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p><strong>使用场景</strong></p><ul><li><strong>任务调度</strong>（按优先级执行）。</li><li><strong>Top K 问题</strong>（维护前 K 个最大/最小值）。</li><li><strong>Dijkstra 算法</strong>（优先处理最短路径）。</li></ul><p><strong>注意事项</strong></p><ul><li><strong>非线程安全</strong>：多线程需用 <code>PriorityBlockingQueue</code>。</li><li><strong>迭代无序</strong>：遍历顺序不等于优先级顺序。</li><li><strong>性能权衡</strong>：插入/删除 O(log n)，但查找 O(n)。</li></ul><h3 id="【简单】blockingqueue-有什么用" tabindex="-1"><a class="header-anchor" href="#【简单】blockingqueue-有什么用" aria-hidden="true">#</a> 【简单】BlockingQueue 有什么用？</h3><p><strong>BlockingQueue 是线程安全的队列</strong>，支持阻塞操作（队列满时阻塞插入，空时阻塞取出）。主要用于<strong>生产者-消费者模型</strong>，协调多线程数据交换。</p><p><strong>关键方法</strong>：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>put(E e)</code></td><td>队列满时<strong>阻塞</strong>，直到有空间插入。</td></tr><tr><td><code>take()</code></td><td>队列空时<strong>阻塞</strong>，直到有元素可取。</td></tr><tr><td><code>offer(E e)</code></td><td>非阻塞插入，成功返回 <code>true</code>，失败返回 <code>false</code>。</td></tr><tr><td><code>poll()</code></td><td>非阻塞取出，有元素返回元素，无元素返回 <code>null</code>。</td></tr><tr><td><code>peek()</code></td><td>查看队首元素但不移除（无元素返回 <code>null</code>）。</td></tr></tbody></table><p><strong>常见实现类</strong></p><ul><li><strong><code>ArrayBlockingQueue</code></strong>：固定大小数组，单锁，适合低并发。</li><li><strong><code>LinkedBlockingQueue</code></strong>：链表，双锁（高并发），默认几乎无界。</li><li><strong><code>PriorityBlockingQueue</code></strong>：优先级队列（堆实现），无界。</li><li><strong><code>SynchronousQueue</code></strong>：不存储元素，直接传递任务（一对一通信）。</li></ul><p><strong>适用场景</strong></p><ul><li><strong>任务调度</strong>（线程池任务队列）。</li><li><strong>数据缓冲</strong>（生产者-消费者模型）。</li><li><strong>流量控制</strong>（通过固定容量限制并发）。</li></ul><p><strong>注意事项</strong></p><ul><li><strong>线程安全</strong>：所有实现均线程安全，但需注意 <code>peek()</code> 和 <code>poll()</code> 的竞态条件。</li><li><strong>阻塞策略</strong>：<code>put()</code>/<code>take()</code> 会阻塞，<code>offer()</code>/<code>poll()</code> 可设置超时。</li><li><strong>无界队列风险</strong>：<code>LinkedBlockingQueue</code> 默认无界，可能导致 <code>OOM</code>，建议设置容量。</li></ul><p><strong>一句话总结</strong>： 多线程间安全传递数据的阻塞队列，核心方法是 <code>put()</code>（阻塞插入）和 <code>take()</code>（阻塞取出），按场景选实现类。</p><h3 id="【中等】arrayblockingqueue-和-linkedblockingqueue-有什么区别" tabindex="-1"><a class="header-anchor" href="#【中等】arrayblockingqueue-和-linkedblockingqueue-有什么区别" aria-hidden="true">#</a> 【中等】ArrayBlockingQueue 和 LinkedBlockingQueue 有什么区别？</h3><p><code>ArrayBlockingQueue</code> 和 <code>LinkedBlockingQueue</code> 都是 Java 并发包（<code>java.util.concurrent</code>）中的<strong>线程安全阻塞队列</strong>，但它们在底层实现、性能和适用场景上有显著区别。</p><ul><li><strong><code>ArrayBlockingQueue</code></strong>：固定容量，单锁，适合低并发或内存敏感场景。</li><li><strong><code>LinkedBlockingQueue</code></strong>：动态扩容，双锁，适合高并发和高吞吐场景。</li><li><strong>避免 <code>OOM</code></strong>：如果使用 <code>LinkedBlockingQueue</code>，建议设置合理容量（默认 <code>MAX_VALUE</code> 可能导致内存问题）。</li></ul><p><strong><code>ArrayBlockingQueue</code> vs. <code>LinkedBlockingQueue</code></strong></p><table><thead><tr><th><strong>对比项</strong></th><th><strong>ArrayBlockingQueue</strong></th><th><strong>LinkedBlockingQueue</strong></th></tr></thead><tbody><tr><td><strong>底层数据结构</strong></td><td><strong>固定大小的数组</strong>（循环队列）</td><td><strong>链表</strong>（可动态扩容）</td></tr><tr><td><strong>初始化容量</strong></td><td><strong>必须指定容量</strong>（无默认构造方法）</td><td>可选指定容量（默认 <code>Integer.MAX_VALUE</code>）</td></tr><tr><td><strong>内存占用</strong></td><td>更紧凑（连续存储）</td><td>稍高（每个节点存储前后指针）</td></tr><tr><td><strong>锁机制</strong></td><td><strong>单锁（入队和出队共用同一把锁）</strong></td><td><strong>双锁（入队和出队分离锁，减少竞争）</strong></td></tr><tr><td><strong>吞吐量</strong></td><td>较低（锁竞争更激烈）</td><td>较高（读写分离，并发性能更好）</td></tr><tr><td><strong>适用场景</strong></td><td>固定大小队列，避免 OOM</td><td>高并发、动态扩容场景</td></tr></tbody></table><p><strong>底层数据结构</strong></p><ul><li><p><strong><code>ArrayBlockingQueue</code></strong></p><ul><li>基于<strong>数组</strong>（循环队列），初始化时必须指定固定容量。</li><li>存储连续，内存局部性好，但扩容需重建数组（不支持动态扩容）。</li></ul></li><li><p><strong><code>LinkedBlockingQueue</code></strong></p><ul><li>基于<strong>链表</strong>，默认容量 <code>Integer.MAX_VALUE</code>（几乎无界）。</li><li>可动态增长，但每个节点需额外存储前后指针，内存开销稍大。</li></ul></li></ul><p><strong>锁机制</strong></p><ul><li><p><strong><code>ArrayBlockingQueue</code></strong></p><ul><li>使用<strong>单锁</strong>（<code>ReentrantLock</code>），入队和出队操作共用同一把锁，竞争较激烈。</li><li>适合<strong>低并发</strong>或<strong>容量固定</strong>的场景。</li></ul></li><li><p><strong><code>LinkedBlockingQueue</code></strong></p><ul><li>采用<strong>双锁</strong>（<code>putLock</code> 和 <code>takeLock</code>），入队和出队操作互不阻塞。</li><li><strong>高并发</strong>下吞吐量更高（如生产者-消费者模型）。</li></ul></li></ul><p><strong>性能对比</strong></p><table><thead><tr><th><strong>操作</strong></th><th><strong>ArrayBlockingQueue</strong></th><th><strong>LinkedBlockingQueue</strong></th></tr></thead><tbody><tr><td><strong>入队（<code>put</code>）</strong></td><td>较慢（单锁竞争）</td><td>更快（双锁分离）</td></tr><tr><td><strong>出队（<code>take</code>）</strong></td><td>较慢（单锁竞争）</td><td>更快（双锁分离）</td></tr><tr><td><strong>内存占用</strong></td><td>更紧凑</td><td>稍高（链表节点开销）</td></tr></tbody></table><p><strong>使用场景建议</strong></p><p><strong>选择 <code>ArrayBlockingQueue</code> 的情况</strong>：</p><ul><li>✅ <strong>队列大小固定</strong>，防止内存耗尽（如任务队列有严格上限）。</li><li>✅ <strong>低/中并发</strong>，且对内存占用敏感。</li></ul><p><strong>选择 <code>LinkedBlockingQueue</code> 的情况</strong>：</p><ul><li>✅ <strong>高并发</strong>（生产者-消费者模型）。</li><li>✅ <strong>队列大小不固定</strong>（默认几乎无界，但可手动指定容量）。</li><li>✅ <strong>需要更高的吞吐量</strong>（双锁机制减少竞争）。</li></ul>`,50);function y(L,S){const r=l("CodeTabs");return d(),i("div",null,[g,p(r,{id:"1172",data:[{id:"<strong>Queue 操作</strong>"},{id:"<strong>Deque 扩展操作</strong>"}],"tab-id":"重载和重写的示例"},{title0:s(({value:a,isActive:e})=>[k]),title1:s(({value:a,isActive:e})=>[h]),tab0:s(({value:a,isActive:e})=>[m]),tab1:s(({value:a,isActive:e})=>[v]),_:1}),b])}const A=c(u,[["render",y],["__file","index.html.vue"]]);export{A as default};
