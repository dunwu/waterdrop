import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o,c as e,a as n,b as p,d as i,e as c}from"./app-afb37932.js";const l={},u=c(`<h1 id="springboot-面试" tabindex="-1"><a class="header-anchor" href="#springboot-面试" aria-hidden="true">#</a> SpringBoot 面试</h1><h2 id="springboot-简介" tabindex="-1"><a class="header-anchor" href="#springboot-简介" aria-hidden="true">#</a> SpringBoot 简介</h2><h3 id="【简单】什么是-springboot" tabindex="-1"><a class="header-anchor" href="#【简单】什么是-springboot" aria-hidden="true">#</a> 【简单】什么是 SpringBoot？</h3><p>Spring Boot 是一个基于 Spring 框架的“开箱即用”的脚手架框架，它基于<strong>约定优于配置</strong>的原则，极大地简化了 Spring 应用的搭建和开发过程。</p><p>SpringBoot 的核心特性：</p><ul><li><strong>自动配置</strong>：根据项目依赖<strong>自动推断并配置</strong>所需的 Bean（如引入 Web 依赖则自动配置 Tomcat + Spring MVC）。</li><li><strong>starter 依赖</strong>：将功能相关的依赖<strong>打包成一个整体</strong>（如 <code>spring-boot-starter-web</code>），解决版本兼容问题。</li><li><strong>内嵌服务器</strong>：内嵌服务器 Tomcat/Jetty，无需外部容器，打包成可执行 JAR 后一键运行 (<code>java -jar</code>)。</li><li><strong>监控</strong>：提供 <strong>Actuator</strong> 模块，轻松监控应用健康、性能等指标（通过 <code>/actuator/health</code> 等端点）。</li></ul><h2 id="springboot-架构" tabindex="-1"><a class="header-anchor" href="#springboot-架构" aria-hidden="true">#</a> SpringBoot 架构</h2><h3 id="【中等】springboot-是如何实现自动配置的-🌟🌟🌟" tabindex="-1"><a class="header-anchor" href="#【中等】springboot-是如何实现自动配置的-🌟🌟🌟" aria-hidden="true">#</a> 【中等】SpringBoot 是如何实现自动配置的？🌟🌟🌟</h3><p>SpringBoot 自动配置的核心流程如下：</p><h4 id="springbootapplication-注解" tabindex="-1"><a class="header-anchor" href="#springbootapplication-注解" aria-hidden="true">#</a> <code>@SpringBootApplication</code> 注解</h4><p>SpringBoot 的启动入口一般都是从标记 <code>@SpringBootApplication</code> 注解开始。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MyApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>@SpringBootApplication 是一个组合注解，其定义如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Inherited</span>
<span class="token annotation punctuation">@SpringBootConfiguration</span>
<span class="token annotation punctuation">@EnableAutoConfiguration</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>excludeFilters <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span><span class="token constant">CUSTOM</span><span class="token punctuation">,</span> classes <span class="token operator">=</span> <span class="token class-name">TypeExcludeFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span><span class="token constant">CUSTOM</span><span class="token punctuation">,</span> classes <span class="token operator">=</span> <span class="token class-name">AutoConfigurationExcludeFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">SpringBootApplication</span> <span class="token punctuation">{</span>
	<span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，最核心的注解有 2 个：</p><ul><li><strong><code>@EnableAutoConfiguration</code> 注解</strong>：开启了 Spring Boot 的自动配置功能。</li><li><strong><code>@ComponentScan</code> 注解</strong>：自动扫描指定包及其子包下的所有被 <code>@Component</code> 等注解标记的类，并将它们注册为 Spring 容器中的 Bean 。默认，<code>@SpringBootApplication</code> 标注的类所在的包及其子包下的组件都会被扫描 。</li></ul><h4 id="enableautoconfiguration-注解" tabindex="-1"><a class="header-anchor" href="#enableautoconfiguration-注解" aria-hidden="true">#</a> <code>@EnableAutoConfiguration</code> 注解</h4><p><strong><code>@EnableAutoConfiguration</code> 注解</strong>开启了 Spring Boot 的自动配置功能。</p><p><code>@EnableAutoConfiguration</code> 也是一个组合注解，其定义如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Inherited</span>
<span class="token annotation punctuation">@AutoConfigurationPackage</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">AutoConfigurationImportSelector</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">EnableAutoConfiguration</span> <span class="token punctuation">{</span>
	<span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，最关键点在于 <code>@Import(AutoConfigurationImportSelector.class)</code> 注解，表示导入 <code>AutoConfigurationImportSelector</code>。<code>AutoConfigurationImportSelector</code> 正式自动导入配置的关键。</p><h4 id="import-autoconfigurationimportselector-class" tabindex="-1"><a class="header-anchor" href="#import-autoconfigurationimportselector-class" aria-hidden="true">#</a> @Import(AutoConfigurationImportSelector.class)</h4><p><code>AutoConfigurationImportSelector</code> 会扫描 <code>META-INF/spring.factories</code> 文件中的自动配置类，并根据限制条件，选择性为应用自动初始化、注入合适的 Bean。</p><blockquote><p>注：这其实就是 SpringBoot 的 SPI 机制。</p></blockquote><h4 id="spring-factories-文件" tabindex="-1"><a class="header-anchor" href="#spring-factories-文件" aria-hidden="true">#</a> spring.factories 文件</h4><p><code>spring.factories</code> 文件中列出了所有自动配置类，当 SpringBoot 启动时，会根据文件中指定的配置类加载相应的自动配置。</p><p><code>spring.factories</code> 文件部分内容：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># Initializers</span>
<span class="token key attr-name">org.springframework.context.ApplicationContextInitializer</span><span class="token punctuation">=</span><span class="token value attr-value">\\
org.springframework.boot.autoconfigure.SharedMetadataReaderFactoryContextInitializer,\\
org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener</span>

<span class="token comment"># Application Listeners</span>
<span class="token key attr-name">org.springframework.context.ApplicationListener</span><span class="token punctuation">=</span><span class="token value attr-value">\\
org.springframework.boot.autoconfigure.BackgroundPreinitializer</span>

<span class="token comment"># Auto Configuration Import Listeners</span>
<span class="token key attr-name">org.springframework.boot.autoconfigure.AutoConfigurationImportListener</span><span class="token punctuation">=</span><span class="token value attr-value">\\
org.springframework.boot.autoconfigure.condition.ConditionEvaluationReportAutoConfigurationImportListener</span>

<span class="token comment"># Auto Configuration Import Filters</span>
<span class="token key attr-name">org.springframework.boot.autoconfigure.AutoConfigurationImportFilter</span><span class="token punctuation">=</span><span class="token value attr-value">\\
org.springframework.boot.autoconfigure.condition.OnBeanCondition,\\
org.springframework.boot.autoconfigure.condition.OnClassCondition,\\
org.springframework.boot.autoconfigure.condition.OnWebApplicationCondition</span>

<span class="token comment"># Auto Configure</span>
<span class="token key attr-name">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span><span class="token punctuation">=</span><span class="token value attr-value">\\
org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\\
org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\\
org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\\
org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\\
org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\\
</span>
<span class="token key attr-name">//</span> <span class="token value attr-value">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="自动配置类" tabindex="-1"><a class="header-anchor" href="#自动配置类" aria-hidden="true">#</a> 自动配置类</h4><p>自动配置类中有以下核心注解，来辅助它完成自动配置的能力。</p><ul><li><code>@Configuration</code>：自动配置类，一般都会标记 <code>@Configuration</code> 注解，来表明需要被扫描。</li><li><code>@EnableConfigurationProperties(xxx.class)</code>：表明这个配置类需要自动绑定的配置属性。</li><li><code>@Import</code>：需要前置依赖的其他配置类。</li></ul><p>自动配置类通常使用 <code>@ConditionalOnClass</code>、<code>@ConditionalOnMissingBean</code>、<code>@ConditionalOnProperty</code> 等条件注解，来控制自动加载的触发条件。</p><details class="hint-container details"><summary>KafkaAutoConfiguration 示例</summary><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token class-name">KafkaTemplate</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">KafkaProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">KafkaAnnotationDrivenConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">KafkaStreamsAnnotationDrivenConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KafkaAutoConfiguration</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">KafkaProperties</span> properties<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RecordMessageConverter</span> messageConverter<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">KafkaAutoConfiguration</span><span class="token punctuation">(</span><span class="token class-name">KafkaProperties</span> properties<span class="token punctuation">,</span> <span class="token class-name">ObjectProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RecordMessageConverter</span><span class="token punctuation">&gt;</span></span> messageConverter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">this</span><span class="token punctuation">.</span>properties <span class="token operator">=</span> properties<span class="token punctuation">;</span>
       <span class="token keyword">this</span><span class="token punctuation">.</span>messageConverter <span class="token operator">=</span> messageConverter<span class="token punctuation">.</span><span class="token function">getIfUnique</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">KafkaTemplate</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">KafkaTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">kafkaTemplate</span><span class="token punctuation">(</span><span class="token class-name">ProducerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> kafkaProducerFactory<span class="token punctuation">,</span>
          <span class="token class-name">ProducerListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> kafkaProducerListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token class-name">KafkaTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> kafkaTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>kafkaProducerFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>messageConverter <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          kafkaTemplate<span class="token punctuation">.</span><span class="token function">setMessageConverter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>messageConverter<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
       kafkaTemplate<span class="token punctuation">.</span><span class="token function">setProducerListener</span><span class="token punctuation">(</span>kafkaProducerListener<span class="token punctuation">)</span><span class="token punctuation">;</span>
       kafkaTemplate<span class="token punctuation">.</span><span class="token function">setDefaultTopic</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">getTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDefaultTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">return</span> kafkaTemplate<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">ProducerListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ProducerListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">kafkaProducerListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LoggingProducerListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">ConsumerFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ConsumerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">kafkaConsumerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultKafkaConsumerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">buildConsumerProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">ProducerFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ProducerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">kafkaProducerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token class-name">DefaultKafkaProducerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultKafkaProducerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>
             <span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">buildProducerProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token class-name">String</span> transactionIdPrefix <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">getProducer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTransactionIdPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span>transactionIdPrefix <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          factory<span class="token punctuation">.</span><span class="token function">setTransactionIdPrefix</span><span class="token punctuation">(</span>transactionIdPrefix<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
       <span class="token keyword">return</span> factory<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;spring.kafka.producer.transaction-id-prefix&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>
    <span class="token keyword">public</span> <span class="token class-name">KafkaTransactionManager</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">kafkaTransactionManager</span><span class="token punctuation">(</span><span class="token class-name">ProducerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> producerFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">KafkaTransactionManager</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>producerFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;spring.kafka.jaas.enabled&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>
    <span class="token keyword">public</span> <span class="token class-name">KafkaJaasLoginModuleInitializer</span> <span class="token function">kafkaJaasInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
       <span class="token class-name">KafkaJaasLoginModuleInitializer</span> jaas <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaJaasLoginModuleInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token class-name">Jaas</span> jaasProperties <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">getJaas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span>jaasProperties<span class="token punctuation">.</span><span class="token function">getControlFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          jaas<span class="token punctuation">.</span><span class="token function">setControlFlag</span><span class="token punctuation">(</span>jaasProperties<span class="token punctuation">.</span><span class="token function">getControlFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span>jaasProperties<span class="token punctuation">.</span><span class="token function">getLoginModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          jaas<span class="token punctuation">.</span><span class="token function">setLoginModule</span><span class="token punctuation">(</span>jaasProperties<span class="token punctuation">.</span><span class="token function">getLoginModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
       jaas<span class="token punctuation">.</span><span class="token function">setOptions</span><span class="token punctuation">(</span>jaasProperties<span class="token punctuation">.</span><span class="token function">getOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">return</span> jaas<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>
    <span class="token keyword">public</span> <span class="token class-name">KafkaAdmin</span> <span class="token function">kafkaAdmin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token class-name">KafkaAdmin</span> kafkaAdmin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaAdmin</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">buildAdminProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       kafkaAdmin<span class="token punctuation">.</span><span class="token function">setFatalIfBrokerNotAvailable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">getAdmin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isFailFast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">return</span> kafkaAdmin<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h4 id="自动配置简化流程" tabindex="-1"><a class="header-anchor" href="#自动配置简化流程" aria-hidden="true">#</a> 自动配置简化流程</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>@SpringBootApplication -&gt; @EnableAutoConfiguration -&gt; @Import({AutoConfigurationImportSelector.class}) -&gt; 扫描 META-INF/spring.factories 文件 -&gt; 自动加载文件中的配置 -&gt; XXXAutoConfiguration 中根据 @ConditionalOnXXX 按需加载
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="【中等】springboot-是如何通过-main-方法启动-web-项目的-🌟" tabindex="-1"><a class="header-anchor" href="#【中等】springboot-是如何通过-main-方法启动-web-项目的-🌟" aria-hidden="true">#</a> 【中等】SpringBoot 是如何通过 main 方法启动 web 项目的？🌟</h3><p>Spring Boot 应用的启动流程都封装在 <code>SpringApplication.run</code> 方法中，它的大部分逻辑都是复用 Spring 启动的流程，只不过在它的基础上做了大量的扩展。</p><p>在启动的过程中有一个刷新上下文的动作，这个方法内会触发 webServer 的创建，此时就会创建并启动内嵌的 web 服务，默认的 web 服务就是 Tomcat。</p><p>Spring Boot 的启动过程几个核心步骤：</p><ol><li><strong><code>SpringApplication.run()</code></strong>：这是启动的入口，它会创建 Spring 应用上下文，并执行自动配置。</li><li><strong>创建应用上下文</strong>：为 Web 应用创建 <code>AnnotationConfigServletWebServerApplicationContext</code> 上下文。</li><li><strong>启动内嵌 Web 服务器</strong>：在 <code>refreshContext()</code> 阶段启动内嵌的 Web 服务器（如 Tomcat）。</li><li><strong>自动配置</strong>：通过 <code>@EnableAutoConfiguration</code> 自动配置各种组件，如 <code>DispatcherServlet</code>。</li><li><strong>请求处理</strong>：内嵌的 <code>DispatcherServlet</code> 负责处理 HTTP 请求。</li></ol><h3 id="【困难】springboot-的启动流程是如何设计的-🌟🌟🌟" tabindex="-1"><a class="header-anchor" href="#【困难】springboot-的启动流程是如何设计的-🌟🌟🌟" aria-hidden="true">#</a> 【困难】SpringBoot 的启动流程是如何设计的？🌟🌟🌟</h3><p>Spring Boot 启动流程大致分为六个关键阶段。</p><h4 id="实例化-springapplication" tabindex="-1"><a class="header-anchor" href="#实例化-springapplication" aria-hidden="true">#</a> 实例化 SpringApplication</h4><ul><li><strong>推断应用类型</strong>（Servlet、Reactive、None）。</li><li><strong>加载扩展</strong>：从 <code>META-INF/spring.factories</code> 加载 <code>ApplicationContextInitializer</code> 和 <code>ApplicationListener</code>。</li></ul><h4 id="运行-run-方法" tabindex="-1"><a class="header-anchor" href="#运行-run-方法" aria-hidden="true">#</a> 运行 <code>run()</code> 方法</h4><ul><li>启动计时器，记录应用启动耗时。</li><li>发布第一个事件：<strong><code>ApplicationStartingEvent</code></strong>。</li></ul><h4 id="准备环境" tabindex="-1"><a class="header-anchor" href="#准备环境" aria-hidden="true">#</a> 准备环境</h4><ul><li>创建并配置环境，整合命令行参数、配置文件（<code>application.properties</code>）、系统属性等。</li><li>发布 <strong><code>ApplicationEnvironmentPreparedEvent</code></strong> 事件（触发配置文件的加载）。</li></ul><h4 id="创建应用上下文-applicationcontext" tabindex="-1"><a class="header-anchor" href="#创建应用上下文-applicationcontext" aria-hidden="true">#</a> 创建应用上下文 (ApplicationContext)</h4><ul><li>根据应用类型创建对应的 <code>ApplicationContext</code>（如 <code>AnnotationConfigServletWebServerApplicationContext</code>）。</li><li>将环境设置到上下文中，并执行 <code>ApplicationContextInitializer</code>。</li></ul><h4 id="刷新应用上下文" tabindex="-1"><a class="header-anchor" href="#刷新应用上下文" aria-hidden="true">#</a> 刷新应用上下文</h4><ol><li><strong>准备 BeanFactory</strong>。</li><li><strong>执行 BeanFactoryPostProcessor</strong>：核心为 <strong><code>ConfigurationClassPostProcessor</code></strong>，负责解析 <code>@Configuration</code>、<code>@ComponentScan</code> 和 <strong><code>@EnableAutoConfiguration</code>（自动配置的入口）</strong>。</li><li><strong>注册 BeanPostProcessor</strong>（负责依赖注入 <code>@Autowired</code>、AOP 等）。</li><li><strong>onRefresh() 方法（Spring Boot 精华）</strong>：<strong>创建并启动内嵌的 Web 服务器</strong>（如 Tomcat）。</li><li><strong>完成 BeanFactory 初始化</strong>：<strong>实例化所有非懒加载的单例 Bean</strong>（调用所有 <code>BeanPostProcessor</code>，完成依赖注入和初始化）。</li></ol><h4 id="发布事件与执行-runner" tabindex="-1"><a class="header-anchor" href="#发布事件与执行-runner" aria-hidden="true">#</a> 发布事件与执行 Runner</h4><ul><li>发布最终事件 <strong><code>ApplicationReadyEvent</code></strong>（表示应用已完全就绪）。</li><li>执行所有 <strong><code>CommandLineRunner</code></strong> 和 <strong><code>ApplicationRunner</code></strong> 接口的实现，进行启动后初始化。</li></ul><h4 id="设计思想总结" tabindex="-1"><a class="header-anchor" href="#设计思想总结" aria-hidden="true">#</a> 设计思想总结</h4><ul><li><strong>事件驱动</strong>：通过发布一系列事件，将启动过程解耦，允许开发者监听并介入特定阶段。</li><li><strong>工厂加载机制 (SPI)</strong>：通过 <code>META-INF/spring.factories</code> 文件自动加载配置和组件，实现<strong>约定优于配置</strong>。</li><li><strong>钩子方法</strong>：提供大量扩展点（如 <code>*Aware</code>, <code>*Processor</code>, <code>*Runner</code> 接口），方便定制。</li><li><strong>内嵌服务器</strong>：在刷新上下文的 <code>onRefresh()</code> 钩子中启动 Web 服务器，这是独立运行（<code>java -jar</code>）的基石。</li></ul><h3 id="【困难】如何自定义一个-starter-包-🌟🌟🌟" tabindex="-1"><a class="header-anchor" href="#【困难】如何自定义一个-starter-包-🌟🌟🌟" aria-hidden="true">#</a> 【困难】如何自定义一个 starter 包？🌟🌟🌟</h3><h4 id="创建自动配置类" tabindex="-1"><a class="header-anchor" href="#创建自动配置类" aria-hidden="true">#</a> 创建自动配置类</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">MyServiceProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment">// 启用属性配置绑定</span>
<span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token class-name">MyService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment">// 条件 1: 当类路径下存在 MyService 类时生效</span>
<span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;my.service&quot;</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">&quot;enabled&quot;</span><span class="token punctuation">,</span> havingValue <span class="token operator">=</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">,</span> matchIfMissing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// 条件 2: 当配置文件中 my.service.enabled=true 时生效（默认 true）</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServiceAutoConfiguration</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">MyServiceProperties</span> properties<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@ConditionalOnMissingBean</span> <span class="token comment">// 关键条件：只有当用户没有自己配置 MyService 这个 Bean 时，才生效</span>
    <span class="token keyword">public</span> <span class="token class-name">MyService</span> <span class="token function">myService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyService</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> properties<span class="token punctuation">.</span><span class="token function">getSuffix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：</p><ul><li><code>@ConditionalOnClass(MyService.class)</code>：只有当 <code>MyService</code> 类在类路径下可用时（即你的 starter 被引入了），这个自动配置才应该生效。</li><li><code>@ConditionalOnProperty</code>：允许用户通过配置文件（<code>application.properties</code>）来控制自动配置是否开启。</li><li><code>@ConditionalOnMissingBean</code>：<strong>这是最重要的条件</strong>。它表示只有当用户没有在他们的自己的 <code>@Configuration</code> 类中手动声明 <code>MyService</code> Bean 时，这个自动配置才会执行。这确保了用户的自定义配置可以<strong>覆盖</strong>你的自动配置。</li></ul><h4 id="创建属性配置类" tabindex="-1"><a class="header-anchor" href="#创建属性配置类" aria-hidden="true">#</a> 创建属性配置类</h4><p>为了让用户能够通过 <code>application.properties</code> 文件来自定义行为，需要创建一个属性类。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;my.service&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 绑定配置文件中以 my.service 为前缀的属性</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServiceProperties</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> prefix <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 默认值</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> suffix <span class="token operator">=</span> <span class="token string">&quot;!&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">// 省略 getter 和 setter</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="注册自动配置类" tabindex="-1"><a class="header-anchor" href="#注册自动配置类" aria-hidden="true">#</a> 注册自动配置类</h4><p>为了让 Spring Boot 发现自定义的自动配置类，需要在 Jar 包的 <code>resources</code> 目录下创建一个特定的文件：</p><p><strong>文件位置：</strong> <code>src/main/resources/META-INF/spring.factories</code></p><p><strong>文件内容：</strong></p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span><span class="token punctuation">=</span><span class="token value attr-value">\\
com.yourcompany.autoconfig.MyServiceAutoConfiguration</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Spring Boot 在启动时会扫描所有 Jar 包中的这个文件，并将列出的类作为候选自动配置类进行加载和条件判断。</p><h4 id="创建自定义-starter" tabindex="-1"><a class="header-anchor" href="#创建自定义-starter" aria-hidden="true">#</a> 创建自定义 Starter</h4><p>一个完整的“自动配置”通常会打包成一个 <strong>Starter</strong>。Starter 的本质是一个空的 Maven 项目，它只做两件事：</p><ol><li>提供 <code>pom.xml</code>，管理相关依赖。</li><li>提供 <code>META-INF/spring.factories</code> 文件，注册自动配置类。</li></ol><p><strong>Starter 项目的结构</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>my-spring-boot-starter
├── src
│   └── main
│       ├── java
│       │   └── com
│       │       └── yourcompany
│       │           ├── MyService.java
│       │           ├── MyServiceProperties.java
│       │           └── autoconfig
│       │               └── MyServiceAutoConfiguration.java
│       └── resources
│           └── META-INF
│               ├── spring.factories # 注册自动配置
│               └── additional-spring-configuration-metadata.json # 可选：为属性提供元数据提示
└── pom.xml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Starter 的 <code>pom.xml</code> 关键点：</strong></p><ul><li><strong>依赖</strong>：只包含你的自动配置模块和它所必需的第三方库。</li><li><strong>不包含</strong>：通常不包含 Spring Boot 的启动器（如 <code>spring-boot-starter</code>），而是让使用者去引入，这避免了依赖版本冲突。</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 注意：这里通常不指定版本，由使用者项目的 Spring Boot Parent 决定 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 你的核心服务模块 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.yourcompany<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>my-service-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="提供元数据提示-可选" tabindex="-1"><a class="header-anchor" href="#提供元数据提示-可选" aria-hidden="true">#</a> 提供元数据提示（可选）</h4><p>为了让用户在配置 <code>application.properties</code> 时能有代码提示和自动完成，可以创建一个 <code>additional-spring-configuration-metadata.json</code> 文件。</p><p><strong>文件位置：</strong> <code>src/main/resources/META-INF/additional-spring-configuration-metadata.json</code></p><p><strong>文件内容：</strong></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;properties&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;my.service.enabled&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;java.lang.Boolean&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Whether to enable the MyService auto-configuration.&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;defaultValue&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;my.service.prefix&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;java.lang.String&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;The prefix to use for the service.&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;defaultValue&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Hello&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;my.service.suffix&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;java.lang.String&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;The suffix to use for the service.&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;defaultValue&quot;</span><span class="token operator">:</span> <span class="token string">&quot;!&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>spring-boot-configuration-processor</code> 依赖会在项目编译时自动生成这部分元数据。</p><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料" aria-hidden="true">#</a> 资料</h2>`,85),r={href:"https://www.mianshiya.com/bank/1790683494127804418",target:"_blank",rel:"noopener noreferrer"};function d(k,v){const a=t("ExternalLinkIcon");return o(),e("div",null,[u,n("ul",null,[n("li",null,[n("a",r,[p("面试鸭 - SpringBoot 面试"),i(a)])])])])}const b=s(l,[["render",d],["__file","index.html.vue"]]);export{b as default};
