const e=JSON.parse('{"key":"v-44ed3c90","path":"/pages/59eefc2d/","title":"系统架构面试","lang":"zh-CN","frontmatter":{"title":"系统架构面试","date":"2020-08-10T10:59:18.000Z","order":1,"permalink":"/pages/59eefc2d/","category":["设计","架构","综合"],"tag":["架构","面试"],"description":"系统架构面试 如何设计一个秒杀系统？ 秒杀系统的挑战 秒杀的核心问题就是极高并发处理，由于系统要在瞬时承受平时数十倍甚至上百倍的流量，这往往超出系统上限，因此处理秒杀的核心思路是限流和缓存。 秒杀系统的解决思路 系统上有拦截流量：尽可能在上游拦截和限制请求，限制流入后端的量，保证后端系统正常。 因为无论多少人参与秒杀，实际成交往往是有限的，而且远小于参加秒杀的人数，因此可以通过前端系统进行拦截，限制最终流入系统的请求数量，来保证系统正常进行。 充分利用缓存：这是一个典型的读多写少的应用场景（一趟火车其实只有 2000 张票，200w 个人来买，最多 2000 个人下单成功，其他人都是查询库存，写比例只有 0.1%，读比例占 99.9%），非常适合使用缓存。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/59eefc2d/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"系统架构面试"}],["meta",{"property":"og:description","content":"系统架构面试 如何设计一个秒杀系统？ 秒杀系统的挑战 秒杀的核心问题就是极高并发处理，由于系统要在瞬时承受平时数十倍甚至上百倍的流量，这往往超出系统上限，因此处理秒杀的核心思路是限流和缓存。 秒杀系统的解决思路 系统上有拦截流量：尽可能在上游拦截和限制请求，限制流入后端的量，保证后端系统正常。 因为无论多少人参与秒杀，实际成交往往是有限的，而且远小于参加秒杀的人数，因此可以通过前端系统进行拦截，限制最终流入系统的请求数量，来保证系统正常进行。 充分利用缓存：这是一个典型的读多写少的应用场景（一趟火车其实只有 2000 张票，200w 个人来买，最多 2000 个人下单成功，其他人都是查询库存，写比例只有 0.1%，读比例占 99.9%），非常适合使用缓存。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-18T15:46:22.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"架构"}],["meta",{"property":"article:tag","content":"面试"}],["meta",{"property":"article:published_time","content":"2020-08-10T10:59:18.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-18T15:46:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"系统架构面试\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-08-10T10:59:18.000Z\\",\\"dateModified\\":\\"2024-06-18T15:46:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"如何设计一个秒杀系统？","slug":"如何设计一个秒杀系统","link":"#如何设计一个秒杀系统","children":[{"level":3,"title":"秒杀系统的挑战","slug":"秒杀系统的挑战","link":"#秒杀系统的挑战","children":[]},{"level":3,"title":"秒杀系统的解决思路","slug":"秒杀系统的解决思路","link":"#秒杀系统的解决思路","children":[]},{"level":3,"title":"秒杀系统的解决方案","slug":"秒杀系统的解决方案","link":"#秒杀系统的解决方案","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1654694926000,"updatedTime":1718725582000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":4}]},"readingTime":{"minutes":2.89,"words":867},"filePathRelative":"03.设计/01.架构/00.综合/01.系统架构面试.md","localizedDate":"2020年8月10日","excerpt":"<h1> 系统架构面试</h1>\\n<h2> 如何设计一个秒杀系统？</h2>\\n<h3> 秒杀系统的挑战</h3>\\n<p>秒杀的核心问题就是<strong>极高并发处理</strong>，由于系统要在瞬时承受平时数十倍甚至上百倍的流量，这往往超出系统上限，因此处理秒杀的<strong>核心思路是限流和缓存</strong>。</p>\\n<h3> 秒杀系统的解决思路</h3>\\n<ul>\\n<li>系统上有拦截流量：尽可能在上游拦截和限制请求，限制流入后端的量，保证后端系统正常。 因为无论多少人参与秒杀，实际成交往往是有限的，而且远小于参加秒杀的人数，因此可以通过前端系统进行拦截，限制最终流入系统的请求数量，来保证系统正常进行。</li>\\n<li>充分利用缓存：这是一个典型的读多写少的应用场景（一趟火车其实只有 2000 张票，200w 个人来买，最多 2000 个人下单成功，其他人都是查询库存，写比例只有 0.1%，读比例占 99.9%），非常适合使用缓存。</li>\\n</ul>","autoDesc":true}');export{e as data};
