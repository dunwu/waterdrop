import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as r,c as i,a as e,d as t,b as o,e as n}from"./app-af13b01d.js";const d={},s=n('<h1 id="hbase-数据模型" tabindex="-1"><a class="header-anchor" href="#hbase-数据模型" aria-hidden="true">#</a> HBase 数据模型</h1><p>HBase 是一个面向 <code>列</code> 的数据库管理系统，这里更为确切的而说，HBase 是一个面向 <code>列族</code> 的数据库管理系统。表 schema 仅定义列族，表具有多个列族，每个列族可以包含任意数量的列，列由多个单元格（cell）组成，单元格可以存储多个版本的数据，多个版本数据以时间戳进行区分。</p><h2 id="hbase-逻辑存储结构" tabindex="-1"><a class="header-anchor" href="#hbase-逻辑存储结构" aria-hidden="true">#</a> HBase 逻辑存储结构</h2><ul><li><strong><code>Table</code></strong>：Table 由 Row 和 Column 组成。</li><li><strong><code>Row</code></strong>：Row 是列族（Column Family）的集合。</li><li><strong><code>Row Key</code></strong>：<strong><code>Row Key</code> 是用来检索记录的主键</strong>。 <ul><li><code>Row Key</code> 是未解释的字节数组，所以理论上，任何数据都可以通过序列化表示成字符串或二进制，从而存为 HBase 的键值。</li><li>表中的行，是按照 <code>Row Key</code> 的字典序进行排序。这里需要注意以下两点： <ul><li>因为字典序对 Int 排序的结果是 1,10,100,11,12,13,14,15,16,17,18,19,2,20,21,…,9,91,92,93,94,95,96,97,98,99。如果你使用整型的字符串作为行键，那么为了保持整型的自然序，行键必须用 0 作左填充。</li><li>行的一次读写操作是原子性的 (不论一次读写多少列)。</li></ul></li><li>所有对表的访问都要通过 Row Key，有以下三种方式： <ul><li>通过指定的 <code>Row Key</code> 进行访问；</li><li>通过 <code>Row Key</code> 的 range 进行访问，即访问指定范围内的行；</li><li>进行全表扫描。</li></ul></li></ul></li><li><strong><code>Column Family</code></strong>：即列族。HBase 表中的每个列，都归属于某个列族。列族是表的 Schema 的一部分，所以列族需要在创建表时进行定义。 <ul><li>一个表的列族必须作为表模式定义的一部分预先给出，但是新的列族成员可以随后按需加入。</li><li>同一个列族的所有成员具有相同的前缀，例如 <code>info:format</code>，<code>info:geo</code> 都属于 <code>info</code> 这个列族。</li></ul></li><li><strong><code>Column Qualifier</code></strong>：列限定符。可以理解为是具体的列名，例如 <code>info:format</code>，<code>info:geo</code> 都属于 <code>info</code> 这个列族，它们的列限定符分别是 <code>format</code> 和 <code>geo</code>。列族和列限定符之间始终以冒号分隔。需要注意的是列限定符不是表 Schema 的一部分，你可以在插入数据的过程中动态创建列。</li><li><strong><code>Column</code></strong>：HBase 中的列由列族和列限定符组成，由 <code>:</code>(冒号) 进行分隔，即一个完整的列名应该表述为 <code>列族名 ：列限定符</code>。</li><li><strong><code>Cell</code></strong>：<code>Cell</code> 是行，列族和列限定符的组合，并包含值和时间戳。HBase 中通过 <code>row key</code> 和 <code>column</code> 确定的为一个存储单元称为 <code>Cell</code>，你可以等价理解为关系型数据库中由指定行和指定列确定的一个单元格，但不同的是 HBase 中的一个单元格是由多个版本的数据组成的，每个版本的数据用时间戳进行区分。 <ul><li><code>Cell</code> 由行和列的坐标交叉决定，是有版本的。默认情况下，版本号是自动分配的，为 HBase 插入 <code>Cell</code> 时的时间戳。<code>Cell</code> 的内容是未解释的字节数组。</li></ul></li><li><strong><code>Timestamp</code></strong>：<code>Cell</code> 的版本通过时间戳来索引，时间戳的类型是 64 位整型，时间戳可以由 HBase 在数据写入时自动赋值，也可以由客户显式指定。每个 <code>Cell</code> 中，不同版本的数据按照时间戳倒序排列，即最新的数据排在最前面。</li></ul><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/bigdata/hbase/1551164224778.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="hbase-物理存储结构" tabindex="-1"><a class="header-anchor" href="#hbase-物理存储结构" aria-hidden="true">#</a> HBase 物理存储结构</h2><p>HBase Table 中的所有行按照 <code>Row Key</code> 的字典序排列。HBase Tables 通过行键的范围 (row key range) 被水平切分成多个 <code>Region</code>, 一个 <code>Region</code> 包含了在 start key 和 end key 之间的所有行。</p>',7),h={href:"https://camo.githubusercontent.com/cd502001e098c6598fbec073a87e28b14e52268c48cc3b24395f252e0c801058/68747470733a2f2f67697465652e636f6d2f68656962616979696e672f426967446174612d4e6f7465732f7261772f6d61737465722f70696374757265732f48426173654172636869746563747572652d426c6f672d466967322e706e67",target:"_blank",rel:"noopener noreferrer"},f=e("img",{src:"https://camo.githubusercontent.com/cd502001e098c6598fbec073a87e28b14e52268c48cc3b24395f252e0c801058/68747470733a2f2f67697465652e636f6d2f68656962616979696e672f426967446174612d4e6f7465732f7261772f6d61737465722f70696374757265732f48426173654172636869746563747572652d426c6f672d466967322e706e67",alt:"img",tabindex:"0",loading:"lazy"},null,-1),u=e("figcaption",null,"img",-1),g=e("p",null,[o("每个表一开始只有一个 "),e("code",null,"Region"),o("，随着数据不断增加，"),e("code",null,"Region"),o(" 会不断增大，当增大到一个阀值的时候，"),e("code",null,"Region"),o(" 就会等分为两个新的 "),e("code",null,"Region"),o("。当 Table 中的行不断增多，就会有越来越多的 "),e("code",null,"Region"),o("。")],-1),_={href:"https://camo.githubusercontent.com/7a8d87d3896764c25784ea1ceaa3917dc111942e8e869801cf37c4449e7a1a4f/68747470733a2f2f67697465652e636f6d2f68656962616979696e672f426967446174612d4e6f7465732f7261772f6d61737465722f70696374757265732f68626173652d726567696f6e2d73706c6974652e706e67",target:"_blank",rel:"noopener noreferrer"},b=e("img",{src:"https://camo.githubusercontent.com/7a8d87d3896764c25784ea1ceaa3917dc111942e8e869801cf37c4449e7a1a4f/68747470733a2f2f67697465652e636f6d2f68656962616979696e672f426967446174612d4e6f7465732f7261772f6d61737465722f70696374757265732f68626173652d726567696f6e2d73706c6974652e706e67",alt:"img",tabindex:"0",loading:"lazy"},null,-1),m=e("figcaption",null,"img",-1),p=e("p",null,[e("code",null,"Region"),o(" 是 HBase 中"),e("strong",null,"分布式存储和负载均衡的最小单元"),o("。这意味着不同的 "),e("code",null,"Region"),o(" 可以分布在不同的 "),e("code",null,"Region Server"),o(" 上。但一个 "),e("code",null,"Region"),o(" 是不会拆分到多个 Server 上的。")],-1),w={href:"https://camo.githubusercontent.com/f0d7ef92cc299882591d6c09b465620d0ada3ab6038759d41e8243ff5bed6aa8/68747470733a2f2f67697465652e636f6d2f68656962616979696e672f426967446174612d4e6f7465732f7261772f6d61737465722f70696374757265732f68626173652d726567696f6e2d6469732e706e67",target:"_blank",rel:"noopener noreferrer"},B=e("img",{src:"https://camo.githubusercontent.com/f0d7ef92cc299882591d6c09b465620d0ada3ab6038759d41e8243ff5bed6aa8/68747470733a2f2f67697465652e636f6d2f68656962616979696e672f426967446174612d4e6f7465732f7261772f6d61737465722f70696374757265732f68626173652d726567696f6e2d6469732e706e67",alt:"img",tabindex:"0",loading:"lazy"},null,-1),k=e("figcaption",null,"img",-1),y=e("h2",{id:"hbase-数据模型示例",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#hbase-数据模型示例","aria-hidden":"true"},"#"),o(" HBase 数据模型示例")],-1),H=e("p",null,"下图为 HBase 中一张表的：",-1),R=e("ul",null,[e("li",null,"RowKey 为行的唯一标识，所有行按照 RowKey 的字典序进行排序；"),e("li",null,"该表具有两个列族，分别是 personal 和 office;"),e("li",null,"其中列族 personal 拥有 name、city、phone 三个列，列族 office 拥有 tel、addres 两个列。")],-1),x=e("figure",null,[e("img",{src:"https://raw.githubusercontent.com/dunwu/images/master/snap/20200601172926.png",alt:"img",tabindex:"0",loading:"lazy"}),e("figcaption",null,"img")],-1),C=e("em",null,"图片引用自 : HBase 是列式存储数据库吗",-1),K={href:"https://www.iteblog.com/archives/2498.html",target:"_blank",rel:"noopener noreferrer"},v=n('<h2 id="hbase-表特性" tabindex="-1"><a class="header-anchor" href="#hbase-表特性" aria-hidden="true">#</a> HBase 表特性</h2><p>Hbase 的表具有以下特点：</p><ul><li><strong>容量大</strong>：一个表可以有数十亿行，上百万列；</li><li><strong>面向列</strong>：数据是按照列存储，每一列都单独存放，数据即索引，在查询时可以只访问指定列的数据，有效地降低了系统的 I/O 负担；</li><li><strong>稀疏性</strong>：空 (null) 列并不占用存储空间，表可以设计的非常稀疏 ；</li><li><strong>数据多版本</strong>：每个单元中的数据可以有多个版本，按照时间戳排序，新的数据在最上面；</li><li><strong>存储类型</strong>：所有数据的底层存储格式都是字节数组 (byte[])。</li></ul><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>',4),S=e("strong",null,"官方",-1),z={href:"http://hbase.apache.org/",target:"_blank",rel:"noopener noreferrer"},N={href:"https://hbase.apache.org/book.html",target:"_blank",rel:"noopener noreferrer"},T={href:"http://abloz.com/hbase/book.html",target:"_blank",rel:"noopener noreferrer"},D=e("strong",null,"书籍",-1),I={href:"https://book.douban.com/subject/27600204/",target:"_blank",rel:"noopener noreferrer"},V=e("strong",null,"文章",-1),A={href:"https://static.googleusercontent.com/media/research.google.com/zh-CN//archive/bigtable-osdi06.pdf",target:"_blank",rel:"noopener noreferrer"},E={href:"https://mapr.com/blog/in-depth-look-hbase-architecture",target:"_blank",rel:"noopener noreferrer"},L=e("strong",null,"教程",-1),F={href:"https://github.com/heibaiying/BigData-Notes",target:"_blank",rel:"noopener noreferrer"},j={href:"https://www.cloudduggu.com/hbase/introduction/",target:"_blank",rel:"noopener noreferrer"};function q(O,Q){const l=c("ExternalLinkIcon");return r(),i("div",null,[s,e("figure",null,[e("a",h,[f,t(l)]),u]),g,e("figure",null,[e("a",_,[b,t(l)]),m]),p,e("figure",null,[e("a",w,[B,t(l)]),k]),y,H,R,x,e("blockquote",null,[e("p",null,[C,o(),e("em",null,[e("a",K,[o("https://www.iteblog.com/archives/2498.html"),t(l)])])])]),v,e("ul",null,[e("li",null,[S,e("ul",null,[e("li",null,[e("a",z,[o("HBase 官网"),t(l)])]),e("li",null,[e("a",N,[o("HBase 官方文档"),t(l)])]),e("li",null,[e("a",T,[o("HBase 官方文档中文版"),t(l)])])])]),e("li",null,[D,e("ul",null,[e("li",null,[e("a",I,[o("Hadoop 权威指南"),t(l)])])])]),e("li",null,[V,e("ul",null,[e("li",null,[e("a",A,[o("Bigtable: A Distributed Storage System for Structured Data"),t(l)])]),e("li",null,[e("a",E,[o("An In-Depth Look at the HBase Architecture"),t(l)])])])]),e("li",null,[L,e("ul",null,[e("li",null,[e("a",F,[o("https://github.com/heibaiying/BigData-Notes"),t(l)])]),e("li",null,[e("a",j,[o("https://www.cloudduggu.com/hbase/introduction/"),t(l)])])])])])])}const M=a(d,[["render",q],["__file","index.html.vue"]]);export{M as default};
