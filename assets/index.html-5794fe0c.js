const e=JSON.parse('{"key":"v-d42ab2e0","path":"/pages/d6050bd6/","title":"设计模式之策略模式","lang":"zh-CN","frontmatter":{"title":"设计模式之策略模式","date":"2015-01-22T16:14:00.000Z","order":22,"permalink":"/pages/d6050bd6/","category":["设计","设计模式"],"tag":["设计","设计模式"],"description":"设计模式之策略模式 意图 策略模式（Strategy） 是一种行为设计模式， 它能让你定义一系列算法， 并将每种算法分别放入独立的类中， 以使算法的对象能够相互替换。 适用场景 当你想使用对象中各种不同的算法变体， 并希望能在运行时切换算法时， 可使用策略模式。 当你有许多仅在执行某些行为时略有不同的相似类时， 可使用策略模式。 如果算法在上下文的逻辑中不是特别重要， 使用该模式能将类的业务逻辑与其算法实现细节隔离开来。 当类中使用了复杂条件运算符以在同一算法的不同变体中切换时， 可使用该模式。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/d6050bd6/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"设计模式之策略模式"}],["meta",{"property":"og:description","content":"设计模式之策略模式 意图 策略模式（Strategy） 是一种行为设计模式， 它能让你定义一系列算法， 并将每种算法分别放入独立的类中， 以使算法的对象能够相互替换。 适用场景 当你想使用对象中各种不同的算法变体， 并希望能在运行时切换算法时， 可使用策略模式。 当你有许多仅在执行某些行为时略有不同的相似类时， 可使用策略模式。 如果算法在上下文的逻辑中不是特别重要， 使用该模式能将类的业务逻辑与其算法实现细节隔离开来。 当类中使用了复杂条件运算符以在同一算法的不同变体中切换时， 可使用该模式。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-14T13:48:12.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"设计"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2015-01-22T16:14:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-14T13:48:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式之策略模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2015-01-22T16:14:00.000Z\\",\\"dateModified\\":\\"2025-09-14T13:48:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"意图","slug":"意图","link":"#意图","children":[]},{"level":2,"title":"适用场景","slug":"适用场景","link":"#适用场景","children":[]},{"level":2,"title":"结构","slug":"结构","link":"#结构","children":[{"level":3,"title":"结构说明","slug":"结构说明","link":"#结构说明","children":[]},{"level":3,"title":"结构代码范式","slug":"结构代码范式","link":"#结构代码范式","children":[]}]},{"level":2,"title":"伪代码","slug":"伪代码","link":"#伪代码","children":[]},{"level":2,"title":"案例","slug":"案例","link":"#案例","children":[]},{"level":2,"title":"与其他模式的关系","slug":"与其他模式的关系","link":"#与其他模式的关系","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1757857692000,"updatedTime":1757857692000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":1}]},"readingTime":{"minutes":6.23,"words":1868},"filePathRelative":"03.设计/设计模式/策略模式.md","localizedDate":"2015年1月22日","excerpt":"<h1> 设计模式之策略模式</h1>\\n<h2> 意图</h2>\\n<p><strong>策略模式</strong>（Strategy） 是一种行为设计模式， 它能让你定义一系列算法， 并将每种算法分别放入独立的类中， 以使算法的对象能够相互替换。</p>\\n<h2> 适用场景</h2>\\n<ul>\\n<li>当你想使用对象中各种不同的算法变体， 并希望能在运行时切换算法时， 可使用策略模式。</li>\\n<li>当你有许多仅在执行某些行为时略有不同的相似类时， 可使用策略模式。</li>\\n<li>如果算法在上下文的逻辑中不是特别重要， 使用该模式能将类的业务逻辑与其算法实现细节隔离开来。</li>\\n<li>当类中使用了复杂条件运算符以在同一算法的不同变体中切换时， 可使用该模式。</li>\\n</ul>","autoDesc":true}');export{e as data};
