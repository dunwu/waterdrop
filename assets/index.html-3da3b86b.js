const t=JSON.parse('{"key":"v-b0d9e1c8","path":"/pages/bef3ae94/","title":"Hystrix 快速入门","lang":"zh-CN","frontmatter":{"title":"Hystrix 快速入门","date":"2022-02-17T22:34:30.000Z","order":1,"permalink":"/pages/bef3ae94/","category":["Java","中间件","流量控制"],"tag":["Java","中间件","流量控制","Hystrix"],"description":"Hystrix 快速入门 Hystrix 简介 Hystrix 是什么 Hystrix 是由 Netflix 开源，用于处理分布式系统的延迟和容错的一个开源组件。在分布式系统里，许多依赖不可避免的会调用失败，比如超时、异常等。Hystrix 采用断路器模式来实现服务间的彼此隔离，从而避免级联故障，以提高分布式系统整体的弹性。 “断路器”本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控（类似熔断保险丝），向调用方返回一个符合预期的、可处理的备选响应（FallBack），而不是长时间的等待或者抛出调用方无法处理的异常，这样就保证了服务调用方的线程不会被长时间、不必要地占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/bef3ae94/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"Hystrix 快速入门"}],["meta",{"property":"og:description","content":"Hystrix 快速入门 Hystrix 简介 Hystrix 是什么 Hystrix 是由 Netflix 开源，用于处理分布式系统的延迟和容错的一个开源组件。在分布式系统里，许多依赖不可避免的会调用失败，比如超时、异常等。Hystrix 采用断路器模式来实现服务间的彼此隔离，从而避免级联故障，以提高分布式系统整体的弹性。 “断路器”本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控（类似熔断保险丝），向调用方返回一个符合预期的、可处理的备选响应（FallBack），而不是长时间的等待或者抛出调用方无法处理的异常，这样就保证了服务调用方的线程不会被长时间、不必要地占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-18T15:46:22.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"中间件"}],["meta",{"property":"article:tag","content":"流量控制"}],["meta",{"property":"article:tag","content":"Hystrix"}],["meta",{"property":"article:published_time","content":"2022-02-17T22:34:30.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-18T15:46:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Hystrix 快速入门\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-02-17T22:34:30.000Z\\",\\"dateModified\\":\\"2024-06-18T15:46:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"Hystrix 简介","slug":"hystrix-简介","link":"#hystrix-简介","children":[{"level":3,"title":"Hystrix 是什么","slug":"hystrix-是什么","link":"#hystrix-是什么","children":[]},{"level":3,"title":"为什么需要 Hystrix","slug":"为什么需要-hystrix","link":"#为什么需要-hystrix","children":[]},{"level":3,"title":"Hystrix 的功能","slug":"hystrix-的功能","link":"#hystrix-的功能","children":[]}]},{"level":2,"title":"Hystrix 原理","slug":"hystrix-原理","link":"#hystrix-原理","children":[{"level":3,"title":"（一）构建一个 HystrixCommand 或 HystrixObservableCommand 对象","slug":"一-构建一个-hystrixcommand-或-hystrixobservablecommand-对象","link":"#一-构建一个-hystrixcommand-或-hystrixobservablecommand-对象","children":[]},{"level":3,"title":"（二）执行命令","slug":"二-执行命令","link":"#二-执行命令","children":[]},{"level":3,"title":"（三）是否缓存","slug":"三-是否缓存","link":"#三-是否缓存","children":[]},{"level":3,"title":"（四）是否开启断路器","slug":"四-是否开启断路器","link":"#四-是否开启断路器","children":[]},{"level":3,"title":"（五）信号量、线程池是否拒绝","slug":"五-信号量、线程池是否拒绝","link":"#五-信号量、线程池是否拒绝","children":[]},{"level":3,"title":"（六）construct() 或 run()","slug":"六-construct-或-run","link":"#六-construct-或-run","children":[]},{"level":3,"title":"（七）健康检查","slug":"七-健康检查","link":"#七-健康检查","children":[]},{"level":3,"title":"（八）获取 Fallback","slug":"八-获取-fallback","link":"#八-获取-fallback","children":[]},{"level":3,"title":"（九）返回结果","slug":"九-返回结果","link":"#九-返回结果","children":[]}]},{"level":2,"title":"断路器工作原理","slug":"断路器工作原理","link":"#断路器工作原理","children":[{"level":3,"title":"系统指标","slug":"系统指标","link":"#系统指标","children":[]}]},{"level":2,"title":"资源隔离技术","slug":"资源隔离技术","link":"#资源隔离技术","children":[{"level":3,"title":"线程池隔离","slug":"线程池隔离","link":"#线程池隔离","children":[]},{"level":3,"title":"信号量隔离","slug":"信号量隔离","link":"#信号量隔离","children":[]}]},{"level":2,"title":"Hystrix 应用","slug":"hystrix-应用","link":"#hystrix-应用","children":[]},{"level":2,"title":"Hystrix 配置","slug":"hystrix-配置","link":"#hystrix-配置","children":[{"level":3,"title":"执行配置","slug":"执行配置","link":"#执行配置","children":[]},{"level":3,"title":"断路配置","slug":"断路配置","link":"#断路配置","children":[]},{"level":3,"title":"指标配置","slug":"指标配置","link":"#指标配置","children":[]},{"level":3,"title":"线程池配置","slug":"线程池配置","link":"#线程池配置","children":[]}]},{"level":2,"title":"其他限流技术","slug":"其他限流技术","link":"#其他限流技术","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1655247928000,"updatedTime":1718725582000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":4}]},"readingTime":{"minutes":19.5,"words":5850},"filePathRelative":"01.Java/14.中间件/03.流量控制/01.Hystrix.md","localizedDate":"2022年2月17日","excerpt":"<h1> Hystrix 快速入门</h1>\\n<h2> Hystrix 简介</h2>\\n<h3> Hystrix 是什么</h3>\\n<p>Hystrix 是由 Netflix 开源，用于处理分布式系统的延迟和容错的一个开源组件。在分布式系统里，许多依赖不可避免的会调用失败，比如超时、异常等。Hystrix 采用<strong>断路器模式</strong>来实现服务间的彼此隔离，从而避免级联故障，以提高分布式系统整体的弹性。</p>\\n<p>“断路器”本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控（类似熔断保险丝），<strong>向调用方返回一个符合预期的、可处理的备选响应（FallBack），而不是长时间的等待或者抛出调用方无法处理的异常</strong>，这样就保证了服务调用方的线程不会被长时间、不必要地占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩。</p>","autoDesc":true}');export{t as data};
