import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as a,o as l,c as r,a as t,b as o,d as c,e as n}from"./app-af13b01d.js";const i={},h=n('<h1 id="python-操作符" tabindex="-1"><a class="header-anchor" href="#python-操作符" aria-hidden="true">#</a> Python 操作符</h1><p>Python 语言支持以下类型的运算符:</p><ul><li>算术运算符</li><li>比较（关系）运算符</li><li>赋值运算符</li><li>逻辑运算符</li><li>位运算符</li><li>成员运算符</li><li>身份运算符</li><li>运算符优先级</li></ul><h2 id="算术运算符" tabindex="-1"><a class="header-anchor" href="#算术运算符" aria-hidden="true">#</a> 算术运算符</h2><p>假设变量： <strong>a=10，b=20</strong></p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td><code>+</code></td><td>加 - 两个对象相加</td><td><code>a + b</code> 输出结果 30</td></tr><tr><td><code>-</code></td><td>减 - 得到负数或是一个数减去另一个数</td><td><code>a - b</code> 输出结果 -10</td></tr><tr><td><code>*</code></td><td>乘 - 两个数相乘或是返回一个被重复若干次的字符串</td><td><code>a * b</code> 输出结果 200</td></tr><tr><td><code>/</code></td><td>除 - x 除以 y</td><td><code>b / a</code> 输出结果 2</td></tr><tr><td><code>%</code></td><td>取模 - 返回除法的余数</td><td><code>b % a</code> 输出结果 0</td></tr><tr><td><code>**</code></td><td>幂 - 返回 x 的 y 次幂</td><td><code>a**b</code> 为 10 的 20 次方， 输出结果 100000000000000000000</td></tr><tr><td><code>//</code></td><td>取整除 - 返回商的整数部分</td><td><code>9//2</code> 输出结果 4 , <code>9.0//2.0</code> 输出结果 4.0</td></tr></tbody></table><h2 id="比较运算符" tabindex="-1"><a class="header-anchor" href="#比较运算符" aria-hidden="true">#</a> 比较运算符</h2><p>假设变量： <strong>a=10，b=20</strong></p><table><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">描述</th><th style="text-align:left;">实例</th></tr></thead><tbody><tr><td style="text-align:left;"><code>==</code></td><td style="text-align:left;">等于 - 比较对象是否相等</td><td style="text-align:left;"><code>(a == b)</code> 返回 False。</td></tr><tr><td style="text-align:left;"><code>!=</code></td><td style="text-align:left;">不等于 - 比较两个对象是否不相等</td><td style="text-align:left;">(a != b) 返回 True。</td></tr><tr><td style="text-align:left;"><code>&lt;&gt;</code></td><td style="text-align:left;">不等于 - 比较两个对象是否不相等。<strong>python3 已废弃。</strong></td><td style="text-align:left;"><code>(a &lt;&gt; b)</code> 返回 True。这个运算符类似 != 。</td></tr><tr><td style="text-align:left;"><code>&gt;</code></td><td style="text-align:left;">大于 - 返回 x 是否大于 y</td><td style="text-align:left;"><code>(a &gt; b)</code> 返回 False。</td></tr><tr><td style="text-align:left;"><code>&lt;</code></td><td style="text-align:left;">小于 - 返回 x 是否小于 y。所有比较运算符返回 1 表示真，返回 0 表示假。这分别与特殊的变量 True 和 False 等价。</td><td style="text-align:left;"><code>(a &lt; b)</code> 返回 True。</td></tr><tr><td style="text-align:left;"><code>&gt;=</code></td><td style="text-align:left;">大于等于 - 返回 x 是否大于等于 y。</td><td style="text-align:left;"><code>(a &gt;= b)</code> 返回 False。</td></tr><tr><td style="text-align:left;"><code>&lt;=</code></td><td style="text-align:left;">小于等于 - 返回 x 是否小于等于 y。</td><td style="text-align:left;"><code>(a &lt;= b)</code> 返回 True。</td></tr></tbody></table><h2 id="赋值运算符" tabindex="-1"><a class="header-anchor" href="#赋值运算符" aria-hidden="true">#</a> 赋值运算符</h2><p>假设变量： <strong>a=10，b=20</strong></p><table><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">描述</th><th style="text-align:left;">实例</th></tr></thead><tbody><tr><td style="text-align:left;"><code>=</code></td><td style="text-align:left;">简单的赋值运算符</td><td style="text-align:left;">c = a + b 将 a + b 的运算结果赋值为 c</td></tr><tr><td style="text-align:left;"><code>+=</code></td><td style="text-align:left;">加法赋值运算符</td><td style="text-align:left;"><code>c += a</code> 等效于 <code>c = c + a</code></td></tr><tr><td style="text-align:left;"><code>-=</code></td><td style="text-align:left;">减法赋值运算符</td><td style="text-align:left;"><code>c -= a</code> 等效于 <code>c = c - a</code></td></tr><tr><td style="text-align:left;"><code>*=</code></td><td style="text-align:left;">乘法赋值运算符</td><td style="text-align:left;"><code>c *= a</code> 等效于 <code>c = c * a</code></td></tr><tr><td style="text-align:left;"><code>/=</code></td><td style="text-align:left;">除法赋值运算符</td><td style="text-align:left;"><code>c /= a</code> 等效于 <code>c = c / a</code></td></tr><tr><td style="text-align:left;"><code>%=</code></td><td style="text-align:left;">取模赋值运算符</td><td style="text-align:left;"><code>c %= a</code> 等效于 <code>c = c % a</code></td></tr><tr><td style="text-align:left;"><code>**=</code></td><td style="text-align:left;">幂赋值运算符</td><td style="text-align:left;"><code>c **= a</code> 等效于 <code>c = c ** a</code></td></tr><tr><td style="text-align:left;"><code>//=</code></td><td style="text-align:left;">取整除赋值运算符</td><td style="text-align:left;"><code>c //= a</code> 等效于 <code>c = c // a</code></td></tr></tbody></table><h2 id="位运算符" tabindex="-1"><a class="header-anchor" href="#位运算符" aria-hidden="true">#</a> 位运算符</h2><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与运算符：参与运算的两个值,如果两个相应位都为 1,则该位的结果为 1,否则为 0</td><td>(a &amp; b) 输出结果 12 ，二进制解释： 0000 1100</td></tr><tr><td>|</td><td>按位或运算符：只要对应的二个二进位有一个为 1 时，结果位就为 1。</td><td>(a | b) 输出结果 61 ，二进制解释： 0011 1101</td></tr><tr><td>^</td><td>按位异或运算符：当两对应的二进位相异时，结果为 1</td><td>(a ^ b) 输出结果 49 ，二进制解释： 0011 0001</td></tr><tr><td>~</td><td>按位取反运算符：对数据的每个二进制位取反,即把 1 变为 0,把 0 变为 1</td><td>(~a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。</td></tr><tr><td>&lt;&lt;</td><td>左移动运算符：运算数的各二进位全部左移若干位，由&quot;&lt;&lt;&quot;右边的数指定移动的位数，高位丢弃，低位补 0。</td><td>a &lt;&lt; 2 输出结果 240 ，二进制解释： 1111 0000</td></tr><tr><td>&gt;&gt;</td><td>右移动运算符：把&quot;&gt;&gt;&quot;左边的运算数的各二进位全部右移若干位，&quot;&gt;&gt;&quot;右边的数指定移动的位数</td><td>a &gt;&gt; 2 输出结果 15 ，二进制解释： 0000 1111</td></tr></tbody></table><h2 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符" aria-hidden="true">#</a> 逻辑运算符</h2><table><thead><tr><th>运算符</th><th>逻辑表达式</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>and</td><td>x and y</td><td>布尔&quot;与&quot; - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。</td><td>(a and b) 返回 20。</td></tr><tr><td>or</td><td>x or y</td><td>布尔&quot;或&quot; - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。</td><td>(a or b) 返回 10。</td></tr><tr><td>not</td><td>not x</td><td>布尔&quot;非&quot; - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td><td>not(a and b) 返回 False</td></tr></tbody></table><h2 id="成员运算符" tabindex="-1"><a class="header-anchor" href="#成员运算符" aria-hidden="true">#</a> 成员运算符</h2><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>in</td><td>如果在指定的序列中找到值返回 True，否则返回 False。</td><td>x 在 y 序列中 , 如果 x 在 y 序列中返回 True。</td></tr><tr><td>not in</td><td>如果在指定的序列中没有找到值返回 True，否则返回 False。</td><td>x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。</td></tr></tbody></table><h2 id="身份运算符" tabindex="-1"><a class="header-anchor" href="#身份运算符" aria-hidden="true">#</a> 身份运算符</h2><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>is</td><td>is 是判断两个标识符是不是引用自一个对象</td><td>x is y, 如果 id(x) 等于 id(y) , <strong>is</strong> 返回结果 1</td></tr><tr><td>is not</td><td>is not 是判断两个标识符是不是引用自不同对象</td><td>x is not y, 如果 id(x) 不等于 id(y). <strong>is not</strong> 返回结果 1</td></tr></tbody></table><h2 id="运算符优先级" tabindex="-1"><a class="header-anchor" href="#运算符优先级" aria-hidden="true">#</a> 运算符优先级</h2><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>**</td><td>指数 (最高优先级)</td></tr><tr><td>~ + -</td><td>按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td></tr><tr><td>* / % //</td><td>乘，除，取模和取整除</td></tr><tr><td>+ -</td><td>加法减法</td></tr><tr><td>&gt;&gt; &lt;&lt;</td><td>右移，左移运算符</td></tr><tr><td>&amp;</td><td>位 &#39;AND&#39;</td></tr><tr><td>^ |</td><td>位运算符</td></tr><tr><td>&lt;= &lt; &gt; &gt;=</td><td>比较运算符</td></tr><tr><td>&lt;&gt; == !=</td><td>等于运算符</td></tr><tr><td>= %= /= //= -= += *= **=</td><td>赋值运算符</td></tr><tr><td>is is not</td><td>身份运算符</td></tr><tr><td>in not in</td><td>成员运算符</td></tr><tr><td>not or and</td><td>逻辑运算符</td></tr></tbody></table><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>',23),s={href:"https://www.runoob.com/python/python-tutorial.html",target:"_blank",rel:"noopener noreferrer"};function y(x,g){const d=a("ExternalLinkIcon");return l(),r("div",null,[h,t("ul",null,[t("li",null,[t("a",s,[o("菜鸟-基础教程"),c(d)])])])])}const u=e(i,[["render",y],["__file","index.html.vue"]]);export{u as default};
