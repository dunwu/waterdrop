const e=JSON.parse('{"key":"v-a8c53ac2","path":"/pages/b745bdd8/","title":"复杂度分析","lang":"zh-CN","frontmatter":{"title":"复杂度分析","date":"2022-03-20T23:25:17.000Z","order":2,"permalink":"/pages/b745bdd8/","category":["算法"],"tag":["数据结构","算法"],"description":"复杂度分析 为什么需要复杂度分析 衡量算法的优劣，有两种评估方式：事前估计和后期测试。 后期测试有性能测试、基准测试（Benchmark）等手段。 但是，后期测试有以下限制： 测试结果非常依赖测试环境。如：不同机型、不同编译器版本、不同硬件配置等等，都会影响测试结果。 测试结果受数据规模的影响很大。 所以，需要一种方法，可以不受环境或数据规模的影响，粗略地估计算法的执行效率。这种方法就是复杂度分析。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/b745bdd8/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"复杂度分析"}],["meta",{"property":"og:description","content":"复杂度分析 为什么需要复杂度分析 衡量算法的优劣，有两种评估方式：事前估计和后期测试。 后期测试有性能测试、基准测试（Benchmark）等手段。 但是，后期测试有以下限制： 测试结果非常依赖测试环境。如：不同机型、不同编译器版本、不同硬件配置等等，都会影响测试结果。 测试结果受数据规模的影响很大。 所以，需要一种方法，可以不受环境或数据规模的影响，粗略地估计算法的执行效率。这种方法就是复杂度分析。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-13T15:15:47.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"数据结构"}],["meta",{"property":"article:tag","content":"算法"}],["meta",{"property":"article:published_time","content":"2022-03-20T23:25:17.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-13T15:15:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"复杂度分析\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-03-20T23:25:17.000Z\\",\\"dateModified\\":\\"2025-09-13T15:15:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"为什么需要复杂度分析","slug":"为什么需要复杂度分析","link":"#为什么需要复杂度分析","children":[]},{"level":2,"title":"时间复杂度分析","slug":"时间复杂度分析","link":"#时间复杂度分析","children":[{"level":3,"title":"大 O 表示法","slug":"大-o-表示法","link":"#大-o-表示法","children":[]},{"level":3,"title":"时间复杂度分析的要点","slug":"时间复杂度分析的要点","link":"#时间复杂度分析的要点","children":[]},{"level":3,"title":"最好、最坏和平均情况","slug":"最好、最坏和平均情况","link":"#最好、最坏和平均情况","children":[]},{"level":3,"title":"时间复杂度分析示例","slug":"时间复杂度分析示例","link":"#时间复杂度分析示例","children":[]}]},{"level":2,"title":"空间复杂度分析","slug":"空间复杂度分析","link":"#空间复杂度分析","children":[]},{"level":2,"title":"复杂度量级","slug":"复杂度量级","link":"#复杂度量级","children":[]},{"level":2,"title":"常见数据结构的复杂度","slug":"常见数据结构的复杂度","link":"#常见数据结构的复杂度","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1757776547000,"updatedTime":1757776547000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":1}]},"readingTime":{"minutes":4.01,"words":1203},"filePathRelative":"11.算法/复杂度分析.md","localizedDate":"2022年3月20日","excerpt":"<h1> 复杂度分析</h1>\\n<h2> 为什么需要复杂度分析</h2>\\n<p>衡量算法的优劣，有两种评估方式：事前估计和后期测试。</p>\\n<p>后期测试有性能测试、基准测试（Benchmark）等手段。</p>\\n<p>但是，后期测试有以下限制：</p>\\n<ul>\\n<li><strong>测试结果非常依赖测试环境</strong>。如：不同机型、不同编译器版本、不同硬件配置等等，都会影响测试结果。</li>\\n<li><strong>测试结果受数据规模的影响很大</strong>。</li>\\n</ul>\\n<p>所以，需要一种方法，可以不受环境或数据规模的影响，粗略地估计算法的执行效率。这种方法就是复杂度分析。</p>","autoDesc":true}');export{e as data};
