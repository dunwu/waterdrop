import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as g,c as d,d as o,w as s,a as t,b as n,e as l}from"./app-a70a1432.js";const u={},k=l(`<h1 id="rocketmq-面试" tabindex="-1"><a class="header-anchor" href="#rocketmq-面试" aria-hidden="true">#</a> RocketMQ 面试</h1><h2 id="rocketmq-简介" tabindex="-1"><a class="header-anchor" href="#rocketmq-简介" aria-hidden="true">#</a> RocketMQ 简介</h2><h3 id="【简单】rocketmq-是什么-🌟" tabindex="-1"><a class="header-anchor" href="#【简单】rocketmq-是什么-🌟" aria-hidden="true">#</a> 【简单】RocketMQ 是什么？🌟</h3><p><strong>RocketMQ 是一个开源分布式消息中间件</strong>。最初由阿里巴巴开发，现在是 Apache 顶级项目。</p><div class="hint-container info"><p class="hint-container-title">RocketMQ 核心组件</p></div><table><thead><tr><th style="text-align:left;">组件</th><th style="text-align:left;">功能</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>命名服务（Name Server）</strong></td><td style="text-align:left;">负责管理所有 Broker 的地址信息（路由表），实现服务发现。客户端通过它找到对应的 Broker。<strong>它本身是无状态的，集群间不互相通信</strong>，因此非常简单高效。</td></tr><tr><td style="text-align:left;"><strong>代理（Broker）</strong></td><td style="text-align:left;">RocketMQ 的核心，负责消息的存储、投递和查询。为了保证高可用，通常采用<strong>主从结构</strong>。</td></tr><tr><td style="text-align:left;"><strong>生产者（Producer）</strong></td><td style="text-align:left;">创建并发送消息的客户端。它从 Name Server 获取路由信息，然后将消息发送到合适的 Broker。</td></tr><tr><td style="text-align:left;"><strong>消费者（Consumer）</strong></td><td style="text-align:left;">从 Broker 拉取消息并进行消费的客户端。它同样从 Name Server 获取路由信息。</td></tr></tbody></table><div class="hint-container info"><p class="hint-container-title">RocketMQ 逻辑存储</p></div><table><thead><tr><th style="text-align:left;">概念</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>主题（Topic）</strong></td><td style="text-align:left;">是消息的第一级分类。生产者和消费者都是针对同一个 Topic 进行操作的。</td></tr><tr><td style="text-align:left;"><strong>消息（Message）</strong></td><td style="text-align:left;">包含 Body（消息体）、Topic、Tags（标签）、Keys（唯一键）等属性。</td></tr><tr><td style="text-align:left;"><strong>标签（Tag）</strong></td><td style="text-align:left;">是 Topic 下的二级分类。消费者可以订阅 Topic 下的一个或多个 Tag，实现消息过滤。</td></tr><tr><td style="text-align:left;"><strong>消息队列（Message Queue）</strong></td><td style="text-align:left;">一个 Topic 在物理上会被分成一个或多个 Queue。<strong>Queue 是消息负载均衡和并行消费的最小单位</strong>。</td></tr></tbody></table><div class="hint-container info"><p class="hint-container-title">RocketMQ 物理存储</p></div><table><thead><tr><th style="text-align:left;">概念</th><th style="text-align:left;">说明</th><th style="text-align:left;">优势</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>Commit Log</strong></td><td style="text-align:left;"><strong>所有 Topic 的消息都顺序写入一个统一的文件（Commit Log）</strong>。</td><td style="text-align:left;"><strong>极致顺序写</strong>，极大提升了写的吞吐量，这是 RocketMQ 高吞吐的核心秘诀。</td></tr><tr><td style="text-align:left;"><strong>Consume Queue</strong></td><td style="text-align:left;"><strong>消费队列</strong>。可以理解为 Commit Log 的索引文件。每个 Topic 的每个 Queue 对应一个 Consume Queue。</td><td style="text-align:left;">消费时先查询 Consume Queue 找到消息在 Commit Log 的物理偏移量，再去 Commit Log 读取。<strong>实现了读写分离</strong>。</td></tr></tbody></table><h3 id="【简单】rocketmq-有哪些核心组件-🌟" tabindex="-1"><a class="header-anchor" href="#【简单】rocketmq-有哪些核心组件-🌟" aria-hidden="true">#</a> 【简单】RocketMQ 有哪些核心组件？🌟</h3><div class="hint-container info"><p class="hint-container-title">RocketMQ 核心组件</p></div><table><thead><tr><th style="text-align:left;">组件</th><th style="text-align:left;">核心角色</th><th style="text-align:left;">关键职责</th><th style="text-align:left;">特点</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>Name Server</strong></td><td style="text-align:left;"><strong>路由中心</strong></td><td style="text-align:left;">服务发现与路由管理。Broker 注册，Producer/Consumer 获取路由。</td><td style="text-align:left;"><strong>无状态、轻量级</strong>，实现组件解耦。</td></tr><tr><td style="text-align:left;"><strong>Broker</strong></td><td style="text-align:left;"><strong>存储与中转核心</strong></td><td style="text-align:left;">消息的接收、存储、投递和查询。</td><td style="text-align:left;"><strong>主从架构</strong>，保证高可用与数据持久化。</td></tr><tr><td style="text-align:left;"><strong>Producer</strong></td><td style="text-align:left;"><strong>消息生产者</strong></td><td style="text-align:left;">创建并发送消息到指定 Topic 的 Broker。</td><td style="text-align:left;">支持<strong>同步、异步、单向</strong>发送，内置重试。</td></tr><tr><td style="text-align:left;"><strong>Consumer</strong></td><td style="text-align:left;"><strong>消息消费者</strong></td><td style="text-align:left;">从 Broker 拉取消息并提交给业务应用处理。</td><td style="text-align:left;">以<strong>消费者组</strong>为单位进行负载均衡消费。</td></tr></tbody></table><div class="hint-container info"><p class="hint-container-title">RocketMQ 核心组件协作流程</p></div><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/202509272301766.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li><strong>Broker</strong> 启动后向 <strong>Name Server</strong> 注册。</li><li><strong>Producer/Consumer</strong> 启动时从 <strong>Name Server</strong> 获取路由信息（Topic 在哪些 Broker 上）。</li><li><strong>Producer</strong> 根据路由信息将消息发送给对应的 <strong>Broker</strong>。</li><li><strong>Broker</strong> 将消息持久化存储。</li><li><strong>Consumer</strong> 根据路由信息从 <strong>Broker</strong> 拉取消息进行消费。</li></ol><p><strong>一句话总结：Name Server 管路由，Broker 管存储，Producer 发消息，Consumer 收消息。</strong></p><h2 id="rocketmq-存储" tabindex="-1"><a class="header-anchor" href="#rocketmq-存储" aria-hidden="true">#</a> RocketMQ 存储</h2><h3 id="【中等】rocketmq-如何存储消息-🌟🌟" tabindex="-1"><a class="header-anchor" href="#【中等】rocketmq-如何存储消息-🌟🌟" aria-hidden="true">#</a> 【中等】RocketMQ 如何存储消息？🌟🌟</h3><p>RocketMQ 通过“单一日志顺序写，异步构建多索引”的架构，完美平衡了高性能、高可靠性和海量消息堆积能力。</p><div class="hint-container info"><p class="hint-container-title">RocketMQ 物理存储文件</p></div><p>Apache RocketMQ 消息默认存储在本地磁盘文件中，存储文件的根目录由配置参数 storePathRootDir 决定，存储结构如下图所示，其中 commitLog 文件夹存储消息物理文件，consumeQueue 文件夹存储逻辑队列索引。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/202509272356323.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><table><thead><tr><th style="text-align:left;">文件</th><th style="text-align:left;">核心作用</th><th style="text-align:left;">特点</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>Commit Log</strong></td><td style="text-align:left;"><strong>唯一存储</strong>所有消息的实体内容</td><td style="text-align:left;">所有 Topic 和 Queue 的消息<strong>混合顺序写入</strong>，是数据的“唯一真相源”。</td></tr><tr><td style="text-align:left;"><strong>Consume Queue</strong></td><td style="text-align:left;">Commit Log 的<strong>索引文件</strong>，用于消息消费</td><td style="text-align:left;">每个 Message Queue 对应一个，存储消息在 Commit Log 中的<strong>物理偏移量</strong>，实现快速定位</td></tr><tr><td style="text-align:left;"><strong>Index File</strong></td><td style="text-align:left;">提供按** Message Key **或时间范围查询消息的能力</td><td style="text-align:left;">用于控制台查询等运维场景</td></tr></tbody></table><div class="hint-container info"><p class="hint-container-title">RocketMQ 读写存储流程</p></div><ol><li><p><strong>写入流程</strong>：</p><ul><li>消息<strong>顺序写入</strong> Commit Log 后即返回成功。</li><li>索引的构建（写入 Consume Queue）是<strong>异步完成</strong>的，不影响主写入性能。</li><li>无论 Commit Log 还是 Commit Queue，文件都是按固定大小分段管理的（如每个文件 1G 大小）。</li></ul></li><li><p><strong>读取/消费流程</strong>：</p><ul><li>消费者根据消费偏移量，先从** Consume Queue **找到索引。</li><li>再根据索引中的物理地址，到** Commit Log **中读取实际消息内容。</li></ul></li></ol><h3 id="【中等】rocketmq-如何实现持久化-🌟" tabindex="-1"><a class="header-anchor" href="#【中等】rocketmq-如何实现持久化-🌟" aria-hidden="true">#</a> 【中等】RocketMQ 如何实现持久化？🌟</h3><p>RocketMQ 支持两种刷盘策略，在 <code>broker.conf</code> 文件中配置：</p><ul><li><strong>异步刷盘</strong>：性能高，有极低概率丢消息。</li><li><strong>同步刷盘</strong>：可靠性高，性能略有损耗。</li></ul><div class="hint-container info"><p class="hint-container-title">RocketMQ 异步刷盘</p></div><p><strong>工作原理</strong>：</p><ol><li>生产者发送的消息被写入 Broker 的内存缓冲区（<strong>Page Cache，页缓存</strong>）。</li><li>Broker 立即向生产者返回成功响应。</li><li><strong>后台线程</strong>会定期（或达到一定条件时）将内存中的数据<strong>异步刷新</strong>到物理磁盘上。</li></ol><p><strong>特点</strong>：</p><ul><li><strong>优点</strong>：<strong>性能极高，吞吐量大</strong>。因为写操作直接面对内存，速度非常快。</li><li><strong>缺点</strong>：在消息还未刷盘而 Broker 突然宕机的情况下，<strong>会丢失少量存在于内存中的消息</strong>。</li></ul><p><strong>适用场景</strong>：消息允许有极少量丢失，追求高吞吐量的场景，如日志收集、 metrics 上报。</p><div class="hint-container info"><p class="hint-container-title">RocketMQ 同步刷盘</p></div><p><strong>工作原理</strong>：</p><ol><li>生产者发送的消息被写入 Broker 的内存缓冲区。</li><li>此时，Broker <strong>不会立即返回响应</strong>，而是会<strong>等待</strong>。</li><li>等待数据被<strong>成功写入物理磁盘</strong>后，Broker 才向生产者返回成功响应。</li></ol><p><strong>特点</strong>：</p><ul><li><strong>优点</strong>：<strong>数据可靠性极高</strong>。只要返回成功，消息就一定在磁盘上，宕机也不会丢失。</li><li><strong>缺点</strong>：<strong>性能较低，吞吐量明显下降</strong>。因为每次写入都需要等待慢速的磁盘 IO 操作。</li></ul><p><strong>适用场景</strong>：对数据可靠性要求极高的金融、交易等核心业务场景。</p><div class="hint-container info"><p class="hint-container-title">RocketMQ 日志清理机制</p></div><p>RocketMQ 采用“空间”与“时间”双驱动触发清理，防止 <strong>Commit Log</strong> 和 <strong>Consume Queue</strong> 文件膨胀。</p><p>清理策略如下：</p><table><thead><tr><th style="text-align:left;">条件</th><th style="text-align:left;">机制</th><th style="text-align:left;">核心参数</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>基于空间清理</strong></td><td style="text-align:left;">当磁盘使用率超过阈值时，<strong>强制清理</strong>最旧文件直到空间充足。</td><td style="text-align:left;"><code>diskMaxUsedSpaceRatio</code>（默认 75%）</td></tr><tr><td style="text-align:left;"><strong>基于时间清理</strong></td><td style="text-align:left;">定期清理超过保留时长且<strong>不再被任何消费者需要</strong>的文件。</td><td style="text-align:left;"><code>fileReservedTime</code>（默认 3 天）</td></tr></tbody></table><h2 id="rocketmq-生产消费" tabindex="-1"><a class="header-anchor" href="#rocketmq-生产消费" aria-hidden="true">#</a> RocketMQ 生产消费</h2><h3 id="【中等】rocketmq-发送消息的工作流程是怎样的-🌟🌟" tabindex="-1"><a class="header-anchor" href="#【中等】rocketmq-发送消息的工作流程是怎样的-🌟🌟" aria-hidden="true">#</a> 【中等】RocketMQ 发送消息的工作流程是怎样的？🌟🌟</h3><div class="hint-container tip"><p class="hint-container-title">关键点</p><p>Producer（发送方） -&gt; <strong>Name Server</strong>（路由中心） -&gt; Broker（存储方）。</p></div><p><strong>准备阶段（启动与路由发现）</strong></p><ul><li>Producer 启动，连接 Name Server。</li><li>从 Name Server 拉取 Topic 的<strong>路由信息</strong>（Topic 分布在哪些 Broker、每个 Broker 上有哪些 Message Queue），并缓存在本地。</li></ul><p><strong>发送阶段（路由选择与发送）</strong></p><ul><li><strong>选择队列</strong>：根据负载均衡策略（如轮询）为消息选择一个具体的 Message Queue。</li><li><strong>发送消息</strong>：根据路由信息，找到队列所在的主 Broker，将消息发送出去。</li><li><strong>Broker 处理</strong>：Broker 接收消息，写入存储文件后，向 Producer 返回发送结果。</li></ul><p><strong>容错阶段（失败重试）</strong></p><ul><li><strong>自动重试</strong>：若发送失败（如网络问题），Producer 会自动重试（默认 2 次）。</li><li><strong>故障规避</strong>：重试时会<strong>自动避开上次失败的 Broker</strong>，选择其他队列，保证高可用。</li><li><strong>路由更新</strong>：若持续失败，会重新从 Name Server 拉取最新路由信息。</li></ul><h3 id="【中等】rocketmq-有几种发送消息方式-🌟" tabindex="-1"><a class="header-anchor" href="#【中等】rocketmq-有几种发送消息方式-🌟" aria-hidden="true">#</a> 【中等】RocketMQ 有几种发送消息方式？🌟</h3><div class="hint-container tip"><p class="hint-container-title">关键点</p><table><thead><tr><th style="text-align:left;">发送方式</th><th style="text-align:left;">原理</th><th style="text-align:left;">可靠性</th><th style="text-align:left;">响应时间</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>同步发送</strong></td><td style="text-align:left;">发送消息后，<strong>发送线程会阻塞</strong>，等待 Broker 返回结果。</td><td style="text-align:left;"><strong>最高</strong></td><td style="text-align:left;">最长</td></tr><tr><td style="text-align:left;"><strong>异步发送</strong></td><td style="text-align:left;">发送消息后，<strong>不阻塞线程</strong>，通过回调函数异步接收结果。</td><td style="text-align:left;"><strong>高</strong></td><td style="text-align:left;">短</td></tr><tr><td style="text-align:left;"><strong>单向发送</strong></td><td style="text-align:left;">只负责发送消息，<strong>不等待响应，也不提供回调</strong>。</td><td style="text-align:left;"><strong>最低</strong>（可能丢失）</td><td style="text-align:left;">最短</td></tr></tbody></table></div><div class="hint-container info"><p class="hint-container-title">同步发送</p></div><p>这是最常用、最可靠的方式。</p><p><strong>工作流程</strong>：应用程序调用发送 API 后，线程会一直阻塞，直到收到 RocketMQ 服务器（Broker）返回的 <code>SendResult</code>（包含消息 ID、队列信息等）。</p><p><strong>关键特性</strong>：有<strong>内置的重试机制</strong>（默认重试 2 次）。如果发送失败，客户端会自动尝试重试，从而保证消息的可靠投递。</p><p><strong>适用场景</strong>：重要通知、订单创建等<strong>强一致性</strong>场景。</p><p><strong>示例</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">SendResult</span> sendResult <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;发送结果：&quot;</span> <span class="token operator">+</span> sendResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">异步发送</p></div><p>适用于对响应时间要求很高的场景，通过回调方式处理发送结果。</p><p><strong>工作流程</strong>：应用程序调用发送 API 后立即返回，发送任务被放入线程池中异步执行。当 Broker 返回响应后，会回调开发者实现的 <code>SendCallback</code> 接口。</p><p><strong>关键特性</strong>：同样有重试机制。发送结果在回调函数中处理，成功或失败都需要在回调中考虑。</p><p><strong>适用场景</strong>：<strong>需要高吞吐、对响应敏感</strong>的场景，如日志记录。</p><p><strong>示例</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SendCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span><span class="token class-name">SendResult</span> sendResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;异步发送成功：&quot;</span> <span class="token operator">+</span> sendResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onException</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;异步发送失败：&quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 此处应添加失败处理逻辑，如记录日志或入库</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">单向发送（one-way）</p></div><p>只关心发送过程，不关心发送结果。</p><ul><li><strong>工作流程</strong>：应用程序调用发送 API 后立即返回，不等待 Broker 的任何响应，也不提供回调函数。</li><li><strong>关键特性</strong>：<strong>没有重试机制</strong>，网络出现波动时消息可能会丢失。它是三种方式中吞吐量最高、耗时最短的，但可靠性最低。</li><li><strong>适用场景</strong>：纯日志收集、 指标上报等<strong>可容忍少量丢失</strong>的场景。</li></ul><p><strong>示例</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>producer<span class="token punctuation">.</span><span class="token function">sendOneway</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="【中等】rocketmq-消费消息的工作流程是怎样的-🌟🌟" tabindex="-1"><a class="header-anchor" href="#【中等】rocketmq-消费消息的工作流程是怎样的-🌟🌟" aria-hidden="true">#</a> 【中等】RocketMQ 消费消息的工作流程是怎样的？🌟🌟</h3><div class="hint-container info"><p class="hint-container-title">RocketMQ 消费消息流程</p></div><ol><li><strong>负载均衡</strong><ul><li>Consumer 连接 Name Server，获取 Topic 的路由信息（包含所有 Message Queue）。</li><li><strong>同组内的消费者均分所有 Message Queue</strong>，每个 Message Queue 只被一个消费者占用。</li></ul></li><li><strong>拉取与处理</strong><ul><li>每个消费者<strong>只从分配给自己的 Message Queue 中拉取消息</strong>。</li><li>拉取到的消息提交到消费线程池，由业务监听器 (<code>MessageListener</code>) 处理。</li></ul></li><li><strong>确认与记录（ACK &amp; Offset）</strong>： <ul><li><strong>成功 ACK</strong>：向 Broker 返回 <strong>ACK</strong>。Consumer 会<strong>定期</strong>将 Offset 持久化到 Broker，确保重启后能从断点继续消费。</li><li><strong>失败重试</strong>：处理失败的消息会进入<strong>自动重试</strong>流程，超过最大重试次数（默认 16 次）后，放入死信队列。</li></ul></li></ol><div class="hint-container info"><p class="hint-container-title">RocketMQ 消费消息要点</p></div><ul><li><strong>并行基础</strong>：<strong>消息队列是并发消费的最小单位</strong>，通过分配队列实现水平扩展。</li><li><strong>消费模式</strong>： <ul><li><strong>集群模式</strong>：组内竞争，一条消息<strong>只被一个消费者</strong>消费（用于负载均衡）。</li><li><strong>广播模式</strong>：组内共享，一条消息<strong>被所有消费者</strong>消费（用于全员通知）。</li></ul></li><li><strong>结果保证</strong>：默认提供 <strong><code>at least once</code></strong> 语义，消息可能不丢但可能重复，要求业务逻辑实现<strong>幂等性</strong>。</li></ul><h3 id="【简单】rocketmq-支持哪几种消费方式-🌟" tabindex="-1"><a class="header-anchor" href="#【简单】rocketmq-支持哪几种消费方式-🌟" aria-hidden="true">#</a> 【简单】RocketMQ 支持哪几种消费方式？🌟</h3><div class="hint-container tip"><p class="hint-container-title">关键点</p><p>RocketMQ 支持两种消费方式</p><ul><li><strong>集群模式</strong>：默认且最常用的模式，用于实现消息的分布式并行处理。</li><li><strong>广播模式</strong>：适用于需要“通知到每一个节点”的特殊场景。</li></ul></div><table><thead><tr><th style="text-align:left;">特性维度</th><th style="text-align:left;"><strong>集群模式</strong></th><th style="text-align:left;"><strong>广播模式</strong></th></tr></thead><tbody><tr><td style="text-align:left;"><strong>核心原理</strong></td><td style="text-align:left;">一条消息只能被<strong>同一个消费组内的一个消费者</strong>消费。</td><td style="text-align:left;">一条消息会被<strong>同一个消费组内的所有消费者</strong>各消费一次。</td></tr><tr><td style="text-align:left;"><strong>工作方式</strong></td><td style="text-align:left;">通过<strong>负载均衡</strong>，将主题下的消息队列平均分配给组内消费者。</td><td style="text-align:left;">每个消费者实例都<strong>独立消费全量消息</strong>。</td></tr><tr><td style="text-align:left;"><strong>消费进度</strong></td><td style="text-align:left;">消费偏移量在 <strong>Broker 端集中存储和管理</strong>。</td><td style="text-align:left;">消费偏移量由每个消费者在<strong>本地维护</strong>。</td></tr><tr><td style="text-align:left;"><strong>设计目标</strong></td><td style="text-align:left;"><strong>负载均衡</strong>与<strong>水平扩展</strong>，提升整体吞吐量。</td><td style="text-align:left;"><strong>全局广播</strong>，确保每个节点都执行相同操作。</td></tr><tr><td style="text-align:left;"><strong>典型场景</strong></td><td style="text-align:left;">订单处理、日志处理等需要<strong>分摊负载</strong>的分布式业务。</td><td style="text-align:left;">刷新所有服务器的本地缓存、配置更新等。</td></tr></tbody></table><h3 id="【简单】rocketmq-如何实现批量消息" tabindex="-1"><a class="header-anchor" href="#【简单】rocketmq-如何实现批量消息" aria-hidden="true">#</a> 【简单】RocketMQ 如何实现批量消息？</h3><p>在 RocketMQ 中，批量消息通过 <code>MessageBatch</code> 类实现，该类将多条消息封装成一个对象，再通过单次网络调用统一发送。示例代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 示例代码：</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">&gt;</span></span> messages <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
messages<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">&quot;Topic&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Tag&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Key&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Message Body&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 省略添加更多消息</span>
<span class="token class-name">MessageBatch</span> messageBatch <span class="token operator">=</span> <span class="token class-name">MessageBatch</span><span class="token punctuation">.</span><span class="token function">generateFromList</span><span class="token punctuation">(</span>messages<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// producer.send(messageBatch);</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="rocketmq-集群" tabindex="-1"><a class="header-anchor" href="#rocketmq-集群" aria-hidden="true">#</a> RocketMQ 集群</h2><h3 id="【中等】rocketmq-如何实现主从复制-🌟🌟" tabindex="-1"><a class="header-anchor" href="#【中等】rocketmq-如何实现主从复制-🌟🌟" aria-hidden="true">#</a> 【中等】RocketMQ 如何实现主从复制？🌟🌟</h3><p><strong>RocketMQ 采用主从架构，基于主从复制实现高可用</strong>。</p><div class="hint-container info"><p class="hint-container-title">主从复制原理</p></div><p>RocketMQ 以 <strong>Commit Log</strong> 为复制单位，而非主题或队列。</p><p><strong>RocketMQ 主从架构角色</strong>：</p><ul><li><strong>主节点（Master）</strong>：处理读写请求；消息写入时，持久化到本地存储。</li><li><strong>从节点（Slave）</strong>：只处理读请求；定期向主节点拉取数据，以保持同步。</li></ul><p><strong>数据流向</strong>：</p><ul><li>Producer → Master Commit Log → (复制) → Slave Commit Log。</li><li>Consume Queue（消费索引）在 Master 和 Slave 上<strong>各自独立生成</strong>。</li></ul><p><strong>RocketMQ 复制模式</strong></p><table><thead><tr><th style="text-align:left;">模式</th><th style="text-align:left;">配置参数</th><th style="text-align:left;">工作原理</th><th style="text-align:left;">优点</th><th style="text-align:left;">缺点</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>异步复制</strong></td><td style="text-align:left;"><code>brokerRole = ASYNC_MASTER</code></td><td style="text-align:left;">Master 写入内存后立即返回成功，<strong>异步</strong>同步数据到 Slave</td><td style="text-align:left;"><strong>性能高</strong>，延迟低</td><td style="text-align:left;"><strong>可能丢消息</strong>（Master 宕机且数据未同步时）</td></tr><tr><td style="text-align:left;"><strong>同步双写</strong></td><td style="text-align:left;"><code>brokerRole = SYNC_MASTER</code></td><td style="text-align:left;">Master 写入内存后，<strong>等待 Slave 写入成功</strong>后才返回</td><td style="text-align:left;"><strong>数据可靠性高</strong></td><td style="text-align:left;"><strong>性能较低</strong>，延迟增加</td></tr></tbody></table><h3 id="【中等】rocketmq-如何实现故障转移-🌟🌟" tabindex="-1"><a class="header-anchor" href="#【中等】rocketmq-如何实现故障转移-🌟🌟" aria-hidden="true">#</a> 【中等】RocketMQ 如何实现故障转移？🌟🌟</h3><p>当 Master 节点宕机（如进程崩溃、服务器断电），RocketMQ 通过 <strong>“路由剔除 + Slave 补位”</strong> 实现故障转移，分两种场景：</p><ul><li><strong>自动切换（需开启 DLeger 或 Broker 高可用模式）</strong></li><li><strong>手动 / 半自动切换（传统主从模式）</strong></li></ul><div class="hint-container info"><p class="hint-container-title">自动切换（需开启 DLeger 或 Broker 高可用模式）</p></div><p>（推荐，支持自动选主）</p><ul><li>将多个 Broker 节点（如 3 个）组成 DLeger 集群，节点间通过 Raft 协议选举 Leader（相当于原 Master），其余为 Follower（相当于原 Slave）。</li><li>当 Leader 宕机，Follower 节点会基于 Raft 协议 <strong>自动选举新 Leader</strong>（通常 10s 内完成），新 Leader 接管写服务，客户端通过 NameServer 获取最新路由（指向新 Leader），实现无感知切换。</li><li>优势：无需人工干预，故障转移自动化，数据一致性由 Raft 协议保障（仅丢失 Leader 未同步到 Follower 的数据，可通过同步复制优化）。</li></ul><div class="hint-container info"><p class="hint-container-title">手动 / 半自动切换（传统主从模式）</p></div><p>若未开启 DLeger，Master 宕机后需人工干预，流程如下：</p><ul><li><strong>NameServer 剔除故障 Master</strong>：Broker 会向 NameServer 发送心跳（默认 30s 一次），若 NameServer 超过 120s 未收到 Master 心跳，会将其从路由表中剔除，标记为 “不可用”。</li><li><strong>Slave 升级为 Master</strong>：人工修改 Slave 配置（将 <code>brokerId</code> 从 1 改为 0，0 表示 Master），重启 Slave 节点，新 Master 向 NameServer 注册路由。</li><li><strong>客户端路由更新</strong>：Producer/Consumer 定时（默认 30s）从 NameServer 拉取最新路由，自动将消息发送 / 消费切换到新 Master，完成故障转移。</li></ul><h3 id="【中等】rocketmq-中的消费负载均衡是如何工作的-🌟🌟🌟" tabindex="-1"><a class="header-anchor" href="#【中等】rocketmq-中的消费负载均衡是如何工作的-🌟🌟🌟" aria-hidden="true">#</a> 【中等】RocketMQ 中的消费负载均衡是如何工作的？🌟🌟🌟</h3><p>RocketMQ 的消费负载均衡主要通过消费者组、消费者实例与消息队列实现。</p><p>每个消费者组由多个消费者实例组成，每个实例消费部分消息队列中的消息；系统会自动分配消息队列给消费者组内各实例，且在实例增减时动态重新分配，确保负载均衡。</p><ul><li><strong>消费者组</strong>：每个组可包含多个实例，组间互不影响，组内实例共同消费组内消息。</li><li><strong>消息队列</strong>：每个主题（Topic）下有多个消息队列（Message Queue），分布在不同 Broker 节点，保障高可用与扩展性。</li><li><strong>消息分配策略</strong>：提供轮询法（RoundRobin）、平均分配（Average Allocation）等多种策略，可修改以适配业务需求。</li><li><strong>Rebalance 触发机制</strong>：消费者实例数量变化时，自动触发该机制重新分配消息队列。新实例加入会分配部分队列，实例宕机则其负责的队列会被重新分配给剩余实例。</li><li><strong>消费进度</strong>：每个消费者实例本地或远程保存消费进度（Offset），消息消费后更新进度，防止重复消费或丢失。</li><li><strong>定时任务</strong>：内部每 20 秒触发一次定时任务，根据消费者组变化重新平衡消息队列分配。</li></ul><p>RocketMQ 的消费负载均衡机制保障了系统的可扩展性和高可用性，避免消费者实例过载或空闲，提升整体性能。</p><h3 id="【中等】rocketmq-的-nameserver-有什么作用-🌟🌟" tabindex="-1"><a class="header-anchor" href="#【中等】rocketmq-的-nameserver-有什么作用-🌟🌟" aria-hidden="true">#</a> 【中等】RocketMQ 的 NameServer 有什么作用？🌟🌟</h3><p>RocketMQ 的 NameServer 是轻量级服务注册与发现组件。</p><p>NameServer 提供路由信息，保存所有 Broker 的地址与路由信息，供客户端（Producer、Consumer）通信查询。</p><p><strong>主要功能</strong>：</p><ul><li>维护 Broker 集群元数据（地址、状态等）。</li><li>支持服务注册与发现（Broker 注册自身信息，客户端通过它获取路由信息以完成消息收发）。</li></ul><p><strong>服务发现流程</strong>：</p><ul><li>Broker 启动时持续向所有 NameServer 注册自身信息。</li><li>Producer、Consumer 初始化时从 NameServer 集群获取最新路由信息，且定期刷新。</li><li>Broker 状态变化（上线 / 下线等）时，会及时通知所有 NameServer，NameServer 同步更新内部路由信息。</li></ul><div class="hint-container info"><p class="hint-container-title">NameServer 设计</p></div><ul><li><strong>分布式一致性</strong>：NameServer 间无直接通信，依赖客户端定期刷新路由信息，通过多节点提升可用性与容错性。</li><li><strong>高可用性</strong>：部署多个 NameServer，Broker、Producer、Consumer 初始化时配置所有节点地址，保障单节点故障时系统正常运行。</li><li><strong>动态扩展</strong>：新 Broker 注册到 NameServer，客户端定期更新路由信息即可感知，实现系统动态扩展。</li><li><strong>架构优势</strong>：相比 Kafka 的 Zookeeper，NameServer 更轻量专一，且无状态，可随时增减，无需处理状态同步问题。</li></ul><h3 id="【中等】为什么-rocketmq-不用-zookeeper-而是自己开发-nameserver-🌟🌟" tabindex="-1"><a class="header-anchor" href="#【中等】为什么-rocketmq-不用-zookeeper-而是自己开发-nameserver-🌟🌟" aria-hidden="true">#</a> 【中等】为什么 RocketMQ 不用 ZooKeeper，而是自己开发 NameServer？🌟🌟</h3><div class="hint-container info"><p class="hint-container-title">为什么不用 Zookeeper 作为注册中心</p></div><p><strong>ZooKeeper 的强一致性保障带来了不必要的性能和复杂度开销，而消息队列的路由发现场景本身是一个更注重高可用和高性能的 AP 场景</strong>。</p><ul><li><strong>ZooKeeper (CP)</strong>：<strong>太重</strong>。为强一致性牺牲性能，功能冗余，运维复杂。</li><li><strong>NameServer (AP)</strong>：<strong>专为消息队列设计</strong>。轻量、无状态、节点间无同步，实现最终一致性，延迟极低。</li></ul><p>概括来说，核心是为了<strong>简单、高效、专注</strong>。</p><div class="hint-container info"><p class="hint-container-title">为什么开发 NameServer?</p></div><p>NameServer 集群中所有节点平等，无需主从复制、故障转移。因此，它有以下好处：</p><ul><li><strong>更轻量，已部署</strong></li><li><strong>性能更好</strong>：无主从，因此避免了 zk 主节点集中负责写操作的瓶颈问题</li><li><strong>可用性高</strong>：NameServer 无需故障转移，只要有一个节点存在，服务依然可用；Zk 需要集群半数以上节点存活才可用。</li><li><strong>无持久化存储</strong>（重启后依赖 Broker 重新注册）</li></ul><div class="hint-container info"><p class="hint-container-title">ZooKeeper vs. RocketMQ 方案</p></div><table><thead><tr><th><strong>场景</strong></th><th><strong>ZooKeeper</strong></th><th><strong>RocketMQ 选择</strong></th></tr></thead><tbody><tr><td><strong>注册中心读写频率</strong></td><td>低频（秒级）</td><td>高频（毫秒级 Broker 心跳）</td></tr><tr><td><strong>节点规模</strong></td><td>适合中小集群（&lt;100 节点）</td><td>支持大规模集群（数千节点）</td></tr><tr><td><strong>吞吐量</strong></td><td>写性能受限（需全局有序）</td><td>自研 NameServer（无强一致性要求）</td></tr></tbody></table><h2 id="rocketmq-可靠传输" tabindex="-1"><a class="header-anchor" href="#rocketmq-可靠传输" aria-hidden="true">#</a> RocketMQ 可靠传输</h2><h3 id="【困难】如何保证-rocketmq-消息不丢失-🌟🌟🌟" tabindex="-1"><a class="header-anchor" href="#【困难】如何保证-rocketmq-消息不丢失-🌟🌟🌟" aria-hidden="true">#</a> 【困难】如何保证 RocketMQ 消息不丢失？🌟🌟🌟</h3><p>需从<strong>生产、存储、消费</strong>三个核心阶段分别采取措施。</p><div class="hint-container info"><p class="hint-container-title">生产：确保消息成功送达 Broker</p></div><ul><li><strong>发送 ACK</strong>：发送后等待 Broker 确认响应，仅收到 “发送成功” 确认才算完成，失败时触发重试（避免异步 / 单向发送的 “无反馈” 风险）。</li><li><strong>合理配置发送参数</strong>：设置合适的发送超时时间（平衡效率与可靠性），超时未确认则重试。</li><li><strong>关键场景用事务消息</strong>：核心业务（如下单）通过 “半事务消息 + 本地业务确认” 机制，确保本地业务成功后，消息才被 Broker 标记为可消费，避免 “业务成功但消息未发” 的丢失。</li></ul><div class="hint-container info"><p class="hint-container-title">存储：确保 Broker 不丢消息</p></div><ul><li><strong>主从复制</strong>：Master 负责写入，Slave 实时同步数据；Master 故障时 Slave 可切换，避免单点故障导致数据丢失。</li><li><strong>同步刷盘</strong>：消息写入后立即刷盘（而非仅存内存），刷盘成功才向 Producer 确认，杜绝 “Broker 宕机导致内存消息丢失”。</li><li><strong>磁盘监控与配额</strong>：设置磁盘空间预警，避免磁盘满导致消息无法写入；实时监控 Broker 状态，及时处理存储异常。</li></ul><div class="hint-container info"><p class="hint-container-title">消费：确保消息被成功处理</p></div><ul><li><strong>手动确认消费（ACK）</strong>：仅当业务逻辑处理完成（如数据入库、状态更新），才向 Broker 发送消费确认；未确认的消息会被 Broker 重新投递。</li><li><strong>失败重试 + 死信队列</strong>：消费失败时，消息自动进入重试队列，超过重试阈值（可配，默认 16 次），消息进入死信队列。</li></ul><h3 id="【困难】如何保证-rocketmq-消息不重复-🌟🌟🌟" tabindex="-1"><a class="header-anchor" href="#【困难】如何保证-rocketmq-消息不重复-🌟🌟🌟" aria-hidden="true">#</a> 【困难】如何保证 RocketMQ 消息不重复？🌟🌟🌟</h3><p>RocketMQ 的消息保障机制（重试、重投）必然会导致消息可能被重复消费，因此必须在<strong>消费端</strong>解决此问题。</p><p>保证 RocketMQ 消息不重复的主要方法：</p><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">核心思想</th><th style="text-align:left;">实现方式举例</th><th style="text-align:left;">优点</th><th style="text-align:left;">适用场景</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>消费端幂等性</strong></td><td style="text-align:left;"><strong>核心方法</strong><br>处理逻辑本身具备幂等性，即同一消息处理多次的结果与处理一次相同</td><td style="text-align:left;">数据库唯一约束插入（如订单ID）<br>乐观锁更新状态（如<code>update table set status = &#39;paid&#39; where id = 1 and status = &#39;unpaid&#39;</code>）<br>读写操作天然幂等（如<code>select</code>、<code>update set value = 1</code>）</td><td style="text-align:left;"><strong>最优雅、高效</strong><br>不依赖存储，性能损耗小</td><td style="text-align:left;"><strong>首选方案</strong>，适用于绝大多数业务，如交易、状态更新</td></tr><tr><td style="text-align:left;"><strong>消息状态记录</strong></td><td style="text-align:left;"><strong>兜底方案</strong><br>消费前检查全局状态，判断消息是否已被处理过</td><td style="text-align:left;">创建<strong>去重表</strong>，以消息唯一键（如<code>MessageId</code>）作为主键，消费前尝试插入，插入成功才处理<br>使用Redis等缓存，以消息ID为Key记录消费状态</td><td style="text-align:left;"><strong>简单、直接</strong>，可靠性高</td><td style="text-align:left;">幂等性难以实现的复杂业务；与DB操作强关的场景</td></tr><tr><td style="text-align:left;"><strong>优化重试机制</strong></td><td style="text-align:left;"><strong>辅助手段</strong><br>减少不必要的重复消费触发源头</td><td style="text-align:left;">设置合理的<strong>最大重试次数</strong>（非无限重试）<br>避免消费者进程频繁异常重启，以减少消息被退回Broker重试的次数</td><td style="text-align:left;">从源头降低重复概率</td><td style="text-align:left;">作为前两种方法的辅助优化</td></tr></tbody></table><h3 id="【困难】如何保证-rocketmq-消息有序-🌟🌟🌟" tabindex="-1"><a class="header-anchor" href="#【困难】如何保证-rocketmq-消息有序-🌟🌟🌟" aria-hidden="true">#</a> 【困难】如何保证 RocketMQ 消息有序？🌟🌟🌟</h3><p>RocketMQ 可以保证消息在同一队列中有序，但无法保证全局所有消息有序。</p><p><strong>生产者要点</strong></p><ul><li><strong>选择队列</strong>：使用 <code>MessageQueueSelector</code> 接口。</li><li><strong>路由策略</strong>：根据“业务标识”（如 <code>orderId</code>）进行<strong>哈希取模</strong>，确保同一组消息始终发送到<strong>同一个 MessageQueue</strong>。</li><li><strong>发送方式</strong>：使用<strong>同步发送</strong>，保证前一条消息发送成功后再发下一条。</li></ul><p><strong>消费者要点</strong></p><ul><li><strong>使用顺序监听器</strong>：注册 <code>MessageListenerOrderly</code>。</li><li><strong>单线程消费者</strong>： <ul><li><strong>队列锁</strong>：同一队列只会被一个消费线程占用，防止并发。</li><li><strong>顺序处理</strong>：队列消息<strong>串行消费</strong>，前一批处理成功后才处理下一批。</li></ul></li><li><strong>消费结果</strong>： <ul><li>返回 <code>SUCCESS</code>：继续消费下一条。</li><li>返回 <code>SUSPEND_CURRENT_QUEUE_A_MOMENT</code>：暂停当前队列，等待重试。</li></ul></li></ul><p><strong>注意事项</strong></p><ul><li><strong>队列数固定</strong>：Topic 的 <strong>MessageQueue 数量一旦创建不可变更</strong>，否则会破坏路由顺序。</li><li><strong>避免顺序失效</strong>： <ul><li>禁止使用异步发送。</li><li>消费逻辑需<strong>幂等</strong>，避免因异常重试阻塞后续消息。</li></ul></li><li><strong>性能与设计</strong>： <ul><li>不同业务使用不同 Topic 隔离。</li><li>警惕“热点”订单，可通过更细粒度的标识（如订单ID+明细ID）打散消息。</li></ul></li></ul><h3 id="【困难】如何处理-rocketmq-消息积压-🌟🌟" tabindex="-1"><a class="header-anchor" href="#【困难】如何处理-rocketmq-消息积压-🌟🌟" aria-hidden="true">#</a> 【困难】如何处理 RocketMQ 消息积压？🌟🌟</h3><p>处理 MQ 消息积压的核心思路是 <strong>“快速消费存量+优化生产速率”</strong>，需结合监控、扩容、降级等手段综合治理。</p><p>大致可以归纳为：</p><ul><li><strong>短期</strong>：扩容+降级，优先恢复服务。</li><li><strong>长期</strong>：优化消费逻辑+批处理，预防再次积压。</li><li><strong>口诀</strong>：<strong>监控早发现，扩容扛流量，消费改批量，生产限流速</strong>。</li></ul><div class="hint-container info"><p class="hint-container-title">快速消费积压消息</p></div><ul><li><strong>增加消费者实例</strong>：横向扩展消费者服务（如 Kubernetes 动态扩容 Pod），注意分区数限制（Kafka 需提前规划足够分区）。</li><li><strong>提升消费并行度</strong>： <ul><li>调整消费者并发参数（如 Kafka 的 <code>max.poll.records</code>、RabbitMQ 的 <code>prefetch_count</code>）。</li><li>多线程消费（需保证无顺序要求的场景）。</li></ul></li><li><strong>临时降级</strong>：非核心业务暂停消费（如日志处理），集中资源处理核心业务消息。</li></ul><div class="hint-container info"><p class="hint-container-title">优化消费能力</p></div><ul><li><strong>批量处理</strong>：合并多条消息一次处理（如数据库批量插入）。</li><li><strong>异步化+削峰</strong>：消费者将消息存入内存队列，后台线程异步处理，避免同步阻塞。</li><li><strong>跳过非关键逻辑</strong>：临时关闭日志记录、数据校验等非必要操作。</li></ul><div class="hint-container info"><p class="hint-container-title">控制生产端流量</p></div><ul><li><strong>限流</strong>：生产端启用速率限制（如 Kafka 的 <code>quota</code>、Redis 令牌桶）。</li><li><strong>削峰填谷</strong>：消息先写入缓存层（如 Redis List），再匀速写入 MQ。</li><li><strong>业务降级</strong>：高峰期关闭非核心功能的消息生产（如暂停推荐系统更新）。</li></ul><div class="hint-container info"><p class="hint-container-title">监控与告警</p></div><ul><li><strong>实时监控指标</strong>： <ul><li>队列堆积量（如 Kafka 的 <code>lag</code>）、消费速率（TPS）、消费者状态。</li><li>设置阈值告警（如积压超过 10W 条触发短信通知）。</li></ul></li><li><strong>根因分析工具</strong>： <ul><li>日志分析（消费者卡顿、GC 问题）。</li><li>链路追踪（如 SkyWalking 定位慢消费）。</li></ul></li></ul><div class="hint-container info"><p class="hint-container-title">长期预防措施</p></div><ul><li><strong>容量规划</strong>：根据业务峰值预先扩容分区/队列（如 Kafka 分区数 = 消费者数 × 1.5）。</li><li><strong>死信队列+重试机制</strong>：处理失败的消息转入死信队列，避免阻塞正常消费。</li><li><strong>自动化扩缩容</strong>：基于积压指标动态调整消费者数量（如 K8s HPA）。</li></ul><div class="hint-container info"><p class="hint-container-title">主流 MQ 处理</p></div><table><thead><tr><th>消息队列</th><th>关键操作</th></tr></thead><tbody><tr><td><strong>Kafka</strong></td><td>增加分区+消费者，调整 <code>fetch.max.bytes</code></td></tr><tr><td><strong>RabbitMQ</strong></td><td>镜像队列扩容，提高 <code>prefetch_count</code></td></tr><tr><td><strong>RocketMQ</strong></td><td>消费组扩容，启用定时消息延迟消费</td></tr></tbody></table><h3 id="【中等】rocketmq-中如何配置并发消费和顺序消费-🌟" tabindex="-1"><a class="header-anchor" href="#【中等】rocketmq-中如何配置并发消费和顺序消费-🌟" aria-hidden="true">#</a> 【中等】RocketMQ 中如何配置并发消费和顺序消费？🌟</h3><div class="hint-container tip"><p class="hint-container-title">关键点</p><p>RocketMQ 中配置并发消费和顺序消费的主要区别在于<strong>消费者注册的消息监听器</strong>。</p><table><thead><tr><th style="text-align:left;">消费方式</th><th style="text-align:left;">监听器接口</th><th style="text-align:left;">核心特性</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>并发消费</strong></td><td style="text-align:left;"><code>MessageListenerConcurrently</code></td><td style="text-align:left;">消费者内部使用线程池<strong>并发处理</strong>消息，最大化吞吐量，<strong>不保证顺序</strong></td></tr><tr><td style="text-align:left;"><strong>顺序消费</strong></td><td style="text-align:left;"><code>MessageListenerOrderly</code></td><td style="text-align:left;">对<strong>每个消息队列</strong>加锁，<strong>顺序地、单线程地</strong>处理该队列中的消息</td></tr></tbody></table></div><div class="hint-container info"><p class="hint-container-title">并发消费 vs. 顺序消费</p></div><table><thead><tr><th style="text-align:left;">特性维度</th><th style="text-align:left;"><strong>并发消费</strong></th><th style="text-align:left;"><strong>顺序消费</strong></th></tr></thead><tbody><tr><td style="text-align:left;"><strong>特点</strong></td><td style="text-align:left;"><strong>吞吐量高</strong>，<strong>延迟低</strong></td><td style="text-align:left;"><strong>消息有序</strong>，<strong>吞吐量低</strong>，<strong>延迟高</strong></td></tr><tr><td style="text-align:left;"><strong>监听器接口</strong></td><td style="text-align:left;"><code>MessageListenerConcurrently</code></td><td style="text-align:left;"><code>MessageListenerOrderly</code></td></tr><tr><td style="text-align:left;"><strong>处理方式</strong></td><td style="text-align:left;">使用线程池<strong>并发处理</strong>消息</td><td style="text-align:left;">对<strong>每个消息队列 (Queue) 加锁</strong>，单线程顺序处理</td></tr><tr><td style="text-align:left;"><strong>消息顺序</strong></td><td style="text-align:left;"><strong>不保证</strong>顺序性</td><td style="text-align:left;">保证<strong>单个 Queue 内</strong>的消息顺序</td></tr><tr><td style="text-align:left;"><strong>重试机制</strong></td><td style="text-align:left;">失败消息发送到<strong>重试主题</strong>，延迟后再次消费</td><td style="text-align:left;"><strong>暂停当前 Queue</strong>，在本地进行重试，不进入重试主题</td></tr><tr><td style="text-align:left;"><strong>适用场景</strong></td><td style="text-align:left;">日志处理、通知短信等<strong>无顺序要求</strong>的场景</td><td style="text-align:left;">订单状态流转、库存扣减等<strong>有严格顺序要求</strong>的场景</td></tr><tr><td style="text-align:left;"><strong>前提条件</strong></td><td style="text-align:left;">无</td><td style="text-align:left;"><strong>生产者</strong>必须将同一组消息（如相同订单 ID）发送到<strong>同一个 Queue</strong></td></tr></tbody></table>`,171),m=t("p",null,[n("这是"),t("strong",null,"默认"),n("和"),t("strong",null,"最常用"),n("的方式。")],-1),h=t("div",{class:"language-java line-numbers-mode","data-ext":"java"},[t("pre",{class:"language-java"},[t("code",null,[t("span",{class:"token comment"},"// 1. 创建消费者实例（集群模式示例）"),n(`
`),t("span",{class:"token class-name"},"DefaultMQPushConsumer"),n(" consumer "),t("span",{class:"token operator"},"="),n(),t("span",{class:"token keyword"},"new"),n(),t("span",{class:"token class-name"},"DefaultMQPushConsumer"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"YourConsumerGroupName"'),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),n(`
consumer`),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"setNamesrvAddr"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"localhost:9876"'),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),n(),t("span",{class:"token comment"},"// 设置 NameServer 地址"),n(`

`),t("span",{class:"token comment"},"// 2. 订阅主题和 Tag"),n(`
consumer`),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"subscribe"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"YourTopic"'),t("span",{class:"token punctuation"},","),n(),t("span",{class:"token string"},'"*"'),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),n(),t("span",{class:"token comment"},"// 订阅所有 Tag 的消息"),n(`

`),t("span",{class:"token comment"},"// 3. 【关键配置】注册并发消息监听器"),n(`
consumer`),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"registerMessageListener"),t("span",{class:"token punctuation"},"("),t("span",{class:"token keyword"},"new"),n(),t("span",{class:"token class-name"},"MessageListenerConcurrently"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),n(),t("span",{class:"token punctuation"},"{"),n(`
    `),t("span",{class:"token annotation punctuation"},"@Override"),n(`
    `),t("span",{class:"token keyword"},"public"),n(),t("span",{class:"token class-name"},"ConsumeConcurrentlyStatus"),n(),t("span",{class:"token function"},"consumeMessage"),t("span",{class:"token punctuation"},"("),n(`
            `),t("span",{class:"token class-name"},"List"),t("span",{class:"token generics"},[t("span",{class:"token punctuation"},"<"),t("span",{class:"token class-name"},"MessageExt"),t("span",{class:"token punctuation"},">")]),n(" msgs"),t("span",{class:"token punctuation"},","),n(),t("span",{class:"token comment"},"// 消息列表，默认一次拉取一条"),n(`
            `),t("span",{class:"token class-name"},"ConsumeConcurrentlyContext"),n(" context"),t("span",{class:"token punctuation"},")"),n(),t("span",{class:"token punctuation"},"{"),n(`

        `),t("span",{class:"token comment"},"// 业务处理逻辑"),n(`
        `),t("span",{class:"token keyword"},"for"),n(),t("span",{class:"token punctuation"},"("),t("span",{class:"token class-name"},"MessageExt"),n(" msg "),t("span",{class:"token operator"},":"),n(" msgs"),t("span",{class:"token punctuation"},")"),n(),t("span",{class:"token punctuation"},"{"),n(`
            `),t("span",{class:"token keyword"},"try"),n(),t("span",{class:"token punctuation"},"{"),n(`
                `),t("span",{class:"token class-name"},"String"),n(" messageBody "),t("span",{class:"token operator"},"="),n(),t("span",{class:"token keyword"},"new"),n(),t("span",{class:"token class-name"},"String"),t("span",{class:"token punctuation"},"("),n("msg"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"getBody"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},","),n(),t("span",{class:"token class-name"},"StandardCharsets"),t("span",{class:"token punctuation"},"."),t("span",{class:"token constant"},"UTF_8"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),n(`
                `),t("span",{class:"token class-name"},"System"),t("span",{class:"token punctuation"},"."),n("out"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"println"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"收到消息："'),n(),t("span",{class:"token operator"},"+"),n(" messageBody"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),n(`
                `),t("span",{class:"token comment"},"// 模拟业务处理。.."),n(`
            `),t("span",{class:"token punctuation"},"}"),n(),t("span",{class:"token keyword"},"catch"),n(),t("span",{class:"token punctuation"},"("),t("span",{class:"token class-name"},"Exception"),n(" e"),t("span",{class:"token punctuation"},")"),n(),t("span",{class:"token punctuation"},"{"),n(`
                `),t("span",{class:"token comment"},"// 处理失败，稍后重试（重试次数小于 16 次）"),n(`
                `),t("span",{class:"token keyword"},"return"),n(),t("span",{class:"token class-name"},"ConsumeConcurrentlyStatus"),t("span",{class:"token punctuation"},"."),t("span",{class:"token constant"},"RECONSUME_LATER"),t("span",{class:"token punctuation"},";"),n(`
            `),t("span",{class:"token punctuation"},"}"),n(`
        `),t("span",{class:"token punctuation"},"}"),n(`
        `),t("span",{class:"token comment"},"// 处理成功"),n(`
        `),t("span",{class:"token keyword"},"return"),n(),t("span",{class:"token class-name"},"ConsumeConcurrentlyStatus"),t("span",{class:"token punctuation"},"."),t("span",{class:"token constant"},"CONSUME_SUCCESS"),t("span",{class:"token punctuation"},";"),n(`
    `),t("span",{class:"token punctuation"},"}"),n(`
`),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),n(`

`),t("span",{class:"token comment"},"// 4. 启动消费者"),n(`
consumer`),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"start"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),n(`
`)])]),t("div",{class:"line-numbers","aria-hidden":"true"},[t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"})])],-1),f=t("p",null,"适用于需要严格保证处理顺序的场景。",-1),v=t("div",{class:"language-java line-numbers-mode","data-ext":"java"},[t("pre",{class:"language-java"},[t("code",null,[t("span",{class:"token comment"},"// 1. 创建消费者实例"),n(`
`),t("span",{class:"token class-name"},"DefaultMQPushConsumer"),n(" consumer "),t("span",{class:"token operator"},"="),n(),t("span",{class:"token keyword"},"new"),n(),t("span",{class:"token class-name"},"DefaultMQPushConsumer"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"YourOrderlyConsumerGroup"'),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),n(`
consumer`),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"setNamesrvAddr"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"localhost:9876"'),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),n(`

`),t("span",{class:"token comment"},"// 2. 订阅主题和 Tag"),n(`
consumer`),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"subscribe"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"OrderTopic"'),t("span",{class:"token punctuation"},","),n(),t("span",{class:"token string"},'"CreateOrder || PayOrder"'),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),n(`

`),t("span",{class:"token comment"},"// 3. 【关键配置】注册顺序消息监听器"),n(`
consumer`),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"registerMessageListener"),t("span",{class:"token punctuation"},"("),t("span",{class:"token keyword"},"new"),n(),t("span",{class:"token class-name"},"MessageListenerOrderly"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),n(),t("span",{class:"token punctuation"},"{"),n(`
    `),t("span",{class:"token annotation punctuation"},"@Override"),n(`
    `),t("span",{class:"token keyword"},"public"),n(),t("span",{class:"token class-name"},"ConsumeOrderlyStatus"),n(),t("span",{class:"token function"},"consumeMessage"),t("span",{class:"token punctuation"},"("),n(`
            `),t("span",{class:"token class-name"},"List"),t("span",{class:"token generics"},[t("span",{class:"token punctuation"},"<"),t("span",{class:"token class-name"},"MessageExt"),t("span",{class:"token punctuation"},">")]),n(" msgs"),t("span",{class:"token punctuation"},","),n(`
            `),t("span",{class:"token class-name"},"ConsumeOrderlyContext"),n(" context"),t("span",{class:"token punctuation"},")"),n(),t("span",{class:"token punctuation"},"{"),n(`
        `),t("span",{class:"token comment"},"// 设置自动提交偏移量（推荐）"),n(`
        context`),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"setAutoCommit"),t("span",{class:"token punctuation"},"("),t("span",{class:"token boolean"},"true"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),n(`

        `),t("span",{class:"token keyword"},"for"),n(),t("span",{class:"token punctuation"},"("),t("span",{class:"token class-name"},"MessageExt"),n(" msg "),t("span",{class:"token operator"},":"),n(" msgs"),t("span",{class:"token punctuation"},")"),n(),t("span",{class:"token punctuation"},"{"),n(`
            `),t("span",{class:"token comment"},"// 【关键】对于顺序消息，通常需要根据某个关键标识（如订单 ID）将消息路由到同一个 Queue。"),n(`
            `),t("span",{class:"token comment"},"// 这里假设消息的 keys 就是订单 ID"),n(`
            `),t("span",{class:"token class-name"},"String"),n(" orderId "),t("span",{class:"token operator"},"="),n(" msg"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"getKeys"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),n(`

            `),t("span",{class:"token keyword"},"try"),n(),t("span",{class:"token punctuation"},"{"),n(`
                `),t("span",{class:"token class-name"},"String"),n(" messageBody "),t("span",{class:"token operator"},"="),n(),t("span",{class:"token keyword"},"new"),n(),t("span",{class:"token class-name"},"String"),t("span",{class:"token punctuation"},"("),n("msg"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"getBody"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},","),n(),t("span",{class:"token class-name"},"StandardCharsets"),t("span",{class:"token punctuation"},"."),t("span",{class:"token constant"},"UTF_8"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),n(`
                `),t("span",{class:"token class-name"},"System"),t("span",{class:"token punctuation"},"."),n("out"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"println"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"订单 ID: "'),n(),t("span",{class:"token operator"},"+"),n(" orderId "),t("span",{class:"token operator"},"+"),n(),t("span",{class:"token string"},'", 处理消息："'),n(),t("span",{class:"token operator"},"+"),n(" messageBody"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),n(`
                `),t("span",{class:"token comment"},"// 处理业务逻辑。.."),n(`

            `),t("span",{class:"token punctuation"},"}"),n(),t("span",{class:"token keyword"},"catch"),n(),t("span",{class:"token punctuation"},"("),t("span",{class:"token class-name"},"Exception"),n(" e"),t("span",{class:"token punctuation"},")"),n(),t("span",{class:"token punctuation"},"{"),n(`
                `),t("span",{class:"token comment"},"// *** 顺序消费的重试机制很特殊 ***"),n(`
                `),t("span",{class:"token comment"},"// 如果处理失败，会暂停当前队列，并在内部进行重试，而不是投递到重试主题。"),n(`
                `),t("span",{class:"token comment"},"// 如果重试多次后仍然失败，会跳过这条消息，继续处理下一条（在实际生产中需要告警和人工干预）。"),n(`
                `),t("span",{class:"token class-name"},"System"),t("span",{class:"token punctuation"},"."),n("err"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"println"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"处理失败，进行顺序重试："'),n(),t("span",{class:"token operator"},"+"),n(" msg"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"getMsgId"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),n(`
                `),t("span",{class:"token keyword"},"return"),n(),t("span",{class:"token class-name"},"ConsumeOrderlyStatus"),t("span",{class:"token punctuation"},"."),t("span",{class:"token constant"},"SUSPEND_CURRENT_QUEUE_A_MOMENT"),t("span",{class:"token punctuation"},";"),n(`
            `),t("span",{class:"token punctuation"},"}"),n(`
        `),t("span",{class:"token punctuation"},"}"),n(`
        `),t("span",{class:"token comment"},"// 处理成功，继续处理下一条"),n(`
        `),t("span",{class:"token keyword"},"return"),n(),t("span",{class:"token class-name"},"ConsumeOrderlyStatus"),t("span",{class:"token punctuation"},"."),t("span",{class:"token constant"},"SUCCESS"),t("span",{class:"token punctuation"},";"),n(`
    `),t("span",{class:"token punctuation"},"}"),n(`
`),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),n(`

`),t("span",{class:"token comment"},"// 4. 启动消费者"),n(`
consumer`),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"start"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),n(`
`)])]),t("div",{class:"line-numbers","aria-hidden":"true"},[t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"})])],-1),y=l(`<h2 id="rocketmq-架构" tabindex="-1"><a class="header-anchor" href="#rocketmq-架构" aria-hidden="true">#</a> RocketMQ 架构</h2><h3 id="【简单】rocketmq-如何实现消息过滤-🌟" tabindex="-1"><a class="header-anchor" href="#【简单】rocketmq-如何实现消息过滤-🌟" aria-hidden="true">#</a> 【简单】RocketMQ 如何实现消息过滤？🌟</h3><table><thead><tr><th style="text-align:left;">方式</th><th style="text-align:left;">实现原理</th><th style="text-align:left;">特点</th><th style="text-align:left;">适用场景</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>Tag 过滤</strong></td><td style="text-align:left;">生产者给消息打上<strong>标签</strong>，消费者按<strong>标签匹配</strong>订阅。</td><td style="text-align:left;"><strong>简单高效</strong>，但信息量有限，灵活性低。</td><td style="text-align:left;">简单的消息分类，如按业务类型（&quot;ORDER&quot;、&quot;PAYMENT&quot;）过滤。</td></tr><tr><td style="text-align:left;"><strong>SQL92 过滤</strong></td><td style="text-align:left;">生产者给消息设置<strong>自定义属性</strong>，消费者使用** SQL 表达式**订阅。</td><td style="text-align:left;"><strong>灵活强大</strong>，支持复杂规则，但<strong>消耗更多 Broker 资源</strong>。</td><td style="text-align:left;">需要复杂业务逻辑过滤，如 <code>amount &gt; 100 AND type = &#39;PAYMENT&#39;</code>。</td></tr></tbody></table><p><strong>执行位置</strong>：两种过滤均在 <strong>Broker 端</strong> 完成，确保网络传输效率。</p><p><strong>选择建议</strong>：</p><ul><li>绝大多数场景下，优先使用 <strong>Tag 过滤</strong>，因其性能开销最小。</li><li>只有当过滤逻辑需要基于消息内容或多个属性进行复杂判断时，才使用 <strong>SQL92 过滤</strong>。</li></ul><h3 id="【简单】rocketmq-支持哪几种消息传输模式-🌟" tabindex="-1"><a class="header-anchor" href="#【简单】rocketmq-支持哪几种消息传输模式-🌟" aria-hidden="true">#</a> 【简单】RocketMQ 支持哪几种消息传输模式？🌟</h3><p>RocketMQ 支持推（Push）和拉（Pull）两种消费传输模式</p><table><thead><tr><th style="text-align:left;">模式</th><th style="text-align:left;">控制方</th><th style="text-align:left;">工作原理</th><th style="text-align:left;">核心特点</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>推模式 (Push)</strong></td><td style="text-align:left;"><strong>Broker 主导</strong></td><td style="text-align:left;">Broker 在收到消息后，<strong>主动</strong>将消息推送给消费者。</td><td style="text-align:left;"><strong>高实时性</strong>，延迟极低。简化客户端逻辑，像是一个“事件驱动”模型。</td></tr><tr><td style="text-align:left;"><strong>拉模式 (Pull)</strong></td><td style="text-align:left;"><strong>Consumer 主导</strong></td><td style="text-align:left;">Consumer <strong>主动</strong>、<strong>轮询</strong>地向 Broker 请求消息。</td><td style="text-align:left;"><strong>灵活性高</strong>，消费节奏完全由客户端控制，便于实现批量处理等复杂逻辑。</td></tr></tbody></table><h3 id="【中等】rocketmq-如何实现延迟消息-🌟" tabindex="-1"><a class="header-anchor" href="#【中等】rocketmq-如何实现延迟消息-🌟" aria-hidden="true">#</a> 【中等】RocketMQ 如何实现延迟消息？🌟</h3><p>RocketMQ 的延迟消息采用 <strong>多级时间轮 + 定时任务扫描</strong> 实现，非实时投递而是延迟触发。</p><div class="hint-container info"><p class="hint-container-title">RocketMQ 延迟消息工作流程</p></div><ol><li><strong>设置延迟级别</strong><ul><li>Producer 发送消息时指定 <code>delayTimeLevel</code>（如 <code>3</code> 表示延迟 10 秒）</li><li>支持 18 个固定延迟级别（1s/5s/10s/30s/1m...2h）</li></ul></li><li><strong>延迟存储</strong><ul><li>Broker 将延迟消息存入 <strong>专用 Topic</strong>（<code>SCHEDULE_TOPIC_XXXX</code>）</li><li>按延迟级别分队列（如 <code>delayLevel=3</code> 的消息存入 <code>SCHEDULE_TOPIC_XXXX</code> 的 Queue3）</li></ul></li><li><strong>定时扫描</strong><ul><li><strong>时间轮算法</strong> 管理延迟队列</li><li>每秒扫描对应队列，将到期消息 <strong>重新投递</strong> 到目标 Topic</li></ul></li><li><strong>消息投递</strong><ul><li>到期后，Broker 将消息从延迟 Topic 转移到原始 Topic</li><li>Consumer 正常消费</li></ul></li></ol><p><strong>示例代码</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Message</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">&quot;TestTopic&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello Delay&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
msg<span class="token punctuation">.</span><span class="token function">setDelayTimeLevel</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置延迟级别 3（对应 10 秒）</span>
producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">RocketMQ 延迟消息关键设计</p></div><table><thead><tr><th><strong>组件</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>ScheduleTopic</strong></td><td>存储所有延迟消息（内部 Topic，对用户透明）</td></tr><tr><td><strong>TimerWheel</strong></td><td>高效触发延迟任务（O(1) 时间复杂度）</td></tr><tr><td><strong>定时线程</strong></td><td>每秒扫描时间轮，将到期消息移出延迟队列</td></tr></tbody></table><p><strong>特点</strong></p><ul><li><strong>固定延迟级别</strong>：不支持任意时间精度（如 23 秒）</li><li><strong>投递误差</strong>：±1 秒（依赖扫描间隔）</li><li><strong>高吞吐</strong>：时间轮算法避免遍历所有消息</li></ul><p><strong>注</strong>：RocketMQ 5.0+ 支持 <strong>定时消息</strong>（精确到毫秒），底层改用时间戳+哈希分片。</p><h3 id="【中等】rocketmq-的消息轨迹如何启用" tabindex="-1"><a class="header-anchor" href="#【中等】rocketmq-的消息轨迹如何启用" aria-hidden="true">#</a> 【中等】RocketMQ 的消息轨迹如何启用？</h3><ul><li><strong>作用</strong>：跟踪消息的完整生命周期（生产、存储、消费）。</li><li><strong>实现方式</strong>：轨迹数据本身作为消息存储在内部 Topic（默认 <code>RMQ_SYS_TRACE_TOPIC</code>）。</li></ul><div class="hint-container info"><p class="hint-container-title">消息轨迹启用步骤</p></div><p><strong>Broker 端</strong></p><ul><li><strong>修改配置</strong>：在 <code>broker.conf</code> 中添加 <code>traceTopicEnable=true</code></li><li><strong>重启生效</strong>：修改后必须重启 Broker</li></ul><p><strong>生产者端</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">DefaultMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">&quot;group_name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 关键配置：启用轨迹</span>
producer<span class="token punctuation">.</span><span class="token function">setUseTracing</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// producer.setTraceTopic(&quot;Your_Trace_Topic&quot;); // 可选：自定义轨迹Topic</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>消费者端</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">DefaultMQPushConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">&quot;group_name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 关键配置：启用轨迹</span>
consumer<span class="token punctuation">.</span><span class="token function">setUseTracing</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>验证方法</strong></p><ol><li><strong>查看轨迹 Topic</strong>：在控制台确认 <code>RMQ_SYS_TRACE_TOPIC</code> 存在</li><li><strong>查询具体消息</strong>：在控制台 Message 页面： <ul><li>输入 Message ID/Key 搜索</li><li>点击 <strong>Trace</strong> 按钮查看详细轨迹图</li></ul></li></ol><p><strong>注意事项</strong></p><ul><li><strong>性能开销</strong>：会带来额外的 CPU/网络消耗和存储占用</li><li><strong>存储成本</strong>：轨迹数据占用磁盘空间，需监控清理</li><li><strong>生产建议</strong>：推荐开启，便于问题排查（消息丢失、重复、消费慢等）</li></ul><h2 id="rocketmq-事务" tabindex="-1"><a class="header-anchor" href="#rocketmq-事务" aria-hidden="true">#</a> RocketMQ 事务</h2><h3 id="【中等】rocketmq-如何实现幂等性-🌟" tabindex="-1"><a class="header-anchor" href="#【中等】rocketmq-如何实现幂等性-🌟" aria-hidden="true">#</a> 【中等】RocketMQ 如何实现幂等性？🌟</h3><p><strong>RocketMQ 不提供内置幂等性</strong>，需由业务系统自行实现。</p><ul><li><p><strong>幂等键设计</strong>：</p><ul><li>使用<strong>业务唯一标识</strong>（如 <code>orderId</code>），而非 <code>messageId</code></li><li>推荐格式：<code>业务类型:业务ID</code>（如 <code>order_pay:123</code>）</li></ul></li><li><p><strong>处理流程</strong>：</p><ul><li>先检查幂等键 → 再执行业务逻辑</li><li>业务操作与幂等记录写入必须在同一事务中</li></ul></li><li><p><strong>选型建议</strong>：</p><ul><li><strong>核心业务</strong>：首选数据库唯一键方案</li><li><strong>高并发场景</strong>：可选用Redis方案</li><li><strong>状态业务</strong>：状态机方案作为补充保障</li></ul></li></ul><h3 id="【困难】事务消息是如何工作的-🌟🌟🌟" tabindex="-1"><a class="header-anchor" href="#【困难】事务消息是如何工作的-🌟🌟🌟" aria-hidden="true">#</a> 【困难】事务消息是如何工作的？🌟🌟🌟</h3><p>MQ 事务方案本质是利用 MQ 功能实现的本地消息表。事务消息需要消息队列提供相应的功能才能实现，Kafka 和 RocketMQ 都提供了事务相关功能。</p><ul><li><strong>Kafka</strong> 的解决方案是：直接抛出异常，让用户自行处理。用户可以在业务代码中反复重试提交，直到提交成功，或者删除之前修改的数据记录进行事务补偿。</li><li><strong>RocketMQ</strong> 的解决方案是：通过事务反查机制来解决事务消息提交失败的问题。如果 Producer 在提交或者回滚事务消息时发生网络异常，RocketMQ 的 Broker 没有收到提交或者回滚的请求，Broker 会定期去 Producer 上反查这个事务对应的本地事务的状态，然后根据反查结果决定提交或者回滚这个事务。为了支撑这个事务反查机制，业务代码需要实现一个反查本地事务状态的接口，告知 RocketMQ 本地事务是成功还是失败。</li></ul><div class="hint-container info"><p class="hint-container-title">RocketMQ 事务消息实现</p></div><p>事务消息是 Apache RocketMQ 提供的一种困难消息类型，支持在分布式场景下保障消息生产和本地事务的最终一致性。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/202509282123347.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>事务消息处理流程</strong></p>`,44),x=t("li",null,"生产者将消息发送至 Apache RocketMQ 服务端。",-1),b=t("li",null,'Apache RocketMQ 服务端将消息持久化成功之后，向生产者返回 Ack 确认消息已经发送成功，此时消息被标记为"暂不能投递"，这种状态下的消息即为半事务消息。',-1),M=t("li",null,"生产者开始执行本地事务逻辑。",-1),Q=t("li",null,[n("生产者根据本地事务执行结果向服务端提交二次确认结果（Commit 或是 Rollback），服务端收到确认结果后处理逻辑如下： "),t("ul",null,[t("li",null,"二次确认结果为 Commit：服务端将半事务消息标记为可投递，并投递给消费者。"),t("li",null,"二次确认结果为 Rollback：服务端将回滚事务，不会将半事务消息投递给消费者。")])],-1),R=t("strong",null,"说明",-1),S={href:"https://rocketmq.apache.org/zh/docs/introduction/03limits",target:"_blank",rel:"noopener noreferrer"},C=t("li",null,"生产者收到消息回查后，需要检查对应消息的本地事务执行的最终结果。",-1),q=t("li",null,"生产者根据检查到的本地事务的最终状态再次提交二次确认，服务端仍按照步骤 4 对半事务消息进行处理。",-1),B=l('<div class="hint-container info"><p class="hint-container-title">本地消息表 vs. 事务消息</p></div><ul><li><strong>本地消息表</strong>：<strong>业务与消息耦合</strong>，通过<strong>数据库+自研任务</strong>保证可靠性。</li><li><strong>RocketMQ 事务消息</strong>：<strong>业务与消息解耦</strong>，通过<strong>MQ 框架机制</strong>保证可靠性。</li></ul><p><strong>本地消息表 vs. 事务消息</strong></p><table><thead><tr><th style="text-align:left;">维度</th><th style="text-align:left;">本地消息表</th><th style="text-align:left;">RocketMQ 事务消息</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>核心机制</strong></td><td style="text-align:left;">数据库事务 + 定时任务扫表</td><td style="text-align:left;">半消息 + 事务回查</td></tr><tr><td style="text-align:left;"><strong>性能</strong></td><td style="text-align:left;">中（受数据库限制）</td><td style="text-align:left;"><strong>高</strong>（由 MQ 保障）</td></tr><tr><td style="text-align:left;"><strong>侵入性</strong></td><td style="text-align:left;"><strong>低</strong>（只需写库）</td><td style="text-align:left;">中（需实现回查接口）</td></tr><tr><td style="text-align:left;"><strong>复杂度</strong></td><td style="text-align:left;">中（在应用侧，需自研任务）</td><td style="text-align:left;">中（在框架侧，开箱即用）</td></tr><tr><td style="text-align:left;"><strong>耦合度</strong></td><td style="text-align:left;"><strong>与数据库耦合</strong></td><td style="text-align:left;"><strong>与 RocketMQ 耦合</strong></td></tr><tr><td style="text-align:left;"><strong>通用性</strong></td><td style="text-align:left;"><strong>高</strong>（适配任何 MQ）</td><td style="text-align:left;">低（仅限 RocketMQ）</td></tr></tbody></table><p><strong>技术选型</strong></p><ul><li><strong>选本地消息表</strong>：追求<strong>通用解</strong>、技术栈多样、消息量适中。</li><li><strong>选 RocketMQ 事务消息</strong>：技术栈已定、追求<strong>高性能</strong>、希望减少自研成本。</li></ul><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>',7),_={href:"https://www.mianshiya.com/bank/1850081899830079490",target:"_blank",rel:"noopener noreferrer"};function T(w,N){const c=i("Tabs"),r=i("ExternalLinkIcon");return g(),d("div",null,[k,o(c,{id:"1876",data:[{id:"并发消费配置"},{id:"顺序消费配置"}],"tab-id":"并发消费和顺序消费示例"},{title0:s(({value:e,isActive:a})=>[n("并发消费配置")]),title1:s(({value:e,isActive:a})=>[n("顺序消费配置")]),tab0:s(({value:e,isActive:a})=>[m,h]),tab1:s(({value:e,isActive:a})=>[f,v]),_:1}),y,t("ol",null,[x,b,M,Q,t("li",null,[n("在断网或者是生产者应用重启的特殊情况下，若服务端未收到发送者提交的二次确认结果，或服务端收到的二次确认结果为 Unknown 未知状态，经过固定时间后，服务端将对消息生产者即生产者集群中任一生产者实例发起消息回查。 "),R,n(" 服务端回查的间隔时间和最大回查次数，请参见 "),t("a",S,[n("参数限制"),o(r)]),n("。")]),C,q]),B,t("ul",null,[t("li",null,[t("a",_,[n("面试鸭 - RocketMQ 面试"),o(r)])])])])}const E=p(u,[["render",T],["__file","index.html.vue"]]);export{E as default};
