const e=JSON.parse('{"key":"v-463ade26","path":"/pages/636c83cc/","title":"设计模式之备忘录模式","lang":"zh-CN","frontmatter":{"title":"设计模式之备忘录模式","date":"2015-01-22T15:26:00.000Z","order":21,"permalink":"/pages/636c83cc/","category":["设计","设计模式"],"tag":["设计","设计模式"],"description":"设计模式之备忘录模式 意图 备忘录模式（Memento） 是一种行为设计模式， 允许在不暴露对象实现细节的情况下保存和恢复对象之前的状态。 适用场景 当你需要创建对象状态快照来恢复其之前的状态时， 可以使用备忘录模式。 当直接访问对象的成员变量、 获取器或设置器将导致封装被突破时， 可以使用该模式。 结构 结构说明 基于嵌套类的实现 img","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/636c83cc/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"设计模式之备忘录模式"}],["meta",{"property":"og:description","content":"设计模式之备忘录模式 意图 备忘录模式（Memento） 是一种行为设计模式， 允许在不暴露对象实现细节的情况下保存和恢复对象之前的状态。 适用场景 当你需要创建对象状态快照来恢复其之前的状态时， 可以使用备忘录模式。 当直接访问对象的成员变量、 获取器或设置器将导致封装被突破时， 可以使用该模式。 结构 结构说明 基于嵌套类的实现 img"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-15T00:29:21.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"设计"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2015-01-22T15:26:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-15T00:29:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式之备忘录模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2015-01-22T15:26:00.000Z\\",\\"dateModified\\":\\"2025-09-15T00:29:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"意图","slug":"意图","link":"#意图","children":[]},{"level":2,"title":"适用场景","slug":"适用场景","link":"#适用场景","children":[]},{"level":2,"title":"结构","slug":"结构","link":"#结构","children":[{"level":3,"title":"结构说明","slug":"结构说明","link":"#结构说明","children":[]},{"level":3,"title":"结构代码范式","slug":"结构代码范式","link":"#结构代码范式","children":[]}]},{"level":2,"title":"伪代码","slug":"伪代码","link":"#伪代码","children":[]},{"level":2,"title":"与其他模式的关系","slug":"与其他模式的关系","link":"#与其他模式的关系","children":[]},{"level":2,"title":"案例","slug":"案例","link":"#案例","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1757896161000,"updatedTime":1757896161000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":1}]},"readingTime":{"minutes":7.08,"words":2124},"filePathRelative":"03.设计/设计模式/备忘录模式.md","localizedDate":"2015年1月22日","excerpt":"<h1> 设计模式之备忘录模式</h1>\\n<h2> 意图</h2>\\n<p><strong>备忘录模式</strong>（Memento） 是一种行为设计模式， 允许在不暴露对象实现细节的情况下保存和恢复对象之前的状态。</p>\\n<h2> 适用场景</h2>\\n<ul>\\n<li>当你需要创建对象状态快照来恢复其之前的状态时， 可以使用备忘录模式。</li>\\n<li>当直接访问对象的成员变量、 获取器或设置器将导致封装被突破时， 可以使用该模式。</li>\\n</ul>\\n<h2> 结构</h2>\\n<h3> 结构说明</h3>\\n<h4> 基于嵌套类的实现</h4>\\n<figure><img src=\\"https://raw.githubusercontent.com/dunwu/images/master/snap/20210520172952.png\\" alt=\\"img\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>img</figcaption></figure>","autoDesc":true}');export{e as data};
