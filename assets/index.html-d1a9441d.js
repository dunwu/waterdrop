const e=JSON.parse('{"key":"v-70ac828c","path":"/pages/f1d21634/","title":"设计模式之访问者模式","lang":"zh-CN","frontmatter":{"title":"设计模式之访问者模式","date":"2015-01-22T18:25:00.000Z","order":23,"permalink":"/pages/f1d21634/","category":["设计","设计模式"],"tag":["设计","设计模式"],"description":"设计模式之访问者模式 意图 访问者模式（Visitor） 是一种行为设计模式， 它能将算法与其所作用的对象隔离开来。 适用场景 如果你需要对一个复杂对象结构 （例如对象树） 中的所有元素执行某些操作， 可使用访问者模式。 可使用访问者模式来清理辅助行为的业务逻辑。 当某个行为仅在类层次结构中的一些类中有意义， 而在其他类中没有意义时， 可使用该模式。 结构 结构说明 img","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/f1d21634/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"设计模式之访问者模式"}],["meta",{"property":"og:description","content":"设计模式之访问者模式 意图 访问者模式（Visitor） 是一种行为设计模式， 它能将算法与其所作用的对象隔离开来。 适用场景 如果你需要对一个复杂对象结构 （例如对象树） 中的所有元素执行某些操作， 可使用访问者模式。 可使用访问者模式来清理辅助行为的业务逻辑。 当某个行为仅在类层次结构中的一些类中有意义， 而在其他类中没有意义时， 可使用该模式。 结构 结构说明 img"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-15T00:29:21.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"设计"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2015-01-22T18:25:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-15T00:29:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式之访问者模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2015-01-22T18:25:00.000Z\\",\\"dateModified\\":\\"2025-09-15T00:29:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"意图","slug":"意图","link":"#意图","children":[]},{"level":2,"title":"适用场景","slug":"适用场景","link":"#适用场景","children":[]},{"level":2,"title":"结构","slug":"结构","link":"#结构","children":[{"level":3,"title":"结构说明","slug":"结构说明","link":"#结构说明","children":[]},{"level":3,"title":"结构代码范式","slug":"结构代码范式","link":"#结构代码范式","children":[]}]},{"level":2,"title":"伪代码","slug":"伪代码","link":"#伪代码","children":[]},{"level":2,"title":"案例","slug":"案例","link":"#案例","children":[]},{"level":2,"title":"与其他模式的关系","slug":"与其他模式的关系","link":"#与其他模式的关系","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1757896161000,"updatedTime":1757896161000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":1}]},"readingTime":{"minutes":5.47,"words":1640},"filePathRelative":"03.设计/设计模式/访问者模式.md","localizedDate":"2015年1月22日","excerpt":"<h1> 设计模式之访问者模式</h1>\\n<h2> 意图</h2>\\n<p><strong>访问者模式</strong>（Visitor） 是一种行为设计模式， 它能将算法与其所作用的对象隔离开来。</p>\\n<h2> 适用场景</h2>\\n<ul>\\n<li>如果你需要对一个复杂对象结构 （例如对象树） 中的所有元素执行某些操作， 可使用访问者模式。</li>\\n<li>可使用访问者模式来清理辅助行为的业务逻辑。</li>\\n<li>当某个行为仅在类层次结构中的一些类中有意义， 而在其他类中没有意义时， 可使用该模式。</li>\\n</ul>\\n<h2> 结构</h2>\\n<h3> 结构说明</h3>\\n<figure><img src=\\"https://raw.githubusercontent.com/dunwu/images/master/snap/20210524103007.png\\" alt=\\"img\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>img</figcaption></figure>","autoDesc":true}');export{e as data};
