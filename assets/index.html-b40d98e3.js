const e=JSON.parse('{"key":"v-f79ea914","path":"/pages/f0152fb5/","title":"《极客时间教程 - 高并发系统设计 40 问》笔记","lang":"zh-CN","frontmatter":{"title":"《极客时间教程 - 高并发系统设计 40 问》笔记","date":"2021-08-05T23:42:00.000Z","permalink":"/pages/f0152fb5/","category":["笔记","设计"],"tag":["设计","架构","高并发"],"description":"《极客时间教程 - 高并发系统设计 40 问》笔记 基础篇 高并发系统：它的通用设计方法是什么？ 并发、异步、缓存 架构分层：我们为什么一定要这么做？ 分层架构典型代表： MVC（Model-View-Controller） 表现层、逻辑层和数据访问层 OSI 七层网络模型 分层的好处 分层的设计可以简化系统设计，让不同的人专注做某一层次的事情。 再有，分层之后可以做到很高的复用。 分层架构可以让我们更容易做横向扩展。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/f0152fb5/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"《极客时间教程 - 高并发系统设计 40 问》笔记"}],["meta",{"property":"og:description","content":"《极客时间教程 - 高并发系统设计 40 问》笔记 基础篇 高并发系统：它的通用设计方法是什么？ 并发、异步、缓存 架构分层：我们为什么一定要这么做？ 分层架构典型代表： MVC（Model-View-Controller） 表现层、逻辑层和数据访问层 OSI 七层网络模型 分层的好处 分层的设计可以简化系统设计，让不同的人专注做某一层次的事情。 再有，分层之后可以做到很高的复用。 分层架构可以让我们更容易做横向扩展。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-13T09:10:08.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"设计"}],["meta",{"property":"article:tag","content":"架构"}],["meta",{"property":"article:tag","content":"高并发"}],["meta",{"property":"article:published_time","content":"2021-08-05T23:42:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-13T09:10:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"《极客时间教程 - 高并发系统设计 40 问》笔记\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-08-05T23:42:00.000Z\\",\\"dateModified\\":\\"2025-09-13T09:10:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"基础篇","slug":"基础篇","link":"#基础篇","children":[{"level":3,"title":"高并发系统：它的通用设计方法是什么？","slug":"高并发系统-它的通用设计方法是什么","link":"#高并发系统-它的通用设计方法是什么","children":[]},{"level":3,"title":"架构分层：我们为什么一定要这么做？","slug":"架构分层-我们为什么一定要这么做","link":"#架构分层-我们为什么一定要这么做","children":[]},{"level":3,"title":"系统设计目标（一）：如何提升系统性能？","slug":"系统设计目标-一-如何提升系统性能","link":"#系统设计目标-一-如何提升系统性能","children":[]},{"level":3,"title":"系统设计目标（二）：系统怎样做到高可用？","slug":"系统设计目标-二-系统怎样做到高可用","link":"#系统设计目标-二-系统怎样做到高可用","children":[]},{"level":3,"title":"系统设计目标（三）：如何让系统易于扩展？","slug":"系统设计目标-三-如何让系统易于扩展","link":"#系统设计目标-三-如何让系统易于扩展","children":[]}]},{"level":2,"title":"数据库篇","slug":"数据库篇","link":"#数据库篇","children":[{"level":3,"title":"数据库优化方案（一）：查询请求增加时，如何做主从分离？","slug":"数据库优化方案-一-查询请求增加时-如何做主从分离","link":"#数据库优化方案-一-查询请求增加时-如何做主从分离","children":[]},{"level":3,"title":"数据库优化方案（二）：写入数据量增加时，如何实现分库分表？","slug":"数据库优化方案-二-写入数据量增加时-如何实现分库分表","link":"#数据库优化方案-二-写入数据量增加时-如何实现分库分表","children":[]},{"level":3,"title":"发号器：如何保证分库分表后 ID 的全局唯一性？","slug":"发号器-如何保证分库分表后-id-的全局唯一性","link":"#发号器-如何保证分库分表后-id-的全局唯一性","children":[]},{"level":3,"title":"NoSQL：在高并发场景下，数据库和 NoSQL 如何做到互补？","slug":"nosql-在高并发场景下-数据库和-nosql-如何做到互补","link":"#nosql-在高并发场景下-数据库和-nosql-如何做到互补","children":[]}]},{"level":2,"title":"缓存篇","slug":"缓存篇","link":"#缓存篇","children":[{"level":3,"title":"缓存：数据库成为瓶颈后，动态数据的查询要如何加速？","slug":"缓存-数据库成为瓶颈后-动态数据的查询要如何加速","link":"#缓存-数据库成为瓶颈后-动态数据的查询要如何加速","children":[]},{"level":3,"title":"缓存的使用姿势（一）：如何选择缓存的读写策略？","slug":"缓存的使用姿势-一-如何选择缓存的读写策略","link":"#缓存的使用姿势-一-如何选择缓存的读写策略","children":[]},{"level":3,"title":"Cache Aside（旁路缓存）策略","slug":"cache-aside-旁路缓存-策略","link":"#cache-aside-旁路缓存-策略","children":[]},{"level":3,"title":"Write Back（写回）策略","slug":"write-back-写回-策略","link":"#write-back-写回-策略","children":[]},{"level":3,"title":"缓存的使用姿势（二）：缓存如何做到高可用？","slug":"缓存的使用姿势-二-缓存如何做到高可用","link":"#缓存的使用姿势-二-缓存如何做到高可用","children":[]},{"level":3,"title":"缓存的使用姿势（三）：缓存穿透了怎么办？","slug":"缓存的使用姿势-三-缓存穿透了怎么办","link":"#缓存的使用姿势-三-缓存穿透了怎么办","children":[]}]},{"level":2,"title":"消息队列篇","slug":"消息队列篇","link":"#消息队列篇","children":[{"level":3,"title":"消息队列：秒杀时如何处理每秒上万次的下单请求？","slug":"消息队列-秒杀时如何处理每秒上万次的下单请求","link":"#消息队列-秒杀时如何处理每秒上万次的下单请求","children":[]},{"level":3,"title":"消息投递：如何保证消息仅仅被消费一次？","slug":"消息投递-如何保证消息仅仅被消费一次","link":"#消息投递-如何保证消息仅仅被消费一次","children":[]},{"level":3,"title":"系统架构：每秒 1 万次请求的系统要做服务化拆分吗？","slug":"系统架构-每秒-1-万次请求的系统要做服务化拆分吗","link":"#系统架构-每秒-1-万次请求的系统要做服务化拆分吗","children":[]},{"level":3,"title":"微服务架构：微服务化后，系统架构要如何改造？","slug":"微服务架构-微服务化后-系统架构要如何改造","link":"#微服务架构-微服务化后-系统架构要如何改造","children":[]}]},{"level":2,"title":"分布式服务篇","slug":"分布式服务篇","link":"#分布式服务篇","children":[]},{"level":2,"title":"维护篇","slug":"维护篇","link":"#维护篇","children":[{"level":3,"title":"给系统加上眼睛：服务端监控要怎么做？","slug":"给系统加上眼睛-服务端监控要怎么做","link":"#给系统加上眼睛-服务端监控要怎么做","children":[]},{"level":3,"title":"应用性能管理：用户的使用体验应该如何监控？","slug":"应用性能管理-用户的使用体验应该如何监控","link":"#应用性能管理-用户的使用体验应该如何监控","children":[]},{"level":3,"title":"压力测试：怎样设计全链路压力测试平台？","slug":"压力测试-怎样设计全链路压力测试平台","link":"#压力测试-怎样设计全链路压力测试平台","children":[]},{"level":3,"title":"配置管理：成千上万的配置项要如何管理？","slug":"配置管理-成千上万的配置项要如何管理","link":"#配置管理-成千上万的配置项要如何管理","children":[]}]},{"level":2,"title":"实战篇","slug":"实战篇","link":"#实战篇","children":[]}],"git":{"createdTime":1757754608000,"updatedTime":1757754608000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":1}]},"readingTime":{"minutes":7.33,"words":2199},"filePathRelative":"00.笔记/03.设计/极客时间教程-高并发系统设计40问笔记.md","localizedDate":"2021年8月5日","excerpt":"<h1> 《极客时间教程 - 高并发系统设计 40 问》笔记</h1>\\n<h2> 基础篇</h2>\\n<h3> 高并发系统：它的通用设计方法是什么？</h3>\\n<p>并发、异步、缓存</p>\\n<h3> 架构分层：我们为什么一定要这么做？</h3>\\n<p>分层架构典型代表：</p>\\n<ul>\\n<li>MVC（Model-View-Controller）</li>\\n<li>表现层、逻辑层和数据访问层</li>\\n<li>OSI 七层网络模型</li>\\n</ul>\\n<p>分层的好处</p>\\n<ul>\\n<li><strong>分层的设计可以简化系统设计，让不同的人专注做某一层次的事情。</strong></li>\\n<li><strong>再有，分层之后可以做到很高的复用。</strong></li>\\n<li><strong>分层架构可以让我们更容易做横向扩展。</strong></li>\\n</ul>","autoDesc":true}');export{e as data};
