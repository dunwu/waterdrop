import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as i,c as t,a as e,b as s,d as a,e as o}from"./app-c623f975.js";const r={},d=o('<h1 id="flume" tabindex="-1"><a class="header-anchor" href="#flume" aria-hidden="true">#</a> Flume</h1><h2 id="flume-简介" tabindex="-1"><a class="header-anchor" href="#flume-简介" aria-hidden="true">#</a> Flume 简介</h2><p>Apache Flume 是一个分布式，高可用的数据收集系统。它可以从不同的数据源收集数据，经过聚合后发送到存储系统中，通常用于日志数据的收集。Flume 分为 NG 和 OG (1.0 之前） 两个版本，NG 在 OG 的基础上进行了完全的重构，是目前使用最为广泛的版本。下面的介绍均以 NG 为基础。</p><h2 id="flume-架构" tabindex="-1"><a class="header-anchor" href="#flume-架构" aria-hidden="true">#</a> Flume 架构</h2><figure><img src="https://flume.apache.org/releases/content/1.11.0/_images/UserGuide_image00.png" alt="Agent component diagram" tabindex="0" loading="lazy"><figcaption>Agent component diagram</figcaption></figure><p>外部数据源以特定格式向 Flume 发送 <code>events</code> （事件），当 <code>source</code> 接收到 <code>events</code> 时，它将其存储到一个或多个 <code>channel</code>，<code>channel</code> 会一直保存 <code>events</code> 直到它被 <code>sink</code> 所消费。<code>sink</code> 的主要功能从 <code>channel</code> 中读取 <code>events</code>，并将其存入外部存储系统或转发到下一个 <code>source</code>，成功后再从 <code>channel</code> 中移除 <code>events</code>。</p><p>Flume 基本概念</p><ul><li><strong>Event</strong> - <code>Event</code> 是 Flume NG 数据传输的基本单元。类似于 JMS 和消息系统中的消息。一个 <code>Event</code> 由标题和正文组成：前者是键/值映射，后者是任意字节数组。</li><li><strong>Agent</strong> - 是一个独立的 (JVM) 进程，包含 <code>Source</code>、 <code>Channel</code>、 <code>Sink</code> 等组件。 <ul><li><strong>Source</strong> - 数据收集组件，从外部数据源收集数据，并存储到 Channel 中。</li><li><strong>Channel</strong> - <code>Channel</code> 是源和接收器之间的管道，用于临时存储数据。可以是内存或持久化的文件系统： <ul><li><code>Memory Channel</code> : 使用内存，优点是速度快，但数据可能会丢失 （如突然宕机）；</li><li><code>File Channel</code> : 使用持久化的文件系统，优点是能保证数据不丢失，但是速度慢。</li></ul></li><li><strong>Sink</strong> - <code>Sink</code> 的主要功能从 <code>Channel</code> 中读取 <code>Event</code>，并将其存入外部存储系统或将其转发到下一个 <code>Source</code>，成功后再从 <code>Channel</code> 中移除 <code>Event</code>。</li></ul></li></ul><p>Flume 组件种类</p><p>Flume 中的每一个组件都提供了丰富的类型，适用于不同场景：</p><ul><li>Source 类型 ：内置了几十种类型，如 <code>Avro Source</code>，<code>Thrift Source</code>，<code>Kafka Source</code>，<code>JMS Source</code>；</li><li>Sink 类型 ：<code>HDFS Sink</code>，<code>Hive Sink</code>，<code>HBaseSinks</code>，<code>Avro Sink</code> 等；</li><li>Channel 类型 ：<code>Memory Channel</code>，<code>JDBC Channel</code>，<code>Kafka Channel</code>，<code>File Channel</code> 等。</li></ul>',11),p={href:"http://flume.apache.org/releases/content/1.9.0/FlumeUserGuide.html",target:"_blank",rel:"noopener noreferrer"},u=o(`<h2 id="flume-架构模式" tabindex="-1"><a class="header-anchor" href="#flume-架构模式" aria-hidden="true">#</a> Flume 架构模式</h2><p>Flume 支持多种架构模式，分别介绍如下</p><h3 id="multi-agent-flow" tabindex="-1"><a class="header-anchor" href="#multi-agent-flow" aria-hidden="true">#</a> multi-agent flow</h3><figure><img src="https://flume.apache.org/releases/content/1.11.0/_images/UserGuide_image03.png" alt="Two agents communicating over Avro RPC" tabindex="0" loading="lazy"><figcaption>Two agents communicating over Avro RPC</figcaption></figure><p>Flume 支持跨越多个 Agent 的数据传递，这要求前一个 Agent 的 Sink 和下一个 Agent 的 Source 都必须是 <code>Avro</code> 类型，Sink 指向 Source 所在主机名 （或 IP 地址） 和端口（详细配置见下文案例三）。</p><h3 id="consolidation" tabindex="-1"><a class="header-anchor" href="#consolidation" aria-hidden="true">#</a> Consolidation</h3><figure><img src="https://flume.apache.org/releases/content/1.11.0/_images/UserGuide_image02.png" alt="A fan-in flow using Avro RPC to consolidate events in one place" tabindex="0" loading="lazy"><figcaption>A fan-in flow using Avro RPC to consolidate events in one place</figcaption></figure><p>日志收集中常常存在大量的客户端（比如分布式 web 服务），Flume 支持使用多个 Agent 分别收集日志，然后通过一个或者多个 Agent 聚合后再存储到文件系统中。</p><h3 id="multiplexing-the-flow" tabindex="-1"><a class="header-anchor" href="#multiplexing-the-flow" aria-hidden="true">#</a> Multiplexing the flow</h3><figure><img src="https://flume.apache.org/releases/content/1.11.0/_images/UserGuide_image01.png" alt="A fan-out flow using a (multiplexing) channel selector" tabindex="0" loading="lazy"><figcaption>A fan-out flow using a (multiplexing) channel selector</figcaption></figure><p>Flume 支持从一个 Source 向多个 Channel，也就是向多个 Sink 传递事件，这个操作称之为 <code>Fan Out</code>（扇出）。默认情况下 <code>Fan Out</code> 是向所有的 Channel 复制 <code>Event</code>，即所有 Channel 收到的数据都是相同的。同时 Flume 也支持在 <code>Source</code> 上自定义一个复用选择器 (multiplexing selector) 来实现自定义的路由规则。</p><h2 id="flume-配置格式" tabindex="-1"><a class="header-anchor" href="#flume-配置格式" aria-hidden="true">#</a> Flume 配置格式</h2><p>Flume 配置通常需要以下两个步骤：</p><p>（1）分别定义好 Agent 的 Sources，Sinks，Channels，然后将 Sources 和 Sinks 与通道进行绑定。需要注意的是一个 Source 可以配置多个 Channel，但一个 Sink 只能配置一个 Channel。基本格式如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&lt;</span>Agent<span class="token operator">&gt;</span>.sources <span class="token operator">=</span> <span class="token operator">&lt;</span>Source<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>Agent<span class="token operator">&gt;</span>.sinks <span class="token operator">=</span> <span class="token operator">&lt;</span>Sink<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>Agent<span class="token operator">&gt;</span>.channels <span class="token operator">=</span> <span class="token operator">&lt;</span>Channel<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> <span class="token operator">&lt;</span>Channel<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>

<span class="token comment"># set channel for source</span>
<span class="token operator">&lt;</span>Agent<span class="token operator">&gt;</span>.sources.<span class="token operator">&lt;</span>Source<span class="token operator">&gt;</span>.channels <span class="token operator">=</span> <span class="token operator">&lt;</span>Channel<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> <span class="token operator">&lt;</span>Channel<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> <span class="token punctuation">..</span>.

<span class="token comment"># set channel for sink</span>
<span class="token operator">&lt;</span>Agent<span class="token operator">&gt;</span>.sinks.<span class="token operator">&lt;</span>Sink<span class="token operator">&gt;</span>.channel <span class="token operator">=</span> <span class="token operator">&lt;</span>Channel<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）分别定义 Source，Sink，Channel 的具体属性。基本格式如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&lt;</span>Agent<span class="token operator">&gt;</span>.sources.<span class="token operator">&lt;</span>Source<span class="token operator">&gt;</span>.<span class="token operator">&lt;</span>someProperty<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token operator">&lt;</span>someValue<span class="token operator">&gt;</span>

<span class="token comment"># properties for channels</span>
<span class="token operator">&lt;</span>Agent<span class="token operator">&gt;</span>.channel.<span class="token operator">&lt;</span>Channel<span class="token operator">&gt;</span>.<span class="token operator">&lt;</span>someProperty<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token operator">&lt;</span>someValue<span class="token operator">&gt;</span>

<span class="token comment"># properties for sinks</span>
<span class="token operator">&lt;</span>Agent<span class="token operator">&gt;</span>.sources.<span class="token operator">&lt;</span>Sink<span class="token operator">&gt;</span>.<span class="token operator">&lt;</span>someProperty<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token operator">&lt;</span>someValue<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="flume-使用案例" tabindex="-1"><a class="header-anchor" href="#flume-使用案例" aria-hidden="true">#</a> Flume 使用案例</h2><p>介绍几个 Flume 的使用案例：</p><ul><li>案例一：使用 Flume 监听文件内容变动，将新增加的内容输出到控制台。</li><li>案例二：使用 Flume 监听指定目录，将目录下新增加的文件存储到 HDFS。</li><li>案例三：使用 Avro 将本服务器收集到的日志数据发送到另外一台服务器。</li></ul><h3 id="案例一" tabindex="-1"><a class="header-anchor" href="#案例一" aria-hidden="true">#</a> 案例一</h3><p>需求： 监听文件内容变动，将新增加的内容输出到控制台。</p><p>实现： 主要使用 <code>Exec Source</code> 配合 <code>tail</code> 命令实现。</p><h4 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h4><p>新建配置文件 <code>exec-memory-logger.properties</code>, 其内容如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#指定 agent 的 sources,sinks,channels</span>
a1.sources <span class="token operator">=</span> s1  
a1.sinks <span class="token operator">=</span> k1  
a1.channels <span class="token operator">=</span> c1  
   
<span class="token comment">#配置 sources 属性</span>
a1.sources.s1.type <span class="token operator">=</span> <span class="token builtin class-name">exec</span>
a1.sources.s1.command <span class="token operator">=</span> <span class="token function">tail</span> <span class="token parameter variable">-F</span> /tmp/log.txt
a1.sources.s1.shell <span class="token operator">=</span> /bin/bash <span class="token parameter variable">-c</span>

<span class="token comment">#将 sources 与 channels 进行绑定</span>
a1.sources.s1.channels <span class="token operator">=</span> c1
   
<span class="token comment">#配置 sink </span>
a1.sinks.k1.type <span class="token operator">=</span> logger

<span class="token comment">#将 sinks 与 channels 进行绑定  </span>
a1.sinks.k1.channel <span class="token operator">=</span> c1  
   
<span class="token comment">#配置 channel 类型</span>
a1.channels.c1.type <span class="token operator">=</span> memory
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="启动" tabindex="-1"><a class="header-anchor" href="#启动" aria-hidden="true">#</a> 启动</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>flume-ng agent <span class="token punctuation">\\</span>
<span class="token parameter variable">--conf</span> conf <span class="token punctuation">\\</span>
--conf-file /usr/app/apache-flume-1.6.0-cdh5.15.2-bin/examples/exec-memory-logger.properties <span class="token punctuation">\\</span>
<span class="token parameter variable">--name</span> a1 <span class="token punctuation">\\</span>
<span class="token parameter variable">-Dflume.root.logger</span><span class="token operator">=</span>INFO,console
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h4><p>向文件中追加数据：</p>`,30),m={href:"https://camo.githubusercontent.com/794055bb44cd4142afdb34675eb08cf073a17173312d8df03ad8258a912bdc34/68747470733a2f2f67697465652e636f6d2f68656962616979696e672f426967446174612d4e6f7465732f7261772f6d61737465722f70696374757265732f666c756d652d6578616d706c652d312e706e67",target:"_blank",rel:"noopener noreferrer"},h=e("img",{src:"https://camo.githubusercontent.com/794055bb44cd4142afdb34675eb08cf073a17173312d8df03ad8258a912bdc34/68747470733a2f2f67697465652e636f6d2f68656962616979696e672f426967446174612d4e6f7465732f7261772f6d61737465722f70696374757265732f666c756d652d6578616d706c652d312e706e67",alt:"img",tabindex:"0",loading:"lazy"},null,-1),f=e("figcaption",null,"img",-1),v=e("p",null,"控制台的显示：",-1),b={href:"https://camo.githubusercontent.com/46bd80666a18249b3401cc778525ae664849a6b51a3d45c433adbf1c9bb5f7eb/68747470733a2f2f67697465652e636f6d2f68656962616979696e672f426967446174612d4e6f7465732f7261772f6d61737465722f70696374757265732f666c756d652d6578616d706c652d322e706e67",target:"_blank",rel:"noopener noreferrer"},k=e("img",{src:"https://camo.githubusercontent.com/46bd80666a18249b3401cc778525ae664849a6b51a3d45c433adbf1c9bb5f7eb/68747470733a2f2f67697465652e636f6d2f68656962616979696e672f426967446174612d4e6f7465732f7261772f6d61737465722f70696374757265732f666c756d652d6578616d706c652d322e706e67",alt:"img",tabindex:"0",loading:"lazy"},null,-1),g=e("figcaption",null,"img",-1),_=o(`<h3 id="案例二" tabindex="-1"><a class="header-anchor" href="#案例二" aria-hidden="true">#</a> 案例二</h3><p>需求： 监听指定目录，将目录下新增加的文件存储到 HDFS。</p><p>实现：使用 <code>Spooling Directory Source</code> 和 <code>HDFS Sink</code>。</p><h4 id="配置-1" tabindex="-1"><a class="header-anchor" href="#配置-1" aria-hidden="true">#</a> 配置</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#指定 agent 的 sources,sinks,channels</span>
a1.sources <span class="token operator">=</span> s1  
a1.sinks <span class="token operator">=</span> k1  
a1.channels <span class="token operator">=</span> c1  
   
<span class="token comment">#配置 sources 属性</span>
a1.sources.s1.type <span class="token operator">=</span>spooldir  
a1.sources.s1.spoolDir <span class="token operator">=</span>/tmp/logs
a1.sources.s1.basenameHeader <span class="token operator">=</span> <span class="token boolean">true</span>
a1.sources.s1.basenameHeaderKey <span class="token operator">=</span> fileName 
<span class="token comment">#将 sources 与 channels 进行绑定  </span>
a1.sources.s1.channels <span class="token operator">=</span>c1 

   
<span class="token comment">#配置 sink </span>
a1.sinks.k1.type <span class="token operator">=</span> hdfs
a1.sinks.k1.hdfs.path <span class="token operator">=</span> /flume/events/%y-%m-%d/%H/
a1.sinks.k1.hdfs.filePrefix <span class="token operator">=</span> %<span class="token punctuation">{</span>fileName<span class="token punctuation">}</span>
<span class="token comment">#生成的文件类型，默认是 Sequencefile，可用 DataStream，则为普通文本</span>
a1.sinks.k1.hdfs.fileType <span class="token operator">=</span> DataStream  
a1.sinks.k1.hdfs.useLocalTimeStamp <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token comment">#将 sinks 与 channels 进行绑定  </span>
a1.sinks.k1.channel <span class="token operator">=</span> c1
   
<span class="token comment">#配置 channel 类型</span>
a1.channels.c1.type <span class="token operator">=</span> memory
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="启动-1" tabindex="-1"><a class="header-anchor" href="#启动-1" aria-hidden="true">#</a> 启动</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>flume-ng agent <span class="token punctuation">\\</span>
<span class="token parameter variable">--conf</span> conf <span class="token punctuation">\\</span>
--conf-file /usr/app/apache-flume-1.6.0-cdh5.15.2-bin/examples/spooling-memory-hdfs.properties <span class="token punctuation">\\</span>
<span class="token parameter variable">--name</span> a1 <span class="token parameter variable">-Dflume.root.logger</span><span class="token operator">=</span>INFO,console
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="测试-1" tabindex="-1"><a class="header-anchor" href="#测试-1" aria-hidden="true">#</a> 测试</h4><p>拷贝任意文件到监听目录下，可以从日志看到文件上传到 HDFS 的路径：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># cp log.txt logs/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,10),x={href:"https://camo.githubusercontent.com/254c73acc86f6e95c78769a0fabfa454607f124314fa34472a9f754765d441cb/68747470733a2f2f67697465652e636f6d2f68656962616979696e672f426967446174612d4e6f7465732f7261772f6d61737465722f70696374757265732f666c756d652d6578616d706c652d332e706e67",target:"_blank",rel:"noopener noreferrer"},S=e("img",{src:"https://camo.githubusercontent.com/254c73acc86f6e95c78769a0fabfa454607f124314fa34472a9f754765d441cb/68747470733a2f2f67697465652e636f6d2f68656962616979696e672f426967446174612d4e6f7465732f7261772f6d61737465722f70696374757265732f666c756d652d6578616d706c652d332e706e67",alt:"img",tabindex:"0",loading:"lazy"},null,-1),F=e("figcaption",null,"img",-1),y=o(`<p>查看上传到 HDFS 上的文件内容与本地是否一致：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># hdfs dfs -cat /flume/events/19-04-09/13/log.txt.1554788567801</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2),C={href:"https://camo.githubusercontent.com/74240f5a53dbe0708725cdc065960d79a937aa64240b5d19c375b13fac11e6a5/68747470733a2f2f67697465652e636f6d2f68656962616979696e672f426967446174612d4e6f7465732f7261772f6d61737465722f70696374757265732f666c756d652d6578616d706c652d342e706e67",target:"_blank",rel:"noopener noreferrer"},A=e("img",{src:"https://camo.githubusercontent.com/74240f5a53dbe0708725cdc065960d79a937aa64240b5d19c375b13fac11e6a5/68747470733a2f2f67697465652e636f6d2f68656962616979696e672f426967446174612d4e6f7465732f7261772f6d61737465722f70696374757265732f666c756d652d6578616d706c652d342e706e67",alt:"img",tabindex:"0",loading:"lazy"},null,-1),E=e("figcaption",null,"img",-1),D=o(`<h3 id="案例三" tabindex="-1"><a class="header-anchor" href="#案例三" aria-hidden="true">#</a> 案例三</h3><p>需求： 将本服务器收集到的数据发送到另外一台服务器。</p><p>实现：使用 <code>avro sources</code> 和 <code>avro Sink</code> 实现。</p><h4 id="配置日志收集-flume" tabindex="-1"><a class="header-anchor" href="#配置日志收集-flume" aria-hidden="true">#</a> 配置日志收集 Flume</h4><p>新建配置 <code>netcat-memory-avro.properties</code>，监听文件内容变化，然后将新的文件内容通过 <code>avro sink</code> 发送到 hadoop001 这台服务器的 8888 端口：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#指定 agent 的 sources,sinks,channels</span>
a1.sources <span class="token operator">=</span> s1
a1.sinks <span class="token operator">=</span> k1
a1.channels <span class="token operator">=</span> c1

<span class="token comment">#配置 sources 属性</span>
a1.sources.s1.type <span class="token operator">=</span> <span class="token builtin class-name">exec</span>
a1.sources.s1.command <span class="token operator">=</span> <span class="token function">tail</span> <span class="token parameter variable">-F</span> /tmp/log.txt
a1.sources.s1.shell <span class="token operator">=</span> /bin/bash <span class="token parameter variable">-c</span>
a1.sources.s1.channels <span class="token operator">=</span> c1

<span class="token comment">#配置 sink</span>
a1.sinks.k1.type <span class="token operator">=</span> avro
a1.sinks.k1.hostname <span class="token operator">=</span> hadoop001
a1.sinks.k1.port <span class="token operator">=</span> <span class="token number">8888</span>
a1.sinks.k1.batch-size <span class="token operator">=</span> <span class="token number">1</span>
a1.sinks.k1.channel <span class="token operator">=</span> c1

<span class="token comment">#配置 channel 类型</span>
a1.channels.c1.type <span class="token operator">=</span> memory
a1.channels.c1.capacity <span class="token operator">=</span> <span class="token number">1000</span>
a1.channels.c1.transactionCapacity <span class="token operator">=</span> <span class="token number">100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="配置日志聚合-flume" tabindex="-1"><a class="header-anchor" href="#配置日志聚合-flume" aria-hidden="true">#</a> 配置日志聚合 Flume</h4><p>使用 <code>avro source</code> 监听 hadoop001 服务器的 8888 端口，将获取到内容输出到控制台：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#指定 agent 的 sources,sinks,channels</span>
a2.sources <span class="token operator">=</span> s2
a2.sinks <span class="token operator">=</span> k2
a2.channels <span class="token operator">=</span> c2

<span class="token comment">#配置 sources 属性</span>
a2.sources.s2.type <span class="token operator">=</span> avro
a2.sources.s2.bind <span class="token operator">=</span> hadoop001
a2.sources.s2.port <span class="token operator">=</span> <span class="token number">8888</span>

<span class="token comment">#将 sources 与 channels 进行绑定</span>
a2.sources.s2.channels <span class="token operator">=</span> c2

<span class="token comment">#配置 sink</span>
a2.sinks.k2.type <span class="token operator">=</span> logger

<span class="token comment">#将 sinks 与 channels 进行绑定</span>
a2.sinks.k2.channel <span class="token operator">=</span> c2

<span class="token comment">#配置 channel 类型</span>
a2.channels.c2.type <span class="token operator">=</span> memory
a2.channels.c2.capacity <span class="token operator">=</span> <span class="token number">1000</span>
a2.channels.c2.transactionCapacity <span class="token operator">=</span> <span class="token number">100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="启动-2" tabindex="-1"><a class="header-anchor" href="#启动-2" aria-hidden="true">#</a> 启动</h4><p>启动日志聚集 Flume：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>flume-ng agent <span class="token punctuation">\\</span>
<span class="token parameter variable">--conf</span> conf <span class="token punctuation">\\</span>
--conf-file /usr/app/apache-flume-1.6.0-cdh5.15.2-bin/examples/avro-memory-logger.properties <span class="token punctuation">\\</span>
<span class="token parameter variable">--name</span> a2 <span class="token parameter variable">-Dflume.root.logger</span><span class="token operator">=</span>INFO,console
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在启动日志收集 Flume:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>flume-ng agent <span class="token punctuation">\\</span>
<span class="token parameter variable">--conf</span> conf <span class="token punctuation">\\</span>
--conf-file /usr/app/apache-flume-1.6.0-cdh5.15.2-bin/examples/netcat-memory-avro.properties <span class="token punctuation">\\</span>
<span class="token parameter variable">--name</span> a1 <span class="token parameter variable">-Dflume.root.logger</span><span class="token operator">=</span>INFO,console
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里建议按以上顺序启动，原因是 <code>avro.source</code> 会先与端口进行绑定，这样 <code>avro sink</code> 连接时才不会报无法连接的异常。但是即使不按顺序启动也是没关系的，<code>sink</code> 会一直重试，直至建立好连接。</p>`,15),N={href:"https://camo.githubusercontent.com/05731fcc095f6f4d19ec46e8bcdd24b695ab5e331eb98ff30c053de3fb3f03b2/68747470733a2f2f67697465652e636f6d2f68656962616979696e672f426967446174612d4e6f7465732f7261772f6d61737465722f70696374757265732f666c756d652d72657472792e706e67",target:"_blank",rel:"noopener noreferrer"},w=e("img",{src:"https://camo.githubusercontent.com/05731fcc095f6f4d19ec46e8bcdd24b695ab5e331eb98ff30c053de3fb3f03b2/68747470733a2f2f67697465652e636f6d2f68656962616979696e672f426967446174612d4e6f7465732f7261772f6d61737465722f70696374757265732f666c756d652d72657472792e706e67",alt:"img",tabindex:"0",loading:"lazy"},null,-1),G=e("figcaption",null,"img",-1),z=e("h4",{id:"测试-2",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#测试-2","aria-hidden":"true"},"#"),s(" 测试")],-1),B=e("p",null,[s("向文件 "),e("code",null,"tmp/log.txt"),s(" 中追加内容：")],-1),H={href:"https://camo.githubusercontent.com/9e06f24ab35b86302054e9d23e177240c2d194ebded8113a089f2cb2e2bbba50/68747470733a2f2f67697465652e636f6d2f68656962616979696e672f426967446174612d4e6f7465732f7261772f6d61737465722f70696374757265732f666c756d652d6578616d706c652d382e706e67",target:"_blank",rel:"noopener noreferrer"},P=e("img",{src:"https://camo.githubusercontent.com/9e06f24ab35b86302054e9d23e177240c2d194ebded8113a089f2cb2e2bbba50/68747470733a2f2f67697465652e636f6d2f68656962616979696e672f426967446174612d4e6f7465732f7261772f6d61737465722f70696374757265732f666c756d652d6578616d706c652d382e706e67",alt:"img",tabindex:"0",loading:"lazy"},null,-1),O=e("figcaption",null,"img",-1),V=e("p",null,"可以看到已经从 8888 端口监听到内容，并成功输出到控制台：",-1),I={href:"https://camo.githubusercontent.com/a15934195f40ba109ee621c0cac0371278836088ded74240bfd5f4debea3ad62/68747470733a2f2f67697465652e636f6d2f68656962616979696e672f426967446174612d4e6f7465732f7261772f6d61737465722f70696374757265732f666c756d652d6578616d706c652d392e706e67",target:"_blank",rel:"noopener noreferrer"},U=e("img",{src:"https://camo.githubusercontent.com/a15934195f40ba109ee621c0cac0371278836088ded74240bfd5f4debea3ad62/68747470733a2f2f67697465652e636f6d2f68656962616979696e672f426967446174612d4e6f7465732f7261772f6d61737465722f70696374757265732f666c756d652d6578616d706c652d392e706e67",alt:"img",tabindex:"0",loading:"lazy"},null,-1),M=e("figcaption",null,"img",-1),T=e("h2",{id:"参考资料",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#参考资料","aria-hidden":"true"},"#"),s(" 参考资料")],-1),J={href:"https://flume.apache.org/",target:"_blank",rel:"noopener noreferrer"},R={href:"https://flume.apache.org/releases/content/1.11.0/FlumeUserGuide.html",target:"_blank",rel:"noopener noreferrer"},K={href:"https://github.com/heibaiying/BigData-Notes/blob/master/notes/Flume%E7%AE%80%E4%BB%8B%E5%8F%8A%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.md",target:"_blank",rel:"noopener noreferrer"};function L(q,j){const n=c("ExternalLinkIcon");return i(),t("div",null,[d,e("p",null,[s("对于 Flume 的使用，除非有特别的需求，否则通过组合内置的各种类型的 Source，Sink 和 Channel 就能满足大多数的需求。在 "),e("a",p,[s("Flume 官网"),a(n)]),s(" 上对所有类型组件的配置参数均以表格的方式做了详尽的介绍，并附有配置样例；同时不同版本的参数可能略有所不同，所以使用时建议选取官网对应版本的 User Guide 作为主要参考资料。")]),u,e("figure",null,[e("a",m,[h,a(n)]),f]),v,e("figure",null,[e("a",b,[k,a(n)]),g]),_,e("figure",null,[e("a",x,[S,a(n)]),F]),y,e("figure",null,[e("a",C,[A,a(n)]),E]),D,e("figure",null,[e("a",N,[w,a(n)]),G]),z,B,e("figure",null,[e("a",H,[P,a(n)]),O]),V,e("figure",null,[e("a",I,[U,a(n)]),M]),T,e("ul",null,[e("li",null,[e("a",J,[s("Flume 官网"),a(n)])]),e("li",null,[e("a",R,[s("Flume 官方文档"),a(n)])]),e("li",null,[e("a",K,[s("Flume 简介及基本使用"),a(n)])])])])}const X=l(r,[["render",L],["__file","index.html.vue"]]);export{X as default};
