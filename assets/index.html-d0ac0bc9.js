const e=JSON.parse('{"key":"v-305d741c","path":"/pages/69095ee8/","title":"设计模式之迭代器模式","lang":"zh-CN","frontmatter":{"title":"设计模式之迭代器模式","date":"2015-01-19T17:20:00.000Z","order":16,"permalink":"/pages/69095ee8/","category":["设计","设计模式"],"tag":["设计","设计模式"],"description":"设计模式之迭代器模式 意图 迭代器模式（Iterator） 是一种行为设计模式， 让你能在不暴露集合底层表现形式 （列表、 栈和树等） 的情况下遍历集合中所有的元素。 适用场景 当集合背后为复杂的数据结构， 且你希望对客户端隐藏其复杂性时 （出于使用便利性或安全性的考虑）， 可以使用迭代器模式。 使用该模式可以减少程序中重复的遍历代码。 如果你希望代码能够遍历不同的甚至是无法预知的数据结构， 可以使用迭代器模式。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/69095ee8/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"设计模式之迭代器模式"}],["meta",{"property":"og:description","content":"设计模式之迭代器模式 意图 迭代器模式（Iterator） 是一种行为设计模式， 让你能在不暴露集合底层表现形式 （列表、 栈和树等） 的情况下遍历集合中所有的元素。 适用场景 当集合背后为复杂的数据结构， 且你希望对客户端隐藏其复杂性时 （出于使用便利性或安全性的考虑）， 可以使用迭代器模式。 使用该模式可以减少程序中重复的遍历代码。 如果你希望代码能够遍历不同的甚至是无法预知的数据结构， 可以使用迭代器模式。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-18T15:46:22.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"设计"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2015-01-19T17:20:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-18T15:46:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式之迭代器模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2015-01-19T17:20:00.000Z\\",\\"dateModified\\":\\"2024-06-18T15:46:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"意图","slug":"意图","link":"#意图","children":[]},{"level":2,"title":"适用场景","slug":"适用场景","link":"#适用场景","children":[]},{"level":2,"title":"结构","slug":"结构","link":"#结构","children":[{"level":3,"title":"结构说明","slug":"结构说明","link":"#结构说明","children":[]},{"level":3,"title":"结构代码范式","slug":"结构代码范式","link":"#结构代码范式","children":[]}]},{"level":2,"title":"伪代码","slug":"伪代码","link":"#伪代码","children":[]},{"level":2,"title":"与其他模式的关系","slug":"与其他模式的关系","link":"#与其他模式的关系","children":[]},{"level":2,"title":"案例","slug":"案例","link":"#案例","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1651071272000,"updatedTime":1718725582000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":5}]},"readingTime":{"minutes":6.74,"words":2021},"filePathRelative":"03.设计/02.设计模式/16.迭代器模式.md","localizedDate":"2015年1月19日","excerpt":"<h1> 设计模式之迭代器模式</h1>\\n<h2> 意图</h2>\\n<p><strong>迭代器模式</strong>（Iterator） 是一种行为设计模式， 让你能在不暴露集合底层表现形式 （列表、 栈和树等） 的情况下遍历集合中所有的元素。</p>\\n<h2> 适用场景</h2>\\n<ul>\\n<li>当集合背后为复杂的数据结构， 且你希望对客户端隐藏其复杂性时 （出于使用便利性或安全性的考虑）， 可以使用迭代器模式。</li>\\n<li>使用该模式可以减少程序中重复的遍历代码。</li>\\n<li>如果你希望代码能够遍历不同的甚至是无法预知的数据结构， 可以使用迭代器模式。</li>\\n</ul>","autoDesc":true}');export{e as data};
