const e=JSON.parse('{"key":"v-c5c89aee","path":"/pages/04e4f5dd/","title":"领域驱动设计简介","lang":"zh-CN","frontmatter":{"title":"领域驱动设计简介","date":"2020-08-10T10:59:18.000Z","order":1,"permalink":"/pages/04e4f5dd/","category":["设计","DDD"],"tag":["设计","DDD"],"description":"领域驱动设计简介 DDD 简介 软件架构模式的演进 **第一阶段是单机架构：**采用面向过程的设计方法，系统包括客户端 UI 层和数据库两层，采用 C/S 架构模式，整个系统围绕数据库驱动设计和开发，并且总是从设计数据库和字段开始。 **第二阶段是集中式架构：**采用面向对象的设计方法，系统包括业务接入层、业务逻辑层和数据库层，采用经典的三层架构，也有部分应用采用传统的 SOA 架构。这种架构容易使系统变得臃肿，可扩展性和弹性伸缩性差。 **第三阶段是分布式微服务架构：**随着微服务架构理念的提出，集中式架构正向分布式微服务架构演进。微服务架构可以很好地实现应用之间的解耦，解决单体应用扩展性和弹性伸缩能力不足的问题。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/04e4f5dd/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"领域驱动设计简介"}],["meta",{"property":"og:description","content":"领域驱动设计简介 DDD 简介 软件架构模式的演进 **第一阶段是单机架构：**采用面向过程的设计方法，系统包括客户端 UI 层和数据库两层，采用 C/S 架构模式，整个系统围绕数据库驱动设计和开发，并且总是从设计数据库和字段开始。 **第二阶段是集中式架构：**采用面向对象的设计方法，系统包括业务接入层、业务逻辑层和数据库层，采用经典的三层架构，也有部分应用采用传统的 SOA 架构。这种架构容易使系统变得臃肿，可扩展性和弹性伸缩性差。 **第三阶段是分布式微服务架构：**随着微服务架构理念的提出，集中式架构正向分布式微服务架构演进。微服务架构可以很好地实现应用之间的解耦，解决单体应用扩展性和弹性伸缩能力不足的问题。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-18T15:46:22.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"设计"}],["meta",{"property":"article:tag","content":"DDD"}],["meta",{"property":"article:published_time","content":"2020-08-10T10:59:18.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-18T15:46:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"领域驱动设计简介\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-08-10T10:59:18.000Z\\",\\"dateModified\\":\\"2024-06-18T15:46:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"DDD 简介","slug":"ddd-简介","link":"#ddd-简介","children":[{"level":3,"title":"软件架构模式的演进","slug":"软件架构模式的演进","link":"#软件架构模式的演进","children":[]},{"level":3,"title":"什么是 DDD","slug":"什么是-ddd","link":"#什么是-ddd","children":[]},{"level":3,"title":"DDD 与微服务的关系","slug":"ddd-与微服务的关系","link":"#ddd-与微服务的关系","children":[]}]},{"level":2,"title":"DDD 核心概念","slug":"ddd-核心概念","link":"#ddd-核心概念","children":[{"level":3,"title":"域","slug":"域","link":"#域","children":[]},{"level":3,"title":"通用语言和上下文边界","slug":"通用语言和上下文边界","link":"#通用语言和上下文边界","children":[]},{"level":3,"title":"实体和值对象","slug":"实体和值对象","link":"#实体和值对象","children":[]},{"level":3,"title":"聚合和聚合跟","slug":"聚合和聚合跟","link":"#聚合和聚合跟","children":[]}]},{"level":2,"title":"架构模型","slug":"架构模型","link":"#架构模型","children":[{"level":3,"title":"DDD 架构","slug":"ddd-架构","link":"#ddd-架构","children":[]},{"level":3,"title":"整洁架构","slug":"整洁架构","link":"#整洁架构","children":[]},{"level":3,"title":"六边形架构","slug":"六边形架构","link":"#六边形架构","children":[]},{"level":3,"title":"三种架构对比","slug":"三种架构对比","link":"#三种架构对比","children":[]}]},{"level":2,"title":"中台战略","slug":"中台战略","link":"#中台战略","children":[{"level":3,"title":"平台不是中台","slug":"平台不是中台","link":"#平台不是中台","children":[]},{"level":3,"title":"什么是中台","slug":"什么是中台","link":"#什么是中台","children":[]},{"level":3,"title":"数字化转型中台","slug":"数字化转型中台","link":"#数字化转型中台","children":[]},{"level":3,"title":"前中后台协同","slug":"前中后台协同","link":"#前中后台协同","children":[]},{"level":3,"title":"DDD、中台和微服务的协作","slug":"ddd、中台和微服务的协作","link":"#ddd、中台和微服务的协作","children":[]},{"level":3,"title":"如何构建中台","slug":"如何构建中台","link":"#如何构建中台","children":[]}]},{"level":2,"title":"边界","slug":"边界","link":"#边界","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1654694926000,"updatedTime":1718725582000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":4}]},"readingTime":{"minutes":17.15,"words":5145},"filePathRelative":"03.设计/04.DDD/01.领域驱动设计简介.md","localizedDate":"2020年8月10日","excerpt":"<h1> 领域驱动设计简介</h1>\\n<h2> DDD 简介</h2>\\n<h3> 软件架构模式的演进</h3>\\n<p>**第一阶段是单机架构：**采用面向过程的设计方法，系统包括客户端 UI 层和数据库两层，采用 C/S 架构模式，整个系统围绕数据库驱动设计和开发，并且总是从设计数据库和字段开始。</p>\\n<p>**第二阶段是集中式架构：**采用面向对象的设计方法，系统包括业务接入层、业务逻辑层和数据库层，采用经典的三层架构，也有部分应用采用传统的 SOA 架构。这种架构容易使系统变得臃肿，可扩展性和弹性伸缩性差。</p>\\n<p>**第三阶段是分布式微服务架构：**随着微服务架构理念的提出，集中式架构正向分布式微服务架构演进。微服务架构可以很好地实现应用之间的解耦，解决单体应用扩展性和弹性伸缩能力不足的问题。</p>","autoDesc":true}');export{e as data};
