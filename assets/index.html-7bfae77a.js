import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,e as t}from"./app-129c6ad1.js";const e={},o=t(`<h1 id="java-虚拟机面试一" tabindex="-1"><a class="header-anchor" href="#java-虚拟机面试一" aria-hidden="true">#</a> Java 虚拟机面试一</h1><h2 id="jvm-简介" tabindex="-1"><a class="header-anchor" href="#jvm-简介" aria-hidden="true">#</a> JVM 简介</h2><h3 id="【中等】jvm-由哪些部分组成" tabindex="-1"><a class="header-anchor" href="#【中等】jvm-由哪些部分组成" aria-hidden="true">#</a> 【中等】JVM 由哪些部分组成？</h3><p><strong>类加载→内存分配→执行引擎运行→GC 回收内存</strong>，通过 JNI 与外部交互。</p><p>JVM（Java 虚拟机）主要由以下核心部分组成：</p><ul><li><strong>类加载子系统</strong>：负责加载、验证、准备、解析和初始化类文件（.class）。</li><li><strong>运行时数据区</strong>： <ul><li><strong>方法区</strong>：存储类元数据、常量池等。</li><li><strong>堆</strong>：存放对象实例（主 GC 区域）。</li><li><strong>虚拟机栈</strong>：存储方法调用的栈帧（局部变量、操作数栈等）。</li><li><strong>本地方法栈</strong>：为 Native 方法服务。</li><li><strong>程序计数器</strong>：记录当前线程执行的字节码位置。</li></ul></li><li><strong>执行引擎</strong>：解释或编译字节码为机器码执行（含 JIT 编译器）。</li><li><strong>本地方法接口（JNI）</strong>：调用 C/C++实现的 Native 方法。</li><li><strong>垃圾回收器（GC）</strong>：自动管理堆内存的回收。</li></ul><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/java/javacore/jvm/jvm-hotspot-architecture.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="【中等】jvm-的-tlab-thread-local-allocation-buffer-是什么" tabindex="-1"><a class="header-anchor" href="#【中等】jvm-的-tlab-thread-local-allocation-buffer-是什么" aria-hidden="true">#</a> 【中等】JVM 的 TLAB（Thread-Local Allocation Buffer）是什么？</h3><h3 id="【中等】java-是如何实现跨平台的" tabindex="-1"><a class="header-anchor" href="#【中等】java-是如何实现跨平台的" aria-hidden="true">#</a> 【中等】Java 是如何实现跨平台的？</h3><h3 id="【中等】什么是-java-的-plab" tabindex="-1"><a class="header-anchor" href="#【中等】什么是-java-的-plab" aria-hidden="true">#</a> 【中等】什么是 Java 的 PLAB？</h3><h3 id="【中等】编译执行与解释执行的区别是什么-jvm-使用哪种方式" tabindex="-1"><a class="header-anchor" href="#【中等】编译执行与解释执行的区别是什么-jvm-使用哪种方式" aria-hidden="true">#</a> 【中等】编译执行与解释执行的区别是什么？JVM 使用哪种方式？</h3><h3 id="【中等】什么是-java-中的-logging-write-barrier" tabindex="-1"><a class="header-anchor" href="#【中等】什么是-java-中的-logging-write-barrier" aria-hidden="true">#</a> 【中等】什么是 Java 中的 logging write barrier？</h3><h3 id="【中等】说说-java-的执行流程" tabindex="-1"><a class="header-anchor" href="#【中等】说说-java-的执行流程" aria-hidden="true">#</a> 【中等】说说 Java 的执行流程？</h3><h2 id="jvm-内存管理" tabindex="-1"><a class="header-anchor" href="#jvm-内存管理" aria-hidden="true">#</a> JVM 内存管理</h2><h3 id="【中等】jvm-的内存区域是如何划分的" tabindex="-1"><a class="header-anchor" href="#【中等】jvm-的内存区域是如何划分的" aria-hidden="true">#</a> 【中等】JVM 的内存区域是如何划分的？</h3><p>JDK7 和 JDK8 的 JVM 的内存区域划分有所不同，如下图所示：</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202408130820873.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202408130821056.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>线程私有区域</strong></p><ul><li><strong>程序计数器</strong><ul><li>记录当前线程执行的字节码指令地址（Native 方法时为<code>undefined</code>）。</li><li><strong>唯一无 OOM 的区域</strong>。</li></ul></li><li><strong>虚拟机栈</strong><ul><li>存储方法调用的<strong>栈帧</strong>（局部变量表、操作数栈、动态链接、返回地址）。</li><li>异常：<code>StackOverflowError</code>（栈深度超限）、<code>OOM</code>（扩展失败）。</li></ul></li><li><strong>本地方法栈</strong><ul><li>为 Native 方法服务，类似虚拟机栈。</li></ul></li></ul><p><strong>线程共享区域</strong></p><ul><li><strong>堆（Heap）</strong><ul><li>存放<strong>所有对象实例和数组</strong>，是 GC 主战场。</li><li>分区：新生代（Eden+Survivor）、老年代。</li><li>异常：<code>OOM</code>（对象过多或内存泄漏）。</li></ul></li><li><strong>方法区（JDK 8+：元空间）</strong><ul><li>存储类元信息、运行时常量池、静态变量（JDK 7 后移至堆）。</li><li><strong>JDK 8 用元空间（本地内存）替代永久代</strong>，默认无上限。</li><li>异常：<code>OOM</code>（加载过多类）。</li></ul></li><li><strong>运行时常量池</strong><ul><li>属于方法区，存字面量和符号引用。</li></ul></li></ul><p><strong>直接内存（非 JVM 规范）</strong></p><ul><li>通过 NIO 的<code>DirectByteBuffer</code>分配，避免堆内外拷贝。</li><li>异常：<code>OOM</code>（本地内存不足）。</li></ul><h3 id="【中等】jvm-产生-oom-有哪几种情况" tabindex="-1"><a class="header-anchor" href="#【中等】jvm-产生-oom-有哪几种情况" aria-hidden="true">#</a> 【中等】JVM 产生 OOM 有哪几种情况？</h3><p>JVM 发生 <strong>OutOfMemoryError（OOM）</strong> 的原因多种多样，主要与内存区域划分和对象分配机制相关。以下是所有可能的 OOM 类型及其触发条件、典型案例和排查方法：</p><h4 id="java-lang-outofmemoryerror-java-heap-space" tabindex="-1"><a class="header-anchor" href="#java-lang-outofmemoryerror-java-heap-space" aria-hidden="true">#</a> java.lang.OutOfMemoryError: Java heap space</h4><ul><li><p><strong>触发条件</strong>：<strong>堆内存不足</strong>，无法分配新对象。</p></li><li><p><strong>常见原因</strong>：</p><ul><li>内存泄漏（如静态容器持续增长、未关闭的资源）。</li><li>堆内存设置过小（<code>-Xmx</code> 值不合理）。</li><li>大对象（如一次性加载超大文件到内存）。</li></ul></li><li><p><strong>案例代码</strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 持续分配 1MB 数组</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>解决方向</strong>：</p><ul><li>检查 <code>-Xmx</code> 和 <code>-Xms</code> 参数是否合理。</li><li>使用 <code>jmap -histo:live &lt;pid&gt;</code> 或 <strong>MAT（Memory Analyzer Tool）</strong> 分析堆转储（<code>-XX:+HeapDumpOnOutOfMemoryError</code>）。</li></ul></li></ul><h4 id="java-lang-outofmemoryerror-metaspace" tabindex="-1"><a class="header-anchor" href="#java-lang-outofmemoryerror-metaspace" aria-hidden="true">#</a> java.lang.OutOfMemoryError: Metaspace</h4><ul><li><p><strong>触发条件</strong>：<strong>元空间（Metaspace）不足</strong>，无法加载新的类信息。</p></li><li><p><strong>常见原因</strong>：</p><ul><li>动态生成大量类（如反射、CGLIB、动态代理）。</li><li>未设置元空间上限（默认依赖本地内存，可能耗尽）。</li></ul></li><li><p><strong>案例代码</strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Enhancer</span> enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// CGLIB 动态生成类</span>
    enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span><span class="token constant">OOM</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>解决方向</strong>：</p><ul><li>调整元空间大小：<code>-XX:MetaspaceSize=256M -XX:MaxMetaspaceSize=256M</code>。</li><li>检查类加载器泄漏（如热部署未清理旧类）。</li></ul></li></ul><h4 id="java-lang-outofmemoryerror-permgen-space-仅-jdk-7-及之前" tabindex="-1"><a class="header-anchor" href="#java-lang-outofmemoryerror-permgen-space-仅-jdk-7-及之前" aria-hidden="true">#</a> java.lang.OutOfMemoryError: PermGen space（仅 JDK 7 及之前）</h4><ul><li><strong>类似 Metaspace</strong>，但发生在永久代（PermGen），JDK 8 后被元空间取代。</li><li><strong>常见原因</strong>：大量字符串常量或类加载未卸载。</li></ul><h4 id="java-lang-outofmemoryerror-unable-to-create-new-native-thread" tabindex="-1"><a class="header-anchor" href="#java-lang-outofmemoryerror-unable-to-create-new-native-thread" aria-hidden="true">#</a> java.lang.OutOfMemoryError: Unable to create new native thread</h4><ul><li><strong>触发条件</strong>：<strong>线程数超过系统限制</strong>（非堆内存问题）。</li><li><strong>常见原因</strong>： <ul><li>线程池配置不合理（如无界线程池）。</li><li>系统级限制（<code>ulimit -u</code> 查看用户最大线程数）。</li></ul></li><li><strong>案例代码</strong>：<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>解决方向</strong>： <ul><li>改用线程池（如 <code>ThreadPoolExecutor</code>）。</li><li>调整系统限制（Linux 下修改 <code>/etc/security/limits.conf</code>）。</li></ul></li></ul><h4 id="java-lang-outofmemoryerror-requested-array-size-exceeds-vm-limit" tabindex="-1"><a class="header-anchor" href="#java-lang-outofmemoryerror-requested-array-size-exceeds-vm-limit" aria-hidden="true">#</a> java.lang.OutOfMemoryError: Requested array size exceeds VM limit</h4><ul><li><strong>触发条件</strong>：尝试分配超过 JVM 限制的数组（如 <code>Integer.MAX_VALUE - 2</code>）。</li><li><strong>案例代码</strong>：<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 直接崩溃</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><strong>解决方向</strong>：检查代码中不合理的数组分配逻辑。</li></ul><h4 id="java-lang-outofmemoryerror-direct-buffer-memory" tabindex="-1"><a class="header-anchor" href="#java-lang-outofmemoryerror-direct-buffer-memory" aria-hidden="true">#</a> java.lang.OutOfMemoryError: Direct buffer memory</h4><ul><li><p><strong>触发条件</strong>：<strong>直接内存（堆外内存）耗尽</strong>。</p></li><li><p><strong>常见原因</strong>：</p><ul><li>NIO 的 <code>ByteBuffer.allocateDirect()</code> 未释放。</li><li>直接内存上限过小（<code>-XX:MaxDirectMemorySize</code>）。</li></ul></li><li><p><strong>案例代码</strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">&gt;</span></span> buffers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    buffers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocateDirect</span><span class="token punctuation">(</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1MB 直接内存</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>解决方向</strong>：</p><ul><li>显式调用 <code>((DirectBuffer) buffer).cleaner().clean()</code> 或复用缓冲区。</li><li>增加 <code>-XX:MaxDirectMemorySize=1G</code>。</li></ul></li></ul><h4 id="java-lang-outofmemoryerror-gc-overhead-limit-exceeded" tabindex="-1"><a class="header-anchor" href="#java-lang-outofmemoryerror-gc-overhead-limit-exceeded" aria-hidden="true">#</a> java.lang.OutOfMemoryError: GC overhead limit exceeded</h4><ul><li><strong>触发条件</strong>：GC 耗时超过 98% 且回收内存不足 2%（JVM 自我保护）。</li><li><strong>本质原因</strong>：堆内存几乎耗尽，GC 无效循环。</li><li><strong>解决方向</strong>： <ul><li>同 <code>heap space</code> 排查内存泄漏。</li><li>关闭保护机制（不推荐）：<code>-XX:-UseGCOverheadLimit</code>。</li></ul></li></ul><h4 id="java-lang-outofmemoryerror-codecache-is-full-jit-编译代码缓存满" tabindex="-1"><a class="header-anchor" href="#java-lang-outofmemoryerror-codecache-is-full-jit-编译代码缓存满" aria-hidden="true">#</a> java.lang.OutOfMemoryError: CodeCache is full（JIT 编译代码缓存满）</h4><ul><li><strong>触发条件</strong>：JIT 编译的本地代码超出缓存区（<code>-XX:ReservedCodeCacheSize</code>）。</li><li><strong>常见原因</strong>：动态生成大量方法（如频繁调用反射）。</li><li><strong>解决方向</strong>： <ul><li>增加缓存：<code>-XX:ReservedCodeCacheSize=256M</code>。</li><li>关闭分层编译：<code>-XX:-TieredCompilation</code>。</li></ul></li></ul><h4 id="oom-类型速查表" tabindex="-1"><a class="header-anchor" href="#oom-类型速查表" aria-hidden="true">#</a> OOM 类型速查表</h4><table><thead><tr><th>OOM 类型</th><th>关联内存区域</th><th>典型原因</th></tr></thead><tbody><tr><td><code>Java heap space</code></td><td>堆</td><td>内存泄漏/堆太小</td></tr><tr><td><code>Metaspace</code> / <code>PermGen space</code></td><td>元空间/永久代</td><td>类加载爆炸</td></tr><tr><td><code>Unable to create native thread</code></td><td>系统线程数</td><td>线程池失控/系统限制</td></tr><tr><td><code>Direct buffer memory</code></td><td>堆外内存</td><td>NIO Buffer 未释放</td></tr><tr><td><code>GC overhead limit exceeded</code></td><td>堆</td><td>GC 无效循环</td></tr><tr><td><code>CodeCache is full</code></td><td>JIT 代码缓存</td><td>动态方法过多</td></tr><tr><td><code>Requested array size exceeds VM</code></td><td>堆</td><td>超大数组分配</td></tr></tbody></table><h3 id="【简单】jvm-方法区是否会出现内存溢出" tabindex="-1"><a class="header-anchor" href="#【简单】jvm-方法区是否会出现内存溢出" aria-hidden="true">#</a> 【简单】JVM 方法区是否会出现内存溢出？</h3><p>是的，<strong>JVM 方法区（Method Area）确实会发生内存溢出（OOM）</strong>，具体表现为 <code>java.lang.OutOfMemoryError: Metaspace</code>（JDK 8+）或 <code>java.lang.OutOfMemoryError: PermGen space</code>（JDK 7 及之前）。以下是详细分析：</p><p><strong>方法区的内存溢出原因</strong></p><p><strong>（1）JDK 8 之前：永久代（PermGen）溢出</strong></p><ul><li><strong>错误信息</strong>：<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>OutOfMemoryError</span><span class="token operator">:</span> <span class="token class-name">PermGen</span> space
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><strong>触发条件</strong>： <ul><li>加载过多的类（如动态生成类、反射、CGLIB 代理）。</li><li>大量字符串常量（尤其是 <code>String.intern()</code> 方法滥用）。</li><li>未卸载的类加载器（如热部署场景，旧类未清理）。</li></ul></li></ul><p><strong>（2）JDK 8 及之后：元空间（Metaspace）溢出</strong></p><ul><li><strong>错误信息</strong>：<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>OutOfMemoryError</span><span class="token operator">:</span> <span class="token class-name">Metaspace</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><strong>触发条件</strong>： <ul><li>动态生成大量类（如 Spring AOP 的 CGLIB 代理、JSP 编译）。</li><li>未合理设置元空间大小（默认依赖系统内存，可能耗尽）。</li><li>类加载器泄漏（如 OSGi、Tomcat 热部署未清理旧类）。</li></ul></li></ul><p><strong>典型案例</strong></p><p><strong>（1）动态类生成</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 使用 CGLIB 持续生成代理类</span>
<span class="token class-name">Enhancer</span> enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span><span class="token class-name">MyService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1_000_000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 最终触发 Metaspace OOM</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（2）类加载器泄漏</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 模拟热部署场景：每次重新加载类但未卸载旧类</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">URLClassLoader</span> loader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLClassLoader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;/path/to/classes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    loader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">&quot;com.example.MyClass&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>预防措施</strong></p><ul><li><strong>限制动态代理类生成</strong>：缓存代理对象，避免重复生成。</li><li><strong>合理配置元空间</strong>：生产环境务必设置 <code>MaxMetaspaceSize</code>（如 <code>-XX:MaxMetaspaceSize=512M</code>）。</li><li><strong>避免类加载器泄漏</strong>：确保热部署框架（如 Tomcat、Spring Boot DevTools）正确清理旧类加载器。</li><li><strong>减少字符串常量池滥用</strong>：谨慎使用 <code>String.intern()</code>，尤其是处理大量动态字符串时。</li></ul><p><strong>永久代（PermGen）与元空间（Metaspace）对比</strong></p><table><thead><tr><th>特性</th><th>永久代（JDK 7）</th><th>元空间（JDK 8+）</th></tr></thead><tbody><tr><td><strong>存储位置</strong></td><td>JVM 堆内</td><td>本地内存（Native Memory）</td></tr><tr><td><strong>溢出错误</strong></td><td><code>OOM: PermGen space</code></td><td><code>OOM: Metaspace</code></td></tr><tr><td><strong>默认上限</strong></td><td>固定大小（64M~82M）</td><td>无上限（受系统内存限制）</td></tr><tr><td><strong>调优参数</strong></td><td><code>-XX:PermSize</code> / <code>-XX:MaxPermSize</code></td><td><code>-XX:MetaspaceSize</code> / <code>-XX:MaxMetaspaceSize</code></td></tr></tbody></table><p><strong>总结</strong></p><ul><li><strong>方法区会溢出</strong>：无论是永久代还是元空间，都可能因类加载过多或配置不当触发 OOM。</li><li><strong>JDK 8+ 更灵活</strong>：元空间使用本地内存，但需显式设置 <code>MaxMetaspaceSize</code> 避免失控。</li><li><strong>关键排查点</strong>：动态类生成、类加载器泄漏、字符串常量池滥用。</li><li><strong>解决方案</strong>：合理配置内存参数 + 代码优化 + 监控工具。</li></ul><h3 id="【中等】java-中堆和栈的区别是什么" tabindex="-1"><a class="header-anchor" href="#【中等】java-中堆和栈的区别是什么" aria-hidden="true">#</a> 【中等】Java 中堆和栈的区别是什么？</h3><p><strong>Java 中堆（Heap）和栈（Stack）的核心区别</strong>：</p><table><thead><tr><th><strong>特性</strong></th><th><strong>堆（Heap）</strong></th><th><strong>栈（Stack）</strong></th></tr></thead><tbody><tr><td><strong>存储内容</strong></td><td>对象实例、数组（所有<code>new</code>的对象）</td><td>基本数据类型、局部变量、方法调用栈帧</td></tr><tr><td><strong>线程共享</strong></td><td>线程共享（需考虑线程安全）</td><td>线程私有（每个线程独立栈）</td></tr><tr><td><strong>内存分配</strong></td><td>动态分配，大小由<code>-Xmx</code>/<code>-Xms</code>控制</td><td>固定分配，大小由<code>-Xss</code>设定</td></tr><tr><td><strong>访问速度</strong></td><td>较慢（需指针寻址）</td><td>极快（直接操作栈指针）</td></tr><tr><td><strong>内存溢出</strong></td><td><code>OOM: Java heap space</code></td><td><code>StackOverflowError</code>（递归过深）</td></tr><tr><td><strong>垃圾回收</strong></td><td>由 GC 管理（分代回收算法）</td><td>无需 GC，方法结束立即释放</td></tr><tr><td><strong>典型问题</strong></td><td>内存泄漏、GC 频繁</td><td>栈帧过多（如无限递归）</td></tr></tbody></table><p><strong>总结</strong></p><ul><li><strong>堆</strong>：存对象，线程共享，GC 管理，可能 OOM。</li><li><strong>栈</strong>：存局部变量和方法调用，线程私有，自动释放，可能栈溢出。</li></ul><p><strong>关键区别</strong>：堆是动态的、共享的、GC 管理的；栈是快速的、私有的、自动释放的。</p><h3 id="【困难】什么是-java-中的直接内存-堆外内存" tabindex="-1"><a class="header-anchor" href="#【困难】什么是-java-中的直接内存-堆外内存" aria-hidden="true">#</a> 【困难】什么是 Java 中的直接内存（堆外内存）？</h3><p><strong>直接内存（Direct Memory）</strong> 是 <strong>JVM 堆外的本地内存（Native Memory）</strong>，由 Java 代码通过 <code>ByteBuffer.allocateDirect()</code> 或 <code>Unsafe</code> 类直接分配，不受 JVM 堆大小限制（但受系统总内存限制）。直接内存<strong>读写快、无 GC 开销</strong>，但需手动管理，适合高频 I/O 或大数据传输场景。</p><p><strong>特点</strong></p><table><thead><tr><th><strong>特性</strong></th><th><strong>直接内存</strong></th><th><strong>JVM 堆内存</strong></th></tr></thead><tbody><tr><td><strong>分配位置</strong></td><td>操作系统管理的本地内存（Off-Heap）</td><td>JVM 堆内（由 <code>-Xmx</code> 控制）</td></tr><tr><td><strong>分配方式</strong></td><td><code>ByteBuffer.allocateDirect()</code></td><td><code>new</code> 关键字</td></tr><tr><td><strong>性能</strong></td><td>读写更快（减少堆与本地内存数据拷贝）</td><td>受 GC 影响，可能停顿</td></tr><tr><td><strong>内存管理</strong></td><td>手动释放（或依赖 <code>Cleaner</code> 机制）</td><td>自动垃圾回收（GC）</td></tr><tr><td><strong>OOM 错误</strong></td><td><code>OutOfMemoryError: Direct buffer memory</code></td><td><code>OOM: Java heap space</code></td></tr><tr><td><strong>适用场景</strong></td><td>高频 I/O（如 NIO、Netty、MMAP）</td><td>常规对象存储</td></tr></tbody></table><p><strong>优势</strong></p><ul><li><strong>减少拷贝</strong>：避免 JVM 堆与本地内存间的数据复制（如文件读写、网络传输）。</li><li><strong>降低 GC 压力</strong>：大数据量场景下避免频繁 GC 停顿。</li></ul><p><strong>注意</strong></p><ul><li><strong>内存泄漏</strong>：忘记释放会导致本地内存耗尽（需显式调用 <code>((DirectBuffer) buffer).cleaner().clean()</code>）。</li><li><strong>手动管理</strong>：需谨慎控制分配和释放，推荐使用 <strong>池化技术</strong>（如 Netty 的 <code>PooledByteBufAllocator</code>）。</li><li><strong>大小限制</strong>：通过 <code>-XX:MaxDirectMemorySize</code> 设置上限（默认与 <code>-Xmx</code> 一致）。</li></ul><p><strong>应用</strong></p><ul><li><strong>NIO</strong>：<code>FileChannel</code> 文件映射（<code>MappedByteBuffer</code>）。</li><li><strong>高性能框架</strong>：Netty、Kafka、RocketMQ 的零拷贝技术。</li><li><strong>大数据</strong>：避免大文件加载到堆内引发 OOM。</li></ul><h3 id="【中等】什么是-java-中的常量池" tabindex="-1"><a class="header-anchor" href="#【中等】什么是-java-中的常量池" aria-hidden="true">#</a> 【中等】什么是 Java 中的常量池？</h3><p><strong>常量池（Constant Pool）</strong> 是 <strong>JVM 方法区（元空间）的一部分</strong>，用于存储 <strong>编译期生成的字面量（Literal）和符号引用（Symbolic References）</strong>，如字符串、类/方法名、常量值等。</p><p><strong>分类</strong></p><table><thead><tr><th><strong>类型</strong></th><th><strong>存储位置</strong></th><th><strong>内容</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td><strong>Class 文件常量池</strong></td><td><code>.class</code> 文件内</td><td>编译期确定的字面量和符号引用</td><td><code>String s = &quot;Java&quot;;</code></td></tr><tr><td><strong>运行时常量池</strong></td><td>方法区（JDK8+ 在元空间）</td><td>类加载后从 Class 文件常量池映射而来</td><td>动态解析的类/方法引用</td></tr><tr><td><strong>字符串常量池</strong></td><td>堆（JDK7+）</td><td>显式调用 <code>String.intern()</code> 的字符串</td><td><code>&quot;Java&quot;.intern()</code></td></tr></tbody></table><p><strong>特点</strong></p><ul><li><strong>字面量存储</strong>：如字符串、<code>final</code> 常量、基本类型值（如 <code>int a = 100</code>）。</li><li><strong>符号引用</strong>：类全限定名、方法名、字段名等（类加载时解析为直接引用）。</li><li><strong>动态性</strong>：运行时常量池支持动态添加（如 <code>String.intern()</code>）。</li></ul><p><strong>字符串常量池</strong></p><ul><li><strong>JDK6 及之前</strong>：位于永久代（<code>PermGen</code>），易引发 <code>OOM: PermGen space</code>。</li><li><strong>JDK7+</strong>：移至堆中，由 GC 管理，减少永久代压力。</li><li><strong><code>intern()</code> 方法</strong>： <ul><li>若字符串不在池中，将其添加到池并返回引用；否则直接返回池中引用。</li><li><strong>慎用</strong>：滥用可能导致内存浪费。</li></ul></li></ul><p><strong>问题</strong></p><ul><li><strong>内存泄漏</strong>：大量调用 <code>String.intern()</code> 导致字符串常量池膨胀（JDK7+ 在堆中，可通过 GC 回收）。</li><li><strong>性能优化</strong>： <ul><li>避免重复创建相同字符串（如用 <code>intern()</code> 缓存高频字符串）。</li><li>编译期常量折叠（如 <code>String s = &quot;a&quot; + &quot;b&quot;</code> 会优化为 <code>&quot;ab&quot;</code>）。</li></ul></li></ul><p><strong>示例代码</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">&quot;Java&quot;</span><span class="token punctuation">;</span>              <span class="token comment">// 字面量，存入字符串常量池</span>
<span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;Java&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 堆中新对象，不自动入池</span>
s2<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment">// 将 s2 的值加入字符串常量池（若不存在）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="【中等】程序计数器为什么是私有的" tabindex="-1"><a class="header-anchor" href="#【中等】程序计数器为什么是私有的" aria-hidden="true">#</a> 【中等】程序计数器为什么是私有的？</h3><p>程序计数器主要有下面两个作用：</p><ol><li>字节码解释器通过改变程序计数器来依次读取指令，从而实现代码的流程控制，如：顺序执行、选择、循环、异常处理。</li><li>在多线程的情况下，程序计数器用于记录当前线程执行的位置，从而当线程被切换回来的时候能够知道该线程上次运行到哪儿了。</li></ol><p>需要注意的是，如果执行的是 native 方法，那么程序计数器记录的是 undefined 地址，只有执行的是 Java 代码时程序计数器记录的才是下一条指令的地址。</p><p>所以，程序计数器私有主要是为了<strong>线程切换后能恢复到正确的执行位置</strong>。</p><h3 id="【中等】虚拟机栈和本地方法栈为什么是私有的" tabindex="-1"><a class="header-anchor" href="#【中等】虚拟机栈和本地方法栈为什么是私有的" aria-hidden="true">#</a> 【中等】虚拟机栈和本地方法栈为什么是私有的？</h3><ul><li><strong>虚拟机栈：</strong> 每个 Java 方法在执行之前会创建一个栈帧用于存储局部变量表、操作数栈、常量池引用等信息。从方法调用直至执行完成的过程，就对应着一个栈帧在 Java 虚拟机栈中入栈和出栈的过程。</li><li><strong>本地方法栈：</strong> 和虚拟机栈所发挥的作用非常相似，区别是：<strong>虚拟机栈为虚拟机执行 Java 方法 （也就是字节码）服务，而本地方法栈则为虚拟机使用到的 Native 方法服务。</strong> 在 HotSpot 虚拟机中和 Java 虚拟机栈合二为一。</li></ul><p>所以，为了<strong>保证线程中的局部变量不被别的线程访问到</strong>，虚拟机栈和本地方法栈是线程私有的。</p><h2 id="字节码" tabindex="-1"><a class="header-anchor" href="#字节码" aria-hidden="true">#</a> 字节码</h2><h3 id="【中等】什么是-java-字节码-它与机器码有什么区别" tabindex="-1"><a class="header-anchor" href="#【中等】什么是-java-字节码-它与机器码有什么区别" aria-hidden="true">#</a> 【中等】什么是 Java 字节码？它与机器码有什么区别？</h3><ul><li>字节码是 JVM 的中间表示，需要 JVM 解释或编译执行</li><li>机器码是直接由 CPU 执行的二进制指令</li></ul><h3 id="【中等】-class-文件的结构包含哪些主要部分" tabindex="-1"><a class="header-anchor" href="#【中等】-class-文件的结构包含哪些主要部分" aria-hidden="true">#</a> 【中等】.class 文件的结构包含哪些主要部分？</h3><ul><li>魔数 (Magic Number)</li><li>版本信息</li><li>常量池 (Constant Pool)</li><li>访问标志</li><li>类索引、父类索引和接口索引</li><li>字段表</li><li>方法表</li><li>属性表</li></ul><h3 id="【中等】如何查看-java-字节码-常用工具有哪些" tabindex="-1"><a class="header-anchor" href="#【中等】如何查看-java-字节码-常用工具有哪些" aria-hidden="true">#</a> 【中等】如何查看 Java 字节码？常用工具有哪些？</h3><ul><li>javap (JDK 自带）</li><li>ASM</li><li>Bytecode Viewer</li><li>JBE (Java Bytecode Editor)</li></ul><h3 id="【中等】java-字节码有哪些典型应用场景" tabindex="-1"><a class="header-anchor" href="#【中等】java-字节码有哪些典型应用场景" aria-hidden="true">#</a> 【中等】Java 字节码有哪些典型应用场景？</h3><ul><li><strong>性能优化</strong>：JIT 编译、方法内联、热点代码分析</li><li><strong>AOP 与动态代理</strong>：Spring AOP、CGLIB、JDK 动态代理</li><li><strong>ORM 与懒加载</strong>：Hibernate 字节码增强实现延迟加载</li><li><strong>代码分析与安全</strong>：静态分析（FindBugs）、漏洞检测、代码混淆</li><li><strong>热部署与热修复</strong>：JRebel、阿里 Sophix（运行时替换字节码）</li><li><strong>动态语言支持</strong>：Groovy、Kotlin 等 JVM 语言编译成字节码</li><li><strong>Mock 测试</strong>：Mockito 动态生成 Mock 类字节码</li><li><strong>序列化优化</strong>：Jackson、FastJSON 使用字节码加速反射</li><li><strong>调试与监控</strong>：Arthas、JProfiler 插桩分析执行情况</li><li><strong>JVM 研究与学习</strong>：理解 Java 语法底层实现（如<code>try-with-resources</code>、<code>lambda</code>）</li></ul><p><strong>核心作用</strong>：</p><ul><li><strong>运行时增强</strong>（AOP、代理）</li><li><strong>性能优化</strong>（JIT、减少反射开销）</li><li><strong>动态能力</strong>（热修复、Mock 测试）</li><li><strong>跨语言支持</strong>（JVM 生态多语言）</li></ul><h2 id="故障处理" tabindex="-1"><a class="header-anchor" href="#故障处理" aria-hidden="true">#</a> 故障处理</h2><h3 id="【简单】jdk-内置了哪些工具" tabindex="-1"><a class="header-anchor" href="#【简单】jdk-内置了哪些工具" aria-hidden="true">#</a> 【简单】JDK 内置了哪些工具？</h3><details class="hint-container details"><summary>要点</summary><p><strong>基础开发工具</strong></p><ul><li><strong><code>javac</code></strong> – Java 编译器（<code>.java</code> → <code>.class</code>）</li><li><strong><code>java</code></strong> – 运行 Java 程序（启动 JVM）</li><li><strong><code>javadoc</code></strong> – 生成 API 文档（基于源码注释）</li><li><strong><code>jar</code></strong> – 打包 <code>.class</code> 文件为 JAR</li><li><strong><code>jdb</code></strong> – 命令行调试工具（断点、变量查看）</li></ul><p><strong>性能监控与分析工具</strong></p><ul><li><strong><code>jps</code></strong> – 查看 Java 进程</li><li><strong><code>jstack</code></strong> – 线程堆栈分析（排查死锁、线程阻塞）</li><li><strong><code>jmap</code></strong> – 内存快照（生成 Heap Dump）</li><li><strong><code>jhat</code></strong> – 分析 Heap Dump（内存泄漏排查）</li><li><strong><code>jstat</code></strong> – JVM 统计（GC、内存、类加载监控）</li><li><strong><code>jconsole</code></strong> – 图形化 JVM 监控（内存、线程、类）</li><li><strong><code>jvisualvm</code></strong> – 综合性能分析（CPU、内存、GC）</li></ul><p><strong>诊断工具</strong></p><ul><li><strong><code>jinfo</code></strong> – 查看/修改 JVM 运行参数</li><li><strong><code>jstatd</code></strong> – 远程 JVM 监控（分布式支持）</li></ul></details><h3 id="【中等】你常用哪些工具来分析-jvm-性能" tabindex="-1"><a class="header-anchor" href="#【中等】你常用哪些工具来分析-jvm-性能" aria-hidden="true">#</a> 【中等】你常用哪些工具来分析 JVM 性能？</h3><h3 id="【中等】如何在-java-中进行内存泄漏分析" tabindex="-1"><a class="header-anchor" href="#【中等】如何在-java-中进行内存泄漏分析" aria-hidden="true">#</a> 【中等】如何在 Java 中进行内存泄漏分析？</h3><h3 id="【中等】常用的-jvm-配置参数有哪些" tabindex="-1"><a class="header-anchor" href="#【中等】常用的-jvm-配置参数有哪些" aria-hidden="true">#</a> 【中等】常用的 JVM 配置参数有哪些？</h3><h2 id="类加载" tabindex="-1"><a class="header-anchor" href="#类加载" aria-hidden="true">#</a> 类加载</h2><h3 id="java-支持哪些引用类型-分别用于什么场景" tabindex="-1"><a class="header-anchor" href="#java-支持哪些引用类型-分别用于什么场景" aria-hidden="true">#</a> Java 支持哪些引用类型？分别用于什么场景？</h3><p>无论是通过引用计算算法判断对象的引用数量，还是通过可达性分析算法判断对象的引用链是否可达，判定对象是否可被回收都与引用有关。</p><p>Java 具有四种强度不同的引用类型：</p><ul><li>强引用（Strong Reference）</li><li>软引用（Soft Reference）</li><li>弱引用（Weak Reference）</li><li>虚引用</li></ul><p><strong>（1）强引用</strong></p><p><strong>被强引用（Strong Reference）关联的对象不会被垃圾收集器回收。</strong></p><p>使用 <code>new</code> 一个新对象的方式来创建强引用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>（2）软引用</strong></p><p>**被软引用（Soft Reference）关联的对象，只有在 JVM 内存不够的情况下才会被回收。**JVM 会确保在抛出 <code>OutOfMemoryError</code> 之前，清理软引用指向的对象。软引用通常用来实现内存敏感的缓存，如果还有空闲内存，就可以暂时保留缓存，当内存不足时清理掉，这样就保证了使用缓存的同时，不会耗尽内存。</p><p>使用 <code>SoftReference</code> 类来创建软引用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">SoftReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> sf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoftReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
obj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 使对象只被软引用关联</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（3）弱引用</strong></p><p><strong>被弱引用（Weak Reference）关联的对象一定会被垃圾收集器回收，也就是说它只能存活到下一次垃圾收集发生之前。</strong></p><p>使用 <code>WeakReference</code> 类来实现弱引用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> wf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
obj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>WeakHashMap</code> 的 <code>Entry</code> 继承自 <code>WeakReference</code>，主要用来实现缓存。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Tomcat 中的 <code>ConcurrentCache</code> 就使用了 <code>WeakHashMap</code> 来实现缓存功能。<code>ConcurrentCache</code> 采取的是分代缓存，经常使用的对象放入 eden 中，而不常用的对象放入 longterm。eden 使用 <code>ConcurrentHashMap</code> 实现，longterm 使用 <code>WeakHashMap</code>，保证了不常使用的对象容易被回收。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ConcurrentCache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> eden<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> longterm<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ConcurrentCache</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> size<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>eden <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>longterm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">K</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">V</span> v <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>eden<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            v <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>longterm<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>eden<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> v<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> k<span class="token punctuation">,</span> <span class="token class-name">V</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>eden<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>longterm<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>eden<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>eden<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>eden<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（4）虚引用</strong></p><p>又称为幽灵引用或者幻影引用。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用取得一个对象实例。</p><p><strong>为一个对象设置虚引用关联的唯一目的就是能在这个对象被收集器回收时收到一个系统通知。</strong></p><p>使用 <code>PhantomReference</code> 来实现虚引用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">PhantomReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> pf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhantomReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
obj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="【中等】java-中的强引用、软引用、弱引用和虚引用分别是什么" tabindex="-1"><a class="header-anchor" href="#【中等】java-中的强引用、软引用、弱引用和虚引用分别是什么" aria-hidden="true">#</a> 【中等】Java 中的强引用、软引用、弱引用和虚引用分别是什么？</h3><h3 id="【中等】java-里的对象在虚拟机里面是怎么存储的" tabindex="-1"><a class="header-anchor" href="#【中等】java-里的对象在虚拟机里面是怎么存储的" aria-hidden="true">#</a> 【中等】Java 里的对象在虚拟机里面是怎么存储的？</h3><h3 id="【中等】什么是-java-中的-jit-just-in-time" tabindex="-1"><a class="header-anchor" href="#【中等】什么是-java-中的-jit-just-in-time" aria-hidden="true">#</a> 【中等】什么是 Java 中的 JIT（Just-In-Time）?</h3><h3 id="【中等】jit-编译后的代码存在哪" tabindex="-1"><a class="header-anchor" href="#【中等】jit-编译后的代码存在哪" aria-hidden="true">#</a> 【中等】JIT 编译后的代码存在哪？</h3><h3 id="【中等】什么是-java-的-aot-ahead-of-time" tabindex="-1"><a class="header-anchor" href="#【中等】什么是-java-的-aot-ahead-of-time" aria-hidden="true">#</a> 【中等】什么是 Java 的 AOT（Ahead-Of-Time）？</h3><h3 id="【困难】你了解-java-的逃逸分析吗" tabindex="-1"><a class="header-anchor" href="#【困难】你了解-java-的逃逸分析吗" aria-hidden="true">#</a> 【困难】你了解 Java 的逃逸分析吗？</h3><h3 id="【困难】你了解-java-的类加载器吗" tabindex="-1"><a class="header-anchor" href="#【困难】你了解-java-的类加载器吗" aria-hidden="true">#</a> 【困难】你了解 Java 的类加载器吗？</h3><h2 id="调优" tabindex="-1"><a class="header-anchor" href="#调优" aria-hidden="true">#</a> 调优</h2><h3 id="【中等】jvm-垃圾回收调优的主要目标是什么" tabindex="-1"><a class="header-anchor" href="#【中等】jvm-垃圾回收调优的主要目标是什么" aria-hidden="true">#</a> 【中等】JVM 垃圾回收调优的主要目标是什么？</h3><h3 id="【中等】如何对-java-的垃圾回收进行调优" tabindex="-1"><a class="header-anchor" href="#【中等】如何对-java-的垃圾回收进行调优" aria-hidden="true">#</a> 【中等】如何对 Java 的垃圾回收进行调优？</h3>`,151),p=[o];function c(l,i){return a(),s("div",null,p)}const u=n(e,[["render",c],["__file","index.html.vue"]]);export{u as default};
