import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o,c as i,a as e,b as t,d as r,e as n}from"./app-0f89ae1c.js";const c={},d=e("h1",{id:"elasticsearch-面试",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#elasticsearch-面试","aria-hidden":"true"},"#"),t(" Elasticsearch 面试")],-1),h=e("h2",{id:"elasticsearch-简介",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#elasticsearch-简介","aria-hidden":"true"},"#"),t(" Elasticsearch 简介")],-1),u=e("p",null,"扩展阅读：",-1),p={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/elasticsearch-intro-what-is-es.html",target:"_blank",rel:"noopener noreferrer"},_=e("h3",{id:"【基础】什么是-es",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#【基础】什么是-es","aria-hidden":"true"},"#"),t(" 【基础】什么是 ES？")],-1),g={class:"hint-container details"},m=e("summary",null,"要点",-1),f=e("figure",null,[e("img",{src:"https://raw.githubusercontent.com/dunwu/images/master/snap/202411241734774.png",alt:"Elasticsearch",tabindex:"0",loading:"lazy"}),e("figcaption",null,"Elasticsearch")],-1),w={href:"https://github.com/elastic/elasticsearch",target:"_blank",rel:"noopener noreferrer"},b=e("strong",null,"Elasticsearch",-1),k=e("strong",null,"搜索和分析引擎",-1),y={href:"https://github.com/elastic/elasticsearch",target:"_blank",rel:"noopener noreferrer"},E={href:"https://github.com/apache/lucene-solr",target:"_blank",rel:"noopener noreferrer"},x=n("<p>Elasticsearch 是<strong>面向文档</strong>的，它将复杂数据结构序列化为 <strong>JSON</strong> 形式存储。</p><p>Elasticsearch 提供<strong>近实时</strong>（Near Realtime，缩写 NRT）的<strong>全文搜索</strong>。近实时是指：</p><ul><li>从写入数据到数据可以被搜索，存在较小的延迟（大概是 1s）。</li><li>基于 Elasticsearch 执行搜索和分析可以达到秒级。</li></ul>",3),q=n('<h3 id="【基础】es-有哪些应用场景" tabindex="-1"><a class="header-anchor" href="#【基础】es-有哪些应用场景" aria-hidden="true">#</a> 【基础】ES 有哪些应用场景？</h3><details class="hint-container details"><summary>要点</summary><p>Elasticsearch 的主要功能如下：</p><ul><li><strong>海量数据的分布式存储及集群管理</strong></li><li><strong>提供丰富的近实时搜索能力</strong></li><li><strong>海量数据的近实时分析（聚合）</strong></li></ul><p>Elasticsearch 被广泛应用于以下场景：</p><ul><li><strong>搜索</strong><ul><li><strong>全文检索</strong> - Elasticsearch 通过快速搜索大型数据集，使复杂的搜索查询变得更加容易。它对于需要即时和相关搜索结果的网站、应用程序或企业特别有用。</li><li><strong>自动补全和拼写纠正</strong> - 可以在用户输入内容时，实时提供自动补全和拼写纠正，以增加用户体验并提高搜索效率。</li><li><strong>地理空间搜索</strong> - 使用地理空间查询搜索位置并计算空间关系。</li><li>近实时分析 - Elasticsearch 能够进行实时分析，使其适用于追踪实时数据的仪表板，例如用户活动、用户画像等，分析后进行推送。</li></ul></li><li><strong>可观测性</strong><ul><li><strong>日志、指标和链路追踪</strong> - 收集、存储和分析来自应用程序、系统和服务的日志、指标和追踪。</li><li><strong>性能监控</strong> - 监控和分析业务关键性能指标。</li><li><strong>OpenTelemetry</strong> - 使用 OpenTelemetry 标准，将遥测数据采集到 Elastic Stack。</li></ul></li></ul></details><h3 id="【基础】elasticsearch-有哪些里程碑版本" tabindex="-1"><a class="header-anchor" href="#【基础】elasticsearch-有哪些里程碑版本" aria-hidden="true">#</a> 【基础】Elasticsearch 有哪些里程碑版本？</h3><details class="hint-container details"><summary>要点</summary><p>Elasticsearch 里程碑版本：</p><ul><li>1.0（2014 年）</li><li>5.0（2016 年） <ul><li>Lucene 6.x</li><li>默认打分机制从 TD-IDF 改为 BM25</li><li>增加 Keyword 类型</li></ul></li><li>6.0（2017 年） <ul><li>Lucene 7.x</li><li>跨集群复制</li><li>索引生命周期管理</li><li>SQL 的支持</li></ul></li><li>7.0（2019 年） <ul><li>Lucene 8.0</li><li>移除 Type</li><li>ECK （用于支持 K8S）</li><li>集群协调</li><li>High Level Rest Client</li><li>Script Score 查询</li></ul></li><li>8.0（2022 年） <ul><li>Lucene 9.0</li><li>向量搜索</li><li>支持 OpenTelemetry</li></ul></li></ul></details><h3 id="【基础】什么是-elasic-stack-elk" tabindex="-1"><a class="header-anchor" href="#【基础】什么是-elasic-stack-elk" aria-hidden="true">#</a> 【基础】什么是 Elasic Stack(ELK)？</h3>',5),v={class:"hint-container details"},S=e("summary",null,"要点",-1),z=e("p",null,"Elastic Stack 通常被用来作为日志采集、检索、可视化的解决方案。",-1),T=e("figure",null,[e("img",{src:"https://raw.githubusercontent.com/dunwu/images/master/snap/202411231210104.png",alt:"ELK",tabindex:"0",loading:"lazy"}),e("figcaption",null,"ELK")],-1),I={href:"https://www.elastic.co/elasticsearch",target:"_blank",rel:"noopener noreferrer"},D={href:"https://www.elastic.co/products/logstash",target:"_blank",rel:"noopener noreferrer"},L={href:"https://www.elastic.co/kibana",target:"_blank",rel:"noopener noreferrer"},M={href:"https://www.elastic.co/elasticsearch",target:"_blank",rel:"noopener noreferrer"},j={href:"https://www.elastic.co/logstash",target:"_blank",rel:"noopener noreferrer"},P={href:"https://www.elastic.co/kibana",target:"_blank",rel:"noopener noreferrer"},B={href:"https://www.elastic.co/beats",target:"_blank",rel:"noopener noreferrer"},C=e("p",null,"此外，基于 Elastic Stack，其技术生态还可以和一些主流的分布式中间件进行集成，以应对各种不同的场景。",-1),F=e("figure",null,[e("img",{src:"https://raw.githubusercontent.com/dunwu/images/master/snap/202411231211496.png",alt:"Elastic Stack",tabindex:"0",loading:"lazy"}),e("figcaption",null,"Elastic Stack")],-1),U=e("h2",{id:"elasticsearch-crud",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#elasticsearch-crud","aria-hidden":"true"},"#"),t(" Elasticsearch CRUD")],-1),R=e("p",null,"扩展阅读：",-1),G={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/rest-apis.html",target:"_blank",rel:"noopener noreferrer"},N=e("h3",{id:"【基础】如何在-es-中-crud",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#【基础】如何在-es-中-crud","aria-hidden":"true"},"#"),t(" 【基础】如何在 ES 中 CRUD？")],-1),H={class:"hint-container details"},J=n("<summary>要点</summary><p>Elasticsearch 的基本 CRUD 方式如下：</p><ul><li><strong>添加索引</strong><ul><li><code>PUT &lt;index&gt;/_create/&lt;id&gt;</code> - 指定 id，如果 id 已存在，报错</li><li><code>POST &lt;index&gt;/_doc</code> - 自动生成 <code>_id</code></li></ul></li><li><strong>删除索引</strong> - <code>DELETE /&lt;index&gt;？pretty</code></li><li><strong>更新索引</strong> - <code>POST &lt;index&gt;/_update/&lt;id&gt;</code></li><li><strong>查询索引</strong> - <code>GET &lt;index&gt;/_doc/&lt;id&gt;</code></li><li><strong>批量更新</strong> - <code>bulk</code> API 支持 <code>index/create/update/delete</code></li><li><strong>批量查询</strong> - <code>_mget</code> 和 <code>_msearch</code> 可以用于批量查询</li></ul>",3),A={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/quickstart.html",target:"_blank",rel:"noopener noreferrer"},O=e("h2",{id:"elasticsearch-mapping",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#elasticsearch-mapping","aria-hidden":"true"},"#"),t(" Elasticsearch Mapping")],-1),V=e("p",null,"扩展阅读：",-1),K={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping.html",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://www.itshujia.com/read/elasticsearch/351.html",target:"_blank",rel:"noopener noreferrer"},Z=e("h3",{id:"【基础】es-支持哪些数据类型",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#【基础】es-支持哪些数据类型","aria-hidden":"true"},"#"),t(" 【基础】ES 支持哪些数据类型？")],-1),X={class:"hint-container details"},W=e("summary",null,"要点",-1),Y=e("p",null,"Elasticsearch 支持丰富的数据类型，常见的有：",-1),$={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/text.html",target:"_blank",rel:"noopener noreferrer"},ee=e("code",null,"text",-1),te={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/keyword.html#keyword-field-type",target:"_blank",rel:"noopener noreferrer"},se=e("code",null,"keyword",-1),re={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/keyword.html#constant-keyword-field-type",target:"_blank",rel:"noopener noreferrer"},ne=e("code",null,"constant_keyword",-1),ae={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/keyword.html#wildcard-field-type",target:"_blank",rel:"noopener noreferrer"},le=e("code",null,"wildcard",-1),oe={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/binary.html",target:"_blank",rel:"noopener noreferrer"},ie=e("code",null,"binary",-1),ce=e("li",null,[t("数值类型："),e("code",null,"long"),t("、"),e("code",null,"float"),t(" 等")],-1),de={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/date.html",target:"_blank",rel:"noopener noreferrer"},he=e("code",null,"date",-1),ue={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/boolean.html",target:"_blank",rel:"noopener noreferrer"},pe=e("code",null,"boolean",-1),_e={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/object.html",target:"_blank",rel:"noopener noreferrer"},ge=e("code",null,"object",-1),me={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/nested.html",target:"_blank",rel:"noopener noreferrer"},fe=e("code",null,"nested",-1),we={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html",target:"_blank",rel:"noopener noreferrer"},be=e("h3",{id:"【基础】es-如何识别字段的数据类型",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#【基础】es-如何识别字段的数据类型","aria-hidden":"true"},"#"),t(" 【基础】ES 如何识别字段的数据类型？")],-1),ke={class:"hint-container details"},ye=n('<summary>要点</summary><p>在 Elasticsearch 中，<code>Mapping</code>（映射），用来定义一个文档以及其所包含的字段如何被存储和索引，可以在映射中事先定义字段的数据类型、字段的权重、分词器等属性，就如同在关系型数据库中创建数据表时会设置字段的类型。简言之，<strong>Mapping 定义了索引中的文档有哪些字段及其类型、这些字段是如何存储和索引的，就好像数据库的表定义一样。</strong></p><p>Mapping 会把 json 文档映射成 Lucene 所需要的扁平格式</p><p>一个 Mapping 属于一个索引的 Type</p><ul><li>每个文档都属于一个 Type</li><li>一个 Type 有一个 Mapping 定义</li><li>7.0 开始，不需要在 Mapping 定义中指定 type 信息</li></ul><p>每个 <code>document</code> 都是 <code>field</code> 的集合，每个 <code>field</code> 都有自己的数据类型。映射数据时，可以创建一个 <code>mapping</code>，其中包含与 <code>document</code> 相关的 <code>field</code> 列表。映射定义还包括元数据 <code>field</code>，例如 <code>_source</code> ，它自定义如何处理 <code>document</code> 的关联元数据。</p><p>在 Elasticsearch 中，映射可分为<strong>静态映射</strong>和<strong>动态映射</strong>。在关系型数据库中写入数据之前首先要建表，在建表语句中声明字段的属性，在 Elasticsearch 中，则不必如此，Elasticsearch 最重要的功能之一就是让你尽可能快地开始探索数据，文档写入 Elasticsearch 中，它会根据字段的类型自动识别，这种机制称为<strong>动态映射</strong>，而<strong>静态映射</strong>则是写入数据之前对字段的属性进行手工设置。</p><h4 id="静态映射" tabindex="-1"><a class="header-anchor" href="#静态映射" aria-hidden="true">#</a> 静态映射</h4>',8),Ee={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/explicit-mapping.html",target:"_blank",rel:"noopener noreferrer"},xe=e("strong",null,"静态映射",-1),qe=n(`<p>例如：</p><ul><li>哪些字符串字段应被视为全文字段。</li><li>哪些字段包含数字、日期或地理位置。</li><li>日期值的格式。</li><li>用于控制动态添加字段的自定义规则。</li></ul><p>【示例】创建索引时，显示指定 mapping</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">PUT</span> <span class="token operator">/</span>my<span class="token operator">-</span>index<span class="token operator">-</span><span class="token number">000001</span>
<span class="token punctuation">{</span>
  <span class="token string-property property">&quot;mappings&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;properties&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;age&quot;</span><span class="token operator">:</span>    <span class="token punctuation">{</span> <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;integer&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token string-property property">&quot;email&quot;</span><span class="token operator">:</span>  <span class="token punctuation">{</span> <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;keyword&quot;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span>   <span class="token punctuation">{</span> <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;text&quot;</span>  <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【示例】在已存在的索引中，指定一个 field 的属性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">PUT</span> <span class="token operator">/</span>my<span class="token operator">-</span>index<span class="token operator">-</span><span class="token number">000001</span><span class="token operator">/</span>_mapping
<span class="token punctuation">{</span>
  <span class="token string-property property">&quot;properties&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;employee-id&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;keyword&quot;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&quot;index&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【示例】查看 mapping</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>GET /my-index-000001/_mapping
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>【示例】查看指定 field 的 mapping</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>GET /my-index-000001/_mapping/field/employee-id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="动态映射" tabindex="-1"><a class="header-anchor" href="#动态映射" aria-hidden="true">#</a> 动态映射</h4><p>动态映射机制，允许用户不手动定义映射，Elasticsearch 会自动识别字段类型。在实际项目中，如果遇到的业务在导入数据之前不确定有哪些字段，也不清楚字段的类型是什么，使用动态映射非常合适。当 Elasticsearch 在文档中碰到一个以前没见过的字段时，它会利用动态映射来决定该字段的类型，并自动把该字段添加到映射中。</p><p>示例：创建一个名为 <code>data</code> 的索引、其 <code>mapping</code> 类型为 <code>_doc</code>，并且有一个类型为 <code>long</code> 的字段 <code>count</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>PUT data/_doc/1
<span class="token punctuation">{</span> <span class="token string">&quot;count&quot;</span><span class="token builtin class-name">:</span> <span class="token number">5</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,14),ve=e("h2",{id:"elasticsearch-存储",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#elasticsearch-存储","aria-hidden":"true"},"#"),t(" Elasticsearch 存储")],-1),Se=e("p",null,"扩展阅读：",-1),ze={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html",target:"_blank",rel:"noopener noreferrer"},Te={href:"https://www.itshujia.com/read/elasticsearch/354.html",target:"_blank",rel:"noopener noreferrer"},Ie={href:"https://blog.devgenius.io/elasticsearch-solution-to-searching-71116220c82f",target:"_blank",rel:"noopener noreferrer"},De=e("h3",{id:"【基础】es-的逻辑存储是怎样设计的",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#【基础】es-的逻辑存储是怎样设计的","aria-hidden":"true"},"#"),t(" 【基础】ES 的逻辑存储是怎样设计的？")],-1),Le={class:"hint-container details"},Me=n(`<summary>要点</summary><p>Elasticsearch 的逻辑存储被设计为层级结构，自上而下依次为：</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202411260812733.png" alt="Elasticsearch 逻辑存储" tabindex="0" loading="lazy"><figcaption>Elasticsearch 逻辑存储</figcaption></figure><p>各层级结构的说明如下：</p><p>（1）<strong>Document（文档）</strong></p><p>Elasticsearch 是面向文档的，这意味着读写数据的最小单位是文档。Elasticsearch 以 JSON 文档的形式序列化和存储数据。文档是一组字段，这些字段是包含数据的键值对。每个文档都有一个唯一的 ID。</p><p>一个简单的 Elasticsearch 文档可能如下所示：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;_index&quot;</span><span class="token operator">:</span> <span class="token string">&quot;my-first-elasticsearch-index&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;_id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;DyFpo5EBxE8fzbb95DOa&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;_version&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token property">&quot;_seq_no&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token property">&quot;_primary_term&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token property">&quot;found&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">&quot;_source&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;email&quot;</span><span class="token operator">:</span> <span class="token string">&quot;john@smith.com&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;first_name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;last_name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Smith&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;info&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;bio&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Eco-warrior and defender of the weak&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span>
      <span class="token property">&quot;interests&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;dolphins&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;whales&quot;</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;join_date&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2024/05/01&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Elasticsearch 中的 document 是无模式的，也就是并非所有 document 都必须拥有完全相同的字段，它们不受限于同一个模式。</p><p>（2）<strong>Field（字段）</strong></p><p>field 包含数据的键值对。默认情况下，Elasticsearch 对每个字段中的所有数据建立索引，并且每个索引字段都具有专用的优化数据结构。</p>`,11),je=e("code",null,"document",-1),Pe={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-fields.html",target:"_blank",rel:"noopener noreferrer"},Be=e("strong",null,"Metadata Field（元数据字段）",-1),Ce=e("code",null,"_",-1),Fe={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-index-field.html",target:"_blank",rel:"noopener noreferrer"},Ue=e("code",null,"_index",-1),Re={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-id-field.html",target:"_blank",rel:"noopener noreferrer"},Ge=e("code",null,"_id",-1),Ne={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-source-field.html",target:"_blank",rel:"noopener noreferrer"},He=e("code",null,"_source",-1),Je=n("<p>（3）<strong>Type（类型）</strong></p><p>在 Elasticsearch 中，<strong>type 是 document 的逻辑分类</strong>。每个 index 里可以有一个或多个 type。</p><p>不同的 type 应该有相似的结构（schema）。举例来说，<code>id</code>字段不能在这个组是字符串，在另一个组是数值。</p><blockquote><p>注意：Elasticsearch 7.x 版已彻底移除 type。</p></blockquote><p>（4）<strong>Index（索引）</strong></p><p>在 Elasticsearch 中，<strong>可以将 index 视为 document 的集合</strong>。</p><p>Elasticsearch 会为所有字段建立索引，经过处理后写入一个倒排索引（Inverted Index）。查找数据的时候，直接查找该索引。</p><p>所以，Elasticsearch 数据管理的顶层单位就叫做 Index。它是单个数据库的同义词。每个 Index 的名字必须是小写。</p><p>（5）Elasticsearch 概念和 RDBM 概念</p><table><thead><tr><th>Elasticsearch</th><th>DB</th></tr></thead><tbody><tr><td>索引（index）</td><td>数据库（database）</td></tr><tr><td>类型（type，6.0 废弃，7.0 移除）</td><td>数据表（table）</td></tr><tr><td>文档（docuemnt）</td><td>行（row）</td></tr><tr><td>字符（field）</td><td>列（column）</td></tr><tr><td>映射（mapping）</td><td>表结构（schema）</td></tr></tbody></table>",10),Ae=e("h3",{id:"【基础】es-的物理存储是怎样设计的",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#【基础】es-的物理存储是怎样设计的","aria-hidden":"true"},"#"),t(" 【基础】ES 的物理存储是怎样设计的？")],-1),Oe={class:"hint-container details"},Ve=e("summary",null,"要点",-1),Ke=e("p",null,"Elasticsearch 的物理存储，天然使用了分布式设计。",-1),Qe=e("p",null,"每个 Elasticsearch 进程都从属于一个 cluster，一个 cluster 可以有一个或多个 node（即 Elasticsearch 进程）。",-1),Ze=e("p",null,"Elasticsearch 存储会将每个 index 分为多个 shard，而 shard 可以分布在集群中不同节点上。正是由于这个机制，使得 Elasticsearch 有了水平扩展的能力。shard 也是 Elasticsearch 将数据从一个节点迁移到拎一个节点的最小单位。",-1),Xe={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules-merge.html",target:"_blank",rel:"noopener noreferrer"},We=e("figure",null,[e("img",{src:"https://raw.githubusercontent.com/dunwu/images/master/snap/202411260815446.png",alt:"Elasticsearch 物理存储",tabindex:"0",loading:"lazy"}),e("figcaption",null,"Elasticsearch 物理存储")],-1),Ye=n('<h3 id="【中级】什么是倒排索引" tabindex="-1"><a class="header-anchor" href="#【中级】什么是倒排索引" aria-hidden="true">#</a> 【中级】什么是倒排索引？</h3><details class="hint-container details"><summary>要点</summary><p>既然有倒排索引，顾名思义，有与之相对的正排索引。这里，以实现一个诗词检索器为例，来说明一下正排索引和倒排索引的区别。</p><p><strong>正排索引是 ID 到数据的映射关系</strong>。如下所示，每首诗词用一个 ID 唯一识别。如果，我们要查找诗歌内容中是否包含某个关键字，就不得不在内容的完整文本中进行检索，效率很低。即使针对文档内容创建传统 RDBM 的索引（通常为 B+ 树结构），查找效率依然低下，并且会产生较大的额外存储空间开销。</p><table><thead><tr><th>ID</th><th>文档标题</th><th>文档内容</th></tr></thead><tbody><tr><td>1</td><td>望月怀远</td><td>海上生明月，天涯共此时…</td></tr><tr><td>2</td><td>春江花月夜</td><td>春江潮水连海平，海上明月共潮生…</td></tr><tr><td>3</td><td>静夜思</td><td>床前明月光，疑是地上霜。举头望明月，低头思故乡。</td></tr><tr><td>4</td><td>锦瑟</td><td>沧海月明珠有泪，蓝田日暖玉生烟…</td></tr></tbody></table><p>倒排索引的实现与正排索引相反。<strong>将文本分词后保存为多个词项，词项到 ID 的映射关系称为倒排索引（Inverted index）</strong>。</p><table><thead><tr><th>词项</th><th>ID</th><th>词频</th></tr></thead><tbody><tr><td>月</td><td>1, 2, 3, 4</td><td>1：1 次、2：1 次、3：2 次、4：1 次</td></tr><tr><td>明月</td><td>1, 2, 3</td><td>1：1 次、2：1 次、3：2 次</td></tr><tr><td>海</td><td>1, 2, 4</td><td>1：1 次、2：1 次、4：1 次</td></tr></tbody></table><p>除了要保存词项与 ID 的关系外，还需要保存这个词项在对应文档出现的位置、偏移量等信息，这是因为很多检索的场景中还需要判断关键词前后的内容是否符合搜索要求。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202411260816781.png" alt="Elasticsearch 倒排索引" tabindex="0" loading="lazy"><figcaption>Elasticsearch 倒排索引</figcaption></figure><p>有了倒排索引，搜索引擎可以很方便地响应用户的查询。比如用户输入查询 <code>明月</code>，搜索系统查找倒排索引，从中读出包含这个单词的文档，这些文档就是提供给用户的搜索结果。</p><p>要注意倒排索引的两个重要细节：</p><ul><li>倒排索引中的所有词项对应一个或多个文档；</li><li>倒排索引中的词项<strong>根据字典顺序升序排列</strong></li></ul></details><h3 id="【中级】什么是字典树" tabindex="-1"><a class="header-anchor" href="#【中级】什么是字典树" aria-hidden="true">#</a> 【中级】什么是字典树？</h3><details class="hint-container details"><summary>要点</summary><p>Trie（字典树），也被称为前缀树，是一种树状数据结构，用于有效检索键值对。它通常用于实现字典和自动补全功能，使其成为许多搜索算法的基本组件。</p><p>Trie 遵循一个规则：如果两个字符串有共同的前缀，那么它们在 Trie 中将具有相同的祖先。</p><p>Trie 的检索能力也可以使用 Hash 替代，但是 Trie 比 Hash 更高效。此外，Trie 有 Hash 不具备的<strong>优点</strong>：Trie 支持前缀搜索和排序。Trie 的主要<strong>缺点</strong>是：存储词项需要额外的空间，对于长文本，空间可能会变得很大。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202411301547515.png" alt="字典树" tabindex="0" loading="lazy"><figcaption>字典树</figcaption></figure></details><h3 id="【高级】es-如何实现倒排索引" tabindex="-1"><a class="header-anchor" href="#【高级】es-如何实现倒排索引" aria-hidden="true">#</a> 【高级】ES 如何实现倒排索引？</h3>',5),$e={class:"hint-container details"},et=e("summary",null,"要点",-1),tt=e("p",null,"在 Elasticsearch 中，数据存储、检索实际上是基于 Lucene 实现。",-1),st=e("p",null,"一个 Elasticsearch shard 对应一个 Lucene index，",-1),rt={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules-merge.html",target:"_blank",rel:"noopener noreferrer"},nt=n('<figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202411260817705.png" alt="ES 如何实现倒排索引" tabindex="0" loading="lazy"><figcaption>ES 如何实现倒排索引</figcaption></figure><p>倒排索引的组成主要有 3 个部分：</p><ul><li><strong>Term Dictionary</strong> - <strong>Term Dictionary 用于保存 term（词项）</strong>。由于 ES 会对 document 中的每个 field 都进行分词，所以数据量可能会非常大。 <ul><li>Term Dictionary 存储数据时，先将所有的 term 进行排序，然后将 Term Dictionary 中有共同前缀的 term 抽取出来进行分块存储；再对共同前缀做索引，最后通过索引就可以找到公共前缀对应的块在 Term Dictionary 文件中的偏移地址。</li><li>由于每个块中都有共同前缀，所以不需要再保存每个 Term 的全部内容，只需要保存其后缀即可，而且这些后缀都是排好序的。</li></ul></li><li><strong>Term Index</strong> - <strong>Term Index 是 Term Dictionary 的索引</strong>。由于 Term Dictionary 存储的 term 可能会非常多，为了提高查询效率，从而设计了 Term Index。 <ul><li>为了提高检索效率以及节省空间，Term Index 只使用公共前缀做索引。</li><li><strong>Lucene 中实现 Term Index 采用了 FST 算法</strong>。FST 是一种非常复杂的结构，可以把它简单理解为一个<strong>占用空间小且高效的 KV 数据结构</strong>，有点类似于 Trie（字典树）。FST 有以下的特点： <ul><li>通过对 Term Dictionary 数据的前缀复用，压缩了存储空间；</li><li>高效的查询性能，<code>O(len(prefix))</code> 的复杂度；</li><li>构建后不可修改，因此 Lucene segment 也不允许修改。</li></ul></li></ul></li><li><strong>Posting List</strong> - <strong>Posting List 保存着每个 term 的映射信息</strong>。如文档 ID、词频、位置等。Lucene 把这些数据分成 3 个文件进行存储： <ul><li><code>.doc</code> 文件，记录了文档 ID 信息和 term 的词频，还额外记录了跳表的信息，用来加速文档 ID 的查询；并且还记录了 term 在 <code>.pos</code> 和 <code>.pay</code> 文件中的位置，有助于进行快速读取。</li><li><code>.pay</code> 文件，记录了 payload 信息和 term 在 doc 中的偏移信息；</li><li><code>.pos</code> 文件，记录了 term 在 doc 中的位置信息。</li></ul></li></ul>',3),at=e("h2",{id:"elasticsearch-搜索",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#elasticsearch-搜索","aria-hidden":"true"},"#"),t(" Elasticsearch 搜索")],-1),lt=e("p",null,"扩展阅读：",-1),ot={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-with-elasticsearch.html",target:"_blank",rel:"noopener noreferrer"},it={href:"https://time.geekbang.org/course/detail/100030501-102659",target:"_blank",rel:"noopener noreferrer"},ct={href:"https://www.itshujia.com/read/elasticsearch/358.html",target:"_blank",rel:"noopener noreferrer"},dt={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-with-elasticsearch.html",target:"_blank",rel:"noopener noreferrer"},ht={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/full-text-queries.html",target:"_blank",rel:"noopener noreferrer"},ut={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/term-level-queries.html",target:"_blank",rel:"noopener noreferrer"},pt={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/compound-queries.html",target:"_blank",rel:"noopener noreferrer"},_t={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-suggesters.html",target:"_blank",rel:"noopener noreferrer"},gt={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-filter-context.html",target:"_blank",rel:"noopener noreferrer"},mt=e("h3",{id:"【基础】es-索引别名有什么用",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#【基础】es-索引别名有什么用","aria-hidden":"true"},"#"),t(" 【基础】ES 索引别名有什么用？")],-1),ft={class:"hint-container details"},wt=e("summary",null,"要点",-1),bt=e("p",null,"Elasticsearch 中的别名可用于更轻松地管理和使用索引。别名允许同时对多个索引执行操作，或者通过隐藏底层索引结构的复杂性来简化索引管理。",-1),kt={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/aliases.html",target:"_blank",rel:"noopener noreferrer"},yt=e("h3",{id:"【基础】es-中有哪些全文搜索-api",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#【基础】es-中有哪些全文搜索-api","aria-hidden":"true"},"#"),t(" 【基础】ES 中有哪些全文搜索 API？")],-1),Et={class:"hint-container details"},xt=e("summary",null,"要点",-1),qt=e("p",null,"ES 支持全文搜索的 API 主要有以下几个：",-1),vt={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-intervals-query.html",target:"_blank",rel:"noopener noreferrer"},St={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query.html",target:"_blank",rel:"noopener noreferrer"},zt=e("strong",null,"匹配查询",-1),Tt={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-bool-prefix-query.html",target:"_blank",rel:"noopener noreferrer"},It=e("code",null,"prefix",-1),Dt=e("code",null,"term",-1),Lt={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query-phrase.html",target:"_blank",rel:"noopener noreferrer"},Mt=e("strong",null,"短语匹配查询",-1),jt={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query-phrase-prefix.html",target:"_blank",rel:"noopener noreferrer"},Pt=e("code",null,"match_phrase",-1),Bt={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-multi-match-query.html",target:"_blank",rel:"noopener noreferrer"},Ct={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-combined-fields-query.html",target:"_blank",rel:"noopener noreferrer"},Ft={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html",target:"_blank",rel:"noopener noreferrer"},Ut={href:"https://www.elastic.co/guide/en/elasticsearch/reference/8.16/query-dsl-query-string-query.html#query-string-syntax",target:"_blank",rel:"noopener noreferrer"},Rt=e("code",null,"AND|OR|NOT",-1),Gt={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-simple-query-string-query.html",target:"_blank",rel:"noopener noreferrer"},Nt=e("code",null,"query_string",-1),Ht={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/full-text-queries.html",target:"_blank",rel:"noopener noreferrer"},Jt=e("h3",{id:"【基础】es-中有哪些词项搜索-api",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#【基础】es-中有哪些词项搜索-api","aria-hidden":"true"},"#"),t(" 【基础】ES 中有哪些词项搜索 API？")],-1),At={class:"hint-container details"},Ot=e("summary",null,"要点",-1),Vt=e("p",null,[e("strong",null,[e("code",null,"Term"),t("（词项）是表达语意的最小单位")]),t("。搜索和利用统计语言模型进行自然语言处理都需要处理 Term。")],-1),Kt=e("p",null,[t("全文查询在执行查询之前会分析查询字符串。与全文查询不同，"),e("strong",null,"词项级别查询不会分词"),t("，而是将输入作为一个整体，在倒排索引中查找准确的词项。并且使用相关度计算公式为每个包含该词项的文档进行相关度计算。一言以概之："),e("strong",null,"词项查询是对词项进行精确匹配"),t("。词项查询通常用于结构化数据，如数字、日期和枚举类型。")],-1),Qt=e("p",null,"ES 支持词项搜索的 API 主要有以下几个：",-1),Zt={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-exists-query.html",target:"_blank",rel:"noopener noreferrer"},Xt={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-fuzzy-query.html",target:"_blank",rel:"noopener noreferrer"},Wt={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-ids-query.html",target:"_blank",rel:"noopener noreferrer"},Yt=e("code",null,"_id",-1),$t={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-prefix-query.html",target:"_blank",rel:"noopener noreferrer"},es={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-range-query.html",target:"_blank",rel:"noopener noreferrer"},ts={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-regexp-query.html",target:"_blank",rel:"noopener noreferrer"},ss={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-term-query.html",target:"_blank",rel:"noopener noreferrer"},rs={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-terms-query.html",target:"_blank",rel:"noopener noreferrer"},ns={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-term-query.html",target:"_blank",rel:"noopener noreferrer"},as=e("strong",null,[e("code",null,"term")],-1),ls={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-terms-set-query.html",target:"_blank",rel:"noopener noreferrer"},os={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-term-query.html",target:"_blank",rel:"noopener noreferrer"},is=e("strong",null,[e("code",null,"term")],-1),cs={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-wildcard-query.html",target:"_blank",rel:"noopener noreferrer"},ds={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/term-level-queries.html",target:"_blank",rel:"noopener noreferrer"},hs=e("h3",{id:"【基础】es-支持哪些组合查询",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#【基础】es-支持哪些组合查询","aria-hidden":"true"},"#"),t(" 【基础】ES 支持哪些组合查询？")],-1),us={class:"hint-container details"},ps=e("summary",null,"要点",-1),_s=e("p",null,"复合查询就是把一些简单查询组合在一起实现更复杂的查询需求，除此之外，复合查询还可以控制另外一个查询的行为。",-1),gs=e("p",null,"复合查询有以下类型：",-1),ms={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-bool-query.html",target:"_blank",rel:"noopener noreferrer"},fs=e("code",null,"bool",-1),ws={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-boosting-query.html",target:"_blank",rel:"noopener noreferrer"},bs=e("code",null,"boosting",-1),ks=e("code",null,"positive",-1),ys=e("code",null,"negative",-1),Es={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-constant-score-query.html",target:"_blank",rel:"noopener noreferrer"},xs=e("code",null,"constant_score",-1),qs=e("code",null,"constant_score",-1),vs=e("code",null,"query",-1),Ss=e("code",null,"filter",-1),zs={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-dis-max-query.html",target:"_blank",rel:"noopener noreferrer"},Ts=e("code",null,"dis_max",-1),Is={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html",target:"_blank",rel:"noopener noreferrer"},Ds=e("code",null,"function_score",-1),Ls={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/compound-queries.html",target:"_blank",rel:"noopener noreferrer"},Ms=e("h3",{id:"【基础】es-中的-query-和-filter-有什么区别",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#【基础】es-中的-query-和-filter-有什么区别","aria-hidden":"true"},"#"),t(" 【基础】ES 中的 query 和 filter 有什么区别？")],-1),js={class:"hint-container details"},Ps=n("<summary>要点</summary><p>在 Elasticsearch 中，可以在两个不同的上下文中执行查询：</p><ul><li><code>query</code> context - <strong>有相关性计算</strong>，采用相关性算法，计算文档与查询关键词之间的相关度，并根据评分（<code>_score</code>）大小排序。</li><li><code>filter</code> context - <strong>无相关性计算</strong>，可以利用缓存，性能更好。</li></ul>",3),Bs={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-filter-context.html",target:"_blank",rel:"noopener noreferrer"},Cs=e("h3",{id:"【中级】es-支持哪些推荐查询",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#【中级】es-支持哪些推荐查询","aria-hidden":"true"},"#"),t(" 【中级】ES 支持哪些推荐查询？")],-1),Fs={class:"hint-container details"},Us=e("summary",null,"要点",-1),Rs={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-suggesters.html",target:"_blank",rel:"noopener noreferrer"},Gs=e("strong",null,[e("code",null,"Suggester")],-1),Ns=e("p",null,"根据使用场景的不同，ES 提供了以下 4 种 Suggester：",-1),Hs=e("ul",null,[e("li",null,[e("strong",null,"Term Suggester"),t(" - 基于词项的纠错补全。")]),e("li",null,[e("strong",null,"Phrase Suggester"),t(" - 基于短语的纠错补全。")]),e("li",null,[e("strong",null,"Completion Suggester"),t(" - 自动补全单词，输入词语的前半部分，自动补全单词。")]),e("li",null,[e("strong",null,"Context Suggester"),t(" - 基于上下文的补全提示，可以实现上下文感知推荐。")])],-1),Js={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-suggesters.html",target:"_blank",rel:"noopener noreferrer"},As=n('<h3 id="【高级】es-搜索数据的流程是怎样的" tabindex="-1"><a class="header-anchor" href="#【高级】es-搜索数据的流程是怎样的" aria-hidden="true">#</a> 【高级】ES 搜索数据的流程是怎样的？</h3><details class="hint-container details"><summary>要点</summary><p>在 Elasticsearch 中，搜索一般分为两个阶段，query 和 fetch 阶段。可以简单的理解，query 阶段确定要取哪些 doc，fetch 阶段取出具体的 doc。</p><p>Query 阶段会根据搜索条件遍历每个分片（主分片或者副分片中的其一）中的数据，返回符合条件的前 N 条数据的 ID 和排序值，然后在协调节点中对所有分片的数据进行排序，获取前 N 条数据的 ID。</p><p><strong>Query 阶段的流程</strong>如下：</p><ol><li>客户端发送请求到任意一个节点，这个 node 成为 coordinate node（协调节点）。coordinate node 创建一个大小为 from + size 的优先级队列用来存放结果。</li><li>coordinate node 对 document 进行路由，将请求转发到对应的 node，此时会使用 round-robin 随机轮询算法，在 primary shard 以及其所有 replica 中随机选择一个，让读请求负载均衡。</li><li>每个分片在本地执行搜索请求，并将查询结果打分排序，然后将结果保存到 from + size 大小的有序队列中。</li><li>接着，每个分片将结果返回给 coordinate node，coordinate node 对数据进行汇总处理：合并、排序、分页，将汇总数据存到一个大小为 from + size 的全局有序队列。</li></ol><p>需要注意的是，在协调节点转发搜索请求的时候，如果有 N 个 Shard 位于同一个节点时，并不会合并这些请求，而是发生 N 次请求！</p><p>在 Fetch 阶段，协调节点会从 Query 阶段产生的全局排序列表中确定需要取回的文档 ID 列表，然后通过路由算法计算出各个文档对应的分片，并且用 multi get 的方式到对应的分片上获取文档数据。</p><p><strong>Fetch 阶段的流程</strong>如下：</p><ol><li>coordinate node 确定需要获取哪些文档，然后向相关节点发起 multi get 请求；</li><li>分片所在节点读取文档数据，并且进行 <code>_source</code> 字段过滤、处理高亮参数等，然后把处理后的文档数据返回给协调节点；</li><li>coordinate node 汇总所有数据后，返回给客户端。</li></ol></details><h3 id="【高级】es-为什么会有深分页问题" tabindex="-1"><a class="header-anchor" href="#【高级】es-为什么会有深分页问题" aria-hidden="true">#</a> 【高级】ES 为什么会有深分页问题？</h3>',3),Os={class:"hint-container details"},Vs=e("summary",null,"要点",-1),Ks=e("p",null,"在 Elasticsearch 中，支持三种分页查询方式：",-1),Qs=e("li",null,[t("from + size - 可以使用 "),e("code",null,"from"),t(" 和 "),e("code",null,"size"),t(" 参数分别指定查询的起始页和每页记录数。")],-1),Zs={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/paginate-search-results.html#search-after",target:"_blank",rel:"noopener noreferrer"},Xs=e("code",null,"search_after",-1),Ws={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/paginate-search-results.html#scroll-search-results",target:"_blank",rel:"noopener noreferrer"},Ys=n("<p>前文中，我们已经了解了 ES 两阶段搜索流程（Query 和 Fetch）。从中不难发现，这种搜索方式在分页查询时会出现以下情况：</p><ul><li>每个 shard 要扫描 <code>from + size</code> 条数据；</li><li>coordinate node 需要接收并处理 <code>(from + size) * primary_shard_num</code> 条数据。</li></ul><p><strong>如果 from 或 size 很大，需要处理的数据量也会很大，代价很高，这就是深分页产生的原因</strong>。为了避免深分页，ES 默认限制 <code>from + size</code> 不能超过 10000，可以通过 <code>index.max_result_window</code> 设置。</p><p>如何解决 Elasticsearch 深分页问题？</p>",4),$s={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/paginate-search-results.html#search-after",target:"_blank",rel:"noopener noreferrer"},er=e("code",null,"search_after",-1),tr={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/paginate-search-results.html#scroll-search-results",target:"_blank",rel:"noopener noreferrer"},sr=e("h2",{id:"elasticsearch-聚合",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#elasticsearch-聚合","aria-hidden":"true"},"#"),t(" Elasticsearch 聚合")],-1),rr=e("p",null,"扩展阅读：",-1),nr={href:"https://time.geekbang.org/course/detail/100030501-102659",target:"_blank",rel:"noopener noreferrer"},ar={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations.html",target:"_blank",rel:"noopener noreferrer"},lr={href:"https://www.itshujia.com/read/elasticsearch/348.html",target:"_blank",rel:"noopener noreferrer"},or=e("h3",{id:"【基础】什么是聚合-es-中有哪些聚合",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#【基础】什么是聚合-es-中有哪些聚合","aria-hidden":"true"},"#"),t(" 【基础】什么是聚合？ES 中有哪些聚合？")],-1),ir={class:"hint-container details"},cr=e("summary",null,"要点",-1),dr=e("p",null,"在数据库中，聚合是指将数据进行分组统计，得到一个汇总的结果。例如，计算总和、平均值、最大值或最小值等操作。",-1),hr=e("p",null,"Elasticsearch 将聚合分为三类：",-1),ur=e("thead",null,[e("tr",null,[e("th",null,"类型"),e("th",null,"说明")])],-1),pr={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics.html",target:"_blank",rel:"noopener noreferrer"},_r=e("strong",null,"Metric（指标聚合）",-1),gr=e("td",null,[t("根据字段值进行"),e("strong",null,"统计"),t("计算")],-1),mr={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket.html",target:"_blank",rel:"noopener noreferrer"},fr=e("strong",null,"Bucket（桶聚合）",-1),wr=e("td",null,[t("根据字段值、范围或其他条件进行"),e("strong",null,"分组")],-1),br={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-pipeline.html",target:"_blank",rel:"noopener noreferrer"},kr=e("strong",null,"Pipeline（管道聚合）",-1),yr=e("td",null,[t("对其他聚合输出的结果进行"),e("strong",null,"再次聚合")],-1),Er=e("h3",{id:"【中级】es-如何对海量数据-过亿-进行聚合计算",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#【中级】es-如何对海量数据-过亿-进行聚合计算","aria-hidden":"true"},"#"),t(" 【中级】ES 如何对海量数据（过亿）进行聚合计算？")],-1),xr={class:"hint-container details"},qr=e("summary",null,"要点",-1),vr={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-cardinality-aggregation.html",target:"_blank",rel:"noopener noreferrer"},Sr=e("code",null,"cardinality",-1),zr=n('<h2 id="elasticsearch-分析" tabindex="-1"><a class="header-anchor" href="#elasticsearch-分析" aria-hidden="true">#</a> Elasticsearch 分析</h2><h3 id="【基础】什么是文本分析-为什么需要文本分析" tabindex="-1"><a class="header-anchor" href="#【基础】什么是文本分析-为什么需要文本分析" aria-hidden="true">#</a> 【基础】什么是文本分析？为什么需要文本分析？</h3><details class="hint-container details"><summary>要点</summary><p>Elasticsearch 中存储的数据可以粗略分为：</p><ul><li><strong>词项数据</strong> - 采用<strong>精确查询</strong>。比较两条词项数据是否相对，实际是比较二者的二进制数据，结果只有相等或不相等。</li><li><strong>文本数据</strong> - 采用<strong>全文搜索</strong>。比较两个文本数据是否相等，没有太大意义，一般只会比较二者是否相似。相似性比较，是通过相关性评分来评估的。而计算相关性评分，需要对全文先分词处理，然后对分词后的词项进行统计才能进行相似性评估。</li></ul><p><strong>Elasticsearch 文本分析是将非结构化文本转换为一组词项（term）的过程</strong>。</p><p>文本分析可以分为两个方面：</p><ul><li><strong>Tokenization（分词化）</strong> - 分词化将文本分解成更小的块，称为分词。在大多数情况下，这些分词是单独的 term（词项）。</li><li><strong>Normalization（标准化）</strong> - 经过分词后的文本只能进行词项匹配，但是无法进行同义词匹配。为解决这个问题，可以将文本进行标准化处理。例如：将 <code>foxes</code> 标准化为 <code>fox</code>。</li></ul></details><h3 id="【基础】elasticsearch-中的分析器是什么" tabindex="-1"><a class="header-anchor" href="#【基础】elasticsearch-中的分析器是什么" aria-hidden="true">#</a> 【基础】Elasticsearch 中的分析器是什么？</h3>',4),Tr={class:"hint-container details"},Ir=e("summary",null,"要点",-1),Dr={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analyzer-anatomy.html",target:"_blank",rel:"noopener noreferrer"},Lr=e("strong",null,"analyzer（分析器）",-1),Mr={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analyzer-anatomy.html",target:"_blank",rel:"noopener noreferrer"},jr=e("strong",null,"analyzer（分析器）",-1),Pr={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-charfilters.html",target:"_blank",rel:"noopener noreferrer"},Br={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-tokenizers.html",target:"_blank",rel:"noopener noreferrer"},Cr={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-tokenfilters.html",target:"_blank",rel:"noopener noreferrer"},Fr=e("code",null,"character filters -> tokenizer -> token filters",-1),Ur=e("figure",null,[e("img",{src:"https://raw.githubusercontent.com/dunwu/images/master/snap/202412012129250.png",alt:"",tabindex:"0",loading:"lazy"}),e("figcaption")],-1),Rr=e("p",null,"Elasticsearch 内置的分析器：",-1),Gr={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-standard-analyzer.html",target:"_blank",rel:"noopener noreferrer"},Nr=e("code",null,"standard",-1),Hr={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-simple-analyzer.html",target:"_blank",rel:"noopener noreferrer"},Jr=e("code",null,"simple",-1),Ar={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-whitespace-analyzer.html",target:"_blank",rel:"noopener noreferrer"},Or=e("code",null,"whitespace",-1),Vr={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-stop-analyzer.html",target:"_blank",rel:"noopener noreferrer"},Kr=e("code",null,"stop",-1),Qr={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-simple-analyzer.html",target:"_blank",rel:"noopener noreferrer"},Zr=e("code",null,"simple",-1),Xr={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-keyword-analyzer.html",target:"_blank",rel:"noopener noreferrer"},Wr=e("code",null,"keyword",-1),Yr={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-pattern-analyzer.html",target:"_blank",rel:"noopener noreferrer"},$r=e("code",null,"pattern",-1),en={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-fingerprint-analyzer.html",target:"_blank",rel:"noopener noreferrer"},tn=e("code",null,"fingerprint",-1),sn={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-lang-analyzer.html",target:"_blank",rel:"noopener noreferrer"},rn={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-standard-analyzer.html",target:"_blank",rel:"noopener noreferrer"},nn=e("strong",null,"standard analyzer（标准分析器）",-1),an=e("h4",{id:"character-filters-字符过滤器",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#character-filters-字符过滤器","aria-hidden":"true"},"#"),t(" Character Filters（字符过滤器）")],-1),ln={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-charfilters.html",target:"_blank",rel:"noopener noreferrer"},on=e("strong",null,"零个或多个",-1),cn={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-charfilters.html",target:"_blank",rel:"noopener noreferrer"},dn=e("p",null,"Elasticsearch 内置的字符过滤器：",-1),hn={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-htmlstrip-charfilter.html",target:"_blank",rel:"noopener noreferrer"},un=e("code",null,"html_strip",-1),pn=e("code",null,"html_strip",-1),_n=e("code",null,"<b>",-1),gn=e("code",null,"&amp;",-1),mn={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-mapping-charfilter.html",target:"_blank",rel:"noopener noreferrer"},fn=e("code",null,"mapping",-1),wn=e("code",null,"mapping",-1),bn={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-pattern-replace-charfilter.html",target:"_blank",rel:"noopener noreferrer"},kn=e("code",null,"pattern_replace",-1),yn=e("code",null,"pattern_replace",-1),En=e("h4",{id:"tokenizer-分词器",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#tokenizer-分词器","aria-hidden":"true"},"#"),t(" Tokenizer（分词器）")],-1),xn={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-tokenizers.html",target:"_blank",rel:"noopener noreferrer"},qn=e("strong",null,"有且仅有一个",-1),vn={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-tokenizers.html",target:"_blank",rel:"noopener noreferrer"},Sn=e("p",null,"Elasticsearch 内置的分词器：",-1),zn={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-standard-tokenizer.html",target:"_blank",rel:"noopener noreferrer"},Tn=e("code",null,"standard",-1),In={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-letter-tokenizer.html",target:"_blank",rel:"noopener noreferrer"},Dn=e("code",null,"letter",-1),Ln={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-lowercase-tokenizer.html",target:"_blank",rel:"noopener noreferrer"},Mn=e("code",null,"lowercase",-1),jn={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-whitespace-tokenizer.html",target:"_blank",rel:"noopener noreferrer"},Pn=e("code",null,"whitespace",-1),Bn={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-uaxurlemail-tokenizer.html",target:"_blank",rel:"noopener noreferrer"},Cn=e("code",null,"uax_url_email",-1),Fn={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-standard-tokenizer.html",target:"_blank",rel:"noopener noreferrer"},Un=e("code",null,"standard",-1),Rn={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-classic-tokenizer.html",target:"_blank",rel:"noopener noreferrer"},Gn=e("code",null,"classic",-1),Nn={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-thai-tokenizer.html",target:"_blank",rel:"noopener noreferrer"},Hn=e("code",null,"thai",-1),Jn={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-ngram-tokenizer.html",target:"_blank",rel:"noopener noreferrer"},An=e("code",null,"n-gram",-1),On=e("code",null,"quick",-1),Vn=e("code",null,"[qu， ui， ic， ck]",-1),Kn={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-edgengram-tokenizer.html",target:"_blank",rel:"noopener noreferrer"},Qn=e("code",null,"edge_n-gram",-1),Zn=e("code",null,"quick",-1),Xn=e("code",null,"[q， qu， qui， quic， quick]",-1),Wn={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-keyword-tokenizer.html",target:"_blank",rel:"noopener noreferrer"},Yn=e("code",null,"keyword",-1),$n={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-lowercase-tokenfilter.html",target:"_blank",rel:"noopener noreferrer"},ea=e("code",null,"lowercase",-1),ta={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-pattern-tokenizer.html",target:"_blank",rel:"noopener noreferrer"},sa=e("code",null,"pattern",-1),ra={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-simplepattern-tokenizer.html",target:"_blank",rel:"noopener noreferrer"},na=e("code",null,"simple_pattern",-1),aa={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-pattern-tokenizer.html",target:"_blank",rel:"noopener noreferrer"},la=e("code",null,"pattern",-1),oa={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-chargroup-tokenizer.html",target:"_blank",rel:"noopener noreferrer"},ia=e("code",null,"char_group",-1),ca={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-simplepatternsplit-tokenizer.html",target:"_blank",rel:"noopener noreferrer"},da=e("code",null,"simple_pattern_split",-1),ha={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-simplepattern-tokenizer.html",target:"_blank",rel:"noopener noreferrer"},ua=e("code",null,"simple_pattern",-1),pa={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-pathhierarchy-tokenizer.html",target:"_blank",rel:"noopener noreferrer"},_a=e("code",null,"path_hierarchy",-1),ga=e("code",null,"/foo/bar/baz",-1),ma=e("code",null,"[/foo, /foo/bar, /foo/bar/baz ]",-1),fa=e("h4",{id:"token-filters-分词过滤器",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#token-filters-分词过滤器","aria-hidden":"true"},"#"),t(" Token Filters（分词过滤器）")],-1),wa={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-tokenfilters.html",target:"_blank",rel:"noopener noreferrer"},ba={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-lowercase-tokenfilter.html",target:"_blank",rel:"noopener noreferrer"},ka=e("code",null,"lowercase",-1),ya={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-stop-tokenfilter.html",target:"_blank",rel:"noopener noreferrer"},Ea=e("code",null,"stop",-1),xa={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-synonym-tokenfilter.html",target:"_blank",rel:"noopener noreferrer"},qa=e("code",null,"synonym",-1),va={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-tokenfilters.html",target:"_blank",rel:"noopener noreferrer"},Sa=e("p",null,"Elasticsearch 内置了很多分词过滤器，这里列举几个常见的：",-1),za={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-classic-tokenfilter.html",target:"_blank",rel:"noopener noreferrer"},Ta=e("code",null,"classic",-1),Ia=e("code",null,"'s",-1),Da={href:"https://lucene.apache.org/core/9_12_0/analysis/common/org/apache/lucene/analysis/standard/ClassicFilter.html",target:"_blank",rel:"noopener noreferrer"},La={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-lowercase-tokenfilter.html",target:"_blank",rel:"noopener noreferrer"},Ma=e("code",null,"lowercase",-1),ja={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-stop-tokenfilter.html",target:"_blank",rel:"noopener noreferrer"},Pa=e("code",null,"stop",-1),Ba={href:"https://en.wikipedia.org/wiki/Stop_word",target:"_blank",rel:"noopener noreferrer"},Ca={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-synonym-tokenfilter.html",target:"_blank",rel:"noopener noreferrer"},Fa=e("code",null,"synonym",-1),Ua={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-with-synonyms.html",target:"_blank",rel:"noopener noreferrer"},Ra=e("h3",{id:"【中级】如果需要中文分词怎么办",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#【中级】如果需要中文分词怎么办","aria-hidden":"true"},"#"),t(" 【中级】如果需要中文分词怎么办？")],-1),Ga={class:"hint-container details"},Na=e("summary",null,"要点",-1),Ha=e("p",null,"在英文中，单词有自然的空格作为分隔。",-1),Ja=e("p",null,"在中文中，分词有以下难点：",-1),Aa=e("ul",null,[e("li",null,"中文不能根据一个个汉字进行分词"),e("li",null,"不同于英文可以根据自然的空格进行分词；中文中一般不会有空格。"),e("li",null,"同一句话，在不同的上下文中，有不同个理解。例如：这个苹果，不大好吃；这个苹果，不大，好吃！")],-1),Oa=e("p",null,"可以使用一些插件来获得对中文更好的分析能力：",-1),Va={href:"https://www.elastic.co/guide/en/elasticsearch/plugins/current/analysis-icu.html",target:"_blank",rel:"noopener noreferrer"},Ka={href:"https://github.com/infinilabs/analysis-ik",target:"_blank",rel:"noopener noreferrer"},Qa={href:"https://github.com/microbun/elasticsearch-thulac-plugin",target:"_blank",rel:"noopener noreferrer"},Za=e("h2",{id:"elasticsearch-复制",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#elasticsearch-复制","aria-hidden":"true"},"#"),t(" Elasticsearch 复制")],-1),Xa=e("h3",{id:"【中级】es-如何保证高可用",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#【中级】es-如何保证高可用","aria-hidden":"true"},"#"),t(" 【中级】ES 如何保证高可用？")],-1),Wa={class:"hint-container details"},Ya=e("summary",null,"要点",-1),$a=e("strong",null,"ES 通过副本机制实现高可用",-1),el={href:"https://www.microsoft.com/en-us/research/wp-content/uploads/2008/02/tr-2008-25.pdf",target:"_blank",rel:"noopener noreferrer"},tl=e("p",null,"ES 必须满足以下条件才能运行：",-1),sl={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-discovery-quorums.html",target:"_blank",rel:"noopener noreferrer"},rl={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-node.html",target:"_blank",rel:"noopener noreferrer"},nl={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/scalability.html",target:"_blank",rel:"noopener noreferrer"},al=e("p",null,[t("默认的情况下，ES 的数据写入只需要保证主副本写入了即可，ES 在写上选择的是"),e("strong",null,"可用性优先"),t("，而并不是像 PacificA 协议那样的强一致性。而数据读取方面，ES 可能会读取到没有 commit 的数据，所以 ES 的数据读取可能产生不一致的情况。")],-1),ll=e("p",null,[t("在数据恢复方面，系统可以借助 GlobalCheckpoint 和 LocalCheckpoint 来加速数据恢复的过程。如果集群中只有旧的副本可用，那么可以使用 "),e("strong",null,"allocate_stale_primary 将一个指定的旧分片分配为主分片，但会造成数据丢失，慎用！")],-1),ol=e("p",null,"扩展：",-1),il={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/high-availability.html",target:"_blank",rel:"noopener noreferrer"},cl={href:"https://www.itshujia.com/read/elasticsearch/362.html",target:"_blank",rel:"noopener noreferrer"},dl={href:"https://www.itshujia.com/read/elasticsearch/363.html",target:"_blank",rel:"noopener noreferrer"},hl=n(`<h3 id="【中级】es-是如何实现选主的" tabindex="-1"><a class="header-anchor" href="#【中级】es-是如何实现选主的" aria-hidden="true">#</a> 【中级】ES 是如何实现选主的？</h3><details class="hint-container details"><summary>要点</summary><p>发起选主流程的条件：</p><ul><li>只有 master-eligible 节点（通过 <code>node.master: true</code> 设置）才能发起选主流程。</li><li>该 master-eligible 节点的当前状态不是 master。</li><li>该 master-eligible 节点通过 ZenDiscovery 模块的 ping 操作询问其已知的集群其他节点，没有任何节点连接到 master。</li><li>包括本节点在内，当前已有超过 <code>discovery.zen.minimum_master_nodes</code> 个节点没有连接到 master。</li></ul><blockquote><p>一般，应设置 <code>discovery.zen.minimum_master_nodes</code> 为 <code>N / 2 + 1</code>，以保证各种分布式决议能得到大多数节点认可。当集群由于故障（如：通信失联）被分割成多个子集群时，节点数未达到半数以上的子集群，不允许进行选主。以此，来避免出现<strong>脑裂</strong>问题。</p></blockquote><p>选主流程：</p><ul><li>Elasticsearch 的选主是 ZenDiscovery 模块负责的，主要包含 Ping（节点之间通过这个 RPC 来发现彼此）和 Unicast（单播模块，包含一个主机列表以控制哪些节点需要 ping 通）这两部分；</li><li>对所有 master-eligible 节点根据 nodeId 字典排序：每次选举时，每个节点都把自己所知道的节点排一次序，然后选出 id 最小的节点，投票该节点为 master 节点。</li><li>如果对某个节点的投票数达到一定的值（<code>投票数 &gt; N / 2 + 1</code>），并且该节点自己也投票自己，那这个节点就当选 master。否则，重新发起选举，直到满足上述条件。</li></ul></details><h3 id="【中级】es-如何避免脑裂问题" tabindex="-1"><a class="header-anchor" href="#【中级】es-如何避免脑裂问题" aria-hidden="true">#</a> 【中级】ES 如何避免脑裂问题？</h3><details class="hint-container details"><summary>要点</summary><p>ES 集群采用主从架构模式，集群中有且只能有一个 Master 存在。</p><p>现在假设这样一种场景，ES 集群部署在 2 个不同的机房。若两个机房网络断连，其中没有主节点的机房进行选主，产生了一个新的主节点。这时，就同时存在了两个主节点，它们各自负责处理接收的请求，会存在数据不一致。一旦，两个机房恢复通信，又将以哪个主节点为主，数据不一致问题怎么办，这就是<strong>脑裂</strong>问题。</p><p>那如何避免产生脑裂呢？<strong>ES 使用了 Quorum 机制来避免脑裂，在进行选主的时候，需要超过半数 Master 候选节点参与选主才行</strong>。假如有 5 个 Master 候选节点，如果要成功选举出 Master，必须有 (5 / 2) + 1 = 3 个 Master 候选节点参与选主才行。</p><p>在 6.x 及之前的版本使用 Zen Discovery 的集群协调子系统，Zen Discovery 允许用户通过使用 <code>discovery.zen.minimum_master_nodes</code> 设置来决定多少个符合主节点条件的节点可以选举出主节点。通常，只有 Master Eligible 节点（Master 候选节点）数大于 Quorum 的时候才能进行选主。计算公式如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Quorum = (Master 候选节点数 / 2) + 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Elasticsearch 7.0 中，重新设计并重建了集群协调子系统：</p><ul><li>移除了 <code>discovery.zen.minimum_master_nodes</code> 设置，让 Elasticsearch 自己选择可以形成法定数量的节点。</li><li>典型的主节点选举只需很短时间就能完成。</li><li>集群的扩充和缩减变得更加安全和简单，并且大幅降低了因系统配置不当而可能造成数据丢失的风险。</li><li>节点状态记录比以往清晰很多，有助于诊断它们不能加入集群的原因，或者为何不能选举出主节点。</li></ul></details><h2 id="elasticsearch-分片" tabindex="-1"><a class="header-anchor" href="#elasticsearch-分片" aria-hidden="true">#</a> Elasticsearch 分片</h2><h3 id="【中级】es-是如何实现水平扩展的" tabindex="-1"><a class="header-anchor" href="#【中级】es-是如何实现水平扩展的" aria-hidden="true">#</a> 【中级】ES 是如何实现水平扩展的？</h3><details class="hint-container details"><summary>要点</summary><p>Elasticsearch 通过分片来实现水平扩展。在 Elasticsearch 中，分片是索引的逻辑划分。索引可以有一个或多个分片，并且每个分片可以存储在集群中的不同节点上。分片用于在多个节点之间分配数据，从而提高性能和可扩展性。</p><p>Elasticsearch 中有两种类型的分片：</p><ul><li>primary shard（主分片） - 用于存储原始数据。适当增加主分片数，可以提升 Elasticsearch 集群的吞吐量和整体容量。</li><li>replica shard（副本分片） - 用于存储数据备份。</li></ul><p>默认情况下，每个索引都有 1 个主分片（早期版本，默认每个索引有 5 个主分片）。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202411221525828.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></details><h3 id="【中级】es-如何选择读写数据映射到哪个分片上" tabindex="-1"><a class="header-anchor" href="#【中级】es-如何选择读写数据映射到哪个分片上" aria-hidden="true">#</a> 【中级】ES 如何选择读写数据映射到哪个分片上？</h3><details class="hint-container details"><summary>要点</summary><p>为了避免出现数据倾斜，系统需要一种高效的方式把数据均匀分散到各个节点上<strong>存储</strong>，并且<strong>在检索的时候可以快速找到</strong>文档所在的节点与分片。这就需要确立路由算法，使得数据可以映射到指定的节点上。</p><p>常见的路由方式如下：</p><table><thead><tr><th style="text-align:left;"><strong>算法</strong></th><th style="text-align:left;"><strong>描述</strong></th></tr></thead><tbody><tr><td style="text-align:left;">随机算法</td><td style="text-align:left;">写数据时，随机写入到一个节点中；读数据时，由于不知道查询数据存在于哪个节点，所以需要遍历所有节点。</td></tr><tr><td style="text-align:left;">路由表</td><td style="text-align:left;">由中心节点统一维护数据的路由表，以保证唯一性；但是，中心化产生了新的问题：单点故障、数据越大，路由表越大、单点容易称为性能瓶颈、数据迁移复杂等。</td></tr><tr><td style="text-align:left;">哈希取模</td><td style="text-align:left;">对 key 值进行哈希计算，然后根据节点数取模，以确定节点。</td></tr></tbody></table><p>ES 的数据路由算法是根据文档 ID 和 routing key 来确定 Shard ID 的过程。<strong>默认的情况下 routing key 为文档 ID</strong>，路由算法一般情况下的计算公式如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> shard_number = hash(_routing) % numer_of_primary_shards
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也可以在请求中指定 routing key，下面是新增数据的时候指定 routing 的方式：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>PUT <span class="token operator">&lt;</span>index<span class="token operator">&gt;</span>/_doc/<span class="token operator">&lt;</span>id<span class="token operator">&gt;</span>?routing<span class="token operator">=</span>routing_key
<span class="token punctuation">{</span>
    <span class="token string">&quot;field1&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;xxx&quot;</span>,
    <span class="token string">&quot;field2&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;xxx&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加数据时，如果不指定文档 ID，ES 会自动分片一个随机 ID。这种情况下，结合 Hash 算法，可以保证数据被均匀分布到各个分片中。如果指定文档 ID，或指定 routing key，Hash 计算得出的值可能会不够随机，从而导致数据倾斜。</p><p><strong>index 一旦设置了主分片数就不能修改，如果要修改就需要 reindex（即数据迁移）</strong>。之所以如此，就是因为：一旦修改了主分片数，即等于修改了原 Hash 计算中的变量，无法再通过 Hash 计算正确路由到数据存储的分片。</p></details><h3 id="【中级】如何合理设置-es-分片" tabindex="-1"><a class="header-anchor" href="#【中级】如何合理设置-es-分片" aria-hidden="true">#</a> 【中级】如何合理设置 ES 分片？</h3>`,10),ul={class:"hint-container details"},pl=n("<summary>要点</summary><p>ES 索引设置多分片有以下好处：</p><ul><li>多分片如果分布在不同的节点，查询可以在不同分片上并行执行，提升查询速度；</li><li>数据写入时，会分散在不同节点存储，避免数据倾斜。</li></ul><p>设置多少分片合适：</p><p>一般，<strong>分片数要大于节点数</strong>，这样可以保证：一旦集群中有新的数据节点加入，ES 会自动对分片数进行再均衡，使得分片尽量在集群中分布均匀。</p><p><strong>分片数也不宜设置过多</strong>，这会带来一些问题：</p><ul><li>每一个 ES 分片对应一个 Lucene 索引，Lucene 索引存储在一个文件系统的目录中，它又可以分为多个 Segment，每个存储在一个文件中。因此，过多的分片意味着过多的文件，这会导致较大的读写性能开销。</li><li>此外，分片的元数据信息由 Master 节点维护，分片过多，会增加管理负担。建议，<strong>集群的总分片数控制在 10w 以内</strong>。</li></ul><p>单数据节点分片限制：</p><ul><li><strong>每个非冻结数据节点 1000 个分片</strong>，通过 <code>cluster.max_shards_per_node</code> 控制</li><li><strong>每个冻结数据节点 3000 个分片</strong>，通过 <code>cluster.max_shards_per_node.frozen</code> 控制</li></ul><p>此外，分片大小也要有所限制：</p><ul><li>理论上，<strong>一个分片最多包含约 20 亿个文档（<code>Integer.MAX_VALUE - 128</code>）</strong>。但是，经验表明，<strong>每个分片的文档数量最好保持在 2 亿以下</strong>。</li><li><strong>非日志型（搜索型、线上业务型） ES 的单分片容量最好在 [10GB, 30GB] 范围内</strong>；</li><li><strong>日志型 ES 的单分片容量最好在 [30GB, 30GB] 范围内</strong>；</li></ul><p>分片大小的上下限可以分别通过 <code>max_primary_shard_size</code> 和 <code>min_primary_shard_size</code> 来控制。</p>",12),_l=e("p",null,"扩展：",-1),gl={href:"https://www.elastic.co/cn/blog/how-many-shards-should-i-have-in-my-elasticsearch-cluster",target:"_blank",rel:"noopener noreferrer"},ml={href:"https://elastic.ac.cn/guide/en/elasticsearch/reference/current/size-your-shards.html",target:"_blank",rel:"noopener noreferrer"},fl=n('<h2 id="elasticsearch-集群" tabindex="-1"><a class="header-anchor" href="#elasticsearch-集群" aria-hidden="true">#</a> Elasticsearch 集群</h2><h3 id="【中级】elasticsearch-集群中有哪些不同类型的节点" tabindex="-1"><a class="header-anchor" href="#【中级】elasticsearch-集群中有哪些不同类型的节点" aria-hidden="true">#</a> 【中级】Elasticsearch 集群中有哪些不同类型的节点？</h3><details class="hint-container details"><summary>要点</summary><p>Elasticsearch 中的节点是指集群中的单个 Elasticsearch 进程实例。节点用于存储数据并参与集群的索引和搜索功能。</p><p>节点间会相互通信以分配数据和工作负载，从而确保集群的平衡和高性能。节点可以配置不同的角色，这些角色决定了它们在集群中的职责。</p><p>可以通过在 <code>elasticsearch.yml</code> 中设置 <code>node.roles</code> 来为节点分配角色。</p><p>ES 中主要有以下节点类型：</p><table><thead><tr><th style="text-align:left;">节点类型</th><th style="text-align:left;">说明</th><th style="text-align:left;">配置</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>master eligible node</strong></td><td style="text-align:left;"><strong>候选主节点</strong>。一旦成为主节点，可以管理整个集群：创建、更新、删除索引；添加或删除节点；为节点分配分片。</td><td style="text-align:left;">低配置的 CPU、内存、磁盘</td></tr><tr><td style="text-align:left;"><strong>data node</strong></td><td style="text-align:left;"><strong>数据节点</strong>。负责数据的存储和读取。</td><td style="text-align:left;">高配置的 CPU、内存、磁盘</td></tr><tr><td style="text-align:left;"><strong>coordinating node</strong></td><td style="text-align:left;"><strong>协调节点</strong>。负责请求的分发，结果的汇总。</td><td style="text-align:left;">高配置的 CPU、中等配置的内存、低配置的磁盘</td></tr><tr><td style="text-align:left;">ingest node</td><td style="text-align:left;"><strong>预处理节点</strong>。负责处理数据、数据转换。</td><td style="text-align:left;">高配置的 CPU、中等配置的内存、低配置的磁盘</td></tr><tr><td style="text-align:left;">warm &amp; hot node</td><td style="text-align:left;">存储冷、热数据的数据节点。</td><td style="text-align:left;">Hot 类型的节点，都是高配配置，Warm 都是中低配即可</td></tr></tbody></table></details><h2 id="elasticsearch-架构" tabindex="-1"><a class="header-anchor" href="#elasticsearch-架构" aria-hidden="true">#</a> Elasticsearch 架构</h2><h3 id="【高级】es-存储数据的流程是怎样的" tabindex="-1"><a class="header-anchor" href="#【高级】es-存储数据的流程是怎样的" aria-hidden="true">#</a> 【高级】ES 存储数据的流程是怎样的？</h3>',5),wl={class:"hint-container details"},bl=n('<summary>要点</summary><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202503110752784.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>ES 存储数据的流程可以从三个角度来阐述：</p><ul><li><p>从<strong>集群</strong>的角度来看，数据写入会先路由到主分片，在主分片上写入成功后，会并发写副本分片，最后响应给客户端。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202412012126135.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>从<strong>分片</strong>的角度来看，数据到达分片后需要对内容进行格式校验、分词处理然后再索引数据。</p></li><li><p>从<strong>节点</strong>的角度来看，ES 数据持久化的步骤可归纳为：<strong>Refresh、写 Translog、Flush、Merge。</strong></p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202412012127951.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>默认，ES 会每秒执行一次 <strong>Refresh</strong> 操作，把 Index Buffer 的数据写入磁盘中，但不会调用 fsync 刷盘。ES 提供近实时搜索的原因是因为数据被 Refresh 后才能被检索出来 。</li><li>为了保证数据不丢失，在<strong>写完 Index Buffer 后，ES 还要写 Translog</strong>。Translog 是追加写入的，并且默认是调用 fsync 进行刷盘的。</li><li><strong>Flush</strong> 操作会将 Filesystem Cache 中的数据持久化到磁盘中，默认 30 分钟或者在 Translog 写满时（默认 512 MB）触发执行。Flush 将磁盘缓存持久化到磁盘后，会清空 Translog。</li><li>最后，ES 和 Lucene 会自动执行 <strong>Merge</strong> 操作，清理过多的 Segment 文件，这个时候被标记为删除的文档会正式被物理删除。</li></ul></li></ul>',4),kl=e("p",null,"扩展：",-1),yl={href:"https://www.itshujia.com/read/elasticsearch/359.html",target:"_blank",rel:"noopener noreferrer"},El={href:"https://github.com/doocs/advanced-java/blob/main/docs/high-concurrency/es-write-query-search.md",target:"_blank",rel:"noopener noreferrer"},xl=e("h3",{id:"【中级】es-相关性计算和聚合计算为什么会有计算偏差",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#【中级】es-相关性计算和聚合计算为什么会有计算偏差","aria-hidden":"true"},"#"),t(" 【中级】ES 相关性计算和聚合计算为什么会有计算偏差？")],-1),ql={class:"hint-container details"},vl=e("summary",null,"要点",-1),Sl=e("p",null,"在 ES 中，不仅仅是普通搜索，相关性计算（评分）和聚合计算也是先在每个 shard 的本地进行计算，再由 coordinate node 进行汇总。由于分片的本地计算是独立的，只能基于数据子集来进行计算，所以难免出现数据偏差。",-1),zl=e("figure",null,[e("img",{src:"https://raw.githubusercontent.com/dunwu/images/master/snap/202412012144894.png",alt:"",tabindex:"0",loading:"lazy"}),e("figcaption")],-1),Tl=e("figure",null,[e("img",{src:"https://raw.githubusercontent.com/dunwu/images/master/snap/202412012145912.png",alt:"",tabindex:"0",loading:"lazy"}),e("figcaption")],-1),Il=e("p",null,"解决这个问题的方式也有多种：",-1),Dl=e("li",null,[t("当数据量不大的情况下，"),e("strong",null,"设置主分片数为 1"),t("，这意味着在数据全集上进行聚合。 但这种方案不太现实。")],-1),Ll={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-terms-aggregation.html#search-aggregations-bucket-terms-aggregation-shard-size",target:"_blank",rel:"noopener noreferrer"},Ml=e("code",null,"shard_size",-1),jl=e("strong",null,"牺牲整体性能，提高精准度",-1),Pl=e("code",null,"size * 1.5 + 10",-1),Bl=e("li",null,[e("strong",null,"使用 DFS Query Then Fetch"),t("， 在 URL 参数中指定："),e("code",null,"_search?search_type=dfs_query_then_fetch"),t("。这样设定之后，ES 先会把每个分片的词频和文档频率的数据汇总到协调节点进行处理，然后再进行相关性算分。这样的话会消耗更多的 CPU 和内存资源，效率低下！")],-1),Cl=e("li",null,"尽量保证数据均匀地分布在各个分片中。",-1),Fl=n('<h3 id="【高级】es-如何保证读写一致" tabindex="-1"><a class="header-anchor" href="#【高级】es-如何保证读写一致" aria-hidden="true">#</a> 【高级】ES 如何保证读写一致？</h3><details class="hint-container details"><summary>要点</summary><p><strong>乐观锁机制</strong> - 可以通过版本号使用乐观并发控制，以确保新版本不会被旧版本覆盖，由应用层来处理具体的冲突；</p><p>另外对于写操作，一致性级别支持 quorum/one/all，默认为 quorum，即只有当大多数分片可用时才允许写操作。但即使大多数可用，也可能存在因为网络等原因导致写入副本失败，这样该副本被认为故障，分片将会在一个不同的节点上重建。</p><p>对于读操作，可以设置 replication 为 sync（默认），这使得操作在主分片和副本分片都完成后才会返回；如果设置 replication 为 async 时，也可以通过设置搜索请求参数、_preference 为 primary 来查询主分片，确保文档是最新版本。</p></details><h3 id="【高级】es-查询速度为什么快" tabindex="-1"><a class="header-anchor" href="#【高级】es-查询速度为什么快" aria-hidden="true">#</a> 【高级】ES 查询速度为什么快？</h3>',3),Ul={class:"hint-container details"},Rl=e("summary",null,"要点",-1),Gl=e("ul",null,[e("li",null,[e("strong",null,"倒排索引"),t(" - Elasticsearch 查询速度快最核心的点在于使用倒排索引。 "),e("ul",null,[e("li",null,"在 Elasticsearch 中，为了提高查询效率，它对存储的文档进行了分词处理。分词是将连续的文本切分成一个个独立的词项的过程。对文本进行分词后，Elasticsearch 会为每个词项创建一个倒排索引。这样，当用户进行查询时，Elasticsearch 只需要在倒排索引中查找匹配的词项，从而快速地定位到相关的文档。"),e("li",null,"正向索引的结构是每个文档和关键字做关联，每个文档都有与之对应的关键字，记录关键字在文档中出现的位置和次数；而倒排索引则是将文档中的词项和文档的 ID 进行关联，这样就可以通过词项快速找到包含它的文档。")])]),e("li",null,[e("strong",null,"分片"),t(" - Elasticsearch 通过分片，支持分布式存储和搜索，可以实现搜索的并行处理和负载均衡。")])],-1),Nl={href:"https://cloud.tencent.com/developer/article/1922613",target:"_blank",rel:"noopener noreferrer"},Hl=n('<h3 id="【中级】es-生产环境部署情况是怎样的" tabindex="-1"><a class="header-anchor" href="#【中级】es-生产环境部署情况是怎样的" aria-hidden="true">#</a> 【中级】ES 生产环境部署情况是怎样的？</h3><details class="hint-container details"><summary>要点</summary><p><strong>典型问题</strong></p><ul><li>你们的 Elasticsearch 生产环境部署情况是怎样的？</li><li>你们的 Elasticsearch 生产环境集群规模有多大？</li><li>你们的 Elasticsearch 生产环境中有多少索引，每个索引大概有多少个分片？</li></ul><p><strong>知识点</strong></p><p>根据实际 Elasticsearch 集群情况描述，以下是一个案例：</p><ul><li>节点数：19</li><li>机器配置：6 核，10G 内存，800G 磁盘</li><li>索引数、分片数：1200+ 索引、1.7 万+ 分片</li><li>容量：总文档数 150 亿+，总容量 15TB，使用容量 10TB+</li><li>日增数据量：约 4 千万条数据，50 GB 增长容量</li></ul></details><h2 id="elasticsearch-优化" tabindex="-1"><a class="header-anchor" href="#elasticsearch-优化" aria-hidden="true">#</a> Elasticsearch 优化</h2><h3 id="【中级】es-使用有哪些基本规范" tabindex="-1"><a class="header-anchor" href="#【中级】es-使用有哪些基本规范" aria-hidden="true">#</a> 【中级】ES 使用有哪些基本规范？</h3><details class="hint-container details"><summary>要点</summary><ul><li>索引数 <ul><li>大索引需要拆分，增强性能，减少风险</li><li>index 可以按日期拆分为 index_yyyyMMdd，然后用 alias 映射</li></ul></li><li>Mapping 设置 <ul><li>text 数据类型默认是关闭 fielddate</li><li>关闭 <code>_source</code> 会导致无法使用 reindex</li><li>ES 字段数的最大限制是 1000，但是不建议超过 100</li></ul></li><li>Refersh <ul><li>写入时，尽量不要执行 refresh，在并发较大的情况下，ES 负载可能会被打满。</li></ul></li><li>索引别名 <ul><li>尽量使用索引的别名，在类似于进行索引字段类型变更需要进行索引重建的时候会减少很多的问题。</li><li>别名的下面可以挂载多个索引，若是索引拆分之后业务验证允许可以这么使用。</li><li>alias 下面可以挂多个索引，但是需要注意的是每次请求很容易放大，比如说 alias 挂了 50 个索引，每个索引有 5 个分片，那么从集群的维度来看一共就是 50*5=250 次 query 和 fetch，很容易导致读放大的情况。</li></ul></li></ul></details><h3 id="【中级】es-jvm-设置需要注意什么" tabindex="-1"><a class="header-anchor" href="#【中级】es-jvm-设置需要注意什么" aria-hidden="true">#</a> 【中级】ES JVM 设置需要注意什么？</h3>',6),Jl={class:"hint-container details"},Al=e("summary",null,"要点",-1),Ol=e("p",null,"ES 实际上是一个 Java 进程，因此也需要考虑 JVM 设置。关于 ES JVM 的设置，有以下几点建议：",-1),Vl=e("ul",null,[e("li",null,"从 ES6 开始，支持 64 位的 JVM"),e("li",null,[t("将内存 "),e("code",null,"Xms"),t(" 和 "),e("code",null,"Xmx"),t(" 设置一样，需要注意过多的堆可能会使垃圾回收停顿时间过长")]),e("li",null,"一般，将 50％ 的可用内存分配给 ES"),e("li",null,"ES 内存不要超过 32 GB")],-1),Kl={href:"https://www.elastic.co/blog/a-heap-of-trouble",target:"_blank",rel:"noopener noreferrer"},Ql=e("h3",{id:"【高级】es-内存为什么不要超过-32-gb",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#【高级】es-内存为什么不要超过-32-gb","aria-hidden":"true"},"#"),t(" 【高级】ES 内存为什么不要超过 32 GB？")],-1),Zl={class:"hint-container details"},Xl=e("summary",null,"要点",-1),Wl=e("p",null,[t("实际上，一般而言，"),e("strong",null,"绝大部分 JVM 内存最好都不要超过 32 GB"),t("，不仅仅是 ES 内存。")],-1),Yl=e("p",null,"对于 32 位系统来说，JVM 的对象指针占用 32 位（4 byte），可以表示 2^32 哥内存地址。由于，CPU 寻址的最小单位是 byte，2^32 byte 即 4GB，也就是说 JVM 最大可以支持 4GB。",-1),$l=e("p",null,"对于 64 位系统来说，如果直接引用，就需要使用 64 位的指针，相比 32 位 指针，多使用了一倍的内存。并且，指针在主内存和各级缓存间移动数据时，会占用更大的带宽。",-1),eo={href:"https://wiki.openjdk.org/display/HotSpot/CompressedOops",target:"_blank",rel:"noopener noreferrer"},to=e("p",null,"扩展：",-1),so={href:"https://wiki.openjdk.org/display/HotSpot/CompressedOops",target:"_blank",rel:"noopener noreferrer"},ro={href:"https://blog.csdn.net/liujianyangbj/article/details/108049482",target:"_blank",rel:"noopener noreferrer"},no=n('<h3 id="【中级】es-主机有哪些优化点" tabindex="-1"><a class="header-anchor" href="#【中级】es-主机有哪些优化点" aria-hidden="true">#</a> 【中级】ES 主机有哪些优化点？</h3><details class="hint-container details"><summary>要点</summary><ul><li>关闭缓存 swap;</li><li>堆内存设置为：Min（节点内存/2, 32GB）;</li><li>设置最大文件句柄数；</li><li>线程池+队列大小根据业务需要做调整；</li><li>磁盘存储 raid 方式——存储有条件使用 RAID10，增加单节点性能以及避免单节点存储故障。</li></ul></details><h3 id="【中级】es-索引数据多-如何优化" tabindex="-1"><a class="header-anchor" href="#【中级】es-索引数据多-如何优化" aria-hidden="true">#</a> 【中级】ES 索引数据多，如何优化？</h3><details class="hint-container details"><summary>要点</summary><ul><li><strong>动态索引</strong> - 如果单索引数据量过大，可以创建索引模板，并周期性创建新索引（举例来说，索引名为 blog_yyyyMMdd），实现数据的分解。</li><li><strong>冷热数据分离</strong> - 将一定范围（如：一周、一月等）的数据作为热数据，其他数据作为冷数据。针对冷数据，可以考虑定期 force_merge + shrink 进行压缩，以节省存储空间和检索效率。</li><li><strong>分区再均衡</strong> - Elasticsearch 集群可以动态根据节点数的变化，调整索引分片在集群上的分布。但需要注意的是，要提前合理规划好索引的分片数：分片数过少，则增加节点也无法水平扩展；分片数过多，影响 Elasticsearch 读写效率。</li></ul></details><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>',5),ao={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html",target:"_blank",rel:"noopener noreferrer"},lo={href:"https://www.itshujia.com/books/elasticsearch",target:"_blank",rel:"noopener noreferrer"},oo={href:"https://www.turing.com/interview-questions/elasticsearch",target:"_blank",rel:"noopener noreferrer"},io={href:"https://github.com/rkm-ravi94/awesome-devops-interview/blob/main/elasticsearch.md",target:"_blank",rel:"noopener noreferrer"};function co(ho,uo){const s=l("ExternalLinkIcon");return o(),i("div",null,[d,h,e("blockquote",null,[u,e("ul",null,[e("li",null,[e("a",p,[t("Elasticsearch 官方文档之基础知识"),r(s)])])])]),_,e("details",g,[m,f,e("p",null,[e("a",w,[b,r(s)]),t(" 是一个开源的分布式"),k,t("。")]),e("p",null,[e("a",y,[t("Elasticsearch"),r(s)]),t(),e("strong",null,[t("基于搜索库 "),e("a",E,[t("Lucene"),r(s)]),t(" 开发")]),t("。Elasticsearch 隐藏了 Lucene 的复杂性，提供了简单易用的 REST API / Java API 接口（另外还有其他语言的 API 接口）。")]),x]),q,e("details",v,[S,z,T,e("p",null,[t("Elastic Stack 也常被称为 ELK，这是 Elastic 公司旗下三款产品 "),e("a",I,[t("Elasticsearch"),r(s)]),t(" 、"),e("a",D,[t("Logstash"),r(s)]),t(" 、"),e("a",L,[t("Kibana"),r(s)]),t(" 的首字母组合。")]),e("ul",null,[e("li",null,[e("a",M,[t("Elasticsearch"),r(s)]),t(" 负责存储数据，并提供对数据的检索和分析。")]),e("li",null,[e("a",j,[t("Logstash"),r(s)]),t(" 传输和处理你的日志、事务或其他数据。")]),e("li",null,[e("a",P,[t("Kibana"),r(s)]),t(" 将 Elasticsearch 的数据分析并渲染为可视化的报表。")])]),e("p",null,[t("Elastic Stack，在 ELK 的基础上扩展了一些新的产品。如："),e("a",B,[t("Beats"),r(s)]),t("，这是针对不同类型数据的轻量级采集器套件。")]),C,F]),U,e("blockquote",null,[R,e("ul",null,[e("li",null,[e("a",G,[t("Elasticsearch 官方文档之 REST API"),r(s)])])])]),N,e("details",H,[J,e("blockquote",null,[e("p",null,[t("扩展阅读："),e("a",A,[t("Quick starts"),r(s)])])])]),O,e("blockquote",null,[V,e("ul",null,[e("li",null,[e("a",K,[t("Elasticsearch 官方文档之 Mapping"),r(s)])]),e("li",null,[e("a",Q,[t("Elasticsearch 从入门到实践之 Mapping"),r(s)])])])]),Z,e("details",X,[W,Y,e("ul",null,[e("li",null,[t("文本类型："),e("a",$,[ee,r(s)]),t("、"),e("a",te,[se,r(s)]),t("、"),e("a",re,[ne,r(s)]),t("、 "),e("a",ae,[le,r(s)])]),e("li",null,[t("二进制类型："),e("a",oe,[ie,r(s)])]),ce,e("li",null,[t("日期类型："),e("a",de,[he,r(s)])]),e("li",null,[t("布尔类型："),e("a",ue,[pe,r(s)])]),e("li",null,[t("对象类型："),e("a",_e,[ge,r(s)]),t("、"),e("a",me,[fe,r(s)])])]),e("blockquote",null,[e("p",null,[t("扩展："),e("a",we,[t("数据类型"),r(s)])])])]),be,e("details",ke,[ye,e("p",null,[t("Elasticsearch 官方将静态映射称为"),e("strong",null,[t("显式映射（"),e("a",Ee,[t("Explicit mapping"),r(s)]),t("）")]),t("。"),xe,t("是在创建索引时手工指定索引映射。静态映射和 SQL 中在建表语句中指定字段属性类似。相比动态映射，通过静态映射可以添加更详细、更精准的配置信息。")]),qe]),ve,e("blockquote",null,[Se,e("ul",null,[e("li",null,[e("a",ze,[t("Elasticsearch 官方文档之索引"),r(s)])]),e("li",null,[e("a",Te,[t("Elasticsearch 从入门到实践之倒排索引的实现"),r(s)])]),e("li",null,[e("a",Ie,[t("https://blog.devgenius.io/elasticsearch-solution-to-searching-71116220c82f"),r(s)])])])]),De,e("details",Le,[Me,e("p",null,[je,t(" 包含数据和元数据。"),e("a",Pe,[Be,r(s)]),t(" 是存储有关文档信息的系统字段。在 Elasticsearch 中，元数据字段都以 "),Ce,t(" 开头。常见的元数据字段有：")]),e("ul",null,[e("li",null,[e("a",Fe,[Ue,r(s)]),t(" - 文档所属的索引")]),e("li",null,[e("a",Re,[Ge,r(s)]),t(" - 文档的 ID")]),e("li",null,[e("a",Ne,[He,r(s)]),t(" - 表示文档原文的 JSON")])]),Je]),Ae,e("details",Oe,[Ve,Ke,Qe,Ze,e("p",null,[t("Elasticsearch 的每个 shard 对应一个 Lucene index（一个包含倒排索引的文件目录）。Lucene index 又会被分解为多个 segment。segment 是索引中的内部存储元素，由于写入效率的考虑，所以被设计为不可变更的。segment 会定期 "),e("a",Xe,[t("合并"),r(s)]),t(" 较大的 segment，以保持索引大小。简单来说，Lucene 就是一个 jar 包，里面包含了封装好的构建、管理倒排索引的算法代码。")]),We]),Ye,e("details",$e,[et,tt,st,e("p",null,[t("Elasticsearch 的每个 shard 对应一个 Lucene index（一个包含倒排索引的文件目录）。Lucene index 又会被分解为多个 segment。segment 是索引中的内部存储元素，由于写入效率的考虑，所以被设计为不可变更的。segment 会定期 "),e("a",rt,[t("合并"),r(s)]),t(" 较大的 segment，以保持索引大小。")]),nt]),at,e("blockquote",null,[lt,e("ul",null,[e("li",null,[e("a",ot,[t("Elasticsearch 官方文档之搜索数据"),r(s)])]),e("li",null,[e("a",it,[t("极客时间教程 - Elasticsearch 核心技术与实战"),r(s)])]),e("li",null,[e("a",ct,[t("Elasticsearch 从入门到实践之分布式文档搜索机制"),r(s)])]),e("li",null,[e("a",dt,[t("Elasticsearch 官方文档之搜索数据"),r(s)])]),e("li",null,[e("a",ht,[t("Elasticsearch 官方文档之全文查询"),r(s)])]),e("li",null,[e("a",ut,[t("Elasticsearch 官方文档之词项查询"),r(s)])]),e("li",null,[e("a",pt,[t("Elasticsearch 官方文档之组合查询"),r(s)])]),e("li",null,[e("a",_t,[t("Elasticsearch 官方文档之推荐查询"),r(s)])]),e("li",null,[e("a",gt,[t("Elasticsearch 官方文档之查询和过滤上下文"),r(s)])])])]),mt,e("details",ft,[wt,bt,e("blockquote",null,[e("p",null,[t("扩展阅读："),e("a",kt,[t("https://www.elastic.co/guide/en/elasticsearch/reference/current/aliases.html"),r(s)])])])]),yt,e("details",Et,[xt,qt,e("ul",null,[e("li",null,[e("a",vt,[t("intervals"),r(s)]),t(" - 根据匹配词的顺序和近似度返回文档。")]),e("li",null,[e("a",St,[t("match"),r(s)]),t(" - "),zt,t("，用于执行全文搜索的标准查询，包括模糊匹配和短语或邻近查询。")]),e("li",null,[e("a",Tt,[t("match_bool_prefix"),r(s)]),t(" - 对检索文本分词，并根据这些分词构造一个布尔查询。除了最后一个分词之外的每个分词都进行 term 查询。最后一个分词用于 "),It,t(" 查询；其他分词都进行 "),Dt,t(" 查询。")]),e("li",null,[e("a",Lt,[t("match_phrase"),r(s)]),t(" - "),Mt,t("，短语匹配会将检索内容分词，这些词语必须全部出现在被检索内容中，并且顺序必须一致，默认情况下这些词都必须连续。")]),e("li",null,[e("a",jt,[t("match_phrase_prefix"),r(s)]),t(" - 与 "),Pt,t(" 查询类似，但对最后一个单词执行通配符搜索。")]),e("li",null,[e("a",Bt,[t("multi_match"),r(s)]),t(" 支持多字段 match 查询")]),e("li",null,[e("a",Ct,[t("combined_fields"),r(s)]),t(" - 匹配多个字段，就像它们已索引到一个组合字段中一样。")]),e("li",null,[e("a",Ft,[t("query_string"),r(s)]),t(" - 支持紧凑的 Lucene "),e("a",Ut,[t("query string（查询字符串）语法"),r(s)]),t("，允许指定 "),Rt,t(" 条件和单个查询字符串中的多字段搜索。仅适用于专家用户。")]),e("li",null,[e("a",Gt,[t("simple_query_string"),r(s)]),t(" - 更简单、更健壮的 "),Nt,t(" 语法版本，适合直接向用户公开。")])]),e("blockquote",null,[e("p",null,[t("扩展阅读："),e("a",Ht,[t("Elasticsearch 官方文档之全文查询"),r(s)])])])]),Jt,e("details",At,[Ot,Vt,Kt,Qt,e("ul",null,[e("li",null,[e("strong",null,[e("a",Zt,[t("exists"),r(s)])]),t(" - 返回在指定字段上有值的文档。")]),e("li",null,[e("strong",null,[e("a",Xt,[t("fuzzy"),r(s)])]),t(" - 模糊查询，返回包含与搜索词相似的词的文档。")]),e("li",null,[e("strong",null,[e("a",Wt,[t("ids"),r(s)])]),t(" - 根据 ID 返回文档。此查询使用存储在 "),Yt,t(" 字段中的文档 ID。")]),e("li",null,[e("strong",null,[e("a",$t,[t("prefix"),r(s)])]),t(" - 前缀查询，用于查询某个字段中包含指定前缀的文档。")]),e("li",null,[e("strong",null,[e("a",es,[t("range"),r(s)])]),t(" - 范围查询，用于匹配在某一范围内的数值型、日期类型或者字符串型字段的文档。")]),e("li",null,[e("strong",null,[e("a",ts,[t("regexp"),r(s)])]),t(" - 正则匹配查询，返回与正则表达式相匹配的词项所属的文档。")]),e("li",null,[e("strong",null,[e("a",ss,[t("term"),r(s)])]),t(" - 用来查找指定字段中包含给定单词的文档。")]),e("li",null,[e("strong",null,[e("a",rs,[t("terms"),r(s)])]),t(" - 与 "),e("a",ns,[as,r(s)]),t(" 相似，但可以搜索多个值。")]),e("li",null,[e("strong",null,[e("a",ls,[t("terms set"),r(s)])]),t(" - 与 "),e("a",os,[is,r(s)]),t(" 相似，但可以定义返回文档所需的匹配词数。")]),e("li",null,[e("strong",null,[e("a",cs,[t("wildcard"),r(s)])]),t(" - 通配符查询，返回与通配符模式匹配的文档。")])]),e("blockquote",null,[e("p",null,[t("扩展阅读："),e("a",ds,[t("Elasticsearch 官方文档之词项查询"),r(s)])])])]),hs,e("details",us,[ps,_s,gs,e("ul",null,[e("li",null,[e("a",ms,[fs,r(s)]),t(" - 布尔查询，可以组合多个过滤语句来过滤文档。")]),e("li",null,[e("a",ws,[bs,r(s)]),t(" - 提供调整相关性打分的能力，在 "),ks,t(" 块中指定匹配文档的语句，同时降低在 "),ys,t(" 块中也匹配的文档的得分。")]),e("li",null,[e("a",Es,[xs,r(s)]),t(" - 使用 "),qs,t(" 可以将 "),vs,t(" 转化为 "),Ss,t("，filter 可以忽略相关性算分的环节，并且 filter 可以有效利用缓存，从而提高查询的性能。")]),e("li",null,[e("a",zs,[Ts,r(s)]),t(" - 返回匹配了一个或者多个查询语句的文档，但只将最佳匹配的评分作为相关性算分返回。")]),e("li",null,[e("a",Is,[Ds,r(s)]),t(" - 支持使用函数来修改查询返回的分数。")])]),e("blockquote",null,[e("p",null,[t("扩展阅读："),e("a",Ls,[t("Elasticsearch 官方文档之组合查询"),r(s)])])])]),Ms,e("details",js,[Ps,e("blockquote",null,[e("p",null,[t("扩展阅读："),e("a",Bs,[t("Elasticsearch 官方文档之查询和过滤上下文"),r(s)])])])]),Cs,e("details",Fs,[Us,e("p",null,[t("ES 通过 "),e("a",Rs,[Gs,r(s)]),t(" 提供了推荐搜索能力，可以用于文本纠错，文本自动补全等场景。")]),Ns,Hs,e("blockquote",null,[e("p",null,[t("扩展阅读："),e("a",Js,[t("Elasticsearch 官方文档之推荐查询"),r(s)])])])]),As,e("details",Os,[Vs,Ks,e("ul",null,[Qs,e("li",null,[e("a",Zs,[Xs,r(s)]),t(" - 不支持指定页数，只能向下翻页；并且需要指定 sort，并保证值是唯一的。然后，可以反复使用上次结果中最后一个文档的 sort 值进行查询。")]),e("li",null,[e("a",Ws,[t("scroll"),r(s)]),t(" - 类似于 RDBMS 中的游标，只允许向下翻页。每次下一页查询后，使用返回结果的 scroll id 来作为下一次翻页的标记。scroll 查询会在搜索初始化阶段会生成快照，后续数据的变化无法及时体现在查询结果，因此更加适合一次性批量查询或非实时数据的分页查询。")])]),Ys,e("p",null,[t("ES 官方提供了另外两种分页查询方式 "),e("a",$s,[er,r(s)]),t(" + PIT 和 "),e("a",tr,[t("scroll"),r(s)]),t("（注意：官方已不再推荐） 来避免深分页问题。")])]),sr,e("blockquote",null,[rr,e("ul",null,[e("li",null,[e("a",nr,[t("极客时间教程 - Elasticsearch 核心技术与实战"),r(s)])]),e("li",null,[e("a",ar,[t("Elasticsearch 官方文档之聚合"),r(s)])]),e("li",null,[e("a",lr,[t("Elasticsearch 从入门到实践之聚合"),r(s)])])])]),or,e("details",ir,[cr,dr,hr,e("table",null,[ur,e("tbody",null,[e("tr",null,[e("td",null,[e("a",pr,[_r,r(s)])]),gr]),e("tr",null,[e("td",null,[e("a",mr,[fr,r(s)])]),wr]),e("tr",null,[e("td",null,[e("a",br,[kr,r(s)])]),yr])])])]),Er,e("details",xr,[qr,e("p",null,[t("Elasticsearch 支持 "),e("a",vr,[Sr,t("（近似计算非重复值）"),r(s)]),t(" 。它提供一个字段的基数，即该字段的 distinct 或者 unique 值的数目。它是基于 HLL 算法的。HLL 会先对我们的输入作哈希运算，然后根据哈希运算的结果中的 bits 做概率估算从而得到基数。其特点是：可配置的精度，用来控制内存的使用（更精确 ＝ 更多内存）；小的数据集精度是非常高的；我们可以通过配置参数，来设置去重需要的固定内存使用量。无论数千还是数十亿的唯一值，内存使用量只与你配置的精确度相关。")])]),zr,e("details",Tr,[Ir,e("p",null,[t("文本分析由 "),e("a",Dr,[Lr,r(s)]),t(" 执行，分析器是一组控制整个过程的规则。无论是索引还是搜索，都需要使用分析器。")]),e("p",null,[e("a",Mr,[jr,r(s)]),t(" 由三个组件组成：零个或多个 "),e("a",Pr,[t("Character Filters（字符过滤器）"),r(s)]),t("、有且仅有一个 "),e("a",Br,[t("Tokenizer（分词器）"),r(s)]),t("、零个或多个 "),e("a",Cr,[t("Token Filters（分词过滤器）"),r(s)]),t("。分析的执行顺序为："),Fr,t("。")]),Ur,Rr,e("ul",null,[e("li",null,[e("a",Gr,[Nr,r(s)]),t(" - 根据单词边界将文本划分为多个 term，如 Unicode 文本分割算法所定义。它删除了大多数标点符号、小写 term，并支持删除停用词。")]),e("li",null,[e("a",Hr,[Jr,r(s)]),t(" - 遇到非字母字符时将文本划分为多个 term，并将其转为小写。")]),e("li",null,[e("a",Ar,[Or,r(s)]),t(" - 遇到任何空格时将文本划分为多个 term，不转换为小写。")]),e("li",null,[e("a",Vr,[Kr,r(s)]),t(" - 与 "),e("a",Qr,[Zr,r(s)]),t(" 相似，同时支持删除停用词（如：the、a、is）。")]),e("li",null,[e("a",Xr,[Wr,r(s)]),t(" - 部分词，直接将输入当做输出。")]),e("li",null,[e("a",Yr,[$r,r(s)]),t(" - 使用正则表达式将文本拆分为 term。它支持小写和非索引字。")]),e("li",null,[e("a",en,[tn,r(s)]),t(" - 可创建用于重复检测的指纹。")]),e("li",null,[e("a",sn,[t("语言分析器"),r(s)]),t(" - 提供了 30 多种常见语言的分词器。")])]),e("p",null,[t("默认情况下，Elasticsearch 使用 "),e("a",rn,[nn,r(s)]),t("，它开箱即用，适用于大多数使用场景。Elasticsearch 也允许定制分析器。")]),an,e("p",null,[e("a",ln,[t("Character Filters（字符过滤器）"),r(s)]),t(" 将原始文本作为字符流接收，并可以通过添加、删除或更改字符来转换文本。分析器可以有"),on,t(),e("a",cn,[t("Character Filters（字符过滤器）"),r(s)]),t("，如果配置了多个，它会按照配置的顺序执行。")]),dn,e("ul",null,[e("li",null,[e("a",hn,[un,r(s)]),t(" - "),pn,t("字符过滤器用于去除 HTML 元素（如 "),_n,t("）并转义 HTML 实体（如 "),gn,t("）。")]),e("li",null,[e("a",mn,[fn,r(s)]),t(" - "),wn,t(" 字符过滤器用于将指定字符串的任何匹配项替换为指定的替换项。")]),e("li",null,[e("a",bn,[kn,r(s)]),t(" - "),yn,t(" 字符筛选器将匹配正则表达式的任何字符替换为指定的替换。")])]),En,e("p",null,[e("a",xn,[t("Tokenizer（分词器）"),r(s)]),t(" 接收字符流，将其分解为分词（通常是单个单词），并输出一个分词流。分词器还负责记录每个 term 的顺序或位置，以及该 term 所代表的原始单词的开始和结束字符偏移量。分析器"),qn,t(),e("a",vn,[t("Tokenizer（分词器）"),r(s)]),t("。")]),Sn,e("ul",null,[e("li",null,[t("面向单词的分词器 "),e("ul",null,[e("li",null,[e("a",zn,[Tn,r(s)]),t(" - 将文本划分为单词边界上的 term，如 Unicode 文本分割算法所定义。它会删除大多数标点符号。它是大多数语言的最佳选择。")]),e("li",null,[e("a",In,[Dn,r(s)]),t(" - 遇到非字母字符时将文本划分为多个 term。")]),e("li",null,[e("a",Ln,[Mn,r(s)]),t(" - 到非字母字符时将文本划分为多个 term，并将其转为小写。")]),e("li",null,[e("a",jn,[Pn,r(s)]),t(" - 遇到任何空格时将文本划分为多个 term。")]),e("li",null,[e("a",Bn,[Cn,r(s)]),t(" - 与 "),e("a",Fn,[Un,r(s)]),t(" 相似，不同之处在于它将 URL 和电子邮件地址识别为单个分词。")]),e("li",null,[e("a",Rn,[Gn,r(s)]),t(" - 基于语法的英语分词器。")]),e("li",null,[e("a",Nn,[Hn,r(s)]),t(" - 将泰语文本分割为单词。")])])]),e("li",null,[t("部分单词分词器 "),e("ul",null,[e("li",null,[e("a",Jn,[An,r(s)]),t(" - 遇到指定字符列表（例如空格或标点符号）中的任何一个时，将文本分解为单词，然后返回每个单词的 n-gram：一个连续字母的滑动窗口，例如 "),On,t("→ "),Vn,t("。")]),e("li",null,[e("a",Kn,[Qn,r(s)]),t(" - 遇到指定字符列表（例如空格或标点符号）中的任何一个时，将文本分解为单词，然后返回锚定到单词开头的每个单词的 n 元语法，例如 "),Zn,t(" → "),Xn,t("。")])])]),e("li",null,[t("结构化文本分词器 "),e("ul",null,[e("li",null,[e("a",Wn,[Yn,r(s)]),t(" - 接受给定的任何文本，并输出与单个 term 完全相同的文本。它可以与 "),e("a",$n,[ea,r(s)]),t(" 等分词过滤器结合使用，以规范化分析的 term。")]),e("li",null,[e("a",ta,[sa,r(s)]),t(" - 使用正则表达式在文本与单词分隔符匹配时将文本拆分为 term，或者将匹配的文本捕获为 term。")]),e("li",null,[e("a",ra,[na,r(s)]),t(" - 使用正则表达式将匹配的文本捕获为 term。它使用正则表达式特征的受限子集，并且通常比 "),e("a",aa,[la,r(s)]),t(" 更快。")]),e("li",null,[e("a",oa,[ia,r(s)]),t(" - 可以通过要拆分的字符集进行配置，这通常比运行正则表达式代价更小。")]),e("li",null,[e("a",ca,[da,r(s)]),t(" - 使用与 "),e("a",ha,[ua,r(s)]),t(" 分词器相同的受限正则表达式子集，但在匹配项处拆分输入，而不是将匹配项作为 term 返回。")]),e("li",null,[e("a",pa,[_a,r(s)]),t(" - 基于文件系统的路径分隔符，进行拆分，例如 "),ga,t(" → "),ma,t(" 。")])])])]),fa,e("p",null,[e("a",wa,[t("Token Filters（分词过滤器）"),r(s)]),t(" 接收分词流，并可以添加、删除或更改分词。常用的分词过滤器有： "),e("a",ba,[ka,t("（小写转换）"),r(s)]),t("、"),e("a",ya,[Ea,t("（停用词处理）"),r(s)]),t("、"),e("a",xa,[qa,t("（同义词处理）"),r(s)]),t(" 等等。分析器可以有零个或多个 "),e("a",va,[t("Token Filters（分词过滤器）"),r(s)]),t("，如果配置了多个，它会按照配置的顺序执行。")]),Sa,e("ul",null,[e("li",null,[e("a",za,[Ta,r(s)]),t(" - 从单词末尾删除英语所有格 （"),Ia,t("），并删除首字母缩略词中的点。它使用 Lucene 的 "),e("a",Da,[t("ClassicFilter"),r(s)]),t("。")]),e("li",null,[e("a",La,[Ma,r(s)]),t(" - 将分词转为小写。")]),e("li",null,[e("a",ja,[Pa,r(s)]),t(" - 从分词中删除 "),e("a",Ba,[t("stop word（停用词）"),r(s)]),t("。")]),e("li",null,[e("a",Ca,[Fa,r(s)]),t(" - 允许在分析过程中轻松处理 "),e("a",Ua,[t("近义词"),r(s)]),t("。")])])]),Ra,e("details",Ga,[Na,Ha,Ja,Aa,Oa,e("ul",null,[e("li",null,[e("a",Va,[t("analysis-icu"),r(s)]),t(" - 添加了扩展的 Unicode 支持，包括更好地分析亚洲语言、Unicode 规范化、Unicode 感知大小写折叠、排序规则支持和音译。")]),e("li",null,[e("a",Ka,[t("elasticsearch-analysis-ik"),r(s)]),t(" - 支持自定义词库，支持热更新分词字典")]),e("li",null,[e("a",Qa,[t("elasticsearch-thulac-plugin"),r(s)]),t(" - 清华大学自然语言处理和社会人文计算实验室的一套中文分词器。")])])]),Za,Xa,e("details",Wa,[Ya,e("p",null,[$a,t("。ES 的数据副本模型参考了 "),e("a",el,[t("PacificA 算法"),r(s)]),t("。")]),tl,e("ul",null,[e("li",null,[t("至少需要 "),e("a",sl,[t("选举一个主节点"),r(s)])]),e("li",null,[t("每个 "),e("a",rl,[t("角色"),r(s)]),t(" 至少一个节点")]),e("li",null,[t("每个 "),e("a",nl,[t("分片"),r(s)]),t(" 至少有一个副本（主副本）")])]),al,ll,e("blockquote",null,[ol,e("ul",null,[e("li",null,[e("a",il,[t("https://www.elastic.co/guide/en/elasticsearch/reference/current/high-availability.html"),r(s)])]),e("li",null,[e("a",cl,[t("Elasticsearch 从入门到实践之副本策略"),r(s)])]),e("li",null,[e("a",dl,[t("Elasticsearch 从入门到实践之 ES 的数据副本模型"),r(s)])])])])]),hl,e("details",ul,[pl,e("blockquote",null,[_l,e("ul",null,[e("li",null,[e("a",gl,[t("https://www.elastic.co/cn/blog/how-many-shards-should-i-have-in-my-elasticsearch-cluster"),r(s)])]),e("li",null,[e("a",ml,[t("https://elastic.ac.cn/guide/en/elasticsearch/reference/current/size-your-shards.html"),r(s)])])])])]),fl,e("details",wl,[bl,e("blockquote",null,[kl,e("ul",null,[e("li",null,[e("a",yl,[t("Elasticsearch 从入门到实践之分布式文档的存储流程"),r(s)])]),e("li",null,[e("a",El,[t("https://github.com/doocs/advanced-java/blob/main/docs/high-concurrency/es-write-query-search.md"),r(s)])])])])]),xl,e("details",ql,[vl,Sl,zl,Tl,Il,e("ul",null,[Dl,e("li",null,[e("strong",null,[t("设置 "),e("a",Ll,[Ml,r(s)]),t(" 参数")]),t("，将计算数据范围变大，"),jl,t("。shard_size 的默认值是 "),Pl,t("。")]),Bl,Cl])]),Fl,e("details",Ul,[Rl,Gl,e("blockquote",null,[e("p",null,[t("参考："),e("a",Nl,[t("https://cloud.tencent.com/developer/article/1922613"),r(s)])])])]),Hl,e("details",Jl,[Al,Ol,Vl,e("blockquote",null,[e("p",null,[t("扩展："),e("a",Kl,[t("https://www.elastic.co/blog/a-heap-of-trouble"),r(s)])])])]),Ql,e("details",Zl,[Xl,Wl,Yl,$l,e("p",null,[t("Java 使用了一种叫做 "),e("a",eo,[t("Compressed oops"),r(s)]),t(" 的技术来进行优化。该技术利用 Java 对象按照 8 字节对齐的机制，让 Java 对象指针指向一个映射地址偏移量（非真实 64 位 地址）。这种方式可以寻址最大位 32 GB 的内存空间。一旦超出 32 GB，就无法利用压缩指针技术，对象指针只能指向真实内存地址，这会造成空间的浪费。")]),e("blockquote",null,[to,e("p",null,[e("a",so,[t("https://wiki.openjdk.org/display/HotSpot/CompressedOops"),r(s)])]),e("p",null,[e("a",ro,[t("https://blog.csdn.net/liujianyangbj/article/details/108049482"),r(s)])])])]),no,e("ul",null,[e("li",null,[e("a",ao,[t("Elasticsearch 官方文档"),r(s)])]),e("li",null,[e("a",lo,[t("Elasticsearch 从入门到实践"),r(s)])]),e("li",null,[e("a",oo,[t("https://www.turing.com/interview-questions/elasticsearch"),r(s)])]),e("li",null,[e("a",io,[t("https://github.com/rkm-ravi94/awesome-devops-interview/blob/main/elasticsearch.md"),r(s)])])])])}const go=a(c,[["render",co],["__file","index.html.vue"]]);export{go as default};
