import{_ as u}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as r,c as d,d as c,w as a,a as n,b as s,e as o}from"./app-ce0d45df.js";const k={},g=o(`<h1 id="java-基础面试三" tabindex="-1"><a class="header-anchor" href="#java-基础面试三" aria-hidden="true">#</a> Java 基础面试三</h1><h2 id="java-泛型" tabindex="-1"><a class="header-anchor" href="#java-泛型" aria-hidden="true">#</a> Java 泛型</h2><h3 id="【中等】java-泛型的作用是什么" tabindex="-1"><a class="header-anchor" href="#【中等】java-泛型的作用是什么" aria-hidden="true">#</a> 【中等】Java 泛型的作用是什么？</h3><div class="hint-container info"><p class="hint-container-title">Java 泛型是什么？</p></div><p>泛型允许在<strong>类、接口、方法</strong>上使用<strong>类型参数（如 <code>&lt;T&gt;</code>）</strong>，使代码能适应多种数据类型，同时保证类型安全。</p><div class="hint-container info"><p class="hint-container-title">Java 泛型有什么用？</p></div><ul><li><strong>类型安全</strong>：编译时检查类型，避免运行时 <code>ClassCastException</code>。</li><li><strong>代码复用</strong>：同一套逻辑可处理不同数据类型（如 <code>List&lt;String&gt;</code> 和 <code>List&lt;Integer&gt;</code>）。</li><li><strong>消除强制转换</strong>：直接使用泛型类型，无需手动转换（如 <code>(String) list.get(0)</code>）。</li></ul><div class="hint-container info"><p class="hint-container-title">Java 泛型有什么特性？</p></div><ul><li><strong>类型擦除</strong>：泛型仅在编译时有效，运行时类型信息会被擦除（<code>List&lt;String&gt;</code> 运行时变成 <code>List</code>）。</li><li><strong>通配符 <code>&lt;?&gt;</code></strong>：表示未知类型（如 <code>List&lt;?&gt;</code> 可接受任意类型的 <code>List</code>）。</li><li><strong>界限限定</strong>： <ul><li><code>T extends Class</code>（限定类型范围，如 <code>&lt;T extends Number&gt;</code>）。</li><li><code>&lt;? super T&gt;</code>（支持父类类型）。</li></ul></li></ul><p><strong>简单示例</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 泛型类</span>
<span class="token keyword">class</span> <span class="token class-name">Box</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">T</span> content<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">T</span> content<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> content<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> content<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用</span>
<span class="token class-name">Box</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> box <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Box</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
box<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> value <span class="token operator">=</span> box<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 无需强制转换</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>一句话总结</strong>：泛型让代码更灵活、安全，减少冗余和运行时错误。</p><h3 id="【中等】什么是-java-泛型的上下界限定符" tabindex="-1"><a class="header-anchor" href="#【中等】什么是-java-泛型的上下界限定符" aria-hidden="true">#</a> 【中等】什么是 Java 泛型的上下界限定符？</h3><p>Java 泛型的上下界限定符用于<strong>限制泛型类型参数的范围</strong>，确保类型安全，提供更灵活的类型约束。</p><div class="hint-container info"><p class="hint-container-title">Java 什么是上界限定符？有什么用？</p></div><p><strong>上界限定符（<code>&lt;? extends T&gt;</code>）</strong> 限定泛型类型必须是 <code>T</code> <strong>或其子类</strong>（<code>T</code> 可以是类或接口）。</p><p><strong>特点</strong>：</p><ul><li><strong>只读安全</strong>：能安全读取数据（因为元素至少是 <code>T</code> 类型）。</li><li><strong>不能写入</strong>：无法确定具体子类型，防止类型污染。</li></ul><p><strong>示例</strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 接受 Number 或其子类（如 Integer, Double）</span>
<span class="token keyword">void</span> <span class="token function">printList</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Number</span> num <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 安全读取</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// list.add(1);  // 编译错误！无法安全写入</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">Java 什么是下界限定符？有什么用？</p></div><p>下界限定符（<code>&lt;? super T&gt;</code>）限定泛型类型必须是 <code>T</code> <strong>或其父类</strong>。</p><p><strong>特点</strong>：</p><ul><li><strong>可写入</strong>：能安全添加 <code>T</code> 及其子类的对象。</li><li><strong>读取受限</strong>：只能以 <code>Object</code> 类型读取（因为父类型不确定）。</li></ul><p><strong>示例</strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 接受 Integer 或其父类（如 Number, Object）</span>
<span class="token keyword">void</span> <span class="token function">addNumbers</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 安全写入 Integer</span>
    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Integer num = list.get(0);  // 编译错误！需强制转换</span>
    <span class="token class-name">Object</span> obj <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 只能以 Object 读取</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>通配符限定对比</strong></p><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">语法</th><th style="text-align:left;">读取</th><th style="text-align:left;">写入</th><th style="text-align:left;">应用</th></tr></thead><tbody><tr><td style="text-align:left;">上界</td><td style="text-align:left;"><code>? extends T</code></td><td style="text-align:left;">安全（作为T）</td><td style="text-align:left;">禁止</td><td style="text-align:left;">生产者场景</td></tr><tr><td style="text-align:left;">下界</td><td style="text-align:left;"><code>? super T</code></td><td style="text-align:left;">需转Object</td><td style="text-align:left;">安全（T及子类）</td><td style="text-align:left;">消费者场景</td></tr><tr><td style="text-align:left;">无界</td><td style="text-align:left;"><code>?</code></td><td style="text-align:left;">作为Object</td><td style="text-align:left;">禁止</td><td style="text-align:left;">完全不确定类型</td></tr></tbody></table><p><strong>小结</strong></p><ul><li><strong><code>extends T</code></strong>：安全读取，限制类型上界。如遍历 <code>List&lt;? extends Number&gt;</code>。</li><li><strong><code>super T</code></strong>：安全写入，限制类型下界。如 <code>Collections.copy(dest&lt;? super T&gt;, src&lt;? extends T&gt;)</code>。</li><li><strong>PECS 原则</strong>（Producer-Extends, Consumer-Super）指导何时用哪种限定符。 <ul><li><strong>生产者（Producer）</strong> 用 <code>extends</code>（输出数据）。</li><li><strong>消费者（Consumer）</strong> 用 <code>super</code>（输入数据）。</li></ul></li></ul><h3 id="【中等】泛型擦除的作用是什么" tabindex="-1"><a class="header-anchor" href="#【中等】泛型擦除的作用是什么" aria-hidden="true">#</a> 【中等】泛型擦除的作用是什么？</h3><p>泛型擦除是 Java 在<strong>编译时检查类型安全</strong>、<strong>运行时丢弃类型信息</strong>的折中设计，平衡了兼容性、性能和类型安全，但牺牲了部分运行时灵活性。</p><p><strong>泛型擦除</strong>是 Java 泛型的实现机制：</p><ul><li><strong>编译时</strong>：泛型类型（如 <code>&lt;T&gt;</code>、<code>List&lt;String&gt;</code>）会被检查，确保类型安全。</li><li><strong>运行时</strong>：所有泛型类型信息会被擦除，替换为<strong>原始类型（Raw Type）<strong>或</strong>边界类型（如 <code>Object</code>/<code>extends</code> 上限）</strong>。</li></ul><p><strong>泛型擦除规则</strong></p><table><thead><tr><th>泛型定义</th><th>擦除后类型</th><th>示例</th></tr></thead><tbody><tr><td><strong>无界限 <code>&lt;T&gt;</code></strong></td><td><code>Object</code></td><td><code>List&lt;T&gt;</code> → <code>List</code></td></tr><tr><td><strong>有界限 <code>&lt;T extends Number&gt;</code></strong></td><td><code>Number</code>（边界类型）</td><td><code>Box&lt;T&gt;</code> → <code>Box&lt;Number&gt;</code></td></tr><tr><td><strong>通配符 <code>&lt;?&gt;</code> / <code>&lt;? extends T&gt;</code></strong></td><td>边界类型</td><td><code>List&lt;?&gt;</code> → <code>List</code></td></tr><tr><td><strong><code>&lt;? super T&gt;</code></strong></td><td><code>Object</code></td><td><code>List&lt;? super Integer&gt;</code> → <code>List</code></td></tr></tbody></table><p><strong>泛型擦除作用</strong></p><ul><li><strong>兼容性</strong>：确保泛型代码能与旧版 Java（非泛型）字节码兼容。</li><li><strong>运行时效率</strong>：避免为每个泛型类型生成新类，减少 JVM 负担。</li><li><strong>简化设计</strong>：统一类型系统，避免 C++ 模板的复杂性。</li></ul><p><strong>泛型擦除的问题</strong></p><ul><li><p><strong>类型信息丢失</strong>：运行时无法获取泛型参数（如 <code>List&lt;String&gt;</code> 和 <code>List&lt;Integer&gt;</code> 运行时都是 <code>List</code>）。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 ArrayList，而非 ArrayList&lt;String&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>强制类型转换</strong>：编译器自动插入类型转换代码。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 编译后实际为：(String) list.get(0)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>不支持原生类型</strong>：不能直接使用 <code>List&lt;int&gt;</code>，必须用包装类（如 <code>List&lt;Integer&gt;</code>）。</p></li></ul><p><strong>绕过擦除的限制</strong></p><ul><li><p><strong>显式传递 <code>Class&lt;T&gt;</code></strong>：通过反射保留类型信息。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">T</span> instance <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 运行时知道具体类型</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>类型令牌（Type Token）</strong>：利用匿名子类捕获泛型类型。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">new</span> <span class="token class-name">TypeToken</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">// Guava 提供的方案</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p><strong>典型问题与解决方案</strong></p><table><thead><tr><th>问题场景</th><th>解决方案</th></tr></thead><tbody><tr><td>需要运行时获取泛型类型</td><td>传递 <code>Class&lt;T&gt;</code> 参数或使用 Type Token</td></tr><tr><td>泛型数组创建（<code>new T[]</code>）</td><td>使用 <code>Object[]</code> 转换或反射（<code>Array.newInstance</code>）</td></tr><tr><td>方法重载冲突（如 <code>void foo(List&lt;String&gt;)</code> 和 <code>void foo(List&lt;Integer&gt;)</code>）</td><td>编译报错（擦除后方法签名相同）</td></tr></tbody></table><h2 id="java-反射" tabindex="-1"><a class="header-anchor" href="#java-反射" aria-hidden="true">#</a> Java 反射</h2><h3 id="【简单】什么是反射-反射有什么作用" tabindex="-1"><a class="header-anchor" href="#【简单】什么是反射-反射有什么作用" aria-hidden="true">#</a> 【简单】什么是反射？反射有什么作用？</h3><p><strong>反射（Reflection）是 Java 提供的动态机制</strong>，允许程序在<strong>运行时</strong>：</p><ul><li><strong>获取类的信息</strong>（类名、方法、字段、注解等）</li><li><strong>操作类的成员</strong>（调用方法、访问/修改字段、创建对象等）</li><li><strong>绕过访问控制</strong>（如调用私有方法）</li></ul><p><strong>反射核心类</strong>：</p><ul><li><code>Class&lt;T&gt;</code>：表示类或接口</li><li><code>Method</code>：表示类的方法</li><li><code>Field</code>：表示类的字段</li><li><code>Constructor</code>：表示类的构造方法</li></ul><p><strong>反射的主要用途</strong></p><ul><li><strong>动态加载类</strong>（如插件化开发）</li><li><strong>框架设计</strong>（如 Spring 的依赖注入、Hibernate 的 ORM 映射）</li><li><strong>测试工具</strong>（如 Mockito 模拟对象）</li><li><strong>绕过访问限制</strong>（调试或特殊场景）</li></ul><p><strong>如何使用反射？</strong></p>`,53),v=n("strong",null,[s("获取 "),n("code",null,"Class"),s(" 对象")],-1),m=n("strong",null,"创建对象",-1),b=n("strong",null,"调用方法",-1),h=n("strong",null,"访问/修改字段",-1),f=n("strong",null,"获取注解信息",-1),y=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token comment"},"// 方式1：通过类名.class"),s(`
`),n("span",{class:"token class-name"},"Class"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},">")]),s(" strClass "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// 方式2：通过对象.getClass()"),s(`
`),n("span",{class:"token class-name"},"String"),s(" s "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"Hello"'),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token class-name"},"Class"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},">")]),s(" strClass2 "),n("span",{class:"token operator"},"="),s(" s"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getClass"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},'// 方式3：通过Class.forName("全限定类名")'),s(`
`),n("span",{class:"token class-name"},"Class"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},">")]),s(" strClass3 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Class"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"forName"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"java.lang.String"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("  "),n("span",{class:"token comment"},"// 需处理ClassNotFoundException"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),j=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token comment"},"// 方式1：直接调用无参构造（需强制类型转换）"),s(`
`),n("span",{class:"token class-name"},"Class"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},">")]),s(" clazz "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Class"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"forName"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"com.example.User"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token class-name"},"User"),s(" user "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"User"),n("span",{class:"token punctuation"},")"),s(" clazz"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"newInstance"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("  "),n("span",{class:"token comment"},"// 已过时，推荐用 getConstructor()"),s(`

`),n("span",{class:"token comment"},"// 方式2：调用带参构造"),s(`
`),n("span",{class:"token class-name"},"Constructor"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},">")]),s(" constructor "),n("span",{class:"token operator"},"="),s(" clazz"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getConstructor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token class-name"},"User"),s(" user "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"User"),n("span",{class:"token punctuation"},")"),s(" constructor"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"newInstance"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Alice"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"25"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),S=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token comment"},"// 获取方法（需方法名 + 参数类型）"),s(`
`),n("span",{class:"token class-name"},"Method"),s(" method "),n("span",{class:"token operator"},"="),s(" clazz"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getMethod"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"setName"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// 调用方法（需对象实例 + 参数值）"),s(`
method`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"invoke"),n("span",{class:"token punctuation"},"("),s("user"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"Bob"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("  "),n("span",{class:"token comment"},'// 相当于 user.setName("Bob")'),s(`

`),n("span",{class:"token comment"},"// 调用静态方法"),s(`
`),n("span",{class:"token class-name"},"Method"),s(" staticMethod "),n("span",{class:"token operator"},"="),s(" clazz"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getMethod"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"staticMethod"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
staticMethod`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"invoke"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("  "),n("span",{class:"token comment"},"// 静态方法传 null"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),x=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token comment"},"// 获取字段（包括私有字段）"),s(`
`),n("span",{class:"token class-name"},"Field"),s(" field "),n("span",{class:"token operator"},"="),s(" clazz"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getDeclaredField"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"name"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// 允许访问私有字段"),s(`
field`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setAccessible"),n("span",{class:"token punctuation"},"("),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("  "),n("span",{class:"token comment"},"// 关闭访问检查"),s(`

`),n("span",{class:"token comment"},"// 读取字段值"),s(`
`),n("span",{class:"token class-name"},"String"),s(" name "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},")"),s(" field"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("user"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("  "),n("span",{class:"token comment"},"// 相当于 user.name"),s(`

`),n("span",{class:"token comment"},"// 修改字段值"),s(`
field`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("user"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"Charlie"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("  "),n("span",{class:"token comment"},'// 相当于 user.name = "Charlie"'),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),w=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token comment"},"// 获取类/方法/字段上的注解"),s(`
`),n("span",{class:"token class-name"},"Annotation"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" annotations "),n("span",{class:"token operator"},"="),s(" clazz"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getAnnotations"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("clazz"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"isAnnotationPresent"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"MyAnnotation"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token class-name"},"MyAnnotation"),s(" anno "),n("span",{class:"token operator"},"="),s(" clazz"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getAnnotation"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"MyAnnotation"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),I=o('<h3 id="【简单】反射有什么优缺点" tabindex="-1"><a class="header-anchor" href="#【简单】反射有什么优缺点" aria-hidden="true">#</a> 【简单】反射有什么优缺点？</h3><table><thead><tr><th><strong>优点</strong></th><th><strong>缺点</strong></th></tr></thead><tbody><tr><td>动态性高（运行时决定行为）</td><td>性能较差（比直接调用慢）</td></tr><tr><td>可访问私有成员（突破封装）</td><td>代码可读性降低</td></tr><tr><td>支持泛型擦除后的类型操作</td><td>安全隐患（如破坏单例）</td></tr></tbody></table><p><strong>性能优化建议</strong>：</p><ul><li><strong>缓存 <code>Class</code>/<code>Method</code>/<code>Field</code> 对象</strong>：避免重复反射调用。</li><li><strong>优先使用 <code>getDeclaredXXX</code></strong>：比 <code>getXXX</code> 更高效（不检查继承链）。</li><li><strong>限制 <code>setAccessible(true)</code></strong>：频繁调用影响性能。</li></ul><p><strong>注意事项</strong>：</p><ul><li><strong>反射可以破坏封装性</strong>（如修改 <code>final</code> 字段、调用私有方法）。</li><li><strong>慎用 <code>setAccessible(true)</code></strong>：可能导致安全漏洞（如绕过权限检查）。</li></ul>',6),C={class:"hint-container tip"},O=n("p",{class:"hint-container-title"},"扩展",-1),J={href:"https://stackoverflow.com/questions/1392351/java-reflection-why-is-it-so-slow",target:"_blank",rel:"noopener noreferrer"},q=o('<h3 id="【中等】什么是-java-中的动态代理" tabindex="-1"><a class="header-anchor" href="#【中等】什么是-java-中的动态代理" aria-hidden="true">#</a> 【中等】什么是 Java 中的动态代理？</h3><p>动态代理是一种在<strong>运行时</strong>动态创建代理对象的技术，允许在不修改原始类代码的情况下，<strong>增强或拦截</strong>目标对象的方法调用。</p><p>Java 动态代理通过 <code>Proxy</code> 和 <code>InvocationHandler</code> 在运行时生成接口代理对象，<strong>非侵入式</strong>地实现方法拦截和功能增强，是 AOP 和框架设计的核心技术。</p><ul><li><strong><code>java.lang.reflect.Proxy</code></strong>：提供静态方法创建代理对象（核心方法：<code>Proxy.newProxyInstance()</code>）。</li><li><strong><code>java.lang.reflect.InvocationHandler</code></strong>：接口，实现代理逻辑（核心方法：<code>invoke()</code>）。</li></ul><p><strong>动态代理的特点</strong></p><ul><li><strong>运行时生成</strong>：代理类在运行时动态生成，无需手动编写。</li><li><strong>基于接口</strong>：只能代理接口（不能代理普通类）。</li><li><strong>非侵入性</strong>：无需修改原始代码即可增强功能。</li></ul><p><strong>应用场景</strong></p><ul><li><strong>AOP（面向切面编程）</strong>：如日志、事务管理（Spring AOP 基于动态代理）。</li><li><strong>远程方法调用（RPC）</strong>：如 Dubbo 的消费者代理。</li><li><strong>权限控制</strong>：拦截方法调用检查权限。</li></ul><p><strong>动态代理 vs 静态代理</strong></p><table><thead><tr><th><strong>对比项</strong></th><th><strong>动态代理</strong></th><th><strong>静态代理</strong></th></tr></thead><tbody><tr><td><strong>生成时机</strong></td><td>运行时动态生成</td><td>编译时手动编写</td></tr><tr><td><strong>维护成本</strong></td><td>低（自动适配接口）</td><td>高（需为每个类编写代理）</td></tr><tr><td><strong>灵活性</strong></td><td>高（通用逻辑集中处理）</td><td>低（逻辑分散）</td></tr></tbody></table><p><strong>局限性</strong></p><ul><li><strong>仅支持接口代理</strong>：不能代理普通类（CGLIB 可弥补此问题）。</li><li><strong>性能开销</strong>：反射调用比直接调用略慢（现代 JVM 已优化）。</li></ul><p><strong>扩展：CGLIB 动态代理</strong></p><ul><li><strong>原理</strong>：通过字节码技术生成目标类的子类代理。</li><li><strong>特点</strong>：可代理普通类，但无法代理 <code>final</code> 类/方法。</li></ul><h3 id="【中等】jdk-动态代理和-cglib-动态代理有什么区别" tabindex="-1"><a class="header-anchor" href="#【中等】jdk-动态代理和-cglib-动态代理有什么区别" aria-hidden="true">#</a> 【中等】JDK 动态代理和 CGLIB 动态代理有什么区别？</h3><p>JDK 动态代理 vs. CGLIB 动态代理：</p><table><thead><tr><th><strong>代理类型</strong></th><th><strong>JDK 动态代理</strong></th><th><strong>CGLIB 代理</strong></th></tr></thead><tbody><tr><td><strong>实现机制</strong></td><td>基于<strong>接口</strong>，运行时生成代理类（<code>$Proxy0</code>）</td><td>基于<strong>继承</strong>，生成目标类的子类</td></tr><tr><td><strong>技术依赖</strong></td><td>Java 反射 API（<code>Proxy</code>类）</td><td>ASM 字节码操作库</td></tr><tr><td><strong>限制条件</strong></td><td>目标类必须实现接口</td><td>无法代理 <code>final</code> 类/方法</td></tr><tr><td><strong>可代理目标</strong></td><td>只能代理<strong>接口</strong></td><td>可代理<strong>普通类</strong>和接口</td></tr></tbody></table><p><strong>性能对比</strong></p><table><thead><tr><th><strong>维度</strong></th><th><strong>JDK 动态代理</strong></th><th><strong>CGLIB 代理</strong></th></tr></thead><tbody><tr><td><strong>生成速度</strong></td><td>较快（反射生成）</td><td>较慢（需操作字节码）</td></tr><tr><td><strong>调用速度</strong></td><td>反射调用，略慢</td><td>直接方法调用，更快</td></tr><tr><td><strong>内存占用</strong></td><td>较小</td><td>较大（生成子类）</td></tr></tbody></table><blockquote><p><strong>注</strong>：现代 JVM 对反射做了优化，JDK 代理性能差距已不明显。</p></blockquote><p><strong>使用示例</strong></p>',21),A=n("strong",null,"JDK 动态代理",-1),L=n("strong",null,"CGLIB 代理",-1),B=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token comment"},"// 要求：目标类必须实现接口"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"interface"),s(),n("span",{class:"token class-name"},"UserService"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"save"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},"// 代理逻辑"),s(`
`),n("span",{class:"token class-name"},"InvocationHandler"),s(" handler "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),s("proxy"),n("span",{class:"token punctuation"},","),s(" method"),n("span",{class:"token punctuation"},","),s(" args"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"->"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"JDK 代理前置处理"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token class-name"},"Object"),s(" result "),n("span",{class:"token operator"},"="),s(" method"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"invoke"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" args"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"JDK 代理后置处理"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" result"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token class-name"},"UserService"),s(" proxy "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"UserService"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token class-name"},"Proxy"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"newProxyInstance"),n("span",{class:"token punctuation"},"("),s(`
    target`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getClass"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getClassLoader"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(`
    target`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getClass"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getInterfaces"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s("  "),n("span",{class:"token comment"},"// 关键：需传入接口"),s(`
    handler
`),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),T=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token comment"},"// 目标类无需实现接口"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"UserService"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"save"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"保存用户"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},"// 代理逻辑"),s(`
`),n("span",{class:"token class-name"},"Enhancer"),s(" enhancer "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Enhancer"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
enhancer`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setSuperclass"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"UserService"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
enhancer`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setCallback"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"MethodInterceptor"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"("),s("obj"),n("span",{class:"token punctuation"},","),s(" method"),n("span",{class:"token punctuation"},","),s(" args"),n("span",{class:"token punctuation"},","),s(" proxy"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"->"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"CGLIB 代理前置处理"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token class-name"},"Object"),s(" result "),n("span",{class:"token operator"},"="),s(" proxy"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"invokeSuper"),n("span",{class:"token punctuation"},"("),s("obj"),n("span",{class:"token punctuation"},","),s(" args"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("  "),n("span",{class:"token comment"},"// 直接调用父类方法"),s(`
    `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"CGLIB 代理后置处理"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" result"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token class-name"},"UserService"),s(" proxy "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"UserService"),n("span",{class:"token punctuation"},")"),s(" enhancer"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"create"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("  "),n("span",{class:"token comment"},"// 生成子类对象"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),_=o(`<p><strong>如何选择？</strong></p><table><thead><tr><th><strong>场景</strong></th><th><strong>推荐代理</strong></th><th><strong>理由</strong></th></tr></thead><tbody><tr><td>目标对象实现了接口</td><td>JDK 动态代理</td><td>轻量级，标准库支持</td></tr><tr><td>目标对象无接口</td><td>CGLIB</td><td>唯一选择</td></tr><tr><td>需要代理 <code>final</code> 方法</td><td>JDK 动态代理</td><td>CGLIB 无法代理 final 方法</td></tr><tr><td>高性能要求（如高频调用）</td><td>CGLIB</td><td>直接方法调用更快</td></tr><tr><td>避免额外依赖</td><td>JDK 动态代理</td><td>CGLIB 需引入第三方库</td></tr></tbody></table><p><strong>主流框架的选择</strong></p><ul><li><strong>Spring AOP</strong>： <ul><li>默认使用 <strong>JDK 动态代理</strong>（如果目标有接口）</li><li>无接口时自动切换为 <strong>CGLIB</strong></li><li>可通过 <code>@EnableAspectJAutoProxy(proxyTargetClass=true)</code> 强制使用 CGLIB</li></ul></li><li><strong>MyBatis</strong>：Mapper 接口代理使用 <strong>JDK 动态代理</strong></li></ul><p><strong>一句话总结</strong></p><ul><li><strong>JDK 动态代理</strong>：基于接口，反射实现，轻量但功能有限。</li><li><strong>CGLIB</strong>：基于继承，字节码增强，功能强但有 <code>final</code> 限制。</li><li><strong>选择依据</strong>：目标是否有接口、性能需求、是否允许第三方依赖。</li></ul><h2 id="java-注解" tabindex="-1"><a class="header-anchor" href="#java-注解" aria-hidden="true">#</a> Java 注解</h2><h3 id="【中等】java-中的注解原理是什么" tabindex="-1"><a class="header-anchor" href="#【中等】java-中的注解原理是什么" aria-hidden="true">#</a> 【中等】Java 中的注解原理是什么？</h3><p><strong>注解通过编译期处理（APT）或运行时反射实现元数据编程，其本质是特殊接口，由 JVM 或工具库按生命周期策略处理。</strong></p><p><strong>注解本质</strong></p><ul><li><strong>元数据标签</strong>：注解本质是继承自 <code>java.lang.annotation.Annotation</code> 的接口</li><li><strong>编译后保留策略</strong>：通过 <code>@Retention</code> 指定生命周期 <ul><li><code>SOURCE</code>：仅保留在源码（如 <code>@Override</code>）</li><li><code>CLASS</code>：保留到字节码（默认）</li><li><code>RUNTIME</code>：运行时可通过反射读取（如 <code>@SpringBootApplication</code>）</li></ul></li></ul><p><strong>核心处理机制</strong></p><ul><li><strong>编译期处理</strong>： <ul><li><strong>APT（Annotation Processing Tool）</strong>：在编译时生成代码（如 Lombok）</li><li><strong>编译器检查</strong>：如 <code>@Override</code> 验证方法重写</li></ul></li><li><strong>运行时处理</strong>： <ul><li><strong>反射读取</strong>：通过 <code>getAnnotation()</code> 获取注解信息（如 Spring 扫描 <code>@Component</code>）</li><li><strong>动态代理</strong>：结合 AOP 实现功能增强（如 <code>@Transactional</code>）</li></ul></li></ul><p><strong>关键技术点</strong></p><ul><li><strong>元注解</strong>：修饰注解的注解（如 <code>@Target</code> 指定作用目标）</li><li><strong>注解属性</strong>：本质是接口方法（需编译时常量值）</li><li><strong>字节码操作</strong>：ASM 等工具可直接修改字节码中的注解信息</li></ul><p><strong>应用场景</strong></p><ul><li><strong>框架配置</strong>：Spring 的 <code>@Autowired</code>、<code>@RequestMapping</code></li><li><strong>代码生成</strong>：Lombok 的 <code>@Data</code></li><li><strong>静态检查</strong>：<code>@Nullable</code>、<code>@Deprecated</code></li></ul><h2 id="java-spi" tabindex="-1"><a class="header-anchor" href="#java-spi" aria-hidden="true">#</a> Java SPI</h2><h3 id="【中等】什么是-spi-有什么用" tabindex="-1"><a class="header-anchor" href="#【中等】什么是-spi-有什么用" aria-hidden="true">#</a> 【中等】什么是 SPI，有什么用？</h3><p>SPI 通过<code>接口+配置文件</code>实现<strong>运行时服务发现</strong>，是解耦和扩展的利器，JDBC/日志等经典框架均基于此机制。</p><p>SPI 是 Java 提供的<strong>服务发现机制</strong>，通过<strong>接口与实现分离</strong>，实现：</p><ul><li><strong>运行时动态加载实现类</strong></li><li><strong>解耦接口与实现</strong></li><li><strong>可插拔式扩展</strong></li></ul><p><strong>核心组成</strong></p><table><thead><tr><th>组件</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td><strong>接口</strong></td><td>定义服务标准</td><td><code>java.sql.Driver</code></td></tr><tr><td><strong>实现类</strong></td><td>提供具体功能</td><td><code>com.mysql.cj.jdbc.Driver</code></td></tr><tr><td><strong>配置文件</strong></td><td>声明实现类</td><td><code>META-INF/services/接口全限定名</code></td></tr></tbody></table><p><strong>工作原理</strong></p><ul><li>在<code>META-INF/services/</code>下创建以<strong>接口全限定名</strong>命名的文件</li><li>文件中写入<strong>实现类全限定名</strong>（每行一个）</li><li>通过<code>ServiceLoader</code>动态加载实现类</li></ul><p><strong>主要应用场景</strong></p><ul><li><strong>JDBC 驱动加载</strong>（<code>DriverManager</code>）</li><li><strong>日志门面实现</strong>（SLF4J → Logback/Log4j）</li><li><strong>Spring Boot 自动配置</strong></li><li><strong>Dubbo 扩展点机制</strong></li></ul><p><strong>优势与局限</strong></p><table><thead><tr><th><strong>优势</strong></th><th><strong>局限</strong></th></tr></thead><tbody><tr><td>实现热插拔</td><td>配置文件需严格规范</td></tr><tr><td>解耦接口与实现</td><td>原生SPI会加载所有实现类（可能浪费资源）</td></tr><tr><td>扩展性强</td><td>无默认实现筛选机制</td></tr></tbody></table><p><strong>与API的区别</strong></p><table><thead><tr><th><strong>维度</strong></th><th><strong>SPI</strong></th><th><strong>API</strong></th></tr></thead><tbody><tr><td>调用方向</td><td>由实现方提供，调用方选择</td><td>由提供方定义，调用方使用</td></tr><tr><td>控制权</td><td>调用方控制</td><td>提供方控制</td></tr><tr><td>典型场景</td><td>JDBC驱动、日志实现</td><td>Java标准库</td></tr></tbody></table><p><strong>改进方案</strong></p><ul><li><strong>Dubbo SPI</strong>：增加按需加载、扩展点缓存等优化</li><li><strong>Spring Factories</strong>：<code>META-INF/spring.factories</code>机制</li></ul><h2 id="java-io" tabindex="-1"><a class="header-anchor" href="#java-io" aria-hidden="true">#</a> Java IO</h2><h3 id="【简单】什么是序列化-什么是反序列化" tabindex="-1"><a class="header-anchor" href="#【简单】什么是序列化-什么是反序列化" aria-hidden="true">#</a> 【简单】什么是序列化？什么是反序列化？</h3><p><strong>基本概念</strong></p><ul><li><strong>序列化</strong>：将对象转换为<strong>字节流</strong>（用于存储/传输）</li><li><strong>反序列化</strong>：将字节流恢复为对象</li></ul><p><strong>核心用途</strong></p><ul><li><strong>持久化存储</strong>（如保存到文件/数据库）</li><li><strong>网络传输</strong>（如RPC调用）</li><li><strong>深拷贝实现</strong>（通过序列化+反序列化）</li></ul><p><strong>Java实现方式</strong></p><table><thead><tr><th>方式</th><th>特点</th><th>示例</th></tr></thead><tbody><tr><td><strong><code>Serializable</code>接口</strong></td><td>标记接口，默认Java序列化</td><td><code>class User implements Serializable</code></td></tr><tr><td><strong><code>Externalizable</code>接口</strong></td><td>需手动实现读写逻辑</td><td>覆盖<code>writeExternal()</code>/<code>readExternal()</code></td></tr><tr><td><strong>第三方库</strong>（JSON/Protobuf等）</td><td>跨语言、高效</td><td>Gson、Jackson、Protobuf</td></tr></tbody></table><p><strong>关键注意事项</strong></p><ul><li><p><strong><code>serialVersionUID</code></strong>：显式声明版本号，避免反序列化失败</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>敏感字段处理</strong>：用<code>transient</code>跳过序列化</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>  <span class="token comment">// 不会被序列化</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>性能优化</strong>：</p><ul><li>避免序列化大对象</li><li>第三方库（如Protobuf）比Java原生序列化更快</li></ul></li></ul><p><strong>常见序列化协议对比</strong></p><table><thead><tr><th>协议</th><th>语言支持</th><th>可读性</th><th>性能</th><th>典型应用</th></tr></thead><tbody><tr><td><strong>Java原生</strong></td><td>仅Java</td><td>差</td><td>低</td><td>Java RMI</td></tr><tr><td><strong>JSON</strong></td><td>多语言</td><td>好</td><td>中</td><td>Web API</td></tr><tr><td><strong>Protobuf</strong></td><td>多语言</td><td>差</td><td>高</td><td>gRPC</td></tr><tr><td><strong>Hessian</strong></td><td>多语言</td><td>差</td><td>中</td><td>Dubbo</td></tr></tbody></table><p><strong>安全风险</strong></p><ul><li><strong>反序列化漏洞</strong>：恶意字节流可触发代码执行（需校验数据来源）</li><li><strong>解决方案</strong>： <ul><li>使用白名单控制反序列化类</li><li>替换为JSON等文本协议</li></ul></li></ul><h3 id="【中等】java-提供了哪些-io-方式" tabindex="-1"><a class="header-anchor" href="#【中等】java-提供了哪些-io-方式" aria-hidden="true">#</a> 【中等】Java 提供了哪些 IO 方式？</h3><p>Java 提供了多种 I/O（输入输出）方式，主要分为 <strong>传统 I/O（BIO）、NIO（New I/O）、AIO（异步 I/O）</strong> 三大类，并支持 <strong>文件操作、网络通信、序列化</strong> 等场景。以下是主要 I/O 方式的概述及要点：</p><div class="hint-container info"><p class="hint-container-title">什么是 BIO？</p></div><p>传统 I/O（BIO，Blocking I/O）是同步阻塞式 I/O，适用于连接数较少、延迟不敏感的场景。</p><p><strong>核心类</strong>：</p><ul><li><strong>字节流</strong>：<code>InputStream</code> / <code>OutputStream</code>（如 <code>FileInputStream</code>、<code>FileOutputStream</code>）</li><li><strong>字符流</strong>：<code>Reader</code> / <code>Writer</code>（如 <code>FileReader</code>、<code>FileWriter</code>）</li><li><strong>缓冲流</strong>：<code>BufferedReader</code>、<code>BufferedWriter</code>（提升性能）</li><li><strong>标准 I/O</strong>：<code>System.in</code>（输入）、<code>System.out</code>（输出）</li></ul><p><strong>示例</strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">&quot;file.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> line<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>缺点</strong>：每个连接需要独立的线程，高并发时资源消耗大。</p><div class="hint-container info"><p class="hint-container-title">什么是 NIO？</p></div><p>NIO（New I/O，Non-blocking I/O）是同步非阻塞 I/O，基于 <strong>通道（Channel）</strong> 和 <strong>缓冲区（Buffer）</strong>，支持多路复用（Selector）。</p><p><strong>核心类</strong>：</p><ul><li><strong>Buffer</strong>：<code>ByteBuffer</code>、<code>CharBuffer</code>（数据存储）</li><li><strong>Channel</strong>：<code>FileChannel</code>、<code>SocketChannel</code>、<code>ServerSocketChannel</code>（数据传输）</li><li><strong>Selector</strong>：监听多个通道的事件（如连接、读、写）</li></ul><p><strong>示例（NIO 文件复制）</strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileChannel</span> src <span class="token operator">=</span> <span class="token class-name">FileChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;src.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token class-name">FileChannel</span> dest <span class="token operator">=</span> <span class="token class-name">FileChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;dest.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardOpenOption</span><span class="token punctuation">.</span><span class="token constant">CREATE</span><span class="token punctuation">,</span> <span class="token class-name">StandardOpenOption</span><span class="token punctuation">.</span><span class="token constant">WRITE</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    src<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> src<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dest<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>优点</strong>：单线程可处理多个连接，适合高并发（如 Netty 框架底层）。</li><li><strong>缺点</strong>：编程复杂度较高。</li></ul><div class="hint-container info"><p class="hint-container-title">什么是 AIO？</p></div><p>AIO（Asynchronous I/O）是异步非阻塞 I/O，基于回调或 Future 机制，适用于高吞吐场景。</p><p><strong>核心类</strong>：</p><ul><li><code>AsynchronousFileChannel</code>（文件操作）</li><li><code>AsynchronousSocketChannel</code>（网络通信）</li><li><code>CompletionHandler</code>（回调接口）</li></ul><p><strong>示例（AIO 文件读取）</strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">AsynchronousFileChannel</span> fileChannel <span class="token operator">=</span> <span class="token class-name">AsynchronousFileChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;file.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
fileChannel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CompletionHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">completed</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> result<span class="token punctuation">,</span> <span class="token class-name">ByteBuffer</span> attachment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Read &quot;</span> <span class="token operator">+</span> result <span class="token operator">+</span> <span class="token string">&quot; bytes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">failed</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> exc<span class="token punctuation">,</span> <span class="token class-name">ByteBuffer</span> attachment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        exc<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>优点</strong>：真正异步，适合长连接、高吞吐场景（如大文件传输）。</li><li><strong>缺点</strong>：JDK 实现较少，Linux 支持有限（底层依赖 epoll）。</li></ul><div class="hint-container info"><p class="hint-container-title">有哪些常见的 IO 工具？</p></div><ul><li><strong>序列化</strong>：<code>ObjectInputStream</code> / <code>ObjectOutputStream</code>（Java 原生序列化）</li><li><strong>压缩流</strong>：<code>GZIPInputStream</code>、<code>ZipOutputStream</code></li><li><strong>内存映射文件</strong>：<code>MappedByteBuffer</code>（NIO 高性能文件访问）</li><li><strong>Files 工具类</strong>（Java 7+）：<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readAllLines</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;file.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 快速读取文件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><div class="hint-container info"><p class="hint-container-title">BIO vs. NIO vs. AIO？</p></div><table><thead><tr><th>类型</th><th>模型</th><th>适用场景</th><th>典型框架</th></tr></thead><tbody><tr><td>BIO</td><td>同步阻塞</td><td>低并发、简单 I/O</td><td>Java Socket</td></tr><tr><td>NIO</td><td>同步非阻塞</td><td>高并发、网络通信</td><td>Netty、Tomcat NIO</td></tr><tr><td>AIO</td><td>异步非阻塞</td><td>高吞吐、大文件操作</td><td>较少使用</td></tr></tbody></table><p><strong>选择建议</strong>：</p><ul><li><strong>BIO</strong>：简单文件操作或低并发场景。</li><li><strong>NIO</strong>：高并发网络编程（如 Netty）。</li><li><strong>AIO</strong>：需要真正异步 I/O 的场景（但实际使用较少）。</li></ul><p>如果需要更高层次的封装，可以考虑 <strong>Apache Commons IO</strong>、<strong>Guava</strong> 等工具库。</p><h3 id="【困难】nio-如何实现多路复用" tabindex="-1"><a class="header-anchor" href="#【困难】nio-如何实现多路复用" aria-hidden="true">#</a> 【困难】NIO 如何实现多路复用？</h3><div class="hint-container info"><p class="hint-container-title">Java NIO 的核心组件有哪些？</p></div><p>Java NIO 多路复用的核心是通过 <strong>Selector 轮询事件</strong> + <strong>非阻塞 Channel</strong> + <strong>Buffer 数据交换</strong>，允许单线程管理多个通道的 I/O 操作。这是构建高性能网络应用的基础，也是 Netty 等框架的底层原理。</p><p><strong>Java NIO 核心组件</strong></p><ul><li><strong>Selector（选择器）</strong>：核心多路复用器，可监控多个 <code>Channel</code> 的 I/O 事件（如连接、读、写） <ul><li>通过 <code>Selector.open()</code> 创建</li><li>一个 <code>Selector</code> 可绑定多个 <code>Channel</code></li></ul></li><li><strong>Channel（通道）</strong>：非阻塞 I/O 操作的抽象，支持读写。主要类型： <ul><li><code>SocketChannel</code>：TCP 网络通信</li><li><code>ServerSocketChannel</code>：监听 TCP 连接</li><li><code>FileChannel</code>：文件 I/O（不支持 Selector）</li></ul></li><li><strong>Buffer（缓冲区）</strong>：数据容器（如 <code>ByteBuffer</code>），<code>Channel</code> 通过 <code>Buffer</code> 读写数据。</li></ul><div class="hint-container info"><p class="hint-container-title">Java NIO 多路复用的实现步骤是怎样的？</p></div><p><strong>多路复用实现步骤</strong></p><p><strong>(1) 创建 Selector 并注册 Channel</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Selector</span> selector <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ServerSocketChannel</span> serverChannel <span class="token operator">=</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
serverChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 必须设为非阻塞</span>
serverChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span><span class="token constant">OP_ACCEPT</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 注册监听事件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>(2) 事件类型</strong></p><ul><li><code>SelectionKey.OP_ACCEPT</code>：接受连接（<code>ServerSocketChannel</code>）</li><li><code>SelectionKey.OP_CONNECT</code>：连接就绪（<code>SocketChannel</code>）</li><li><code>SelectionKey.OP_READ</code>：数据可读</li><li><code>SelectionKey.OP_WRITE</code>：数据可写</li></ul><p><strong>(3) 事件轮询</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> readyChannels <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 阻塞直到有事件就绪</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>readyChannels <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>

    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> selectedKeys <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> keyIterator <span class="token operator">=</span> selectedKeys<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>keyIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SelectionKey</span> key <span class="token operator">=</span> keyIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 处理新连接</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 处理读事件</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isWritable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 处理写事件</span>
        <span class="token punctuation">}</span>

        keyIterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 必须移除已处理的键</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">Java NIO 的关键机制有哪些？</p></div><p><strong>(1) 非阻塞模式</strong></p><ul><li>Channel 必须设置为非阻塞：<code>channel.configureBlocking(false)</code></li><li>避免单线程因 I/O 操作阻塞</li></ul><p><strong>(2) 事件驱动</strong></p><ul><li>Selector 通过操作系统级轮询（如 Linux 的 <code>epoll</code>）监听事件</li><li>仅处理活跃的 <code>Channel</code>，避免无效遍历</li></ul><p><strong>(3) SelectionKey</strong></p><ul><li>绑定 Channel 与 Selector 的关系</li><li>可通过 <code>key.attachment()</code> 附加自定义对象（如会话状态）</li></ul><div class="hint-container info"><p class="hint-container-title">Java NIO 的底层原理是什么？</p></div><ul><li><strong>Linux</strong>：基于 <code>epoll</code> 实现（高效监控大量文件描述符）</li><li><strong>Windows</strong>：基于 <code>IOCP</code>（完成端口）</li><li>相比传统 BIO 的线程池模型，NIO 单线程可处理数千连接</li></ul><p><strong>NIO 优点</strong></p><ul><li>单线程管理多连接，资源消耗低</li><li>高并发支持（如 Netty 框架底层依赖 NIO）</li><li>避免线程上下文切换开销</li></ul><p><strong>NIO 适用场景</strong></p><ul><li>高并发网络服务（如聊天服务器、API 网关）</li><li>需要长连接的应用（如 WebSocket）</li><li>大数据量、低延迟的 I/O 操作</li></ul><h2 id="java-语法糖" tabindex="-1"><a class="header-anchor" href="#java-语法糖" aria-hidden="true">#</a> Java 语法糖</h2><h3 id="【中等】java-中有哪些常见的语法糖" tabindex="-1"><a class="header-anchor" href="#【中等】java-中有哪些常见的语法糖" aria-hidden="true">#</a> 【中等】Java 中有哪些常见的语法糖？</h3><p><strong>语法糖（Syntactic sugar）</strong> 代指的是编程语言为了方便程序员开发程序而设计的一种特殊语法，这种语法对编程语言的功能并没有影响。实现相同的功能，基于语法糖写出来的代码往往更简单简洁且更易阅读。</p><p>Java 中最常用的语法糖主要有泛型、自动拆装箱、变长参数、枚举、内部类、增强 for 循环、try-with-resources 语法、lambda 表达式等。所有这些语法糖在编译阶段都会被&quot;脱糖&quot;(desugar)，即转换为更基础的Java语法结构。可以使用<code>javap -c</code>命令查看字节码来验证这一点。语法糖虽然不增加语言功能，但能显著提高代码的可读性和编写效率，是Java语言不断演进的重要组成部分。</p><p><strong>自动装箱与拆箱 (Autoboxing/Unboxing)</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 自动装箱</span>
<span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment">// 实际编译为 Integer.valueOf(10)</span>

<span class="token comment">// 自动拆箱</span>
<span class="token keyword">int</span> n <span class="token operator">=</span> i<span class="token punctuation">;</span>      <span class="token comment">// 实际编译为 i.intValue()</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>增强 for 循环 (foreach)</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 语法糖形式</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 实际编译为迭代器模式</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> s <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>变长参数 (Varargs)</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> arg <span class="token operator">:</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 实际编译为数组参数</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>数值字面量下划线</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> million <span class="token operator">=</span> <span class="token number">1_000_000</span><span class="token punctuation">;</span>  <span class="token comment">// 编译后等同于 1000000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>字符串拼接</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;b&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 编译优化为</span>
<span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 变量拼接会转为 StringBuilder</span>
<span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> result <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token comment">// 编译为</span>
<span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>switch 支持字符串 (Java 7+)</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> fruit <span class="token operator">=</span> <span class="token string">&quot;apple&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">switch</span> <span class="token punctuation">(</span>fruit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string">&quot;apple&quot;</span><span class="token operator">:</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;It&#39;s an apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token comment">// 实际编译为基于hashCode()和equals()的比较</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>默认构造方法</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// 如果没有显式定义构造方法，编译器会自动添加无参构造方法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>枚举类 (Java 5+)</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">enum</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span> <span class="token constant">RED</span><span class="token punctuation">,</span> <span class="token constant">GREEN</span><span class="token punctuation">,</span> <span class="token constant">BLUE</span> <span class="token punctuation">}</span>
<span class="token comment">// 实际编译为继承java.lang.Enum的类</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>内部类访问外部类成员</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span>
        <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 实际通过 Outer.this.x 访问</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方法引用 (Java 8+)</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 编译为lambda表达式</span>
list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>钻石操作符 (Diamond Operator, Java 7+)</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 类型推断</span>
<span class="token comment">// Java 7之前需要</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>集合字面量 (Java 9+ 的List.of等)</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> <span class="token class-name">Set</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Lambda 表达式 (Java 8+)</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Lambda表达式</span>
<span class="token class-name">Runnable</span> r <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 实际生成实现Runnable的匿名类</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>try-with-resources (Java 7+)</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;file.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 使用资源</span>
<span class="token punctuation">}</span>  <span class="token comment">// 自动调用close()</span>
<span class="token comment">// 编译为try-finally块</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>接口中的默认方法和静态方法 (Java 8+)</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">MyInterface</span> <span class="token punctuation">{</span>
    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">defaultMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Default method&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Static method&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>记录类 (Record, Java 14+)</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">record</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// 编译后自动生成:</span>
<span class="token comment">// - 私有final字段x和y</span>
<span class="token comment">// - 公共构造方法</span>
<span class="token comment">// - 访问器方法x()和y()</span>
<span class="token comment">// - equals(), hashCode(), toString()</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>instanceof</code> 模式匹配</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 可以直接使用s</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>文本块 (Text Blocks, Java 15+)</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> html <span class="token operator">=</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;
    &lt;html&gt;
        &lt;body&gt;
            &lt;p&gt;Hello, world&lt;/p&gt;
        &lt;/body&gt;
    &lt;/html&gt;
    &quot;&quot;&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,144);function N(P,D){const p=l("CodeTabs"),i=l("ExternalLinkIcon");return r(),d("div",null,[g,c(p,{id:"498",data:[{id:"<strong>获取 <code v-pre>Class</code> 对象</strong>"},{id:"<strong>创建对象</strong>"},{id:"<strong>调用方法</strong>"},{id:"<strong>访问/修改字段</strong>"},{id:"<strong>获取注解信息</strong>"}],"tab-id":"反射使用示例"},{title0:a(({value:t,isActive:e})=>[v]),title1:a(({value:t,isActive:e})=>[m]),title2:a(({value:t,isActive:e})=>[b]),title3:a(({value:t,isActive:e})=>[h]),title4:a(({value:t,isActive:e})=>[f]),tab0:a(({value:t,isActive:e})=>[y]),tab1:a(({value:t,isActive:e})=>[j]),tab2:a(({value:t,isActive:e})=>[S]),tab3:a(({value:t,isActive:e})=>[x]),tab4:a(({value:t,isActive:e})=>[w]),_:1}),I,n("div",C,[O,n("p",null,[n("a",J,[s("Java Reflection: Why is it so slow?"),c(i)]),s(" 。")])]),q,c(p,{id:"868",data:[{id:"<strong>JDK 动态代理</strong>"},{id:"<strong>CGLIB 代理</strong>"}],"tab-id":"反射使用示例"},{title0:a(({value:t,isActive:e})=>[A]),title1:a(({value:t,isActive:e})=>[L]),tab0:a(({value:t,isActive:e})=>[B]),tab1:a(({value:t,isActive:e})=>[T]),_:1}),_])}const R=u(k,[["render",N],["__file","index.html.vue"]]);export{R as default};
