const e=JSON.parse('{"key":"v-9e2c97ca","path":"/pages/405c2e2e/","title":"Docker 面试","lang":"zh-CN","frontmatter":{"icon":"devicon:docker-wordmark","title":"Docker 面试","date":"2025-09-25T07:49:46.000Z","order":99,"permalink":"/pages/405c2e2e/","category":["DevOps","工具","Docker"],"tag":["DevOps","Docker","面试"],"description":"Docker 面试 Docker 简介 【简单】什么是 Docker？为什么需要 Docker？ Docker 是一个容器化平台，用于将应用及其所有依赖打包成一个标准化、轻量级、可移植的单元（容器），从而实现 “一次构建，处处运行”。 核心价值 环境一致性：彻底解决“在我电脑上能跑”的问题，保证开发、测试、生产环境绝对一致。 隔离性：每个容器拥有独立的文件系统、网络和进程空间，应用间互不干扰。 轻量高效：与传统虚拟机相比，容器直接共享主机内核，启动更快（秒级）、资源占用更少（MB 级）。 DevOps 基石：极大简化了持续集成/持续部署 (CI/CD) 流程，是实现微服务架构的理想载体。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/405c2e2e/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"Docker 面试"}],["meta",{"property":"og:description","content":"Docker 面试 Docker 简介 【简单】什么是 Docker？为什么需要 Docker？ Docker 是一个容器化平台，用于将应用及其所有依赖打包成一个标准化、轻量级、可移植的单元（容器），从而实现 “一次构建，处处运行”。 核心价值 环境一致性：彻底解决“在我电脑上能跑”的问题，保证开发、测试、生产环境绝对一致。 隔离性：每个容器拥有独立的文件系统、网络和进程空间，应用间互不干扰。 轻量高效：与传统虚拟机相比，容器直接共享主机内核，启动更快（秒级）、资源占用更少（MB 级）。 DevOps 基石：极大简化了持续集成/持续部署 (CI/CD) 流程，是实现微服务架构的理想载体。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-24T23:52:19.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"DevOps"}],["meta",{"property":"article:tag","content":"Docker"}],["meta",{"property":"article:tag","content":"面试"}],["meta",{"property":"article:published_time","content":"2025-09-25T07:49:46.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-24T23:52:19.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker 面试\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-09-25T07:49:46.000Z\\",\\"dateModified\\":\\"2025-09-24T23:52:19.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"Docker 简介","slug":"docker-简介","link":"#docker-简介","children":[{"level":3,"title":"【简单】什么是 Docker？为什么需要 Docker？","slug":"【简单】什么是-docker-为什么需要-docker","link":"#【简单】什么是-docker-为什么需要-docker","children":[]},{"level":3,"title":"【简单】Docker 有哪些核心概念和组件？","slug":"【简单】docker-有哪些核心概念和组件","link":"#【简单】docker-有哪些核心概念和组件","children":[]},{"level":3,"title":"【简单】Docker 有哪些核心组件？","slug":"【简单】docker-有哪些核心组件","link":"#【简单】docker-有哪些核心组件","children":[]},{"level":3,"title":"【中等】Docker 的工作原理是什么？","slug":"【中等】docker-的工作原理是什么","link":"#【中等】docker-的工作原理是什么","children":[]},{"level":3,"title":"【困难】如何保证 Docker 沙箱执行时的安全性？","slug":"【困难】如何保证-docker-沙箱执行时的安全性","link":"#【困难】如何保证-docker-沙箱执行时的安全性","children":[]}]},{"level":2,"title":"镜像和容器","slug":"镜像和容器","link":"#镜像和容器","children":[{"level":3,"title":"【简单】Docker 中的镜像和容器有什么区别？","slug":"【简单】docker-中的镜像和容器有什么区别","link":"#【简单】docker-中的镜像和容器有什么区别","children":[]},{"level":3,"title":"【简单】Docker 中如何实现镜像的推送和拉取？","slug":"【简单】docker-中如何实现镜像的推送和拉取","link":"#【简单】docker-中如何实现镜像的推送和拉取","children":[]},{"level":3,"title":"【简单】Docker 容器如何实现资源限制（如 CPU 和内存）？","slug":"【简单】docker-容器如何实现资源限制-如-cpu-和内存","link":"#【简单】docker-容器如何实现资源限制-如-cpu-和内存","children":[]},{"level":3,"title":"【中等】Docker 镜像的多层结构是如何实现的？","slug":"【中等】docker-镜像的多层结构是如何实现的","link":"#【中等】docker-镜像的多层结构是如何实现的","children":[]}]},{"level":2,"title":"Docker 构建","slug":"docker-构建","link":"#docker-构建","children":[{"level":3,"title":"【简单】如何构建 Docker 镜像？","slug":"【简单】如何构建-docker-镜像","link":"#【简单】如何构建-docker-镜像","children":[]},{"level":3,"title":"【中等】Docker 中的多阶段构建有什么优势？","slug":"【中等】docker-中的多阶段构建有什么优势","link":"#【中等】docker-中的多阶段构建有什么优势","children":[]},{"level":3,"title":"【中等】在 Docker 中，如何构建多阶段镜像以减少镜像体积？","slug":"【中等】在-docker-中-如何构建多阶段镜像以减少镜像体积","link":"#【中等】在-docker-中-如何构建多阶段镜像以减少镜像体积","children":[]}]},{"level":2,"title":"实践","slug":"实践","link":"#实践","children":[{"level":3,"title":"【简单】在 Docker 中，如何管理和查看容器日志？","slug":"【简单】在-docker-中-如何管理和查看容器日志","link":"#【简单】在-docker-中-如何管理和查看容器日志","children":[]},{"level":3,"title":"【中等】在 Docker 中，如何进行数据卷管理？","slug":"【中等】在-docker-中-如何进行数据卷管理","link":"#【中等】在-docker-中-如何进行数据卷管理","children":[]},{"level":3,"title":"【中等】如何在 Docker 中实现数据卷（volume）的持久化存储？","slug":"【中等】如何在-docker-中实现数据卷-volume-的持久化存储","link":"#【中等】如何在-docker-中实现数据卷-volume-的持久化存储","children":[]},{"level":3,"title":"【中等】在 Docker 中，如何优化容器启动时间？","slug":"【中等】在-docker-中-如何优化容器启动时间","link":"#【中等】在-docker-中-如何优化容器启动时间","children":[]},{"level":3,"title":"【中等】在 Docker 中，如何实现容器之间的通信？","slug":"【中等】在-docker-中-如何实现容器之间的通信","link":"#【中等】在-docker-中-如何实现容器之间的通信","children":[]},{"level":3,"title":"【中等】在 Docker 中，如何配置和管理环境变量？","slug":"【中等】在-docker-中-如何配置和管理环境变量","link":"#【中等】在-docker-中-如何配置和管理环境变量","children":[]},{"level":3,"title":"【中等】Docker Compose 的主要作用是什么？","slug":"【中等】docker-compose-的主要作用是什么","link":"#【中等】docker-compose-的主要作用是什么","children":[]},{"level":3,"title":"【中等】在 CI/CD 流程中，如何使用 Jenkins 与 Docker 集成？","slug":"【中等】在-ci-cd-流程中-如何使用-jenkins-与-docker-集成","link":"#【中等】在-ci-cd-流程中-如何使用-jenkins-与-docker-集成","children":[]}]},{"level":2,"title":"Docker 网络","slug":"docker-网络","link":"#docker-网络","children":[{"level":3,"title":"【中等】在 Docker 中，如何配置容器的网络？","slug":"【中等】在-docker-中-如何配置容器的网络","link":"#【中等】在-docker-中-如何配置容器的网络","children":[]},{"level":3,"title":"【中等】Docker 支持哪些网络模型？","slug":"【中等】docker-支持哪些网络模型","link":"#【中等】docker-支持哪些网络模型","children":[]},{"level":3,"title":"【中等】Docker 的 bridge 网络模式如何配置和使用？","slug":"【中等】docker-的-bridge-网络模式如何配置和使用","link":"#【中等】docker-的-bridge-网络模式如何配置和使用","children":[]},{"level":3,"title":"【中等】Docker 中的 overlay 网络模式如何配置和使用？","slug":"【中等】docker-中的-overlay-网络模式如何配置和使用","link":"#【中等】docker-中的-overlay-网络模式如何配置和使用","children":[]}]},{"level":2,"title":"Docker 编排","slug":"docker-编排","link":"#docker-编排","children":[{"level":3,"title":"【中等】Docker 的容器编排有哪些常见工具？","slug":"【中等】docker-的容器编排有哪些常见工具","link":"#【中等】docker-的容器编排有哪些常见工具","children":[]},{"level":3,"title":"【中等】什么是 Docker Swarm？","slug":"【中等】什么是-docker-swarm","link":"#【中等】什么是-docker-swarm","children":[]},{"level":3,"title":"【中等】如何使用 Docker Swarm 部署一个高可用集群？","slug":"【中等】如何使用-docker-swarm-部署一个高可用集群","link":"#【中等】如何使用-docker-swarm-部署一个高可用集群","children":[]},{"level":3,"title":"【中等】Docker Swarm 和 Kubernetes 在集群管理上的主要区别是什么？","slug":"【中等】docker-swarm-和-kubernetes-在集群管理上的主要区别是什么","link":"#【中等】docker-swarm-和-kubernetes-在集群管理上的主要区别是什么","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1758757939000,"updatedTime":1758757939000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":1}]},"readingTime":{"minutes":18.99,"words":5697},"filePathRelative":"04.DevOps/工具/Docker/Docker_面试.md","localizedDate":"2025年9月25日","excerpt":"<h1> Docker 面试</h1>\\n<h2> Docker 简介</h2>\\n<h3> 【简单】什么是 Docker？为什么需要 Docker？</h3>\\n<p>Docker 是一个<strong>容器化平台</strong>，用于将应用及其所有依赖打包成一个标准化、轻量级、可移植的单元（容器），从而实现 <strong>“一次构建，处处运行”</strong>。</p>\\n<p><strong>核心价值</strong></p>\\n<ul>\\n<li><strong>环境一致性</strong>：彻底解决“在我电脑上能跑”的问题，保证开发、测试、生产环境绝对一致。</li>\\n<li><strong>隔离性</strong>：每个容器拥有独立的文件系统、网络和进程空间，应用间互不干扰。</li>\\n<li><strong>轻量高效</strong>：与传统虚拟机相比，<strong>容器直接共享主机内核</strong>，启动更快（秒级）、资源占用更少（MB 级）。</li>\\n<li><strong>DevOps 基石</strong>：极大简化了持续集成/持续部署 (CI/CD) 流程，是实现微服务架构的理想载体。</li>\\n</ul>","autoDesc":true}');export{e as data};
