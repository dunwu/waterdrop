const e=JSON.parse('{"key":"v-f4dc07ce","path":"/pages/e8c61c82/","title":"设计模式之外观模式","lang":"zh-CN","frontmatter":{"title":"设计模式之外观模式","date":"2015-01-19T15:15:00.000Z","order":11,"permalink":"/pages/e8c61c82/","category":["设计","设计模式"],"tag":["设计","设计模式"],"description":"设计模式之外观模式 意图 外观模式 (Facade) 是一种结构型设计模式， 为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。 外观模式为复杂子系统提供了一个简单接口，并不为子系统添加新的功能和行为。 外观模式实现了子系统与客户之间的松耦合关系。 外观模式没有封装子系统的类，只是提供了简单的接口。 如果应用需要，它并不限制客户使用子系统类。因此可以再系统易用性与通用性之间选择。 外观模式注重的是简化接口，它更多的时候是从架构的层次去看整个系统，而并非单个类的层次。","head":[["meta",{"property":"og:url","content":"https://dunwu.github.io/waterdrop/waterdrop/pages/e8c61c82/"}],["meta",{"property":"og:site_name","content":"钝悟"}],["meta",{"property":"og:title","content":"设计模式之外观模式"}],["meta",{"property":"og:description","content":"设计模式之外观模式 意图 外观模式 (Facade) 是一种结构型设计模式， 为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。 外观模式为复杂子系统提供了一个简单接口，并不为子系统添加新的功能和行为。 外观模式实现了子系统与客户之间的松耦合关系。 外观模式没有封装子系统的类，只是提供了简单的接口。 如果应用需要，它并不限制客户使用子系统类。因此可以再系统易用性与通用性之间选择。 外观模式注重的是简化接口，它更多的时候是从架构的层次去看整个系统，而并非单个类的层次。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-15T00:29:21.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"设计"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2015-01-19T15:15:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-15T00:29:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式之外观模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2015-01-19T15:15:00.000Z\\",\\"dateModified\\":\\"2025-09-15T00:29:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/waterdrop\\"}]}"]]},"headers":[{"level":2,"title":"意图","slug":"意图","link":"#意图","children":[]},{"level":2,"title":"适用场景","slug":"适用场景","link":"#适用场景","children":[]},{"level":2,"title":"结构","slug":"结构","link":"#结构","children":[{"level":3,"title":"结构说明","slug":"结构说明","link":"#结构说明","children":[]},{"level":3,"title":"结构代码范式","slug":"结构代码范式","link":"#结构代码范式","children":[]}]},{"level":2,"title":"伪代码","slug":"伪代码","link":"#伪代码","children":[]},{"level":2,"title":"案例","slug":"案例","link":"#案例","children":[]},{"level":2,"title":"与其他模式的关系","slug":"与其他模式的关系","link":"#与其他模式的关系","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1757896161000,"updatedTime":1757896161000,"contributors":[{"name":"dunwu","email":"forbreak@163.com","commits":1}]},"readingTime":{"minutes":5.76,"words":1728},"filePathRelative":"03.设计/设计模式/外观模式.md","localizedDate":"2015年1月19日","excerpt":"<h1> 设计模式之外观模式</h1>\\n<h2> 意图</h2>\\n<p><strong>外观模式</strong> (Facade) 是一种结构型设计模式， 为子系统中的<strong>一组接口</strong>提供一个一致的界面，此模式定义了<strong>一个高层接口</strong>，这个接口使得这一子系统更加容易使用。</p>\\n<ul>\\n<li>外观模式为复杂子系统提供了一个简单接口，并不为子系统添加新的功能和行为。</li>\\n<li>外观模式实现了子系统与客户之间的松耦合关系。</li>\\n<li>外观模式没有封装子系统的类，只是提供了简单的接口。 如果应用需要，它并不限制客户使用子系统类。因此可以再系统易用性与通用性之间选择。</li>\\n<li>外观模式注重的是简化接口，它更多的时候是从架构的层次去看整个系统，而并非单个类的层次。</li>\\n</ul>","autoDesc":true}');export{e as data};
